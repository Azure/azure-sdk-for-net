// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.Storage.Blobs.Models
{
    public partial class BlobStaticWebsite : IXmlSerializable, IModelSerializable<BlobStaticWebsite>
    {
        private void Serialize(XmlWriter writer, string nameHint, ModelSerializerOptions options)
        {
            writer.WriteStartElement(nameHint ?? "StaticWebsite");
            writer.WriteStartElement("Enabled");
            writer.WriteValue(Enabled);
            writer.WriteEndElement();
            if (Optional.IsDefined(IndexDocument))
            {
                writer.WriteStartElement("IndexDocument");
                writer.WriteValue(IndexDocument);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(ErrorDocument404Path))
            {
                writer.WriteStartElement("ErrorDocument404Path");
                writer.WriteValue(ErrorDocument404Path);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(DefaultIndexDocumentPath))
            {
                writer.WriteStartElement("DefaultIndexDocumentPath");
                writer.WriteValue(DefaultIndexDocumentPath);
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint) => Serialize(writer, nameHint, ModelSerializerOptions.DefaultWireOptions);

        internal static BlobStaticWebsite DeserializeBlobStaticWebsite(XElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;
            bool enabled = default;
            string indexDocument = default;
            string errorDocument404Path = default;
            string defaultIndexDocumentPath = default;
            if (element.Element("Enabled") is XElement enabledElement)
            {
                enabled = (bool)enabledElement;
            }
            if (element.Element("IndexDocument") is XElement indexDocumentElement)
            {
                indexDocument = (string)indexDocumentElement;
            }
            if (element.Element("ErrorDocument404Path") is XElement errorDocument404PathElement)
            {
                errorDocument404Path = (string)errorDocument404PathElement;
            }
            if (element.Element("DefaultIndexDocumentPath") is XElement defaultIndexDocumentPathElement)
            {
                defaultIndexDocumentPath = (string)defaultIndexDocumentPathElement;
            }
            return new BlobStaticWebsite(enabled, indexDocument, errorDocument404Path, defaultIndexDocumentPath, default);
        }

        BinaryData IModelSerializable<BlobStaticWebsite>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<BlobStaticWebsite>(this, options.Format);

            options ??= ModelSerializerOptions.DefaultWireOptions;
            using MemoryStream stream = new MemoryStream();
            using XmlWriter writer = XmlWriter.Create(stream);
            Serialize(writer, null, options);
            writer.Flush();
            if (stream.Position > int.MaxValue)
            {
                return BinaryData.FromStream(stream);
            }
            else
            {
                return new BinaryData(stream.GetBuffer().AsMemory(0, (int)stream.Position));
            }
        }

        BlobStaticWebsite IModelSerializable<BlobStaticWebsite>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<BlobStaticWebsite>(this, options.Format);

            return DeserializeBlobStaticWebsite(XElement.Load(data.ToStream()), options);
        }

        /// <summary> Converts a <see cref="BlobStaticWebsite"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="BlobStaticWebsite"/> to convert. </param>
        public static implicit operator RequestContent(BlobStaticWebsite model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="BlobStaticWebsite"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator BlobStaticWebsite(Response response)
        {
            if (response is null)
            {
                return null;
            }

            return DeserializeBlobStaticWebsite(XElement.Load(response.ContentStream), ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
