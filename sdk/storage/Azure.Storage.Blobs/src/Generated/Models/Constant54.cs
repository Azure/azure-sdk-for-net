// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Storage.Blobs.Models
{
    /// <summary> The Constant54. </summary>
    public readonly partial struct Constant54 : IEquatable<Constant54>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Constant54"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Constant54(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ImmutabilityPoliciesValue = "immutabilityPolicies";

        /// <summary> immutabilityPolicies. </summary>
        public static Constant54 ImmutabilityPolicies { get; } = new Constant54(ImmutabilityPoliciesValue);
        /// <summary> Determines if two <see cref="Constant54"/> values are the same. </summary>
        public static bool operator ==(Constant54 left, Constant54 right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Constant54"/> values are not the same. </summary>
        public static bool operator !=(Constant54 left, Constant54 right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="Constant54"/>. </summary>
        public static implicit operator Constant54(string value) => new Constant54(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Constant54 other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Constant54 other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
