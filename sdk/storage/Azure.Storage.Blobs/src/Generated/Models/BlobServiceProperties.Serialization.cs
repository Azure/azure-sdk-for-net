// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace Azure.Storage.Blobs.Models
{
    public partial class BlobServiceProperties : IXmlSerializable, IPersistableModel<BlobServiceProperties>
    {
        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "StorageServiceProperties");
            if (Optional.IsDefined(Logging))
            {
                writer.WriteObjectValue(Logging, "Logging");
            }
            if (Optional.IsDefined(HourMetrics))
            {
                writer.WriteObjectValue(HourMetrics, "HourMetrics");
            }
            if (Optional.IsDefined(MinuteMetrics))
            {
                writer.WriteObjectValue(MinuteMetrics, "MinuteMetrics");
            }
            if (Optional.IsDefined(DefaultServiceVersion))
            {
                writer.WriteStartElement("DefaultServiceVersion");
                writer.WriteValue(DefaultServiceVersion);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(DeleteRetentionPolicy))
            {
                writer.WriteObjectValue(DeleteRetentionPolicy, "DeleteRetentionPolicy");
            }
            if (Optional.IsDefined(StaticWebsite))
            {
                writer.WriteObjectValue(StaticWebsite, "StaticWebsite");
            }
            if (Optional.IsCollectionDefined(Cors))
            {
                writer.WriteStartElement("Cors");
                foreach (var item in Cors)
                {
                    writer.WriteObjectValue(item, "CorsRule");
                }
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
        }

        internal static BlobServiceProperties DeserializeBlobServiceProperties(XElement element, ModelReaderWriterOptions options = null)
        {
            BlobAnalyticsLogging logging = default;
            BlobMetrics hourMetrics = default;
            BlobMetrics minuteMetrics = default;
            string defaultServiceVersion = default;
            BlobRetentionPolicy deleteRetentionPolicy = default;
            BlobStaticWebsite staticWebsite = default;
            IList<BlobCorsRule> cors = default;
            if (element.Element("Logging") is XElement loggingElement)
            {
                logging = BlobAnalyticsLogging.DeserializeBlobAnalyticsLogging(loggingElement);
            }
            if (element.Element("HourMetrics") is XElement hourMetricsElement)
            {
                hourMetrics = BlobMetrics.DeserializeBlobMetrics(hourMetricsElement);
            }
            if (element.Element("MinuteMetrics") is XElement minuteMetricsElement)
            {
                minuteMetrics = BlobMetrics.DeserializeBlobMetrics(minuteMetricsElement);
            }
            if (element.Element("DefaultServiceVersion") is XElement defaultServiceVersionElement)
            {
                defaultServiceVersion = (string)defaultServiceVersionElement;
            }
            if (element.Element("DeleteRetentionPolicy") is XElement deleteRetentionPolicyElement)
            {
                deleteRetentionPolicy = BlobRetentionPolicy.DeserializeBlobRetentionPolicy(deleteRetentionPolicyElement);
            }
            if (element.Element("StaticWebsite") is XElement staticWebsiteElement)
            {
                staticWebsite = BlobStaticWebsite.DeserializeBlobStaticWebsite(staticWebsiteElement);
            }
            if (element.Element("Cors") is XElement corsElement)
            {
                var array = new List<BlobCorsRule>();
                foreach (var e in corsElement.Elements("CorsRule"))
                {
                    array.Add(BlobCorsRule.DeserializeBlobCorsRule(e));
                }
                cors = array;
            }
            return new BlobServiceProperties(logging, hourMetrics, minuteMetrics, cors, defaultServiceVersion, deleteRetentionPolicy, staticWebsite, default);
        }

        BinaryData IPersistableModel<BlobServiceProperties>.Write(ModelReaderWriterOptions options)
        {
            bool implementsJson = this is IJsonModel<BlobServiceProperties>;
            bool isValid = options.Format == "J" && implementsJson || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {GetType().Name} does not support '{options.Format}' format.");
            }

            using MemoryStream stream = new MemoryStream();
            using XmlWriter writer = XmlWriter.Create(stream);
            ((IXmlSerializable)this).Write(writer, null);
            writer.Flush();
            if (stream.Position > int.MaxValue)
            {
                return BinaryData.FromStream(stream);
            }
            else
            {
                return new BinaryData(stream.GetBuffer().AsMemory(0, (int)stream.Position));
            }
        }

        BlobServiceProperties IPersistableModel<BlobServiceProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(BlobServiceProperties)} does not support '{options.Format}' format.");
            }

            return DeserializeBlobServiceProperties(XElement.Load(data.ToStream()), options);
        }

        string IPersistableModel<BlobServiceProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "X";
    }
}
