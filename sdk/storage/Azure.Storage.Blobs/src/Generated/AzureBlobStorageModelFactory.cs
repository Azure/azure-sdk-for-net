// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Storage.Blobs.Models;

namespace Azure.Storage.Blobs
{
    /// <summary> Model factory for AzureBlobStorage read-only models. </summary>
    public static partial class AzureBlobStorageModelFactory
    {
        /// <summary> Initializes new instance of BlobServiceStatistics class. </summary>
        /// <param name="geoReplication"> Geo-Replication information for the Secondary Storage Service. </param>
        /// <returns> A new <see cref="Models.BlobServiceStatistics"/> instance for mocking. </returns>
        public static BlobServiceStatistics BlobServiceStatistics(BlobGeoReplication geoReplication = default)
        {
            return new BlobServiceStatistics(geoReplication);
        }

        /// <summary> Initializes new instance of BlobGeoReplication class. </summary>
        /// <param name="status"> The status of the secondary location. </param>
        /// <param name="lastSyncedOn"> A GMT date/time value, to the second. All primary writes preceding this value are guaranteed to be available for read operations at the secondary. Primary writes after this point in time may or may not be available for reads. </param>
        /// <returns> A new <see cref="Models.BlobGeoReplication"/> instance for mocking. </returns>
        public static BlobGeoReplication BlobGeoReplication(BlobGeoReplicationStatus status = default, DateTimeOffset? lastSyncedOn = default)
        {
            return new BlobGeoReplication(status, lastSyncedOn);
        }

        /// <summary> Initializes new instance of UserDelegationKey class. </summary>
        /// <param name="signedObjectId"> The Azure Active Directory object ID in GUID format. </param>
        /// <param name="signedTenantId"> The Azure Active Directory tenant ID in GUID format. </param>
        /// <param name="signedStartsOn"> The date-time the key is active. </param>
        /// <param name="signedExpiresOn"> The date-time the key expires. </param>
        /// <param name="signedService"> Abbreviation of the Azure Storage service that accepts the key. </param>
        /// <param name="signedVersion"> The service version that created the key. </param>
        /// <param name="value"> The key as a base64 string. </param>
        /// <returns> A new <see cref="Models.UserDelegationKey"/> instance for mocking. </returns>
        public static UserDelegationKey UserDelegationKey(string signedObjectId = default, string signedTenantId = default, DateTimeOffset signedStartsOn = default, DateTimeOffset signedExpiresOn = default, string signedService = default, string signedVersion = default, string value = default)
        {
            return new UserDelegationKey(signedObjectId, signedTenantId, signedStartsOn, signedExpiresOn, signedService, signedVersion, value);
        }

        /// <summary> Initializes new instance of BlockList class. </summary>
        /// <param name="committedBlocks"> . </param>
        /// <param name="uncommittedBlocks"> . </param>
        /// <returns> A new <see cref="Models.BlockList"/> instance for mocking. </returns>
        public static BlockList BlockList(IEnumerable<BlobBlock> committedBlocks = default, IEnumerable<BlobBlock> uncommittedBlocks = default)
        {
            committedBlocks ??= new List<BlobBlock>();
            uncommittedBlocks ??= new List<BlobBlock>();
            return new BlockList(committedBlocks, uncommittedBlocks);
        }

        /// <summary> Initializes new instance of BlobBlock structure. </summary>
        /// <param name="name"> The base64 encoded block ID. </param>
        /// <param name="sizeLong"> The block size in bytes. </param>
        /// <returns> A new <see cref="Models.BlobBlock"/> instance for mocking. </returns>
        public static BlobBlock BlobBlock(string name = default, long sizeLong = default)
        {
            return new BlobBlock(name, sizeLong);
        }
    }
}
