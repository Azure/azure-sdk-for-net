// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Storage.Blobs.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class AzureBlobStorageModelFactory
    {
        /// <summary> Initializes a new instance of BlobServiceStatistics. </summary>
        /// <param name="geoReplication"> Geo-Replication information for the Secondary Storage Service. </param>
        /// <returns> A new <see cref="Models.BlobServiceStatistics"/> instance for mocking. </returns>
        public static BlobServiceStatistics BlobServiceStatistics(BlobGeoReplication geoReplication = null)
        {
            return new BlobServiceStatistics(geoReplication);
        }

        /// <summary> Initializes a new instance of BlobGeoReplication. </summary>
        /// <param name="status"> The status of the secondary location. </param>
        /// <param name="lastSyncedOn"> A GMT date/time value, to the second. All primary writes preceding this value are guaranteed to be available for read operations at the secondary. Primary writes after this point in time may or may not be available for reads. </param>
        /// <returns> A new <see cref="Models.BlobGeoReplication"/> instance for mocking. </returns>
        public static BlobGeoReplication BlobGeoReplication(BlobGeoReplicationStatus status = default, DateTimeOffset? lastSyncedOn = null)
        {
            return new BlobGeoReplication(status, lastSyncedOn);
        }

        /// <summary> Initializes a new instance of UserDelegationKey. </summary>
        /// <param name="signedObjectId"> The Azure Active Directory object ID in GUID format. </param>
        /// <param name="signedTenantId"> The Azure Active Directory tenant ID in GUID format. </param>
        /// <param name="signedStartsOn"> The date-time the key is active. </param>
        /// <param name="signedExpiresOn"> The date-time the key expires. </param>
        /// <param name="signedService"> Abbreviation of the Azure Storage service that accepts the key. </param>
        /// <param name="signedVersion"> The service version that created the key. </param>
        /// <param name="value"> The key as a base64 string. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="signedObjectId"/>, <paramref name="signedTenantId"/>, <paramref name="signedService"/>, <paramref name="signedVersion"/> or <paramref name="value"/> is null. </exception>
        /// <returns> A new <see cref="Models.UserDelegationKey"/> instance for mocking. </returns>
        public static UserDelegationKey UserDelegationKey(string signedObjectId = null, string signedTenantId = null, DateTimeOffset signedStartsOn = default, DateTimeOffset signedExpiresOn = default, string signedService = null, string signedVersion = null, string value = null)
        {
            if (signedObjectId == null)
            {
                throw new ArgumentNullException(nameof(signedObjectId));
            }
            if (signedTenantId == null)
            {
                throw new ArgumentNullException(nameof(signedTenantId));
            }
            if (signedService == null)
            {
                throw new ArgumentNullException(nameof(signedService));
            }
            if (signedVersion == null)
            {
                throw new ArgumentNullException(nameof(signedVersion));
            }
            if (value == null)
            {
                throw new ArgumentNullException(nameof(value));
            }

            return new UserDelegationKey(signedObjectId, signedTenantId, signedStartsOn, signedExpiresOn, signedService, signedVersion, value);
        }

        /// <summary> Initializes a new instance of BlockList. </summary>
        /// <param name="committedBlocks"></param>
        /// <param name="uncommittedBlocks"></param>
        /// <returns> A new <see cref="Models.BlockList"/> instance for mocking. </returns>
        public static BlockList BlockList(IEnumerable<BlobBlock> committedBlocks = null, IEnumerable<BlobBlock> uncommittedBlocks = null)
        {
            committedBlocks ??= new List<BlobBlock>();
            uncommittedBlocks ??= new List<BlobBlock>();

            return new BlockList(committedBlocks, uncommittedBlocks);
        }

        /// <summary> Initializes a new instance of BlobBlock. </summary>
        /// <param name="name"> The base64 encoded block ID. </param>
        /// <param name="sizeLong"> The block size in bytes. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <returns> A new <see cref="Models.BlobBlock"/> instance for mocking. </returns>
        public static BlobBlock BlobBlock(string name = null, long sizeLong = default)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            return new BlobBlock(name, sizeLong);
        }
    }
}
