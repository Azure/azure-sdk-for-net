// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Storage.Queues.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class AzureQueueStorageModelFactory
    {
        /// <summary> Initializes a new instance of QueueServiceStatistics. </summary>
        /// <param name="geoReplication"> Geo-Replication information for the Secondary Storage Service. </param>
        /// <returns> A new <see cref="Models.QueueServiceStatistics"/> instance for mocking. </returns>
        public static QueueServiceStatistics QueueServiceStatistics(QueueGeoReplication geoReplication = null)
        {
            return new QueueServiceStatistics(geoReplication);
        }

        /// <summary> Initializes a new instance of QueueGeoReplication. </summary>
        /// <param name="status"> The status of the secondary location. </param>
        /// <param name="lastSyncedOn"> A GMT date/time value, to the second. All primary writes preceding this value are guaranteed to be available for read operations at the secondary. Primary writes after this point in time may or may not be available for reads. </param>
        /// <returns> A new <see cref="Models.QueueGeoReplication"/> instance for mocking. </returns>
        public static QueueGeoReplication QueueGeoReplication(QueueGeoReplicationStatus status = default, DateTimeOffset? lastSyncedOn = null)
        {
            return new QueueGeoReplication(status, lastSyncedOn);
        }

        /// <summary> Initializes a new instance of QueueItem. </summary>
        /// <param name="name"> The name of the Queue. </param>
        /// <param name="metadata"> Dictionary of &lt;string&gt;. </param>
        /// <returns> A new <see cref="Models.QueueItem"/> instance for mocking. </returns>
        public static QueueItem QueueItem(string name = null, IDictionary<string, string> metadata = null)
        {
            metadata ??= new Dictionary<string, string>();

            return new QueueItem(name, metadata);
        }

        /// <summary> Initializes a new instance of SendReceipt. </summary>
        /// <param name="messageId"> The Id of the Message. </param>
        /// <param name="insertionTime"> The time the Message was inserted into the Queue. </param>
        /// <param name="expirationTime"> The time that the Message will expire and be automatically deleted. </param>
        /// <param name="popReceipt"> This value is required to delete the Message. If deletion fails using this popreceipt then the message has been dequeued by another client. </param>
        /// <param name="timeNextVisible"> The time that the message will again become visible in the Queue. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="messageId"/> or <paramref name="popReceipt"/> is null. </exception>
        /// <returns> A new <see cref="Models.SendReceipt"/> instance for mocking. </returns>
        public static SendReceipt SendReceipt(string messageId = null, DateTimeOffset insertionTime = default, DateTimeOffset expirationTime = default, string popReceipt = null, DateTimeOffset timeNextVisible = default)
        {
            if (messageId == null)
            {
                throw new ArgumentNullException(nameof(messageId));
            }
            if (popReceipt == null)
            {
                throw new ArgumentNullException(nameof(popReceipt));
            }

            return new SendReceipt(messageId, insertionTime, expirationTime, popReceipt, timeNextVisible);
        }
    }
}
