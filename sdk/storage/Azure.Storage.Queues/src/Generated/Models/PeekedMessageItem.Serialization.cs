// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace Azure.Storage.Queues.Models
{
    internal partial class PeekedMessageItem : IXmlSerializable, IPersistableModel<PeekedMessageItem>
    {
        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "QueueMessage");
            writer.WriteStartElement("MessageId");
            writer.WriteValue(MessageId);
            writer.WriteEndElement();
            writer.WriteStartElement("InsertionTime");
            writer.WriteValue(InsertionTime, "R");
            writer.WriteEndElement();
            writer.WriteStartElement("ExpirationTime");
            writer.WriteValue(ExpirationTime, "R");
            writer.WriteEndElement();
            writer.WriteStartElement("DequeueCount");
            writer.WriteValue(DequeueCount);
            writer.WriteEndElement();
            writer.WriteStartElement("MessageText");
            writer.WriteValue(MessageText);
            writer.WriteEndElement();
            writer.WriteEndElement();
        }

        internal static PeekedMessageItem DeserializePeekedMessageItem(XElement element, ModelReaderWriterOptions options = null)
        {
            string messageId = default;
            DateTimeOffset insertionTime = default;
            DateTimeOffset expirationTime = default;
            long dequeueCount = default;
            string messageText = default;
            if (element.Element("MessageId") is XElement messageIdElement)
            {
                messageId = (string)messageIdElement;
            }
            if (element.Element("InsertionTime") is XElement insertionTimeElement)
            {
                insertionTime = insertionTimeElement.GetDateTimeOffsetValue("R");
            }
            if (element.Element("ExpirationTime") is XElement expirationTimeElement)
            {
                expirationTime = expirationTimeElement.GetDateTimeOffsetValue("R");
            }
            if (element.Element("DequeueCount") is XElement dequeueCountElement)
            {
                dequeueCount = (long)dequeueCountElement;
            }
            if (element.Element("MessageText") is XElement messageTextElement)
            {
                messageText = (string)messageTextElement;
            }
            return new PeekedMessageItem(messageId, insertionTime, expirationTime, dequeueCount, messageText, default);
        }

        BinaryData IPersistableModel<PeekedMessageItem>.Write(ModelReaderWriterOptions options)
        {
            bool implementsJson = this is IJsonModel<PeekedMessageItem>;
            bool isValid = options.Format == "J" && implementsJson || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {GetType().Name} does not support '{options.Format}' format.");
            }

            using MemoryStream stream = new MemoryStream();
            using XmlWriter writer = XmlWriter.Create(stream);
            ((IXmlSerializable)this).Write(writer, null);
            writer.Flush();
            if (stream.Position > int.MaxValue)
            {
                return BinaryData.FromStream(stream);
            }
            else
            {
                return new BinaryData(stream.GetBuffer().AsMemory(0, (int)stream.Position));
            }
        }

        PeekedMessageItem IPersistableModel<PeekedMessageItem>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(PeekedMessageItem)} does not support '{options.Format}' format.");
            }

            return DeserializePeekedMessageItem(XElement.Load(data.ToStream()), options);
        }

        string IPersistableModel<PeekedMessageItem>.GetFormatFromOptions(ModelReaderWriterOptions options) => "X";
    }
}
