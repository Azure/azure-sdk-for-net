// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Storage.Queues.Models
{
    /// <summary> Error codes returned by the service. </summary>
    internal readonly partial struct StorageErrorCode : IEquatable<StorageErrorCode>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="StorageErrorCode"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public StorageErrorCode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AccountAlreadyExistsValue = "AccountAlreadyExists";
        private const string AccountBeingCreatedValue = "AccountBeingCreated";
        private const string AccountIsDisabledValue = "AccountIsDisabled";
        private const string AuthenticationFailedValue = "AuthenticationFailed";
        private const string AuthorizationFailureValue = "AuthorizationFailure";
        private const string ConditionHeadersNotSupportedValue = "ConditionHeadersNotSupported";
        private const string ConditionNotMetValue = "ConditionNotMet";
        private const string EmptyMetadataKeyValue = "EmptyMetadataKey";
        private const string InsufficientAccountPermissionsValue = "InsufficientAccountPermissions";
        private const string InternalErrorValue = "InternalError";
        private const string InvalidAuthenticationInfoValue = "InvalidAuthenticationInfo";
        private const string InvalidHeaderValueValue = "InvalidHeaderValue";
        private const string InvalidHttpVerbValue = "InvalidHttpVerb";
        private const string InvalidInputValue = "InvalidInput";
        private const string InvalidMd5Value = "InvalidMd5";
        private const string InvalidMetadataValue = "InvalidMetadata";
        private const string InvalidQueryParameterValueValue = "InvalidQueryParameterValue";
        private const string InvalidRangeValue = "InvalidRange";
        private const string InvalidResourceNameValue = "InvalidResourceName";
        private const string InvalidUriValue = "InvalidUri";
        private const string InvalidXmlDocumentValue = "InvalidXmlDocument";
        private const string InvalidXmlNodeValueValue = "InvalidXmlNodeValue";
        private const string Md5MismatchValue = "Md5Mismatch";
        private const string MetadataTooLargeValue = "MetadataTooLarge";
        private const string MissingContentLengthHeaderValue = "MissingContentLengthHeader";
        private const string MissingRequiredQueryParameterValue = "MissingRequiredQueryParameter";
        private const string MissingRequiredHeaderValue = "MissingRequiredHeader";
        private const string MissingRequiredXmlNodeValue = "MissingRequiredXmlNode";
        private const string MultipleConditionHeadersNotSupportedValue = "MultipleConditionHeadersNotSupported";
        private const string OperationTimedOutValue = "OperationTimedOut";
        private const string OutOfRangeInputValue = "OutOfRangeInput";
        private const string OutOfRangeQueryParameterValueValue = "OutOfRangeQueryParameterValue";
        private const string RequestBodyTooLargeValue = "RequestBodyTooLarge";
        private const string ResourceTypeMismatchValue = "ResourceTypeMismatch";
        private const string RequestUrlFailedToParseValue = "RequestUrlFailedToParse";
        private const string ResourceAlreadyExistsValue = "ResourceAlreadyExists";
        private const string ResourceNotFoundValue = "ResourceNotFound";
        private const string ServerBusyValue = "ServerBusy";
        private const string UnsupportedHeaderValue = "UnsupportedHeader";
        private const string UnsupportedXmlNodeValue = "UnsupportedXmlNode";
        private const string UnsupportedQueryParameterValue = "UnsupportedQueryParameter";
        private const string UnsupportedHttpVerbValue = "UnsupportedHttpVerb";
        private const string InvalidMarkerValue = "InvalidMarker";
        private const string MessageNotFoundValue = "MessageNotFound";
        private const string MessageTooLargeValue = "MessageTooLarge";
        private const string PopReceiptMismatchValue = "PopReceiptMismatch";
        private const string QueueAlreadyExistsValue = "QueueAlreadyExists";
        private const string QueueBeingDeletedValue = "QueueBeingDeleted";
        private const string QueueDisabledValue = "QueueDisabled";
        private const string QueueNotEmptyValue = "QueueNotEmpty";
        private const string QueueNotFoundValue = "QueueNotFound";
        private const string AuthorizationSourceIPMismatchValue = "AuthorizationSourceIPMismatch";
        private const string AuthorizationProtocolMismatchValue = "AuthorizationProtocolMismatch";
        private const string AuthorizationPermissionMismatchValue = "AuthorizationPermissionMismatch";
        private const string AuthorizationServiceMismatchValue = "AuthorizationServiceMismatch";
        private const string AuthorizationResourceTypeMismatchValue = "AuthorizationResourceTypeMismatch";
        private const string FeatureVersionMismatchValue = "FeatureVersionMismatch";

        /// <summary> AccountAlreadyExists. </summary>
        public static StorageErrorCode AccountAlreadyExists { get; } = new StorageErrorCode(AccountAlreadyExistsValue);
        /// <summary> AccountBeingCreated. </summary>
        public static StorageErrorCode AccountBeingCreated { get; } = new StorageErrorCode(AccountBeingCreatedValue);
        /// <summary> AccountIsDisabled. </summary>
        public static StorageErrorCode AccountIsDisabled { get; } = new StorageErrorCode(AccountIsDisabledValue);
        /// <summary> AuthenticationFailed. </summary>
        public static StorageErrorCode AuthenticationFailed { get; } = new StorageErrorCode(AuthenticationFailedValue);
        /// <summary> AuthorizationFailure. </summary>
        public static StorageErrorCode AuthorizationFailure { get; } = new StorageErrorCode(AuthorizationFailureValue);
        /// <summary> ConditionHeadersNotSupported. </summary>
        public static StorageErrorCode ConditionHeadersNotSupported { get; } = new StorageErrorCode(ConditionHeadersNotSupportedValue);
        /// <summary> ConditionNotMet. </summary>
        public static StorageErrorCode ConditionNotMet { get; } = new StorageErrorCode(ConditionNotMetValue);
        /// <summary> EmptyMetadataKey. </summary>
        public static StorageErrorCode EmptyMetadataKey { get; } = new StorageErrorCode(EmptyMetadataKeyValue);
        /// <summary> InsufficientAccountPermissions. </summary>
        public static StorageErrorCode InsufficientAccountPermissions { get; } = new StorageErrorCode(InsufficientAccountPermissionsValue);
        /// <summary> InternalError. </summary>
        public static StorageErrorCode InternalError { get; } = new StorageErrorCode(InternalErrorValue);
        /// <summary> InvalidAuthenticationInfo. </summary>
        public static StorageErrorCode InvalidAuthenticationInfo { get; } = new StorageErrorCode(InvalidAuthenticationInfoValue);
        /// <summary> InvalidHeaderValue. </summary>
        public static StorageErrorCode InvalidHeaderValue { get; } = new StorageErrorCode(InvalidHeaderValueValue);
        /// <summary> InvalidHttpVerb. </summary>
        public static StorageErrorCode InvalidHttpVerb { get; } = new StorageErrorCode(InvalidHttpVerbValue);
        /// <summary> InvalidInput. </summary>
        public static StorageErrorCode InvalidInput { get; } = new StorageErrorCode(InvalidInputValue);
        /// <summary> InvalidMd5. </summary>
        public static StorageErrorCode InvalidMd5 { get; } = new StorageErrorCode(InvalidMd5Value);
        /// <summary> InvalidMetadata. </summary>
        public static StorageErrorCode InvalidMetadata { get; } = new StorageErrorCode(InvalidMetadataValue);
        /// <summary> InvalidQueryParameterValue. </summary>
        public static StorageErrorCode InvalidQueryParameterValue { get; } = new StorageErrorCode(InvalidQueryParameterValueValue);
        /// <summary> InvalidRange. </summary>
        public static StorageErrorCode InvalidRange { get; } = new StorageErrorCode(InvalidRangeValue);
        /// <summary> InvalidResourceName. </summary>
        public static StorageErrorCode InvalidResourceName { get; } = new StorageErrorCode(InvalidResourceNameValue);
        /// <summary> InvalidUri. </summary>
        public static StorageErrorCode InvalidUri { get; } = new StorageErrorCode(InvalidUriValue);
        /// <summary> InvalidXmlDocument. </summary>
        public static StorageErrorCode InvalidXmlDocument { get; } = new StorageErrorCode(InvalidXmlDocumentValue);
        /// <summary> InvalidXmlNodeValue. </summary>
        public static StorageErrorCode InvalidXmlNodeValue { get; } = new StorageErrorCode(InvalidXmlNodeValueValue);
        /// <summary> Md5Mismatch. </summary>
        public static StorageErrorCode Md5Mismatch { get; } = new StorageErrorCode(Md5MismatchValue);
        /// <summary> MetadataTooLarge. </summary>
        public static StorageErrorCode MetadataTooLarge { get; } = new StorageErrorCode(MetadataTooLargeValue);
        /// <summary> MissingContentLengthHeader. </summary>
        public static StorageErrorCode MissingContentLengthHeader { get; } = new StorageErrorCode(MissingContentLengthHeaderValue);
        /// <summary> MissingRequiredQueryParameter. </summary>
        public static StorageErrorCode MissingRequiredQueryParameter { get; } = new StorageErrorCode(MissingRequiredQueryParameterValue);
        /// <summary> MissingRequiredHeader. </summary>
        public static StorageErrorCode MissingRequiredHeader { get; } = new StorageErrorCode(MissingRequiredHeaderValue);
        /// <summary> MissingRequiredXmlNode. </summary>
        public static StorageErrorCode MissingRequiredXmlNode { get; } = new StorageErrorCode(MissingRequiredXmlNodeValue);
        /// <summary> MultipleConditionHeadersNotSupported. </summary>
        public static StorageErrorCode MultipleConditionHeadersNotSupported { get; } = new StorageErrorCode(MultipleConditionHeadersNotSupportedValue);
        /// <summary> OperationTimedOut. </summary>
        public static StorageErrorCode OperationTimedOut { get; } = new StorageErrorCode(OperationTimedOutValue);
        /// <summary> OutOfRangeInput. </summary>
        public static StorageErrorCode OutOfRangeInput { get; } = new StorageErrorCode(OutOfRangeInputValue);
        /// <summary> OutOfRangeQueryParameterValue. </summary>
        public static StorageErrorCode OutOfRangeQueryParameterValue { get; } = new StorageErrorCode(OutOfRangeQueryParameterValueValue);
        /// <summary> RequestBodyTooLarge. </summary>
        public static StorageErrorCode RequestBodyTooLarge { get; } = new StorageErrorCode(RequestBodyTooLargeValue);
        /// <summary> ResourceTypeMismatch. </summary>
        public static StorageErrorCode ResourceTypeMismatch { get; } = new StorageErrorCode(ResourceTypeMismatchValue);
        /// <summary> RequestUrlFailedToParse. </summary>
        public static StorageErrorCode RequestUrlFailedToParse { get; } = new StorageErrorCode(RequestUrlFailedToParseValue);
        /// <summary> ResourceAlreadyExists. </summary>
        public static StorageErrorCode ResourceAlreadyExists { get; } = new StorageErrorCode(ResourceAlreadyExistsValue);
        /// <summary> ResourceNotFound. </summary>
        public static StorageErrorCode ResourceNotFound { get; } = new StorageErrorCode(ResourceNotFoundValue);
        /// <summary> ServerBusy. </summary>
        public static StorageErrorCode ServerBusy { get; } = new StorageErrorCode(ServerBusyValue);
        /// <summary> UnsupportedHeader. </summary>
        public static StorageErrorCode UnsupportedHeader { get; } = new StorageErrorCode(UnsupportedHeaderValue);
        /// <summary> UnsupportedXmlNode. </summary>
        public static StorageErrorCode UnsupportedXmlNode { get; } = new StorageErrorCode(UnsupportedXmlNodeValue);
        /// <summary> UnsupportedQueryParameter. </summary>
        public static StorageErrorCode UnsupportedQueryParameter { get; } = new StorageErrorCode(UnsupportedQueryParameterValue);
        /// <summary> UnsupportedHttpVerb. </summary>
        public static StorageErrorCode UnsupportedHttpVerb { get; } = new StorageErrorCode(UnsupportedHttpVerbValue);
        /// <summary> InvalidMarker. </summary>
        public static StorageErrorCode InvalidMarker { get; } = new StorageErrorCode(InvalidMarkerValue);
        /// <summary> MessageNotFound. </summary>
        public static StorageErrorCode MessageNotFound { get; } = new StorageErrorCode(MessageNotFoundValue);
        /// <summary> MessageTooLarge. </summary>
        public static StorageErrorCode MessageTooLarge { get; } = new StorageErrorCode(MessageTooLargeValue);
        /// <summary> PopReceiptMismatch. </summary>
        public static StorageErrorCode PopReceiptMismatch { get; } = new StorageErrorCode(PopReceiptMismatchValue);
        /// <summary> QueueAlreadyExists. </summary>
        public static StorageErrorCode QueueAlreadyExists { get; } = new StorageErrorCode(QueueAlreadyExistsValue);
        /// <summary> QueueBeingDeleted. </summary>
        public static StorageErrorCode QueueBeingDeleted { get; } = new StorageErrorCode(QueueBeingDeletedValue);
        /// <summary> QueueDisabled. </summary>
        public static StorageErrorCode QueueDisabled { get; } = new StorageErrorCode(QueueDisabledValue);
        /// <summary> QueueNotEmpty. </summary>
        public static StorageErrorCode QueueNotEmpty { get; } = new StorageErrorCode(QueueNotEmptyValue);
        /// <summary> QueueNotFound. </summary>
        public static StorageErrorCode QueueNotFound { get; } = new StorageErrorCode(QueueNotFoundValue);
        /// <summary> AuthorizationSourceIPMismatch. </summary>
        public static StorageErrorCode AuthorizationSourceIPMismatch { get; } = new StorageErrorCode(AuthorizationSourceIPMismatchValue);
        /// <summary> AuthorizationProtocolMismatch. </summary>
        public static StorageErrorCode AuthorizationProtocolMismatch { get; } = new StorageErrorCode(AuthorizationProtocolMismatchValue);
        /// <summary> AuthorizationPermissionMismatch. </summary>
        public static StorageErrorCode AuthorizationPermissionMismatch { get; } = new StorageErrorCode(AuthorizationPermissionMismatchValue);
        /// <summary> AuthorizationServiceMismatch. </summary>
        public static StorageErrorCode AuthorizationServiceMismatch { get; } = new StorageErrorCode(AuthorizationServiceMismatchValue);
        /// <summary> AuthorizationResourceTypeMismatch. </summary>
        public static StorageErrorCode AuthorizationResourceTypeMismatch { get; } = new StorageErrorCode(AuthorizationResourceTypeMismatchValue);
        /// <summary> FeatureVersionMismatch. </summary>
        public static StorageErrorCode FeatureVersionMismatch { get; } = new StorageErrorCode(FeatureVersionMismatchValue);
        /// <summary> Determines if two <see cref="StorageErrorCode"/> values are the same. </summary>
        public static bool operator ==(StorageErrorCode left, StorageErrorCode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="StorageErrorCode"/> values are not the same. </summary>
        public static bool operator !=(StorageErrorCode left, StorageErrorCode right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="StorageErrorCode"/>. </summary>
        public static implicit operator StorageErrorCode(string value) => new StorageErrorCode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is StorageErrorCode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(StorageErrorCode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
