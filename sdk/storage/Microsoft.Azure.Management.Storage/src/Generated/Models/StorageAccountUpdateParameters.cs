// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Storage.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The parameters that can be provided when updating the storage account
    /// properties.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class StorageAccountUpdateParameters
    {
        /// <summary>
        /// Initializes a new instance of the StorageAccountUpdateParameters
        /// class.
        /// </summary>
        public StorageAccountUpdateParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StorageAccountUpdateParameters
        /// class.
        /// </summary>
        /// <param name="sku">Gets or sets the SKU name. Note that the SKU name
        /// cannot be updated to Standard_ZRS, Premium_LRS or Premium_ZRS, nor
        /// can accounts of those SKU names be updated to any other
        /// value.</param>
        /// <param name="tags">Gets or sets a list of key value pairs that
        /// describe the resource. These tags can be used in viewing and
        /// grouping this resource (across resource groups). A maximum of 15
        /// tags can be provided for a resource. Each tag must have a key no
        /// greater in length than 128 characters and a value no greater in
        /// length than 256 characters.</param>
        /// <param name="identity">The identity of the resource.</param>
        /// <param name="customDomain">Custom domain assigned to the storage
        /// account by the user. Name is the CNAME source. Only one custom
        /// domain is supported per storage account at this time. To clear the
        /// existing custom domain, use an empty string for the custom domain
        /// name property.</param>
        /// <param name="encryption">Not applicable. Azure Storage encryption
        /// at rest is enabled by default for all storage accounts and cannot
        /// be disabled.</param>
        /// <param name="sasPolicy">SasPolicy assigned to the storage
        /// account.</param>
        /// <param name="keyPolicy">KeyPolicy assigned to the storage
        /// account.</param>
        /// <param name="accessTier">Required for storage accounts where kind =
        /// BlobStorage. The access tier is used for billing. The 'Premium'
        /// access tier is the default value for premium block blobs storage
        /// account type and it cannot be changed for the premium block blobs
        /// storage account type. Possible values include: 'Hot', 'Cool',
        /// 'Premium'</param>
        /// <param name="azureFilesIdentityBasedAuthentication">Provides the
        /// identity based authentication settings for Azure Files.</param>
        /// <param name="enableHttpsTrafficOnly">Allows https traffic only to
        /// storage service if sets to true.</param>
        /// <param name="isSftpEnabled">Enables Secure File Transfer Protocol,
        /// if set to true</param>
        /// <param name="isLocalUserEnabled">Enables local users feature, if
        /// set to true</param>
        /// <param name="networkRuleSet">Network rule set</param>
        /// <param name="largeFileSharesState">Allow large file shares if sets
        /// to Enabled. It cannot be disabled once it is enabled. Possible
        /// values include: 'Disabled', 'Enabled'</param>
        /// <param name="routingPreference">Maintains information about the
        /// network routing choice opted by the user for data transfer</param>
        /// <param name="allowBlobPublicAccess">Allow or disallow public access
        /// to all blobs or containers in the storage account. The default
        /// interpretation is true for this property.</param>
        /// <param name="minimumTlsVersion">Set the minimum TLS version to be
        /// permitted on requests to storage. The default interpretation is TLS
        /// 1.0 for this property. Possible values include: 'TLS1_0', 'TLS1_1',
        /// 'TLS1_2'</param>
        /// <param name="allowSharedKeyAccess">Indicates whether the storage
        /// account permits requests to be authorized with the account access
        /// key via Shared Key. If false, then all requests, including shared
        /// access signatures, must be authorized with Azure Active Directory
        /// (Azure AD). The default value is null, which is equivalent to
        /// true.</param>
        /// <param name="allowCrossTenantReplication">Allow or disallow cross
        /// AAD tenant object replication. The default interpretation is true
        /// for this property.</param>
        /// <param name="defaultToOAuthAuthentication">A boolean flag which
        /// indicates whether the default authentication is OAuth or not. The
        /// default interpretation is false for this property.</param>
        /// <param name="publicNetworkAccess">Allow or disallow public network
        /// access to Storage Account. Value is optional but if passed in, must
        /// be 'Enabled' or 'Disabled'. Possible values include: 'Enabled',
        /// 'Disabled'</param>
        /// <param name="immutableStorageWithVersioning">The property is
        /// immutable and can only be set to true at the account creation time.
        /// When set to true, it enables object level immutability for all the
        /// containers in the account by default.</param>
        /// <param name="allowedCopyScope">Restrict copy to and from Storage
        /// Accounts within an AAD tenant or with Private Links to the same
        /// VNet. Possible values include: 'PrivateLink', 'AAD'</param>
        /// <param name="dnsEndpointType">Allows you to specify the type of
        /// endpoint. Set this to AzureDNSZone to create a large number of
        /// accounts in a single subscription, which creates accounts in an
        /// Azure DNS Zone and the endpoint URL will have an alphanumeric DNS
        /// Zone identifier. Possible values include: 'Standard',
        /// 'AzureDnsZone'</param>
        /// <param name="kind">Optional. Indicates the type of storage account.
        /// Currently only StorageV2 value supported by server. Possible values
        /// include: 'Storage', 'StorageV2', 'BlobStorage', 'FileStorage',
        /// 'BlockBlobStorage'</param>
        public StorageAccountUpdateParameters(Sku sku = default(Sku), IDictionary<string, string> tags = default(IDictionary<string, string>), Identity identity = default(Identity), CustomDomain customDomain = default(CustomDomain), Encryption encryption = default(Encryption), SasPolicy sasPolicy = default(SasPolicy), KeyPolicy keyPolicy = default(KeyPolicy), AccessTier? accessTier = default(AccessTier?), AzureFilesIdentityBasedAuthentication azureFilesIdentityBasedAuthentication = default(AzureFilesIdentityBasedAuthentication), bool? enableHttpsTrafficOnly = default(bool?), bool? isSftpEnabled = default(bool?), bool? isLocalUserEnabled = default(bool?), NetworkRuleSet networkRuleSet = default(NetworkRuleSet), string largeFileSharesState = default(string), RoutingPreference routingPreference = default(RoutingPreference), bool? allowBlobPublicAccess = default(bool?), string minimumTlsVersion = default(string), bool? allowSharedKeyAccess = default(bool?), bool? allowCrossTenantReplication = default(bool?), bool? defaultToOAuthAuthentication = default(bool?), string publicNetworkAccess = default(string), ImmutableStorageAccount immutableStorageWithVersioning = default(ImmutableStorageAccount), string allowedCopyScope = default(string), string dnsEndpointType = default(string), string kind = default(string))
        {
            Sku = sku;
            Tags = tags;
            Identity = identity;
            CustomDomain = customDomain;
            Encryption = encryption;
            SasPolicy = sasPolicy;
            KeyPolicy = keyPolicy;
            AccessTier = accessTier;
            AzureFilesIdentityBasedAuthentication = azureFilesIdentityBasedAuthentication;
            EnableHttpsTrafficOnly = enableHttpsTrafficOnly;
            IsSftpEnabled = isSftpEnabled;
            IsLocalUserEnabled = isLocalUserEnabled;
            NetworkRuleSet = networkRuleSet;
            LargeFileSharesState = largeFileSharesState;
            RoutingPreference = routingPreference;
            AllowBlobPublicAccess = allowBlobPublicAccess;
            MinimumTlsVersion = minimumTlsVersion;
            AllowSharedKeyAccess = allowSharedKeyAccess;
            AllowCrossTenantReplication = allowCrossTenantReplication;
            DefaultToOAuthAuthentication = defaultToOAuthAuthentication;
            PublicNetworkAccess = publicNetworkAccess;
            ImmutableStorageWithVersioning = immutableStorageWithVersioning;
            AllowedCopyScope = allowedCopyScope;
            DnsEndpointType = dnsEndpointType;
            Kind = kind;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the SKU name. Note that the SKU name cannot be updated
        /// to Standard_ZRS, Premium_LRS or Premium_ZRS, nor can accounts of
        /// those SKU names be updated to any other value.
        /// </summary>
        [JsonProperty(PropertyName = "sku")]
        public Sku Sku { get; set; }

        /// <summary>
        /// Gets or sets a list of key value pairs that describe the resource.
        /// These tags can be used in viewing and grouping this resource
        /// (across resource groups). A maximum of 15 tags can be provided for
        /// a resource. Each tag must have a key no greater in length than 128
        /// characters and a value no greater in length than 256 characters.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Gets or sets the identity of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "identity")]
        public Identity Identity { get; set; }

        /// <summary>
        /// Gets or sets custom domain assigned to the storage account by the
        /// user. Name is the CNAME source. Only one custom domain is supported
        /// per storage account at this time. To clear the existing custom
        /// domain, use an empty string for the custom domain name property.
        /// </summary>
        [JsonProperty(PropertyName = "properties.customDomain")]
        public CustomDomain CustomDomain { get; set; }

        /// <summary>
        /// Gets or sets not applicable. Azure Storage encryption at rest is
        /// enabled by default for all storage accounts and cannot be disabled.
        /// </summary>
        [JsonProperty(PropertyName = "properties.encryption")]
        public Encryption Encryption { get; set; }

        /// <summary>
        /// Gets or sets sasPolicy assigned to the storage account.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sasPolicy")]
        public SasPolicy SasPolicy { get; set; }

        /// <summary>
        /// Gets or sets keyPolicy assigned to the storage account.
        /// </summary>
        [JsonProperty(PropertyName = "properties.keyPolicy")]
        public KeyPolicy KeyPolicy { get; set; }

        /// <summary>
        /// Gets or sets required for storage accounts where kind =
        /// BlobStorage. The access tier is used for billing. The 'Premium'
        /// access tier is the default value for premium block blobs storage
        /// account type and it cannot be changed for the premium block blobs
        /// storage account type. Possible values include: 'Hot', 'Cool',
        /// 'Premium'
        /// </summary>
        [JsonProperty(PropertyName = "properties.accessTier")]
        public AccessTier? AccessTier { get; set; }

        /// <summary>
        /// Gets or sets provides the identity based authentication settings
        /// for Azure Files.
        /// </summary>
        [JsonProperty(PropertyName = "properties.azureFilesIdentityBasedAuthentication")]
        public AzureFilesIdentityBasedAuthentication AzureFilesIdentityBasedAuthentication { get; set; }

        /// <summary>
        /// Gets or sets allows https traffic only to storage service if sets
        /// to true.
        /// </summary>
        [JsonProperty(PropertyName = "properties.supportsHttpsTrafficOnly")]
        public bool? EnableHttpsTrafficOnly { get; set; }

        /// <summary>
        /// Gets or sets enables Secure File Transfer Protocol, if set to true
        /// </summary>
        [JsonProperty(PropertyName = "properties.isSftpEnabled")]
        public bool? IsSftpEnabled { get; set; }

        /// <summary>
        /// Gets or sets enables local users feature, if set to true
        /// </summary>
        [JsonProperty(PropertyName = "properties.isLocalUserEnabled")]
        public bool? IsLocalUserEnabled { get; set; }

        /// <summary>
        /// Gets or sets network rule set
        /// </summary>
        [JsonProperty(PropertyName = "properties.networkAcls")]
        public NetworkRuleSet NetworkRuleSet { get; set; }

        /// <summary>
        /// Gets or sets allow large file shares if sets to Enabled. It cannot
        /// be disabled once it is enabled. Possible values include:
        /// 'Disabled', 'Enabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.largeFileSharesState")]
        public string LargeFileSharesState { get; set; }

        /// <summary>
        /// Gets or sets maintains information about the network routing choice
        /// opted by the user for data transfer
        /// </summary>
        [JsonProperty(PropertyName = "properties.routingPreference")]
        public RoutingPreference RoutingPreference { get; set; }

        /// <summary>
        /// Gets or sets allow or disallow public access to all blobs or
        /// containers in the storage account. The default interpretation is
        /// true for this property.
        /// </summary>
        [JsonProperty(PropertyName = "properties.allowBlobPublicAccess")]
        public bool? AllowBlobPublicAccess { get; set; }

        /// <summary>
        /// Gets or sets set the minimum TLS version to be permitted on
        /// requests to storage. The default interpretation is TLS 1.0 for this
        /// property. Possible values include: 'TLS1_0', 'TLS1_1', 'TLS1_2'
        /// </summary>
        [JsonProperty(PropertyName = "properties.minimumTlsVersion")]
        public string MinimumTlsVersion { get; set; }

        /// <summary>
        /// Gets or sets indicates whether the storage account permits requests
        /// to be authorized with the account access key via Shared Key. If
        /// false, then all requests, including shared access signatures, must
        /// be authorized with Azure Active Directory (Azure AD). The default
        /// value is null, which is equivalent to true.
        /// </summary>
        [JsonProperty(PropertyName = "properties.allowSharedKeyAccess")]
        public bool? AllowSharedKeyAccess { get; set; }

        /// <summary>
        /// Gets or sets allow or disallow cross AAD tenant object replication.
        /// The default interpretation is true for this property.
        /// </summary>
        [JsonProperty(PropertyName = "properties.allowCrossTenantReplication")]
        public bool? AllowCrossTenantReplication { get; set; }

        /// <summary>
        /// Gets or sets a boolean flag which indicates whether the default
        /// authentication is OAuth or not. The default interpretation is false
        /// for this property.
        /// </summary>
        [JsonProperty(PropertyName = "properties.defaultToOAuthAuthentication")]
        public bool? DefaultToOAuthAuthentication { get; set; }

        /// <summary>
        /// Gets or sets allow or disallow public network access to Storage
        /// Account. Value is optional but if passed in, must be 'Enabled' or
        /// 'Disabled'. Possible values include: 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.publicNetworkAccess")]
        public string PublicNetworkAccess { get; set; }

        /// <summary>
        /// Gets or sets the property is immutable and can only be set to true
        /// at the account creation time. When set to true, it enables object
        /// level immutability for all the containers in the account by
        /// default.
        /// </summary>
        [JsonProperty(PropertyName = "properties.immutableStorageWithVersioning")]
        public ImmutableStorageAccount ImmutableStorageWithVersioning { get; set; }

        /// <summary>
        /// Gets or sets restrict copy to and from Storage Accounts within an
        /// AAD tenant or with Private Links to the same VNet. Possible values
        /// include: 'PrivateLink', 'AAD'
        /// </summary>
        [JsonProperty(PropertyName = "properties.allowedCopyScope")]
        public string AllowedCopyScope { get; set; }

        /// <summary>
        /// Gets or sets allows you to specify the type of endpoint. Set this
        /// to AzureDNSZone to create a large number of accounts in a single
        /// subscription, which creates accounts in an Azure DNS Zone and the
        /// endpoint URL will have an alphanumeric DNS Zone identifier.
        /// Possible values include: 'Standard', 'AzureDnsZone'
        /// </summary>
        [JsonProperty(PropertyName = "properties.dnsEndpointType")]
        public string DnsEndpointType { get; set; }

        /// <summary>
        /// Gets or sets optional. Indicates the type of storage account.
        /// Currently only StorageV2 value supported by server. Possible values
        /// include: 'Storage', 'StorageV2', 'BlobStorage', 'FileStorage',
        /// 'BlockBlobStorage'
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Sku != null)
            {
                Sku.Validate();
            }
            if (Identity != null)
            {
                Identity.Validate();
            }
            if (CustomDomain != null)
            {
                CustomDomain.Validate();
            }
            if (SasPolicy != null)
            {
                SasPolicy.Validate();
            }
            if (KeyPolicy != null)
            {
                KeyPolicy.Validate();
            }
            if (AzureFilesIdentityBasedAuthentication != null)
            {
                AzureFilesIdentityBasedAuthentication.Validate();
            }
            if (NetworkRuleSet != null)
            {
                NetworkRuleSet.Validate();
            }
            if (ImmutableStorageWithVersioning != null)
            {
                ImmutableStorageWithVersioning.Validate();
            }
        }
    }
}
