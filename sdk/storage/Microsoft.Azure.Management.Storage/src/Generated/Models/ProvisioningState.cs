// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Storage.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for ProvisioningState.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum ProvisioningState
    {
        [EnumMember(Value = "Creating")]
        Creating,
        [EnumMember(Value = "ResolvingDNS")]
        ResolvingDNS,
        [EnumMember(Value = "Succeeded")]
        Succeeded
    }
    internal static class ProvisioningStateEnumExtension
    {
        internal static string ToSerializedValue(this ProvisioningState? value)
        {
            return value == null ? null : ((ProvisioningState)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this ProvisioningState value)
        {
            switch( value )
            {
                case ProvisioningState.Creating:
                    return "Creating";
                case ProvisioningState.ResolvingDNS:
                    return "ResolvingDNS";
                case ProvisioningState.Succeeded:
                    return "Succeeded";
            }
            return null;
        }

        internal static ProvisioningState? ParseProvisioningState(this string value)
        {
            switch( value )
            {
                case "Creating":
                    return ProvisioningState.Creating;
                case "ResolvingDNS":
                    return ProvisioningState.ResolvingDNS;
                case "Succeeded":
                    return ProvisioningState.Succeeded;
            }
            return null;
        }
    }
}
