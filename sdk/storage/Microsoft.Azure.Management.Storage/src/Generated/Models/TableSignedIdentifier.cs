// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Storage.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Object to set Table Access Policy.
    /// </summary>
    public partial class TableSignedIdentifier
    {
        /// <summary>
        /// Initializes a new instance of the TableSignedIdentifier class.
        /// </summary>
        public TableSignedIdentifier()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TableSignedIdentifier class.
        /// </summary>
        /// <param name="id">unique-64-character-value of the stored access
        /// policy.</param>
        /// <param name="accessPolicy">Access policy</param>
        public TableSignedIdentifier(string id, TableAccessPolicy accessPolicy = default(TableAccessPolicy))
        {
            Id = id;
            AccessPolicy = accessPolicy;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unique-64-character-value of the stored access policy.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets access policy
        /// </summary>
        [JsonProperty(PropertyName = "accessPolicy")]
        public TableAccessPolicy AccessPolicy { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
            if (AccessPolicy != null)
            {
                AccessPolicy.Validate();
            }
        }
    }
}
