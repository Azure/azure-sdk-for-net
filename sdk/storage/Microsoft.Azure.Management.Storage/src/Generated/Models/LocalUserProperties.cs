// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Storage.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The Storage Account Local User properties.
    /// </summary>
    public partial class LocalUserProperties
    {
        /// <summary>
        /// Initializes a new instance of the LocalUserProperties class.
        /// </summary>
        public LocalUserProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LocalUserProperties class.
        /// </summary>
        /// <param name="permissionScopes">The permission scopes of the local
        /// user.</param>
        /// <param name="homeDirectory">Optional, local user home
        /// directory.</param>
        /// <param name="sid">A unique Security Identifier that is generated by
        /// the server.</param>
        /// <param name="sshPassword">Auto generated password by the server for
        /// SSH authentication if hasSshPassword is set to true on the creation
        /// of local user.</param>
        /// <param name="hasSharedKey">Indicates whether shared key exists. Set
        /// it to false to remove existing shared key.</param>
        /// <param name="hasSshKey">Indicates whether ssh key exists. Set it to
        /// false to remove existing SSH key.</param>
        /// <param name="hasSshPassword">Indicates whether ssh password exists.
        /// Set it to false to remove existing SSH password.</param>
        public LocalUserProperties(IList<PermissionScope> permissionScopes = default(IList<PermissionScope>), string homeDirectory = default(string), IList<SshPublicKey> sshAuthorizedKeys = default(IList<SshPublicKey>), string sid = default(string), string sharedKey = default(string), string sshPassword = default(string), bool? hasSharedKey = default(bool?), bool? hasSshKey = default(bool?), bool? hasSshPassword = default(bool?))
        {
            PermissionScopes = permissionScopes;
            HomeDirectory = homeDirectory;
            SshAuthorizedKeys = sshAuthorizedKeys;
            Sid = sid;
            SharedKey = sharedKey;
            SshPassword = sshPassword;
            HasSharedKey = hasSharedKey;
            HasSshKey = hasSshKey;
            HasSshPassword = hasSshPassword;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the permission scopes of the local user.
        /// </summary>
        [JsonProperty(PropertyName = "permissionScopes")]
        public IList<PermissionScope> PermissionScopes { get; set; }

        /// <summary>
        /// Gets or sets optional, local user home directory.
        /// </summary>
        [JsonProperty(PropertyName = "homeDirectory")]
        public string HomeDirectory { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sshAuthorizedKeys")]
        public IList<SshPublicKey> SshAuthorizedKeys { get; set; }

        /// <summary>
        /// Gets a unique Security Identifier that is generated by the server.
        /// </summary>
        [JsonProperty(PropertyName = "sid")]
        public string Sid { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sharedKey")]
        public string SharedKey { get; set; }

        /// <summary>
        /// Gets auto generated password by the server for SSH authentication
        /// if hasSshPassword is set to true on the creation of local user.
        /// </summary>
        [JsonProperty(PropertyName = "sshPassword")]
        public string SshPassword { get; private set; }

        /// <summary>
        /// Gets or sets indicates whether shared key exists. Set it to false
        /// to remove existing shared key.
        /// </summary>
        [JsonProperty(PropertyName = "hasSharedKey")]
        public bool? HasSharedKey { get; set; }

        /// <summary>
        /// Gets or sets indicates whether ssh key exists. Set it to false to
        /// remove existing SSH key.
        /// </summary>
        [JsonProperty(PropertyName = "hasSshKey")]
        public bool? HasSshKey { get; set; }

        /// <summary>
        /// Gets or sets indicates whether ssh password exists. Set it to false
        /// to remove existing SSH password.
        /// </summary>
        [JsonProperty(PropertyName = "hasSshPassword")]
        public bool? HasSshPassword { get; set; }

    }
}
