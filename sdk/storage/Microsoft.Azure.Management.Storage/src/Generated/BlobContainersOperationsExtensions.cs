// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Storage
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for BlobContainersOperations.
    /// </summary>
    public static partial class BlobContainersOperationsExtensions
    {
            /// <summary>
            /// Lists all containers and does not support a prefix like data plane. Also
            /// SRP today does not return continuation token.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='maxpagesize'>
            /// Optional. Specified maximum number of containers that can be included in
            /// the list.
            /// </param>
            /// <param name='filter'>
            /// Optional. When specified, only container names starting with the filter
            /// will be listed.
            /// </param>
            /// <param name='include'>
            /// Optional, used to include the properties for soft deleted blob containers.
            /// Possible values include: 'deleted'
            /// </param>
            public static IPage<ListContainerItem> List(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string maxpagesize = default(string), string filter = default(string), string include = default(string))
            {
                return operations.ListAsync(resourceGroupName, accountName, maxpagesize, filter, include).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all containers and does not support a prefix like data plane. Also
            /// SRP today does not return continuation token.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='maxpagesize'>
            /// Optional. Specified maximum number of containers that can be included in
            /// the list.
            /// </param>
            /// <param name='filter'>
            /// Optional. When specified, only container names starting with the filter
            /// will be listed.
            /// </param>
            /// <param name='include'>
            /// Optional, used to include the properties for soft deleted blob containers.
            /// Possible values include: 'deleted'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ListContainerItem>> ListAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string maxpagesize = default(string), string filter = default(string), string include = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, accountName, maxpagesize, filter, include, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new container under the specified account as described by request
            /// body. The container resource includes metadata and properties for that
            /// container. It does not include a list of the blobs contained by the
            /// container.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='blobContainer'>
            /// Properties of the blob container to create.
            /// </param>
            public static BlobContainer Create(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, BlobContainer blobContainer)
            {
                return operations.CreateAsync(resourceGroupName, accountName, containerName, blobContainer).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new container under the specified account as described by request
            /// body. The container resource includes metadata and properties for that
            /// container. It does not include a list of the blobs contained by the
            /// container.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='blobContainer'>
            /// Properties of the blob container to create.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BlobContainer> CreateAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, BlobContainer blobContainer, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, accountName, containerName, blobContainer, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates container properties as specified in request body. Properties not
            /// mentioned in the request will be unchanged. Update fails if the specified
            /// container doesn't already exist.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='blobContainer'>
            /// Properties to update for the blob container.
            /// </param>
            public static BlobContainer Update(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, BlobContainer blobContainer)
            {
                return operations.UpdateAsync(resourceGroupName, accountName, containerName, blobContainer).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates container properties as specified in request body. Properties not
            /// mentioned in the request will be unchanged. Update fails if the specified
            /// container doesn't already exist.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='blobContainer'>
            /// Properties to update for the blob container.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BlobContainer> UpdateAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, BlobContainer blobContainer, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, accountName, containerName, blobContainer, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets properties of a specified container.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            public static BlobContainer Get(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName)
            {
                return operations.GetAsync(resourceGroupName, accountName, containerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets properties of a specified container.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BlobContainer> GetAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, containerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes specified container under its account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            public static void Delete(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName)
            {
                operations.DeleteAsync(resourceGroupName, accountName, containerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes specified container under its account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, containerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Sets legal hold tags. Setting the same tag results in an idempotent
            /// operation. SetLegalHold follows an append pattern and does not clear out
            /// the existing tags that are not specified in the request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='tags'>
            /// Each tag should be 3 to 23 alphanumeric characters and is normalized to
            /// lower case at SRP.
            /// </param>
            public static LegalHold SetLegalHold(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, IList<string> tags)
            {
                return operations.SetLegalHoldAsync(resourceGroupName, accountName, containerName, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets legal hold tags. Setting the same tag results in an idempotent
            /// operation. SetLegalHold follows an append pattern and does not clear out
            /// the existing tags that are not specified in the request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='tags'>
            /// Each tag should be 3 to 23 alphanumeric characters and is normalized to
            /// lower case at SRP.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LegalHold> SetLegalHoldAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, IList<string> tags, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetLegalHoldWithHttpMessagesAsync(resourceGroupName, accountName, containerName, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Clears legal hold tags. Clearing the same or non-existent tag results in an
            /// idempotent operation. ClearLegalHold clears out only the specified tags in
            /// the request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='tags'>
            /// Each tag should be 3 to 23 alphanumeric characters and is normalized to
            /// lower case at SRP.
            /// </param>
            public static LegalHold ClearLegalHold(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, IList<string> tags)
            {
                return operations.ClearLegalHoldAsync(resourceGroupName, accountName, containerName, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Clears legal hold tags. Clearing the same or non-existent tag results in an
            /// idempotent operation. ClearLegalHold clears out only the specified tags in
            /// the request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='tags'>
            /// Each tag should be 3 to 23 alphanumeric characters and is normalized to
            /// lower case at SRP.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LegalHold> ClearLegalHoldAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, IList<string> tags, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ClearLegalHoldWithHttpMessagesAsync(resourceGroupName, accountName, containerName, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates an unlocked immutability policy. ETag in If-Match is
            /// honored if given but not required for this operation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='ifMatch'>
            /// The entity state (ETag) version of the immutability policy to update. A
            /// value of "*" can be used to apply the operation only if the immutability
            /// policy already exists. If omitted, this operation will always be applied.
            /// </param>
            /// <param name='immutabilityPeriodSinceCreationInDays'>
            /// The immutability period for the blobs in the container since the policy
            /// creation, in days.
            /// </param>
            /// <param name='allowProtectedAppendWrites'>
            /// This property can only be changed for unlocked time-based retention
            /// policies. When enabled, new blocks can be written to an append blob while
            /// maintaining immutability protection and compliance. Only new blocks can be
            /// added and any existing blocks cannot be modified or deleted. This property
            /// cannot be changed with ExtendImmutabilityPolicy API
            /// </param>
            public static ImmutabilityPolicy CreateOrUpdateImmutabilityPolicy(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, string ifMatch = default(string), int? immutabilityPeriodSinceCreationInDays = default(int?), bool? allowProtectedAppendWrites = default(bool?))
            {
                return operations.CreateOrUpdateImmutabilityPolicyAsync(resourceGroupName, accountName, containerName, ifMatch, immutabilityPeriodSinceCreationInDays, allowProtectedAppendWrites).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates an unlocked immutability policy. ETag in If-Match is
            /// honored if given but not required for this operation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='ifMatch'>
            /// The entity state (ETag) version of the immutability policy to update. A
            /// value of "*" can be used to apply the operation only if the immutability
            /// policy already exists. If omitted, this operation will always be applied.
            /// </param>
            /// <param name='immutabilityPeriodSinceCreationInDays'>
            /// The immutability period for the blobs in the container since the policy
            /// creation, in days.
            /// </param>
            /// <param name='allowProtectedAppendWrites'>
            /// This property can only be changed for unlocked time-based retention
            /// policies. When enabled, new blocks can be written to an append blob while
            /// maintaining immutability protection and compliance. Only new blocks can be
            /// added and any existing blocks cannot be modified or deleted. This property
            /// cannot be changed with ExtendImmutabilityPolicy API
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImmutabilityPolicy> CreateOrUpdateImmutabilityPolicyAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, string ifMatch = default(string), int? immutabilityPeriodSinceCreationInDays = default(int?), bool? allowProtectedAppendWrites = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateImmutabilityPolicyWithHttpMessagesAsync(resourceGroupName, accountName, containerName, ifMatch, immutabilityPeriodSinceCreationInDays, allowProtectedAppendWrites, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the existing immutability policy along with the corresponding ETag in
            /// response headers and body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='ifMatch'>
            /// The entity state (ETag) version of the immutability policy to update. A
            /// value of "*" can be used to apply the operation only if the immutability
            /// policy already exists. If omitted, this operation will always be applied.
            /// </param>
            public static ImmutabilityPolicy GetImmutabilityPolicy(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, string ifMatch = default(string))
            {
                return operations.GetImmutabilityPolicyAsync(resourceGroupName, accountName, containerName, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the existing immutability policy along with the corresponding ETag in
            /// response headers and body.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='ifMatch'>
            /// The entity state (ETag) version of the immutability policy to update. A
            /// value of "*" can be used to apply the operation only if the immutability
            /// policy already exists. If omitted, this operation will always be applied.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImmutabilityPolicy> GetImmutabilityPolicyAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetImmutabilityPolicyWithHttpMessagesAsync(resourceGroupName, accountName, containerName, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Aborts an unlocked immutability policy. The response of delete has
            /// immutabilityPeriodSinceCreationInDays set to 0. ETag in If-Match is
            /// required for this operation. Deleting a locked immutability policy is not
            /// allowed, the only way is to delete the container after deleting all expired
            /// blobs inside the policy locked container.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='ifMatch'>
            /// The entity state (ETag) version of the immutability policy to update. A
            /// value of "*" can be used to apply the operation only if the immutability
            /// policy already exists. If omitted, this operation will always be applied.
            /// </param>
            public static ImmutabilityPolicy DeleteImmutabilityPolicy(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, string ifMatch)
            {
                return operations.DeleteImmutabilityPolicyAsync(resourceGroupName, accountName, containerName, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Aborts an unlocked immutability policy. The response of delete has
            /// immutabilityPeriodSinceCreationInDays set to 0. ETag in If-Match is
            /// required for this operation. Deleting a locked immutability policy is not
            /// allowed, the only way is to delete the container after deleting all expired
            /// blobs inside the policy locked container.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='ifMatch'>
            /// The entity state (ETag) version of the immutability policy to update. A
            /// value of "*" can be used to apply the operation only if the immutability
            /// policy already exists. If omitted, this operation will always be applied.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImmutabilityPolicy> DeleteImmutabilityPolicyAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, string ifMatch, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteImmutabilityPolicyWithHttpMessagesAsync(resourceGroupName, accountName, containerName, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets the ImmutabilityPolicy to Locked state. The only action allowed on a
            /// Locked policy is ExtendImmutabilityPolicy action. ETag in If-Match is
            /// required for this operation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='ifMatch'>
            /// The entity state (ETag) version of the immutability policy to update. A
            /// value of "*" can be used to apply the operation only if the immutability
            /// policy already exists. If omitted, this operation will always be applied.
            /// </param>
            public static ImmutabilityPolicy LockImmutabilityPolicy(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, string ifMatch)
            {
                return operations.LockImmutabilityPolicyAsync(resourceGroupName, accountName, containerName, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets the ImmutabilityPolicy to Locked state. The only action allowed on a
            /// Locked policy is ExtendImmutabilityPolicy action. ETag in If-Match is
            /// required for this operation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='ifMatch'>
            /// The entity state (ETag) version of the immutability policy to update. A
            /// value of "*" can be used to apply the operation only if the immutability
            /// policy already exists. If omitted, this operation will always be applied.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImmutabilityPolicy> LockImmutabilityPolicyAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, string ifMatch, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LockImmutabilityPolicyWithHttpMessagesAsync(resourceGroupName, accountName, containerName, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Extends the immutabilityPeriodSinceCreationInDays of a locked
            /// immutabilityPolicy. The only action allowed on a Locked policy will be this
            /// action. ETag in If-Match is required for this operation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='ifMatch'>
            /// The entity state (ETag) version of the immutability policy to update. A
            /// value of "*" can be used to apply the operation only if the immutability
            /// policy already exists. If omitted, this operation will always be applied.
            /// </param>
            /// <param name='immutabilityPeriodSinceCreationInDays'>
            /// The immutability period for the blobs in the container since the policy
            /// creation, in days.
            /// </param>
            /// <param name='allowProtectedAppendWrites'>
            /// This property can only be changed for unlocked time-based retention
            /// policies. When enabled, new blocks can be written to an append blob while
            /// maintaining immutability protection and compliance. Only new blocks can be
            /// added and any existing blocks cannot be modified or deleted. This property
            /// cannot be changed with ExtendImmutabilityPolicy API
            /// </param>
            public static ImmutabilityPolicy ExtendImmutabilityPolicy(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, string ifMatch, int? immutabilityPeriodSinceCreationInDays = default(int?), bool? allowProtectedAppendWrites = default(bool?))
            {
                return operations.ExtendImmutabilityPolicyAsync(resourceGroupName, accountName, containerName, ifMatch, immutabilityPeriodSinceCreationInDays, allowProtectedAppendWrites).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Extends the immutabilityPeriodSinceCreationInDays of a locked
            /// immutabilityPolicy. The only action allowed on a Locked policy will be this
            /// action. ETag in If-Match is required for this operation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='ifMatch'>
            /// The entity state (ETag) version of the immutability policy to update. A
            /// value of "*" can be used to apply the operation only if the immutability
            /// policy already exists. If omitted, this operation will always be applied.
            /// </param>
            /// <param name='immutabilityPeriodSinceCreationInDays'>
            /// The immutability period for the blobs in the container since the policy
            /// creation, in days.
            /// </param>
            /// <param name='allowProtectedAppendWrites'>
            /// This property can only be changed for unlocked time-based retention
            /// policies. When enabled, new blocks can be written to an append blob while
            /// maintaining immutability protection and compliance. Only new blocks can be
            /// added and any existing blocks cannot be modified or deleted. This property
            /// cannot be changed with ExtendImmutabilityPolicy API
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImmutabilityPolicy> ExtendImmutabilityPolicyAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, string ifMatch, int? immutabilityPeriodSinceCreationInDays = default(int?), bool? allowProtectedAppendWrites = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExtendImmutabilityPolicyWithHttpMessagesAsync(resourceGroupName, accountName, containerName, ifMatch, immutabilityPeriodSinceCreationInDays, allowProtectedAppendWrites, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The Lease Container operation establishes and manages a lock on a container
            /// for delete operations. The lock duration can be 15 to 60 seconds, or can be
            /// infinite.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='parameters'>
            /// Lease Container request body.
            /// </param>
            public static LeaseContainerResponse Lease(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, LeaseContainerRequest parameters = default(LeaseContainerRequest))
            {
                return operations.LeaseAsync(resourceGroupName, accountName, containerName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The Lease Container operation establishes and manages a lock on a container
            /// for delete operations. The lock duration can be 15 to 60 seconds, or can be
            /// infinite.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='parameters'>
            /// Lease Container request body.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LeaseContainerResponse> LeaseAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, LeaseContainerRequest parameters = default(LeaseContainerRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LeaseWithHttpMessagesAsync(resourceGroupName, accountName, containerName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This operation migrates a blob container from container level WORM to
            /// object level immutability enabled container. Prerequisites require a
            /// container level immutability policy either in locked or unlocked state,
            /// Account level versioning must be enabled and there should be no Legal hold
            /// on the container.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            public static void ObjectLevelWorm(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName)
            {
                operations.ObjectLevelWormAsync(resourceGroupName, accountName, containerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This operation migrates a blob container from container level WORM to
            /// object level immutability enabled container. Prerequisites require a
            /// container level immutability policy either in locked or unlocked state,
            /// Account level versioning must be enabled and there should be no Legal hold
            /// on the container.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ObjectLevelWormAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ObjectLevelWormWithHttpMessagesAsync(resourceGroupName, accountName, containerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// This operation migrates a blob container from container level WORM to
            /// object level immutability enabled container. Prerequisites require a
            /// container level immutability policy either in locked or unlocked state,
            /// Account level versioning must be enabled and there should be no Legal hold
            /// on the container.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            public static void BeginObjectLevelWorm(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName)
            {
                operations.BeginObjectLevelWormAsync(resourceGroupName, accountName, containerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This operation migrates a blob container from container level WORM to
            /// object level immutability enabled container. Prerequisites require a
            /// container level immutability policy either in locked or unlocked state,
            /// Account level versioning must be enabled and there should be no Legal hold
            /// on the container.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginObjectLevelWormAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginObjectLevelWormWithHttpMessagesAsync(resourceGroupName, accountName, containerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists all containers and does not support a prefix like data plane. Also
            /// SRP today does not return continuation token.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ListContainerItem> ListNext(this IBlobContainersOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all containers and does not support a prefix like data plane. Also
            /// SRP today does not return continuation token.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ListContainerItem>> ListNextAsync(this IBlobContainersOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
