// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Storage
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for QueueOperations.
    /// </summary>
    public static partial class QueueOperationsExtensions
    {
            /// <summary>
            /// Creates a new queue with the specified queue name, under the specified
            /// account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='queueName'>
            /// A queue name must be unique within a storage account and must be between 3
            /// and 63 characters.The name must comprise of lowercase alphanumeric and
            /// dash(-) characters only, it should begin and end with an alphanumeric
            /// character and it cannot have two consecutive dash(-) characters.
            /// </param>
            /// <param name='metadata'>
            /// A name-value pair that represents queue metadata.
            /// </param>
            public static StorageQueue Create(this IQueueOperations operations, string resourceGroupName, string accountName, string queueName, IDictionary<string, string> metadata = default(IDictionary<string, string>))
            {
                return operations.CreateAsync(resourceGroupName, accountName, queueName, metadata).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new queue with the specified queue name, under the specified
            /// account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='queueName'>
            /// A queue name must be unique within a storage account and must be between 3
            /// and 63 characters.The name must comprise of lowercase alphanumeric and
            /// dash(-) characters only, it should begin and end with an alphanumeric
            /// character and it cannot have two consecutive dash(-) characters.
            /// </param>
            /// <param name='metadata'>
            /// A name-value pair that represents queue metadata.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageQueue> CreateAsync(this IQueueOperations operations, string resourceGroupName, string accountName, string queueName, IDictionary<string, string> metadata = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, accountName, queueName, metadata, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new queue with the specified queue name, under the specified
            /// account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='queueName'>
            /// A queue name must be unique within a storage account and must be between 3
            /// and 63 characters.The name must comprise of lowercase alphanumeric and
            /// dash(-) characters only, it should begin and end with an alphanumeric
            /// character and it cannot have two consecutive dash(-) characters.
            /// </param>
            /// <param name='metadata'>
            /// A name-value pair that represents queue metadata.
            /// </param>
            public static StorageQueue Update(this IQueueOperations operations, string resourceGroupName, string accountName, string queueName, IDictionary<string, string> metadata = default(IDictionary<string, string>))
            {
                return operations.UpdateAsync(resourceGroupName, accountName, queueName, metadata).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new queue with the specified queue name, under the specified
            /// account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='queueName'>
            /// A queue name must be unique within a storage account and must be between 3
            /// and 63 characters.The name must comprise of lowercase alphanumeric and
            /// dash(-) characters only, it should begin and end with an alphanumeric
            /// character and it cannot have two consecutive dash(-) characters.
            /// </param>
            /// <param name='metadata'>
            /// A name-value pair that represents queue metadata.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageQueue> UpdateAsync(this IQueueOperations operations, string resourceGroupName, string accountName, string queueName, IDictionary<string, string> metadata = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, accountName, queueName, metadata, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the queue with the specified queue name, under the specified account
            /// if it exists.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='queueName'>
            /// A queue name must be unique within a storage account and must be between 3
            /// and 63 characters.The name must comprise of lowercase alphanumeric and
            /// dash(-) characters only, it should begin and end with an alphanumeric
            /// character and it cannot have two consecutive dash(-) characters.
            /// </param>
            public static StorageQueue Get(this IQueueOperations operations, string resourceGroupName, string accountName, string queueName)
            {
                return operations.GetAsync(resourceGroupName, accountName, queueName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the queue with the specified queue name, under the specified account
            /// if it exists.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='queueName'>
            /// A queue name must be unique within a storage account and must be between 3
            /// and 63 characters.The name must comprise of lowercase alphanumeric and
            /// dash(-) characters only, it should begin and end with an alphanumeric
            /// character and it cannot have two consecutive dash(-) characters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageQueue> GetAsync(this IQueueOperations operations, string resourceGroupName, string accountName, string queueName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, queueName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the queue with the specified queue name, under the specified
            /// account if it exists.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='queueName'>
            /// A queue name must be unique within a storage account and must be between 3
            /// and 63 characters.The name must comprise of lowercase alphanumeric and
            /// dash(-) characters only, it should begin and end with an alphanumeric
            /// character and it cannot have two consecutive dash(-) characters.
            /// </param>
            public static void Delete(this IQueueOperations operations, string resourceGroupName, string accountName, string queueName)
            {
                operations.DeleteAsync(resourceGroupName, accountName, queueName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the queue with the specified queue name, under the specified
            /// account if it exists.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='queueName'>
            /// A queue name must be unique within a storage account and must be between 3
            /// and 63 characters.The name must comprise of lowercase alphanumeric and
            /// dash(-) characters only, it should begin and end with an alphanumeric
            /// character and it cannot have two consecutive dash(-) characters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IQueueOperations operations, string resourceGroupName, string accountName, string queueName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, queueName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a list of all the queues under the specified storage account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='maxpagesize'>
            /// Optional, a maximum number of queues that should be included in a list
            /// queue response
            /// </param>
            /// <param name='filter'>
            /// Optional, When specified, only the queues with a name starting with the
            /// given filter will be listed.
            /// </param>
            public static IPage<ListQueue> List(this IQueueOperations operations, string resourceGroupName, string accountName, string maxpagesize = default(string), string filter = default(string))
            {
                return operations.ListAsync(resourceGroupName, accountName, maxpagesize, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of all the queues under the specified storage account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='maxpagesize'>
            /// Optional, a maximum number of queues that should be included in a list
            /// queue response
            /// </param>
            /// <param name='filter'>
            /// Optional, When specified, only the queues with a name starting with the
            /// given filter will be listed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ListQueue>> ListAsync(this IQueueOperations operations, string resourceGroupName, string accountName, string maxpagesize = default(string), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, accountName, maxpagesize, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of all the queues under the specified storage account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ListQueue> ListNext(this IQueueOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of all the queues under the specified storage account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ListQueue>> ListNextAsync(this IQueueOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
