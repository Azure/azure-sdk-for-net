// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Storage
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for StorageManagementClient.
    /// </summary>
    public static partial class StorageManagementClientExtensions
    {
            /// <summary>
            /// List all queue services for the storage account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            public static ListQueueServices ListQueueService(this IStorageManagementClient operations, string resourceGroupName, string accountName)
            {
                return operations.ListQueueServiceAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all queue services for the storage account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListQueueServices> ListQueueServiceAsync(this IStorageManagementClient operations, string resourceGroupName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListQueueServiceWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new queue with the specified queue name, under the specified
            /// account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='queueName'>
            /// A queue name must be unique within a storage account and must be between 3
            /// and 63 characters.The name must comprise of lowercase alphanumeric and
            /// dash(-) characters only, it should begin and end with an alphanumeric
            /// character and it cannot have two consecutive dash(-) characters.
            /// </param>
            /// <param name='metadata'>
            /// A name-value pair that represents queue metadata.
            /// </param>
            public static StorageQueue PutQueue(this IStorageManagementClient operations, string resourceGroupName, string accountName, string queueName, IDictionary<string, string> metadata = default(IDictionary<string, string>))
            {
                return operations.PutQueueAsync(resourceGroupName, accountName, queueName, metadata).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new queue with the specified queue name, under the specified
            /// account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='queueName'>
            /// A queue name must be unique within a storage account and must be between 3
            /// and 63 characters.The name must comprise of lowercase alphanumeric and
            /// dash(-) characters only, it should begin and end with an alphanumeric
            /// character and it cannot have two consecutive dash(-) characters.
            /// </param>
            /// <param name='metadata'>
            /// A name-value pair that represents queue metadata.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageQueue> PutQueueAsync(this IStorageManagementClient operations, string resourceGroupName, string accountName, string queueName, IDictionary<string, string> metadata = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutQueueWithHttpMessagesAsync(resourceGroupName, accountName, queueName, metadata, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new queue with the specified queue name, under the specified
            /// account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='queueName'>
            /// A queue name must be unique within a storage account and must be between 3
            /// and 63 characters.The name must comprise of lowercase alphanumeric and
            /// dash(-) characters only, it should begin and end with an alphanumeric
            /// character and it cannot have two consecutive dash(-) characters.
            /// </param>
            /// <param name='metadata'>
            /// A name-value pair that represents queue metadata.
            /// </param>
            public static StorageQueue PatchQueue(this IStorageManagementClient operations, string resourceGroupName, string accountName, string queueName, IDictionary<string, string> metadata = default(IDictionary<string, string>))
            {
                return operations.PatchQueueAsync(resourceGroupName, accountName, queueName, metadata).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new queue with the specified queue name, under the specified
            /// account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='queueName'>
            /// A queue name must be unique within a storage account and must be between 3
            /// and 63 characters.The name must comprise of lowercase alphanumeric and
            /// dash(-) characters only, it should begin and end with an alphanumeric
            /// character and it cannot have two consecutive dash(-) characters.
            /// </param>
            /// <param name='metadata'>
            /// A name-value pair that represents queue metadata.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageQueue> PatchQueueAsync(this IStorageManagementClient operations, string resourceGroupName, string accountName, string queueName, IDictionary<string, string> metadata = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchQueueWithHttpMessagesAsync(resourceGroupName, accountName, queueName, metadata, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the queue with the specified queue name, under the specified account
            /// if it exists.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='queueName'>
            /// A queue name must be unique within a storage account and must be between 3
            /// and 63 characters.The name must comprise of lowercase alphanumeric and
            /// dash(-) characters only, it should begin and end with an alphanumeric
            /// character and it cannot have two consecutive dash(-) characters.
            /// </param>
            public static StorageQueue GetQueue(this IStorageManagementClient operations, string resourceGroupName, string accountName, string queueName)
            {
                return operations.GetQueueAsync(resourceGroupName, accountName, queueName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the queue with the specified queue name, under the specified account
            /// if it exists.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='queueName'>
            /// A queue name must be unique within a storage account and must be between 3
            /// and 63 characters.The name must comprise of lowercase alphanumeric and
            /// dash(-) characters only, it should begin and end with an alphanumeric
            /// character and it cannot have two consecutive dash(-) characters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageQueue> GetQueueAsync(this IStorageManagementClient operations, string resourceGroupName, string accountName, string queueName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetQueueWithHttpMessagesAsync(resourceGroupName, accountName, queueName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the queue with the specified queue name, under the specified
            /// account if it exists.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='queueName'>
            /// A queue name must be unique within a storage account and must be between 3
            /// and 63 characters.The name must comprise of lowercase alphanumeric and
            /// dash(-) characters only, it should begin and end with an alphanumeric
            /// character and it cannot have two consecutive dash(-) characters.
            /// </param>
            public static void DeleteQueue(this IStorageManagementClient operations, string resourceGroupName, string accountName, string queueName)
            {
                operations.DeleteQueueAsync(resourceGroupName, accountName, queueName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the queue with the specified queue name, under the specified
            /// account if it exists.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='queueName'>
            /// A queue name must be unique within a storage account and must be between 3
            /// and 63 characters.The name must comprise of lowercase alphanumeric and
            /// dash(-) characters only, it should begin and end with an alphanumeric
            /// character and it cannot have two consecutive dash(-) characters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteQueueAsync(this IStorageManagementClient operations, string resourceGroupName, string accountName, string queueName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteQueueWithHttpMessagesAsync(resourceGroupName, accountName, queueName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a list of all the queues under the specified storage account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='maxpagesize'>
            /// Optional, a maximum number of queues that should be included in a list
            /// queue response
            /// </param>
            /// <param name='filter'>
            /// Optional, When specified, only the queues with a name starting with the
            /// given filter will be listed.
            /// </param>
            public static IPage<ListQueue> ListQueueMethod(this IStorageManagementClient operations, string resourceGroupName, string accountName, string maxpagesize = default(string), string filter = default(string))
            {
                return operations.ListQueueMethodAsync(resourceGroupName, accountName, maxpagesize, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of all the queues under the specified storage account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='maxpagesize'>
            /// Optional, a maximum number of queues that should be included in a list
            /// queue response
            /// </param>
            /// <param name='filter'>
            /// Optional, When specified, only the queues with a name starting with the
            /// given filter will be listed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ListQueue>> ListQueueMethodAsync(this IStorageManagementClient operations, string resourceGroupName, string accountName, string maxpagesize = default(string), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListQueueMethodWithHttpMessagesAsync(resourceGroupName, accountName, maxpagesize, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all table services for the storage account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            public static ListTableServices ListTableService(this IStorageManagementClient operations, string resourceGroupName, string accountName)
            {
                return operations.ListTableServiceAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all table services for the storage account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListTableServices> ListTableServiceAsync(this IStorageManagementClient operations, string resourceGroupName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListTableServiceWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new table with the specified table name, under the specified
            /// account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='tableName'>
            /// A table name must be unique within a storage account and must be between 3
            /// and 63 characters.The name must comprise of only alphanumeric characters
            /// and it cannot begin with a numeric character.
            /// </param>
            public static Table PutTable(this IStorageManagementClient operations, string resourceGroupName, string accountName, string tableName)
            {
                return operations.PutTableAsync(resourceGroupName, accountName, tableName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new table with the specified table name, under the specified
            /// account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='tableName'>
            /// A table name must be unique within a storage account and must be between 3
            /// and 63 characters.The name must comprise of only alphanumeric characters
            /// and it cannot begin with a numeric character.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Table> PutTableAsync(this IStorageManagementClient operations, string resourceGroupName, string accountName, string tableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutTableWithHttpMessagesAsync(resourceGroupName, accountName, tableName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new table with the specified table name, under the specified
            /// account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='tableName'>
            /// A table name must be unique within a storage account and must be between 3
            /// and 63 characters.The name must comprise of only alphanumeric characters
            /// and it cannot begin with a numeric character.
            /// </param>
            public static Table PatchTable(this IStorageManagementClient operations, string resourceGroupName, string accountName, string tableName)
            {
                return operations.PatchTableAsync(resourceGroupName, accountName, tableName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new table with the specified table name, under the specified
            /// account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='tableName'>
            /// A table name must be unique within a storage account and must be between 3
            /// and 63 characters.The name must comprise of only alphanumeric characters
            /// and it cannot begin with a numeric character.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Table> PatchTableAsync(this IStorageManagementClient operations, string resourceGroupName, string accountName, string tableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchTableWithHttpMessagesAsync(resourceGroupName, accountName, tableName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the table with the specified table name, under the specified account
            /// if it exists.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='tableName'>
            /// A table name must be unique within a storage account and must be between 3
            /// and 63 characters.The name must comprise of only alphanumeric characters
            /// and it cannot begin with a numeric character.
            /// </param>
            public static Table GetTable(this IStorageManagementClient operations, string resourceGroupName, string accountName, string tableName)
            {
                return operations.GetTableAsync(resourceGroupName, accountName, tableName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the table with the specified table name, under the specified account
            /// if it exists.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='tableName'>
            /// A table name must be unique within a storage account and must be between 3
            /// and 63 characters.The name must comprise of only alphanumeric characters
            /// and it cannot begin with a numeric character.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Table> GetTableAsync(this IStorageManagementClient operations, string resourceGroupName, string accountName, string tableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTableWithHttpMessagesAsync(resourceGroupName, accountName, tableName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the table with the specified table name, under the specified
            /// account if it exists.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='tableName'>
            /// A table name must be unique within a storage account and must be between 3
            /// and 63 characters.The name must comprise of only alphanumeric characters
            /// and it cannot begin with a numeric character.
            /// </param>
            public static void DeleteTable(this IStorageManagementClient operations, string resourceGroupName, string accountName, string tableName)
            {
                operations.DeleteTableAsync(resourceGroupName, accountName, tableName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the table with the specified table name, under the specified
            /// account if it exists.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='tableName'>
            /// A table name must be unique within a storage account and must be between 3
            /// and 63 characters.The name must comprise of only alphanumeric characters
            /// and it cannot begin with a numeric character.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteTableAsync(this IStorageManagementClient operations, string resourceGroupName, string accountName, string tableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteTableWithHttpMessagesAsync(resourceGroupName, accountName, tableName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a list of all the tables under the specified storage account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            public static IPage<Table> QueryTable(this IStorageManagementClient operations, string resourceGroupName, string accountName)
            {
                return operations.QueryTableAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of all the tables under the specified storage account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Table>> QueryTableAsync(this IStorageManagementClient operations, string resourceGroupName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryTableWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of all the queues under the specified storage account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ListQueue> ListQueueMethodNext(this IStorageManagementClient operations, string nextPageLink)
            {
                return operations.ListQueueMethodNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of all the queues under the specified storage account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ListQueue>> ListQueueMethodNextAsync(this IStorageManagementClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListQueueMethodNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of all the tables under the specified storage account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Table> QueryTableNext(this IStorageManagementClient operations, string nextPageLink)
            {
                return operations.QueryTableNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of all the tables under the specified storage account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Table>> QueryTableNextAsync(this IStorageManagementClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryTableNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
