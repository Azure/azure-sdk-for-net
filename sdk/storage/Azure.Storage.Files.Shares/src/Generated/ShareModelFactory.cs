// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.Storage.Files.Shares.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ShareModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.UserDelegationKey"/>. </summary>
        /// <param name="signedOid"> The Azure Active Directory object ID in GUID format. </param>
        /// <param name="signedTid"> The Azure Active Directory tenant ID in GUID format. </param>
        /// <param name="signedStart"> The date-time the key is active. </param>
        /// <param name="signedExpiry"> The date-time the key expires. </param>
        /// <param name="signedService"> Abbreviation of the Azure Storage service that accepts the key. </param>
        /// <param name="signedVersion"> The service version that created the key. </param>
        /// <param name="value"> The key as a base64 string. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="signedOid"/>, <paramref name="signedTid"/>, <paramref name="signedService"/>, <paramref name="signedVersion"/> or <paramref name="value"/> is null. </exception>
        /// <returns> A new <see cref="Models.UserDelegationKey"/> instance for mocking. </returns>
        public static UserDelegationKey UserDelegationKey(string signedOid = null, string signedTid = null, DateTimeOffset signedStart = default, DateTimeOffset signedExpiry = default, string signedService = null, string signedVersion = null, string value = null)
        {
            if (signedOid == null)
            {
                throw new ArgumentNullException(nameof(signedOid));
            }
            if (signedTid == null)
            {
                throw new ArgumentNullException(nameof(signedTid));
            }
            if (signedService == null)
            {
                throw new ArgumentNullException(nameof(signedService));
            }
            if (signedVersion == null)
            {
                throw new ArgumentNullException(nameof(signedVersion));
            }
            if (value == null)
            {
                throw new ArgumentNullException(nameof(value));
            }

            return new UserDelegationKey(
                signedOid,
                signedTid,
                signedStart,
                signedExpiry,
                signedService,
                signedVersion,
                value);
        }
    }
}
