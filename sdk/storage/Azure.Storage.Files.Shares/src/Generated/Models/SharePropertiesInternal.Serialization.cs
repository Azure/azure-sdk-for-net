// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace Azure.Storage.Files.Shares.Models
{
    internal partial class SharePropertiesInternal : IXmlSerializable, IPersistableModel<SharePropertiesInternal>
    {
        private void _Write(XmlWriter writer, string nameHint, ModelReaderWriterOptions options)
        {
            writer.WriteStartElement(nameHint ?? "SharePropertiesInternal");
            writer.WriteStartElement("Last-Modified");
            writer.WriteValue(LastModified, "R");
            writer.WriteEndElement();
            writer.WriteStartElement("Etag");
            writer.WriteValue(Etag);
            writer.WriteEndElement();
            writer.WriteStartElement("Quota");
            writer.WriteValue(Quota);
            writer.WriteEndElement();
            if (Optional.IsDefined(ProvisionedIops))
            {
                writer.WriteStartElement("ProvisionedIops");
                writer.WriteValue(ProvisionedIops.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(ProvisionedIngressMBps))
            {
                writer.WriteStartElement("ProvisionedIngressMBps");
                writer.WriteValue(ProvisionedIngressMBps.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(ProvisionedEgressMBps))
            {
                writer.WriteStartElement("ProvisionedEgressMBps");
                writer.WriteValue(ProvisionedEgressMBps.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(ProvisionedBandwidthMiBps))
            {
                writer.WriteStartElement("ProvisionedBandwidthMiBps");
                writer.WriteValue(ProvisionedBandwidthMiBps.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(NextAllowedQuotaDowngradeTime))
            {
                writer.WriteStartElement("NextAllowedQuotaDowngradeTime");
                writer.WriteValue(NextAllowedQuotaDowngradeTime.Value, "R");
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(DeletedTime))
            {
                writer.WriteStartElement("DeletedTime");
                writer.WriteValue(DeletedTime.Value, "R");
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(RemainingRetentionDays))
            {
                writer.WriteStartElement("RemainingRetentionDays");
                writer.WriteValue(RemainingRetentionDays.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(AccessTier))
            {
                writer.WriteStartElement("AccessTier");
                writer.WriteValue(AccessTier);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(AccessTierChangeTime))
            {
                writer.WriteStartElement("AccessTierChangeTime");
                writer.WriteValue(AccessTierChangeTime.Value, "R");
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(AccessTierTransitionState))
            {
                writer.WriteStartElement("AccessTierTransitionState");
                writer.WriteValue(AccessTierTransitionState);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(LeaseStatus))
            {
                writer.WriteStartElement("LeaseStatus");
                writer.WriteValue(LeaseStatus.Value.ToSerialString());
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(LeaseState))
            {
                writer.WriteStartElement("LeaseState");
                writer.WriteValue(LeaseState.Value.ToSerialString());
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(LeaseDuration))
            {
                writer.WriteStartElement("LeaseDuration");
                writer.WriteValue(LeaseDuration.Value.ToSerialString());
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(EnabledProtocols))
            {
                writer.WriteStartElement("EnabledProtocols");
                writer.WriteValue(EnabledProtocols);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(RootSquash))
            {
                writer.WriteStartElement("RootSquash");
                writer.WriteValue(RootSquash.Value.ToSerialString());
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint) => _Write(writer, nameHint, new ModelReaderWriterOptions("W"));

        internal static SharePropertiesInternal DeserializeSharePropertiesInternal(XElement element, ModelReaderWriterOptions options = null)
        {
            DateTimeOffset lastModified = default;
            string etag = default;
            int quota = default;
            int? provisionedIops = default;
            int? provisionedIngressMBps = default;
            int? provisionedEgressMBps = default;
            int? provisionedBandwidthMiBps = default;
            DateTimeOffset? nextAllowedQuotaDowngradeTime = default;
            DateTimeOffset? deletedTime = default;
            int? remainingRetentionDays = default;
            string accessTier = default;
            DateTimeOffset? accessTierChangeTime = default;
            string accessTierTransitionState = default;
            ShareLeaseStatus? leaseStatus = default;
            ShareLeaseState? leaseState = default;
            ShareLeaseDuration? leaseDuration = default;
            string enabledProtocols = default;
            ShareRootSquash? rootSquash = default;
            if (element.Element("Last-Modified") is XElement lastModifiedElement)
            {
                lastModified = lastModifiedElement.GetDateTimeOffsetValue("R");
            }
            if (element.Element("Etag") is XElement etagElement)
            {
                etag = (string)etagElement;
            }
            if (element.Element("Quota") is XElement quotaElement)
            {
                quota = (int)quotaElement;
            }
            if (element.Element("ProvisionedIops") is XElement provisionedIopsElement)
            {
                provisionedIops = (int?)provisionedIopsElement;
            }
            if (element.Element("ProvisionedIngressMBps") is XElement provisionedIngressMBpsElement)
            {
                provisionedIngressMBps = (int?)provisionedIngressMBpsElement;
            }
            if (element.Element("ProvisionedEgressMBps") is XElement provisionedEgressMBpsElement)
            {
                provisionedEgressMBps = (int?)provisionedEgressMBpsElement;
            }
            if (element.Element("ProvisionedBandwidthMiBps") is XElement provisionedBandwidthMiBpsElement)
            {
                provisionedBandwidthMiBps = (int?)provisionedBandwidthMiBpsElement;
            }
            if (element.Element("NextAllowedQuotaDowngradeTime") is XElement nextAllowedQuotaDowngradeTimeElement)
            {
                nextAllowedQuotaDowngradeTime = nextAllowedQuotaDowngradeTimeElement.GetDateTimeOffsetValue("R");
            }
            if (element.Element("DeletedTime") is XElement deletedTimeElement)
            {
                deletedTime = deletedTimeElement.GetDateTimeOffsetValue("R");
            }
            if (element.Element("RemainingRetentionDays") is XElement remainingRetentionDaysElement)
            {
                remainingRetentionDays = (int?)remainingRetentionDaysElement;
            }
            if (element.Element("AccessTier") is XElement accessTierElement)
            {
                accessTier = (string)accessTierElement;
            }
            if (element.Element("AccessTierChangeTime") is XElement accessTierChangeTimeElement)
            {
                accessTierChangeTime = accessTierChangeTimeElement.GetDateTimeOffsetValue("R");
            }
            if (element.Element("AccessTierTransitionState") is XElement accessTierTransitionStateElement)
            {
                accessTierTransitionState = (string)accessTierTransitionStateElement;
            }
            if (element.Element("LeaseStatus") is XElement leaseStatusElement)
            {
                leaseStatus = leaseStatusElement.Value.ToShareLeaseStatus();
            }
            if (element.Element("LeaseState") is XElement leaseStateElement)
            {
                leaseState = leaseStateElement.Value.ToShareLeaseState();
            }
            if (element.Element("LeaseDuration") is XElement leaseDurationElement)
            {
                leaseDuration = leaseDurationElement.Value.ToShareLeaseDuration();
            }
            if (element.Element("EnabledProtocols") is XElement enabledProtocolsElement)
            {
                enabledProtocols = (string)enabledProtocolsElement;
            }
            if (element.Element("RootSquash") is XElement rootSquashElement)
            {
                rootSquash = rootSquashElement.Value.ToShareRootSquash();
            }
            return new SharePropertiesInternal(lastModified, etag, quota, provisionedIops, provisionedIngressMBps, provisionedEgressMBps, provisionedBandwidthMiBps, nextAllowedQuotaDowngradeTime, deletedTime, remainingRetentionDays, accessTier, accessTierChangeTime, accessTierTransitionState, leaseStatus, leaseState, leaseDuration, enabledProtocols, rootSquash, serializedAdditionalRawData: null);
        }

        BinaryData IPersistableModel<SharePropertiesInternal>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SharePropertiesInternal>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "X":
                    {
                        using MemoryStream stream = new MemoryStream();
                        using XmlWriter writer = XmlWriter.Create(stream);
                        _Write(writer, null, options);
                        writer.Flush();
                        if (stream.Position > int.MaxValue)
                        {
                            return BinaryData.FromStream(stream);
                        }
                        else
                        {
                            return new BinaryData(stream.GetBuffer().AsMemory(0, (int)stream.Position));
                        }
                    }
                default:
                    throw new InvalidOperationException($"The model {nameof(SharePropertiesInternal)} does not support '{options.Format}' format.");
            }
        }

        SharePropertiesInternal IPersistableModel<SharePropertiesInternal>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SharePropertiesInternal>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "X":
                    return DeserializeSharePropertiesInternal(XElement.Load(data.ToStream()), options);
                default:
                    throw new InvalidOperationException($"The model {nameof(SharePropertiesInternal)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<SharePropertiesInternal>.GetFormatFromOptions(ModelReaderWriterOptions options) => "X";
    }
}
