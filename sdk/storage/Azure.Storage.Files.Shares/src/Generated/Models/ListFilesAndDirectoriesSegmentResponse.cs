// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.Storage.Files.Shares.Models
{
    /// <summary> An enumeration of directories and files. </summary>
    internal partial class ListFilesAndDirectoriesSegmentResponse
    {
        /// <summary> Initializes a new instance of ListFilesAndDirectoriesSegmentResponse. </summary>
        /// <param name="serviceEndpoint"> . </param>
        /// <param name="shareName"> . </param>
        /// <param name="directoryPath"> . </param>
        /// <param name="prefix"> . </param>
        /// <param name="segment"> Abstract for entries that can be listed from Directory. </param>
        /// <param name="nextMarker"> . </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serviceEndpoint"/>, <paramref name="shareName"/>, <paramref name="directoryPath"/>, <paramref name="prefix"/>, <paramref name="segment"/>, or <paramref name="nextMarker"/> is null. </exception>
        internal ListFilesAndDirectoriesSegmentResponse(string serviceEndpoint, string shareName, string directoryPath, string prefix, FilesAndDirectoriesListSegment segment, string nextMarker)
        {
            if (serviceEndpoint == null)
            {
                throw new ArgumentNullException(nameof(serviceEndpoint));
            }
            if (shareName == null)
            {
                throw new ArgumentNullException(nameof(shareName));
            }
            if (directoryPath == null)
            {
                throw new ArgumentNullException(nameof(directoryPath));
            }
            if (prefix == null)
            {
                throw new ArgumentNullException(nameof(prefix));
            }
            if (segment == null)
            {
                throw new ArgumentNullException(nameof(segment));
            }
            if (nextMarker == null)
            {
                throw new ArgumentNullException(nameof(nextMarker));
            }

            ServiceEndpoint = serviceEndpoint;
            ShareName = shareName;
            DirectoryPath = directoryPath;
            Prefix = prefix;
            Segment = segment;
            NextMarker = nextMarker;
        }

        /// <summary> Initializes a new instance of ListFilesAndDirectoriesSegmentResponse. </summary>
        /// <param name="serviceEndpoint"> . </param>
        /// <param name="shareName"> . </param>
        /// <param name="shareSnapshot"> . </param>
        /// <param name="directoryPath"> . </param>
        /// <param name="prefix"> . </param>
        /// <param name="marker"> . </param>
        /// <param name="maxResults"> . </param>
        /// <param name="segment"> Abstract for entries that can be listed from Directory. </param>
        /// <param name="nextMarker"> . </param>
        /// <param name="directoryId"> . </param>
        internal ListFilesAndDirectoriesSegmentResponse(string serviceEndpoint, string shareName, string shareSnapshot, string directoryPath, string prefix, string marker, int? maxResults, FilesAndDirectoriesListSegment segment, string nextMarker, string directoryId)
        {
            ServiceEndpoint = serviceEndpoint;
            ShareName = shareName;
            ShareSnapshot = shareSnapshot;
            DirectoryPath = directoryPath;
            Prefix = prefix;
            Marker = marker;
            MaxResults = maxResults;
            Segment = segment;
            NextMarker = nextMarker;
            DirectoryId = directoryId;
        }

        public string ServiceEndpoint { get; }
        public string ShareName { get; }
        public string ShareSnapshot { get; }
        public string DirectoryPath { get; }
        public string Prefix { get; }
        public string Marker { get; }
        public int? MaxResults { get; }
        /// <summary> Abstract for entries that can be listed from Directory. </summary>
        public FilesAndDirectoriesListSegment Segment { get; }
        public string NextMarker { get; }
        public string DirectoryId { get; }
    }
}
