// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace Azure.Storage.Files.Shares.Models
{
    internal partial class DirectoryItem : IXmlSerializable, IPersistableModel<DirectoryItem>
    {
        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "Directory");
            writer.WriteObjectValue(Name, "Name");
            if (Optional.IsDefined(FileId))
            {
                writer.WriteStartElement("FileId");
                writer.WriteValue(FileId);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Properties))
            {
                writer.WriteObjectValue(Properties, "Properties");
            }
            if (Optional.IsDefined(Attributes))
            {
                writer.WriteStartElement("Attributes");
                writer.WriteValue(Attributes);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(PermissionKey))
            {
                writer.WriteStartElement("PermissionKey");
                writer.WriteValue(PermissionKey);
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
        }

        internal static DirectoryItem DeserializeDirectoryItem(XElement element, ModelReaderWriterOptions options = null)
        {
            StringEncoded name = default;
            string fileId = default;
            FileProperty properties = default;
            string attributes = default;
            string permissionKey = default;
            if (element.Element("Name") is XElement nameElement)
            {
                name = StringEncoded.DeserializeStringEncoded(nameElement);
            }
            if (element.Element("FileId") is XElement fileIdElement)
            {
                fileId = (string)fileIdElement;
            }
            if (element.Element("Properties") is XElement propertiesElement)
            {
                properties = FileProperty.DeserializeFileProperty(propertiesElement);
            }
            if (element.Element("Attributes") is XElement attributesElement)
            {
                attributes = (string)attributesElement;
            }
            if (element.Element("PermissionKey") is XElement permissionKeyElement)
            {
                permissionKey = (string)permissionKeyElement;
            }
            return new DirectoryItem(name, fileId, properties, attributes, permissionKey, default);
        }

        BinaryData IPersistableModel<DirectoryItem>.Write(ModelReaderWriterOptions options)
        {
            bool implementsJson = this is IJsonModel<DirectoryItem>;
            bool isValid = options.Format == "J" && implementsJson || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {GetType().Name} does not support '{options.Format}' format.");
            }

            using MemoryStream stream = new MemoryStream();
            using XmlWriter writer = XmlWriter.Create(stream);
            ((IXmlSerializable)this).Write(writer, null);
            writer.Flush();
            if (stream.Position > int.MaxValue)
            {
                return BinaryData.FromStream(stream);
            }
            else
            {
                return new BinaryData(stream.GetBuffer().AsMemory(0, (int)stream.Position));
            }
        }

        DirectoryItem IPersistableModel<DirectoryItem>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(DirectoryItem)} does not support '{options.Format}' format.");
            }

            return DeserializeDirectoryItem(XElement.Load(data.ToStream()), options);
        }

        string IPersistableModel<DirectoryItem>.GetWireFormat(ModelReaderWriterOptions options) => "X";
    }
}
