// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace Azure.Storage.Files.Shares.Models
{
    internal partial class ListSharesResponse : IXmlSerializable, IPersistableModel<ListSharesResponse>
    {
        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "EnumerationResults");
            writer.WriteStartAttribute("ServiceEndpoint");
            writer.WriteValue(ServiceEndpoint);
            writer.WriteEndAttribute();
            if (Optional.IsDefined(Prefix))
            {
                writer.WriteStartElement("Prefix");
                writer.WriteValue(Prefix);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Marker))
            {
                writer.WriteStartElement("Marker");
                writer.WriteValue(Marker);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(MaxResults))
            {
                writer.WriteStartElement("MaxResults");
                writer.WriteValue(MaxResults.Value);
                writer.WriteEndElement();
            }
            writer.WriteStartElement("NextMarker");
            writer.WriteValue(NextMarker);
            writer.WriteEndElement();
            if (Optional.IsCollectionDefined(ShareItems))
            {
                writer.WriteStartElement("Shares");
                foreach (var item in ShareItems)
                {
                    writer.WriteObjectValue(item, "Share");
                }
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
        }

        internal static ListSharesResponse DeserializeListSharesResponse(XElement element, ModelReaderWriterOptions options = null)
        {
            string serviceEndpoint = default;
            string prefix = default;
            string marker = default;
            int? maxResults = default;
            string nextMarker = default;
            IReadOnlyList<ShareItemInternal> shareItems = default;
            if (element.Attribute("ServiceEndpoint") is XAttribute serviceEndpointAttribute)
            {
                serviceEndpoint = (string)serviceEndpointAttribute;
            }
            if (element.Element("Prefix") is XElement prefixElement)
            {
                prefix = (string)prefixElement;
            }
            if (element.Element("Marker") is XElement markerElement)
            {
                marker = (string)markerElement;
            }
            if (element.Element("MaxResults") is XElement maxResultsElement)
            {
                maxResults = (int?)maxResultsElement;
            }
            if (element.Element("NextMarker") is XElement nextMarkerElement)
            {
                nextMarker = (string)nextMarkerElement;
            }
            if (element.Element("Shares") is XElement sharesElement)
            {
                var array = new List<ShareItemInternal>();
                foreach (var e in sharesElement.Elements("Share"))
                {
                    array.Add(ShareItemInternal.DeserializeShareItemInternal(e));
                }
                shareItems = array;
            }
            return new ListSharesResponse(serviceEndpoint, prefix, marker, maxResults, shareItems, nextMarker, default);
        }

        BinaryData IPersistableModel<ListSharesResponse>.Write(ModelReaderWriterOptions options)
        {
            bool implementsJson = this is IJsonModel<ListSharesResponse>;
            bool isValid = options.Format == "J" && implementsJson || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {GetType().Name} does not support '{options.Format}' format.");
            }

            using MemoryStream stream = new MemoryStream();
            using XmlWriter writer = XmlWriter.Create(stream);
            ((IXmlSerializable)this).Write(writer, null);
            writer.Flush();
            if (stream.Position > int.MaxValue)
            {
                return BinaryData.FromStream(stream);
            }
            else
            {
                return new BinaryData(stream.GetBuffer().AsMemory(0, (int)stream.Position));
            }
        }

        ListSharesResponse IPersistableModel<ListSharesResponse>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(ListSharesResponse)} does not support '{options.Format}' format.");
            }

            return DeserializeListSharesResponse(XElement.Load(data.ToStream()), options);
        }

        string IPersistableModel<ListSharesResponse>.GetFormatFromOptions(ModelReaderWriterOptions options) => "X";
    }
}
