// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace Azure.Storage.Files.Shares.Models
{
    internal partial class HandleItem : IXmlSerializable, IPersistableModel<HandleItem>
    {
        private void _Write(XmlWriter writer, string nameHint, ModelReaderWriterOptions options)
        {
            writer.WriteStartElement(nameHint ?? "Handle");
            writer.WriteStartElement("HandleId");
            writer.WriteValue(HandleId);
            writer.WriteEndElement();
            writer.WriteObjectValue(Path, "Path");
            writer.WriteStartElement("FileId");
            writer.WriteValue(FileId);
            writer.WriteEndElement();
            if (Optional.IsDefined(ParentId))
            {
                writer.WriteStartElement("ParentId");
                writer.WriteValue(ParentId);
                writer.WriteEndElement();
            }
            writer.WriteStartElement("SessionId");
            writer.WriteValue(SessionId);
            writer.WriteEndElement();
            writer.WriteStartElement("ClientIp");
            writer.WriteValue(ClientIp);
            writer.WriteEndElement();
            writer.WriteStartElement("ClientName");
            writer.WriteValue(ClientName);
            writer.WriteEndElement();
            writer.WriteStartElement("OpenTime");
            writer.WriteValue(OpenTime, "R");
            writer.WriteEndElement();
            if (Optional.IsDefined(LastReconnectTime))
            {
                writer.WriteStartElement("LastReconnectTime");
                writer.WriteValue(LastReconnectTime.Value, "R");
                writer.WriteEndElement();
            }
            if (Optional.IsCollectionDefined(AccessRightList))
            {
                writer.WriteStartElement("AccessRightList");
                foreach (var item in AccessRightList)
                {
                    writer.WriteStartElement("AccessRight");
                    writer.WriteValue(item.ToSerialString());
                    writer.WriteEndElement();
                }
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint) => _Write(writer, nameHint, new ModelReaderWriterOptions("W"));

        internal static HandleItem DeserializeHandleItem(XElement element, ModelReaderWriterOptions options = null)
        {
            string handleId = default;
            StringEncoded path = default;
            string fileId = default;
            string parentId = default;
            string sessionId = default;
            string clientIp = default;
            string clientName = default;
            DateTimeOffset openTime = default;
            DateTimeOffset? lastReconnectTime = default;
            IReadOnlyList<AccessRight> accessRightList = default;
            if (element.Element("HandleId") is XElement handleIdElement)
            {
                handleId = (string)handleIdElement;
            }
            if (element.Element("Path") is XElement pathElement)
            {
                path = StringEncoded.DeserializeStringEncoded(pathElement);
            }
            if (element.Element("FileId") is XElement fileIdElement)
            {
                fileId = (string)fileIdElement;
            }
            if (element.Element("ParentId") is XElement parentIdElement)
            {
                parentId = (string)parentIdElement;
            }
            if (element.Element("SessionId") is XElement sessionIdElement)
            {
                sessionId = (string)sessionIdElement;
            }
            if (element.Element("ClientIp") is XElement clientIpElement)
            {
                clientIp = (string)clientIpElement;
            }
            if (element.Element("ClientName") is XElement clientNameElement)
            {
                clientName = (string)clientNameElement;
            }
            if (element.Element("OpenTime") is XElement openTimeElement)
            {
                openTime = openTimeElement.GetDateTimeOffsetValue("R");
            }
            if (element.Element("LastReconnectTime") is XElement lastReconnectTimeElement)
            {
                lastReconnectTime = lastReconnectTimeElement.GetDateTimeOffsetValue("R");
            }
            if (element.Element("AccessRightList") is XElement accessRightListElement)
            {
                var array = new List<AccessRight>();
                foreach (var e in accessRightListElement.Elements("AccessRight"))
                {
                    array.Add(e.Value.ToAccessRight());
                }
                accessRightList = array;
            }
            return new HandleItem(handleId, path, fileId, parentId, sessionId, clientIp, clientName, openTime, lastReconnectTime, accessRightList, serializedAdditionalRawData: null);
        }

        BinaryData IPersistableModel<HandleItem>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HandleItem>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "X":
                    {
                        using MemoryStream stream = new MemoryStream();
                        using XmlWriter writer = XmlWriter.Create(stream);
                        _Write(writer, null, options);
                        writer.Flush();
                        if (stream.Position > int.MaxValue)
                        {
                            return BinaryData.FromStream(stream);
                        }
                        else
                        {
                            return new BinaryData(stream.GetBuffer().AsMemory(0, (int)stream.Position));
                        }
                    }
                default:
                    throw new InvalidOperationException($"The model {nameof(HandleItem)} does not support '{options.Format}' format.");
            }
        }

        HandleItem IPersistableModel<HandleItem>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HandleItem>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "X":
                    return DeserializeHandleItem(XElement.Load(data.ToStream()), options);
                default:
                    throw new InvalidOperationException($"The model {nameof(HandleItem)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<HandleItem>.GetFormatFromOptions(ModelReaderWriterOptions options) => "X";
    }
}
