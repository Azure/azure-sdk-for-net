// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace Azure.Storage.Files.Shares.Models
{
    internal partial class HandleItem : IXmlSerializable, IModel<HandleItem>
    {
        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "Handle");
            writer.WriteStartElement("HandleId");
            writer.WriteValue(HandleId);
            writer.WriteEndElement();
            writer.WriteObjectValue(Path, "Path");
            writer.WriteStartElement("FileId");
            writer.WriteValue(FileId);
            writer.WriteEndElement();
            if (Optional.IsDefined(ParentId))
            {
                writer.WriteStartElement("ParentId");
                writer.WriteValue(ParentId);
                writer.WriteEndElement();
            }
            writer.WriteStartElement("SessionId");
            writer.WriteValue(SessionId);
            writer.WriteEndElement();
            writer.WriteStartElement("ClientIp");
            writer.WriteValue(ClientIp);
            writer.WriteEndElement();
            writer.WriteStartElement("OpenTime");
            writer.WriteValue(OpenTime, "R");
            writer.WriteEndElement();
            if (Optional.IsDefined(LastReconnectTime))
            {
                writer.WriteStartElement("LastReconnectTime");
                writer.WriteValue(LastReconnectTime.Value, "R");
                writer.WriteEndElement();
            }
            if (Optional.IsCollectionDefined(AccessRightList))
            {
                writer.WriteStartElement("AccessRightList");
                foreach (var item in AccessRightList)
                {
                    writer.WriteStartElement("AccessRight");
                    writer.WriteValue(item.ToSerialString());
                    writer.WriteEndElement();
                }
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
        }

        internal static HandleItem DeserializeHandleItem(XElement element, ModelReaderWriterOptions options = null)
        {
            string handleId = default;
            StringEncoded path = default;
            string fileId = default;
            string parentId = default;
            string sessionId = default;
            string clientIp = default;
            DateTimeOffset openTime = default;
            DateTimeOffset? lastReconnectTime = default;
            IReadOnlyList<AccessRight> accessRightList = default;
            if (element.Element("HandleId") is XElement handleIdElement)
            {
                handleId = (string)handleIdElement;
            }
            if (element.Element("Path") is XElement pathElement)
            {
                path = StringEncoded.DeserializeStringEncoded(pathElement);
            }
            if (element.Element("FileId") is XElement fileIdElement)
            {
                fileId = (string)fileIdElement;
            }
            if (element.Element("ParentId") is XElement parentIdElement)
            {
                parentId = (string)parentIdElement;
            }
            if (element.Element("SessionId") is XElement sessionIdElement)
            {
                sessionId = (string)sessionIdElement;
            }
            if (element.Element("ClientIp") is XElement clientIpElement)
            {
                clientIp = (string)clientIpElement;
            }
            if (element.Element("OpenTime") is XElement openTimeElement)
            {
                openTime = openTimeElement.GetDateTimeOffsetValue("R");
            }
            if (element.Element("LastReconnectTime") is XElement lastReconnectTimeElement)
            {
                lastReconnectTime = lastReconnectTimeElement.GetDateTimeOffsetValue("R");
            }
            if (element.Element("AccessRightList") is XElement accessRightListElement)
            {
                var array = new List<AccessRight>();
                foreach (var e in accessRightListElement.Elements("AccessRight"))
                {
                    array.Add(e.Value.ToAccessRight());
                }
                accessRightList = array;
            }
            return new HandleItem(handleId, path, fileId, parentId, sessionId, clientIp, openTime, lastReconnectTime, accessRightList, default);
        }

        BinaryData IModel<HandleItem>.Write(ModelReaderWriterOptions options)
        {
            bool implementsJson = this is IJsonModel<HandleItem>;
            bool isValid = options.Format == ModelReaderWriterFormat.Json && implementsJson || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {GetType().Name} does not support '{options.Format}' format.");
            }

            using MemoryStream stream = new MemoryStream();
            using XmlWriter writer = XmlWriter.Create(stream);
            ((IXmlSerializable)this).Write(writer, null);
            writer.Flush();
            if (stream.Position > int.MaxValue)
            {
                return BinaryData.FromStream(stream);
            }
            else
            {
                return new BinaryData(stream.GetBuffer().AsMemory(0, (int)stream.Position));
            }
        }

        HandleItem IModel<HandleItem>.Read(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == ModelReaderWriterFormat.Json || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(HandleItem)} does not support '{options.Format}' format.");
            }

            return DeserializeHandleItem(XElement.Load(data.ToStream()), options);
        }

        ModelReaderWriterFormat IModel<HandleItem>.GetWireFormat(ModelReaderWriterOptions options) => ModelReaderWriterFormat.Xml;
    }
}
