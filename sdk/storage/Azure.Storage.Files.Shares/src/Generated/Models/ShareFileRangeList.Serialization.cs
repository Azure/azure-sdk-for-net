// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace Azure.Storage.Files.Shares.Models
{
    internal partial class ShareFileRangeList : IXmlSerializable, IPersistableModel<ShareFileRangeList>
    {
        private void _Write(XmlWriter writer, string nameHint, ModelReaderWriterOptions options)
        {
            writer.WriteStartElement(nameHint ?? "Ranges");
            if (Optional.IsCollectionDefined(Ranges))
            {
                foreach (var item in Ranges)
                {
                    writer.WriteObjectValue(item, "Range");
                }
            }
            if (Optional.IsCollectionDefined(ClearRanges))
            {
                foreach (var item in ClearRanges)
                {
                    writer.WriteObjectValue(item, "ClearRange");
                }
            }
            writer.WriteEndElement();
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint) => _Write(writer, nameHint, new ModelReaderWriterOptions("W"));

        internal static ShareFileRangeList DeserializeShareFileRangeList(XElement element, ModelReaderWriterOptions options = null)
        {
            IReadOnlyList<FileRange> ranges = default;
            IReadOnlyList<ClearRange> clearRanges = default;
            var array = new List<FileRange>();
            foreach (var e in element.Elements("Range"))
            {
                array.Add(FileRange.DeserializeFileRange(e));
            }
            ranges = array;
            var array0 = new List<ClearRange>();
            foreach (var e in element.Elements("ClearRange"))
            {
                array0.Add(ClearRange.DeserializeClearRange(e));
            }
            clearRanges = array0;
            return new ShareFileRangeList(ranges, clearRanges, serializedAdditionalRawData: null);
        }

        BinaryData IPersistableModel<ShareFileRangeList>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ShareFileRangeList>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "X":
                    {
                        using MemoryStream stream = new MemoryStream();
                        using XmlWriter writer = XmlWriter.Create(stream);
                        _Write(writer, null, options);
                        writer.Flush();
                        if (stream.Position > int.MaxValue)
                        {
                            return BinaryData.FromStream(stream);
                        }
                        else
                        {
                            return new BinaryData(stream.GetBuffer().AsMemory(0, (int)stream.Position));
                        }
                    }
                default:
                    throw new InvalidOperationException($"The model {nameof(ShareFileRangeList)} does not support '{options.Format}' format.");
            }
        }

        ShareFileRangeList IPersistableModel<ShareFileRangeList>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ShareFileRangeList>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "X":
                    return DeserializeShareFileRangeList(XElement.Load(data.ToStream()), options);
                default:
                    throw new InvalidOperationException($"The model {nameof(ShareFileRangeList)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<ShareFileRangeList>.GetFormatFromOptions(ModelReaderWriterOptions options) => "X";
    }
}
