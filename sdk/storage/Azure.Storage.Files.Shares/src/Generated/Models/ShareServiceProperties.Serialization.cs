// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace Azure.Storage.Files.Shares.Models
{
    public partial class ShareServiceProperties : IXmlSerializable, IPersistableModel<ShareServiceProperties>
    {
        private void WriteInternal(XmlWriter writer, string nameHint, ModelReaderWriterOptions options)
        {
            writer.WriteStartElement(nameHint ?? "StorageServiceProperties");
            if (Optional.IsDefined(HourMetrics))
            {
                writer.WriteObjectValue(HourMetrics, "HourMetrics");
            }
            if (Optional.IsDefined(MinuteMetrics))
            {
                writer.WriteObjectValue(MinuteMetrics, "MinuteMetrics");
            }
            if (Optional.IsDefined(Protocol))
            {
                writer.WriteObjectValue(Protocol, "ProtocolSettings");
            }
            if (Optional.IsCollectionDefined(Cors))
            {
                writer.WriteStartElement("Cors");
                foreach (var item in Cors)
                {
                    writer.WriteObjectValue(item, "CorsRule");
                }
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint) => WriteInternal(writer, nameHint, new ModelReaderWriterOptions("W"));

        internal static ShareServiceProperties DeserializeShareServiceProperties(XElement element, ModelReaderWriterOptions options = null)
        {
            ShareMetrics hourMetrics = default;
            ShareMetrics minuteMetrics = default;
            ShareProtocolSettings protocol = default;
            IList<ShareCorsRule> cors = default;
            if (element.Element("HourMetrics") is XElement hourMetricsElement)
            {
                hourMetrics = ShareMetrics.DeserializeShareMetrics(hourMetricsElement);
            }
            if (element.Element("MinuteMetrics") is XElement minuteMetricsElement)
            {
                minuteMetrics = ShareMetrics.DeserializeShareMetrics(minuteMetricsElement);
            }
            if (element.Element("ProtocolSettings") is XElement protocolSettingsElement)
            {
                protocol = ShareProtocolSettings.DeserializeShareProtocolSettings(protocolSettingsElement);
            }
            if (element.Element("Cors") is XElement corsElement)
            {
                var array = new List<ShareCorsRule>();
                foreach (var e in corsElement.Elements("CorsRule"))
                {
                    array.Add(ShareCorsRule.DeserializeShareCorsRule(e));
                }
                cors = array;
            }
            return new ShareServiceProperties(hourMetrics, minuteMetrics, cors, protocol, serializedAdditionalRawData: null);
        }

        BinaryData IPersistableModel<ShareServiceProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ShareServiceProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "X":
                    {
                        using MemoryStream stream = new MemoryStream();
                        using XmlWriter writer = XmlWriter.Create(stream);
                        WriteInternal(writer, null, options);
                        writer.Flush();
                        if (stream.Position > int.MaxValue)
                        {
                            return BinaryData.FromStream(stream);
                        }
                        else
                        {
                            return new BinaryData(stream.GetBuffer().AsMemory(0, (int)stream.Position));
                        }
                    }
                default:
                    throw new InvalidOperationException($"The model {nameof(ShareServiceProperties)} does not support '{options.Format}' format.");
            }
        }

        ShareServiceProperties IPersistableModel<ShareServiceProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ShareServiceProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "X":
                    return DeserializeShareServiceProperties(XElement.Load(data.ToStream()), options);
                default:
                    throw new InvalidOperationException($"The model {nameof(ShareServiceProperties)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<ShareServiceProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "X";
    }
}
