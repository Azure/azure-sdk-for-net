// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace Azure.Storage.Files.Shares.Models
{
    internal partial class FilesAndDirectoriesListSegment : IXmlSerializable, IModel<FilesAndDirectoriesListSegment>
    {
        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "Entries");
            foreach (var item in DirectoryItems)
            {
                writer.WriteObjectValue(item, "Directory");
            }
            foreach (var item in FileItems)
            {
                writer.WriteObjectValue(item, "File");
            }
            writer.WriteEndElement();
        }

        internal static FilesAndDirectoriesListSegment DeserializeFilesAndDirectoriesListSegment(XElement element, ModelReaderWriterOptions options = null)
        {
            IReadOnlyList<DirectoryItem> directoryItems = default;
            IReadOnlyList<FileItem> fileItems = default;
            var array = new List<DirectoryItem>();
            foreach (var e in element.Elements("Directory"))
            {
                array.Add(DirectoryItem.DeserializeDirectoryItem(e));
            }
            directoryItems = array;
            var array0 = new List<FileItem>();
            foreach (var e in element.Elements("File"))
            {
                array0.Add(FileItem.DeserializeFileItem(e));
            }
            fileItems = array0;
            return new FilesAndDirectoriesListSegment(directoryItems, fileItems, default);
        }

        BinaryData IModel<FilesAndDirectoriesListSegment>.Write(ModelReaderWriterOptions options)
        {
            bool implementsJson = this is IJsonModel<FilesAndDirectoriesListSegment>;
            bool isValid = options.Format == ModelReaderWriterFormat.Json && implementsJson || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {GetType().Name} does not support '{options.Format}' format.");
            }

            using MemoryStream stream = new MemoryStream();
            using XmlWriter writer = XmlWriter.Create(stream);
            ((IXmlSerializable)this).Write(writer, null);
            writer.Flush();
            if (stream.Position > int.MaxValue)
            {
                return BinaryData.FromStream(stream);
            }
            else
            {
                return new BinaryData(stream.GetBuffer().AsMemory(0, (int)stream.Position));
            }
        }

        FilesAndDirectoriesListSegment IModel<FilesAndDirectoriesListSegment>.Read(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == ModelReaderWriterFormat.Json || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(FilesAndDirectoriesListSegment)} does not support '{options.Format}' format.");
            }

            return DeserializeFilesAndDirectoriesListSegment(XElement.Load(data.ToStream()), options);
        }

        ModelReaderWriterFormat IModel<FilesAndDirectoriesListSegment>.GetWireFormat(ModelReaderWriterOptions options) => ModelReaderWriterFormat.Xml;
    }
}
