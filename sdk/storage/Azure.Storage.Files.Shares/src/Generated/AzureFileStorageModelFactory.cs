// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Storage.Files.Shares.Models;

namespace Azure.Storage.Files.Shares
{
    /// <summary> Model factory for AzureFileStorage read-only models. </summary>
    public static partial class AzureFileStorageModelFactory
    {
        /// <summary> Initializes new instance of ShareStatistics class. </summary>
        /// <param name="shareUsageBytes"> The approximate size of the data stored in bytes. Note that this value may not include all recently created or recently resized files. </param>
        /// <returns> A new <see cref="Models.ShareStatistics"/> instance for mocking. </returns>
        public static ShareStatistics ShareStatistics(int shareUsageBytes = default)
        {
            return new ShareStatistics(shareUsageBytes);
        }

        /// <summary> Initializes new instance of ShareFileHandle class. </summary>
        /// <param name="handleId"> XSMB service handle ID. </param>
        /// <param name="path"> File or directory name including full path starting from share root. </param>
        /// <param name="fileId"> FileId uniquely identifies the file or directory. </param>
        /// <param name="parentId"> ParentId uniquely identifies the parent directory of the object. </param>
        /// <param name="sessionId"> SMB session ID in context of which the file handle was opened. </param>
        /// <param name="clientIp"> Client IP that opened the handle. </param>
        /// <param name="openedOn"> Time when the session that previously opened the handle has last been reconnected. (UTC). </param>
        /// <param name="lastReconnectedOn"> Time handle was last connected to (UTC). </param>
        /// <returns> A new <see cref="Models.ShareFileHandle"/> instance for mocking. </returns>
        public static ShareFileHandle ShareFileHandle(string handleId = default, string path = default, string fileId = default, string parentId = default, string sessionId = default, string clientIp = default, DateTimeOffset? openedOn = default, DateTimeOffset? lastReconnectedOn = default)
        {
            return new ShareFileHandle(handleId, path, fileId, parentId, sessionId, clientIp, openedOn, lastReconnectedOn);
        }
    }
}
