// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Storage.Models
{
    /// <summary> Indicates the directory service used. </summary>
    public readonly partial struct DirectoryServiceOptions : IEquatable<DirectoryServiceOptions>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="DirectoryServiceOptions"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DirectoryServiceOptions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string AaddsValue = "AADDS";
        private const string ADValue = "AD";

        /// <summary> None. </summary>
        public static DirectoryServiceOptions None { get; } = new DirectoryServiceOptions(NoneValue);
        /// <summary> AADDS. </summary>
        public static DirectoryServiceOptions Aadds { get; } = new DirectoryServiceOptions(AaddsValue);
        /// <summary> AD. </summary>
        public static DirectoryServiceOptions AD { get; } = new DirectoryServiceOptions(ADValue);
        /// <summary> Determines if two <see cref="DirectoryServiceOptions"/> values are the same. </summary>
        public static bool operator ==(DirectoryServiceOptions left, DirectoryServiceOptions right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DirectoryServiceOptions"/> values are not the same. </summary>
        public static bool operator !=(DirectoryServiceOptions left, DirectoryServiceOptions right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DirectoryServiceOptions"/>. </summary>
        public static implicit operator DirectoryServiceOptions(string value) => new DirectoryServiceOptions(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DirectoryServiceOptions other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DirectoryServiceOptions other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
