// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Storage.Models
{
    /// <summary> Indicates the type of storage account. </summary>
    public readonly partial struct Kind : IEquatable<Kind>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="Kind"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Kind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string StorageValue = "Storage";
        private const string StorageV2Value = "StorageV2";
        private const string BlobStorageValue = "BlobStorage";
        private const string FileStorageValue = "FileStorage";
        private const string BlockBlobStorageValue = "BlockBlobStorage";

        /// <summary> Storage. </summary>
        public static Kind Storage { get; } = new Kind(StorageValue);
        /// <summary> StorageV2. </summary>
        public static Kind StorageV2 { get; } = new Kind(StorageV2Value);
        /// <summary> BlobStorage. </summary>
        public static Kind BlobStorage { get; } = new Kind(BlobStorageValue);
        /// <summary> FileStorage. </summary>
        public static Kind FileStorage { get; } = new Kind(FileStorageValue);
        /// <summary> BlockBlobStorage. </summary>
        public static Kind BlockBlobStorage { get; } = new Kind(BlockBlobStorageValue);
        /// <summary> Determines if two <see cref="Kind"/> values are the same. </summary>
        public static bool operator ==(Kind left, Kind right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Kind"/> values are not the same. </summary>
        public static bool operator !=(Kind left, Kind right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Kind"/>. </summary>
        public static implicit operator Kind(string value) => new Kind(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Kind other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Kind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
