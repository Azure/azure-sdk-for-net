// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Storage.Models
{
    public partial class SmbSetting : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(Multichannel))
            {
                writer.WritePropertyName("multichannel"u8);
                writer.WriteObjectValue(Multichannel);
            }
            if (Core.Optional.IsDefined(Versions))
            {
                writer.WritePropertyName("versions"u8);
                writer.WriteStringValue(Versions);
            }
            if (Core.Optional.IsDefined(AuthenticationMethods))
            {
                writer.WritePropertyName("authenticationMethods"u8);
                writer.WriteStringValue(AuthenticationMethods);
            }
            if (Core.Optional.IsDefined(KerberosTicketEncryption))
            {
                writer.WritePropertyName("kerberosTicketEncryption"u8);
                writer.WriteStringValue(KerberosTicketEncryption);
            }
            if (Core.Optional.IsDefined(ChannelEncryption))
            {
                writer.WritePropertyName("channelEncryption"u8);
                writer.WriteStringValue(ChannelEncryption);
            }
            writer.WriteEndObject();
        }

        internal static SmbSetting DeserializeSmbSetting(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<Multichannel> multichannel = default;
            Core.Optional<string> versions = default;
            Core.Optional<string> authenticationMethods = default;
            Core.Optional<string> kerberosTicketEncryption = default;
            Core.Optional<string> channelEncryption = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("multichannel"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    multichannel = Multichannel.DeserializeMultichannel(property.Value);
                    continue;
                }
                if (property.NameEquals("versions"u8))
                {
                    versions = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("authenticationMethods"u8))
                {
                    authenticationMethods = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("kerberosTicketEncryption"u8))
                {
                    kerberosTicketEncryption = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("channelEncryption"u8))
                {
                    channelEncryption = property.Value.GetString();
                    continue;
                }
            }
            return new SmbSetting(multichannel.Value, versions.Value, authenticationMethods.Value, kerberosTicketEncryption.Value, channelEncryption.Value);
        }
    }
}
