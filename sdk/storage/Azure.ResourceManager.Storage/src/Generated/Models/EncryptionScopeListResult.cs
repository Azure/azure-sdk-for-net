// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Storage;

namespace Azure.ResourceManager.Storage.Models
{
    /// <summary> List of encryption scopes requested, and if paging is required, a URL to the next page of encryption scopes. </summary>
    internal partial class EncryptionScopeListResult
    {
        private Dictionary<string, BinaryData> _rawData;

        /// <summary> Initializes a new instance of <see cref="EncryptionScopeListResult"/>. </summary>
        internal EncryptionScopeListResult()
        {
            Value = new ChangeTrackingList<EncryptionScopeData>();
        }

        /// <summary> Initializes a new instance of <see cref="EncryptionScopeListResult"/>. </summary>
        /// <param name="value"> List of encryption scopes requested. </param>
        /// <param name="nextLink"> Request URL that can be used to query next page of encryption scopes. Returned when total number of requested encryption scopes exceeds the maximum page size. </param>
        /// <param name="rawData"> Keeps track of any properties unknown to the library. </param>
        internal EncryptionScopeListResult(IReadOnlyList<EncryptionScopeData> value, string nextLink, Dictionary<string, BinaryData> rawData)
        {
            Value = value;
            NextLink = nextLink;
            _rawData = rawData;
        }

        /// <summary> List of encryption scopes requested. </summary>
        public IReadOnlyList<EncryptionScopeData> Value { get; }
        /// <summary> Request URL that can be used to query next page of encryption scopes. Returned when total number of requested encryption scopes exceeds the maximum page size. </summary>
        public string NextLink { get; }
    }
}
