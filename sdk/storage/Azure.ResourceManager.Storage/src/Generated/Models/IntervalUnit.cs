// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Storage.Models
{
    /// <summary> Run interval unit of task execution. This is a required field when ExecutionTrigger.properties.type is 'OnSchedule'; this property should not be present when ExecutionTrigger.properties.type is 'RunOnce'. </summary>
    public readonly partial struct IntervalUnit : IEquatable<IntervalUnit>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="IntervalUnit"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public IntervalUnit(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DaysValue = "Days";

        /// <summary> Days. </summary>
        public static IntervalUnit Days { get; } = new IntervalUnit(DaysValue);
        /// <summary> Determines if two <see cref="IntervalUnit"/> values are the same. </summary>
        public static bool operator ==(IntervalUnit left, IntervalUnit right) => left.Equals(right);
        /// <summary> Determines if two <see cref="IntervalUnit"/> values are not the same. </summary>
        public static bool operator !=(IntervalUnit left, IntervalUnit right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="IntervalUnit"/>. </summary>
        public static implicit operator IntervalUnit(string value) => new IntervalUnit(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is IntervalUnit other && Equals(other);
        /// <inheritdoc />
        public bool Equals(IntervalUnit other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
