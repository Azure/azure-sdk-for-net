// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.Storage
{
#pragma warning disable SA1649 // File name should match first type name
    internal class StorageArmInterimOperation<T> : StorageArmOperation<T>
#pragma warning restore SA1649 // File name should match first type name
    {
        private readonly IOperationSource<T> _operationSource;

        private readonly Response _interimResponse;

        private readonly AsyncLockWithValue<T> _stateLock;

        internal StorageArmInterimOperation(IOperationSource<T> source, ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Request request, Response response, OperationFinalStateVia finalStateVia) : base(source, clientDiagnostics, pipeline, request, response, finalStateVia)
        {
            _operationSource = source;
            _interimResponse = response;
            _stateLock = new AsyncLockWithValue<T>();
        }

        /// <inheritdoc />
        public override async ValueTask<T> GetCurrentStatusAsync(CancellationToken cancellationToken = default) => await GetCurrentState(true, cancellationToken).ConfigureAwait(false);
        /// <inheritdoc />
        public override T GetCurrentStatus(CancellationToken cancellationToken = default) => GetCurrentState(false, cancellationToken).EnsureCompleted();

        private async ValueTask<T> GetCurrentState(bool async, CancellationToken cancellationToken)
        {
            using var asyncLock = await _stateLock.GetLockOrValueAsync(async, cancellationToken).ConfigureAwait(false);
            if (asyncLock.HasValue)
            {
                return asyncLock.Value;
            }
            var val = async ? await _operationSource.CreateResultAsync(_interimResponse, cancellationToken).ConfigureAwait(false)
                    : _operationSource.CreateResult(_interimResponse, cancellationToken);
            asyncLock.SetValue(val);
            return val;
        }
    }
}
