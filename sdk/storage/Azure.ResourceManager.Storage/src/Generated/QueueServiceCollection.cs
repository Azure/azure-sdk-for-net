// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Storage.Models;

namespace Azure.ResourceManager.Storage
{
    /// <summary> A class representing collection of QueueService and their operations over its parent. </summary>
    public partial class QueueServiceCollection : ArmCollection, IEnumerable<QueueService>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly QueueServicesRestOperations _queueServicesRestClient;

        /// <summary> Initializes a new instance of the <see cref="QueueServiceCollection"/> class for mocking. </summary>
        protected QueueServiceCollection()
        {
        }

        /// <summary> Initializes a new instance of QueueServiceCollection class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal QueueServiceCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _queueServicesRestClient = new QueueServicesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, Id.SubscriptionId, BaseUri);
        }

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => StorageAccount.ResourceType;

        // Collection level operations.

        /// <summary> Sets the properties of a storage account’s Queue service, including properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules. </summary>
        /// <param name="queueServiceName"> The name of the Queue Service within the specified storage account. Queue Service Name must be &apos;default&apos;. </param>
        /// <param name="parameters"> The properties of a storage account’s Queue service, only properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules can be specified. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="queueServiceName"/> or <paramref name="parameters"/> is null. </exception>
        public virtual QueueServiceSetServicePropertiesOperation CreateOrUpdate(string queueServiceName, QueueServiceData parameters, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (queueServiceName == null)
            {
                throw new ArgumentNullException(nameof(queueServiceName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("QueueServiceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _queueServicesRestClient.SetServiceProperties(Id.ResourceGroupName, Id.Name, queueServiceName, parameters, cancellationToken);
                var operation = new QueueServiceSetServicePropertiesOperation(Parent, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Sets the properties of a storage account’s Queue service, including properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules. </summary>
        /// <param name="queueServiceName"> The name of the Queue Service within the specified storage account. Queue Service Name must be &apos;default&apos;. </param>
        /// <param name="parameters"> The properties of a storage account’s Queue service, only properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules can be specified. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="queueServiceName"/> or <paramref name="parameters"/> is null. </exception>
        public async virtual Task<QueueServiceSetServicePropertiesOperation> CreateOrUpdateAsync(string queueServiceName, QueueServiceData parameters, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (queueServiceName == null)
            {
                throw new ArgumentNullException(nameof(queueServiceName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("QueueServiceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _queueServicesRestClient.SetServicePropertiesAsync(Id.ResourceGroupName, Id.Name, queueServiceName, parameters, cancellationToken).ConfigureAwait(false);
                var operation = new QueueServiceSetServicePropertiesOperation(Parent, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the properties of a storage account’s Queue service, including properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules. </summary>
        /// <param name="queueServiceName"> The name of the Queue Service within the specified storage account. Queue Service Name must be &apos;default&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="queueServiceName"/> is null. </exception>
        public virtual Response<QueueService> Get(string queueServiceName, CancellationToken cancellationToken = default)
        {
            if (queueServiceName == null)
            {
                throw new ArgumentNullException(nameof(queueServiceName));
            }

            using var scope = _clientDiagnostics.CreateScope("QueueServiceCollection.Get");
            scope.Start();
            try
            {
                var response = _queueServicesRestClient.GetServiceProperties(Id.ResourceGroupName, Id.Name, queueServiceName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new QueueService(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the properties of a storage account’s Queue service, including properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules. </summary>
        /// <param name="queueServiceName"> The name of the Queue Service within the specified storage account. Queue Service Name must be &apos;default&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="queueServiceName"/> is null. </exception>
        public async virtual Task<Response<QueueService>> GetAsync(string queueServiceName, CancellationToken cancellationToken = default)
        {
            if (queueServiceName == null)
            {
                throw new ArgumentNullException(nameof(queueServiceName));
            }

            using var scope = _clientDiagnostics.CreateScope("QueueServiceCollection.Get");
            scope.Start();
            try
            {
                var response = await _queueServicesRestClient.GetServicePropertiesAsync(Id.ResourceGroupName, Id.Name, queueServiceName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new QueueService(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="queueServiceName"> The name of the Queue Service within the specified storage account. Queue Service Name must be &apos;default&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="queueServiceName"/> is null. </exception>
        public virtual Response<QueueService> GetIfExists(string queueServiceName, CancellationToken cancellationToken = default)
        {
            if (queueServiceName == null)
            {
                throw new ArgumentNullException(nameof(queueServiceName));
            }

            using var scope = _clientDiagnostics.CreateScope("QueueServiceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _queueServicesRestClient.GetServiceProperties(Id.ResourceGroupName, Id.Name, queueServiceName, cancellationToken: cancellationToken);
                return response.Value == null
                    ? Response.FromValue<QueueService>(null, response.GetRawResponse())
                    : Response.FromValue(new QueueService(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="queueServiceName"> The name of the Queue Service within the specified storage account. Queue Service Name must be &apos;default&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="queueServiceName"/> is null. </exception>
        public async virtual Task<Response<QueueService>> GetIfExistsAsync(string queueServiceName, CancellationToken cancellationToken = default)
        {
            if (queueServiceName == null)
            {
                throw new ArgumentNullException(nameof(queueServiceName));
            }

            using var scope = _clientDiagnostics.CreateScope("QueueServiceCollection.GetIfExistsAsync");
            scope.Start();
            try
            {
                var response = await _queueServicesRestClient.GetServicePropertiesAsync(Id.ResourceGroupName, Id.Name, queueServiceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return response.Value == null
                    ? Response.FromValue<QueueService>(null, response.GetRawResponse())
                    : Response.FromValue(new QueueService(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="queueServiceName"> The name of the Queue Service within the specified storage account. Queue Service Name must be &apos;default&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="queueServiceName"/> is null. </exception>
        public virtual Response<bool> CheckIfExists(string queueServiceName, CancellationToken cancellationToken = default)
        {
            if (queueServiceName == null)
            {
                throw new ArgumentNullException(nameof(queueServiceName));
            }

            using var scope = _clientDiagnostics.CreateScope("QueueServiceCollection.CheckIfExists");
            scope.Start();
            try
            {
                var response = GetIfExists(queueServiceName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="queueServiceName"> The name of the Queue Service within the specified storage account. Queue Service Name must be &apos;default&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="queueServiceName"/> is null. </exception>
        public async virtual Task<Response<bool>> CheckIfExistsAsync(string queueServiceName, CancellationToken cancellationToken = default)
        {
            if (queueServiceName == null)
            {
                throw new ArgumentNullException(nameof(queueServiceName));
            }

            using var scope = _clientDiagnostics.CreateScope("QueueServiceCollection.CheckIfExistsAsync");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(queueServiceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List all queue services for the storage account. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<QueueService>> GetAll(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("QueueServiceCollection.GetAll");
            scope.Start();
            try
            {
                var response = _queueServicesRestClient.List(Id.ResourceGroupName, Id.Name, cancellationToken);
                return Response.FromValue(response.Value.Value.Select(value => new QueueService(Parent, value)).ToArray() as IReadOnlyList<QueueService>, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List all queue services for the storage account. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<IReadOnlyList<QueueService>>> GetAllAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("QueueServiceCollection.GetAll");
            scope.Start();
            try
            {
                var response = await _queueServicesRestClient.ListAsync(Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value.Value.Select(value => new QueueService(Parent, value)).ToArray() as IReadOnlyList<QueueService>, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<QueueService> IEnumerable<QueueService>.GetEnumerator()
        {
            return GetAll().Value.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().Value.GetEnumerator();
        }

        // Builders.
        // public ArmBuilder<Azure.ResourceManager.ResourceIdentifier, QueueService, QueueServiceData> Construct() { }
    }
}
