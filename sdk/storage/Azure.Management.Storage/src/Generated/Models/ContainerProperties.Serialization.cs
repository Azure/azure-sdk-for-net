// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Management.Storage.Models
{
    public partial class ContainerProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (PublicAccess != null)
            {
                writer.WritePropertyName("publicAccess");
                writer.WriteStringValue(PublicAccess.Value.ToSerialString());
            }
            if (LastModifiedTime != null)
            {
                writer.WritePropertyName("lastModifiedTime");
                writer.WriteStringValue(LastModifiedTime.Value, "S");
            }
            if (LeaseStatus != null)
            {
                writer.WritePropertyName("leaseStatus");
                writer.WriteStringValue(LeaseStatus.Value.ToString());
            }
            if (LeaseState != null)
            {
                writer.WritePropertyName("leaseState");
                writer.WriteStringValue(LeaseState.Value.ToString());
            }
            if (LeaseDuration != null)
            {
                writer.WritePropertyName("leaseDuration");
                writer.WriteStringValue(LeaseDuration.Value.ToString());
            }
            if (Metadata != null)
            {
                writer.WritePropertyName("metadata");
                writer.WriteStartObject();
                foreach (var item in Metadata)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (ImmutabilityPolicy != null)
            {
                writer.WritePropertyName("immutabilityPolicy");
                writer.WriteObjectValue(ImmutabilityPolicy);
            }
            if (LegalHold != null)
            {
                writer.WritePropertyName("legalHold");
                writer.WriteObjectValue(LegalHold);
            }
            if (HasLegalHold != null)
            {
                writer.WritePropertyName("hasLegalHold");
                writer.WriteBooleanValue(HasLegalHold.Value);
            }
            if (HasImmutabilityPolicy != null)
            {
                writer.WritePropertyName("hasImmutabilityPolicy");
                writer.WriteBooleanValue(HasImmutabilityPolicy.Value);
            }
            writer.WriteEndObject();
        }
        internal static ContainerProperties DeserializeContainerProperties(JsonElement element)
        {
            ContainerProperties result = new ContainerProperties();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("publicAccess"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.PublicAccess = property.Value.GetString().ToPublicAccess();
                    continue;
                }
                if (property.NameEquals("lastModifiedTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.LastModifiedTime = property.Value.GetDateTimeOffset("S");
                    continue;
                }
                if (property.NameEquals("leaseStatus"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.LeaseStatus = new LeaseStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("leaseState"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.LeaseState = new LeaseState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("leaseDuration"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.LeaseDuration = new LeaseDuration(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("metadata"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.Metadata = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        result.Metadata.Add(property0.Name, property0.Value.GetString());
                    }
                    continue;
                }
                if (property.NameEquals("immutabilityPolicy"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.ImmutabilityPolicy = ImmutabilityPolicyProperties.DeserializeImmutabilityPolicyProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("legalHold"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.LegalHold = LegalHoldProperties.DeserializeLegalHoldProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("hasLegalHold"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.HasLegalHold = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("hasImmutabilityPolicy"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.HasImmutabilityPolicy = property.Value.GetBoolean();
                    continue;
                }
            }
            return result;
        }
    }
}
