// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Management.Storage.Models
{
    public partial class MetricSpecification : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Name != null)
            {
                writer.WritePropertyName("name");
                writer.WriteStringValue(Name);
            }
            if (DisplayName != null)
            {
                writer.WritePropertyName("displayName");
                writer.WriteStringValue(DisplayName);
            }
            if (DisplayDescription != null)
            {
                writer.WritePropertyName("displayDescription");
                writer.WriteStringValue(DisplayDescription);
            }
            if (Unit != null)
            {
                writer.WritePropertyName("unit");
                writer.WriteStringValue(Unit);
            }
            if (Dimensions != null)
            {
                writer.WritePropertyName("dimensions");
                writer.WriteStartArray();
                foreach (var item in Dimensions)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (AggregationType != null)
            {
                writer.WritePropertyName("aggregationType");
                writer.WriteStringValue(AggregationType);
            }
            if (FillGapWithZero != null)
            {
                writer.WritePropertyName("fillGapWithZero");
                writer.WriteBooleanValue(FillGapWithZero.Value);
            }
            if (Category != null)
            {
                writer.WritePropertyName("category");
                writer.WriteStringValue(Category);
            }
            if (ResourceIdDimensionNameOverride != null)
            {
                writer.WritePropertyName("resourceIdDimensionNameOverride");
                writer.WriteStringValue(ResourceIdDimensionNameOverride);
            }
            writer.WriteEndObject();
        }
        internal static MetricSpecification DeserializeMetricSpecification(JsonElement element)
        {
            MetricSpecification result = new MetricSpecification();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.Name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("displayName"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.DisplayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("displayDescription"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.DisplayDescription = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("unit"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.Unit = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dimensions"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.Dimensions = new List<Dimension>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        result.Dimensions.Add(Dimension.DeserializeDimension(item));
                    }
                    continue;
                }
                if (property.NameEquals("aggregationType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.AggregationType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fillGapWithZero"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.FillGapWithZero = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("category"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.Category = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resourceIdDimensionNameOverride"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.ResourceIdDimensionNameOverride = property.Value.GetString();
                    continue;
                }
            }
            return result;
        }
    }
}
