// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.Management.Storage.Models
{
    public partial class AccountSasParameters : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("signedServices");
            writer.WriteStringValue(Services.ToString());
            writer.WritePropertyName("signedResourceTypes");
            writer.WriteStringValue(ResourceTypes.ToString());
            writer.WritePropertyName("signedPermission");
            writer.WriteStringValue(Permissions.ToString());
            if (IPAddressOrRange != null)
            {
                writer.WritePropertyName("signedIp");
                writer.WriteStringValue(IPAddressOrRange);
            }
            if (Protocols != null)
            {
                writer.WritePropertyName("signedProtocol");
                writer.WriteStringValue(Protocols.Value.ToSerialString());
            }
            if (SharedAccessStartTime != null)
            {
                writer.WritePropertyName("signedStart");
                writer.WriteStringValue(SharedAccessStartTime.Value, "S");
            }
            writer.WritePropertyName("signedExpiry");
            writer.WriteStringValue(SharedAccessExpiryTime, "S");
            if (KeyToSign != null)
            {
                writer.WritePropertyName("keyToSign");
                writer.WriteStringValue(KeyToSign);
            }
            writer.WriteEndObject();
        }
        internal static AccountSasParameters DeserializeAccountSasParameters(JsonElement element)
        {
            AccountSasParameters result = new AccountSasParameters();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("signedServices"))
                {
                    result.Services = new Services(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("signedResourceTypes"))
                {
                    result.ResourceTypes = new SignedResourceTypes(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("signedPermission"))
                {
                    result.Permissions = new Permissions(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("signedIp"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.IPAddressOrRange = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("signedProtocol"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.Protocols = property.Value.GetString().ToHttpProtocol();
                    continue;
                }
                if (property.NameEquals("signedStart"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.SharedAccessStartTime = property.Value.GetDateTimeOffset("S");
                    continue;
                }
                if (property.NameEquals("signedExpiry"))
                {
                    result.SharedAccessExpiryTime = property.Value.GetDateTimeOffset("S");
                    continue;
                }
                if (property.NameEquals("keyToSign"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.KeyToSign = property.Value.GetString();
                    continue;
                }
            }
            return result;
        }
    }
}
