// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace Azure.Storage.Files.DataLake.Models
{
    internal partial class BlobHierarchyListSegment : IXmlSerializable, IPersistableModel<BlobHierarchyListSegment>
    {
        private void _Write(XmlWriter writer, string nameHint, ModelReaderWriterOptions options)
        {
            writer.WriteStartElement(nameHint ?? "Blobs");
            if (Optional.IsCollectionDefined(BlobPrefixes))
            {
                foreach (var item in BlobPrefixes)
                {
                    writer.WriteObjectValue(item, "BlobPrefix");
                }
            }
            foreach (var item in BlobItems)
            {
                writer.WriteObjectValue(item, "Blob");
            }
            writer.WriteEndElement();
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint) => _Write(writer, nameHint, new ModelReaderWriterOptions("W"));

        internal static BlobHierarchyListSegment DeserializeBlobHierarchyListSegment(XElement element, ModelReaderWriterOptions options = null)
        {
            IReadOnlyList<BlobPrefix> blobPrefixes = default;
            IReadOnlyList<BlobItemInternal> blobItems = default;
            var array = new List<BlobPrefix>();
            foreach (var e in element.Elements("BlobPrefix"))
            {
                array.Add(BlobPrefix.DeserializeBlobPrefix(e));
            }
            blobPrefixes = array;
            var array0 = new List<BlobItemInternal>();
            foreach (var e in element.Elements("Blob"))
            {
                array0.Add(BlobItemInternal.DeserializeBlobItemInternal(e));
            }
            blobItems = array0;
            return new BlobHierarchyListSegment(blobPrefixes, blobItems, serializedAdditionalRawData: null);
        }

        BinaryData IPersistableModel<BlobHierarchyListSegment>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BlobHierarchyListSegment>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "X":
                    {
                        using MemoryStream stream = new MemoryStream();
                        using XmlWriter writer = XmlWriter.Create(stream);
                        _Write(writer, null, options);
                        writer.Flush();
                        if (stream.Position > int.MaxValue)
                        {
                            return BinaryData.FromStream(stream);
                        }
                        else
                        {
                            return new BinaryData(stream.GetBuffer().AsMemory(0, (int)stream.Position));
                        }
                    }
                default:
                    throw new InvalidOperationException($"The model {nameof(BlobHierarchyListSegment)} does not support '{options.Format}' format.");
            }
        }

        BlobHierarchyListSegment IPersistableModel<BlobHierarchyListSegment>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BlobHierarchyListSegment>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "X":
                    return DeserializeBlobHierarchyListSegment(XElement.Load(data.ToStream()), options);
                default:
                    throw new InvalidOperationException($"The model {nameof(BlobHierarchyListSegment)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<BlobHierarchyListSegment>.GetFormatFromOptions(ModelReaderWriterOptions options) => "X";
    }
}
