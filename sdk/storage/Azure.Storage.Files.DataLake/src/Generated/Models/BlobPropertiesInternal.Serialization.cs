// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.Storage.Files.DataLake.Models
{
    internal partial class BlobPropertiesInternal
    {
        internal static BlobPropertiesInternal DeserializeBlobPropertiesInternal(JsonElement element)
        {
            Optional<DateTimeOffset> creationTime = default;
            DateTimeOffset lastModified = default;
            string etag = default;
            Optional<long> contentLength = default;
            Optional<string> contentType = default;
            Optional<string> contentEncoding = default;
            Optional<string> contentLanguage = default;
            Optional<byte[]> contentMD5 = default;
            Optional<string> contentDisposition = default;
            Optional<string> cacheControl = default;
            Optional<long> xMsBlobSequenceNumber = default;
            Optional<string> copyId = default;
            Optional<string> copySource = default;
            Optional<string> copyProgress = default;
            Optional<DateTimeOffset> copyCompletionTime = default;
            Optional<string> copyStatusDescription = default;
            Optional<bool> serverEncrypted = default;
            Optional<bool> incrementalCopy = default;
            Optional<string> destinationSnapshot = default;
            Optional<DateTimeOffset> deletedTime = default;
            Optional<int> remainingRetentionDays = default;
            Optional<bool> accessTierInferred = default;
            Optional<string> customerProvidedKeySha256 = default;
            Optional<string> encryptionScope = default;
            Optional<DateTimeOffset> accessTierChangeTime = default;
            Optional<int> tagCount = default;
            Optional<DateTimeOffset> expiryTime = default;
            Optional<bool> @sealed = default;
            Optional<DateTimeOffset> lastAccessTime = default;
            Optional<DateTimeOffset> deleteTime = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("Creation-Time"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    creationTime = property.Value.GetDateTimeOffset("R");
                    continue;
                }
                if (property.NameEquals("Last-Modified"))
                {
                    lastModified = property.Value.GetDateTimeOffset("R");
                    continue;
                }
                if (property.NameEquals("Etag"))
                {
                    etag = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("Content-Length"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    contentLength = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("Content-Type"))
                {
                    contentType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("Content-Encoding"))
                {
                    contentEncoding = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("Content-Language"))
                {
                    contentLanguage = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("Content-MD5"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    contentMD5 = property.Value.GetBytesFromBase64("D");
                    continue;
                }
                if (property.NameEquals("Content-Disposition"))
                {
                    contentDisposition = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("Cache-Control"))
                {
                    cacheControl = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("x-ms-blob-sequence-number"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    xMsBlobSequenceNumber = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("CopyId"))
                {
                    copyId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("CopySource"))
                {
                    copySource = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("CopyProgress"))
                {
                    copyProgress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("CopyCompletionTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    copyCompletionTime = property.Value.GetDateTimeOffset("R");
                    continue;
                }
                if (property.NameEquals("CopyStatusDescription"))
                {
                    copyStatusDescription = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ServerEncrypted"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    serverEncrypted = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("IncrementalCopy"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    incrementalCopy = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("DestinationSnapshot"))
                {
                    destinationSnapshot = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("DeletedTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    deletedTime = property.Value.GetDateTimeOffset("R");
                    continue;
                }
                if (property.NameEquals("RemainingRetentionDays"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    remainingRetentionDays = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("AccessTierInferred"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    accessTierInferred = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("CustomerProvidedKeySha256"))
                {
                    customerProvidedKeySha256 = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("EncryptionScope"))
                {
                    encryptionScope = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("AccessTierChangeTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    accessTierChangeTime = property.Value.GetDateTimeOffset("R");
                    continue;
                }
                if (property.NameEquals("TagCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    tagCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("Expiry-Time"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    expiryTime = property.Value.GetDateTimeOffset("R");
                    continue;
                }
                if (property.NameEquals("Sealed"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @sealed = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("LastAccessTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lastAccessTime = property.Value.GetDateTimeOffset("R");
                    continue;
                }
                if (property.NameEquals("DeleteTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    deleteTime = property.Value.GetDateTimeOffset("R");
                    continue;
                }
            }
            return new BlobPropertiesInternal(Optional.ToNullable(creationTime), lastModified, etag, Optional.ToNullable(contentLength), contentType.Value, contentEncoding.Value, contentLanguage.Value, contentMD5.Value, contentDisposition.Value, cacheControl.Value, Optional.ToNullable(xMsBlobSequenceNumber), copyId.Value, copySource.Value, copyProgress.Value, Optional.ToNullable(copyCompletionTime), copyStatusDescription.Value, Optional.ToNullable(serverEncrypted), Optional.ToNullable(incrementalCopy), destinationSnapshot.Value, Optional.ToNullable(deletedTime), Optional.ToNullable(remainingRetentionDays), Optional.ToNullable(accessTierInferred), customerProvidedKeySha256.Value, encryptionScope.Value, Optional.ToNullable(accessTierChangeTime), Optional.ToNullable(tagCount), Optional.ToNullable(expiryTime), Optional.ToNullable(@sealed), Optional.ToNullable(lastAccessTime), Optional.ToNullable(deleteTime));
        }
    }
}
