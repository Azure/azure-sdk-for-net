// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace Azure.Storage.Files.DataLake.Models
{
    internal partial class BlobItemInternal : IXmlSerializable, IModel<BlobItemInternal>
    {
        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "Blob");
            writer.WriteStartElement("Name");
            writer.WriteValue(Name);
            writer.WriteEndElement();
            writer.WriteStartElement("Deleted");
            writer.WriteValue(Deleted);
            writer.WriteEndElement();
            writer.WriteStartElement("Snapshot");
            writer.WriteValue(Snapshot);
            writer.WriteEndElement();
            if (Optional.IsDefined(VersionId))
            {
                writer.WriteStartElement("VersionId");
                writer.WriteValue(VersionId);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(IsCurrentVersion))
            {
                writer.WriteStartElement("IsCurrentVersion");
                writer.WriteValue(IsCurrentVersion.Value);
                writer.WriteEndElement();
            }
            writer.WriteObjectValue(Properties, "Properties");
            if (Optional.IsDefined(DeletionId))
            {
                writer.WriteStartElement("DeletionId");
                writer.WriteValue(DeletionId);
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
        }

        internal static BlobItemInternal DeserializeBlobItemInternal(XElement element, ModelReaderWriterOptions options = null)
        {
            string name = default;
            bool deleted = default;
            string snapshot = default;
            string versionId = default;
            bool? isCurrentVersion = default;
            BlobPropertiesInternal properties = default;
            string deletionId = default;
            if (element.Element("Name") is XElement nameElement)
            {
                name = (string)nameElement;
            }
            if (element.Element("Deleted") is XElement deletedElement)
            {
                deleted = (bool)deletedElement;
            }
            if (element.Element("Snapshot") is XElement snapshotElement)
            {
                snapshot = (string)snapshotElement;
            }
            if (element.Element("VersionId") is XElement versionIdElement)
            {
                versionId = (string)versionIdElement;
            }
            if (element.Element("IsCurrentVersion") is XElement isCurrentVersionElement)
            {
                isCurrentVersion = (bool?)isCurrentVersionElement;
            }
            if (element.Element("Properties") is XElement propertiesElement)
            {
                properties = BlobPropertiesInternal.DeserializeBlobPropertiesInternal(propertiesElement);
            }
            if (element.Element("DeletionId") is XElement deletionIdElement)
            {
                deletionId = (string)deletionIdElement;
            }
            return new BlobItemInternal(name, deleted, snapshot, versionId, isCurrentVersion, properties, deletionId, default);
        }

        BinaryData IModel<BlobItemInternal>.Write(ModelReaderWriterOptions options)
        {
            bool implementsJson = this is IJsonModel<BlobItemInternal>;
            bool isValid = options.Format == ModelReaderWriterFormat.Json && implementsJson || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {GetType().Name} does not support '{options.Format}' format.");
            }

            using MemoryStream stream = new MemoryStream();
            using XmlWriter writer = XmlWriter.Create(stream);
            ((IXmlSerializable)this).Write(writer, null);
            writer.Flush();
            if (stream.Position > int.MaxValue)
            {
                return BinaryData.FromStream(stream);
            }
            else
            {
                return new BinaryData(stream.GetBuffer().AsMemory(0, (int)stream.Position));
            }
        }

        BlobItemInternal IModel<BlobItemInternal>.Read(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == ModelReaderWriterFormat.Json || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(BlobItemInternal)} does not support '{options.Format}' format.");
            }

            return DeserializeBlobItemInternal(XElement.Load(data.ToStream()), options);
        }

        ModelReaderWriterFormat IModel<BlobItemInternal>.GetWireFormat(ModelReaderWriterOptions options) => ModelReaderWriterFormat.Xml;
    }
}
