// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.Storage.Blobs.Batch.Models
{
    /// <summary> Properties of a blob. </summary>
    internal partial class BlobPropertiesInternal
    {
        /// <summary> Initializes a new instance of BlobPropertiesInternal. </summary>
        /// <param name="lastModified"> . </param>
        /// <param name="etag"> . </param>
        /// <exception cref="ArgumentNullException"> <paramref name="etag"/> is null. </exception>
        internal BlobPropertiesInternal(DateTimeOffset lastModified, string etag)
        {
            if (etag == null)
            {
                throw new ArgumentNullException(nameof(etag));
            }

            LastModified = lastModified;
            Etag = etag;
        }

        public DateTimeOffset? CreationTime { get; }
        public DateTimeOffset LastModified { get; }
        public string Etag { get; }
        /// <summary> Size in bytes. </summary>
        public long? ContentLength { get; }
        public string ContentType { get; }
        public string ContentEncoding { get; }
        public string ContentLanguage { get; }
        public byte[] ContentMD5 { get; }
        public string ContentDisposition { get; }
        public string CacheControl { get; }
        public long? BlobSequenceNumber { get; }
        public BlobType? BlobType { get; }
        public LeaseStatusType? LeaseStatus { get; }
        public LeaseStateType? LeaseState { get; }
        public LeaseDurationType? LeaseDuration { get; }
        public string CopyId { get; }
        public CopyStatusType? CopyStatus { get; }
        public string CopySource { get; }
        public string CopyProgress { get; }
        public DateTimeOffset? CopyCompletionTime { get; }
        public string CopyStatusDescription { get; }
        public bool? ServerEncrypted { get; }
        public bool? IncrementalCopy { get; }
        public string DestinationSnapshot { get; }
        public DateTimeOffset? DeletedTime { get; }
        public int? RemainingRetentionDays { get; }
        public AccessTier? AccessTier { get; }
        public bool? AccessTierInferred { get; }
        public ArchiveStatus? ArchiveStatus { get; }
        public string CustomerProvidedKeySha256 { get; }
        /// <summary> The name of the encryption scope under which the blob is encrypted. </summary>
        public string EncryptionScope { get; }
        public DateTimeOffset? AccessTierChangeTime { get; }
        public int? TagCount { get; }
        public DateTimeOffset? ExpiresOn { get; }
        public bool? IsSealed { get; }
        /// <summary> If an object is in rehydrate pending state then this header is returned with priority of rehydrate. Valid values are High and Standard. </summary>
        public RehydratePriority? RehydratePriority { get; }
        public DateTimeOffset? LastAccessedOn { get; }
    }
}
