// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.NetworkCloud.Models
{
    /// <summary> The indicator of which relay type the machine should be assigned to use. Platform indicates the use of a platform-dedicated relay. Public indicates the use of the standard public relay for Arc services. </summary>
    public readonly partial struct RelayType : IEquatable<RelayType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RelayType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RelayType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PlatformValue = "Platform";
        private const string PublicValue = "Public";

        /// <summary> Platform. </summary>
        public static RelayType Platform { get; } = new RelayType(PlatformValue);
        /// <summary> Public. </summary>
        public static RelayType Public { get; } = new RelayType(PublicValue);
        /// <summary> Determines if two <see cref="RelayType"/> values are the same. </summary>
        public static bool operator ==(RelayType left, RelayType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RelayType"/> values are not the same. </summary>
        public static bool operator !=(RelayType left, RelayType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="RelayType"/>. </summary>
        public static implicit operator RelayType(string value) => new RelayType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RelayType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RelayType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
