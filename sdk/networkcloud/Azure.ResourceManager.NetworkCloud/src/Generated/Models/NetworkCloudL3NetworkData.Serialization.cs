// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.NetworkCloud.Models;

namespace Azure.ResourceManager.NetworkCloud
{
    public partial class NetworkCloudL3NetworkData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("extendedLocation"u8);
            writer.WriteObjectValue(ExtendedLocation);
            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("location"u8);
            writer.WriteStringValue(Location);
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(HybridAksIpamEnabled))
            {
                writer.WritePropertyName("hybridAksIpamEnabled"u8);
                writer.WriteStringValue(HybridAksIpamEnabled.Value.ToString());
            }
            if (Optional.IsDefined(HybridAksPluginType))
            {
                writer.WritePropertyName("hybridAksPluginType"u8);
                writer.WriteStringValue(HybridAksPluginType.Value.ToString());
            }
            if (Optional.IsDefined(InterfaceName))
            {
                writer.WritePropertyName("interfaceName"u8);
                writer.WriteStringValue(InterfaceName);
            }
            if (Optional.IsDefined(IPAllocationType))
            {
                writer.WritePropertyName("ipAllocationType"u8);
                writer.WriteStringValue(IPAllocationType.Value.ToString());
            }
            if (Optional.IsDefined(IPv4ConnectedPrefix))
            {
                writer.WritePropertyName("ipv4ConnectedPrefix"u8);
                writer.WriteStringValue(IPv4ConnectedPrefix);
            }
            if (Optional.IsDefined(IPv6ConnectedPrefix))
            {
                writer.WritePropertyName("ipv6ConnectedPrefix"u8);
                writer.WriteStringValue(IPv6ConnectedPrefix);
            }
            writer.WritePropertyName("l3IsolationDomainId"u8);
            writer.WriteStringValue(L3IsolationDomainId);
            writer.WritePropertyName("vlan"u8);
            writer.WriteNumberValue(Vlan);
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static NetworkCloudL3NetworkData DeserializeNetworkCloudL3NetworkData(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ExtendedLocation extendedLocation = default;
            Optional<IDictionary<string, string>> tags = default;
            AzureLocation location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<IReadOnlyList<ResourceIdentifier>> associatedResourceIds = default;
            Optional<ResourceIdentifier> clusterId = default;
            Optional<L3NetworkDetailedStatus> detailedStatus = default;
            Optional<string> detailedStatusMessage = default;
            Optional<IReadOnlyList<ResourceIdentifier>> hybridAksClustersAssociatedIds = default;
            Optional<HybridAksIpamEnabled> hybridAksIpamEnabled = default;
            Optional<HybridAksPluginType> hybridAksPluginType = default;
            Optional<string> interfaceName = default;
            Optional<IPAllocationType> ipAllocationType = default;
            Optional<string> ipv4ConnectedPrefix = default;
            Optional<string> ipv6ConnectedPrefix = default;
            ResourceIdentifier l3IsolationDomainId = default;
            Optional<L3NetworkProvisioningState> provisioningState = default;
            Optional<IReadOnlyList<ResourceIdentifier>> virtualMachinesAssociatedIds = default;
            long vlan = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("extendedLocation"u8))
                {
                    extendedLocation = ExtendedLocation.DeserializeExtendedLocation(property.Value);
                    continue;
                }
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"u8))
                {
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("associatedResourceIds"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<ResourceIdentifier> array = new List<ResourceIdentifier>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                if (item.ValueKind == JsonValueKind.Null)
                                {
                                    array.Add(null);
                                }
                                else
                                {
                                    array.Add(new ResourceIdentifier(item.GetString()));
                                }
                            }
                            associatedResourceIds = array;
                            continue;
                        }
                        if (property0.NameEquals("clusterId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            clusterId = new ResourceIdentifier(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("detailedStatus"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            detailedStatus = new L3NetworkDetailedStatus(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("detailedStatusMessage"u8))
                        {
                            detailedStatusMessage = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("hybridAksClustersAssociatedIds"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<ResourceIdentifier> array = new List<ResourceIdentifier>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                if (item.ValueKind == JsonValueKind.Null)
                                {
                                    array.Add(null);
                                }
                                else
                                {
                                    array.Add(new ResourceIdentifier(item.GetString()));
                                }
                            }
                            hybridAksClustersAssociatedIds = array;
                            continue;
                        }
                        if (property0.NameEquals("hybridAksIpamEnabled"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            hybridAksIpamEnabled = new HybridAksIpamEnabled(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("hybridAksPluginType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            hybridAksPluginType = new HybridAksPluginType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("interfaceName"u8))
                        {
                            interfaceName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("ipAllocationType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            ipAllocationType = new IPAllocationType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("ipv4ConnectedPrefix"u8))
                        {
                            ipv4ConnectedPrefix = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("ipv6ConnectedPrefix"u8))
                        {
                            ipv6ConnectedPrefix = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("l3IsolationDomainId"u8))
                        {
                            l3IsolationDomainId = new ResourceIdentifier(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            provisioningState = new L3NetworkProvisioningState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("virtualMachinesAssociatedIds"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<ResourceIdentifier> array = new List<ResourceIdentifier>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                if (item.ValueKind == JsonValueKind.Null)
                                {
                                    array.Add(null);
                                }
                                else
                                {
                                    array.Add(new ResourceIdentifier(item.GetString()));
                                }
                            }
                            virtualMachinesAssociatedIds = array;
                            continue;
                        }
                        if (property0.NameEquals("vlan"u8))
                        {
                            vlan = property0.Value.GetInt64();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new NetworkCloudL3NetworkData(id, name, type, systemData.Value, Optional.ToDictionary(tags), location, extendedLocation, Optional.ToList(associatedResourceIds), clusterId.Value, Optional.ToNullable(detailedStatus), detailedStatusMessage.Value, Optional.ToList(hybridAksClustersAssociatedIds), Optional.ToNullable(hybridAksIpamEnabled), Optional.ToNullable(hybridAksPluginType), interfaceName.Value, Optional.ToNullable(ipAllocationType), ipv4ConnectedPrefix.Value, ipv6ConnectedPrefix.Value, l3IsolationDomainId, Optional.ToNullable(provisioningState), Optional.ToList(virtualMachinesAssociatedIds), vlan);
        }
    }
}
