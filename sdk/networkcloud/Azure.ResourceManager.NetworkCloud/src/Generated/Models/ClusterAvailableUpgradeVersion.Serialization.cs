// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.NetworkCloud.Models
{
    public partial class ClusterAvailableUpgradeVersion
    {
        internal static ClusterAvailableUpgradeVersion DeserializeClusterAvailableUpgradeVersion(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<ControlImpact> controlImpact = default;
            Core.Optional<string> expectedDuration = default;
            Core.Optional<string> impactDescription = default;
            Core.Optional<DateTimeOffset> supportExpiryDate = default;
            Core.Optional<string> targetClusterVersion = default;
            Core.Optional<WorkloadImpact> workloadImpact = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("controlImpact"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    controlImpact = new ControlImpact(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("expectedDuration"u8))
                {
                    expectedDuration = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("impactDescription"u8))
                {
                    impactDescription = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("supportExpiryDate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    supportExpiryDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("targetClusterVersion"u8))
                {
                    targetClusterVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("workloadImpact"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    workloadImpact = new WorkloadImpact(property.Value.GetString());
                    continue;
                }
            }
            return new ClusterAvailableUpgradeVersion(Core.Optional.ToNullable(controlImpact), expectedDuration.Value, impactDescription.Value, Core.Optional.ToNullable(supportExpiryDate), targetClusterVersion.Value, Core.Optional.ToNullable(workloadImpact));
        }
    }
}
