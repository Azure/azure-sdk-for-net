// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.NetworkCloud.Models
{
    public partial class KubernetesClusterNode : IUtf8JsonSerializable, IJsonModel<KubernetesClusterNode>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<KubernetesClusterNode>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<KubernetesClusterNode>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            if ((options.Format != "W" || ((IPersistableModel<KubernetesClusterNode>)this).GetFormatFromOptions(options) != "J") && options.Format != "J")
            {
                throw new InvalidOperationException($"Must use 'J' format when calling the {nameof(IJsonModel<KubernetesClusterNode>)} interface");
            }

            writer.WriteStartObject();
            if (options.Format == "J")
            {
                if (Optional.IsDefined(AgentPoolId))
                {
                    writer.WritePropertyName("agentPoolId"u8);
                    writer.WriteStringValue(AgentPoolId);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(AvailabilityZone))
                {
                    writer.WritePropertyName("availabilityZone"u8);
                    writer.WriteStringValue(AvailabilityZone);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(BareMetalMachineId))
                {
                    writer.WritePropertyName("bareMetalMachineId"u8);
                    writer.WriteStringValue(BareMetalMachineId);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(CpuCores))
                {
                    writer.WritePropertyName("cpuCores"u8);
                    writer.WriteNumberValue(CpuCores.Value);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(DetailedStatus))
                {
                    writer.WritePropertyName("detailedStatus"u8);
                    writer.WriteStringValue(DetailedStatus.Value.ToString());
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(DetailedStatusMessage))
                {
                    writer.WritePropertyName("detailedStatusMessage"u8);
                    writer.WriteStringValue(DetailedStatusMessage);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(DiskSizeGB))
                {
                    writer.WritePropertyName("diskSizeGB"u8);
                    writer.WriteNumberValue(DiskSizeGB.Value);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(Image))
                {
                    writer.WritePropertyName("image"u8);
                    writer.WriteStringValue(Image);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(KubernetesVersion))
                {
                    writer.WritePropertyName("kubernetesVersion"u8);
                    writer.WriteStringValue(KubernetesVersion);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsCollectionDefined(Labels))
                {
                    writer.WritePropertyName("labels"u8);
                    writer.WriteStartArray();
                    foreach (var item in Labels)
                    {
                        writer.WriteObjectValue(item);
                    }
                    writer.WriteEndArray();
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(MemorySizeGB))
                {
                    writer.WritePropertyName("memorySizeGB"u8);
                    writer.WriteNumberValue(MemorySizeGB.Value);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(Mode))
                {
                    writer.WritePropertyName("mode"u8);
                    writer.WriteStringValue(Mode.Value.ToString());
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(Name))
                {
                    writer.WritePropertyName("name"u8);
                    writer.WriteStringValue(Name);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsCollectionDefined(NetworkAttachments))
                {
                    writer.WritePropertyName("networkAttachments"u8);
                    writer.WriteStartArray();
                    foreach (var item in NetworkAttachments)
                    {
                        writer.WriteObjectValue(item);
                    }
                    writer.WriteEndArray();
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(PowerState))
                {
                    writer.WritePropertyName("powerState"u8);
                    writer.WriteStringValue(PowerState.Value.ToString());
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(Role))
                {
                    writer.WritePropertyName("role"u8);
                    writer.WriteStringValue(Role.Value.ToString());
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsCollectionDefined(Taints))
                {
                    writer.WritePropertyName("taints"u8);
                    writer.WriteStartArray();
                    foreach (var item in Taints)
                    {
                        writer.WriteObjectValue(item);
                    }
                    writer.WriteEndArray();
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(VmSkuName))
                {
                    writer.WritePropertyName("vmSkuName"u8);
                    writer.WriteStringValue(VmSkuName);
                }
            }
            if (_serializedAdditionalRawData != null && options.Format == "J")
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        KubernetesClusterNode IJsonModel<KubernetesClusterNode>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(KubernetesClusterNode)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeKubernetesClusterNode(document.RootElement, options);
        }

        internal static KubernetesClusterNode DeserializeKubernetesClusterNode(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> agentPoolId = default;
            Optional<string> availabilityZone = default;
            Optional<string> bareMetalMachineId = default;
            Optional<long> cpuCores = default;
            Optional<KubernetesClusterNodeDetailedStatus> detailedStatus = default;
            Optional<string> detailedStatusMessage = default;
            Optional<long> diskSizeGB = default;
            Optional<string> image = default;
            Optional<string> kubernetesVersion = default;
            Optional<IReadOnlyList<KubernetesLabel>> labels = default;
            Optional<long> memorySizeGB = default;
            Optional<NetworkCloudAgentPoolMode> mode = default;
            Optional<string> name = default;
            Optional<IReadOnlyList<NetworkAttachment>> networkAttachments = default;
            Optional<KubernetesNodePowerState> powerState = default;
            Optional<KubernetesNodeRole> role = default;
            Optional<IReadOnlyList<KubernetesLabel>> taints = default;
            Optional<string> vmSkuName = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("agentPoolId"u8))
                {
                    agentPoolId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("availabilityZone"u8))
                {
                    availabilityZone = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("bareMetalMachineId"u8))
                {
                    bareMetalMachineId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cpuCores"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cpuCores = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("detailedStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    detailedStatus = new KubernetesClusterNodeDetailedStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("detailedStatusMessage"u8))
                {
                    detailedStatusMessage = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("diskSizeGB"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    diskSizeGB = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("image"u8))
                {
                    image = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("kubernetesVersion"u8))
                {
                    kubernetesVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("labels"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<KubernetesLabel> array = new List<KubernetesLabel>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(KubernetesLabel.DeserializeKubernetesLabel(item));
                    }
                    labels = array;
                    continue;
                }
                if (property.NameEquals("memorySizeGB"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    memorySizeGB = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("mode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    mode = new NetworkCloudAgentPoolMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("networkAttachments"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<NetworkAttachment> array = new List<NetworkAttachment>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(NetworkAttachment.DeserializeNetworkAttachment(item));
                    }
                    networkAttachments = array;
                    continue;
                }
                if (property.NameEquals("powerState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    powerState = new KubernetesNodePowerState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("role"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    role = new KubernetesNodeRole(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("taints"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<KubernetesLabel> array = new List<KubernetesLabel>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(KubernetesLabel.DeserializeKubernetesLabel(item));
                    }
                    taints = array;
                    continue;
                }
                if (property.NameEquals("vmSkuName"u8))
                {
                    vmSkuName = property.Value.GetString();
                    continue;
                }
                if (options.Format == "J")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new KubernetesClusterNode(agentPoolId.Value, availabilityZone.Value, bareMetalMachineId.Value, Optional.ToNullable(cpuCores), Optional.ToNullable(detailedStatus), detailedStatusMessage.Value, Optional.ToNullable(diskSizeGB), image.Value, kubernetesVersion.Value, Optional.ToList(labels), Optional.ToNullable(memorySizeGB), Optional.ToNullable(mode), name.Value, Optional.ToList(networkAttachments), Optional.ToNullable(powerState), Optional.ToNullable(role), Optional.ToList(taints), vmSkuName.Value, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<KubernetesClusterNode>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(KubernetesClusterNode)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        KubernetesClusterNode IPersistableModel<KubernetesClusterNode>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(KubernetesClusterNode)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeKubernetesClusterNode(document.RootElement, options);
        }

        string IPersistableModel<KubernetesClusterNode>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
