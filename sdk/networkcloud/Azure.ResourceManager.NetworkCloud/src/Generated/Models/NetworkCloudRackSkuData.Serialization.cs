// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.NetworkCloud.Models;

namespace Azure.ResourceManager.NetworkCloud
{
    public partial class NetworkCloudRackSkuData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static NetworkCloudRackSkuData DeserializeNetworkCloudRackSkuData(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<IReadOnlyList<MachineSkuSlot>> computeMachines = default;
            Optional<IReadOnlyList<MachineSkuSlot>> controllerMachines = default;
            Optional<string> description = default;
            Optional<long> maxClusterSlots = default;
            Optional<RackSkuProvisioningState> provisioningState = default;
            Optional<RackSkuType> rackType = default;
            Optional<IReadOnlyList<StorageApplianceSkuSlot>> storageAppliances = default;
            Optional<IReadOnlyList<string>> supportedRackSkuIds = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("computeMachines"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<MachineSkuSlot> array = new List<MachineSkuSlot>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(MachineSkuSlot.DeserializeMachineSkuSlot(item));
                            }
                            computeMachines = array;
                            continue;
                        }
                        if (property0.NameEquals("controllerMachines"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<MachineSkuSlot> array = new List<MachineSkuSlot>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(MachineSkuSlot.DeserializeMachineSkuSlot(item));
                            }
                            controllerMachines = array;
                            continue;
                        }
                        if (property0.NameEquals("description"u8))
                        {
                            description = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("maxClusterSlots"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            maxClusterSlots = property0.Value.GetInt64();
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            provisioningState = new RackSkuProvisioningState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("rackType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            rackType = new RackSkuType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("storageAppliances"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<StorageApplianceSkuSlot> array = new List<StorageApplianceSkuSlot>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(StorageApplianceSkuSlot.DeserializeStorageApplianceSkuSlot(item));
                            }
                            storageAppliances = array;
                            continue;
                        }
                        if (property0.NameEquals("supportedRackSkuIds"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            supportedRackSkuIds = array;
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new NetworkCloudRackSkuData(id, name, type, systemData.Value, Optional.ToList(computeMachines), Optional.ToList(controllerMachines), description.Value, Optional.ToNullable(maxClusterSlots), Optional.ToNullable(provisioningState), Optional.ToNullable(rackType), Optional.ToList(storageAppliances), Optional.ToList(supportedRackSkuIds));
        }
    }
}
