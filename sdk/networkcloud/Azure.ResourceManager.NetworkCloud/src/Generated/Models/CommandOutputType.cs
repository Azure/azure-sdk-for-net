// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.NetworkCloud.Models
{
    /// <summary> The type of command output for the override. </summary>
    public readonly partial struct CommandOutputType : IEquatable<CommandOutputType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CommandOutputType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CommandOutputType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string BareMetalMachineRunCommandValue = "BareMetalMachineRunCommand";
        private const string BareMetalMachineRunDataExtractsValue = "BareMetalMachineRunDataExtracts";
        private const string BareMetalMachineRunReadCommandsValue = "BareMetalMachineRunReadCommands";
        private const string StorageRunReadCommandsValue = "StorageRunReadCommands";

        /// <summary> BareMetalMachineRunCommand. </summary>
        public static CommandOutputType BareMetalMachineRunCommand { get; } = new CommandOutputType(BareMetalMachineRunCommandValue);
        /// <summary> BareMetalMachineRunDataExtracts. </summary>
        public static CommandOutputType BareMetalMachineRunDataExtracts { get; } = new CommandOutputType(BareMetalMachineRunDataExtractsValue);
        /// <summary> BareMetalMachineRunReadCommands. </summary>
        public static CommandOutputType BareMetalMachineRunReadCommands { get; } = new CommandOutputType(BareMetalMachineRunReadCommandsValue);
        /// <summary> StorageRunReadCommands. </summary>
        public static CommandOutputType StorageRunReadCommands { get; } = new CommandOutputType(StorageRunReadCommandsValue);
        /// <summary> Determines if two <see cref="CommandOutputType"/> values are the same. </summary>
        public static bool operator ==(CommandOutputType left, CommandOutputType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CommandOutputType"/> values are not the same. </summary>
        public static bool operator !=(CommandOutputType left, CommandOutputType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="CommandOutputType"/>. </summary>
        public static implicit operator CommandOutputType(string value) => new CommandOutputType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CommandOutputType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CommandOutputType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
