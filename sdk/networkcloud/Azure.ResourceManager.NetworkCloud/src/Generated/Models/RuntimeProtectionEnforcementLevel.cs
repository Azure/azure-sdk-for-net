// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.NetworkCloud.Models
{
    /// <summary> The mode of operation for runtime protection. </summary>
    public readonly partial struct RuntimeProtectionEnforcementLevel : IEquatable<RuntimeProtectionEnforcementLevel>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RuntimeProtectionEnforcementLevel"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RuntimeProtectionEnforcementLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AuditValue = "Audit";
        private const string DisabledValue = "Disabled";
        private const string OnDemandValue = "OnDemand";
        private const string PassiveValue = "Passive";
        private const string RealTimeValue = "RealTime";

        /// <summary> Audit. </summary>
        public static RuntimeProtectionEnforcementLevel Audit { get; } = new RuntimeProtectionEnforcementLevel(AuditValue);
        /// <summary> Disabled. </summary>
        public static RuntimeProtectionEnforcementLevel Disabled { get; } = new RuntimeProtectionEnforcementLevel(DisabledValue);
        /// <summary> OnDemand. </summary>
        public static RuntimeProtectionEnforcementLevel OnDemand { get; } = new RuntimeProtectionEnforcementLevel(OnDemandValue);
        /// <summary> Passive. </summary>
        public static RuntimeProtectionEnforcementLevel Passive { get; } = new RuntimeProtectionEnforcementLevel(PassiveValue);
        /// <summary> RealTime. </summary>
        public static RuntimeProtectionEnforcementLevel RealTime { get; } = new RuntimeProtectionEnforcementLevel(RealTimeValue);
        /// <summary> Determines if two <see cref="RuntimeProtectionEnforcementLevel"/> values are the same. </summary>
        public static bool operator ==(RuntimeProtectionEnforcementLevel left, RuntimeProtectionEnforcementLevel right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RuntimeProtectionEnforcementLevel"/> values are not the same. </summary>
        public static bool operator !=(RuntimeProtectionEnforcementLevel left, RuntimeProtectionEnforcementLevel right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="RuntimeProtectionEnforcementLevel"/>. </summary>
        public static implicit operator RuntimeProtectionEnforcementLevel(string value) => new RuntimeProtectionEnforcementLevel(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RuntimeProtectionEnforcementLevel other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RuntimeProtectionEnforcementLevel other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
