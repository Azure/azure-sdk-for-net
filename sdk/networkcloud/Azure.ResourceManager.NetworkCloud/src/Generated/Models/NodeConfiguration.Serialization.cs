// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.NetworkCloud.Models
{
    public partial class NodeConfiguration
    {
        internal static NodeConfiguration DeserializeNodeConfiguration(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> agentPoolId = default;
            Optional<string> agentPoolName = default;
            Optional<long> cpuCores = default;
            Optional<long> diskSizeGB = default;
            Optional<long> memorySizeGB = default;
            Optional<string> nodePoolName = default;
            Optional<IReadOnlyList<Node>> nodes = default;
            Optional<long> vmCount = default;
            Optional<string> vmSize = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("agentPoolId"u8))
                {
                    agentPoolId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("agentPoolName"u8))
                {
                    agentPoolName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cpuCores"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cpuCores = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("diskSizeGB"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    diskSizeGB = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("memorySizeGB"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    memorySizeGB = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("nodePoolName"u8))
                {
                    nodePoolName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("nodes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Node> array = new List<Node>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Node.DeserializeNode(item));
                    }
                    nodes = array;
                    continue;
                }
                if (property.NameEquals("vmCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    vmCount = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("vmSize"u8))
                {
                    vmSize = property.Value.GetString();
                    continue;
                }
            }
            return new NodeConfiguration(agentPoolId.Value, agentPoolName.Value, Optional.ToNullable(cpuCores), Optional.ToNullable(diskSizeGB), Optional.ToNullable(memorySizeGB), nodePoolName.Value, Optional.ToList(nodes), Optional.ToNullable(vmCount), vmSize.Value);
        }
    }
}
