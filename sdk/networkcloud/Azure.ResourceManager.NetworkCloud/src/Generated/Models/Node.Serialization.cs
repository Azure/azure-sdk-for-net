// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.NetworkCloud.Models
{
    public partial class Node
    {
        internal static Node DeserializeNode(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> bareMetalMachineId = default;
            Optional<string> imageId = default;
            Optional<IReadOnlyList<NetworkAttachment>> networkAttachments = default;
            Optional<string> nodeName = default;
            Optional<HybridAksClusterMachinePowerState> powerState = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("bareMetalMachineId"u8))
                {
                    bareMetalMachineId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("imageId"u8))
                {
                    imageId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("networkAttachments"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<NetworkAttachment> array = new List<NetworkAttachment>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(NetworkAttachment.DeserializeNetworkAttachment(item));
                    }
                    networkAttachments = array;
                    continue;
                }
                if (property.NameEquals("nodeName"u8))
                {
                    nodeName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("powerState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    powerState = new HybridAksClusterMachinePowerState(property.Value.GetString());
                    continue;
                }
            }
            return new Node(bareMetalMachineId.Value, imageId.Value, Optional.ToList(networkAttachments), nodeName.Value, Optional.ToNullable(powerState));
        }
    }
}
