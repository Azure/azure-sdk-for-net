// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.NetworkCloud.Models
{
    /// <summary> The current status of an async operation. </summary>
    public partial class NetworkCloudOperationStatusResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="NetworkCloudOperationStatusResult"/>. </summary>
        /// <param name="status"> Operation status. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="status"/> is null. </exception>
        internal NetworkCloudOperationStatusResult(string status)
        {
            Argument.AssertNotNull(status, nameof(status));

            Operations = new ChangeTrackingList<NetworkCloudOperationStatusResult>();
            Status = status;
        }

        /// <summary> Initializes a new instance of <see cref="NetworkCloudOperationStatusResult"/>. </summary>
        /// <param name="endOn"> The end time of the operation. </param>
        /// <param name="error"> If present, details of the operation error. </param>
        /// <param name="id"> Fully qualified ID for the async operation. </param>
        /// <param name="name"> Name of the async operation. </param>
        /// <param name="operations"> The operations list. </param>
        /// <param name="percentComplete"> Percent of the operation that is complete. </param>
        /// <param name="resourceId"> Fully qualified ID of the resource against which the original async operation was started. </param>
        /// <param name="startOn"> The start time of the operation. </param>
        /// <param name="status"> Operation status. </param>
        /// <param name="exitCode"> For actions that run commands or scripts, the exit code of the script execution. </param>
        /// <param name="outputHead"> For actions that run commands or scripts, the leading bytes of the output of the script execution. </param>
        /// <param name="resultRef"> For actions that run commands or scripts, a reference to the location of the result. </param>
        /// <param name="resultUri"> For actions that run commands or scripts, the URL where the full output of the script output can be retrieved. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal NetworkCloudOperationStatusResult(DateTimeOffset? endOn, ResponseError error, ResourceIdentifier id, string name, IReadOnlyList<NetworkCloudOperationStatusResult> operations, float? percentComplete, ResourceIdentifier resourceId, DateTimeOffset? startOn, string status, string exitCode, string outputHead, Uri resultRef, Uri resultUri, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            EndOn = endOn;
            Error = error;
            Id = id;
            Name = name;
            Operations = operations;
            PercentComplete = percentComplete;
            ResourceId = resourceId;
            StartOn = startOn;
            Status = status;
            ExitCode = exitCode;
            OutputHead = outputHead;
            ResultRef = resultRef;
            ResultUri = resultUri;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="NetworkCloudOperationStatusResult"/> for deserialization. </summary>
        internal NetworkCloudOperationStatusResult()
        {
        }

        /// <summary> The end time of the operation. </summary>
        public DateTimeOffset? EndOn { get; }
        /// <summary> If present, details of the operation error. </summary>
        public ResponseError Error { get; }
        /// <summary> Fully qualified ID for the async operation. </summary>
        public ResourceIdentifier Id { get; }
        /// <summary> Name of the async operation. </summary>
        public string Name { get; }
        /// <summary> The operations list. </summary>
        public IReadOnlyList<NetworkCloudOperationStatusResult> Operations { get; }
        /// <summary> Percent of the operation that is complete. </summary>
        public float? PercentComplete { get; }
        /// <summary> Fully qualified ID of the resource against which the original async operation was started. </summary>
        public ResourceIdentifier ResourceId { get; }
        /// <summary> The start time of the operation. </summary>
        public DateTimeOffset? StartOn { get; }
        /// <summary> Operation status. </summary>
        public string Status { get; }
        /// <summary> For actions that run commands or scripts, the exit code of the script execution. </summary>
        public string ExitCode { get; }
        /// <summary> For actions that run commands or scripts, the leading bytes of the output of the script execution. </summary>
        public string OutputHead { get; }
        /// <summary> For actions that run commands or scripts, a reference to the location of the result. </summary>
        public Uri ResultRef { get; }
        /// <summary> For actions that run commands or scripts, the URL where the full output of the script output can be retrieved. </summary>
        public Uri ResultUri { get; }
    }
}
