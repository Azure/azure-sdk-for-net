// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.NetworkCloud.Models
{
    public partial class BareMetalMachineConfigurationData : IUtf8JsonSerializable, Core.IModelSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((Core.IModelSerializable)this).Serialize(writer, new Core.Serialization.SerializableOptions());

        void Core.IModelSerializable.Serialize(Utf8JsonWriter writer, Core.Serialization.SerializableOptions options)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("bmcCredentials"u8);
            writer.WriteObjectValue(BmcCredentials);
            writer.WritePropertyName("bmcMacAddress"u8);
            writer.WriteStringValue(BmcMacAddress);
            writer.WritePropertyName("bootMacAddress"u8);
            writer.WriteStringValue(BootMacAddress);
            if (Optional.IsDefined(MachineDetails))
            {
                writer.WritePropertyName("machineDetails"u8);
                writer.WriteStringValue(MachineDetails);
            }
            if (Optional.IsDefined(MachineName))
            {
                writer.WritePropertyName("machineName"u8);
                writer.WriteStringValue(MachineName);
            }
            writer.WritePropertyName("rackSlot"u8);
            writer.WriteNumberValue(RackSlot);
            writer.WritePropertyName("serialNumber"u8);
            writer.WriteStringValue(SerialNumber);
            writer.WriteEndObject();
        }

        internal static BareMetalMachineConfigurationData DeserializeBareMetalMachineConfigurationData(JsonElement element, Core.Serialization.SerializableOptions options = default)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> bmcConnectionString = default;
            AdministrativeCredentials bmcCredentials = default;
            string bmcMacAddress = default;
            string bootMacAddress = default;
            Optional<string> machineDetails = default;
            Optional<string> machineName = default;
            long rackSlot = default;
            string serialNumber = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("bmcConnectionString"u8))
                {
                    bmcConnectionString = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("bmcCredentials"u8))
                {
                    bmcCredentials = AdministrativeCredentials.DeserializeAdministrativeCredentials(property.Value);
                    continue;
                }
                if (property.NameEquals("bmcMacAddress"u8))
                {
                    bmcMacAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("bootMacAddress"u8))
                {
                    bootMacAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("machineDetails"u8))
                {
                    machineDetails = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("machineName"u8))
                {
                    machineName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("rackSlot"u8))
                {
                    rackSlot = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("serialNumber"u8))
                {
                    serialNumber = property.Value.GetString();
                    continue;
                }
            }
            return new BareMetalMachineConfigurationData(bmcConnectionString.Value, bmcCredentials, bmcMacAddress, bootMacAddress, machineDetails.Value, machineName.Value, rackSlot, serialNumber);
        }
    }
}
