// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.NetworkCloud.Models
{
    public partial class ClusterCapacity
    {
        internal static ClusterCapacity DeserializeClusterCapacity(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<long> availableApplianceStorageGB = default;
            Core.Optional<long> availableCoreCount = default;
            Core.Optional<long> availableHostStorageGB = default;
            Core.Optional<long> availableMemoryGB = default;
            Core.Optional<long> totalApplianceStorageGB = default;
            Core.Optional<long> totalCoreCount = default;
            Core.Optional<long> totalHostStorageGB = default;
            Core.Optional<long> totalMemoryGB = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("availableApplianceStorageGB"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    availableApplianceStorageGB = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("availableCoreCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    availableCoreCount = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("availableHostStorageGB"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    availableHostStorageGB = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("availableMemoryGB"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    availableMemoryGB = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("totalApplianceStorageGB"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    totalApplianceStorageGB = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("totalCoreCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    totalCoreCount = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("totalHostStorageGB"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    totalHostStorageGB = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("totalMemoryGB"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    totalMemoryGB = property.Value.GetInt64();
                    continue;
                }
            }
            return new ClusterCapacity(Core.Optional.ToNullable(availableApplianceStorageGB), Core.Optional.ToNullable(availableCoreCount), Core.Optional.ToNullable(availableHostStorageGB), Core.Optional.ToNullable(availableMemoryGB), Core.Optional.ToNullable(totalApplianceStorageGB), Core.Optional.ToNullable(totalCoreCount), Core.Optional.ToNullable(totalHostStorageGB), Core.Optional.ToNullable(totalMemoryGB));
        }
    }
}
