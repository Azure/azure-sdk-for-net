// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.NetworkCloud.Models
{
    public partial class StorageApplianceConfiguration : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("adminCredentials"u8);
            writer.WriteObjectValue(AdminCredentials);
            writer.WritePropertyName("rackSlot"u8);
            writer.WriteNumberValue(RackSlot);
            writer.WritePropertyName("serialNumber"u8);
            writer.WriteStringValue(SerialNumber);
            if (Optional.IsDefined(StorageApplianceName))
            {
                writer.WritePropertyName("storageApplianceName"u8);
                writer.WriteStringValue(StorageApplianceName);
            }
            writer.WriteEndObject();
        }

        internal static StorageApplianceConfiguration DeserializeStorageApplianceConfiguration(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            AdministrativeCredentials adminCredentials = default;
            long rackSlot = default;
            string serialNumber = default;
            Optional<string> storageApplianceName = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("adminCredentials"u8))
                {
                    adminCredentials = AdministrativeCredentials.DeserializeAdministrativeCredentials(property.Value);
                    continue;
                }
                if (property.NameEquals("rackSlot"u8))
                {
                    rackSlot = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("serialNumber"u8))
                {
                    serialNumber = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("storageApplianceName"u8))
                {
                    storageApplianceName = property.Value.GetString();
                    continue;
                }
            }
            return new StorageApplianceConfiguration(adminCredentials, rackSlot, serialNumber, storageApplianceName.Value);
        }
    }
}
