// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.NetworkCloud.Models
{
    /// <summary> StepState represents the state of a step in an action. </summary>
    public partial class StepState
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="StepState"/>. </summary>
        internal StepState()
        {
        }

        /// <summary> Initializes a new instance of <see cref="StepState"/>. </summary>
        /// <param name="endTime"> The timestamp for when processing of the step reached its terminal state, in ISO 8601 format. </param>
        /// <param name="message"> The message providing additional context for the status value. May be empty, or contain diagnostic information in the case of a failure. </param>
        /// <param name="startTime"> The timestamp for when processing of the step began, in ISO 8601 format. </param>
        /// <param name="status"> The status of the step. A value of Completed or Failed indicates a terminal state for the step. </param>
        /// <param name="stepName"> The name for the step. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal StepState(string endTime, string message, string startTime, StepStateStatus? status, string stepName, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            EndTime = endTime;
            Message = message;
            StartTime = startTime;
            Status = status;
            StepName = stepName;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The timestamp for when processing of the step reached its terminal state, in ISO 8601 format. </summary>
        public string EndTime { get; }
        /// <summary> The message providing additional context for the status value. May be empty, or contain diagnostic information in the case of a failure. </summary>
        public string Message { get; }
        /// <summary> The timestamp for when processing of the step began, in ISO 8601 format. </summary>
        public string StartTime { get; }
        /// <summary> The status of the step. A value of Completed or Failed indicates a terminal state for the step. </summary>
        public StepStateStatus? Status { get; }
        /// <summary> The name for the step. </summary>
        public string StepName { get; }
    }
}
