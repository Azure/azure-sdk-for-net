// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.NetworkCloud
{
    /// <summary>
    /// A class representing a collection of <see cref="DefaultCniNetworkResource" /> and their operations.
    /// Each <see cref="DefaultCniNetworkResource" /> in the collection will belong to the same instance of <see cref="ResourceGroupResource" />.
    /// To get a <see cref="DefaultCniNetworkCollection" /> instance call the GetDefaultCniNetworks method from an instance of <see cref="ResourceGroupResource" />.
    /// </summary>
    public partial class DefaultCniNetworkCollection : ArmCollection, IEnumerable<DefaultCniNetworkResource>, IAsyncEnumerable<DefaultCniNetworkResource>
    {
        private readonly ClientDiagnostics _defaultCniNetworkClientDiagnostics;
        private readonly DefaultCniNetworksRestOperations _defaultCniNetworkRestClient;

        /// <summary> Initializes a new instance of the <see cref="DefaultCniNetworkCollection"/> class for mocking. </summary>
        protected DefaultCniNetworkCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="DefaultCniNetworkCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal DefaultCniNetworkCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _defaultCniNetworkClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.NetworkCloud", DefaultCniNetworkResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(DefaultCniNetworkResource.ResourceType, out string defaultCniNetworkApiVersion);
            _defaultCniNetworkRestClient = new DefaultCniNetworksRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, defaultCniNetworkApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Create a new default CNI network or update the properties of the existing default CNI network.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/defaultCniNetworks/{defaultCniNetworkName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DefaultCniNetworks_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="defaultCniNetworkName"> The name of the default CNI network. </param>
        /// <param name="data"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="defaultCniNetworkName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="defaultCniNetworkName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<DefaultCniNetworkResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string defaultCniNetworkName, DefaultCniNetworkData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(defaultCniNetworkName, nameof(defaultCniNetworkName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _defaultCniNetworkClientDiagnostics.CreateScope("DefaultCniNetworkCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _defaultCniNetworkRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, defaultCniNetworkName, data, cancellationToken).ConfigureAwait(false);
                var operation = new NetworkCloudArmOperation<DefaultCniNetworkResource>(new DefaultCniNetworkOperationSource(Client), _defaultCniNetworkClientDiagnostics, Pipeline, _defaultCniNetworkRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, defaultCniNetworkName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a new default CNI network or update the properties of the existing default CNI network.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/defaultCniNetworks/{defaultCniNetworkName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DefaultCniNetworks_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="defaultCniNetworkName"> The name of the default CNI network. </param>
        /// <param name="data"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="defaultCniNetworkName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="defaultCniNetworkName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<DefaultCniNetworkResource> CreateOrUpdate(WaitUntil waitUntil, string defaultCniNetworkName, DefaultCniNetworkData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(defaultCniNetworkName, nameof(defaultCniNetworkName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _defaultCniNetworkClientDiagnostics.CreateScope("DefaultCniNetworkCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _defaultCniNetworkRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, defaultCniNetworkName, data, cancellationToken);
                var operation = new NetworkCloudArmOperation<DefaultCniNetworkResource>(new DefaultCniNetworkOperationSource(Client), _defaultCniNetworkClientDiagnostics, Pipeline, _defaultCniNetworkRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, defaultCniNetworkName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get properties of the provided default CNI network.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/defaultCniNetworks/{defaultCniNetworkName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DefaultCniNetworks_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="defaultCniNetworkName"> The name of the default CNI network. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="defaultCniNetworkName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="defaultCniNetworkName"/> is null. </exception>
        public virtual async Task<Response<DefaultCniNetworkResource>> GetAsync(string defaultCniNetworkName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(defaultCniNetworkName, nameof(defaultCniNetworkName));

            using var scope = _defaultCniNetworkClientDiagnostics.CreateScope("DefaultCniNetworkCollection.Get");
            scope.Start();
            try
            {
                var response = await _defaultCniNetworkRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, defaultCniNetworkName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DefaultCniNetworkResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get properties of the provided default CNI network.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/defaultCniNetworks/{defaultCniNetworkName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DefaultCniNetworks_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="defaultCniNetworkName"> The name of the default CNI network. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="defaultCniNetworkName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="defaultCniNetworkName"/> is null. </exception>
        public virtual Response<DefaultCniNetworkResource> Get(string defaultCniNetworkName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(defaultCniNetworkName, nameof(defaultCniNetworkName));

            using var scope = _defaultCniNetworkClientDiagnostics.CreateScope("DefaultCniNetworkCollection.Get");
            scope.Start();
            try
            {
                var response = _defaultCniNetworkRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, defaultCniNetworkName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DefaultCniNetworkResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a list of default CNI networks in the provided resource group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/defaultCniNetworks</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DefaultCniNetworks_ListByResourceGroup</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DefaultCniNetworkResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<DefaultCniNetworkResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _defaultCniNetworkRestClient.CreateListByResourceGroupRequest(Id.SubscriptionId, Id.ResourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _defaultCniNetworkRestClient.CreateListByResourceGroupNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new DefaultCniNetworkResource(Client, DefaultCniNetworkData.DeserializeDefaultCniNetworkData(e)), _defaultCniNetworkClientDiagnostics, Pipeline, "DefaultCniNetworkCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get a list of default CNI networks in the provided resource group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/defaultCniNetworks</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DefaultCniNetworks_ListByResourceGroup</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DefaultCniNetworkResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<DefaultCniNetworkResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _defaultCniNetworkRestClient.CreateListByResourceGroupRequest(Id.SubscriptionId, Id.ResourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _defaultCniNetworkRestClient.CreateListByResourceGroupNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new DefaultCniNetworkResource(Client, DefaultCniNetworkData.DeserializeDefaultCniNetworkData(e)), _defaultCniNetworkClientDiagnostics, Pipeline, "DefaultCniNetworkCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/defaultCniNetworks/{defaultCniNetworkName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DefaultCniNetworks_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="defaultCniNetworkName"> The name of the default CNI network. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="defaultCniNetworkName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="defaultCniNetworkName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string defaultCniNetworkName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(defaultCniNetworkName, nameof(defaultCniNetworkName));

            using var scope = _defaultCniNetworkClientDiagnostics.CreateScope("DefaultCniNetworkCollection.Exists");
            scope.Start();
            try
            {
                var response = await _defaultCniNetworkRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, defaultCniNetworkName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/defaultCniNetworks/{defaultCniNetworkName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DefaultCniNetworks_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="defaultCniNetworkName"> The name of the default CNI network. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="defaultCniNetworkName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="defaultCniNetworkName"/> is null. </exception>
        public virtual Response<bool> Exists(string defaultCniNetworkName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(defaultCniNetworkName, nameof(defaultCniNetworkName));

            using var scope = _defaultCniNetworkClientDiagnostics.CreateScope("DefaultCniNetworkCollection.Exists");
            scope.Start();
            try
            {
                var response = _defaultCniNetworkRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, defaultCniNetworkName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<DefaultCniNetworkResource> IEnumerable<DefaultCniNetworkResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<DefaultCniNetworkResource> IAsyncEnumerable<DefaultCniNetworkResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
