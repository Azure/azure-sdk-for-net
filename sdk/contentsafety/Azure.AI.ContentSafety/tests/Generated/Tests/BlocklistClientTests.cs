// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.ContentSafety.Tests
{
    public partial class BlocklistClientTests : AIContentSafetyTestBase
    {
        public BlocklistClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task BlocklistClient_AddOrUpdateBlocklistItems_AddOrUpdateBlocklistItemsToTextBlocklist()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = CreateBlocklistClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                blocklistItems = new object[]
            {
new
{
description = "Hate word",
text = "hate",
}
            },
            });
            Response response = await client.AddOrUpdateBlocklistItemsAsync("TestBlocklist", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task BlocklistClient_AddOrUpdateBlocklistItems_AddOrUpdateBlocklistItemsToTextBlocklist_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = CreateBlocklistClient(endpoint, credential);

            AddOrUpdateTextBlocklistItemsOptions options = new AddOrUpdateTextBlocklistItemsOptions(new TextBlocklistItem[]
            {
new TextBlocklistItem("hate")
{
Description = "Hate word",
}
            });
            Response<AddOrUpdateTextBlocklistItemsResult> response = await client.AddOrUpdateBlocklistItemsAsync("TestBlocklist", options);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task TextBlocklist_CreateOrUpdateTextBlocklist_CreateOrUpdateTextBlocklist()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = CreateBlocklistClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                description = "Test Blocklist",
            });
            Response response = await client.CreateOrUpdateTextBlocklistAsync("TestBlocklist", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task TextBlocklist_DeleteTextBlocklist_DeleteTextBlocklistByBlocklistName()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = CreateBlocklistClient(endpoint, credential);

            Response response = await client.DeleteTextBlocklistAsync("TestBlocklist");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task TextBlocklist_GetTextBlocklist_GetTextBlocklistByBlocklistName()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = CreateBlocklistClient(endpoint, credential);

            Response response = await client.GetTextBlocklistAsync("TestBlocklist", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task TextBlocklist_GetTextBlocklist_GetTextBlocklistByBlocklistName_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = CreateBlocklistClient(endpoint, credential);

            Response<TextBlocklist> response = await client.GetTextBlocklistAsync("TestBlocklist");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task TextBlocklistItem_GetTextBlocklistItem_GetBlockItemByBlocklistNameAndBlocklistItemId()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = CreateBlocklistClient(endpoint, credential);

            Response response = await client.GetTextBlocklistItemAsync("TestBlocklist", "9511969e-f1e3-4604-9127-05ee16c509ec", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task TextBlocklistItem_GetTextBlocklistItem_GetBlockItemByBlocklistNameAndBlocklistItemId_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = CreateBlocklistClient(endpoint, credential);

            Response<TextBlocklistItem> response = await client.GetTextBlocklistItemAsync("TestBlocklist", "9511969e-f1e3-4604-9127-05ee16c509ec");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task BlocklistClient_RemoveBlocklistItems_RemoveBlockItemsFromTextBlocklist()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = CreateBlocklistClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                blocklistItemIds = new object[]
            {
"9511969e-f1e3-4604-9127-05ee16c509ec"
            },
            });
            Response response = await client.RemoveBlocklistItemsAsync("TestBlocklist", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task BlocklistClient_RemoveBlocklistItems_RemoveBlockItemsFromTextBlocklist_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = CreateBlocklistClient(endpoint, credential);

            RemoveTextBlocklistItemsOptions options = new RemoveTextBlocklistItemsOptions(new string[] { "9511969e-f1e3-4604-9127-05ee16c509ec" });
            Response response = await client.RemoveBlocklistItemsAsync("TestBlocklist", options);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task TextBlocklistItem_GetTextBlocklistItems_GetAllBlockItemsByBlocklistName()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = CreateBlocklistClient(endpoint, credential);

            await foreach (BinaryData item in client.GetTextBlocklistItemsAsync("TestBlocklist", null, null, null, null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task TextBlocklistItem_GetTextBlocklistItems_GetAllBlockItemsByBlocklistName_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = CreateBlocklistClient(endpoint, credential);

            await foreach (TextBlocklistItem item in client.GetTextBlocklistItemsAsync("TestBlocklist"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task TextBlocklist_GetTextBlocklists_GetAllTextBlocklists()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = CreateBlocklistClient(endpoint, credential);

            await foreach (BinaryData item in client.GetTextBlocklistsAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task TextBlocklist_GetTextBlocklists_GetAllTextBlocklists_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = CreateBlocklistClient(endpoint, credential);

            await foreach (TextBlocklist item in client.GetTextBlocklistsAsync())
            {
            }
        }
    }
}
