// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.AI.ContentSafety;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.ContentSafety.Samples
{
    public partial class Samples_ContentSafetyClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ContentSafetyClient_AnalyzeText_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                text = "<text>",
            });
            Response response = client.AnalyzeText(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("category").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ContentSafetyClient_AnalyzeText_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                text = "<text>",
            });
            Response response = await client.AnalyzeTextAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("category").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ContentSafetyClient_AnalyzeText_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            AnalyzeTextOptions options = new AnalyzeTextOptions("<text>");
            Response<AnalyzeTextResult> response = client.AnalyzeText(options);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ContentSafetyClient_AnalyzeText_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            AnalyzeTextOptions options = new AnalyzeTextOptions("<text>");
            Response<AnalyzeTextResult> response = await client.AnalyzeTextAsync(options);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ContentSafetyClient_AnalyzeText_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                text = "<text>",
                categories = new object[]
            {
"Hate"
            },
                blocklistNames = new object[]
            {
"<blocklistNames>"
            },
                haltOnBlocklistHit = true,
                outputType = "FourSeverityLevels",
            });
            Response response = client.AnalyzeText(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistsMatch")[0].GetProperty("blocklistName").ToString());
            Console.WriteLine(result.GetProperty("blocklistsMatch")[0].GetProperty("blocklistItemId").ToString());
            Console.WriteLine(result.GetProperty("blocklistsMatch")[0].GetProperty("blocklistItemText").ToString());
            Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("severity").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ContentSafetyClient_AnalyzeText_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                text = "<text>",
                categories = new object[]
            {
"Hate"
            },
                blocklistNames = new object[]
            {
"<blocklistNames>"
            },
                haltOnBlocklistHit = true,
                outputType = "FourSeverityLevels",
            });
            Response response = await client.AnalyzeTextAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistsMatch")[0].GetProperty("blocklistName").ToString());
            Console.WriteLine(result.GetProperty("blocklistsMatch")[0].GetProperty("blocklistItemId").ToString());
            Console.WriteLine(result.GetProperty("blocklistsMatch")[0].GetProperty("blocklistItemText").ToString());
            Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("severity").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ContentSafetyClient_AnalyzeText_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            AnalyzeTextOptions options = new AnalyzeTextOptions("<text>")
            {
                Categories = { TextCategory.Hate },
                BlocklistNames = { "<blocklistNames>" },
                HaltOnBlocklistHit = true,
                OutputType = AnalyzeTextOutputType.FourSeverityLevels,
            };
            Response<AnalyzeTextResult> response = client.AnalyzeText(options);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ContentSafetyClient_AnalyzeText_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            AnalyzeTextOptions options = new AnalyzeTextOptions("<text>")
            {
                Categories = { TextCategory.Hate },
                BlocklistNames = { "<blocklistNames>" },
                HaltOnBlocklistHit = true,
                OutputType = AnalyzeTextOutputType.FourSeverityLevels,
            };
            Response<AnalyzeTextResult> response = await client.AnalyzeTextAsync(options);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ContentSafetyClient_AnalyzeImage_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                image = new object(),
            });
            Response response = client.AnalyzeImage(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("category").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ContentSafetyClient_AnalyzeImage_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                image = new object(),
            });
            Response response = await client.AnalyzeImageAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("category").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ContentSafetyClient_AnalyzeImage_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            AnalyzeImageOptions options = new AnalyzeImageOptions(new ContentSafetyImageData());
            Response<AnalyzeImageResult> response = client.AnalyzeImage(options);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ContentSafetyClient_AnalyzeImage_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            AnalyzeImageOptions options = new AnalyzeImageOptions(new ContentSafetyImageData());
            Response<AnalyzeImageResult> response = await client.AnalyzeImageAsync(options);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ContentSafetyClient_AnalyzeImage_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                image = new
                {
                    content = new object(),
                    blobUrl = "http://localhost:3000",
                },
                categories = new object[]
            {
"Hate"
            },
                outputType = "FourSeverityLevels",
            });
            Response response = client.AnalyzeImage(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("severity").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ContentSafetyClient_AnalyzeImage_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                image = new
                {
                    content = new object(),
                    blobUrl = "http://localhost:3000",
                },
                categories = new object[]
            {
"Hate"
            },
                outputType = "FourSeverityLevels",
            });
            Response response = await client.AnalyzeImageAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("severity").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ContentSafetyClient_AnalyzeImage_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            AnalyzeImageOptions options = new AnalyzeImageOptions(new ContentSafetyImageData())
            {
                Categories = { ImageCategory.Hate },
                OutputType = AnalyzeImageOutputType.FourSeverityLevels,
            };
            Response<AnalyzeImageResult> response = client.AnalyzeImage(options);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ContentSafetyClient_AnalyzeImage_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            AnalyzeImageOptions options = new AnalyzeImageOptions(new ContentSafetyImageData())
            {
                Categories = { ImageCategory.Hate },
                OutputType = AnalyzeImageOutputType.FourSeverityLevels,
            };
            Response<AnalyzeImageResult> response = await client.AnalyzeImageAsync(options);
        }
    }
}
