// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.AI.ContentSafety;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.ContentSafety.Samples
{
    public class Samples_ContentSafetyClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeText()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                text = "<text>",
            });
            Response response = client.AnalyzeText(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeText_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                text = "<text>",
                categories = new List<object>()
{
"Hate"
},
                blocklistNames = new List<object>()
{
"<blocklistNames>"
},
                breakByBlocklists = true,
            });
            Response response = client.AnalyzeText(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistsMatchResults")[0].GetProperty("blocklistName").ToString());
            Console.WriteLine(result.GetProperty("blocklistsMatchResults")[0].GetProperty("blockItemId").ToString());
            Console.WriteLine(result.GetProperty("blocklistsMatchResults")[0].GetProperty("blockItemText").ToString());
            Console.WriteLine(result.GetProperty("blocklistsMatchResults")[0].GetProperty("offset").ToString());
            Console.WriteLine(result.GetProperty("blocklistsMatchResults")[0].GetProperty("length").ToString());
            Console.WriteLine(result.GetProperty("hateResult").GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("hateResult").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("selfHarmResult").GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("selfHarmResult").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("sexualResult").GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("sexualResult").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("violenceResult").GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("violenceResult").GetProperty("severity").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeText_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            AnalyzeTextOptions body = new AnalyzeTextOptions("<text>");
            Response<AnalyzeTextResult> response = client.AnalyzeText(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeText_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            AnalyzeTextOptions body = new AnalyzeTextOptions("<text>")
            {
                Categories =
{
TextCategory.Hate
},
                BlocklistNames =
{
"<blocklistNames>"
},
                BreakByBlocklists = true,
            };
            Response<AnalyzeTextResult> response = client.AnalyzeText(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeText_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                text = "<text>",
            });
            Response response = await client.AnalyzeTextAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeText_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                text = "<text>",
                categories = new List<object>()
{
"Hate"
},
                blocklistNames = new List<object>()
{
"<blocklistNames>"
},
                breakByBlocklists = true,
            });
            Response response = await client.AnalyzeTextAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistsMatchResults")[0].GetProperty("blocklistName").ToString());
            Console.WriteLine(result.GetProperty("blocklistsMatchResults")[0].GetProperty("blockItemId").ToString());
            Console.WriteLine(result.GetProperty("blocklistsMatchResults")[0].GetProperty("blockItemText").ToString());
            Console.WriteLine(result.GetProperty("blocklistsMatchResults")[0].GetProperty("offset").ToString());
            Console.WriteLine(result.GetProperty("blocklistsMatchResults")[0].GetProperty("length").ToString());
            Console.WriteLine(result.GetProperty("hateResult").GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("hateResult").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("selfHarmResult").GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("selfHarmResult").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("sexualResult").GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("sexualResult").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("violenceResult").GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("violenceResult").GetProperty("severity").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeText_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            AnalyzeTextOptions body = new AnalyzeTextOptions("<text>");
            Response<AnalyzeTextResult> response = await client.AnalyzeTextAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeText_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            AnalyzeTextOptions body = new AnalyzeTextOptions("<text>")
            {
                Categories =
{
TextCategory.Hate
},
                BlocklistNames =
{
"<blocklistNames>"
},
                BreakByBlocklists = true,
            };
            Response<AnalyzeTextResult> response = await client.AnalyzeTextAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeImage()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                image = new object(),
            });
            Response response = client.AnalyzeImage(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeImage_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                image = new
                {
                    content = new object(),
                    blobUrl = "http://localhost:3000",
                },
                categories = new List<object>()
{
"Hate"
},
            });
            Response response = client.AnalyzeImage(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("hateResult").GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("hateResult").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("selfHarmResult").GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("selfHarmResult").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("sexualResult").GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("sexualResult").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("violenceResult").GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("violenceResult").GetProperty("severity").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeImage_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            AnalyzeImageOptions body = new AnalyzeImageOptions(new ContentSafetyImageData());
            Response<AnalyzeImageResult> response = client.AnalyzeImage(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeImage_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            AnalyzeImageOptions body = new AnalyzeImageOptions(new ContentSafetyImageData()
            {
                Content = BinaryData.FromObjectAsJson(new object()),
                BlobUrl = new Uri("http://localhost:3000"),
            })
            {
                Categories =
{
ImageCategory.Hate
},
            };
            Response<AnalyzeImageResult> response = client.AnalyzeImage(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeImage_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                image = new object(),
            });
            Response response = await client.AnalyzeImageAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeImage_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                image = new
                {
                    content = new object(),
                    blobUrl = "http://localhost:3000",
                },
                categories = new List<object>()
{
"Hate"
},
            });
            Response response = await client.AnalyzeImageAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("hateResult").GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("hateResult").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("selfHarmResult").GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("selfHarmResult").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("sexualResult").GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("sexualResult").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("violenceResult").GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("violenceResult").GetProperty("severity").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeImage_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            AnalyzeImageOptions body = new AnalyzeImageOptions(new ContentSafetyImageData());
            Response<AnalyzeImageResult> response = await client.AnalyzeImageAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeImage_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            AnalyzeImageOptions body = new AnalyzeImageOptions(new ContentSafetyImageData()
            {
                Content = BinaryData.FromObjectAsJson(new object()),
                BlobUrl = new Uri("http://localhost:3000"),
            })
            {
                Categories =
{
ImageCategory.Hate
},
            };
            Response<AnalyzeImageResult> response = await client.AnalyzeImageAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTextBlocklist()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response response = client.GetTextBlocklist("<blocklistName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTextBlocklist_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response response = client.GetTextBlocklist("<blocklistName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTextBlocklist_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response<TextBlocklist> response = client.GetTextBlocklist("<blocklistName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTextBlocklist_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response<TextBlocklist> response = client.GetTextBlocklist("<blocklistName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTextBlocklist_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response response = await client.GetTextBlocklistAsync("<blocklistName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTextBlocklist_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response response = await client.GetTextBlocklistAsync("<blocklistName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTextBlocklist_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response<TextBlocklist> response = await client.GetTextBlocklistAsync("<blocklistName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTextBlocklist_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response<TextBlocklist> response = await client.GetTextBlocklistAsync("<blocklistName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdateTextBlocklist()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                blocklistName = "<blocklistName>",
            });
            Response response = client.CreateOrUpdateTextBlocklist("<blocklistName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdateTextBlocklist_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                blocklistName = "<blocklistName>",
                description = "<description>",
            });
            Response response = client.CreateOrUpdateTextBlocklist("<blocklistName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdateTextBlocklist_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                blocklistName = "<blocklistName>",
            });
            Response response = await client.CreateOrUpdateTextBlocklistAsync("<blocklistName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdateTextBlocklist_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                blocklistName = "<blocklistName>",
                description = "<description>",
            });
            Response response = await client.CreateOrUpdateTextBlocklistAsync("<blocklistName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteTextBlocklist()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response response = client.DeleteTextBlocklist("<blocklistName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteTextBlocklist_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response response = client.DeleteTextBlocklist("<blocklistName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteTextBlocklist_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response response = await client.DeleteTextBlocklistAsync("<blocklistName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteTextBlocklist_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response response = await client.DeleteTextBlocklistAsync("<blocklistName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AddBlockItems()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                blockItems = new List<object>()
{
new
{
text = "<text>",
}
},
            });
            Response response = client.AddBlockItems("<blocklistName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AddBlockItems_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                blockItems = new List<object>()
{
new
{
description = "<description>",
text = "<text>",
}
},
            });
            Response response = client.AddBlockItems("<blocklistName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("blockItemId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AddBlockItems_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            AddBlockItemsOptions addBlockItemsOptions = new AddBlockItemsOptions(new List<TextBlockItemInfo>()
{
new TextBlockItemInfo("<text>")
});
            Response<AddBlockItemsResult> response = client.AddBlockItems("<blocklistName>", addBlockItemsOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AddBlockItems_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            AddBlockItemsOptions addBlockItemsOptions = new AddBlockItemsOptions(new List<TextBlockItemInfo>()
{
new TextBlockItemInfo("<text>")
{
Description = "<description>",
}
});
            Response<AddBlockItemsResult> response = client.AddBlockItems("<blocklistName>", addBlockItemsOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AddBlockItems_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                blockItems = new List<object>()
{
new
{
text = "<text>",
}
},
            });
            Response response = await client.AddBlockItemsAsync("<blocklistName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AddBlockItems_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                blockItems = new List<object>()
{
new
{
description = "<description>",
text = "<text>",
}
},
            });
            Response response = await client.AddBlockItemsAsync("<blocklistName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("blockItemId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AddBlockItems_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            AddBlockItemsOptions addBlockItemsOptions = new AddBlockItemsOptions(new List<TextBlockItemInfo>()
{
new TextBlockItemInfo("<text>")
});
            Response<AddBlockItemsResult> response = await client.AddBlockItemsAsync("<blocklistName>", addBlockItemsOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AddBlockItems_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            AddBlockItemsOptions addBlockItemsOptions = new AddBlockItemsOptions(new List<TextBlockItemInfo>()
{
new TextBlockItemInfo("<text>")
{
Description = "<description>",
}
});
            Response<AddBlockItemsResult> response = await client.AddBlockItemsAsync("<blocklistName>", addBlockItemsOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RemoveBlockItems()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                blockItemIds = new List<object>()
{
"<blockItemIds>"
},
            });
            Response response = client.RemoveBlockItems("<blocklistName>", content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RemoveBlockItems_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                blockItemIds = new List<object>()
{
"<blockItemIds>"
},
            });
            Response response = client.RemoveBlockItems("<blocklistName>", content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RemoveBlockItems_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            RemoveBlockItemsOptions removeBlockItemsOptions = new RemoveBlockItemsOptions(new List<string>()
{
"<blockItemIds>"
});
            Response response = client.RemoveBlockItems("<blocklistName>", removeBlockItemsOptions);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RemoveBlockItems_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            RemoveBlockItemsOptions removeBlockItemsOptions = new RemoveBlockItemsOptions(new List<string>()
{
"<blockItemIds>"
});
            Response response = client.RemoveBlockItems("<blocklistName>", removeBlockItemsOptions);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RemoveBlockItems_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                blockItemIds = new List<object>()
{
"<blockItemIds>"
},
            });
            Response response = await client.RemoveBlockItemsAsync("<blocklistName>", content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RemoveBlockItems_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                blockItemIds = new List<object>()
{
"<blockItemIds>"
},
            });
            Response response = await client.RemoveBlockItemsAsync("<blocklistName>", content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RemoveBlockItems_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            RemoveBlockItemsOptions removeBlockItemsOptions = new RemoveBlockItemsOptions(new List<string>()
{
"<blockItemIds>"
});
            Response response = await client.RemoveBlockItemsAsync("<blocklistName>", removeBlockItemsOptions);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RemoveBlockItems_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            RemoveBlockItemsOptions removeBlockItemsOptions = new RemoveBlockItemsOptions(new List<string>()
{
"<blockItemIds>"
});
            Response response = await client.RemoveBlockItemsAsync("<blocklistName>", removeBlockItemsOptions);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTextBlocklistItem()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response response = client.GetTextBlocklistItem("<blocklistName>", "<blockItemId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blockItemId").ToString());
            Console.WriteLine(result.GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTextBlocklistItem_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response response = client.GetTextBlocklistItem("<blocklistName>", "<blockItemId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blockItemId").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTextBlocklistItem_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response<TextBlockItem> response = client.GetTextBlocklistItem("<blocklistName>", "<blockItemId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTextBlocklistItem_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response<TextBlockItem> response = client.GetTextBlocklistItem("<blocklistName>", "<blockItemId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTextBlocklistItem_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response response = await client.GetTextBlocklistItemAsync("<blocklistName>", "<blockItemId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blockItemId").ToString());
            Console.WriteLine(result.GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTextBlocklistItem_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response response = await client.GetTextBlocklistItemAsync("<blocklistName>", "<blockItemId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blockItemId").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTextBlocklistItem_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response<TextBlockItem> response = await client.GetTextBlocklistItemAsync("<blocklistName>", "<blockItemId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTextBlocklistItem_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response<TextBlockItem> response = await client.GetTextBlocklistItemAsync("<blocklistName>", "<blockItemId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTextBlocklists()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            foreach (BinaryData item in client.GetTextBlocklists(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("blocklistName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTextBlocklists_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            foreach (BinaryData item in client.GetTextBlocklists(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("blocklistName").ToString());
                Console.WriteLine(result[0].GetProperty("description").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTextBlocklists_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            foreach (TextBlocklist item in client.GetTextBlocklists())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTextBlocklists_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            foreach (TextBlocklist item in client.GetTextBlocklists())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTextBlocklists_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            await foreach (BinaryData item in client.GetTextBlocklistsAsync(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("blocklistName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTextBlocklists_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            await foreach (BinaryData item in client.GetTextBlocklistsAsync(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("blocklistName").ToString());
                Console.WriteLine(result[0].GetProperty("description").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTextBlocklists_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            await foreach (TextBlocklist item in client.GetTextBlocklistsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTextBlocklists_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            await foreach (TextBlocklist item in client.GetTextBlocklistsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTextBlocklistItems()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            foreach (BinaryData item in client.GetTextBlocklistItems("<blocklistName>", null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("blockItemId").ToString());
                Console.WriteLine(result[0].GetProperty("text").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTextBlocklistItems_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            foreach (BinaryData item in client.GetTextBlocklistItems("<blocklistName>", 1234, 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("blockItemId").ToString());
                Console.WriteLine(result[0].GetProperty("description").ToString());
                Console.WriteLine(result[0].GetProperty("text").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTextBlocklistItems_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            foreach (TextBlockItem item in client.GetTextBlocklistItems("<blocklistName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTextBlocklistItems_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            foreach (TextBlockItem item in client.GetTextBlocklistItems("<blocklistName>", maxCount: 1234, skip: 1234, maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTextBlocklistItems_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            await foreach (BinaryData item in client.GetTextBlocklistItemsAsync("<blocklistName>", null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("blockItemId").ToString());
                Console.WriteLine(result[0].GetProperty("text").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTextBlocklistItems_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            await foreach (BinaryData item in client.GetTextBlocklistItemsAsync("<blocklistName>", 1234, 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("blockItemId").ToString());
                Console.WriteLine(result[0].GetProperty("description").ToString());
                Console.WriteLine(result[0].GetProperty("text").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTextBlocklistItems_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            await foreach (TextBlockItem item in client.GetTextBlocklistItemsAsync("<blocklistName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTextBlocklistItems_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            await foreach (TextBlockItem item in client.GetTextBlocklistItemsAsync("<blocklistName>", maxCount: 1234, skip: 1234, maxpagesize: 1234))
            {
            }
        }
    }
}
