// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.AI.ContentSafety;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.ContentSafety.Samples
{
    public partial class Samples_BlocklistClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BlocklistClient_AddOrUpdateBlocklistItems_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                blocklistItems = new object[]
            {
new
{
text = "<text>",
}
            },
            });
            Response response = client.AddOrUpdateBlocklistItems("<Name>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistItems")[0].GetProperty("blocklistItemId").ToString());
            Console.WriteLine(result.GetProperty("blocklistItems")[0].GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BlocklistClient_AddOrUpdateBlocklistItems_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                blocklistItems = new object[]
            {
new
{
text = "<text>",
}
            },
            });
            Response response = await client.AddOrUpdateBlocklistItemsAsync("<Name>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistItems")[0].GetProperty("blocklistItemId").ToString());
            Console.WriteLine(result.GetProperty("blocklistItems")[0].GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BlocklistClient_AddOrUpdateBlocklistItems_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            AddOrUpdateTextBlocklistItemsOptions options = new AddOrUpdateTextBlocklistItemsOptions(new TextBlocklistItem[]
            {
new TextBlocklistItem("<text>")
            });
            Response<AddOrUpdateTextBlocklistItemsResult> response = client.AddOrUpdateBlocklistItems("<Name>", options);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BlocklistClient_AddOrUpdateBlocklistItems_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            AddOrUpdateTextBlocklistItemsOptions options = new AddOrUpdateTextBlocklistItemsOptions(new TextBlocklistItem[]
            {
new TextBlocklistItem("<text>")
            });
            Response<AddOrUpdateTextBlocklistItemsResult> response = await client.AddOrUpdateBlocklistItemsAsync("<Name>", options);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BlocklistClient_AddOrUpdateBlocklistItems_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                blocklistItems = new object[]
            {
new
{
description = "<description>",
text = "<text>",
}
            },
            });
            Response response = client.AddOrUpdateBlocklistItems("<Name>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistItems")[0].GetProperty("blocklistItemId").ToString());
            Console.WriteLine(result.GetProperty("blocklistItems")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("blocklistItems")[0].GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BlocklistClient_AddOrUpdateBlocklistItems_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                blocklistItems = new object[]
            {
new
{
description = "<description>",
text = "<text>",
}
            },
            });
            Response response = await client.AddOrUpdateBlocklistItemsAsync("<Name>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistItems")[0].GetProperty("blocklistItemId").ToString());
            Console.WriteLine(result.GetProperty("blocklistItems")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("blocklistItems")[0].GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BlocklistClient_AddOrUpdateBlocklistItems_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            AddOrUpdateTextBlocklistItemsOptions options = new AddOrUpdateTextBlocklistItemsOptions(new TextBlocklistItem[]
            {
new TextBlocklistItem("<text>")
{
Description = "<description>",
}
            });
            Response<AddOrUpdateTextBlocklistItemsResult> response = client.AddOrUpdateBlocklistItems("<Name>", options);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BlocklistClient_AddOrUpdateBlocklistItems_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            AddOrUpdateTextBlocklistItemsOptions options = new AddOrUpdateTextBlocklistItemsOptions(new TextBlocklistItem[]
            {
new TextBlocklistItem("<text>")
{
Description = "<description>",
}
            });
            Response<AddOrUpdateTextBlocklistItemsResult> response = await client.AddOrUpdateBlocklistItemsAsync("<Name>", options);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextBlocklist_CreateOrUpdateTextBlocklist_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                blocklistName = "<blocklistName>",
            });
            Response response = client.CreateOrUpdateTextBlocklist("<Name>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextBlocklist_CreateOrUpdateTextBlocklist_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                blocklistName = "<blocklistName>",
            });
            Response response = await client.CreateOrUpdateTextBlocklistAsync("<Name>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextBlocklist_CreateOrUpdateTextBlocklist_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                blocklistName = "<blocklistName>",
                description = "<description>",
            });
            Response response = client.CreateOrUpdateTextBlocklist("<Name>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextBlocklist_CreateOrUpdateTextBlocklist_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                blocklistName = "<blocklistName>",
                description = "<description>",
            });
            Response response = await client.CreateOrUpdateTextBlocklistAsync("<Name>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextBlocklist_DeleteTextBlocklist_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            Response response = client.DeleteTextBlocklist("<Name>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextBlocklist_DeleteTextBlocklist_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            Response response = await client.DeleteTextBlocklistAsync("<Name>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextBlocklist_DeleteTextBlocklist_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            Response response = client.DeleteTextBlocklist("<Name>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextBlocklist_DeleteTextBlocklist_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            Response response = await client.DeleteTextBlocklistAsync("<Name>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextBlocklist_GetTextBlocklist_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            Response response = client.GetTextBlocklist("<Name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextBlocklist_GetTextBlocklist_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            Response response = await client.GetTextBlocklistAsync("<Name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextBlocklist_GetTextBlocklist_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            Response<TextBlocklist> response = client.GetTextBlocklist("<Name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextBlocklist_GetTextBlocklist_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            Response<TextBlocklist> response = await client.GetTextBlocklistAsync("<Name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextBlocklist_GetTextBlocklist_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            Response response = client.GetTextBlocklist("<Name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextBlocklist_GetTextBlocklist_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            Response response = await client.GetTextBlocklistAsync("<Name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextBlocklist_GetTextBlocklist_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            Response<TextBlocklist> response = client.GetTextBlocklist("<Name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextBlocklist_GetTextBlocklist_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            Response<TextBlocklist> response = await client.GetTextBlocklistAsync("<Name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextBlocklistItem_GetTextBlocklistItem_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            Response response = client.GetTextBlocklistItem("<Name>", "<blocklistItemId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistItemId").ToString());
            Console.WriteLine(result.GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextBlocklistItem_GetTextBlocklistItem_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            Response response = await client.GetTextBlocklistItemAsync("<Name>", "<blocklistItemId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistItemId").ToString());
            Console.WriteLine(result.GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextBlocklistItem_GetTextBlocklistItem_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            Response<TextBlocklistItem> response = client.GetTextBlocklistItem("<Name>", "<blocklistItemId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextBlocklistItem_GetTextBlocklistItem_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            Response<TextBlocklistItem> response = await client.GetTextBlocklistItemAsync("<Name>", "<blocklistItemId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextBlocklistItem_GetTextBlocklistItem_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            Response response = client.GetTextBlocklistItem("<Name>", "<blocklistItemId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistItemId").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextBlocklistItem_GetTextBlocklistItem_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            Response response = await client.GetTextBlocklistItemAsync("<Name>", "<blocklistItemId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistItemId").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextBlocklistItem_GetTextBlocklistItem_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            Response<TextBlocklistItem> response = client.GetTextBlocklistItem("<Name>", "<blocklistItemId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextBlocklistItem_GetTextBlocklistItem_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            Response<TextBlocklistItem> response = await client.GetTextBlocklistItemAsync("<Name>", "<blocklistItemId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BlocklistClient_RemoveBlocklistItems_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                blocklistItemIds = new object[]
            {
"<blocklistItemIds>"
            },
            });
            Response response = client.RemoveBlocklistItems("<Name>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BlocklistClient_RemoveBlocklistItems_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                blocklistItemIds = new object[]
            {
"<blocklistItemIds>"
            },
            });
            Response response = await client.RemoveBlocklistItemsAsync("<Name>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BlocklistClient_RemoveBlocklistItems_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            RemoveTextBlocklistItemsOptions options = new RemoveTextBlocklistItemsOptions(new string[] { "<blocklistItemIds>" });
            Response response = client.RemoveBlocklistItems("<Name>", options);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BlocklistClient_RemoveBlocklistItems_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            RemoveTextBlocklistItemsOptions options = new RemoveTextBlocklistItemsOptions(new string[] { "<blocklistItemIds>" });
            Response response = await client.RemoveBlocklistItemsAsync("<Name>", options);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BlocklistClient_RemoveBlocklistItems_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                blocklistItemIds = new object[]
            {
"<blocklistItemIds>"
            },
            });
            Response response = client.RemoveBlocklistItems("<Name>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BlocklistClient_RemoveBlocklistItems_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                blocklistItemIds = new object[]
            {
"<blocklistItemIds>"
            },
            });
            Response response = await client.RemoveBlocklistItemsAsync("<Name>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BlocklistClient_RemoveBlocklistItems_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            RemoveTextBlocklistItemsOptions options = new RemoveTextBlocklistItemsOptions(new string[] { "<blocklistItemIds>" });
            Response response = client.RemoveBlocklistItems("<Name>", options);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BlocklistClient_RemoveBlocklistItems_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            RemoveTextBlocklistItemsOptions options = new RemoveTextBlocklistItemsOptions(new string[] { "<blocklistItemIds>" });
            Response response = await client.RemoveBlocklistItemsAsync("<Name>", options);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextBlocklistItem_GetTextBlocklistItems_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            foreach (BinaryData item in client.GetTextBlocklistItems("<Name>", null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("blocklistItemId").ToString());
                Console.WriteLine(result.GetProperty("text").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextBlocklistItem_GetTextBlocklistItems_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            await foreach (BinaryData item in client.GetTextBlocklistItemsAsync("<Name>", null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("blocklistItemId").ToString());
                Console.WriteLine(result.GetProperty("text").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextBlocklistItem_GetTextBlocklistItems_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            foreach (TextBlocklistItem item in client.GetTextBlocklistItems("<Name>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextBlocklistItem_GetTextBlocklistItems_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            await foreach (TextBlocklistItem item in client.GetTextBlocklistItemsAsync("<Name>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextBlocklistItem_GetTextBlocklistItems_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            foreach (BinaryData item in client.GetTextBlocklistItems("<Name>", 1234, 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("blocklistItemId").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("text").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextBlocklistItem_GetTextBlocklistItems_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            await foreach (BinaryData item in client.GetTextBlocklistItemsAsync("<Name>", 1234, 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("blocklistItemId").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("text").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextBlocklistItem_GetTextBlocklistItems_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            foreach (TextBlocklistItem item in client.GetTextBlocklistItems("<Name>", maxCount: 1234, skip: 1234, maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextBlocklistItem_GetTextBlocklistItems_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            await foreach (TextBlocklistItem item in client.GetTextBlocklistItemsAsync("<Name>", maxCount: 1234, skip: 1234, maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextBlocklist_GetTextBlocklists_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            foreach (BinaryData item in client.GetTextBlocklists(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("blocklistName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextBlocklist_GetTextBlocklists_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            await foreach (BinaryData item in client.GetTextBlocklistsAsync(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("blocklistName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextBlocklist_GetTextBlocklists_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            foreach (TextBlocklist item in client.GetTextBlocklists())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextBlocklist_GetTextBlocklists_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            await foreach (TextBlocklist item in client.GetTextBlocklistsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextBlocklist_GetTextBlocklists_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            foreach (BinaryData item in client.GetTextBlocklists(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("blocklistName").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextBlocklist_GetTextBlocklists_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            await foreach (BinaryData item in client.GetTextBlocklistsAsync(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("blocklistName").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextBlocklist_GetTextBlocklists_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            foreach (TextBlocklist item in client.GetTextBlocklists())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextBlocklist_GetTextBlocklists_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BlocklistClient client = new BlocklistClient(endpoint, credential);

            await foreach (TextBlocklist item in client.GetTextBlocklistsAsync())
            {
            }
        }
    }
}
