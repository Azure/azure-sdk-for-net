// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.AI.ContentSafety
{
    /// <summary> The result of blocklist match. </summary>
    public partial class TextBlocklistMatchResult
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private Dictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of TextBlocklistMatchResult. </summary>
        /// <param name="blocklistName"> The name of matched blocklist. </param>
        /// <param name="blockItemId"> The id of matched item. </param>
        /// <param name="blockItemText"> The content of matched item. </param>
        /// <param name="offset"> The character offset of matched text in original input. </param>
        /// <param name="length"> The length of matched text in original input. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="blocklistName"/>, <paramref name="blockItemId"/> or <paramref name="blockItemText"/> is null. </exception>
        internal TextBlocklistMatchResult(string blocklistName, string blockItemId, string blockItemText, int offset, int length)
        {
            Argument.AssertNotNull(blocklistName, nameof(blocklistName));
            Argument.AssertNotNull(blockItemId, nameof(blockItemId));
            Argument.AssertNotNull(blockItemText, nameof(blockItemText));

            BlocklistName = blocklistName;
            BlockItemId = blockItemId;
            BlockItemText = blockItemText;
            Offset = offset;
            Length = length;
        }

        /// <summary> Initializes a new instance of TextBlocklistMatchResult. </summary>
        /// <param name="blocklistName"> The name of matched blocklist. </param>
        /// <param name="blockItemId"> The id of matched item. </param>
        /// <param name="blockItemText"> The content of matched item. </param>
        /// <param name="offset"> The character offset of matched text in original input. </param>
        /// <param name="length"> The length of matched text in original input. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal TextBlocklistMatchResult(string blocklistName, string blockItemId, string blockItemText, int offset, int length, Dictionary<string, BinaryData> serializedAdditionalRawData)
        {
            BlocklistName = blocklistName;
            BlockItemId = blockItemId;
            BlockItemText = blockItemText;
            Offset = offset;
            Length = length;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="TextBlocklistMatchResult"/> for deserialization. </summary>
        internal TextBlocklistMatchResult()
        {
        }

        /// <summary> The name of matched blocklist. </summary>
        public string BlocklistName { get; }
        /// <summary> The id of matched item. </summary>
        public string BlockItemId { get; }
        /// <summary> The content of matched item. </summary>
        public string BlockItemText { get; }
        /// <summary> The character offset of matched text in original input. </summary>
        public int Offset { get; }
        /// <summary> The length of matched text in original input. </summary>
        public int Length { get; }
    }
}
