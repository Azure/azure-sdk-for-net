<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="AnalyzeTextAsync(AnalyzeTextOptions,CancellationToken)">
      <example>
This sample shows how to call AnalyzeTextAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

AnalyzeTextOptions options = new AnalyzeTextOptions("<text>");
Response<AnalyzeTextResult> response = await client.AnalyzeTextAsync(options);
]]></code>
This sample shows how to call AnalyzeTextAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

AnalyzeTextOptions options = new AnalyzeTextOptions("<text>")
{
    Categories = { TextCategory.Hate },
    BlocklistNames = { "<blocklistNames>" },
    HaltOnBlocklistHit = true,
    OutputType = AnalyzeTextOutputType.FourSeverityLevels,
};
Response<AnalyzeTextResult> response = await client.AnalyzeTextAsync(options);
]]></code></example>
    </member>
    <member name="AnalyzeText(AnalyzeTextOptions,CancellationToken)">
      <example>
This sample shows how to call AnalyzeText.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

AnalyzeTextOptions options = new AnalyzeTextOptions("<text>");
Response<AnalyzeTextResult> response = client.AnalyzeText(options);
]]></code>
This sample shows how to call AnalyzeText with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

AnalyzeTextOptions options = new AnalyzeTextOptions("<text>")
{
    Categories = { TextCategory.Hate },
    BlocklistNames = { "<blocklistNames>" },
    HaltOnBlocklistHit = true,
    OutputType = AnalyzeTextOutputType.FourSeverityLevels,
};
Response<AnalyzeTextResult> response = client.AnalyzeText(options);
]]></code></example>
    </member>
    <member name="AnalyzeTextAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call AnalyzeTextAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    text = "<text>",
});
Response response = await client.AnalyzeTextAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("category").ToString());
]]></code>
This sample shows how to call AnalyzeTextAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    text = "<text>",
    categories = new object[]
    {
        "Hate"
    },
    blocklistNames = new object[]
    {
        "<blocklistNames>"
    },
    haltOnBlocklistHit = true,
    outputType = "FourSeverityLevels",
});
Response response = await client.AnalyzeTextAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("blocklistsMatch")[0].GetProperty("blocklistName").ToString());
Console.WriteLine(result.GetProperty("blocklistsMatch")[0].GetProperty("blocklistItemId").ToString());
Console.WriteLine(result.GetProperty("blocklistsMatch")[0].GetProperty("blocklistItemText").ToString());
Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("severity").ToString());
]]></code></example>
    </member>
    <member name="AnalyzeText(RequestContent,RequestContext)">
      <example>
This sample shows how to call AnalyzeText and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    text = "<text>",
});
Response response = client.AnalyzeText(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("category").ToString());
]]></code>
This sample shows how to call AnalyzeText with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    text = "<text>",
    categories = new object[]
    {
        "Hate"
    },
    blocklistNames = new object[]
    {
        "<blocklistNames>"
    },
    haltOnBlocklistHit = true,
    outputType = "FourSeverityLevels",
});
Response response = client.AnalyzeText(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("blocklistsMatch")[0].GetProperty("blocklistName").ToString());
Console.WriteLine(result.GetProperty("blocklistsMatch")[0].GetProperty("blocklistItemId").ToString());
Console.WriteLine(result.GetProperty("blocklistsMatch")[0].GetProperty("blocklistItemText").ToString());
Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("severity").ToString());
]]></code></example>
    </member>
    <member name="AnalyzeImageAsync(AnalyzeImageOptions,CancellationToken)">
      <example>
This sample shows how to call AnalyzeImageAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

AnalyzeImageOptions options = new AnalyzeImageOptions(new ContentSafetyImageData());
Response<AnalyzeImageResult> response = await client.AnalyzeImageAsync(options);
]]></code>
This sample shows how to call AnalyzeImageAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

AnalyzeImageOptions options = new AnalyzeImageOptions(new ContentSafetyImageData())
{
    Categories = { ImageCategory.Hate },
    OutputType = AnalyzeImageOutputType.FourSeverityLevels,
};
Response<AnalyzeImageResult> response = await client.AnalyzeImageAsync(options);
]]></code></example>
    </member>
    <member name="AnalyzeImage(AnalyzeImageOptions,CancellationToken)">
      <example>
This sample shows how to call AnalyzeImage.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

AnalyzeImageOptions options = new AnalyzeImageOptions(new ContentSafetyImageData());
Response<AnalyzeImageResult> response = client.AnalyzeImage(options);
]]></code>
This sample shows how to call AnalyzeImage with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

AnalyzeImageOptions options = new AnalyzeImageOptions(new ContentSafetyImageData())
{
    Categories = { ImageCategory.Hate },
    OutputType = AnalyzeImageOutputType.FourSeverityLevels,
};
Response<AnalyzeImageResult> response = client.AnalyzeImage(options);
]]></code></example>
    </member>
    <member name="AnalyzeImageAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call AnalyzeImageAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    image = new object(),
});
Response response = await client.AnalyzeImageAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("category").ToString());
]]></code>
This sample shows how to call AnalyzeImageAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    image = new
    {
        content = new object(),
        blobUrl = "http://localhost:3000",
    },
    categories = new object[]
    {
        "Hate"
    },
    outputType = "FourSeverityLevels",
});
Response response = await client.AnalyzeImageAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("severity").ToString());
]]></code></example>
    </member>
    <member name="AnalyzeImage(RequestContent,RequestContext)">
      <example>
This sample shows how to call AnalyzeImage and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    image = new object(),
});
Response response = client.AnalyzeImage(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("category").ToString());
]]></code>
This sample shows how to call AnalyzeImage with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    image = new
    {
        content = new object(),
        blobUrl = "http://localhost:3000",
    },
    categories = new object[]
    {
        "Hate"
    },
    outputType = "FourSeverityLevels",
});
Response response = client.AnalyzeImage(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("severity").ToString());
]]></code></example>
    </member>
    <member name="DetectTextJailbreakAsync(AnalyzeTextJailbreakOptions,CancellationToken)">
      <example>
This sample shows how to call DetectTextJailbreakAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

AnalyzeTextJailbreakOptions options = new AnalyzeTextJailbreakOptions("<text>");
Response<AnalyzeTextJailbreakResult> response = await client.DetectTextJailbreakAsync(options);
]]></code>
This sample shows how to call DetectTextJailbreakAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

AnalyzeTextJailbreakOptions options = new AnalyzeTextJailbreakOptions("<text>");
Response<AnalyzeTextJailbreakResult> response = await client.DetectTextJailbreakAsync(options);
]]></code></example>
    </member>
    <member name="DetectTextJailbreak(AnalyzeTextJailbreakOptions,CancellationToken)">
      <example>
This sample shows how to call DetectTextJailbreak.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

AnalyzeTextJailbreakOptions options = new AnalyzeTextJailbreakOptions("<text>");
Response<AnalyzeTextJailbreakResult> response = client.DetectTextJailbreak(options);
]]></code>
This sample shows how to call DetectTextJailbreak with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

AnalyzeTextJailbreakOptions options = new AnalyzeTextJailbreakOptions("<text>");
Response<AnalyzeTextJailbreakResult> response = client.DetectTextJailbreak(options);
]]></code></example>
    </member>
    <member name="DetectTextJailbreakAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call DetectTextJailbreakAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    text = "<text>",
});
Response response = await client.DetectTextJailbreakAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jailbreakAnalysis").GetProperty("detected").ToString());
]]></code>
This sample shows how to call DetectTextJailbreakAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    text = "<text>",
});
Response response = await client.DetectTextJailbreakAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jailbreakAnalysis").GetProperty("detected").ToString());
]]></code></example>
    </member>
    <member name="DetectTextJailbreak(RequestContent,RequestContext)">
      <example>
This sample shows how to call DetectTextJailbreak and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    text = "<text>",
});
Response response = client.DetectTextJailbreak(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jailbreakAnalysis").GetProperty("detected").ToString());
]]></code>
This sample shows how to call DetectTextJailbreak with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    text = "<text>",
});
Response response = client.DetectTextJailbreak(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jailbreakAnalysis").GetProperty("detected").ToString());
]]></code></example>
    </member>
    <member name="DetectTextProtectedMaterialAsync(AnalyzeTextProtectedMaterialOptions,CancellationToken)">
      <example>
This sample shows how to call DetectTextProtectedMaterialAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

AnalyzeTextProtectedMaterialOptions options = new AnalyzeTextProtectedMaterialOptions("<text>");
Response<AnalyzeTextProtectedMaterialResult> response = await client.DetectTextProtectedMaterialAsync(options);
]]></code>
This sample shows how to call DetectTextProtectedMaterialAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

AnalyzeTextProtectedMaterialOptions options = new AnalyzeTextProtectedMaterialOptions("<text>");
Response<AnalyzeTextProtectedMaterialResult> response = await client.DetectTextProtectedMaterialAsync(options);
]]></code></example>
    </member>
    <member name="DetectTextProtectedMaterial(AnalyzeTextProtectedMaterialOptions,CancellationToken)">
      <example>
This sample shows how to call DetectTextProtectedMaterial.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

AnalyzeTextProtectedMaterialOptions options = new AnalyzeTextProtectedMaterialOptions("<text>");
Response<AnalyzeTextProtectedMaterialResult> response = client.DetectTextProtectedMaterial(options);
]]></code>
This sample shows how to call DetectTextProtectedMaterial with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

AnalyzeTextProtectedMaterialOptions options = new AnalyzeTextProtectedMaterialOptions("<text>");
Response<AnalyzeTextProtectedMaterialResult> response = client.DetectTextProtectedMaterial(options);
]]></code></example>
    </member>
    <member name="DetectTextProtectedMaterialAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call DetectTextProtectedMaterialAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    text = "<text>",
});
Response response = await client.DetectTextProtectedMaterialAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("protectedMaterialAnalysis").GetProperty("detected").ToString());
]]></code>
This sample shows how to call DetectTextProtectedMaterialAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    text = "<text>",
});
Response response = await client.DetectTextProtectedMaterialAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("protectedMaterialAnalysis").GetProperty("detected").ToString());
]]></code></example>
    </member>
    <member name="DetectTextProtectedMaterial(RequestContent,RequestContext)">
      <example>
This sample shows how to call DetectTextProtectedMaterial and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    text = "<text>",
});
Response response = client.DetectTextProtectedMaterial(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("protectedMaterialAnalysis").GetProperty("detected").ToString());
]]></code>
This sample shows how to call DetectTextProtectedMaterial with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    text = "<text>",
});
Response response = client.DetectTextProtectedMaterial(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("protectedMaterialAnalysis").GetProperty("detected").ToString());
]]></code></example>
    </member>
  </members>
</doc>