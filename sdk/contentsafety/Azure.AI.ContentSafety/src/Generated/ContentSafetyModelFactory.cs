// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.ContentSafety
{
    /// <summary> Model factory for models. </summary>
    public static partial class ContentSafetyModelFactory
    {
        /// <summary> Initializes a new instance of AnalyzeTextResult. </summary>
        /// <param name="blocklistsMatchResults"> The details of blocklist match. </param>
        /// <param name="hateResult"> Analysis result for Hate category. </param>
        /// <param name="selfHarmResult"> Analysis result for SelfHarm category. </param>
        /// <param name="sexualResult"> Analysis result for Sexual category. </param>
        /// <param name="violenceResult"> Analysis result for Violence category. </param>
        /// <returns> A new <see cref="ContentSafety.AnalyzeTextResult"/> instance for mocking. </returns>
        public static AnalyzeTextResult AnalyzeTextResult(IEnumerable<TextBlocklistMatchResult> blocklistsMatchResults = null, TextAnalyzeSeverityResult hateResult = null, TextAnalyzeSeverityResult selfHarmResult = null, TextAnalyzeSeverityResult sexualResult = null, TextAnalyzeSeverityResult violenceResult = null)
        {
            blocklistsMatchResults ??= new List<TextBlocklistMatchResult>();

            return new AnalyzeTextResult(blocklistsMatchResults?.ToList(), hateResult, selfHarmResult, sexualResult, violenceResult);
        }

        /// <summary> Initializes a new instance of TextBlocklistMatchResult. </summary>
        /// <param name="blocklistName"> The name of matched blocklist. </param>
        /// <param name="blockItemId"> The id of matched item. </param>
        /// <param name="blockItemText"> The content of matched item. </param>
        /// <param name="offset"> The character offset of matched text in original input. </param>
        /// <param name="length"> The length of matched text in original input. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="blocklistName"/>, <paramref name="blockItemId"/> or <paramref name="blockItemText"/> is null. </exception>
        /// <returns> A new <see cref="ContentSafety.TextBlocklistMatchResult"/> instance for mocking. </returns>
        public static TextBlocklistMatchResult TextBlocklistMatchResult(string blocklistName = null, string blockItemId = null, string blockItemText = null, int offset = default, int length = default)
        {
            if (blocklistName == null)
            {
                throw new ArgumentNullException(nameof(blocklistName));
            }
            if (blockItemId == null)
            {
                throw new ArgumentNullException(nameof(blockItemId));
            }
            if (blockItemText == null)
            {
                throw new ArgumentNullException(nameof(blockItemText));
            }

            return new TextBlocklistMatchResult(blocklistName, blockItemId, blockItemText, offset, length);
        }

        /// <summary> Initializes a new instance of TextAnalyzeSeverityResult. </summary>
        /// <param name="category"> The text category. </param>
        /// <param name="severity"> The higher the severity of input content, the larger this value is. The values could be: 0,2,4,6. </param>
        /// <returns> A new <see cref="ContentSafety.TextAnalyzeSeverityResult"/> instance for mocking. </returns>
        public static TextAnalyzeSeverityResult TextAnalyzeSeverityResult(TextCategory category = default, int severity = default)
        {
            return new TextAnalyzeSeverityResult(category, severity);
        }

        /// <summary> Initializes a new instance of AnalyzeImageResult. </summary>
        /// <param name="hateResult"> Analysis result for Hate category. </param>
        /// <param name="selfHarmResult"> Analysis result for SelfHarm category. </param>
        /// <param name="sexualResult"> Analysis result for Sexual category. </param>
        /// <param name="violenceResult"> Analysis result for Violence category. </param>
        /// <returns> A new <see cref="ContentSafety.AnalyzeImageResult"/> instance for mocking. </returns>
        public static AnalyzeImageResult AnalyzeImageResult(ImageAnalyzeSeverityResult hateResult = null, ImageAnalyzeSeverityResult selfHarmResult = null, ImageAnalyzeSeverityResult sexualResult = null, ImageAnalyzeSeverityResult violenceResult = null)
        {
            return new AnalyzeImageResult(hateResult, selfHarmResult, sexualResult, violenceResult);
        }

        /// <summary> Initializes a new instance of ImageAnalyzeSeverityResult. </summary>
        /// <param name="category"> The image category. </param>
        /// <param name="severity"> The higher the severity of input content, the larger this value, currently its value could be: 0,2,4,6. </param>
        /// <returns> A new <see cref="ContentSafety.ImageAnalyzeSeverityResult"/> instance for mocking. </returns>
        public static ImageAnalyzeSeverityResult ImageAnalyzeSeverityResult(ImageCategory category = default, int severity = default)
        {
            return new ImageAnalyzeSeverityResult(category, severity);
        }

        /// <summary> Initializes a new instance of TextBlocklist. </summary>
        /// <param name="blocklistName"> Text blocklist name. </param>
        /// <param name="description"> Text blocklist description. </param>
        /// <returns> A new <see cref="ContentSafety.TextBlocklist"/> instance for mocking. </returns>
        public static TextBlocklist TextBlocklist(string blocklistName = null, string description = null)
        {
            return new TextBlocklist(blocklistName, description);
        }

        /// <summary> Initializes a new instance of AddBlockItemsResult. </summary>
        /// <param name="value"> Array of blockItems added. </param>
        /// <returns> A new <see cref="ContentSafety.AddBlockItemsResult"/> instance for mocking. </returns>
        public static AddBlockItemsResult AddBlockItemsResult(IEnumerable<TextBlockItem> value = null)
        {
            value ??= new List<TextBlockItem>();

            return new AddBlockItemsResult(value?.ToList());
        }

        /// <summary> Initializes a new instance of TextBlockItem. </summary>
        /// <param name="blockItemId"> Block Item Id. It will be uuid. </param>
        /// <param name="description"> Block item description. </param>
        /// <param name="text"> Block item content. </param>
        /// <returns> A new <see cref="ContentSafety.TextBlockItem"/> instance for mocking. </returns>
        public static TextBlockItem TextBlockItem(string blockItemId = null, string description = null, string text = null)
        {
            return new TextBlockItem(blockItemId, description, text);
        }
    }
}
