// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Automanage
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ConfigurationProfileHCRPAssignmentsOperations.
    /// </summary>
    public static partial class ConfigurationProfileHCRPAssignmentsOperationsExtensions
    {
            /// <summary>
            /// Creates an association between a ARC machine and Automanage configuration
            /// profile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update configuration profile
            /// assignment.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='machineName'>
            /// The name of the Arc machine.
            /// </param>
            /// <param name='configurationProfileAssignmentName'>
            /// Name of the configuration profile assignment. Only default is supported.
            /// </param>
            public static ConfigurationProfileAssignment CreateOrUpdate(this IConfigurationProfileHCRPAssignmentsOperations operations, ConfigurationProfileAssignment parameters, string resourceGroupName, string machineName, string configurationProfileAssignmentName)
            {
                return operations.CreateOrUpdateAsync(parameters, resourceGroupName, machineName, configurationProfileAssignmentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an association between a ARC machine and Automanage configuration
            /// profile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update configuration profile
            /// assignment.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='machineName'>
            /// The name of the Arc machine.
            /// </param>
            /// <param name='configurationProfileAssignmentName'>
            /// Name of the configuration profile assignment. Only default is supported.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConfigurationProfileAssignment> CreateOrUpdateAsync(this IConfigurationProfileHCRPAssignmentsOperations operations, ConfigurationProfileAssignment parameters, string resourceGroupName, string machineName, string configurationProfileAssignmentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(parameters, resourceGroupName, machineName, configurationProfileAssignmentName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get information about a configuration profile assignment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='machineName'>
            /// The name of the Arc machine.
            /// </param>
            /// <param name='configurationProfileAssignmentName'>
            /// The configuration profile assignment name.
            /// </param>
            public static ConfigurationProfileAssignment Get(this IConfigurationProfileHCRPAssignmentsOperations operations, string resourceGroupName, string machineName, string configurationProfileAssignmentName)
            {
                return operations.GetAsync(resourceGroupName, machineName, configurationProfileAssignmentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get information about a configuration profile assignment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='machineName'>
            /// The name of the Arc machine.
            /// </param>
            /// <param name='configurationProfileAssignmentName'>
            /// The configuration profile assignment name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConfigurationProfileAssignment> GetAsync(this IConfigurationProfileHCRPAssignmentsOperations operations, string resourceGroupName, string machineName, string configurationProfileAssignmentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, machineName, configurationProfileAssignmentName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a configuration profile assignment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='machineName'>
            /// The name of the Arc machine.
            /// </param>
            /// <param name='configurationProfileAssignmentName'>
            /// Name of the configuration profile assignment
            /// </param>
            public static void Delete(this IConfigurationProfileHCRPAssignmentsOperations operations, string resourceGroupName, string machineName, string configurationProfileAssignmentName)
            {
                operations.DeleteAsync(resourceGroupName, machineName, configurationProfileAssignmentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a configuration profile assignment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='machineName'>
            /// The name of the Arc machine.
            /// </param>
            /// <param name='configurationProfileAssignmentName'>
            /// Name of the configuration profile assignment
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IConfigurationProfileHCRPAssignmentsOperations operations, string resourceGroupName, string machineName, string configurationProfileAssignmentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, machineName, configurationProfileAssignmentName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
