// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Automanage
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for BestPracticesOperations.
    /// </summary>
    public static partial class BestPracticesOperationsExtensions
    {
            /// <summary>
            /// Get information about a Automanage best practice
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bestPracticeName'>
            /// The Automanage best practice name.
            /// </param>
            public static BestPractice Get(this IBestPracticesOperations operations, string bestPracticeName)
            {
                return operations.GetAsync(bestPracticeName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get information about a Automanage best practice
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bestPracticeName'>
            /// The Automanage best practice name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BestPractice> GetAsync(this IBestPracticesOperations operations, string bestPracticeName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(bestPracticeName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve a list of Automanage best practices
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IEnumerable<BestPractice> ListByTenant(this IBestPracticesOperations operations)
            {
                return operations.ListByTenantAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve a list of Automanage best practices
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<BestPractice>> ListByTenantAsync(this IBestPracticesOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByTenantWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
