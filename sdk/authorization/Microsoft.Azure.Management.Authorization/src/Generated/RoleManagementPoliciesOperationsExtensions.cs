// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Authorization
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RoleManagementPoliciesOperations.
    /// </summary>
    public static partial class RoleManagementPoliciesOperationsExtensions
    {
            /// <summary>
            /// Get the specified role management policy for a resource scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the role management policy.
            /// </param>
            /// <param name='roleManagementPolicyName'>
            /// The name (guid) of the role management policy to get.
            /// </param>
            public static RoleManagementPolicy Get(this IRoleManagementPoliciesOperations operations, string scope, string roleManagementPolicyName)
            {
                return operations.GetAsync(scope, roleManagementPolicyName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the specified role management policy for a resource scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the role management policy.
            /// </param>
            /// <param name='roleManagementPolicyName'>
            /// The name (guid) of the role management policy to get.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RoleManagementPolicy> GetAsync(this IRoleManagementPoliciesOperations operations, string scope, string roleManagementPolicyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(scope, roleManagementPolicyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a role management policy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the role management policy to upsert.
            /// </param>
            /// <param name='roleManagementPolicyName'>
            /// The name (guid) of the role management policy to upsert.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for the role management policy.
            /// </param>
            public static RoleManagementPolicy Update(this IRoleManagementPoliciesOperations operations, string scope, string roleManagementPolicyName, RoleManagementPolicy parameters)
            {
                return operations.UpdateAsync(scope, roleManagementPolicyName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a role management policy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the role management policy to upsert.
            /// </param>
            /// <param name='roleManagementPolicyName'>
            /// The name (guid) of the role management policy to upsert.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for the role management policy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RoleManagementPolicy> UpdateAsync(this IRoleManagementPoliciesOperations operations, string scope, string roleManagementPolicyName, RoleManagementPolicy parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(scope, roleManagementPolicyName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a role management policy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the role management policy to upsert.
            /// </param>
            /// <param name='roleManagementPolicyName'>
            /// The name (guid) of the role management policy to upsert.
            /// </param>
            public static void Delete(this IRoleManagementPoliciesOperations operations, string scope, string roleManagementPolicyName)
            {
                operations.DeleteAsync(scope, roleManagementPolicyName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a role management policy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the role management policy to upsert.
            /// </param>
            /// <param name='roleManagementPolicyName'>
            /// The name (guid) of the role management policy to upsert.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IRoleManagementPoliciesOperations operations, string scope, string roleManagementPolicyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(scope, roleManagementPolicyName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets role management policies for a resource scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the role management policy.
            /// </param>
            public static IPage<RoleManagementPolicy> ListForScope(this IRoleManagementPoliciesOperations operations, string scope)
            {
                return operations.ListForScopeAsync(scope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets role management policies for a resource scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the role management policy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RoleManagementPolicy>> ListForScopeAsync(this IRoleManagementPoliciesOperations operations, string scope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForScopeWithHttpMessagesAsync(scope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets role management policies for a resource scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<RoleManagementPolicy> ListForScopeNext(this IRoleManagementPoliciesOperations operations, string nextPageLink)
            {
                return operations.ListForScopeNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets role management policies for a resource scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RoleManagementPolicy>> ListForScopeNextAsync(this IRoleManagementPoliciesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForScopeNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
