// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Authorization
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Azure.OData;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RoleEligibilitySchedulesOperations.
    /// </summary>
    public static partial class RoleEligibilitySchedulesOperationsExtensions
    {
            /// <summary>
            /// Get the specified role eligibility schedule for a resource scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the role eligibility schedule.
            /// </param>
            /// <param name='roleEligibilityScheduleName'>
            /// The name (guid) of the role eligibility schedule to get.
            /// </param>
            public static RoleEligibilitySchedule Get(this IRoleEligibilitySchedulesOperations operations, string scope, string roleEligibilityScheduleName)
            {
                return operations.GetAsync(scope, roleEligibilityScheduleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the specified role eligibility schedule for a resource scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the role eligibility schedule.
            /// </param>
            /// <param name='roleEligibilityScheduleName'>
            /// The name (guid) of the role eligibility schedule to get.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RoleEligibilitySchedule> GetAsync(this IRoleEligibilitySchedulesOperations operations, string scope, string roleEligibilityScheduleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(scope, roleEligibilityScheduleName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets role eligibility schedules for a resource scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the role eligibility schedules.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IPage<RoleEligibilitySchedule> ListForScope(this IRoleEligibilitySchedulesOperations operations, string scope, ODataQuery<RoleEligibilityScheduleFilter> odataQuery = default(ODataQuery<RoleEligibilityScheduleFilter>))
            {
                return operations.ListForScopeAsync(scope, odataQuery).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets role eligibility schedules for a resource scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the role eligibility schedules.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RoleEligibilitySchedule>> ListForScopeAsync(this IRoleEligibilitySchedulesOperations operations, string scope, ODataQuery<RoleEligibilityScheduleFilter> odataQuery = default(ODataQuery<RoleEligibilityScheduleFilter>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForScopeWithHttpMessagesAsync(scope, odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets role eligibility schedules for a resource scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<RoleEligibilitySchedule> ListForScopeNext(this IRoleEligibilitySchedulesOperations operations, string nextPageLink)
            {
                return operations.ListForScopeNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets role eligibility schedules for a resource scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RoleEligibilitySchedule>> ListForScopeNextAsync(this IRoleEligibilitySchedulesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForScopeNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
