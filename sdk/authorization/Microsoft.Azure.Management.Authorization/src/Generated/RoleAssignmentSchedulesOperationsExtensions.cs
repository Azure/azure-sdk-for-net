// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Authorization
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Azure.OData;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RoleAssignmentSchedulesOperations.
    /// </summary>
    public static partial class RoleAssignmentSchedulesOperationsExtensions
    {
            /// <summary>
            /// Get the specified role assignment schedule for a resource scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the role assignment schedule.
            /// </param>
            /// <param name='roleAssignmentScheduleName'>
            /// The name (guid) of the role assignment schedule to get.
            /// </param>
            public static RoleAssignmentSchedule Get(this IRoleAssignmentSchedulesOperations operations, string scope, string roleAssignmentScheduleName)
            {
                return operations.GetAsync(scope, roleAssignmentScheduleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the specified role assignment schedule for a resource scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the role assignment schedule.
            /// </param>
            /// <param name='roleAssignmentScheduleName'>
            /// The name (guid) of the role assignment schedule to get.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RoleAssignmentSchedule> GetAsync(this IRoleAssignmentSchedulesOperations operations, string scope, string roleAssignmentScheduleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(scope, roleAssignmentScheduleName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets role assignment schedules for a resource scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the role assignments schedules.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IPage<RoleAssignmentSchedule> ListForScope(this IRoleAssignmentSchedulesOperations operations, string scope, ODataQuery<RoleAssignmentScheduleFilter> odataQuery = default(ODataQuery<RoleAssignmentScheduleFilter>))
            {
                return operations.ListForScopeAsync(scope, odataQuery).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets role assignment schedules for a resource scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the role assignments schedules.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RoleAssignmentSchedule>> ListForScopeAsync(this IRoleAssignmentSchedulesOperations operations, string scope, ODataQuery<RoleAssignmentScheduleFilter> odataQuery = default(ODataQuery<RoleAssignmentScheduleFilter>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForScopeWithHttpMessagesAsync(scope, odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets role assignment schedules for a resource scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<RoleAssignmentSchedule> ListForScopeNext(this IRoleAssignmentSchedulesOperations operations, string nextPageLink)
            {
                return operations.ListForScopeNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets role assignment schedules for a resource scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RoleAssignmentSchedule>> ListForScopeNextAsync(this IRoleAssignmentSchedulesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForScopeNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
