// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Authorization
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for EligibleChildResourcesOperations.
    /// </summary>
    public static partial class EligibleChildResourcesOperationsExtensions
    {
            /// <summary>
            /// Get the child resources of a resource on which user has eligible access
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the role management policy.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation. Use
            /// $filter=resourceType+eq+'Subscription' to filter on only resource of type =
            /// 'Subscription'. Use
            /// $filter=resourceType+eq+'subscription'+or+resourceType+eq+'resourcegroup'
            /// to filter on resource of type = 'Subscription' or 'ResourceGroup'
            /// </param>
            public static IPage<EligibleChildResource> Get(this IEligibleChildResourcesOperations operations, string scope, string filter = default(string))
            {
                return operations.GetAsync(scope, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the child resources of a resource on which user has eligible access
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the role management policy.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation. Use
            /// $filter=resourceType+eq+'Subscription' to filter on only resource of type =
            /// 'Subscription'. Use
            /// $filter=resourceType+eq+'subscription'+or+resourceType+eq+'resourcegroup'
            /// to filter on resource of type = 'Subscription' or 'ResourceGroup'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<EligibleChildResource>> GetAsync(this IEligibleChildResourcesOperations operations, string scope, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(scope, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the child resources of a resource on which user has eligible access
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<EligibleChildResource> GetNext(this IEligibleChildResourcesOperations operations, string nextPageLink)
            {
                return operations.GetNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the child resources of a resource on which user has eligible access
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<EligibleChildResource>> GetNextAsync(this IEligibleChildResourcesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
