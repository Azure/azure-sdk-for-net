// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Authorization
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Azure.OData;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RoleEligibilityScheduleInstancesOperations.
    /// </summary>
    public static partial class RoleEligibilityScheduleInstancesOperationsExtensions
    {
            /// <summary>
            /// Gets role eligibility schedule instances of a role eligibility schedule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the role eligibility schedule.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IPage<RoleEligibilityScheduleInstance> ListForScope(this IRoleEligibilityScheduleInstancesOperations operations, string scope, ODataQuery<RoleEligibilityScheduleInstanceFilter> odataQuery = default(ODataQuery<RoleEligibilityScheduleInstanceFilter>))
            {
                return operations.ListForScopeAsync(scope, odataQuery).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets role eligibility schedule instances of a role eligibility schedule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the role eligibility schedule.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RoleEligibilityScheduleInstance>> ListForScopeAsync(this IRoleEligibilityScheduleInstancesOperations operations, string scope, ODataQuery<RoleEligibilityScheduleInstanceFilter> odataQuery = default(ODataQuery<RoleEligibilityScheduleInstanceFilter>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForScopeWithHttpMessagesAsync(scope, odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the specified role eligibility schedule instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the role eligibility schedules.
            /// </param>
            /// <param name='roleEligibilityScheduleInstanceName'>
            /// The name (hash of schedule name + time) of the role eligibility schedule to
            /// get.
            /// </param>
            public static RoleEligibilityScheduleInstance Get(this IRoleEligibilityScheduleInstancesOperations operations, string scope, string roleEligibilityScheduleInstanceName)
            {
                return operations.GetAsync(scope, roleEligibilityScheduleInstanceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the specified role eligibility schedule instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the role eligibility schedules.
            /// </param>
            /// <param name='roleEligibilityScheduleInstanceName'>
            /// The name (hash of schedule name + time) of the role eligibility schedule to
            /// get.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RoleEligibilityScheduleInstance> GetAsync(this IRoleEligibilityScheduleInstancesOperations operations, string scope, string roleEligibilityScheduleInstanceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(scope, roleEligibilityScheduleInstanceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets role eligibility schedule instances of a role eligibility schedule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<RoleEligibilityScheduleInstance> ListForScopeNext(this IRoleEligibilityScheduleInstancesOperations operations, string nextPageLink)
            {
                return operations.ListForScopeNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets role eligibility schedule instances of a role eligibility schedule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RoleEligibilityScheduleInstance>> ListForScopeNextAsync(this IRoleEligibilityScheduleInstancesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForScopeNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
