// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Authorization.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Role Eligibility schedule request
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class RoleEligibilityScheduleRequest
    {
        /// <summary>
        /// Initializes a new instance of the RoleEligibilityScheduleRequest
        /// class.
        /// </summary>
        public RoleEligibilityScheduleRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RoleEligibilityScheduleRequest
        /// class.
        /// </summary>
        /// <param name="roleDefinitionId">The role definition ID.</param>
        /// <param name="principalId">The principal ID.</param>
        /// <param name="requestType">The type of the role assignment schedule
        /// request. Eg: SelfActivate, AdminAssign etc. Possible values
        /// include: 'AdminAssign', 'AdminRemove', 'AdminUpdate',
        /// 'AdminExtend', 'AdminRenew', 'SelfActivate', 'SelfDeactivate',
        /// 'SelfExtend', 'SelfRenew'</param>
        /// <param name="id">The role eligibility schedule request ID.</param>
        /// <param name="name">The role eligibility schedule request
        /// name.</param>
        /// <param name="type">The role eligibility schedule request
        /// type.</param>
        /// <param name="scope">The role eligibility schedule request
        /// scope.</param>
        /// <param name="principalType">The principal type of the assigned
        /// principal ID. Possible values include: 'User', 'Group',
        /// 'ServicePrincipal', 'ForeignGroup', 'Device'</param>
        /// <param name="status">The status of the role eligibility schedule
        /// request. Possible values include: 'Accepted', 'PendingEvaluation',
        /// 'Granted', 'Denied', 'PendingProvisioning', 'Provisioned',
        /// 'PendingRevocation', 'Revoked', 'Canceled', 'Failed',
        /// 'PendingApprovalProvisioning', 'PendingApproval',
        /// 'FailedAsResourceIsLocked', 'PendingAdminDecision',
        /// 'AdminApproved', 'AdminDenied', 'TimedOut', 'ProvisioningStarted',
        /// 'Invalid', 'PendingScheduleCreation', 'ScheduleCreated',
        /// 'PendingExternalProvisioning'</param>
        /// <param name="approvalId">The approvalId of the role eligibility
        /// schedule request.</param>
        /// <param name="scheduleInfo">Schedule info of the role eligibility
        /// schedule</param>
        /// <param name="targetRoleEligibilityScheduleId">The resultant role
        /// eligibility schedule id or the role eligibility schedule id being
        /// updated</param>
        /// <param name="targetRoleEligibilityScheduleInstanceId">The role
        /// eligibility schedule instance id being updated</param>
        /// <param name="justification">Justification for the role
        /// eligibility</param>
        /// <param name="ticketInfo">Ticket Info of the role
        /// eligibility</param>
        /// <param name="condition">The conditions on the role assignment. This
        /// limits the resources it can be assigned to. e.g.:
        /// @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName]
        /// StringEqualsIgnoreCase 'foo_storage_container'</param>
        /// <param name="conditionVersion">Version of the condition. Currently
        /// accepted value is '2.0'</param>
        /// <param name="createdOn">DateTime when role eligibility schedule
        /// request was created</param>
        /// <param name="requestorId">Id of the user who created this
        /// request</param>
        /// <param name="expandedProperties">Additional properties of
        /// principal, scope and role definition</param>
        public RoleEligibilityScheduleRequest(string roleDefinitionId, string principalId, string requestType, string id = default(string), string name = default(string), string type = default(string), string scope = default(string), string principalType = default(string), string status = default(string), string approvalId = default(string), RoleEligibilityScheduleRequestPropertiesScheduleInfo scheduleInfo = default(RoleEligibilityScheduleRequestPropertiesScheduleInfo), string targetRoleEligibilityScheduleId = default(string), string targetRoleEligibilityScheduleInstanceId = default(string), string justification = default(string), RoleEligibilityScheduleRequestPropertiesTicketInfo ticketInfo = default(RoleEligibilityScheduleRequestPropertiesTicketInfo), string condition = default(string), string conditionVersion = default(string), System.DateTime? createdOn = default(System.DateTime?), string requestorId = default(string), ExpandedProperties expandedProperties = default(ExpandedProperties))
        {
            Id = id;
            Name = name;
            Type = type;
            Scope = scope;
            RoleDefinitionId = roleDefinitionId;
            PrincipalId = principalId;
            PrincipalType = principalType;
            RequestType = requestType;
            Status = status;
            ApprovalId = approvalId;
            ScheduleInfo = scheduleInfo;
            TargetRoleEligibilityScheduleId = targetRoleEligibilityScheduleId;
            TargetRoleEligibilityScheduleInstanceId = targetRoleEligibilityScheduleInstanceId;
            Justification = justification;
            TicketInfo = ticketInfo;
            Condition = condition;
            ConditionVersion = conditionVersion;
            CreatedOn = createdOn;
            RequestorId = requestorId;
            ExpandedProperties = expandedProperties;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the role eligibility schedule request ID.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; private set; }

        /// <summary>
        /// Gets the role eligibility schedule request name.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets the role eligibility schedule request type.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

        /// <summary>
        /// Gets the role eligibility schedule request scope.
        /// </summary>
        [JsonProperty(PropertyName = "properties.scope")]
        public string Scope { get; private set; }

        /// <summary>
        /// Gets or sets the role definition ID.
        /// </summary>
        [JsonProperty(PropertyName = "properties.roleDefinitionId")]
        public string RoleDefinitionId { get; set; }

        /// <summary>
        /// Gets or sets the principal ID.
        /// </summary>
        [JsonProperty(PropertyName = "properties.principalId")]
        public string PrincipalId { get; set; }

        /// <summary>
        /// Gets the principal type of the assigned principal ID. Possible
        /// values include: 'User', 'Group', 'ServicePrincipal',
        /// 'ForeignGroup', 'Device'
        /// </summary>
        [JsonProperty(PropertyName = "properties.principalType")]
        public string PrincipalType { get; private set; }

        /// <summary>
        /// Gets or sets the type of the role assignment schedule request. Eg:
        /// SelfActivate, AdminAssign etc. Possible values include:
        /// 'AdminAssign', 'AdminRemove', 'AdminUpdate', 'AdminExtend',
        /// 'AdminRenew', 'SelfActivate', 'SelfDeactivate', 'SelfExtend',
        /// 'SelfRenew'
        /// </summary>
        [JsonProperty(PropertyName = "properties.requestType")]
        public string RequestType { get; set; }

        /// <summary>
        /// Gets the status of the role eligibility schedule request. Possible
        /// values include: 'Accepted', 'PendingEvaluation', 'Granted',
        /// 'Denied', 'PendingProvisioning', 'Provisioned',
        /// 'PendingRevocation', 'Revoked', 'Canceled', 'Failed',
        /// 'PendingApprovalProvisioning', 'PendingApproval',
        /// 'FailedAsResourceIsLocked', 'PendingAdminDecision',
        /// 'AdminApproved', 'AdminDenied', 'TimedOut', 'ProvisioningStarted',
        /// 'Invalid', 'PendingScheduleCreation', 'ScheduleCreated',
        /// 'PendingExternalProvisioning'
        /// </summary>
        [JsonProperty(PropertyName = "properties.status")]
        public string Status { get; private set; }

        /// <summary>
        /// Gets the approvalId of the role eligibility schedule request.
        /// </summary>
        [JsonProperty(PropertyName = "properties.approvalId")]
        public string ApprovalId { get; private set; }

        /// <summary>
        /// Gets or sets schedule info of the role eligibility schedule
        /// </summary>
        [JsonProperty(PropertyName = "properties.scheduleInfo")]
        public RoleEligibilityScheduleRequestPropertiesScheduleInfo ScheduleInfo { get; set; }

        /// <summary>
        /// Gets or sets the resultant role eligibility schedule id or the role
        /// eligibility schedule id being updated
        /// </summary>
        [JsonProperty(PropertyName = "properties.targetRoleEligibilityScheduleId")]
        public string TargetRoleEligibilityScheduleId { get; set; }

        /// <summary>
        /// Gets or sets the role eligibility schedule instance id being
        /// updated
        /// </summary>
        [JsonProperty(PropertyName = "properties.targetRoleEligibilityScheduleInstanceId")]
        public string TargetRoleEligibilityScheduleInstanceId { get; set; }

        /// <summary>
        /// Gets or sets justification for the role eligibility
        /// </summary>
        [JsonProperty(PropertyName = "properties.justification")]
        public string Justification { get; set; }

        /// <summary>
        /// Gets or sets ticket Info of the role eligibility
        /// </summary>
        [JsonProperty(PropertyName = "properties.ticketInfo")]
        public RoleEligibilityScheduleRequestPropertiesTicketInfo TicketInfo { get; set; }

        /// <summary>
        /// Gets or sets the conditions on the role assignment. This limits the
        /// resources it can be assigned to. e.g.:
        /// @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName]
        /// StringEqualsIgnoreCase 'foo_storage_container'
        /// </summary>
        [JsonProperty(PropertyName = "properties.condition")]
        public string Condition { get; set; }

        /// <summary>
        /// Gets or sets version of the condition. Currently accepted value is
        /// '2.0'
        /// </summary>
        [JsonProperty(PropertyName = "properties.conditionVersion")]
        public string ConditionVersion { get; set; }

        /// <summary>
        /// Gets dateTime when role eligibility schedule request was created
        /// </summary>
        [JsonProperty(PropertyName = "properties.createdOn")]
        public System.DateTime? CreatedOn { get; private set; }

        /// <summary>
        /// Gets id of the user who created this request
        /// </summary>
        [JsonProperty(PropertyName = "properties.requestorId")]
        public string RequestorId { get; private set; }

        /// <summary>
        /// Gets additional properties of principal, scope and role definition
        /// </summary>
        [JsonProperty(PropertyName = "properties.expandedProperties")]
        public ExpandedProperties ExpandedProperties { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (RoleDefinitionId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RoleDefinitionId");
            }
            if (PrincipalId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PrincipalId");
            }
            if (RequestType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RequestType");
            }
        }
    }
}
