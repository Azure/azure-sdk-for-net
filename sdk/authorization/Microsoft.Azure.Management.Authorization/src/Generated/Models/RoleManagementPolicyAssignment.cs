// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Authorization.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Role management policy
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class RoleManagementPolicyAssignment
    {
        /// <summary>
        /// Initializes a new instance of the RoleManagementPolicyAssignment
        /// class.
        /// </summary>
        public RoleManagementPolicyAssignment()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RoleManagementPolicyAssignment
        /// class.
        /// </summary>
        /// <param name="id">The role management policy Id.</param>
        /// <param name="name">The role management policy name.</param>
        /// <param name="type">The role management policy type.</param>
        /// <param name="scope">The role management policy scope.</param>
        /// <param name="roleDefinitionId">The role definition of management
        /// policy assignment.</param>
        /// <param name="policyId">The policy id role management policy
        /// assignment.</param>
        /// <param name="effectiveRules">The readonly computed rule applied to
        /// the policy.</param>
        /// <param name="policyAssignmentProperties">Additional properties of
        /// scope, role definition and policy</param>
        public RoleManagementPolicyAssignment(string id = default(string), string name = default(string), string type = default(string), string scope = default(string), string roleDefinitionId = default(string), string policyId = default(string), IList<RoleManagementPolicyRule> effectiveRules = default(IList<RoleManagementPolicyRule>), PolicyAssignmentProperties policyAssignmentProperties = default(PolicyAssignmentProperties))
        {
            Id = id;
            Name = name;
            Type = type;
            Scope = scope;
            RoleDefinitionId = roleDefinitionId;
            PolicyId = policyId;
            EffectiveRules = effectiveRules;
            PolicyAssignmentProperties = policyAssignmentProperties;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the role management policy Id.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; private set; }

        /// <summary>
        /// Gets the role management policy name.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets the role management policy type.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

        /// <summary>
        /// Gets or sets the role management policy scope.
        /// </summary>
        [JsonProperty(PropertyName = "properties.scope")]
        public string Scope { get; set; }

        /// <summary>
        /// Gets or sets the role definition of management policy assignment.
        /// </summary>
        [JsonProperty(PropertyName = "properties.roleDefinitionId")]
        public string RoleDefinitionId { get; set; }

        /// <summary>
        /// Gets or sets the policy id role management policy assignment.
        /// </summary>
        [JsonProperty(PropertyName = "properties.policyId")]
        public string PolicyId { get; set; }

        /// <summary>
        /// Gets the readonly computed rule applied to the policy.
        /// </summary>
        [JsonProperty(PropertyName = "properties.effectiveRules")]
        public IList<RoleManagementPolicyRule> EffectiveRules { get; private set; }

        /// <summary>
        /// Gets additional properties of scope, role definition and policy
        /// </summary>
        [JsonProperty(PropertyName = "properties.policyAssignmentProperties")]
        public PolicyAssignmentProperties PolicyAssignmentProperties { get; private set; }

    }
}
