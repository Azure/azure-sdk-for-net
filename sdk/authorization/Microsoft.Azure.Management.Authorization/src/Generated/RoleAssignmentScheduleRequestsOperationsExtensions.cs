// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Authorization
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Azure.OData;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RoleAssignmentScheduleRequestsOperations.
    /// </summary>
    public static partial class RoleAssignmentScheduleRequestsOperationsExtensions
    {
            /// <summary>
            /// Creates a role assignment schedule request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the role assignment schedule request to create. The scope can
            /// be any REST resource instance. For example, use
            /// '/subscriptions/{subscription-id}/' for a subscription,
            /// '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for
            /// a resource group, and
            /// '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}'
            /// for a resource.
            /// </param>
            /// <param name='roleAssignmentScheduleRequestName'>
            /// A GUID for the role assignment to create. The name must be unique and
            /// different for each role assignment.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for the role assignment schedule request.
            /// </param>
            public static RoleAssignmentScheduleRequest Create(this IRoleAssignmentScheduleRequestsOperations operations, string scope, string roleAssignmentScheduleRequestName, RoleAssignmentScheduleRequest parameters)
            {
                return operations.CreateAsync(scope, roleAssignmentScheduleRequestName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a role assignment schedule request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the role assignment schedule request to create. The scope can
            /// be any REST resource instance. For example, use
            /// '/subscriptions/{subscription-id}/' for a subscription,
            /// '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for
            /// a resource group, and
            /// '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}'
            /// for a resource.
            /// </param>
            /// <param name='roleAssignmentScheduleRequestName'>
            /// A GUID for the role assignment to create. The name must be unique and
            /// different for each role assignment.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for the role assignment schedule request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RoleAssignmentScheduleRequest> CreateAsync(this IRoleAssignmentScheduleRequestsOperations operations, string scope, string roleAssignmentScheduleRequestName, RoleAssignmentScheduleRequest parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(scope, roleAssignmentScheduleRequestName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the specified role assignment schedule request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the role assignment schedule request.
            /// </param>
            /// <param name='roleAssignmentScheduleRequestName'>
            /// The name (guid) of the role assignment schedule request to get.
            /// </param>
            public static RoleAssignmentScheduleRequest Get(this IRoleAssignmentScheduleRequestsOperations operations, string scope, string roleAssignmentScheduleRequestName)
            {
                return operations.GetAsync(scope, roleAssignmentScheduleRequestName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the specified role assignment schedule request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the role assignment schedule request.
            /// </param>
            /// <param name='roleAssignmentScheduleRequestName'>
            /// The name (guid) of the role assignment schedule request to get.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RoleAssignmentScheduleRequest> GetAsync(this IRoleAssignmentScheduleRequestsOperations operations, string scope, string roleAssignmentScheduleRequestName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(scope, roleAssignmentScheduleRequestName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets role assignment schedule requests for a scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the role assignments schedule requests.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IPage<RoleAssignmentScheduleRequest> ListForScope(this IRoleAssignmentScheduleRequestsOperations operations, string scope, ODataQuery<RoleAssignmentScheduleRequestFilter> odataQuery = default(ODataQuery<RoleAssignmentScheduleRequestFilter>))
            {
                return operations.ListForScopeAsync(scope, odataQuery).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets role assignment schedule requests for a scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the role assignments schedule requests.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RoleAssignmentScheduleRequest>> ListForScopeAsync(this IRoleAssignmentScheduleRequestsOperations operations, string scope, ODataQuery<RoleAssignmentScheduleRequestFilter> odataQuery = default(ODataQuery<RoleAssignmentScheduleRequestFilter>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForScopeWithHttpMessagesAsync(scope, odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancels a pending role assignment schedule request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the role assignment request to cancel.
            /// </param>
            /// <param name='roleAssignmentScheduleRequestName'>
            /// The name of the role assignment request to cancel.
            /// </param>
            public static void Cancel(this IRoleAssignmentScheduleRequestsOperations operations, string scope, string roleAssignmentScheduleRequestName)
            {
                operations.CancelAsync(scope, roleAssignmentScheduleRequestName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels a pending role assignment schedule request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the role assignment request to cancel.
            /// </param>
            /// <param name='roleAssignmentScheduleRequestName'>
            /// The name of the role assignment request to cancel.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CancelAsync(this IRoleAssignmentScheduleRequestsOperations operations, string scope, string roleAssignmentScheduleRequestName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CancelWithHttpMessagesAsync(scope, roleAssignmentScheduleRequestName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Validates a new role assignment schedule request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the role assignment request to validate.
            /// </param>
            /// <param name='roleAssignmentScheduleRequestName'>
            /// The name of the role assignment request to validate.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for the role assignment schedule request.
            /// </param>
            public static RoleAssignmentScheduleRequest Validate(this IRoleAssignmentScheduleRequestsOperations operations, string scope, string roleAssignmentScheduleRequestName, RoleAssignmentScheduleRequest parameters)
            {
                return operations.ValidateAsync(scope, roleAssignmentScheduleRequestName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Validates a new role assignment schedule request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the role assignment request to validate.
            /// </param>
            /// <param name='roleAssignmentScheduleRequestName'>
            /// The name of the role assignment request to validate.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for the role assignment schedule request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RoleAssignmentScheduleRequest> ValidateAsync(this IRoleAssignmentScheduleRequestsOperations operations, string scope, string roleAssignmentScheduleRequestName, RoleAssignmentScheduleRequest parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ValidateWithHttpMessagesAsync(scope, roleAssignmentScheduleRequestName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets role assignment schedule requests for a scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<RoleAssignmentScheduleRequest> ListForScopeNext(this IRoleAssignmentScheduleRequestsOperations operations, string nextPageLink)
            {
                return operations.ListForScopeNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets role assignment schedule requests for a scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RoleAssignmentScheduleRequest>> ListForScopeNextAsync(this IRoleAssignmentScheduleRequestsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForScopeNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
