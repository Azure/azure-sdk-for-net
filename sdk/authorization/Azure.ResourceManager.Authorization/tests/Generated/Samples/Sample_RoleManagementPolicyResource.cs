// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Authorization.Models;

namespace Azure.ResourceManager.Authorization
{
    public partial class Sample_RoleManagementPolicyResource
    {
        // GetRoleManagementPolicyByName
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetRoleManagementPolicyByName()
        {
            // Generated from example definition: specification/authorization/resource-manager/Microsoft.Authorization/stable/2020-10-01/examples/GetRoleManagementPolicyByName.json
            // this example is just showing the usage of "RoleManagementPolicies_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this RoleManagementPolicyResource created on azure
            // for more information of creating RoleManagementPolicyResource, please refer to the document of RoleManagementPolicyResource
            string scope = "providers/Microsoft.Subscription/subscriptions/129ff972-28f8-46b8-a726-e497be039368";
            string roleManagementPolicyName = "570c3619-7688-4b34-b290-2b8bb3ccab2a";
            ResourceIdentifier roleManagementPolicyResourceId = RoleManagementPolicyResource.CreateResourceIdentifier(scope, roleManagementPolicyName);
            RoleManagementPolicyResource roleManagementPolicy = client.GetRoleManagementPolicyResource(roleManagementPolicyResourceId);

            // invoke the operation
            RoleManagementPolicyResource result = await roleManagementPolicy.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            RoleManagementPolicyData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // PatchPartialRoleManagementPolicy
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_PatchPartialRoleManagementPolicy()
        {
            // Generated from example definition: specification/authorization/resource-manager/Microsoft.Authorization/stable/2020-10-01/examples/PatchPartialRoleManagementPolicy.json
            // this example is just showing the usage of "RoleManagementPolicies_Update" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this RoleManagementPolicyResource created on azure
            // for more information of creating RoleManagementPolicyResource, please refer to the document of RoleManagementPolicyResource
            string scope = "providers/Microsoft.Subscription/subscriptions/129ff972-28f8-46b8-a726-e497be039368";
            string roleManagementPolicyName = "570c3619-7688-4b34-b290-2b8bb3ccab2a";
            ResourceIdentifier roleManagementPolicyResourceId = RoleManagementPolicyResource.CreateResourceIdentifier(scope, roleManagementPolicyName);
            RoleManagementPolicyResource roleManagementPolicy = client.GetRoleManagementPolicyResource(roleManagementPolicyResourceId);

            // invoke the operation
            RoleManagementPolicyData data = new RoleManagementPolicyData()
            {
                Rules =
{
new RoleManagementPolicyRule()
{
Id = "Expiration_Admin_Eligibility",
RuleType = RoleManagementPolicyRuleType.RoleManagementPolicyExpirationRule,
Target = new RoleManagementPolicyRuleTarget()
{
Caller = "Admin",
Operations =
{
"All"
},
Level = RoleManagementAssignmentLevel.Eligibility,
TargetObjects =
{
},
InheritableSettings =
{
},
EnforcedSettings =
{
},
},
},new RoleManagementPolicyRule()
{
Id = "Notification_Admin_Admin_Eligibility",
RuleType = RoleManagementPolicyRuleType.RoleManagementPolicyNotificationRule,
Target = new RoleManagementPolicyRuleTarget()
{
Caller = "Admin",
Operations =
{
"All"
},
Level = RoleManagementAssignmentLevel.Eligibility,
TargetObjects =
{
},
InheritableSettings =
{
},
EnforcedSettings =
{
},
},
}
},
            };
            RoleManagementPolicyResource result = await roleManagementPolicy.UpdateAsync(data);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            RoleManagementPolicyData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // PatchRoleManagementPolicy
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_PatchRoleManagementPolicy()
        {
            // Generated from example definition: specification/authorization/resource-manager/Microsoft.Authorization/stable/2020-10-01/examples/PatchRoleManagementPolicy.json
            // this example is just showing the usage of "RoleManagementPolicies_Update" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this RoleManagementPolicyResource created on azure
            // for more information of creating RoleManagementPolicyResource, please refer to the document of RoleManagementPolicyResource
            string scope = "providers/Microsoft.Subscription/subscriptions/129ff972-28f8-46b8-a726-e497be039368";
            string roleManagementPolicyName = "570c3619-7688-4b34-b290-2b8bb3ccab2a";
            ResourceIdentifier roleManagementPolicyResourceId = RoleManagementPolicyResource.CreateResourceIdentifier(scope, roleManagementPolicyName);
            RoleManagementPolicyResource roleManagementPolicy = client.GetRoleManagementPolicyResource(roleManagementPolicyResourceId);

            // invoke the operation
            RoleManagementPolicyData data = new RoleManagementPolicyData()
            {
                Rules =
{
new RoleManagementPolicyRule()
{
Id = "Expiration_Admin_Eligibility",
RuleType = RoleManagementPolicyRuleType.RoleManagementPolicyExpirationRule,
Target = new RoleManagementPolicyRuleTarget()
{
Caller = "Admin",
Operations =
{
"All"
},
Level = RoleManagementAssignmentLevel.Eligibility,
TargetObjects =
{
},
InheritableSettings =
{
},
EnforcedSettings =
{
},
},
},new RoleManagementPolicyRule()
{
Id = "Notification_Admin_Admin_Eligibility",
RuleType = RoleManagementPolicyRuleType.RoleManagementPolicyNotificationRule,
Target = new RoleManagementPolicyRuleTarget()
{
Caller = "Admin",
Operations =
{
"All"
},
Level = RoleManagementAssignmentLevel.Eligibility,
TargetObjects =
{
},
InheritableSettings =
{
},
EnforcedSettings =
{
},
},
},new RoleManagementPolicyRule()
{
Id = "Notification_Requestor_Admin_Eligibility",
RuleType = RoleManagementPolicyRuleType.RoleManagementPolicyNotificationRule,
Target = new RoleManagementPolicyRuleTarget()
{
Caller = "Admin",
Operations =
{
"All"
},
Level = RoleManagementAssignmentLevel.Eligibility,
TargetObjects =
{
},
InheritableSettings =
{
},
EnforcedSettings =
{
},
},
},new RoleManagementPolicyRule()
{
Id = "Notification_Approver_Admin_Eligibility",
RuleType = RoleManagementPolicyRuleType.RoleManagementPolicyNotificationRule,
Target = new RoleManagementPolicyRuleTarget()
{
Caller = "Admin",
Operations =
{
"All"
},
Level = RoleManagementAssignmentLevel.Eligibility,
TargetObjects =
{
},
InheritableSettings =
{
},
EnforcedSettings =
{
},
},
},new RoleManagementPolicyRule()
{
Id = "Enablement_Admin_Eligibility",
RuleType = RoleManagementPolicyRuleType.RoleManagementPolicyEnablementRule,
Target = new RoleManagementPolicyRuleTarget()
{
Caller = "Admin",
Operations =
{
"All"
},
Level = RoleManagementAssignmentLevel.Eligibility,
TargetObjects =
{
},
InheritableSettings =
{
},
EnforcedSettings =
{
},
},
},new RoleManagementPolicyRule()
{
Id = "Expiration_Admin_Assignment",
RuleType = RoleManagementPolicyRuleType.RoleManagementPolicyExpirationRule,
Target = new RoleManagementPolicyRuleTarget()
{
Caller = "Admin",
Operations =
{
"All"
},
Level = RoleManagementAssignmentLevel.Assignment,
TargetObjects =
{
},
InheritableSettings =
{
},
EnforcedSettings =
{
},
},
},new RoleManagementPolicyRule()
{
Id = "Enablement_Admin_Assignment",
RuleType = RoleManagementPolicyRuleType.RoleManagementPolicyEnablementRule,
Target = new RoleManagementPolicyRuleTarget()
{
Caller = "Admin",
Operations =
{
"All"
},
Level = RoleManagementAssignmentLevel.Assignment,
TargetObjects =
{
},
InheritableSettings =
{
},
EnforcedSettings =
{
},
},
},new RoleManagementPolicyRule()
{
Id = "Notification_Admin_Admin_Assignment",
RuleType = RoleManagementPolicyRuleType.RoleManagementPolicyNotificationRule,
Target = new RoleManagementPolicyRuleTarget()
{
Caller = "Admin",
Operations =
{
"All"
},
Level = RoleManagementAssignmentLevel.Assignment,
TargetObjects =
{
},
InheritableSettings =
{
},
EnforcedSettings =
{
},
},
},new RoleManagementPolicyRule()
{
Id = "Notification_Requestor_Admin_Assignment",
RuleType = RoleManagementPolicyRuleType.RoleManagementPolicyNotificationRule,
Target = new RoleManagementPolicyRuleTarget()
{
Caller = "Admin",
Operations =
{
"All"
},
Level = RoleManagementAssignmentLevel.Assignment,
TargetObjects =
{
},
InheritableSettings =
{
},
EnforcedSettings =
{
},
},
},new RoleManagementPolicyRule()
{
Id = "Notification_Approver_Admin_Assignment",
RuleType = RoleManagementPolicyRuleType.RoleManagementPolicyNotificationRule,
Target = new RoleManagementPolicyRuleTarget()
{
Caller = "Admin",
Operations =
{
"All"
},
Level = RoleManagementAssignmentLevel.Assignment,
TargetObjects =
{
},
InheritableSettings =
{
},
EnforcedSettings =
{
},
},
},new RoleManagementPolicyRule()
{
Id = "Expiration_EndUser_Assignment",
RuleType = RoleManagementPolicyRuleType.RoleManagementPolicyExpirationRule,
Target = new RoleManagementPolicyRuleTarget()
{
Caller = "EndUser",
Operations =
{
"All"
},
Level = RoleManagementAssignmentLevel.Assignment,
TargetObjects =
{
},
InheritableSettings =
{
},
EnforcedSettings =
{
},
},
},new RoleManagementPolicyRule()
{
Id = "Enablement_EndUser_Assignment",
RuleType = RoleManagementPolicyRuleType.RoleManagementPolicyEnablementRule,
Target = new RoleManagementPolicyRuleTarget()
{
Caller = "EndUser",
Operations =
{
"All"
},
Level = RoleManagementAssignmentLevel.Assignment,
TargetObjects =
{
},
InheritableSettings =
{
},
EnforcedSettings =
{
},
},
},new RoleManagementPolicyRule()
{
Id = "Approval_EndUser_Assignment",
RuleType = RoleManagementPolicyRuleType.RoleManagementPolicyApprovalRule,
Target = new RoleManagementPolicyRuleTarget()
{
Caller = "EndUser",
Operations =
{
"All"
},
Level = RoleManagementAssignmentLevel.Assignment,
TargetObjects =
{
},
InheritableSettings =
{
},
EnforcedSettings =
{
},
},
},new RoleManagementPolicyRule()
{
Id = "AuthenticationContext_EndUser_Assignment",
RuleType = RoleManagementPolicyRuleType.RoleManagementPolicyAuthenticationContextRule,
Target = new RoleManagementPolicyRuleTarget()
{
Caller = "EndUser",
Operations =
{
"All"
},
Level = RoleManagementAssignmentLevel.Assignment,
TargetObjects =
{
},
InheritableSettings =
{
},
EnforcedSettings =
{
},
},
},new RoleManagementPolicyRule()
{
Id = "Notification_Admin_EndUser_Assignment",
RuleType = RoleManagementPolicyRuleType.RoleManagementPolicyNotificationRule,
Target = new RoleManagementPolicyRuleTarget()
{
Caller = "EndUser",
Operations =
{
"All"
},
Level = RoleManagementAssignmentLevel.Assignment,
TargetObjects =
{
},
InheritableSettings =
{
},
EnforcedSettings =
{
},
},
},new RoleManagementPolicyRule()
{
Id = "Notification_Requestor_EndUser_Assignment",
RuleType = RoleManagementPolicyRuleType.RoleManagementPolicyNotificationRule,
Target = new RoleManagementPolicyRuleTarget()
{
Caller = "EndUser",
Operations =
{
"All"
},
Level = RoleManagementAssignmentLevel.Assignment,
TargetObjects =
{
},
InheritableSettings =
{
},
EnforcedSettings =
{
},
},
},new RoleManagementPolicyRule()
{
Id = "Notification_Approver_EndUser_Assignment",
RuleType = RoleManagementPolicyRuleType.RoleManagementPolicyNotificationRule,
Target = new RoleManagementPolicyRuleTarget()
{
Caller = "EndUser",
Operations =
{
"All"
},
Level = RoleManagementAssignmentLevel.Assignment,
TargetObjects =
{
},
InheritableSettings =
{
},
EnforcedSettings =
{
},
},
}
},
            };
            RoleManagementPolicyResource result = await roleManagementPolicy.UpdateAsync(data);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            RoleManagementPolicyData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
