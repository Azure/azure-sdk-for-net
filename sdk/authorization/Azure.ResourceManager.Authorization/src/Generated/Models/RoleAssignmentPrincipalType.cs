// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Authorization.Models
{
    /// <summary> The principal type of the assigned principal ID. </summary>
    public readonly partial struct RoleAssignmentPrincipalType : IEquatable<RoleAssignmentPrincipalType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RoleAssignmentPrincipalType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RoleAssignmentPrincipalType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UserValue = "User";
        private const string GroupValue = "Group";
        private const string ServicePrincipalValue = "ServicePrincipal";
        private const string ForeignGroupValue = "ForeignGroup";
        private const string DeviceValue = "Device";

        /// <summary> User. </summary>
        public static RoleAssignmentPrincipalType User { get; } = new RoleAssignmentPrincipalType(UserValue);
        /// <summary> Group. </summary>
        public static RoleAssignmentPrincipalType Group { get; } = new RoleAssignmentPrincipalType(GroupValue);
        /// <summary> ServicePrincipal. </summary>
        public static RoleAssignmentPrincipalType ServicePrincipal { get; } = new RoleAssignmentPrincipalType(ServicePrincipalValue);
        /// <summary> ForeignGroup. </summary>
        public static RoleAssignmentPrincipalType ForeignGroup { get; } = new RoleAssignmentPrincipalType(ForeignGroupValue);
        /// <summary> Device. </summary>
        public static RoleAssignmentPrincipalType Device { get; } = new RoleAssignmentPrincipalType(DeviceValue);
        /// <summary> Determines if two <see cref="RoleAssignmentPrincipalType"/> values are the same. </summary>
        public static bool operator ==(RoleAssignmentPrincipalType left, RoleAssignmentPrincipalType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RoleAssignmentPrincipalType"/> values are not the same. </summary>
        public static bool operator !=(RoleAssignmentPrincipalType left, RoleAssignmentPrincipalType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="RoleAssignmentPrincipalType"/>. </summary>
        public static implicit operator RoleAssignmentPrincipalType(string value) => new RoleAssignmentPrincipalType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RoleAssignmentPrincipalType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RoleAssignmentPrincipalType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
