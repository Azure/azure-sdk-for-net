// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Authorization.Models
{
    public partial class RoleManagementPolicyNotificationRule : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(NotificationType))
            {
                writer.WritePropertyName("notificationType");
                writer.WriteStringValue(NotificationType.Value.ToString());
            }
            if (Optional.IsDefined(NotificationLevel))
            {
                writer.WritePropertyName("notificationLevel");
                writer.WriteStringValue(NotificationLevel.Value.ToString());
            }
            if (Optional.IsDefined(RecipientType))
            {
                writer.WritePropertyName("recipientType");
                writer.WriteStringValue(RecipientType.Value.ToString());
            }
            if (Optional.IsCollectionDefined(NotificationRecipients))
            {
                writer.WritePropertyName("notificationRecipients");
                writer.WriteStartArray();
                foreach (var item in NotificationRecipients)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(IsDefaultRecipientsEnabled))
            {
                writer.WritePropertyName("isDefaultRecipientsEnabled");
                writer.WriteBooleanValue(IsDefaultRecipientsEnabled.Value);
            }
            if (Optional.IsDefined(Id))
            {
                writer.WritePropertyName("id");
                writer.WriteStringValue(Id);
            }
            writer.WritePropertyName("ruleType");
            writer.WriteStringValue(RuleType.ToString());
            if (Optional.IsDefined(Target))
            {
                writer.WritePropertyName("target");
                writer.WriteObjectValue(Target);
            }
            writer.WriteEndObject();
        }

        internal static RoleManagementPolicyNotificationRule DeserializeRoleManagementPolicyNotificationRule(JsonElement element)
        {
            Optional<NotificationDeliveryMechanism> notificationType = default;
            Optional<NotificationLevel> notificationLevel = default;
            Optional<RecipientType> recipientType = default;
            Optional<IList<string>> notificationRecipients = default;
            Optional<bool> isDefaultRecipientsEnabled = default;
            Optional<ResourceIdentifier> id = default;
            RoleManagementPolicyRuleType ruleType = default;
            Optional<RoleManagementPolicyRuleTarget> target = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("notificationType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    notificationType = new NotificationDeliveryMechanism(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("notificationLevel"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    notificationLevel = new NotificationLevel(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("recipientType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    recipientType = new RecipientType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("notificationRecipients"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    notificationRecipients = array;
                    continue;
                }
                if (property.NameEquals("isDefaultRecipientsEnabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isDefaultRecipientsEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ruleType"))
                {
                    ruleType = new RoleManagementPolicyRuleType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("target"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    target = RoleManagementPolicyRuleTarget.DeserializeRoleManagementPolicyRuleTarget(property.Value);
                    continue;
                }
            }
            return new RoleManagementPolicyNotificationRule(id.Value, ruleType, target.Value, Optional.ToNullable(notificationType), Optional.ToNullable(notificationLevel), Optional.ToNullable(recipientType), Optional.ToList(notificationRecipients), Optional.ToNullable(isDefaultRecipientsEnabled));
        }
    }
}
