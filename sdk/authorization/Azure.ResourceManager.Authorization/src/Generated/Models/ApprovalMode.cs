// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Authorization.Models
{
    /// <summary> The type of rule. </summary>
    public readonly partial struct ApprovalMode : IEquatable<ApprovalMode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ApprovalMode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ApprovalMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SingleStageValue = "SingleStage";
        private const string SerialValue = "Serial";
        private const string ParallelValue = "Parallel";
        private const string NoApprovalValue = "NoApproval";

        /// <summary> SingleStage. </summary>
        public static ApprovalMode SingleStage { get; } = new ApprovalMode(SingleStageValue);
        /// <summary> Serial. </summary>
        public static ApprovalMode Serial { get; } = new ApprovalMode(SerialValue);
        /// <summary> Parallel. </summary>
        public static ApprovalMode Parallel { get; } = new ApprovalMode(ParallelValue);
        /// <summary> NoApproval. </summary>
        public static ApprovalMode NoApproval { get; } = new ApprovalMode(NoApprovalValue);
        /// <summary> Determines if two <see cref="ApprovalMode"/> values are the same. </summary>
        public static bool operator ==(ApprovalMode left, ApprovalMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ApprovalMode"/> values are not the same. </summary>
        public static bool operator !=(ApprovalMode left, ApprovalMode right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ApprovalMode"/>. </summary>
        public static implicit operator ApprovalMode(string value) => new ApprovalMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ApprovalMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ApprovalMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
