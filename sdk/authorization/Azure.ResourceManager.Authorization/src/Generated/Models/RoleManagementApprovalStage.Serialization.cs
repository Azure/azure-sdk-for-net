// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Authorization.Models
{
    public partial class RoleManagementApprovalStage : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(ApprovalStageTimeOutInDays))
            {
                writer.WritePropertyName("approvalStageTimeOutInDays"u8);
                writer.WriteNumberValue(ApprovalStageTimeOutInDays.Value);
            }
            if (Core.Optional.IsDefined(IsApproverJustificationRequired))
            {
                writer.WritePropertyName("isApproverJustificationRequired"u8);
                writer.WriteBooleanValue(IsApproverJustificationRequired.Value);
            }
            if (Core.Optional.IsDefined(EscalationTimeInMinutes))
            {
                writer.WritePropertyName("escalationTimeInMinutes"u8);
                writer.WriteNumberValue(EscalationTimeInMinutes.Value);
            }
            if (Core.Optional.IsCollectionDefined(PrimaryApprovers))
            {
                writer.WritePropertyName("primaryApprovers"u8);
                writer.WriteStartArray();
                foreach (var item in PrimaryApprovers)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsDefined(IsEscalationEnabled))
            {
                writer.WritePropertyName("isEscalationEnabled"u8);
                writer.WriteBooleanValue(IsEscalationEnabled.Value);
            }
            if (Core.Optional.IsCollectionDefined(EscalationApprovers))
            {
                writer.WritePropertyName("escalationApprovers"u8);
                writer.WriteStartArray();
                foreach (var item in EscalationApprovers)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static RoleManagementApprovalStage DeserializeRoleManagementApprovalStage(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<int> approvalStageTimeOutInDays = default;
            Core.Optional<bool> isApproverJustificationRequired = default;
            Core.Optional<int> escalationTimeInMinutes = default;
            Core.Optional<IList<RoleManagementUserInfo>> primaryApprovers = default;
            Core.Optional<bool> isEscalationEnabled = default;
            Core.Optional<IList<RoleManagementUserInfo>> escalationApprovers = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("approvalStageTimeOutInDays"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    approvalStageTimeOutInDays = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("isApproverJustificationRequired"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isApproverJustificationRequired = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("escalationTimeInMinutes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    escalationTimeInMinutes = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("primaryApprovers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<RoleManagementUserInfo> array = new List<RoleManagementUserInfo>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(RoleManagementUserInfo.DeserializeRoleManagementUserInfo(item));
                    }
                    primaryApprovers = array;
                    continue;
                }
                if (property.NameEquals("isEscalationEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isEscalationEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("escalationApprovers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<RoleManagementUserInfo> array = new List<RoleManagementUserInfo>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(RoleManagementUserInfo.DeserializeRoleManagementUserInfo(item));
                    }
                    escalationApprovers = array;
                    continue;
                }
            }
            return new RoleManagementApprovalStage(Core.Optional.ToNullable(approvalStageTimeOutInDays), Core.Optional.ToNullable(isApproverJustificationRequired), Core.Optional.ToNullable(escalationTimeInMinutes), Core.Optional.ToList(primaryApprovers), Core.Optional.ToNullable(isEscalationEnabled), Core.Optional.ToList(escalationApprovers));
        }
    }
}
