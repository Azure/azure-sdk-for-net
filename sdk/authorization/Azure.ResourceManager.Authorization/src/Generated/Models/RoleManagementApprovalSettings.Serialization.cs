// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Authorization.Models
{
    public partial class RoleManagementApprovalSettings : IUtf8JsonSerializable, IJsonModel<RoleManagementApprovalSettings>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<RoleManagementApprovalSettings>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<RoleManagementApprovalSettings>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RoleManagementApprovalSettings>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(RoleManagementApprovalSettings)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(IsApprovalRequired))
            {
                writer.WritePropertyName("isApprovalRequired"u8);
                writer.WriteBooleanValue(IsApprovalRequired.Value);
            }
            if (Optional.IsDefined(IsApprovalRequiredForExtension))
            {
                writer.WritePropertyName("isApprovalRequiredForExtension"u8);
                writer.WriteBooleanValue(IsApprovalRequiredForExtension.Value);
            }
            if (Optional.IsDefined(IsRequestorJustificationRequired))
            {
                writer.WritePropertyName("isRequestorJustificationRequired"u8);
                writer.WriteBooleanValue(IsRequestorJustificationRequired.Value);
            }
            if (Optional.IsDefined(ApprovalMode))
            {
                writer.WritePropertyName("approvalMode"u8);
                writer.WriteStringValue(ApprovalMode.Value.ToString());
            }
            if (Optional.IsCollectionDefined(ApprovalStages))
            {
                writer.WritePropertyName("approvalStages"u8);
                writer.WriteStartArray();
                foreach (var item in ApprovalStages)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        RoleManagementApprovalSettings IJsonModel<RoleManagementApprovalSettings>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RoleManagementApprovalSettings>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(RoleManagementApprovalSettings)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeRoleManagementApprovalSettings(document.RootElement, options);
        }

        internal static RoleManagementApprovalSettings DeserializeRoleManagementApprovalSettings(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<bool> isApprovalRequired = default;
            Optional<bool> isApprovalRequiredForExtension = default;
            Optional<bool> isRequestorJustificationRequired = default;
            Optional<RoleManagementApprovalMode> approvalMode = default;
            Optional<IList<RoleManagementApprovalStage>> approvalStages = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("isApprovalRequired"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isApprovalRequired = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isApprovalRequiredForExtension"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isApprovalRequiredForExtension = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isRequestorJustificationRequired"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isRequestorJustificationRequired = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("approvalMode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    approvalMode = new RoleManagementApprovalMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("approvalStages"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<RoleManagementApprovalStage> array = new List<RoleManagementApprovalStage>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(RoleManagementApprovalStage.DeserializeRoleManagementApprovalStage(item));
                    }
                    approvalStages = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new RoleManagementApprovalSettings(Optional.ToNullable(isApprovalRequired), Optional.ToNullable(isApprovalRequiredForExtension), Optional.ToNullable(isRequestorJustificationRequired), Optional.ToNullable(approvalMode), Optional.ToList(approvalStages), serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<RoleManagementApprovalSettings>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RoleManagementApprovalSettings>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(RoleManagementApprovalSettings)} does not support '{options.Format}' format.");
            }
        }

        RoleManagementApprovalSettings IPersistableModel<RoleManagementApprovalSettings>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RoleManagementApprovalSettings>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeRoleManagementApprovalSettings(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(RoleManagementApprovalSettings)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<RoleManagementApprovalSettings>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
