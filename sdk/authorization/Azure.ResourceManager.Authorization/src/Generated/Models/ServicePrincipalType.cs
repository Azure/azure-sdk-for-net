// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Authorization.Models
{
    /// <summary> The principal type of the assigned principal ID. </summary>
    public readonly partial struct ServicePrincipalType : IEquatable<ServicePrincipalType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ServicePrincipalType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ServicePrincipalType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UserValue = "User";
        private const string GroupValue = "Group";
        private const string ServicePrincipalValue = "ServicePrincipal";
        private const string ForeignGroupValue = "ForeignGroup";
        private const string DeviceValue = "Device";

        /// <summary> User. </summary>
        public static ServicePrincipalType User { get; } = new ServicePrincipalType(UserValue);
        /// <summary> Group. </summary>
        public static ServicePrincipalType Group { get; } = new ServicePrincipalType(GroupValue);
        /// <summary> ServicePrincipal. </summary>
        public static ServicePrincipalType ServicePrincipal { get; } = new ServicePrincipalType(ServicePrincipalValue);
        /// <summary> ForeignGroup. </summary>
        public static ServicePrincipalType ForeignGroup { get; } = new ServicePrincipalType(ForeignGroupValue);
        /// <summary> Device. </summary>
        public static ServicePrincipalType Device { get; } = new ServicePrincipalType(DeviceValue);
        /// <summary> Determines if two <see cref="ServicePrincipalType"/> values are the same. </summary>
        public static bool operator ==(ServicePrincipalType left, ServicePrincipalType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ServicePrincipalType"/> values are not the same. </summary>
        public static bool operator !=(ServicePrincipalType left, ServicePrincipalType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ServicePrincipalType"/>. </summary>
        public static implicit operator ServicePrincipalType(string value) => new ServicePrincipalType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ServicePrincipalType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ServicePrincipalType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
