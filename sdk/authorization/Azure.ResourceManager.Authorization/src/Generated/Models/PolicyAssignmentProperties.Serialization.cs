// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Authorization.Models
{
    public partial class PolicyAssignmentProperties
    {
        internal static PolicyAssignmentProperties DeserializePolicyAssignmentProperties(JsonElement element)
        {
            Optional<PolicyAssignmentPropertiesScope> scope = default;
            Optional<PolicyAssignmentPropertiesRoleDefinition> roleDefinition = default;
            Optional<PolicyAssignmentPropertiesPolicy> policy = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("scope"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    scope = PolicyAssignmentPropertiesScope.DeserializePolicyAssignmentPropertiesScope(property.Value);
                    continue;
                }
                if (property.NameEquals("roleDefinition"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    roleDefinition = PolicyAssignmentPropertiesRoleDefinition.DeserializePolicyAssignmentPropertiesRoleDefinition(property.Value);
                    continue;
                }
                if (property.NameEquals("policy"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    policy = PolicyAssignmentPropertiesPolicy.DeserializePolicyAssignmentPropertiesPolicy(property.Value);
                    continue;
                }
            }
            return new PolicyAssignmentProperties(scope.Value, roleDefinition.Value, policy.Value);
        }
    }
}
