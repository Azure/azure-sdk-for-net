// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Azure.ResourceManager.Authorization.Models
{
    /// <summary> The RoleManagementExpandedProperties. </summary>
    public partial class RoleManagementExpandedProperties
    {
        /// <summary> Initializes a new instance of <see cref="RoleManagementExpandedProperties"/>. </summary>
        internal RoleManagementExpandedProperties()
        {
        }

        /// <summary> Initializes a new instance of <see cref="RoleManagementExpandedProperties"/>. </summary>
        /// <param name="principalId"> Id of the principal. </param>
        /// <param name="principalDisplayName"> Display name of the principal. </param>
        /// <param name="email"> Email id of the principal. </param>
        /// <param name="principalType"> Type of the principal. </param>
        /// <param name="roleDefinitionId"> Id of the role definition. </param>
        /// <param name="roleDefinitionDisplayName"> Display name of the role definition. </param>
        /// <param name="roleType"> The role type. </param>
        /// <param name="scopeId"> Scope id of the resource. </param>
        /// <param name="scopeDisplayName"> Display name of the resource. </param>
        /// <param name="scopeType"> Type of the scope. </param>
        internal RoleManagementExpandedProperties(Guid? principalId, string principalDisplayName, string email, RoleManagementPrincipalType? principalType, ResourceIdentifier roleDefinitionId, string roleDefinitionDisplayName, AuthorizationRoleType? roleType, ResourceIdentifier scopeId, string scopeDisplayName, RoleManagementScopeType? scopeType)
        {
            PrincipalId = principalId;
            PrincipalDisplayName = principalDisplayName;
            Email = email;
            PrincipalType = principalType;
            RoleDefinitionId = roleDefinitionId;
            RoleDefinitionDisplayName = roleDefinitionDisplayName;
            RoleType = roleType;
            ScopeId = scopeId;
            ScopeDisplayName = scopeDisplayName;
            ScopeType = scopeType;
        }

        /// <summary> Id of the principal. </summary>
        public Guid? PrincipalId { get; }
        /// <summary> Display name of the principal. </summary>
        public string PrincipalDisplayName { get; }
        /// <summary> Email id of the principal. </summary>
        public string Email { get; }
        /// <summary> Type of the principal. </summary>
        public RoleManagementPrincipalType? PrincipalType { get; }
        /// <summary> Id of the role definition. </summary>
        public ResourceIdentifier RoleDefinitionId { get; }
        /// <summary> Display name of the role definition. </summary>
        public string RoleDefinitionDisplayName { get; }
        /// <summary> The role type. </summary>
        public AuthorizationRoleType? RoleType { get; }
        /// <summary> Scope id of the resource. </summary>
        public ResourceIdentifier ScopeId { get; }
        /// <summary> Display name of the resource. </summary>
        public string ScopeDisplayName { get; }
        /// <summary> Type of the scope. </summary>
        public RoleManagementScopeType? ScopeType { get; }
    }
}
