// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Authorization.Models
{
    /// <summary>
    /// The type of the role assignment schedule request. Eg: SelfActivate, AdminAssign etc
    /// Serialized Name: RoleAssignmentScheduleRequestType
    /// </summary>
    public readonly partial struct RoleAssignmentScheduleRequestType : IEquatable<RoleAssignmentScheduleRequestType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RoleAssignmentScheduleRequestType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RoleAssignmentScheduleRequestType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AdminAssignValue = "AdminAssign";
        private const string AdminRemoveValue = "AdminRemove";
        private const string AdminUpdateValue = "AdminUpdate";
        private const string AdminExtendValue = "AdminExtend";
        private const string AdminRenewValue = "AdminRenew";
        private const string SelfActivateValue = "SelfActivate";
        private const string SelfDeactivateValue = "SelfDeactivate";
        private const string SelfExtendValue = "SelfExtend";
        private const string SelfRenewValue = "SelfRenew";

        /// <summary>
        /// AdminAssign
        /// Serialized Name: RoleAssignmentScheduleRequestType.AdminAssign
        /// </summary>
        public static RoleAssignmentScheduleRequestType AdminAssign { get; } = new RoleAssignmentScheduleRequestType(AdminAssignValue);
        /// <summary>
        /// AdminRemove
        /// Serialized Name: RoleAssignmentScheduleRequestType.AdminRemove
        /// </summary>
        public static RoleAssignmentScheduleRequestType AdminRemove { get; } = new RoleAssignmentScheduleRequestType(AdminRemoveValue);
        /// <summary>
        /// AdminUpdate
        /// Serialized Name: RoleAssignmentScheduleRequestType.AdminUpdate
        /// </summary>
        public static RoleAssignmentScheduleRequestType AdminUpdate { get; } = new RoleAssignmentScheduleRequestType(AdminUpdateValue);
        /// <summary>
        /// AdminExtend
        /// Serialized Name: RoleAssignmentScheduleRequestType.AdminExtend
        /// </summary>
        public static RoleAssignmentScheduleRequestType AdminExtend { get; } = new RoleAssignmentScheduleRequestType(AdminExtendValue);
        /// <summary>
        /// AdminRenew
        /// Serialized Name: RoleAssignmentScheduleRequestType.AdminRenew
        /// </summary>
        public static RoleAssignmentScheduleRequestType AdminRenew { get; } = new RoleAssignmentScheduleRequestType(AdminRenewValue);
        /// <summary>
        /// SelfActivate
        /// Serialized Name: RoleAssignmentScheduleRequestType.SelfActivate
        /// </summary>
        public static RoleAssignmentScheduleRequestType SelfActivate { get; } = new RoleAssignmentScheduleRequestType(SelfActivateValue);
        /// <summary>
        /// SelfDeactivate
        /// Serialized Name: RoleAssignmentScheduleRequestType.SelfDeactivate
        /// </summary>
        public static RoleAssignmentScheduleRequestType SelfDeactivate { get; } = new RoleAssignmentScheduleRequestType(SelfDeactivateValue);
        /// <summary>
        /// SelfExtend
        /// Serialized Name: RoleAssignmentScheduleRequestType.SelfExtend
        /// </summary>
        public static RoleAssignmentScheduleRequestType SelfExtend { get; } = new RoleAssignmentScheduleRequestType(SelfExtendValue);
        /// <summary>
        /// SelfRenew
        /// Serialized Name: RoleAssignmentScheduleRequestType.SelfRenew
        /// </summary>
        public static RoleAssignmentScheduleRequestType SelfRenew { get; } = new RoleAssignmentScheduleRequestType(SelfRenewValue);
        /// <summary> Determines if two <see cref="RoleAssignmentScheduleRequestType"/> values are the same. </summary>
        public static bool operator ==(RoleAssignmentScheduleRequestType left, RoleAssignmentScheduleRequestType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RoleAssignmentScheduleRequestType"/> values are not the same. </summary>
        public static bool operator !=(RoleAssignmentScheduleRequestType left, RoleAssignmentScheduleRequestType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="RoleAssignmentScheduleRequestType"/>. </summary>
        public static implicit operator RoleAssignmentScheduleRequestType(string value) => new RoleAssignmentScheduleRequestType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RoleAssignmentScheduleRequestType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RoleAssignmentScheduleRequestType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
