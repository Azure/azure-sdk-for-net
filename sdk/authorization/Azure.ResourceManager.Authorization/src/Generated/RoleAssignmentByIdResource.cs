// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Authorization.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Authorization
{
    /// <summary>
    /// A Class representing a RoleAssignmentById along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier" /> you can construct a <see cref="RoleAssignmentByIdResource" />
    /// from an instance of <see cref="ArmClient" /> using the GetRoleAssignmentByIdResource method.
    /// Otherwise you can get one from its parent resource <see cref="TenantResource" /> using the GetRoleAssignmentById method.
    /// </summary>
    public partial class RoleAssignmentByIdResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="RoleAssignmentByIdResource"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string roleAssignmentId)
        {
            var resourceId = $"{roleAssignmentId}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _roleAssignmentByIdRoleAssignmentsClientDiagnostics;
        private readonly RoleAssignmentsRestOperations _roleAssignmentByIdRoleAssignmentsRestClient;
        private readonly RoleAssignmentData _data;

        /// <summary> Initializes a new instance of the <see cref="RoleAssignmentByIdResource"/> class for mocking. </summary>
        protected RoleAssignmentByIdResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "RoleAssignmentByIdResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal RoleAssignmentByIdResource(ArmClient client, RoleAssignmentData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="RoleAssignmentByIdResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal RoleAssignmentByIdResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _roleAssignmentByIdRoleAssignmentsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Authorization", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string roleAssignmentByIdRoleAssignmentsApiVersion);
            _roleAssignmentByIdRoleAssignmentsRestClient = new RoleAssignmentsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, roleAssignmentByIdRoleAssignmentsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly Core.ResourceType ResourceType = "";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual RoleAssignmentData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary>
        /// Gets a role assignment by ID.
        /// Request Path: /{roleAssignmentId}
        /// Operation Id: RoleAssignments_GetById
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<RoleAssignmentByIdResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _roleAssignmentByIdRoleAssignmentsClientDiagnostics.CreateScope("RoleAssignmentByIdResource.Get");
            scope.Start();
            try
            {
                var response = await _roleAssignmentByIdRoleAssignmentsRestClient.GetByIdAsync(Id, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new RoleAssignmentByIdResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a role assignment by ID.
        /// Request Path: /{roleAssignmentId}
        /// Operation Id: RoleAssignments_GetById
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<RoleAssignmentByIdResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _roleAssignmentByIdRoleAssignmentsClientDiagnostics.CreateScope("RoleAssignmentByIdResource.Get");
            scope.Start();
            try
            {
                var response = _roleAssignmentByIdRoleAssignmentsRestClient.GetById(Id, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new RoleAssignmentByIdResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes a role assignment.
        /// Request Path: /{roleAssignmentId}
        /// Operation Id: RoleAssignments_DeleteById
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<RoleAssignmentByIdResource>> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _roleAssignmentByIdRoleAssignmentsClientDiagnostics.CreateScope("RoleAssignmentByIdResource.Delete");
            scope.Start();
            try
            {
                var response = await _roleAssignmentByIdRoleAssignmentsRestClient.DeleteByIdAsync(Id, cancellationToken).ConfigureAwait(false);
                var operation = new AuthorizationArmOperation<RoleAssignmentByIdResource>(Response.FromValue(new RoleAssignmentByIdResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes a role assignment.
        /// Request Path: /{roleAssignmentId}
        /// Operation Id: RoleAssignments_DeleteById
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<RoleAssignmentByIdResource> Delete(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _roleAssignmentByIdRoleAssignmentsClientDiagnostics.CreateScope("RoleAssignmentByIdResource.Delete");
            scope.Start();
            try
            {
                var response = _roleAssignmentByIdRoleAssignmentsRestClient.DeleteById(Id, cancellationToken);
                var operation = new AuthorizationArmOperation<RoleAssignmentByIdResource>(Response.FromValue(new RoleAssignmentByIdResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates a role assignment by ID.
        /// Request Path: /{roleAssignmentId}
        /// Operation Id: RoleAssignments_CreateById
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="roleAssignmentCreateParameters"> Parameters for the role assignment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleAssignmentCreateParameters"/> is null. </exception>
        public virtual async Task<ArmOperation<RoleAssignmentByIdResource>> UpdateAsync(WaitUntil waitUntil, RoleAssignmentCreateParameters roleAssignmentCreateParameters, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(roleAssignmentCreateParameters, nameof(roleAssignmentCreateParameters));

            using var scope = _roleAssignmentByIdRoleAssignmentsClientDiagnostics.CreateScope("RoleAssignmentByIdResource.Update");
            scope.Start();
            try
            {
                var response = await _roleAssignmentByIdRoleAssignmentsRestClient.CreateByIdAsync(Id, roleAssignmentCreateParameters, cancellationToken).ConfigureAwait(false);
                var operation = new AuthorizationArmOperation<RoleAssignmentByIdResource>(Response.FromValue(new RoleAssignmentByIdResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates a role assignment by ID.
        /// Request Path: /{roleAssignmentId}
        /// Operation Id: RoleAssignments_CreateById
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="roleAssignmentCreateParameters"> Parameters for the role assignment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleAssignmentCreateParameters"/> is null. </exception>
        public virtual ArmOperation<RoleAssignmentByIdResource> Update(WaitUntil waitUntil, RoleAssignmentCreateParameters roleAssignmentCreateParameters, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(roleAssignmentCreateParameters, nameof(roleAssignmentCreateParameters));

            using var scope = _roleAssignmentByIdRoleAssignmentsClientDiagnostics.CreateScope("RoleAssignmentByIdResource.Update");
            scope.Start();
            try
            {
                var response = _roleAssignmentByIdRoleAssignmentsRestClient.CreateById(Id, roleAssignmentCreateParameters, cancellationToken);
                var operation = new AuthorizationArmOperation<RoleAssignmentByIdResource>(Response.FromValue(new RoleAssignmentByIdResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
