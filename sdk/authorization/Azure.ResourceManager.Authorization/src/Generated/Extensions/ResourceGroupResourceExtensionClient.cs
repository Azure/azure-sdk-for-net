// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Authorization.Models;

namespace Azure.ResourceManager.Authorization
{
    /// <summary> A class to add extension methods to ResourceGroupResource. </summary>
    internal partial class ResourceGroupResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _permissionsClientDiagnostics;
        private PermissionsRestOperations _permissionsRestClient;

        /// <summary> Initializes a new instance of the <see cref="ResourceGroupResourceExtensionClient"/> class for mocking. </summary>
        protected ResourceGroupResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ResourceGroupResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal ResourceGroupResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics PermissionsClientDiagnostics => _permissionsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Authorization", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private PermissionsRestOperations PermissionsRestClient => _permissionsRestClient ??= new PermissionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(Core.ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// Gets all permissions the caller has for a resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Authorization/permissions
        /// Operation Id: Permissions_ListForResourceGroup
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Permission" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Permission> GetForResourceGroupPermissionsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<Permission>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = PermissionsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetForResourceGroupPermissions");
                scope.Start();
                try
                {
                    var response = await PermissionsRestClient.ListForResourceGroupAsync(Id.SubscriptionId, Id.ResourceGroupName, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<Permission>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = PermissionsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetForResourceGroupPermissions");
                scope.Start();
                try
                {
                    var response = await PermissionsRestClient.ListForResourceGroupNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets all permissions the caller has for a resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Authorization/permissions
        /// Operation Id: Permissions_ListForResourceGroup
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Permission" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Permission> GetForResourceGroupPermissions(CancellationToken cancellationToken = default)
        {
            Page<Permission> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = PermissionsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetForResourceGroupPermissions");
                scope.Start();
                try
                {
                    var response = PermissionsRestClient.ListForResourceGroup(Id.SubscriptionId, Id.ResourceGroupName, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<Permission> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = PermissionsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetForResourceGroupPermissions");
                scope.Start();
                try
                {
                    var response = PermissionsRestClient.ListForResourceGroupNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets all permissions the caller has for a resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/permissions
        /// Operation Id: Permissions_ListForResource
        /// </summary>
        /// <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
        /// <param name="parentResourcePath"> The parent resource identity. </param>
        /// <param name="resourceType"> The resource type of the resource. </param>
        /// <param name="resourceName"> The name of the resource to get the permissions for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Permission" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Permission> GetForResourcePermissionsAsync(string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, CancellationToken cancellationToken = default)
        {
            async Task<Page<Permission>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = PermissionsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetForResourcePermissions");
                scope.Start();
                try
                {
                    var response = await PermissionsRestClient.ListForResourceAsync(Id.SubscriptionId, Id.ResourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<Permission>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = PermissionsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetForResourcePermissions");
                scope.Start();
                try
                {
                    var response = await PermissionsRestClient.ListForResourceNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets all permissions the caller has for a resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/permissions
        /// Operation Id: Permissions_ListForResource
        /// </summary>
        /// <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
        /// <param name="parentResourcePath"> The parent resource identity. </param>
        /// <param name="resourceType"> The resource type of the resource. </param>
        /// <param name="resourceName"> The name of the resource to get the permissions for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Permission" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Permission> GetForResourcePermissions(string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, CancellationToken cancellationToken = default)
        {
            Page<Permission> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = PermissionsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetForResourcePermissions");
                scope.Start();
                try
                {
                    var response = PermissionsRestClient.ListForResource(Id.SubscriptionId, Id.ResourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<Permission> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = PermissionsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetForResourcePermissions");
                scope.Start();
                try
                {
                    var response = PermissionsRestClient.ListForResourceNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
