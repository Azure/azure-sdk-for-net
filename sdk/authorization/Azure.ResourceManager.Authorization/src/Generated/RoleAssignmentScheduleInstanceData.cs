// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;
using Azure.ResourceManager.Authorization.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Authorization
{
    /// <summary> A class representing the RoleAssignmentScheduleInstance data model. </summary>
    public partial class RoleAssignmentScheduleInstanceData : ResourceData
    {
        /// <summary> Initializes a new instance of RoleAssignmentScheduleInstanceData. </summary>
        internal RoleAssignmentScheduleInstanceData()
        {
        }

        /// <summary> Initializes a new instance of RoleAssignmentScheduleInstanceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="scope">
        /// The role assignment schedule scope.
        /// Serialized Name: RoleAssignmentScheduleInstance.properties.scope
        /// </param>
        /// <param name="roleDefinitionId">
        /// The role definition ID.
        /// Serialized Name: RoleAssignmentScheduleInstance.properties.roleDefinitionId
        /// </param>
        /// <param name="principalId">
        /// The principal ID.
        /// Serialized Name: RoleAssignmentScheduleInstance.properties.principalId
        /// </param>
        /// <param name="principalType">
        /// The principal type of the assigned principal ID.
        /// Serialized Name: RoleAssignmentScheduleInstance.properties.principalType
        /// </param>
        /// <param name="roleAssignmentScheduleId">
        /// Id of the master role assignment schedule
        /// Serialized Name: RoleAssignmentScheduleInstance.properties.roleAssignmentScheduleId
        /// </param>
        /// <param name="originRoleAssignmentId">
        /// Role Assignment Id in external system
        /// Serialized Name: RoleAssignmentScheduleInstance.properties.originRoleAssignmentId
        /// </param>
        /// <param name="status">
        /// The status of the role assignment schedule instance.
        /// Serialized Name: RoleAssignmentScheduleInstance.properties.status
        /// </param>
        /// <param name="startOn">
        /// The startDateTime of the role assignment schedule instance
        /// Serialized Name: RoleAssignmentScheduleInstance.properties.startDateTime
        /// </param>
        /// <param name="endOn">
        /// The endDateTime of the role assignment schedule instance
        /// Serialized Name: RoleAssignmentScheduleInstance.properties.endDateTime
        /// </param>
        /// <param name="linkedRoleEligibilityScheduleId">
        /// roleEligibilityScheduleId used to activate
        /// Serialized Name: RoleAssignmentScheduleInstance.properties.linkedRoleEligibilityScheduleId
        /// </param>
        /// <param name="linkedRoleEligibilityScheduleInstanceId">
        /// roleEligibilityScheduleInstanceId linked to this roleAssignmentScheduleInstance
        /// Serialized Name: RoleAssignmentScheduleInstance.properties.linkedRoleEligibilityScheduleInstanceId
        /// </param>
        /// <param name="assignmentType">
        /// Assignment type of the role assignment schedule
        /// Serialized Name: RoleAssignmentScheduleInstance.properties.assignmentType
        /// </param>
        /// <param name="memberType">
        /// Membership type of the role assignment schedule
        /// Serialized Name: RoleAssignmentScheduleInstance.properties.memberType
        /// </param>
        /// <param name="condition">
        /// The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase &apos;foo_storage_container&apos;
        /// Serialized Name: RoleAssignmentScheduleInstance.properties.condition
        /// </param>
        /// <param name="conditionVersion">
        /// Version of the condition. Currently accepted value is &apos;2.0&apos;
        /// Serialized Name: RoleAssignmentScheduleInstance.properties.conditionVersion
        /// </param>
        /// <param name="createdOn">
        /// DateTime when role assignment schedule was created
        /// Serialized Name: RoleAssignmentScheduleInstance.properties.createdOn
        /// </param>
        /// <param name="expandedProperties">
        /// Additional properties of principal, scope and role definition
        /// Serialized Name: RoleAssignmentScheduleInstance.properties.expandedProperties
        /// </param>
        internal RoleAssignmentScheduleInstanceData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, string scope, ResourceIdentifier roleDefinitionId, Guid? principalId, PrincipalType? principalType, ResourceIdentifier roleAssignmentScheduleId, ResourceIdentifier originRoleAssignmentId, RoleAssignmentScheduleInstanceStatus? status, DateTimeOffset? startOn, DateTimeOffset? endOn, Guid? linkedRoleEligibilityScheduleId, Guid? linkedRoleEligibilityScheduleInstanceId, AssignmentType? assignmentType, MemberType? memberType, string condition, string conditionVersion, DateTimeOffset? createdOn, ExpandedProperties expandedProperties) : base(id, name, resourceType, systemData)
        {
            Scope = scope;
            RoleDefinitionId = roleDefinitionId;
            PrincipalId = principalId;
            PrincipalType = principalType;
            RoleAssignmentScheduleId = roleAssignmentScheduleId;
            OriginRoleAssignmentId = originRoleAssignmentId;
            Status = status;
            StartOn = startOn;
            EndOn = endOn;
            LinkedRoleEligibilityScheduleId = linkedRoleEligibilityScheduleId;
            LinkedRoleEligibilityScheduleInstanceId = linkedRoleEligibilityScheduleInstanceId;
            AssignmentType = assignmentType;
            MemberType = memberType;
            Condition = condition;
            ConditionVersion = conditionVersion;
            CreatedOn = createdOn;
            ExpandedProperties = expandedProperties;
        }

        /// <summary>
        /// The role assignment schedule scope.
        /// Serialized Name: RoleAssignmentScheduleInstance.properties.scope
        /// </summary>
        public string Scope { get; }
        /// <summary>
        /// The role definition ID.
        /// Serialized Name: RoleAssignmentScheduleInstance.properties.roleDefinitionId
        /// </summary>
        public ResourceIdentifier RoleDefinitionId { get; }
        /// <summary>
        /// The principal ID.
        /// Serialized Name: RoleAssignmentScheduleInstance.properties.principalId
        /// </summary>
        public Guid? PrincipalId { get; }
        /// <summary>
        /// The principal type of the assigned principal ID.
        /// Serialized Name: RoleAssignmentScheduleInstance.properties.principalType
        /// </summary>
        public PrincipalType? PrincipalType { get; }
        /// <summary>
        /// Id of the master role assignment schedule
        /// Serialized Name: RoleAssignmentScheduleInstance.properties.roleAssignmentScheduleId
        /// </summary>
        public ResourceIdentifier RoleAssignmentScheduleId { get; }
        /// <summary>
        /// Role Assignment Id in external system
        /// Serialized Name: RoleAssignmentScheduleInstance.properties.originRoleAssignmentId
        /// </summary>
        public ResourceIdentifier OriginRoleAssignmentId { get; }
        /// <summary>
        /// The status of the role assignment schedule instance.
        /// Serialized Name: RoleAssignmentScheduleInstance.properties.status
        /// </summary>
        public RoleAssignmentScheduleInstanceStatus? Status { get; }
        /// <summary>
        /// The startDateTime of the role assignment schedule instance
        /// Serialized Name: RoleAssignmentScheduleInstance.properties.startDateTime
        /// </summary>
        public DateTimeOffset? StartOn { get; }
        /// <summary>
        /// The endDateTime of the role assignment schedule instance
        /// Serialized Name: RoleAssignmentScheduleInstance.properties.endDateTime
        /// </summary>
        public DateTimeOffset? EndOn { get; }
        /// <summary>
        /// roleEligibilityScheduleId used to activate
        /// Serialized Name: RoleAssignmentScheduleInstance.properties.linkedRoleEligibilityScheduleId
        /// </summary>
        public Guid? LinkedRoleEligibilityScheduleId { get; }
        /// <summary>
        /// roleEligibilityScheduleInstanceId linked to this roleAssignmentScheduleInstance
        /// Serialized Name: RoleAssignmentScheduleInstance.properties.linkedRoleEligibilityScheduleInstanceId
        /// </summary>
        public Guid? LinkedRoleEligibilityScheduleInstanceId { get; }
        /// <summary>
        /// Assignment type of the role assignment schedule
        /// Serialized Name: RoleAssignmentScheduleInstance.properties.assignmentType
        /// </summary>
        public AssignmentType? AssignmentType { get; }
        /// <summary>
        /// Membership type of the role assignment schedule
        /// Serialized Name: RoleAssignmentScheduleInstance.properties.memberType
        /// </summary>
        public MemberType? MemberType { get; }
        /// <summary>
        /// The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase &apos;foo_storage_container&apos;
        /// Serialized Name: RoleAssignmentScheduleInstance.properties.condition
        /// </summary>
        public string Condition { get; }
        /// <summary>
        /// Version of the condition. Currently accepted value is &apos;2.0&apos;
        /// Serialized Name: RoleAssignmentScheduleInstance.properties.conditionVersion
        /// </summary>
        public string ConditionVersion { get; }
        /// <summary>
        /// DateTime when role assignment schedule was created
        /// Serialized Name: RoleAssignmentScheduleInstance.properties.createdOn
        /// </summary>
        public DateTimeOffset? CreatedOn { get; }
        /// <summary>
        /// Additional properties of principal, scope and role definition
        /// Serialized Name: RoleAssignmentScheduleInstance.properties.expandedProperties
        /// </summary>
        public ExpandedProperties ExpandedProperties { get; }
    }
}
