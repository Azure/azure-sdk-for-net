// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Buffers;
using System.IO;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;

namespace Azure.ResourceManager.Authorization
{
    internal class Utf8JsonRequestContent : RequestContent
    {
        private const int CopyToBufferSize = 81920;
        private static readonly string s_cancellationMessage = new OperationCanceledException().Message;
        private readonly MemoryStream _stream;

        public Utf8JsonRequestContent()
        {
            _stream = new MemoryStream();
            JsonWriter = new Utf8JsonWriter(_stream);
        }

        public Utf8JsonWriter JsonWriter { get; }

        public override async Task WriteToAsync(Stream stream, CancellationToken cancellationToken = default)
        {
            await JsonWriter.FlushAsync().ConfigureAwait(false);
            _stream.Seek(0, SeekOrigin.Begin);
            await _stream.CopyToAsync(stream, CopyToBufferSize, cancellationToken).ConfigureAwait(false);
        }

        public override void WriteTo(Stream stream, CancellationToken cancellationToken = default)
        {
            JsonWriter.Flush();
            _stream.Seek(0, SeekOrigin.Begin);

            byte[] buffer = ArrayPool<byte>.Shared.Rent(CopyToBufferSize);
            try
            {
                while (true)
                {
                    ThrowIfCancellationRequested(cancellationToken);
                    int read = _stream.Read(buffer, 0, buffer.Length);
                    if (read == 0)
                    {
                        break;
                    }
                    ThrowIfCancellationRequested(cancellationToken);
                    stream.Write(buffer, 0, read);
                }
            }
            finally
            {
                stream.Flush();
                ArrayPool<byte>.Shared.Return(buffer, true);
            }
        }

        public override bool TryComputeLength(out long length)
        {
            length = JsonWriter.BytesCommitted + JsonWriter.BytesPending;
            return true;
        }

        public override void Dispose()
        {
            JsonWriter.Dispose();
            _stream.Dispose();
        }

        private static void ThrowIfCancellationRequested(CancellationToken cancellationToken = default)
        {
            if (cancellationToken.IsCancellationRequested)
            {
#if NETCOREAPP2_1_OR_GREATER
				throw new global::System.Threading.Tasks.TaskCanceledException(s_cancellationMessage, null, cancellationToken);
#else
                throw new TaskCanceledException(s_cancellationMessage, null);
#endif
            }
        }
    }
}
