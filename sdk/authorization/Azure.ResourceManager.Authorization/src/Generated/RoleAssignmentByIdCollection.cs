// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Authorization.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Authorization
{
    /// <summary>
    /// A class representing a collection of <see cref="RoleAssignmentByIdResource" /> and their operations.
    /// Each <see cref="RoleAssignmentByIdResource" /> in the collection will belong to the same instance of <see cref="TenantResource" />.
    /// To get a <see cref="RoleAssignmentByIdCollection" /> instance call the GetRoleAssignmentByIds method from an instance of <see cref="TenantResource" />.
    /// </summary>
    public partial class RoleAssignmentByIdCollection : ArmCollection
    {
        private readonly ClientDiagnostics _roleAssignmentByIdRoleAssignmentsClientDiagnostics;
        private readonly RoleAssignmentsRestOperations _roleAssignmentByIdRoleAssignmentsRestClient;

        /// <summary> Initializes a new instance of the <see cref="RoleAssignmentByIdCollection"/> class for mocking. </summary>
        protected RoleAssignmentByIdCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="RoleAssignmentByIdCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal RoleAssignmentByIdCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _roleAssignmentByIdRoleAssignmentsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Authorization", RoleAssignmentByIdResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(RoleAssignmentByIdResource.ResourceType, out string roleAssignmentByIdRoleAssignmentsApiVersion);
            _roleAssignmentByIdRoleAssignmentsRestClient = new RoleAssignmentsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, roleAssignmentByIdRoleAssignmentsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != TenantResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, TenantResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Creates a role assignment by ID.
        /// Request Path: /{roleAssignmentId}
        /// Operation Id: RoleAssignments_CreateById
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="roleAssignmentId"> The fully qualified ID of the role assignment, including the scope, resource name and resource type. Use the format, /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. Example: /subscriptions/{subId}/resourcegroups/{rgname}//providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. </param>
        /// <param name="roleAssignmentCreateParameters"> Parameters for the role assignment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleAssignmentId"/> or <paramref name="roleAssignmentCreateParameters"/> is null. </exception>
        public virtual async Task<ArmOperation<RoleAssignmentByIdResource>> CreateOrUpdateAsync(WaitUntil waitUntil, ResourceIdentifier roleAssignmentId, RoleAssignmentCreateParameters roleAssignmentCreateParameters, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(roleAssignmentId, nameof(roleAssignmentId));
            Argument.AssertNotNull(roleAssignmentCreateParameters, nameof(roleAssignmentCreateParameters));

            using var scope = _roleAssignmentByIdRoleAssignmentsClientDiagnostics.CreateScope("RoleAssignmentByIdCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _roleAssignmentByIdRoleAssignmentsRestClient.CreateByIdAsync(roleAssignmentId, roleAssignmentCreateParameters, cancellationToken).ConfigureAwait(false);
                var operation = new AuthorizationArmOperation<RoleAssignmentByIdResource>(Response.FromValue(new RoleAssignmentByIdResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates a role assignment by ID.
        /// Request Path: /{roleAssignmentId}
        /// Operation Id: RoleAssignments_CreateById
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="roleAssignmentId"> The fully qualified ID of the role assignment, including the scope, resource name and resource type. Use the format, /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. Example: /subscriptions/{subId}/resourcegroups/{rgname}//providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. </param>
        /// <param name="roleAssignmentCreateParameters"> Parameters for the role assignment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleAssignmentId"/> or <paramref name="roleAssignmentCreateParameters"/> is null. </exception>
        public virtual ArmOperation<RoleAssignmentByIdResource> CreateOrUpdate(WaitUntil waitUntil, ResourceIdentifier roleAssignmentId, RoleAssignmentCreateParameters roleAssignmentCreateParameters, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(roleAssignmentId, nameof(roleAssignmentId));
            Argument.AssertNotNull(roleAssignmentCreateParameters, nameof(roleAssignmentCreateParameters));

            using var scope = _roleAssignmentByIdRoleAssignmentsClientDiagnostics.CreateScope("RoleAssignmentByIdCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _roleAssignmentByIdRoleAssignmentsRestClient.CreateById(roleAssignmentId, roleAssignmentCreateParameters, cancellationToken);
                var operation = new AuthorizationArmOperation<RoleAssignmentByIdResource>(Response.FromValue(new RoleAssignmentByIdResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a role assignment by ID.
        /// Request Path: /{roleAssignmentId}
        /// Operation Id: RoleAssignments_GetById
        /// </summary>
        /// <param name="roleAssignmentId"> The fully qualified ID of the role assignment, including the scope, resource name and resource type. Use the format, /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. Example: /subscriptions/{subId}/resourcegroups/{rgname}//providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleAssignmentId"/> is null. </exception>
        public virtual async Task<Response<RoleAssignmentByIdResource>> GetAsync(ResourceIdentifier roleAssignmentId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(roleAssignmentId, nameof(roleAssignmentId));

            using var scope = _roleAssignmentByIdRoleAssignmentsClientDiagnostics.CreateScope("RoleAssignmentByIdCollection.Get");
            scope.Start();
            try
            {
                var response = await _roleAssignmentByIdRoleAssignmentsRestClient.GetByIdAsync(roleAssignmentId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new RoleAssignmentByIdResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a role assignment by ID.
        /// Request Path: /{roleAssignmentId}
        /// Operation Id: RoleAssignments_GetById
        /// </summary>
        /// <param name="roleAssignmentId"> The fully qualified ID of the role assignment, including the scope, resource name and resource type. Use the format, /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. Example: /subscriptions/{subId}/resourcegroups/{rgname}//providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleAssignmentId"/> is null. </exception>
        public virtual Response<RoleAssignmentByIdResource> Get(ResourceIdentifier roleAssignmentId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(roleAssignmentId, nameof(roleAssignmentId));

            using var scope = _roleAssignmentByIdRoleAssignmentsClientDiagnostics.CreateScope("RoleAssignmentByIdCollection.Get");
            scope.Start();
            try
            {
                var response = _roleAssignmentByIdRoleAssignmentsRestClient.GetById(roleAssignmentId, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new RoleAssignmentByIdResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /{roleAssignmentId}
        /// Operation Id: RoleAssignments_GetById
        /// </summary>
        /// <param name="roleAssignmentId"> The fully qualified ID of the role assignment, including the scope, resource name and resource type. Use the format, /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. Example: /subscriptions/{subId}/resourcegroups/{rgname}//providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleAssignmentId"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(ResourceIdentifier roleAssignmentId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(roleAssignmentId, nameof(roleAssignmentId));

            using var scope = _roleAssignmentByIdRoleAssignmentsClientDiagnostics.CreateScope("RoleAssignmentByIdCollection.Exists");
            scope.Start();
            try
            {
                var response = await _roleAssignmentByIdRoleAssignmentsRestClient.GetByIdAsync(roleAssignmentId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /{roleAssignmentId}
        /// Operation Id: RoleAssignments_GetById
        /// </summary>
        /// <param name="roleAssignmentId"> The fully qualified ID of the role assignment, including the scope, resource name and resource type. Use the format, /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. Example: /subscriptions/{subId}/resourcegroups/{rgname}//providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleAssignmentId"/> is null. </exception>
        public virtual Response<bool> Exists(ResourceIdentifier roleAssignmentId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(roleAssignmentId, nameof(roleAssignmentId));

            using var scope = _roleAssignmentByIdRoleAssignmentsClientDiagnostics.CreateScope("RoleAssignmentByIdCollection.Exists");
            scope.Start();
            try
            {
                var response = _roleAssignmentByIdRoleAssignmentsRestClient.GetById(roleAssignmentId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
