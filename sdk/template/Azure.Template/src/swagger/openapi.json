{
  "swagger": "2.0",
  "info": {
    "title": "Confidential Ledger Service",
    "version": "2022-05-13",
    "x-cadl-generated": [
      {
        "emitter": "@azure-tools/cadl-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "x-ms-parameterized-host": {
    "hostTemplate": "{ledgerUri}",
    "useSchemePrefix": false,
    "parameters": [
        {
            "name": "ledgerUri",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "url",
            "x-ms-skip-url-encoding": true,
            "x-ms-parameter-location": "client"
        }
    ]
  },
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "tags": [],
  "paths": {
    "/app/collections": {
      "get": {
        "operationId": "ConfidentialLedger_GetEnclaveQuotes",
        "summary": "Gets quotes for all nodes of the Confidential Ledger.",
        "description": "A quote is an SGX enclave measurement that can be used to verify the validity of a node and its enclave.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "number",
              "enum": [
                200
              ]
            }
          },
          "default": {
            "description": "An error response from Confidential Ledger.",
            "schema": {
              "$ref": "#/definitions/ConfidentialLedgerError"
            }
          }
        }
      }
    },
    "/app/enclaveQuotes": {
      "get": {
        "operationId": "ConfidentialLedger_ListCollections",
        "summary": "Retrieves a list of collection ids present in the Confidential Ledger",
        "description": "Collection ids are user-created collections of ledger entries",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/CollectionArray"
            }
          },
          "default": {
            "description": "An error response from Confidential Ledger.",
            "schema": {
              "$ref": "#/definitions/ConfidentialLedgerError"
            }
          }
        }
      }
    },
    "/app/governance/constitution": {
      "get": {
        "operationId": "ConfidentialLedger_GetConstitution",
        "summary": "Gets the constitution used for governance.",
        "description": "The constitution is a script that assesses and applies proposals from consortium members.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "number",
              "enum": [
                200
              ]
            }
          },
          "default": {
            "description": "An error response from Confidential Ledger.",
            "schema": {
              "$ref": "#/definitions/ConfidentialLedgerError"
            }
          }
        }
      }
    },
    "/app/governance/members": {
      "get": {
        "operationId": "ConfidentialLedger_GetConsortiumMembers",
        "summary": "Gets the consortium members.",
        "description": "Consortium members can manage the Confidential Ledger.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "number",
              "enum": [
                200
              ]
            }
          },
          "default": {
            "description": "An error response from Confidential Ledger.",
            "schema": {
              "$ref": "#/definitions/ConfidentialLedgerError"
            }
          }
        }
      }
    },
    "/app/transactions/{transactionId}/receipt": {
      "get": {
        "operationId": "ConfidentialLedger_GetReceipt",
        "summary": "Gets a receipt certifying ledger contents at a particular transaction id.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/TransactionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "number",
              "enum": [
                200
              ]
            }
          },
          "default": {
            "description": "An error response from Confidential Ledger.",
            "schema": {
              "$ref": "#/definitions/ConfidentialLedgerError"
            }
          }
        }
      }
    },
    "/app/transactions/{transactionId}/status": {
      "get": {
        "operationId": "ConfidentialLedger_GetTransactionStatus",
        "summary": "Gets the status of an entry identified by a transaction id.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/TransactionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "number",
              "enum": [
                200
              ]
            }
          },
          "default": {
            "description": "An error response from Confidential Ledger.",
            "schema": {
              "$ref": "#/definitions/ConfidentialLedgerError"
            }
          }
        }
      }
    },
    "/app/transactions/current": {
      "get": {
        "operationId": "ConfidentialLedger_GetCurrentLedgerEntry",
        "summary": "Gets the current value available in the ledger.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/CollectionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "number",
              "enum": [
                200
              ]
            }
          },
          "default": {
            "description": "An error response from Confidential Ledger.",
            "schema": {
              "$ref": "#/definitions/ConfidentialLedgerError"
            }
          }
        }
      }
    },
    "/app/users/{userId}": {
      "delete": {
        "operationId": "ConfidentialLedger_DeleteUser",
        "summary": "Deletes a user from the Confidential Ledger.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/UserIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An error response from Confidential Ledger.",
            "schema": {
              "$ref": "#/definitions/ConfidentialLedgerError"
            }
          }
        }
      },
      "get": {
        "operationId": "ConfidentialLedger_GetUser",
        "summary": "Gets a user.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/UserIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "number",
              "enum": [
                200
              ]
            }
          },
          "default": {
            "description": "An error response from Confidential Ledger.",
            "schema": {
              "$ref": "#/definitions/ConfidentialLedgerError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Collection": {
      "type": "object",
      "properties": {
        "collectionId": {
          "type": "string"
        }
      },
      "description": "Identifier for collections.",
      "required": [
        "collectionId"
      ]
    },
    "CollectionArray": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Collection"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "Collection[]"
        }
      },
      "description": "A list of identifiers for ledger collections.",
      "required": [
        "items"
      ]
    },
    "ConfidentialLedgerError": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/ConfidentialLedgerErrorBody"
        }
      },
      "description": "An error response from Confidential Ledger.",
      "required": [
        "error"
      ]
    },
    "ConfidentialLedgerErrorBody": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "The error code."
        },
        "message": {
          "type": "string",
          "description": "The error message."
        }
      },
      "description": "An error response from Confidential Ledger.",
      "required": [
        "code",
        "message"
      ]
    }
  },
  "parameters": {
    "Azure.Core.ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "required": true,
      "description": "The API version to use for this operation.",
      "minLength": 1,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "CollectionIdParameter": {
      "name": "collectionId",
      "in": "query",
      "required": false,
      "description": "The collection id.",
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "TransactionIdParameter": {
      "name": "transactionId",
      "in": "path",
      "required": true,
      "description": "Identifies a write transaction.",
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "UserIdParameter": {
      "name": "userId",
      "in": "path",
      "required": true,
      "description": "The user id, either an AAD object ID or certificate fingerprint.",
      "type": "string",
      "x-ms-parameter-location": "method"
    }
  }
}
