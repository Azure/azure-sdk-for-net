// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Template
{
    /// <summary> The MultiVersion service client. </summary>
    public partial class MultiVersionClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://vault.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;
        private readonly MultiVersionClientOptions.ServiceVersion _serviceVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of MultiVersionClient for mocking. </summary>
        protected MultiVersionClient()
        {
        }

        /// <summary> Initializes a new instance of MultiVersionClient. </summary>
        /// <param name="endpoint"> Endpoint - server parameter. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public MultiVersionClient(Uri endpoint, TokenCredential credential) : this(endpoint, credential, new MultiVersionClientOptions())
        {
        }

        /// <summary> Initializes a new instance of MultiVersionClient. </summary>
        /// <param name="endpoint"> Endpoint - server parameter. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public MultiVersionClient(Uri endpoint, TokenCredential credential, MultiVersionClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new MultiVersionClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call SetEvolvingModelAsync with required request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new MultiVersionClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     requiredInt = 1234,
        ///     requiredString = "<requiredString>",
        /// };
        /// 
        /// Response response = await client.SetEvolvingModelAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("requiredInt").ToString());
        /// Console.WriteLine(result.GetProperty("requiredString").ToString());
        /// ]]></code>
        /// This sample shows how to call SetEvolvingModelAsync with all request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new MultiVersionClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     requiredInt = 1234,
        ///     requiredString = "<requiredString>",
        ///     optionalInt = 1234,
        ///     optionalString = "<optionalString>",
        /// };
        /// 
        /// Response response = await client.SetEvolvingModelAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("requiredInt").ToString());
        /// Console.WriteLine(result.GetProperty("requiredString").ToString());
        /// Console.WriteLine(result.GetProperty("optionalInt").ToString());
        /// Console.WriteLine(result.GetProperty("optionalString").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>EvolvingModel</c>:
        /// <code>{
        ///   requiredInt: number, # Required. Value type property available in 2022-01-01
        ///   requiredString: string, # Required. Reference type property available in 2022-02-02
        ///   optionalInt: number, # Optional. Value type property added in 2022-02-02
        ///   optionalString: string, # Optional. Reference type property added in 2022-02-02
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>EvolvingModel</c>:
        /// <code>{
        ///   requiredInt: number, # Required. Value type property available in 2022-01-01
        ///   requiredString: string, # Required. Reference type property available in 2022-02-02
        ///   optionalInt: number, # Optional. Value type property added in 2022-02-02
        ///   optionalString: string, # Optional. Reference type property added in 2022-02-02
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> SetEvolvingModelAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("MultiVersionClient.SetEvolvingModel");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSetEvolvingModelRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call SetEvolvingModel with required request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new MultiVersionClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     requiredInt = 1234,
        ///     requiredString = "<requiredString>",
        /// };
        /// 
        /// Response response = client.SetEvolvingModel(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("requiredInt").ToString());
        /// Console.WriteLine(result.GetProperty("requiredString").ToString());
        /// ]]></code>
        /// This sample shows how to call SetEvolvingModel with all request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new MultiVersionClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     requiredInt = 1234,
        ///     requiredString = "<requiredString>",
        ///     optionalInt = 1234,
        ///     optionalString = "<optionalString>",
        /// };
        /// 
        /// Response response = client.SetEvolvingModel(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("requiredInt").ToString());
        /// Console.WriteLine(result.GetProperty("requiredString").ToString());
        /// Console.WriteLine(result.GetProperty("optionalInt").ToString());
        /// Console.WriteLine(result.GetProperty("optionalString").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>EvolvingModel</c>:
        /// <code>{
        ///   requiredInt: number, # Required. Value type property available in 2022-01-01
        ///   requiredString: string, # Required. Reference type property available in 2022-02-02
        ///   optionalInt: number, # Optional. Value type property added in 2022-02-02
        ///   optionalString: string, # Optional. Reference type property added in 2022-02-02
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>EvolvingModel</c>:
        /// <code>{
        ///   requiredInt: number, # Required. Value type property available in 2022-01-01
        ///   requiredString: string, # Required. Reference type property available in 2022-02-02
        ///   optionalInt: number, # Optional. Value type property added in 2022-02-02
        ///   optionalString: string, # Optional. Reference type property added in 2022-02-02
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response SetEvolvingModel(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("MultiVersionClient.SetEvolvingModel");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSetEvolvingModelRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// </summary>
        /// <param name="value"></param>
        /// <param name="cancellationToken"></param>
        /// <returns></returns>
        public virtual async Task<Response<EvolvingModel>> SetEvolvingModelAsync(EvolvingModel value, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(value, nameof(value));

            RequestContent content = value.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await SetEvolvingModelAsync(content, context).ConfigureAwait(false);
            return Response.FromValue(EvolvingModel.FromResponse(response), response);
        }

        /// <summary>
        /// </summary>
        /// <param name="value"></param>
        /// <param name="cancellationToken"></param>
        /// <returns></returns>
        public virtual Response<EvolvingModel> SetEvolvingModel(EvolvingModel value, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(value, nameof(value));

            RequestContent content = value.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);

            try
            {
                Response response = SetEvolvingModel(content, context);
                return Response.FromValue(EvolvingModel.FromResponse(response), response);
            }
            catch (RequestFailedException e)
            {
                MultiVersion.AssertValidInput<EvolvingModel, MultiVersionClientOptions.ServiceVersion>(value, _serviceVersion, e);
                throw;
            }
        }

        private static RequestContext DefaultRequestContext = new RequestContext();

        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken)
        {
            if (cancellationToken == CancellationToken.None)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        internal HttpMessage CreateSetEvolvingModelRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/ops/evolve", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
