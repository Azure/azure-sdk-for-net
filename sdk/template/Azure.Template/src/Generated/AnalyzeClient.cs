// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Template
{
    /// <summary> The Analyze service client. </summary>
    public partial class AnalyzeClient
    {
        private const string AuthorizationHeader = "Ocp-Apim-Subscription-Key";
        private readonly AzureKeyCredential _keyCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of AnalyzeClient for mocking. </summary>
        protected AnalyzeClient()
        {
        }

        /// <summary> Initializes a new instance of AnalyzeClient. </summary>
        /// <param name="endpoint"> The endpoint to use. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public AnalyzeClient(Uri endpoint, AzureKeyCredential credential) : this(endpoint, credential, new AnalyzeClientOptions())
        {
        }

        /// <summary> Initializes a new instance of AnalyzeClient. </summary>
        /// <param name="endpoint"> The endpoint to use. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public AnalyzeClient(Uri endpoint, AzureKeyCredential credential, AnalyzeClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new AnalyzeClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _keyCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new AzureKeyCredentialPolicy(_keyCredential, AuthorizationHeader) }, new ResponseClassifier());
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Submit a collection of text documents for analysis.  Specify a single unique task to be executed immediately. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="showStats"> If set to true, response will contain request and document level statistics. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
        /// <details><summary>CustomSingleLabelClassificationJob</summary>Schema for <c>CustomSingleLabelClassificationJob</c>:
        /// <code>{
        ///   kind: string, # Required. Discriminator property for AnalyzeTextTask.
        ///   analysisInput: {
        ///     documents: [
        ///       {
        ///         id: string, # Required. A unique, non-empty document identifier.
        ///         text: string, # Required. The input text to process.
        ///         language: string, # Optional. This is the 2 letter ISO 639-1 representation of a language. 
        /// 
        /// For example, use &quot;en&quot; for English; &quot;es&quot; for Spanish etc. z,an
        /// If not set, use &quot;en&quot; for English as default.&quot;
        ///       }
        ///     ], # Required. Collection of documents to analyze.
        ///   }, # Required.
        ///   parameters: {
        ///     loggingOptOut: boolean, # Optional. If set to true, you opt-out of having your text input logged for troubleshooting.
        ///     projectName: string, # Required.
        ///     deploymentName: string, # Required.
        ///   }, # Required. Parameters object for a text analysis task using custom models.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>~+ 6 more JSON objects</summary><details><summary>EntityLinkingTask</summary>Schema for <c>EntityLinkingTask</c>:
        /// <code>{
        ///   kind: string, # Required. Discriminator property for AnalyzeTextTask.
        ///   analysisInput: {
        ///     documents: [
        ///       {
        ///         id: string, # Required. A unique, non-empty document identifier.
        ///         text: string, # Required. The input text to process.
        ///         language: string, # Optional. This is the 2 letter ISO 639-1 representation of a language. 
        /// 
        /// For example, use &quot;en&quot; for English; &quot;es&quot; for Spanish etc. z,an
        /// If not set, use &quot;en&quot; for English as default.&quot;
        ///       }
        ///     ], # Required. Collection of documents to analyze.
        ///   }, # Required.
        ///   parameters: {
        ///     loggingOptOut: boolean, # Optional. If set to true, you opt-out of having your text input logged for troubleshooting.
        ///     modelVersion: string, # Optional. This field indicates which model is used for scoring.
        ///     stringIndexType: &quot;TextElement_v8&quot; | &quot;UnicodeCodePoint&quot; | &quot;Utf16CodeUnit&quot;, # Optional. Specifies the method used to interpret string offsets.
        /// 
        /// Defaults to grapheme clusters according to Unicode v8.0.0.
        /// For additional information see https://aka.ms/text-analytics-offsets
        ///   }, # Required. Supported parameters for an Entity Linking task.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>EntityRecognitionTask</summary>Schema for <c>EntityRecognitionTask</c>:
        /// <code>{
        ///   kind: string, # Required. Discriminator property for AnalyzeTextTask.
        ///   analysisInput: {
        ///     documents: [
        ///       {
        ///         id: string, # Required. A unique, non-empty document identifier.
        ///         text: string, # Required. The input text to process.
        ///         language: string, # Optional. This is the 2 letter ISO 639-1 representation of a language. 
        /// 
        /// For example, use &quot;en&quot; for English; &quot;es&quot; for Spanish etc. z,an
        /// If not set, use &quot;en&quot; for English as default.&quot;
        ///       }
        ///     ], # Required. Collection of documents to analyze.
        ///   }, # Required.
        ///   parameters: {
        ///     loggingOptOut: boolean, # Optional. If set to true, you opt-out of having your text input logged for troubleshooting.
        ///     modelVersion: string, # Optional. This field indicates which model is used for scoring.
        ///     stringIndexType: &quot;TextElement_v8&quot; | &quot;UnicodeCodePoint&quot; | &quot;Utf16CodeUnit&quot;, # Optional. Specifies the method used to interpret string offsets.
        /// 
        /// Defaults to grapheme clusters according to Unicode v8.0.0.
        /// For additional information see https://aka.ms/text-analytics-offsets
        ///   }, # Required. Supported parameters for an Entity Recognition task.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>KeyPhraseExtractionTask</summary>Schema for <c>KeyPhraseExtractionTask</c>:
        /// <code>{
        ///   kind: string, # Required. Discriminator property for AnalyzeTextTask.
        ///   analysisInput: {
        ///     documents: [
        ///       {
        ///         id: string, # Required. A unique, non-empty document identifier.
        ///         text: string, # Required. The input text to process.
        ///         language: string, # Optional. This is the 2 letter ISO 639-1 representation of a language. 
        /// 
        /// For example, use &quot;en&quot; for English; &quot;es&quot; for Spanish etc. z,an
        /// If not set, use &quot;en&quot; for English as default.&quot;
        ///       }
        ///     ], # Required. Collection of documents to analyze.
        ///   }, # Required.
        ///   parameters: {
        ///     loggingOptOut: boolean, # Optional. If set to true, you opt-out of having your text input logged for troubleshooting.
        ///     modelVersion: string, # Optional. This field indicates which model is used for scoring.
        ///   }, # Required. Parameters object for a text analysis task using pre-built models.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>LanguageDetectionTask</summary>Schema for <c>LanguageDetectionTask</c>:
        /// <code>{
        ///   kind: string, # Required. Discriminator property for AnalyzeTextTask.
        ///   analysisInput: {
        ///     documents: [
        ///       {
        ///         id: string, # Required. A unique, non-empty document identifier.
        ///         text: string, # Required. The input text to process.
        ///         countryHint: string, # Optional. This is the 2 letter ISO 639-1 representation of a language. 
        /// 
        /// For example, use &quot;en&quot; for English; &quot;es&quot; for Spanish etc. z,an
        /// If not set, use &quot;en&quot; for English as default.&quot;
        ///       }
        ///     ], # Required. Collection of documents to analyze.
        ///   }, # Required.
        ///   parameters: {
        ///     loggingOptOut: boolean, # Optional. If set to true, you opt-out of having your text input logged for troubleshooting.
        ///     modelVersion: string, # Optional. This field indicates which model is used for scoring.
        ///   }, # Required. Parameters object for a text analysis task using pre-built models.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>PiiEntityRecognitionTask</summary>Schema for <c>PiiEntityRecognitionTask</c>:
        /// <code>{
        ///   kind: string, # Required. Discriminator property for AnalyzeTextTask.
        ///   analysisInput: {
        ///     documents: [
        ///       {
        ///         id: string, # Required. A unique, non-empty document identifier.
        ///         text: string, # Required. The input text to process.
        ///         language: string, # Optional. This is the 2 letter ISO 639-1 representation of a language. 
        /// 
        /// For example, use &quot;en&quot; for English; &quot;es&quot; for Spanish etc. z,an
        /// If not set, use &quot;en&quot; for English as default.&quot;
        ///       }
        ///     ], # Required. Collection of documents to analyze.
        ///   }, # Required.
        ///   parameters: {
        ///     loggingOptOut: boolean, # Optional. If set to true, you opt-out of having your text input logged for troubleshooting.
        ///     modelVersion: string, # Optional. This field indicates which model is used for scoring.
        ///     stringIndexType: &quot;TextElement_v8&quot; | &quot;UnicodeCodePoint&quot; | &quot;Utf16CodeUnit&quot;, # Optional. Specifies the method used to interpret string offsets.
        /// 
        /// Defaults to grapheme clusters according to Unicode v8.0.0.
        /// For additional information see https://aka.ms/text-analytics-offsets
        ///     domain: &quot;phi&quot; | &quot;none&quot;, # Optional. If specified, will set the PII domain to include only a subset of the entity categories.
        ///     piiCategories: [&quot;ABARoutingNumber&quot; | &quot;ARNationalIdentityNumber&quot; | &quot;AUBankAccountNumber&quot; | &quot;AUDriversLicenseNumber&quot; | &quot;AUMedicalAccountNumber&quot; | &quot;AUPassportNumber&quot; | &quot;AUTaxFileNumber&quot; | &quot;AUBusinessNumber&quot; | &quot;AUCompanyNumber&quot; | &quot;ATIdentityCard&quot; | &quot;ATTaxIdentificationNumber&quot; | &quot;ATValueAddedTaxNumber&quot; | &quot;AzureDocumentDBAuthKey&quot; | &quot;AzureIAASDatabaseConnectionAndSQLString&quot; | &quot;AzureIoTConnectionString&quot; | &quot;AzurePublishSettingPassword&quot; | &quot;AzureRedisCacheString&quot; | &quot;AzureSAS&quot; | &quot;AzureServiceBusString&quot; | &quot;AzureStorageAccountKey&quot; | &quot;AzureStorageAccountGeneric&quot; | &quot;BENationalNumber&quot; | &quot;BENationalNumberV2&quot; | &quot;BEValueAddedTaxNumber&quot; | &quot;BRCPFNumber&quot; | &quot;BRLegalEntityNumber&quot; | &quot;BRNationalIDRG&quot; | &quot;BGUniformCivilNumber&quot; | &quot;CABankAccountNumber&quot; | &quot;CADriversLicenseNumber&quot; | &quot;CAHealthServiceNumber&quot; | &quot;CAPassportNumber&quot; | &quot;CAPersonalHealthIdentification&quot; | &quot;CASocialInsuranceNumber&quot; | &quot;CLIdentityCardNumber&quot; | &quot;CNResidentIdentityCardNumber&quot; | &quot;CreditCardNumber&quot; | &quot;HRIdentityCardNumber&quot; | &quot;HRNationalIDNumber&quot; | &quot;HRPersonalIdentificationNumber&quot; | &quot;HRPersonalIdentificationOIBNumberV2&quot; | &quot;CYIdentityCard&quot; | &quot;CYTaxIdentificationNumber&quot; | &quot;CZPersonalIdentityNumber&quot; | &quot;CZPersonalIdentityV2&quot; | &quot;DKPersonalIdentificationNumber&quot; | &quot;DKPersonalIdentificationV2&quot; | &quot;DrugEnforcementAgencyNumber&quot; | &quot;EEPersonalIdentificationCode&quot; | &quot;EUDebitCardNumber&quot; | &quot;EUDriversLicenseNumber&quot; | &quot;EUGPSCoordinates&quot; | &quot;EUNationalIdentificationNumber&quot; | &quot;EUPassportNumber&quot; | &quot;EUSocialSecurityNumber&quot; | &quot;EUTaxIdentificationNumber&quot; | &quot;FIEuropeanHealthNumber&quot; | &quot;FINationalID&quot; | &quot;FINationalIDV2&quot; | &quot;FIPassportNumber&quot; | &quot;FRDriversLicenseNumber&quot; | &quot;FRHealthInsuranceNumber&quot; | &quot;FRNationalID&quot; | &quot;FRPassportNumber&quot; | &quot;FRSocialSecurityNumber&quot; | &quot;FRTaxIdentificationNumber&quot; | &quot;FRValueAddedTaxNumber&quot; | &quot;DEDriversLicenseNumber&quot; | &quot;DEPassportNumber&quot; | &quot;DEIdentityCardNumber&quot; | &quot;DETaxIdentificationNumber&quot; | &quot;DEValueAddedNumber&quot; | &quot;GRNationalIDCard&quot; | &quot;GRNationalIDV2&quot; | &quot;GRTaxIdentificationNumber&quot; | &quot;HKIdentityCardNumber&quot; | &quot;HUValueAddedNumber&quot; | &quot;HUPersonalIdentificationNumber&quot; | &quot;HUTaxIdentificationNumber&quot; | &quot;INPermanentAccount&quot; | &quot;INUniqueIdentificationNumber&quot; | &quot;IDIdentityCardNumber&quot; | &quot;InternationalBankingAccountNumber&quot; | &quot;IEPersonalPublicServiceNumber&quot; | &quot;IEPersonalPublicServiceNumberV2&quot; | &quot;ILBankAccountNumber&quot; | &quot;ILNationalID&quot; | &quot;ITDriversLicenseNumber&quot; | &quot;ITFiscalCode&quot; | &quot;ITValueAddedTaxNumber&quot; | &quot;JPBankAccountNumber&quot; | &quot;JPDriversLicenseNumber&quot; | &quot;JPPassportNumber&quot; | &quot;JPResidentRegistrationNumber&quot; | &quot;JPSocialInsuranceNumber&quot; | &quot;JPMyNumberCorporate&quot; | &quot;JPMyNumberPersonal&quot; | &quot;JPResidenceCardNumber&quot; | &quot;LVPersonalCode&quot; | &quot;LTPersonalCode&quot; | &quot;LUNationalIdentificationNumberNatural&quot; | &quot;LUNationalIdentificationNumberNonNatural&quot; | &quot;MYIdentityCardNumber&quot; | &quot;MTIdentityCardNumber&quot; | &quot;MTTaxIDNumber&quot; | &quot;NLCitizensServiceNumber&quot; | &quot;NLCitizensServiceNumberV2&quot; | &quot;NLTaxIdentificationNumber&quot; | &quot;NLValueAddedTaxNumber&quot; | &quot;NZBankAccountNumber&quot; | &quot;NZDriversLicenseNumber&quot; | &quot;NZInlandRevenueNumber&quot; | &quot;NZMinistryOfHealthNumber&quot; | &quot;NZSocialWelfareNumber&quot; | &quot;NOIdentityNumber&quot; | &quot;PHUnifiedMultiPurposeIDNumber&quot; | &quot;PLIdentityCard&quot; | &quot;PLNationalID&quot; | &quot;PLNationalIDV2&quot; | &quot;PLPassportNumber&quot; | &quot;PLTaxIdentificationNumber&quot; | &quot;PLREGONNumber&quot; | &quot;PTCitizenCardNumber&quot; | &quot;PTCitizenCardNumberV2&quot; | &quot;PTTaxIdentificationNumber&quot; | &quot;ROPersonalNumericalCode&quot; | &quot;RUPassportNumberDomestic&quot; | &quot;RUPassportNumberInternational&quot; | &quot;SANationalID&quot; | &quot;SGNationalRegistrationIdentityCardNumber&quot; | &quot;SKPersonalNumber&quot; | &quot;SITaxIdentificationNumber&quot; | &quot;SIUniqueMasterCitizenNumber&quot; | &quot;ZAIdentificationNumber&quot; | &quot;KRResidentRegistrationNumber&quot; | &quot;ESDNI&quot; | &quot;ESSocialSecurityNumber&quot; | &quot;ESTaxIdentificationNumber&quot; | &quot;SQLServerConnectionString&quot; | &quot;SENationalID&quot; | &quot;SENationalIDV2&quot; | &quot;SEPassportNumber&quot; | &quot;SETaxIdentificationNumber&quot; | &quot;SWIFTCode&quot; | &quot;CHSocialSecurityNumber&quot; | &quot;TWNationalID&quot; | &quot;TWPassportNumber&quot; | &quot;TWResidentCertificate&quot; | &quot;THPopulationIdentificationCode&quot; | &quot;TRNationalIdentificationNumber&quot; | &quot;UKDriversLicenseNumber&quot; | &quot;UKElectoralRollNumber&quot; | &quot;UKNationalHealthNumber&quot; | &quot;UKNationalInsuranceNumber&quot; | &quot;UKUniqueTaxpayerNumber&quot; | &quot;USUKPassportNumber&quot; | &quot;USBankAccountNumber&quot; | &quot;USDriversLicenseNumber&quot; | &quot;USIndividualTaxpayerIdentification&quot; | &quot;USSocialSecurityNumber&quot; | &quot;UAPassportNumberDomestic&quot; | &quot;UAPassportNumberInternational&quot; | &quot;Organization&quot; | &quot;Email&quot; | &quot;URL&quot; | &quot;Age&quot; | &quot;PhoneNumber&quot; | &quot;IPAddress&quot; | &quot;Date&quot; | &quot;Person&quot; | &quot;Address&quot; | &quot;All&quot; | &quot;Default&quot;], # Optional. Describes the PII categories to return.
        ///   }, # Required. Supported parameters for a PII Entities Recognition task.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>SentimentAnalysisTask</summary>Schema for <c>SentimentAnalysisTask</c>:
        /// <code>{
        ///   kind: string, # Required. Discriminator property for AnalyzeTextTask.
        ///   analysisInput: {
        ///     documents: [
        ///       {
        ///         id: string, # Required. A unique, non-empty document identifier.
        ///         text: string, # Required. The input text to process.
        ///         language: string, # Optional. This is the 2 letter ISO 639-1 representation of a language. 
        /// 
        /// For example, use &quot;en&quot; for English; &quot;es&quot; for Spanish etc. z,an
        /// If not set, use &quot;en&quot; for English as default.&quot;
        ///       }
        ///     ], # Required. Collection of documents to analyze.
        ///   }, # Required.
        ///   parameters: {
        ///     loggingOptOut: boolean, # Optional. If set to true, you opt-out of having your text input logged for troubleshooting.
        ///     modelVersion: string, # Optional. This field indicates which model is used for scoring.
        ///     stringIndexType: &quot;TextElement_v8&quot; | &quot;UnicodeCodePoint&quot; | &quot;Utf16CodeUnit&quot;, # Optional. Specifies the method used to interpret string offsets.
        /// 
        /// Defaults to grapheme clusters according to Unicode v8.0.0.
        /// For additional information see https://aka.ms/text-analytics-offsets
        ///     opinionMining: boolean, # Optional. A boolean for opinion mining.
        ///   }, # Required. Supported parameters for a Sentiment Analysis task.
        /// }
        /// </code>
        /// </details>
        /// </details>
        /// 
        /// Response Body:
        /// 
        /// This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
        /// <details><summary>EntityLinkingTaskResult</summary>Schema for <c>EntityLinkingTaskResult</c>:
        /// <code>{
        ///   kind: string, # Required. Discriminator property for AnalyzeTextTaskResult.
        ///   results: {
        ///     documents: [
        ///       {
        ///         id: string, # Required. Unique, non-empty document identifier.
        ///         warnings: [
        ///           {
        ///             code: &quot;LongWordsInDocument&quot; | &quot;DocumentTruncated&quot;, # Required. Warning code.
        ///             message: string, # Required. Warning message.
        ///             targetRef: string, # Optional. A JSON pointer reference indicating the target object.
        ///           }
        ///         ], # Required. Warnings encountered while processing document.
        ///         statistics: [
        ///           {
        ///             charactersCount: number, # Required. Number of text elements recognized in the document.
        ///             transactionsCount: number, # Required. Number of transactions for the document.
        ///           }
        ///         ], # Required. If showStats=true was specified in the request this field will contain information about the document payload.
        ///         entities: [
        ///           {
        ///             name: string, # Required. Entity Linking formal name.
        ///             matches: [
        ///               {
        ///                 confidenceScore: number, # Required. If a well known item is recognized, a decimal number denoting the confidence level between 0 and 1 will be returned.
        ///                 text: string, # Required. Entity text as appears in the request.
        ///                 offset: number, # Required. Start position for the entity match text
        ///                 length: number, # Required. Length for the entity match text.
        ///               }
        ///             ], # Required. List of instances this entity appears in the text.
        ///             language: string, # Required. Language used in the data source.
        ///             id: string, # Optional. Unique identifier of the recognized entity from the data source.
        ///             url: string, # Required. URL for the entity&apos;s page from the data source.
        ///             dataSource: string, # Required. Data source used to extract entity linking, such as Wiki/Bing etc.
        ///             bingId: string, # Optional. Bing Entity Search API unique identifier of the recognized entity.
        ///           }
        ///         ], # Required. Recognized well known entities in the document.
        ///       }
        ///     ], # Required. Response by document.
        ///     errors: [
        ///       {
        ///         id: string, # Required. Document id.
        ///         error: {
        ///           message: string, # Required. Error message.
        ///           code: &quot;InvalidRequest&quot; | &quot;InvalidArgument&quot; | &quot;Unauthorized&quot; | &quot;Forbidden&quot; | &quot;NotFound&quot; | &quot;ProjectNotFound&quot; | &quot;OperationNotFound&quot; | &quot;AzureCognitiveServiceNotFound&quot; | &quot;AzureCognitiveSearchIndexNotFound&quot; | &quot;TooManyRequests&quot; | &quot;AzureCognitiveSearchThrottling&quot; | &quot;AzureCognitiveSearchIndexLimitReached&quot; | &quot;InternalServerError&quot; | &quot;ServiceUnavailable&quot;, # Required. Error code.
        ///           details: Dictionary&lt;string, string&gt;, # Optional. Error details.
        ///           target: string, # Optional. Error target.
        ///           innererror: {
        ///             message: string, # Required. Error message.
        ///             code: &quot;InvalidRequest&quot; | &quot;InvalidParameterValue&quot; | &quot;KnowledgeBaseNotFound&quot; | &quot;AzureCognitiveSearchNotFound&quot; | &quot;AzureCognitiveSearchThrottling&quot; | &quot;ExtractionFailure&quot; | &quot;InvalidRequestBodyFormat&quot; | &quot;EmptyRequest&quot; | &quot;MissingInputDocuments&quot; | &quot;InvalidDocument&quot; | &quot;ModelVersionIncorrect&quot; | &quot;InvalidDocumentBatch&quot; | &quot;UnsupportedLanguageCode&quot; | &quot;InvalidCountryHint&quot;, # Required. Error code.
        ///             details: Dictionary&lt;string, string&gt;, # Optional. Error details.
        ///             target: string, # Optional. Error target.
        ///             innererror: InnerError, # Optional. Inner error contains more specific information.
        ///           }, # Optional. Inner error contains more specific information.
        ///         }, # Required. Document error.
        ///       }
        ///     ], # Required. Errors by document id.
        ///     statistics: {
        ///       documentsCount: number, # Required. Number of documents submitted in the request.
        ///       validDocumentsCount: number, # Required. Number of valid documents. This excludes empty, over-size limit or non-supported languages documents.
        ///       erroneousDocumentsCount: number, # Required. Number of invalid documents. This includes empty, over-size limit or non-supported languages documents.
        ///       transactionsCount: number, # Required. Number of transactions for the request.
        ///     }, # Optional. If showStats=true was specified in the request this field will contain information about the request payload.
        ///     modelVersion: string, # Required. This field indicates which model is used for scoring.
        ///   }, # Required.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>~+ 5 more JSON objects</summary><details><summary>EntityRecognitionTaskResult</summary>Schema for <c>EntityRecognitionTaskResult</c>:
        /// <code>{
        ///   kind: string, # Required. Discriminator property for AnalyzeTextTaskResult.
        ///   results: {
        ///     documents: [
        ///       {
        ///         id: string, # Required. Unique, non-empty document identifier.
        ///         warnings: [
        ///           {
        ///             code: &quot;LongWordsInDocument&quot; | &quot;DocumentTruncated&quot;, # Required. Warning code.
        ///             message: string, # Required. Warning message.
        ///             targetRef: string, # Optional. A JSON pointer reference indicating the target object.
        ///           }
        ///         ], # Required. Warnings encountered while processing document.
        ///         statistics: [
        ///           {
        ///             charactersCount: number, # Required. Number of text elements recognized in the document.
        ///             transactionsCount: number, # Required. Number of transactions for the document.
        ///           }
        ///         ], # Required. If showStats=true was specified in the request this field will contain information about the document payload.
        ///         entities: [
        ///           {
        ///             text: string, # Required. Entity text as appears in the request.
        ///             category: string, # Required. Entity type.
        ///             subcategory: string, # Optional. Entity sub type.
        ///             offset: number, # Required. Start position for the entity text. 
        /// Use of different &apos;stringIndexType&apos; values can affect the offset returned.
        ///             length: number, # Required. Length for the entity text. 
        /// Use of different &apos;stringIndexType&apos; values can affect the length returned.
        ///             confidenceScore: number, # Required. Confidence score between 0 and 1 of the extracted entity.
        ///           }
        ///         ], # Required. Recognized entities in the document.
        ///       }
        ///     ], # Required. Response by document.
        ///     errors: [
        ///       {
        ///         id: string, # Required. Document id.
        ///         error: {
        ///           message: string, # Required. Error message.
        ///           code: &quot;InvalidRequest&quot; | &quot;InvalidArgument&quot; | &quot;Unauthorized&quot; | &quot;Forbidden&quot; | &quot;NotFound&quot; | &quot;ProjectNotFound&quot; | &quot;OperationNotFound&quot; | &quot;AzureCognitiveServiceNotFound&quot; | &quot;AzureCognitiveSearchIndexNotFound&quot; | &quot;TooManyRequests&quot; | &quot;AzureCognitiveSearchThrottling&quot; | &quot;AzureCognitiveSearchIndexLimitReached&quot; | &quot;InternalServerError&quot; | &quot;ServiceUnavailable&quot;, # Required. Error code.
        ///           details: Dictionary&lt;string, string&gt;, # Optional. Error details.
        ///           target: string, # Optional. Error target.
        ///           innererror: {
        ///             message: string, # Required. Error message.
        ///             code: &quot;InvalidRequest&quot; | &quot;InvalidParameterValue&quot; | &quot;KnowledgeBaseNotFound&quot; | &quot;AzureCognitiveSearchNotFound&quot; | &quot;AzureCognitiveSearchThrottling&quot; | &quot;ExtractionFailure&quot; | &quot;InvalidRequestBodyFormat&quot; | &quot;EmptyRequest&quot; | &quot;MissingInputDocuments&quot; | &quot;InvalidDocument&quot; | &quot;ModelVersionIncorrect&quot; | &quot;InvalidDocumentBatch&quot; | &quot;UnsupportedLanguageCode&quot; | &quot;InvalidCountryHint&quot;, # Required. Error code.
        ///             details: Dictionary&lt;string, string&gt;, # Optional. Error details.
        ///             target: string, # Optional. Error target.
        ///             innererror: InnerError, # Optional. Inner error contains more specific information.
        ///           }, # Optional. Inner error contains more specific information.
        ///         }, # Required. Document error.
        ///       }
        ///     ], # Required. Errors by document id.
        ///     statistics: {
        ///       documentsCount: number, # Required. Number of documents submitted in the request.
        ///       validDocumentsCount: number, # Required. Number of valid documents. This excludes empty, over-size limit or non-supported languages documents.
        ///       erroneousDocumentsCount: number, # Required. Number of invalid documents. This includes empty, over-size limit or non-supported languages documents.
        ///       transactionsCount: number, # Required. Number of transactions for the request.
        ///     }, # Optional. If showStats=true was specified in the request this field will contain information about the request payload.
        ///     modelVersion: string, # Required. This field indicates which model is used for scoring.
        ///   }, # Required.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>KeyPhraseExtractionTaskResult</summary>Schema for <c>KeyPhraseExtractionTaskResult</c>:
        /// <code>{
        ///   kind: string, # Required. Discriminator property for AnalyzeTextTaskResult.
        ///   results: {
        ///     documents: [
        ///       {
        ///         id: string, # Required. Unique, non-empty document identifier.
        ///         warnings: [
        ///           {
        ///             code: &quot;LongWordsInDocument&quot; | &quot;DocumentTruncated&quot;, # Required. Warning code.
        ///             message: string, # Required. Warning message.
        ///             targetRef: string, # Optional. A JSON pointer reference indicating the target object.
        ///           }
        ///         ], # Required. Warnings encountered while processing document.
        ///         statistics: [
        ///           {
        ///             charactersCount: number, # Required. Number of text elements recognized in the document.
        ///             transactionsCount: number, # Required. Number of transactions for the document.
        ///           }
        ///         ], # Required. If showStats=true was specified in the request this field will contain information about the document payload.
        ///         keyPhrases: [string], # Required. A list of representative words or phrases. The number of key phrases returned is proportional to the number of words in the input document.
        ///       }
        ///     ], # Required. Response by document.
        ///     errors: [
        ///       {
        ///         id: string, # Required. Document id.
        ///         error: {
        ///           message: string, # Required. Error message.
        ///           code: &quot;InvalidRequest&quot; | &quot;InvalidArgument&quot; | &quot;Unauthorized&quot; | &quot;Forbidden&quot; | &quot;NotFound&quot; | &quot;ProjectNotFound&quot; | &quot;OperationNotFound&quot; | &quot;AzureCognitiveServiceNotFound&quot; | &quot;AzureCognitiveSearchIndexNotFound&quot; | &quot;TooManyRequests&quot; | &quot;AzureCognitiveSearchThrottling&quot; | &quot;AzureCognitiveSearchIndexLimitReached&quot; | &quot;InternalServerError&quot; | &quot;ServiceUnavailable&quot;, # Required. Error code.
        ///           details: Dictionary&lt;string, string&gt;, # Optional. Error details.
        ///           target: string, # Optional. Error target.
        ///           innererror: {
        ///             message: string, # Required. Error message.
        ///             code: &quot;InvalidRequest&quot; | &quot;InvalidParameterValue&quot; | &quot;KnowledgeBaseNotFound&quot; | &quot;AzureCognitiveSearchNotFound&quot; | &quot;AzureCognitiveSearchThrottling&quot; | &quot;ExtractionFailure&quot; | &quot;InvalidRequestBodyFormat&quot; | &quot;EmptyRequest&quot; | &quot;MissingInputDocuments&quot; | &quot;InvalidDocument&quot; | &quot;ModelVersionIncorrect&quot; | &quot;InvalidDocumentBatch&quot; | &quot;UnsupportedLanguageCode&quot; | &quot;InvalidCountryHint&quot;, # Required. Error code.
        ///             details: Dictionary&lt;string, string&gt;, # Optional. Error details.
        ///             target: string, # Optional. Error target.
        ///             innererror: InnerError, # Optional. Inner error contains more specific information.
        ///           }, # Optional. Inner error contains more specific information.
        ///         }, # Required. Document error.
        ///       }
        ///     ], # Required. Errors by document id.
        ///     statistics: {
        ///       documentsCount: number, # Required. Number of documents submitted in the request.
        ///       validDocumentsCount: number, # Required. Number of valid documents. This excludes empty, over-size limit or non-supported languages documents.
        ///       erroneousDocumentsCount: number, # Required. Number of invalid documents. This includes empty, over-size limit or non-supported languages documents.
        ///       transactionsCount: number, # Required. Number of transactions for the request.
        ///     }, # Optional. If showStats=true was specified in the request this field will contain information about the request payload.
        ///     modelVersion: string, # Required. This field indicates which model is used for scoring.
        ///   }, # Required.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>LanguageDetectionTaskResult</summary>Schema for <c>LanguageDetectionTaskResult</c>:
        /// <code>{
        ///   kind: string, # Required. Discriminator property for AnalyzeTextTaskResult.
        ///   results: {
        ///     documents: [
        ///       {
        ///         id: string, # Required. Unique, non-empty document identifier.
        ///         warnings: [
        ///           {
        ///             code: &quot;LongWordsInDocument&quot; | &quot;DocumentTruncated&quot;, # Required. Warning code.
        ///             message: string, # Required. Warning message.
        ///             targetRef: string, # Optional. A JSON pointer reference indicating the target object.
        ///           }
        ///         ], # Required. Warnings encountered while processing document.
        ///         statistics: [
        ///           {
        ///             charactersCount: number, # Required. Number of text elements recognized in the document.
        ///             transactionsCount: number, # Required. Number of transactions for the document.
        ///           }
        ///         ], # Required. If showStats=true was specified in the request this field will contain information about the document payload.
        ///         detectedLanguage: [
        ///           {
        ///             name: string, # Required. Long name of a detected language (e.g. English, French).
        ///             iso6391Name: string, # Required. A two letter representation of the detected language according to the ISO 639-1 
        /// standard (e.g. en, fr).
        ///             confidenceScore: number, # Required. A confidence score between 0 and 1. 
        /// 
        /// Scores close to 1 indicate 100% certainty that the identified language is true.
        ///           }
        ///         ], # Required. Detected Language.
        ///       }
        ///     ], # Required. Response by document.
        ///     errors: [
        ///       {
        ///         id: string, # Required. Document id.
        ///         error: {
        ///           message: string, # Required. Error message.
        ///           code: &quot;InvalidRequest&quot; | &quot;InvalidArgument&quot; | &quot;Unauthorized&quot; | &quot;Forbidden&quot; | &quot;NotFound&quot; | &quot;ProjectNotFound&quot; | &quot;OperationNotFound&quot; | &quot;AzureCognitiveServiceNotFound&quot; | &quot;AzureCognitiveSearchIndexNotFound&quot; | &quot;TooManyRequests&quot; | &quot;AzureCognitiveSearchThrottling&quot; | &quot;AzureCognitiveSearchIndexLimitReached&quot; | &quot;InternalServerError&quot; | &quot;ServiceUnavailable&quot;, # Required. Error code.
        ///           details: Dictionary&lt;string, string&gt;, # Optional. Error details.
        ///           target: string, # Optional. Error target.
        ///           innererror: {
        ///             message: string, # Required. Error message.
        ///             code: &quot;InvalidRequest&quot; | &quot;InvalidParameterValue&quot; | &quot;KnowledgeBaseNotFound&quot; | &quot;AzureCognitiveSearchNotFound&quot; | &quot;AzureCognitiveSearchThrottling&quot; | &quot;ExtractionFailure&quot; | &quot;InvalidRequestBodyFormat&quot; | &quot;EmptyRequest&quot; | &quot;MissingInputDocuments&quot; | &quot;InvalidDocument&quot; | &quot;ModelVersionIncorrect&quot; | &quot;InvalidDocumentBatch&quot; | &quot;UnsupportedLanguageCode&quot; | &quot;InvalidCountryHint&quot;, # Required. Error code.
        ///             details: Dictionary&lt;string, string&gt;, # Optional. Error details.
        ///             target: string, # Optional. Error target.
        ///             innererror: InnerError, # Optional. Inner error contains more specific information.
        ///           }, # Optional. Inner error contains more specific information.
        ///         }, # Required. Document error.
        ///       }
        ///     ], # Required. Errors by document id.
        ///     statistics: {
        ///       documentsCount: number, # Required. Number of documents submitted in the request.
        ///       validDocumentsCount: number, # Required. Number of valid documents. This excludes empty, over-size limit or non-supported languages documents.
        ///       erroneousDocumentsCount: number, # Required. Number of invalid documents. This includes empty, over-size limit or non-supported languages documents.
        ///       transactionsCount: number, # Required. Number of transactions for the request.
        ///     }, # Optional. If showStats=true was specified in the request this field will contain information about the request payload.
        ///     modelVersion: string, # Required. This field indicates which model is used for scoring.
        ///   }, # Required.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>PiiEntityRecognitionTaskResult</summary>Schema for <c>PiiEntityRecognitionTaskResult</c>:
        /// <code>{
        ///   kind: string, # Required. Discriminator property for AnalyzeTextTaskResult.
        ///   results: {
        ///     documents: [
        ///       {
        ///         id: string, # Required. Unique, non-empty document identifier.
        ///         warnings: [
        ///           {
        ///             code: &quot;LongWordsInDocument&quot; | &quot;DocumentTruncated&quot;, # Required. Warning code.
        ///             message: string, # Required. Warning message.
        ///             targetRef: string, # Optional. A JSON pointer reference indicating the target object.
        ///           }
        ///         ], # Required. Warnings encountered while processing document.
        ///         statistics: [
        ///           {
        ///             charactersCount: number, # Required. Number of text elements recognized in the document.
        ///             transactionsCount: number, # Required. Number of transactions for the document.
        ///           }
        ///         ], # Required. If showStats=true was specified in the request this field will contain information about the document payload.
        ///         redactedText: string, # Optional. Returns redacted text.
        ///         entities: [
        ///           {
        ///             text: string, # Required. Entity text as appears in the request.
        ///             category: string, # Required. Entity type.
        ///             subcategory: string, # Optional. Entity sub type.
        ///             offset: number, # Required. Start position for the entity text. 
        /// Use of different &apos;stringIndexType&apos; values can affect the offset returned.
        ///             length: number, # Required. Length for the entity text. 
        /// Use of different &apos;stringIndexType&apos; values can affect the length returned.
        ///             confidenceScore: number, # Required. Confidence score between 0 and 1 of the extracted entity.
        ///           }
        ///         ], # Required. Recognized entities in the document.
        ///       }
        ///     ], # Required. Response by document.
        ///     errors: [
        ///       {
        ///         id: string, # Required. Document id.
        ///         error: {
        ///           message: string, # Required. Error message.
        ///           code: &quot;InvalidRequest&quot; | &quot;InvalidArgument&quot; | &quot;Unauthorized&quot; | &quot;Forbidden&quot; | &quot;NotFound&quot; | &quot;ProjectNotFound&quot; | &quot;OperationNotFound&quot; | &quot;AzureCognitiveServiceNotFound&quot; | &quot;AzureCognitiveSearchIndexNotFound&quot; | &quot;TooManyRequests&quot; | &quot;AzureCognitiveSearchThrottling&quot; | &quot;AzureCognitiveSearchIndexLimitReached&quot; | &quot;InternalServerError&quot; | &quot;ServiceUnavailable&quot;, # Required. Error code.
        ///           details: Dictionary&lt;string, string&gt;, # Optional. Error details.
        ///           target: string, # Optional. Error target.
        ///           innererror: {
        ///             message: string, # Required. Error message.
        ///             code: &quot;InvalidRequest&quot; | &quot;InvalidParameterValue&quot; | &quot;KnowledgeBaseNotFound&quot; | &quot;AzureCognitiveSearchNotFound&quot; | &quot;AzureCognitiveSearchThrottling&quot; | &quot;ExtractionFailure&quot; | &quot;InvalidRequestBodyFormat&quot; | &quot;EmptyRequest&quot; | &quot;MissingInputDocuments&quot; | &quot;InvalidDocument&quot; | &quot;ModelVersionIncorrect&quot; | &quot;InvalidDocumentBatch&quot; | &quot;UnsupportedLanguageCode&quot; | &quot;InvalidCountryHint&quot;, # Required. Error code.
        ///             details: Dictionary&lt;string, string&gt;, # Optional. Error details.
        ///             target: string, # Optional. Error target.
        ///             innererror: InnerError, # Optional. Inner error contains more specific information.
        ///           }, # Optional. Inner error contains more specific information.
        ///         }, # Required. Document error.
        ///       }
        ///     ], # Required. Errors by document id.
        ///     statistics: {
        ///       documentsCount: number, # Required. Number of documents submitted in the request.
        ///       validDocumentsCount: number, # Required. Number of valid documents. This excludes empty, over-size limit or non-supported languages documents.
        ///       erroneousDocumentsCount: number, # Required. Number of invalid documents. This includes empty, over-size limit or non-supported languages documents.
        ///       transactionsCount: number, # Required. Number of transactions for the request.
        ///     }, # Optional. If showStats=true was specified in the request this field will contain information about the request payload.
        ///     modelVersion: string, # Required. This field indicates which model is used for scoring.
        ///   }, # Required.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>SentimentAnalysisTaskResult</summary>Schema for <c>SentimentAnalysisTaskResult</c>:
        /// <code>{
        ///   kind: string, # Required. Discriminator property for AnalyzeTextTaskResult.
        ///   results: {
        ///     documents: [
        ///       {
        ///         id: string, # Required. Unique, non-empty document identifier.
        ///         warnings: [
        ///           {
        ///             code: &quot;LongWordsInDocument&quot; | &quot;DocumentTruncated&quot;, # Required. Warning code.
        ///             message: string, # Required. Warning message.
        ///             targetRef: string, # Optional. A JSON pointer reference indicating the target object.
        ///           }
        ///         ], # Required. Warnings encountered while processing document.
        ///         statistics: [
        ///           {
        ///             charactersCount: number, # Required. Number of text elements recognized in the document.
        ///             transactionsCount: number, # Required. Number of transactions for the document.
        ///           }
        ///         ], # Required. If showStats=true was specified in the request this field will contain information about the document payload.
        ///         sentiment: DocumentSentimentValue, # Required. Predicted sentiment for document.
        ///         sentences: [
        ///           {
        ///             text: string, # Required. The sentence text.
        ///             sentiment: SentenceSentimentValue, # Required. The predicted sentiment for the sentence.
        ///             confidenceScores: {
        ///               positive: number, # Required.
        ///               negative: number, # Required.
        ///               neutral: number, # Required.
        ///             }, # Required. The sentiment confidence score between 0 and 1 for the sentence for all classes.
        ///             offset: number, # Required. The sentence offset from the start of the document.
        ///             length: number, # Required. The length of the sentence.
        ///             targets: [
        ///               {
        ///                 sentiment: TokenSentimentValue, # Required. Targeted sentiment in the sentence.
        ///                 confidenceScores: {
        ///                   positive: number, # Required.
        ///                   negative: number, # Required.
        ///                 }, # Required. Target sentiment confidence scores for the target in the sentence.
        ///                 offset: number, # Required. The target offset from the start of the sentence.
        ///                 length: number, # Required. The length of the target.
        ///                 text: string, # Required. The target text detected.
        ///                 relations: [
        ///                   {
        ///                     relationType: TargetRelationType, # Required. The type related to the target.
        ///                     ref: string, # Required. The JSON pointer indicating the linked object.
        ///                   }
        ///                 ], # Required. The array of either assessment or target objects which is related to the target.
        ///               }
        ///             ], # Optional. The array of sentence targets for the sentence.
        ///             assessements: [
        ///               {
        ///                 sentiment: TokenSentimentValue, # Required. Assessment sentiment in the sentence.
        ///                 confidenceScores: TargetConfidenceScoreLabel, # Required. Assessment sentiment confidence scores in the sentence.
        ///                 offset: number, # Required. The assessment offset from the start of the sentence.
        ///                 length: number, # Required. The length of the assessment.
        ///                 text: string, # Required. The assessment text detected.
        ///                 isNegated: boolean, # Required. The indicator representing if the assessment is negated.
        ///               }
        ///             ], # Optional. The array of assessments for the sentence.
        ///           }
        ///         ], # Required. Sentence level sentiment analysis.
        ///         confidenceScores: SentimentConfidenceScorePerLabel, # Required. Document level sentiment confidence scores between 0 and 1 for each sentiment class.
        ///       }
        ///     ], # Required. Response by document.
        ///     errors: [
        ///       {
        ///         id: string, # Required. Document id.
        ///         error: {
        ///           message: string, # Required. Error message.
        ///           code: &quot;InvalidRequest&quot; | &quot;InvalidArgument&quot; | &quot;Unauthorized&quot; | &quot;Forbidden&quot; | &quot;NotFound&quot; | &quot;ProjectNotFound&quot; | &quot;OperationNotFound&quot; | &quot;AzureCognitiveServiceNotFound&quot; | &quot;AzureCognitiveSearchIndexNotFound&quot; | &quot;TooManyRequests&quot; | &quot;AzureCognitiveSearchThrottling&quot; | &quot;AzureCognitiveSearchIndexLimitReached&quot; | &quot;InternalServerError&quot; | &quot;ServiceUnavailable&quot;, # Required. Error code.
        ///           details: Dictionary&lt;string, string&gt;, # Optional. Error details.
        ///           target: string, # Optional. Error target.
        ///           innererror: {
        ///             message: string, # Required. Error message.
        ///             code: &quot;InvalidRequest&quot; | &quot;InvalidParameterValue&quot; | &quot;KnowledgeBaseNotFound&quot; | &quot;AzureCognitiveSearchNotFound&quot; | &quot;AzureCognitiveSearchThrottling&quot; | &quot;ExtractionFailure&quot; | &quot;InvalidRequestBodyFormat&quot; | &quot;EmptyRequest&quot; | &quot;MissingInputDocuments&quot; | &quot;InvalidDocument&quot; | &quot;ModelVersionIncorrect&quot; | &quot;InvalidDocumentBatch&quot; | &quot;UnsupportedLanguageCode&quot; | &quot;InvalidCountryHint&quot;, # Required. Error code.
        ///             details: Dictionary&lt;string, string&gt;, # Optional. Error details.
        ///             target: string, # Optional. Error target.
        ///             innererror: InnerError, # Optional. Inner error contains more specific information.
        ///           }, # Optional. Inner error contains more specific information.
        ///         }, # Required. Document error.
        ///       }
        ///     ], # Required. Errors by document id.
        ///     statistics: {
        ///       documentsCount: number, # Required. Number of documents submitted in the request.
        ///       validDocumentsCount: number, # Required. Number of valid documents. This excludes empty, over-size limit or non-supported languages documents.
        ///       erroneousDocumentsCount: number, # Required. Number of invalid documents. This includes empty, over-size limit or non-supported languages documents.
        ///       transactionsCount: number, # Required. Number of transactions for the request.
        ///     }, # Optional. If showStats=true was specified in the request this field will contain information about the request payload.
        ///     modelVersion: string, # Required. This field indicates which model is used for scoring.
        ///   }, # Required.
        /// }
        /// </code>
        /// </details>
        /// </details>
        /// 
        /// </remarks>
        public virtual async Task<Response> AnalyzeTextAsync(RequestContent content, bool? showStats = null, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("AnalyzeClient.AnalyzeText");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAnalyzeTextRequest(content, showStats, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Submit a collection of text documents for analysis.  Specify a single unique task to be executed immediately. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="showStats"> If set to true, response will contain request and document level statistics. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
        /// <details><summary>CustomSingleLabelClassificationJob</summary>Schema for <c>CustomSingleLabelClassificationJob</c>:
        /// <code>{
        ///   kind: string, # Required. Discriminator property for AnalyzeTextTask.
        ///   analysisInput: {
        ///     documents: [
        ///       {
        ///         id: string, # Required. A unique, non-empty document identifier.
        ///         text: string, # Required. The input text to process.
        ///         language: string, # Optional. This is the 2 letter ISO 639-1 representation of a language. 
        /// 
        /// For example, use &quot;en&quot; for English; &quot;es&quot; for Spanish etc. z,an
        /// If not set, use &quot;en&quot; for English as default.&quot;
        ///       }
        ///     ], # Required. Collection of documents to analyze.
        ///   }, # Required.
        ///   parameters: {
        ///     loggingOptOut: boolean, # Optional. If set to true, you opt-out of having your text input logged for troubleshooting.
        ///     projectName: string, # Required.
        ///     deploymentName: string, # Required.
        ///   }, # Required. Parameters object for a text analysis task using custom models.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>~+ 6 more JSON objects</summary><details><summary>EntityLinkingTask</summary>Schema for <c>EntityLinkingTask</c>:
        /// <code>{
        ///   kind: string, # Required. Discriminator property for AnalyzeTextTask.
        ///   analysisInput: {
        ///     documents: [
        ///       {
        ///         id: string, # Required. A unique, non-empty document identifier.
        ///         text: string, # Required. The input text to process.
        ///         language: string, # Optional. This is the 2 letter ISO 639-1 representation of a language. 
        /// 
        /// For example, use &quot;en&quot; for English; &quot;es&quot; for Spanish etc. z,an
        /// If not set, use &quot;en&quot; for English as default.&quot;
        ///       }
        ///     ], # Required. Collection of documents to analyze.
        ///   }, # Required.
        ///   parameters: {
        ///     loggingOptOut: boolean, # Optional. If set to true, you opt-out of having your text input logged for troubleshooting.
        ///     modelVersion: string, # Optional. This field indicates which model is used for scoring.
        ///     stringIndexType: &quot;TextElement_v8&quot; | &quot;UnicodeCodePoint&quot; | &quot;Utf16CodeUnit&quot;, # Optional. Specifies the method used to interpret string offsets.
        /// 
        /// Defaults to grapheme clusters according to Unicode v8.0.0.
        /// For additional information see https://aka.ms/text-analytics-offsets
        ///   }, # Required. Supported parameters for an Entity Linking task.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>EntityRecognitionTask</summary>Schema for <c>EntityRecognitionTask</c>:
        /// <code>{
        ///   kind: string, # Required. Discriminator property for AnalyzeTextTask.
        ///   analysisInput: {
        ///     documents: [
        ///       {
        ///         id: string, # Required. A unique, non-empty document identifier.
        ///         text: string, # Required. The input text to process.
        ///         language: string, # Optional. This is the 2 letter ISO 639-1 representation of a language. 
        /// 
        /// For example, use &quot;en&quot; for English; &quot;es&quot; for Spanish etc. z,an
        /// If not set, use &quot;en&quot; for English as default.&quot;
        ///       }
        ///     ], # Required. Collection of documents to analyze.
        ///   }, # Required.
        ///   parameters: {
        ///     loggingOptOut: boolean, # Optional. If set to true, you opt-out of having your text input logged for troubleshooting.
        ///     modelVersion: string, # Optional. This field indicates which model is used for scoring.
        ///     stringIndexType: &quot;TextElement_v8&quot; | &quot;UnicodeCodePoint&quot; | &quot;Utf16CodeUnit&quot;, # Optional. Specifies the method used to interpret string offsets.
        /// 
        /// Defaults to grapheme clusters according to Unicode v8.0.0.
        /// For additional information see https://aka.ms/text-analytics-offsets
        ///   }, # Required. Supported parameters for an Entity Recognition task.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>KeyPhraseExtractionTask</summary>Schema for <c>KeyPhraseExtractionTask</c>:
        /// <code>{
        ///   kind: string, # Required. Discriminator property for AnalyzeTextTask.
        ///   analysisInput: {
        ///     documents: [
        ///       {
        ///         id: string, # Required. A unique, non-empty document identifier.
        ///         text: string, # Required. The input text to process.
        ///         language: string, # Optional. This is the 2 letter ISO 639-1 representation of a language. 
        /// 
        /// For example, use &quot;en&quot; for English; &quot;es&quot; for Spanish etc. z,an
        /// If not set, use &quot;en&quot; for English as default.&quot;
        ///       }
        ///     ], # Required. Collection of documents to analyze.
        ///   }, # Required.
        ///   parameters: {
        ///     loggingOptOut: boolean, # Optional. If set to true, you opt-out of having your text input logged for troubleshooting.
        ///     modelVersion: string, # Optional. This field indicates which model is used for scoring.
        ///   }, # Required. Parameters object for a text analysis task using pre-built models.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>LanguageDetectionTask</summary>Schema for <c>LanguageDetectionTask</c>:
        /// <code>{
        ///   kind: string, # Required. Discriminator property for AnalyzeTextTask.
        ///   analysisInput: {
        ///     documents: [
        ///       {
        ///         id: string, # Required. A unique, non-empty document identifier.
        ///         text: string, # Required. The input text to process.
        ///         countryHint: string, # Optional. This is the 2 letter ISO 639-1 representation of a language. 
        /// 
        /// For example, use &quot;en&quot; for English; &quot;es&quot; for Spanish etc. z,an
        /// If not set, use &quot;en&quot; for English as default.&quot;
        ///       }
        ///     ], # Required. Collection of documents to analyze.
        ///   }, # Required.
        ///   parameters: {
        ///     loggingOptOut: boolean, # Optional. If set to true, you opt-out of having your text input logged for troubleshooting.
        ///     modelVersion: string, # Optional. This field indicates which model is used for scoring.
        ///   }, # Required. Parameters object for a text analysis task using pre-built models.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>PiiEntityRecognitionTask</summary>Schema for <c>PiiEntityRecognitionTask</c>:
        /// <code>{
        ///   kind: string, # Required. Discriminator property for AnalyzeTextTask.
        ///   analysisInput: {
        ///     documents: [
        ///       {
        ///         id: string, # Required. A unique, non-empty document identifier.
        ///         text: string, # Required. The input text to process.
        ///         language: string, # Optional. This is the 2 letter ISO 639-1 representation of a language. 
        /// 
        /// For example, use &quot;en&quot; for English; &quot;es&quot; for Spanish etc. z,an
        /// If not set, use &quot;en&quot; for English as default.&quot;
        ///       }
        ///     ], # Required. Collection of documents to analyze.
        ///   }, # Required.
        ///   parameters: {
        ///     loggingOptOut: boolean, # Optional. If set to true, you opt-out of having your text input logged for troubleshooting.
        ///     modelVersion: string, # Optional. This field indicates which model is used for scoring.
        ///     stringIndexType: &quot;TextElement_v8&quot; | &quot;UnicodeCodePoint&quot; | &quot;Utf16CodeUnit&quot;, # Optional. Specifies the method used to interpret string offsets.
        /// 
        /// Defaults to grapheme clusters according to Unicode v8.0.0.
        /// For additional information see https://aka.ms/text-analytics-offsets
        ///     domain: &quot;phi&quot; | &quot;none&quot;, # Optional. If specified, will set the PII domain to include only a subset of the entity categories.
        ///     piiCategories: [&quot;ABARoutingNumber&quot; | &quot;ARNationalIdentityNumber&quot; | &quot;AUBankAccountNumber&quot; | &quot;AUDriversLicenseNumber&quot; | &quot;AUMedicalAccountNumber&quot; | &quot;AUPassportNumber&quot; | &quot;AUTaxFileNumber&quot; | &quot;AUBusinessNumber&quot; | &quot;AUCompanyNumber&quot; | &quot;ATIdentityCard&quot; | &quot;ATTaxIdentificationNumber&quot; | &quot;ATValueAddedTaxNumber&quot; | &quot;AzureDocumentDBAuthKey&quot; | &quot;AzureIAASDatabaseConnectionAndSQLString&quot; | &quot;AzureIoTConnectionString&quot; | &quot;AzurePublishSettingPassword&quot; | &quot;AzureRedisCacheString&quot; | &quot;AzureSAS&quot; | &quot;AzureServiceBusString&quot; | &quot;AzureStorageAccountKey&quot; | &quot;AzureStorageAccountGeneric&quot; | &quot;BENationalNumber&quot; | &quot;BENationalNumberV2&quot; | &quot;BEValueAddedTaxNumber&quot; | &quot;BRCPFNumber&quot; | &quot;BRLegalEntityNumber&quot; | &quot;BRNationalIDRG&quot; | &quot;BGUniformCivilNumber&quot; | &quot;CABankAccountNumber&quot; | &quot;CADriversLicenseNumber&quot; | &quot;CAHealthServiceNumber&quot; | &quot;CAPassportNumber&quot; | &quot;CAPersonalHealthIdentification&quot; | &quot;CASocialInsuranceNumber&quot; | &quot;CLIdentityCardNumber&quot; | &quot;CNResidentIdentityCardNumber&quot; | &quot;CreditCardNumber&quot; | &quot;HRIdentityCardNumber&quot; | &quot;HRNationalIDNumber&quot; | &quot;HRPersonalIdentificationNumber&quot; | &quot;HRPersonalIdentificationOIBNumberV2&quot; | &quot;CYIdentityCard&quot; | &quot;CYTaxIdentificationNumber&quot; | &quot;CZPersonalIdentityNumber&quot; | &quot;CZPersonalIdentityV2&quot; | &quot;DKPersonalIdentificationNumber&quot; | &quot;DKPersonalIdentificationV2&quot; | &quot;DrugEnforcementAgencyNumber&quot; | &quot;EEPersonalIdentificationCode&quot; | &quot;EUDebitCardNumber&quot; | &quot;EUDriversLicenseNumber&quot; | &quot;EUGPSCoordinates&quot; | &quot;EUNationalIdentificationNumber&quot; | &quot;EUPassportNumber&quot; | &quot;EUSocialSecurityNumber&quot; | &quot;EUTaxIdentificationNumber&quot; | &quot;FIEuropeanHealthNumber&quot; | &quot;FINationalID&quot; | &quot;FINationalIDV2&quot; | &quot;FIPassportNumber&quot; | &quot;FRDriversLicenseNumber&quot; | &quot;FRHealthInsuranceNumber&quot; | &quot;FRNationalID&quot; | &quot;FRPassportNumber&quot; | &quot;FRSocialSecurityNumber&quot; | &quot;FRTaxIdentificationNumber&quot; | &quot;FRValueAddedTaxNumber&quot; | &quot;DEDriversLicenseNumber&quot; | &quot;DEPassportNumber&quot; | &quot;DEIdentityCardNumber&quot; | &quot;DETaxIdentificationNumber&quot; | &quot;DEValueAddedNumber&quot; | &quot;GRNationalIDCard&quot; | &quot;GRNationalIDV2&quot; | &quot;GRTaxIdentificationNumber&quot; | &quot;HKIdentityCardNumber&quot; | &quot;HUValueAddedNumber&quot; | &quot;HUPersonalIdentificationNumber&quot; | &quot;HUTaxIdentificationNumber&quot; | &quot;INPermanentAccount&quot; | &quot;INUniqueIdentificationNumber&quot; | &quot;IDIdentityCardNumber&quot; | &quot;InternationalBankingAccountNumber&quot; | &quot;IEPersonalPublicServiceNumber&quot; | &quot;IEPersonalPublicServiceNumberV2&quot; | &quot;ILBankAccountNumber&quot; | &quot;ILNationalID&quot; | &quot;ITDriversLicenseNumber&quot; | &quot;ITFiscalCode&quot; | &quot;ITValueAddedTaxNumber&quot; | &quot;JPBankAccountNumber&quot; | &quot;JPDriversLicenseNumber&quot; | &quot;JPPassportNumber&quot; | &quot;JPResidentRegistrationNumber&quot; | &quot;JPSocialInsuranceNumber&quot; | &quot;JPMyNumberCorporate&quot; | &quot;JPMyNumberPersonal&quot; | &quot;JPResidenceCardNumber&quot; | &quot;LVPersonalCode&quot; | &quot;LTPersonalCode&quot; | &quot;LUNationalIdentificationNumberNatural&quot; | &quot;LUNationalIdentificationNumberNonNatural&quot; | &quot;MYIdentityCardNumber&quot; | &quot;MTIdentityCardNumber&quot; | &quot;MTTaxIDNumber&quot; | &quot;NLCitizensServiceNumber&quot; | &quot;NLCitizensServiceNumberV2&quot; | &quot;NLTaxIdentificationNumber&quot; | &quot;NLValueAddedTaxNumber&quot; | &quot;NZBankAccountNumber&quot; | &quot;NZDriversLicenseNumber&quot; | &quot;NZInlandRevenueNumber&quot; | &quot;NZMinistryOfHealthNumber&quot; | &quot;NZSocialWelfareNumber&quot; | &quot;NOIdentityNumber&quot; | &quot;PHUnifiedMultiPurposeIDNumber&quot; | &quot;PLIdentityCard&quot; | &quot;PLNationalID&quot; | &quot;PLNationalIDV2&quot; | &quot;PLPassportNumber&quot; | &quot;PLTaxIdentificationNumber&quot; | &quot;PLREGONNumber&quot; | &quot;PTCitizenCardNumber&quot; | &quot;PTCitizenCardNumberV2&quot; | &quot;PTTaxIdentificationNumber&quot; | &quot;ROPersonalNumericalCode&quot; | &quot;RUPassportNumberDomestic&quot; | &quot;RUPassportNumberInternational&quot; | &quot;SANationalID&quot; | &quot;SGNationalRegistrationIdentityCardNumber&quot; | &quot;SKPersonalNumber&quot; | &quot;SITaxIdentificationNumber&quot; | &quot;SIUniqueMasterCitizenNumber&quot; | &quot;ZAIdentificationNumber&quot; | &quot;KRResidentRegistrationNumber&quot; | &quot;ESDNI&quot; | &quot;ESSocialSecurityNumber&quot; | &quot;ESTaxIdentificationNumber&quot; | &quot;SQLServerConnectionString&quot; | &quot;SENationalID&quot; | &quot;SENationalIDV2&quot; | &quot;SEPassportNumber&quot; | &quot;SETaxIdentificationNumber&quot; | &quot;SWIFTCode&quot; | &quot;CHSocialSecurityNumber&quot; | &quot;TWNationalID&quot; | &quot;TWPassportNumber&quot; | &quot;TWResidentCertificate&quot; | &quot;THPopulationIdentificationCode&quot; | &quot;TRNationalIdentificationNumber&quot; | &quot;UKDriversLicenseNumber&quot; | &quot;UKElectoralRollNumber&quot; | &quot;UKNationalHealthNumber&quot; | &quot;UKNationalInsuranceNumber&quot; | &quot;UKUniqueTaxpayerNumber&quot; | &quot;USUKPassportNumber&quot; | &quot;USBankAccountNumber&quot; | &quot;USDriversLicenseNumber&quot; | &quot;USIndividualTaxpayerIdentification&quot; | &quot;USSocialSecurityNumber&quot; | &quot;UAPassportNumberDomestic&quot; | &quot;UAPassportNumberInternational&quot; | &quot;Organization&quot; | &quot;Email&quot; | &quot;URL&quot; | &quot;Age&quot; | &quot;PhoneNumber&quot; | &quot;IPAddress&quot; | &quot;Date&quot; | &quot;Person&quot; | &quot;Address&quot; | &quot;All&quot; | &quot;Default&quot;], # Optional. Describes the PII categories to return.
        ///   }, # Required. Supported parameters for a PII Entities Recognition task.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>SentimentAnalysisTask</summary>Schema for <c>SentimentAnalysisTask</c>:
        /// <code>{
        ///   kind: string, # Required. Discriminator property for AnalyzeTextTask.
        ///   analysisInput: {
        ///     documents: [
        ///       {
        ///         id: string, # Required. A unique, non-empty document identifier.
        ///         text: string, # Required. The input text to process.
        ///         language: string, # Optional. This is the 2 letter ISO 639-1 representation of a language. 
        /// 
        /// For example, use &quot;en&quot; for English; &quot;es&quot; for Spanish etc. z,an
        /// If not set, use &quot;en&quot; for English as default.&quot;
        ///       }
        ///     ], # Required. Collection of documents to analyze.
        ///   }, # Required.
        ///   parameters: {
        ///     loggingOptOut: boolean, # Optional. If set to true, you opt-out of having your text input logged for troubleshooting.
        ///     modelVersion: string, # Optional. This field indicates which model is used for scoring.
        ///     stringIndexType: &quot;TextElement_v8&quot; | &quot;UnicodeCodePoint&quot; | &quot;Utf16CodeUnit&quot;, # Optional. Specifies the method used to interpret string offsets.
        /// 
        /// Defaults to grapheme clusters according to Unicode v8.0.0.
        /// For additional information see https://aka.ms/text-analytics-offsets
        ///     opinionMining: boolean, # Optional. A boolean for opinion mining.
        ///   }, # Required. Supported parameters for a Sentiment Analysis task.
        /// }
        /// </code>
        /// </details>
        /// </details>
        /// 
        /// Response Body:
        /// 
        /// This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
        /// <details><summary>EntityLinkingTaskResult</summary>Schema for <c>EntityLinkingTaskResult</c>:
        /// <code>{
        ///   kind: string, # Required. Discriminator property for AnalyzeTextTaskResult.
        ///   results: {
        ///     documents: [
        ///       {
        ///         id: string, # Required. Unique, non-empty document identifier.
        ///         warnings: [
        ///           {
        ///             code: &quot;LongWordsInDocument&quot; | &quot;DocumentTruncated&quot;, # Required. Warning code.
        ///             message: string, # Required. Warning message.
        ///             targetRef: string, # Optional. A JSON pointer reference indicating the target object.
        ///           }
        ///         ], # Required. Warnings encountered while processing document.
        ///         statistics: [
        ///           {
        ///             charactersCount: number, # Required. Number of text elements recognized in the document.
        ///             transactionsCount: number, # Required. Number of transactions for the document.
        ///           }
        ///         ], # Required. If showStats=true was specified in the request this field will contain information about the document payload.
        ///         entities: [
        ///           {
        ///             name: string, # Required. Entity Linking formal name.
        ///             matches: [
        ///               {
        ///                 confidenceScore: number, # Required. If a well known item is recognized, a decimal number denoting the confidence level between 0 and 1 will be returned.
        ///                 text: string, # Required. Entity text as appears in the request.
        ///                 offset: number, # Required. Start position for the entity match text
        ///                 length: number, # Required. Length for the entity match text.
        ///               }
        ///             ], # Required. List of instances this entity appears in the text.
        ///             language: string, # Required. Language used in the data source.
        ///             id: string, # Optional. Unique identifier of the recognized entity from the data source.
        ///             url: string, # Required. URL for the entity&apos;s page from the data source.
        ///             dataSource: string, # Required. Data source used to extract entity linking, such as Wiki/Bing etc.
        ///             bingId: string, # Optional. Bing Entity Search API unique identifier of the recognized entity.
        ///           }
        ///         ], # Required. Recognized well known entities in the document.
        ///       }
        ///     ], # Required. Response by document.
        ///     errors: [
        ///       {
        ///         id: string, # Required. Document id.
        ///         error: {
        ///           message: string, # Required. Error message.
        ///           code: &quot;InvalidRequest&quot; | &quot;InvalidArgument&quot; | &quot;Unauthorized&quot; | &quot;Forbidden&quot; | &quot;NotFound&quot; | &quot;ProjectNotFound&quot; | &quot;OperationNotFound&quot; | &quot;AzureCognitiveServiceNotFound&quot; | &quot;AzureCognitiveSearchIndexNotFound&quot; | &quot;TooManyRequests&quot; | &quot;AzureCognitiveSearchThrottling&quot; | &quot;AzureCognitiveSearchIndexLimitReached&quot; | &quot;InternalServerError&quot; | &quot;ServiceUnavailable&quot;, # Required. Error code.
        ///           details: Dictionary&lt;string, string&gt;, # Optional. Error details.
        ///           target: string, # Optional. Error target.
        ///           innererror: {
        ///             message: string, # Required. Error message.
        ///             code: &quot;InvalidRequest&quot; | &quot;InvalidParameterValue&quot; | &quot;KnowledgeBaseNotFound&quot; | &quot;AzureCognitiveSearchNotFound&quot; | &quot;AzureCognitiveSearchThrottling&quot; | &quot;ExtractionFailure&quot; | &quot;InvalidRequestBodyFormat&quot; | &quot;EmptyRequest&quot; | &quot;MissingInputDocuments&quot; | &quot;InvalidDocument&quot; | &quot;ModelVersionIncorrect&quot; | &quot;InvalidDocumentBatch&quot; | &quot;UnsupportedLanguageCode&quot; | &quot;InvalidCountryHint&quot;, # Required. Error code.
        ///             details: Dictionary&lt;string, string&gt;, # Optional. Error details.
        ///             target: string, # Optional. Error target.
        ///             innererror: InnerError, # Optional. Inner error contains more specific information.
        ///           }, # Optional. Inner error contains more specific information.
        ///         }, # Required. Document error.
        ///       }
        ///     ], # Required. Errors by document id.
        ///     statistics: {
        ///       documentsCount: number, # Required. Number of documents submitted in the request.
        ///       validDocumentsCount: number, # Required. Number of valid documents. This excludes empty, over-size limit or non-supported languages documents.
        ///       erroneousDocumentsCount: number, # Required. Number of invalid documents. This includes empty, over-size limit or non-supported languages documents.
        ///       transactionsCount: number, # Required. Number of transactions for the request.
        ///     }, # Optional. If showStats=true was specified in the request this field will contain information about the request payload.
        ///     modelVersion: string, # Required. This field indicates which model is used for scoring.
        ///   }, # Required.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>~+ 5 more JSON objects</summary><details><summary>EntityRecognitionTaskResult</summary>Schema for <c>EntityRecognitionTaskResult</c>:
        /// <code>{
        ///   kind: string, # Required. Discriminator property for AnalyzeTextTaskResult.
        ///   results: {
        ///     documents: [
        ///       {
        ///         id: string, # Required. Unique, non-empty document identifier.
        ///         warnings: [
        ///           {
        ///             code: &quot;LongWordsInDocument&quot; | &quot;DocumentTruncated&quot;, # Required. Warning code.
        ///             message: string, # Required. Warning message.
        ///             targetRef: string, # Optional. A JSON pointer reference indicating the target object.
        ///           }
        ///         ], # Required. Warnings encountered while processing document.
        ///         statistics: [
        ///           {
        ///             charactersCount: number, # Required. Number of text elements recognized in the document.
        ///             transactionsCount: number, # Required. Number of transactions for the document.
        ///           }
        ///         ], # Required. If showStats=true was specified in the request this field will contain information about the document payload.
        ///         entities: [
        ///           {
        ///             text: string, # Required. Entity text as appears in the request.
        ///             category: string, # Required. Entity type.
        ///             subcategory: string, # Optional. Entity sub type.
        ///             offset: number, # Required. Start position for the entity text. 
        /// Use of different &apos;stringIndexType&apos; values can affect the offset returned.
        ///             length: number, # Required. Length for the entity text. 
        /// Use of different &apos;stringIndexType&apos; values can affect the length returned.
        ///             confidenceScore: number, # Required. Confidence score between 0 and 1 of the extracted entity.
        ///           }
        ///         ], # Required. Recognized entities in the document.
        ///       }
        ///     ], # Required. Response by document.
        ///     errors: [
        ///       {
        ///         id: string, # Required. Document id.
        ///         error: {
        ///           message: string, # Required. Error message.
        ///           code: &quot;InvalidRequest&quot; | &quot;InvalidArgument&quot; | &quot;Unauthorized&quot; | &quot;Forbidden&quot; | &quot;NotFound&quot; | &quot;ProjectNotFound&quot; | &quot;OperationNotFound&quot; | &quot;AzureCognitiveServiceNotFound&quot; | &quot;AzureCognitiveSearchIndexNotFound&quot; | &quot;TooManyRequests&quot; | &quot;AzureCognitiveSearchThrottling&quot; | &quot;AzureCognitiveSearchIndexLimitReached&quot; | &quot;InternalServerError&quot; | &quot;ServiceUnavailable&quot;, # Required. Error code.
        ///           details: Dictionary&lt;string, string&gt;, # Optional. Error details.
        ///           target: string, # Optional. Error target.
        ///           innererror: {
        ///             message: string, # Required. Error message.
        ///             code: &quot;InvalidRequest&quot; | &quot;InvalidParameterValue&quot; | &quot;KnowledgeBaseNotFound&quot; | &quot;AzureCognitiveSearchNotFound&quot; | &quot;AzureCognitiveSearchThrottling&quot; | &quot;ExtractionFailure&quot; | &quot;InvalidRequestBodyFormat&quot; | &quot;EmptyRequest&quot; | &quot;MissingInputDocuments&quot; | &quot;InvalidDocument&quot; | &quot;ModelVersionIncorrect&quot; | &quot;InvalidDocumentBatch&quot; | &quot;UnsupportedLanguageCode&quot; | &quot;InvalidCountryHint&quot;, # Required. Error code.
        ///             details: Dictionary&lt;string, string&gt;, # Optional. Error details.
        ///             target: string, # Optional. Error target.
        ///             innererror: InnerError, # Optional. Inner error contains more specific information.
        ///           }, # Optional. Inner error contains more specific information.
        ///         }, # Required. Document error.
        ///       }
        ///     ], # Required. Errors by document id.
        ///     statistics: {
        ///       documentsCount: number, # Required. Number of documents submitted in the request.
        ///       validDocumentsCount: number, # Required. Number of valid documents. This excludes empty, over-size limit or non-supported languages documents.
        ///       erroneousDocumentsCount: number, # Required. Number of invalid documents. This includes empty, over-size limit or non-supported languages documents.
        ///       transactionsCount: number, # Required. Number of transactions for the request.
        ///     }, # Optional. If showStats=true was specified in the request this field will contain information about the request payload.
        ///     modelVersion: string, # Required. This field indicates which model is used for scoring.
        ///   }, # Required.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>KeyPhraseExtractionTaskResult</summary>Schema for <c>KeyPhraseExtractionTaskResult</c>:
        /// <code>{
        ///   kind: string, # Required. Discriminator property for AnalyzeTextTaskResult.
        ///   results: {
        ///     documents: [
        ///       {
        ///         id: string, # Required. Unique, non-empty document identifier.
        ///         warnings: [
        ///           {
        ///             code: &quot;LongWordsInDocument&quot; | &quot;DocumentTruncated&quot;, # Required. Warning code.
        ///             message: string, # Required. Warning message.
        ///             targetRef: string, # Optional. A JSON pointer reference indicating the target object.
        ///           }
        ///         ], # Required. Warnings encountered while processing document.
        ///         statistics: [
        ///           {
        ///             charactersCount: number, # Required. Number of text elements recognized in the document.
        ///             transactionsCount: number, # Required. Number of transactions for the document.
        ///           }
        ///         ], # Required. If showStats=true was specified in the request this field will contain information about the document payload.
        ///         keyPhrases: [string], # Required. A list of representative words or phrases. The number of key phrases returned is proportional to the number of words in the input document.
        ///       }
        ///     ], # Required. Response by document.
        ///     errors: [
        ///       {
        ///         id: string, # Required. Document id.
        ///         error: {
        ///           message: string, # Required. Error message.
        ///           code: &quot;InvalidRequest&quot; | &quot;InvalidArgument&quot; | &quot;Unauthorized&quot; | &quot;Forbidden&quot; | &quot;NotFound&quot; | &quot;ProjectNotFound&quot; | &quot;OperationNotFound&quot; | &quot;AzureCognitiveServiceNotFound&quot; | &quot;AzureCognitiveSearchIndexNotFound&quot; | &quot;TooManyRequests&quot; | &quot;AzureCognitiveSearchThrottling&quot; | &quot;AzureCognitiveSearchIndexLimitReached&quot; | &quot;InternalServerError&quot; | &quot;ServiceUnavailable&quot;, # Required. Error code.
        ///           details: Dictionary&lt;string, string&gt;, # Optional. Error details.
        ///           target: string, # Optional. Error target.
        ///           innererror: {
        ///             message: string, # Required. Error message.
        ///             code: &quot;InvalidRequest&quot; | &quot;InvalidParameterValue&quot; | &quot;KnowledgeBaseNotFound&quot; | &quot;AzureCognitiveSearchNotFound&quot; | &quot;AzureCognitiveSearchThrottling&quot; | &quot;ExtractionFailure&quot; | &quot;InvalidRequestBodyFormat&quot; | &quot;EmptyRequest&quot; | &quot;MissingInputDocuments&quot; | &quot;InvalidDocument&quot; | &quot;ModelVersionIncorrect&quot; | &quot;InvalidDocumentBatch&quot; | &quot;UnsupportedLanguageCode&quot; | &quot;InvalidCountryHint&quot;, # Required. Error code.
        ///             details: Dictionary&lt;string, string&gt;, # Optional. Error details.
        ///             target: string, # Optional. Error target.
        ///             innererror: InnerError, # Optional. Inner error contains more specific information.
        ///           }, # Optional. Inner error contains more specific information.
        ///         }, # Required. Document error.
        ///       }
        ///     ], # Required. Errors by document id.
        ///     statistics: {
        ///       documentsCount: number, # Required. Number of documents submitted in the request.
        ///       validDocumentsCount: number, # Required. Number of valid documents. This excludes empty, over-size limit or non-supported languages documents.
        ///       erroneousDocumentsCount: number, # Required. Number of invalid documents. This includes empty, over-size limit or non-supported languages documents.
        ///       transactionsCount: number, # Required. Number of transactions for the request.
        ///     }, # Optional. If showStats=true was specified in the request this field will contain information about the request payload.
        ///     modelVersion: string, # Required. This field indicates which model is used for scoring.
        ///   }, # Required.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>LanguageDetectionTaskResult</summary>Schema for <c>LanguageDetectionTaskResult</c>:
        /// <code>{
        ///   kind: string, # Required. Discriminator property for AnalyzeTextTaskResult.
        ///   results: {
        ///     documents: [
        ///       {
        ///         id: string, # Required. Unique, non-empty document identifier.
        ///         warnings: [
        ///           {
        ///             code: &quot;LongWordsInDocument&quot; | &quot;DocumentTruncated&quot;, # Required. Warning code.
        ///             message: string, # Required. Warning message.
        ///             targetRef: string, # Optional. A JSON pointer reference indicating the target object.
        ///           }
        ///         ], # Required. Warnings encountered while processing document.
        ///         statistics: [
        ///           {
        ///             charactersCount: number, # Required. Number of text elements recognized in the document.
        ///             transactionsCount: number, # Required. Number of transactions for the document.
        ///           }
        ///         ], # Required. If showStats=true was specified in the request this field will contain information about the document payload.
        ///         detectedLanguage: [
        ///           {
        ///             name: string, # Required. Long name of a detected language (e.g. English, French).
        ///             iso6391Name: string, # Required. A two letter representation of the detected language according to the ISO 639-1 
        /// standard (e.g. en, fr).
        ///             confidenceScore: number, # Required. A confidence score between 0 and 1. 
        /// 
        /// Scores close to 1 indicate 100% certainty that the identified language is true.
        ///           }
        ///         ], # Required. Detected Language.
        ///       }
        ///     ], # Required. Response by document.
        ///     errors: [
        ///       {
        ///         id: string, # Required. Document id.
        ///         error: {
        ///           message: string, # Required. Error message.
        ///           code: &quot;InvalidRequest&quot; | &quot;InvalidArgument&quot; | &quot;Unauthorized&quot; | &quot;Forbidden&quot; | &quot;NotFound&quot; | &quot;ProjectNotFound&quot; | &quot;OperationNotFound&quot; | &quot;AzureCognitiveServiceNotFound&quot; | &quot;AzureCognitiveSearchIndexNotFound&quot; | &quot;TooManyRequests&quot; | &quot;AzureCognitiveSearchThrottling&quot; | &quot;AzureCognitiveSearchIndexLimitReached&quot; | &quot;InternalServerError&quot; | &quot;ServiceUnavailable&quot;, # Required. Error code.
        ///           details: Dictionary&lt;string, string&gt;, # Optional. Error details.
        ///           target: string, # Optional. Error target.
        ///           innererror: {
        ///             message: string, # Required. Error message.
        ///             code: &quot;InvalidRequest&quot; | &quot;InvalidParameterValue&quot; | &quot;KnowledgeBaseNotFound&quot; | &quot;AzureCognitiveSearchNotFound&quot; | &quot;AzureCognitiveSearchThrottling&quot; | &quot;ExtractionFailure&quot; | &quot;InvalidRequestBodyFormat&quot; | &quot;EmptyRequest&quot; | &quot;MissingInputDocuments&quot; | &quot;InvalidDocument&quot; | &quot;ModelVersionIncorrect&quot; | &quot;InvalidDocumentBatch&quot; | &quot;UnsupportedLanguageCode&quot; | &quot;InvalidCountryHint&quot;, # Required. Error code.
        ///             details: Dictionary&lt;string, string&gt;, # Optional. Error details.
        ///             target: string, # Optional. Error target.
        ///             innererror: InnerError, # Optional. Inner error contains more specific information.
        ///           }, # Optional. Inner error contains more specific information.
        ///         }, # Required. Document error.
        ///       }
        ///     ], # Required. Errors by document id.
        ///     statistics: {
        ///       documentsCount: number, # Required. Number of documents submitted in the request.
        ///       validDocumentsCount: number, # Required. Number of valid documents. This excludes empty, over-size limit or non-supported languages documents.
        ///       erroneousDocumentsCount: number, # Required. Number of invalid documents. This includes empty, over-size limit or non-supported languages documents.
        ///       transactionsCount: number, # Required. Number of transactions for the request.
        ///     }, # Optional. If showStats=true was specified in the request this field will contain information about the request payload.
        ///     modelVersion: string, # Required. This field indicates which model is used for scoring.
        ///   }, # Required.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>PiiEntityRecognitionTaskResult</summary>Schema for <c>PiiEntityRecognitionTaskResult</c>:
        /// <code>{
        ///   kind: string, # Required. Discriminator property for AnalyzeTextTaskResult.
        ///   results: {
        ///     documents: [
        ///       {
        ///         id: string, # Required. Unique, non-empty document identifier.
        ///         warnings: [
        ///           {
        ///             code: &quot;LongWordsInDocument&quot; | &quot;DocumentTruncated&quot;, # Required. Warning code.
        ///             message: string, # Required. Warning message.
        ///             targetRef: string, # Optional. A JSON pointer reference indicating the target object.
        ///           }
        ///         ], # Required. Warnings encountered while processing document.
        ///         statistics: [
        ///           {
        ///             charactersCount: number, # Required. Number of text elements recognized in the document.
        ///             transactionsCount: number, # Required. Number of transactions for the document.
        ///           }
        ///         ], # Required. If showStats=true was specified in the request this field will contain information about the document payload.
        ///         redactedText: string, # Optional. Returns redacted text.
        ///         entities: [
        ///           {
        ///             text: string, # Required. Entity text as appears in the request.
        ///             category: string, # Required. Entity type.
        ///             subcategory: string, # Optional. Entity sub type.
        ///             offset: number, # Required. Start position for the entity text. 
        /// Use of different &apos;stringIndexType&apos; values can affect the offset returned.
        ///             length: number, # Required. Length for the entity text. 
        /// Use of different &apos;stringIndexType&apos; values can affect the length returned.
        ///             confidenceScore: number, # Required. Confidence score between 0 and 1 of the extracted entity.
        ///           }
        ///         ], # Required. Recognized entities in the document.
        ///       }
        ///     ], # Required. Response by document.
        ///     errors: [
        ///       {
        ///         id: string, # Required. Document id.
        ///         error: {
        ///           message: string, # Required. Error message.
        ///           code: &quot;InvalidRequest&quot; | &quot;InvalidArgument&quot; | &quot;Unauthorized&quot; | &quot;Forbidden&quot; | &quot;NotFound&quot; | &quot;ProjectNotFound&quot; | &quot;OperationNotFound&quot; | &quot;AzureCognitiveServiceNotFound&quot; | &quot;AzureCognitiveSearchIndexNotFound&quot; | &quot;TooManyRequests&quot; | &quot;AzureCognitiveSearchThrottling&quot; | &quot;AzureCognitiveSearchIndexLimitReached&quot; | &quot;InternalServerError&quot; | &quot;ServiceUnavailable&quot;, # Required. Error code.
        ///           details: Dictionary&lt;string, string&gt;, # Optional. Error details.
        ///           target: string, # Optional. Error target.
        ///           innererror: {
        ///             message: string, # Required. Error message.
        ///             code: &quot;InvalidRequest&quot; | &quot;InvalidParameterValue&quot; | &quot;KnowledgeBaseNotFound&quot; | &quot;AzureCognitiveSearchNotFound&quot; | &quot;AzureCognitiveSearchThrottling&quot; | &quot;ExtractionFailure&quot; | &quot;InvalidRequestBodyFormat&quot; | &quot;EmptyRequest&quot; | &quot;MissingInputDocuments&quot; | &quot;InvalidDocument&quot; | &quot;ModelVersionIncorrect&quot; | &quot;InvalidDocumentBatch&quot; | &quot;UnsupportedLanguageCode&quot; | &quot;InvalidCountryHint&quot;, # Required. Error code.
        ///             details: Dictionary&lt;string, string&gt;, # Optional. Error details.
        ///             target: string, # Optional. Error target.
        ///             innererror: InnerError, # Optional. Inner error contains more specific information.
        ///           }, # Optional. Inner error contains more specific information.
        ///         }, # Required. Document error.
        ///       }
        ///     ], # Required. Errors by document id.
        ///     statistics: {
        ///       documentsCount: number, # Required. Number of documents submitted in the request.
        ///       validDocumentsCount: number, # Required. Number of valid documents. This excludes empty, over-size limit or non-supported languages documents.
        ///       erroneousDocumentsCount: number, # Required. Number of invalid documents. This includes empty, over-size limit or non-supported languages documents.
        ///       transactionsCount: number, # Required. Number of transactions for the request.
        ///     }, # Optional. If showStats=true was specified in the request this field will contain information about the request payload.
        ///     modelVersion: string, # Required. This field indicates which model is used for scoring.
        ///   }, # Required.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>SentimentAnalysisTaskResult</summary>Schema for <c>SentimentAnalysisTaskResult</c>:
        /// <code>{
        ///   kind: string, # Required. Discriminator property for AnalyzeTextTaskResult.
        ///   results: {
        ///     documents: [
        ///       {
        ///         id: string, # Required. Unique, non-empty document identifier.
        ///         warnings: [
        ///           {
        ///             code: &quot;LongWordsInDocument&quot; | &quot;DocumentTruncated&quot;, # Required. Warning code.
        ///             message: string, # Required. Warning message.
        ///             targetRef: string, # Optional. A JSON pointer reference indicating the target object.
        ///           }
        ///         ], # Required. Warnings encountered while processing document.
        ///         statistics: [
        ///           {
        ///             charactersCount: number, # Required. Number of text elements recognized in the document.
        ///             transactionsCount: number, # Required. Number of transactions for the document.
        ///           }
        ///         ], # Required. If showStats=true was specified in the request this field will contain information about the document payload.
        ///         sentiment: DocumentSentimentValue, # Required. Predicted sentiment for document.
        ///         sentences: [
        ///           {
        ///             text: string, # Required. The sentence text.
        ///             sentiment: SentenceSentimentValue, # Required. The predicted sentiment for the sentence.
        ///             confidenceScores: {
        ///               positive: number, # Required.
        ///               negative: number, # Required.
        ///               neutral: number, # Required.
        ///             }, # Required. The sentiment confidence score between 0 and 1 for the sentence for all classes.
        ///             offset: number, # Required. The sentence offset from the start of the document.
        ///             length: number, # Required. The length of the sentence.
        ///             targets: [
        ///               {
        ///                 sentiment: TokenSentimentValue, # Required. Targeted sentiment in the sentence.
        ///                 confidenceScores: {
        ///                   positive: number, # Required.
        ///                   negative: number, # Required.
        ///                 }, # Required. Target sentiment confidence scores for the target in the sentence.
        ///                 offset: number, # Required. The target offset from the start of the sentence.
        ///                 length: number, # Required. The length of the target.
        ///                 text: string, # Required. The target text detected.
        ///                 relations: [
        ///                   {
        ///                     relationType: TargetRelationType, # Required. The type related to the target.
        ///                     ref: string, # Required. The JSON pointer indicating the linked object.
        ///                   }
        ///                 ], # Required. The array of either assessment or target objects which is related to the target.
        ///               }
        ///             ], # Optional. The array of sentence targets for the sentence.
        ///             assessements: [
        ///               {
        ///                 sentiment: TokenSentimentValue, # Required. Assessment sentiment in the sentence.
        ///                 confidenceScores: TargetConfidenceScoreLabel, # Required. Assessment sentiment confidence scores in the sentence.
        ///                 offset: number, # Required. The assessment offset from the start of the sentence.
        ///                 length: number, # Required. The length of the assessment.
        ///                 text: string, # Required. The assessment text detected.
        ///                 isNegated: boolean, # Required. The indicator representing if the assessment is negated.
        ///               }
        ///             ], # Optional. The array of assessments for the sentence.
        ///           }
        ///         ], # Required. Sentence level sentiment analysis.
        ///         confidenceScores: SentimentConfidenceScorePerLabel, # Required. Document level sentiment confidence scores between 0 and 1 for each sentiment class.
        ///       }
        ///     ], # Required. Response by document.
        ///     errors: [
        ///       {
        ///         id: string, # Required. Document id.
        ///         error: {
        ///           message: string, # Required. Error message.
        ///           code: &quot;InvalidRequest&quot; | &quot;InvalidArgument&quot; | &quot;Unauthorized&quot; | &quot;Forbidden&quot; | &quot;NotFound&quot; | &quot;ProjectNotFound&quot; | &quot;OperationNotFound&quot; | &quot;AzureCognitiveServiceNotFound&quot; | &quot;AzureCognitiveSearchIndexNotFound&quot; | &quot;TooManyRequests&quot; | &quot;AzureCognitiveSearchThrottling&quot; | &quot;AzureCognitiveSearchIndexLimitReached&quot; | &quot;InternalServerError&quot; | &quot;ServiceUnavailable&quot;, # Required. Error code.
        ///           details: Dictionary&lt;string, string&gt;, # Optional. Error details.
        ///           target: string, # Optional. Error target.
        ///           innererror: {
        ///             message: string, # Required. Error message.
        ///             code: &quot;InvalidRequest&quot; | &quot;InvalidParameterValue&quot; | &quot;KnowledgeBaseNotFound&quot; | &quot;AzureCognitiveSearchNotFound&quot; | &quot;AzureCognitiveSearchThrottling&quot; | &quot;ExtractionFailure&quot; | &quot;InvalidRequestBodyFormat&quot; | &quot;EmptyRequest&quot; | &quot;MissingInputDocuments&quot; | &quot;InvalidDocument&quot; | &quot;ModelVersionIncorrect&quot; | &quot;InvalidDocumentBatch&quot; | &quot;UnsupportedLanguageCode&quot; | &quot;InvalidCountryHint&quot;, # Required. Error code.
        ///             details: Dictionary&lt;string, string&gt;, # Optional. Error details.
        ///             target: string, # Optional. Error target.
        ///             innererror: InnerError, # Optional. Inner error contains more specific information.
        ///           }, # Optional. Inner error contains more specific information.
        ///         }, # Required. Document error.
        ///       }
        ///     ], # Required. Errors by document id.
        ///     statistics: {
        ///       documentsCount: number, # Required. Number of documents submitted in the request.
        ///       validDocumentsCount: number, # Required. Number of valid documents. This excludes empty, over-size limit or non-supported languages documents.
        ///       erroneousDocumentsCount: number, # Required. Number of invalid documents. This includes empty, over-size limit or non-supported languages documents.
        ///       transactionsCount: number, # Required. Number of transactions for the request.
        ///     }, # Optional. If showStats=true was specified in the request this field will contain information about the request payload.
        ///     modelVersion: string, # Required. This field indicates which model is used for scoring.
        ///   }, # Required.
        /// }
        /// </code>
        /// </details>
        /// </details>
        /// 
        /// </remarks>
        public virtual Response AnalyzeText(RequestContent content, bool? showStats = null, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("AnalyzeClient.AnalyzeText");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAnalyzeTextRequest(content, showStats, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Submit a collection of text documents for analysis. Specify one or more unique tasks to be executed as a long-running operation. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>JobSubmission</c>:
        /// <code>{
        ///   displayName: string, # Optional. Optional display name for the analysis job.
        ///   analysisInput: {
        ///     id: string, # Required. A unique, non-empty document identifier.
        ///     text: string, # Required. The input text to process.
        ///     language: string, # Optional. This is the 2 letter ISO 639-1 representation of a language. 
        /// 
        /// For example, use &quot;en&quot; for English; &quot;es&quot; for Spanish etc. z,an
        /// If not set, use &quot;en&quot; for English as default.&quot;
        ///   }, # Required.
        ///   tasks: [
        ///     {
        ///       kind: string, # Required. Discriminator property for AnalyzeTextJob.
        ///       taskName: string, # Required.
        ///     }
        ///   ], # Required. The set of tasks to execute on the input documents.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> SubmitJobAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("AnalyzeClient.SubmitJob");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSubmitJobRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Submit a collection of text documents for analysis. Specify one or more unique tasks to be executed as a long-running operation. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>JobSubmission</c>:
        /// <code>{
        ///   displayName: string, # Optional. Optional display name for the analysis job.
        ///   analysisInput: {
        ///     id: string, # Required. A unique, non-empty document identifier.
        ///     text: string, # Required. The input text to process.
        ///     language: string, # Optional. This is the 2 letter ISO 639-1 representation of a language. 
        /// 
        /// For example, use &quot;en&quot; for English; &quot;es&quot; for Spanish etc. z,an
        /// If not set, use &quot;en&quot; for English as default.&quot;
        ///   }, # Required.
        ///   tasks: [
        ///     {
        ///       kind: string, # Required. Discriminator property for AnalyzeTextJob.
        ///       taskName: string, # Required.
        ///     }
        ///   ], # Required. The set of tasks to execute on the input documents.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response SubmitJob(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("AnalyzeClient.SubmitJob");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSubmitJobRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the status of an analysis job.  A job may consist of one or more tasks.  Once all tasks are succeeded, the job will transition to the succeeded state and results will be available for each task. </summary>
        /// <param name="jobId"> Job ID. </param>
        /// <param name="top"> The maximum number of resources to return from the collection. </param>
        /// <param name="skip"> An offset into the collection of the first resource to be returned. </param>
        /// <param name="showStats"> If set to true, response will contain request and document level statistics. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>JobStatus</c>:
        /// <code>{
        ///   displayName: string, # Optional.
        ///   createdDateTime: string (ISO 8601 Format), # Required.
        ///   expirationDateTime: string (ISO 8601 Format), # Optional.
        ///   lastUpdateDateTime: string (ISO 8601 Format), # Required.
        ///   jobId: string, # Required.
        ///   status: &quot;notStarted&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;partiallySucceeded&quot; | &quot;failed&quot; | &quot;cancelled&quot; | &quot;cancelling&quot;, # Required.
        ///   errors: [
        ///     {
        ///       message: string, # Required. Error message.
        ///       code: &quot;InvalidRequest&quot; | &quot;InvalidArgument&quot; | &quot;Unauthorized&quot; | &quot;Forbidden&quot; | &quot;NotFound&quot; | &quot;ProjectNotFound&quot; | &quot;OperationNotFound&quot; | &quot;AzureCognitiveServiceNotFound&quot; | &quot;AzureCognitiveSearchIndexNotFound&quot; | &quot;TooManyRequests&quot; | &quot;AzureCognitiveSearchThrottling&quot; | &quot;AzureCognitiveSearchIndexLimitReached&quot; | &quot;InternalServerError&quot; | &quot;ServiceUnavailable&quot;, # Required. Error code.
        ///       details: Dictionary&lt;string, string&gt;, # Optional. Error details.
        ///       target: string, # Optional. Error target.
        ///       innererror: {
        ///         message: string, # Required. Error message.
        ///         code: &quot;InvalidRequest&quot; | &quot;InvalidParameterValue&quot; | &quot;KnowledgeBaseNotFound&quot; | &quot;AzureCognitiveSearchNotFound&quot; | &quot;AzureCognitiveSearchThrottling&quot; | &quot;ExtractionFailure&quot; | &quot;InvalidRequestBodyFormat&quot; | &quot;EmptyRequest&quot; | &quot;MissingInputDocuments&quot; | &quot;InvalidDocument&quot; | &quot;ModelVersionIncorrect&quot; | &quot;InvalidDocumentBatch&quot; | &quot;UnsupportedLanguageCode&quot; | &quot;InvalidCountryHint&quot;, # Required. Error code.
        ///         details: Dictionary&lt;string, string&gt;, # Optional. Error details.
        ///         target: string, # Optional. Error target.
        ///         innererror: InnerError, # Optional. Inner error contains more specific information.
        ///       }, # Optional. Inner error contains more specific information.
        ///     }
        ///   ], # Optional.
        ///   @nextLink: string, # Required.
        ///   tasks: {
        ///     completed: number, # Required.
        ///     failed: number, # Required.
        ///     inProgress: number, # Required.
        ///     total: number, # Required.
        ///     items: [
        ///       {
        ///         kind: string, # Required. Discriminator property for AnalyzeTextJobResult.
        ///         taskName: string, # Required.
        ///         lastUpdateDateTime: string (ISO 8601 Format), # Required.
        ///         status: &quot;notStarted&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;partiallySucceeded&quot; | &quot;failed&quot; | &quot;cancelled&quot; | &quot;cancelling&quot;, # Required.
        ///       }
        ///     ], # Optional.
        ///   }, # Required.
        ///   statistics: {
        ///     documentsCount: number, # Required. Number of documents submitted in the request.
        ///     validDocumentsCount: number, # Required. Number of valid documents. This excludes empty, over-size limit or non-supported languages documents.
        ///     erroneousDocumentsCount: number, # Required. Number of invalid documents. This includes empty, over-size limit or non-supported languages documents.
        ///     transactionsCount: number, # Required. Number of transactions for the request.
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetJobStatusAsync(string jobId, int? top = null, int? skip = null, bool? showStats = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            using var scope = ClientDiagnostics.CreateScope("AnalyzeClient.GetJobStatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetJobStatusRequest(jobId, top, skip, showStats, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the status of an analysis job.  A job may consist of one or more tasks.  Once all tasks are succeeded, the job will transition to the succeeded state and results will be available for each task. </summary>
        /// <param name="jobId"> Job ID. </param>
        /// <param name="top"> The maximum number of resources to return from the collection. </param>
        /// <param name="skip"> An offset into the collection of the first resource to be returned. </param>
        /// <param name="showStats"> If set to true, response will contain request and document level statistics. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>JobStatus</c>:
        /// <code>{
        ///   displayName: string, # Optional.
        ///   createdDateTime: string (ISO 8601 Format), # Required.
        ///   expirationDateTime: string (ISO 8601 Format), # Optional.
        ///   lastUpdateDateTime: string (ISO 8601 Format), # Required.
        ///   jobId: string, # Required.
        ///   status: &quot;notStarted&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;partiallySucceeded&quot; | &quot;failed&quot; | &quot;cancelled&quot; | &quot;cancelling&quot;, # Required.
        ///   errors: [
        ///     {
        ///       message: string, # Required. Error message.
        ///       code: &quot;InvalidRequest&quot; | &quot;InvalidArgument&quot; | &quot;Unauthorized&quot; | &quot;Forbidden&quot; | &quot;NotFound&quot; | &quot;ProjectNotFound&quot; | &quot;OperationNotFound&quot; | &quot;AzureCognitiveServiceNotFound&quot; | &quot;AzureCognitiveSearchIndexNotFound&quot; | &quot;TooManyRequests&quot; | &quot;AzureCognitiveSearchThrottling&quot; | &quot;AzureCognitiveSearchIndexLimitReached&quot; | &quot;InternalServerError&quot; | &quot;ServiceUnavailable&quot;, # Required. Error code.
        ///       details: Dictionary&lt;string, string&gt;, # Optional. Error details.
        ///       target: string, # Optional. Error target.
        ///       innererror: {
        ///         message: string, # Required. Error message.
        ///         code: &quot;InvalidRequest&quot; | &quot;InvalidParameterValue&quot; | &quot;KnowledgeBaseNotFound&quot; | &quot;AzureCognitiveSearchNotFound&quot; | &quot;AzureCognitiveSearchThrottling&quot; | &quot;ExtractionFailure&quot; | &quot;InvalidRequestBodyFormat&quot; | &quot;EmptyRequest&quot; | &quot;MissingInputDocuments&quot; | &quot;InvalidDocument&quot; | &quot;ModelVersionIncorrect&quot; | &quot;InvalidDocumentBatch&quot; | &quot;UnsupportedLanguageCode&quot; | &quot;InvalidCountryHint&quot;, # Required. Error code.
        ///         details: Dictionary&lt;string, string&gt;, # Optional. Error details.
        ///         target: string, # Optional. Error target.
        ///         innererror: InnerError, # Optional. Inner error contains more specific information.
        ///       }, # Optional. Inner error contains more specific information.
        ///     }
        ///   ], # Optional.
        ///   @nextLink: string, # Required.
        ///   tasks: {
        ///     completed: number, # Required.
        ///     failed: number, # Required.
        ///     inProgress: number, # Required.
        ///     total: number, # Required.
        ///     items: [
        ///       {
        ///         kind: string, # Required. Discriminator property for AnalyzeTextJobResult.
        ///         taskName: string, # Required.
        ///         lastUpdateDateTime: string (ISO 8601 Format), # Required.
        ///         status: &quot;notStarted&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;partiallySucceeded&quot; | &quot;failed&quot; | &quot;cancelled&quot; | &quot;cancelling&quot;, # Required.
        ///       }
        ///     ], # Optional.
        ///   }, # Required.
        ///   statistics: {
        ///     documentsCount: number, # Required. Number of documents submitted in the request.
        ///     validDocumentsCount: number, # Required. Number of valid documents. This excludes empty, over-size limit or non-supported languages documents.
        ///     erroneousDocumentsCount: number, # Required. Number of invalid documents. This includes empty, over-size limit or non-supported languages documents.
        ///     transactionsCount: number, # Required. Number of transactions for the request.
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetJobStatus(string jobId, int? top = null, int? skip = null, bool? showStats = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            using var scope = ClientDiagnostics.CreateScope("AnalyzeClient.GetJobStatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetJobStatusRequest(jobId, top, skip, showStats, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Cancel a long-running Text Analysis job. </summary>
        /// <param name="jobId"> Job ID. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> CancelJobAsync(string jobId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            using var scope = ClientDiagnostics.CreateScope("AnalyzeClient.CancelJob");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCancelJobRequest(jobId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Cancel a long-running Text Analysis job. </summary>
        /// <param name="jobId"> Job ID. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response CancelJob(string jobId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            using var scope = ClientDiagnostics.CreateScope("AnalyzeClient.CancelJob");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCancelJobRequest(jobId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateAnalyzeTextRequest(RequestContent content, bool? showStats, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/language", false);
            uri.AppendPath("/:analyze-text", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (showStats != null)
            {
                uri.AppendQuery("showStats", showStats.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateSubmitJobRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/language", false);
            uri.AppendPath("/analyze-text/jobs", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetJobStatusRequest(string jobId, int? top, int? skip, bool? showStats, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/language", false);
            uri.AppendPath("/analyze-text/jobs/", false);
            uri.AppendPath(jobId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (top != null)
            {
                uri.AppendQuery("top", top.Value, true);
            }
            if (skip != null)
            {
                uri.AppendQuery("skip", skip.Value, true);
            }
            if (showStats != null)
            {
                uri.AppendQuery("showStats", showStats.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCancelJobRequest(string jobId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/language", false);
            uri.AppendPath("/analyze-text/jobs/", false);
            uri.AppendPath(jobId, true);
            uri.AppendPath(":cancel", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier202;
        private static ResponseClassifier ResponseClassifier202 => _responseClassifier202 ??= new StatusCodeClassifier(stackalloc ushort[] { 202 });
    }
}
