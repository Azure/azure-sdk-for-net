// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Template.Models;

namespace Azure.Template
{
    /// <summary> The ListPetToysResponse service client. </summary>
    public partial class ListPetToysResponseClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal ListPetToysResponseRestClient RestClient { get; }

        /// <summary> Initializes a new instance of ListPetToysResponseClient for mocking. </summary>
        protected ListPetToysResponseClient()
        {
        }

        /// <summary> Initializes a new instance of ListPetToysResponseClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public ListPetToysResponseClient(TokenCredential credential, Uri endpoint = null, PetStoreServiceClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            endpoint ??= new Uri("");

            options ??= new PetStoreServiceClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://vault.azure.net/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new ListPetToysResponseRestClient(_clientDiagnostics, _pipeline, endpoint);
        }

        /// <summary> Initializes a new instance of ListPetToysResponseClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
        internal ListPetToysResponseClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            RestClient = new ListPetToysResponseRestClient(clientDiagnostics, pipeline, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <param name="petId"> The String to use. </param>
        /// <param name="nameFilter"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ToyListResults>> ListAsync(string petId, string nameFilter, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ListPetToysResponseClient.List");
            scope.Start();
            try
            {
                return await RestClient.ListAsync(petId, nameFilter, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="petId"> The String to use. </param>
        /// <param name="nameFilter"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ToyListResults> List(string petId, string nameFilter, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ListPetToysResponseClient.List");
            scope.Start();
            try
            {
                return RestClient.List(petId, nameFilter, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
