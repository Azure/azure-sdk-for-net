// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Communication.JobRouter.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class CommunicationJobRouterModelFactory
    {
        /// <summary> Initializes a new instance of ClassificationPolicy. </summary>
        /// <param name="id"> Unique identifier of this policy. </param>
        /// <param name="name"> Friendly name of this policy. </param>
        /// <param name="fallbackQueueId"> The fallback queue to select if the queue selector doesn't find a match. </param>
        /// <param name="queueSelectors">
        /// The queue selectors to resolve a queue for a given job.
        /// Please note <see cref="QueueSelectorAttachment"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ConditionalQueueSelectorAttachment"/>, <see cref="PassThroughQueueSelectorAttachment"/>, <see cref="RuleEngineQueueSelectorAttachment"/>, <see cref="StaticQueueSelectorAttachment"/> and <see cref="WeightedAllocationQueueSelectorAttachment"/>.
        /// </param>
        /// <param name="prioritizationRule">
        /// A rule of one of the following types:
        ///
        /// StaticRule:  A rule providing static rules that always return the same result, regardless of input.
        /// DirectMapRule:  A rule that return the same labels as the input labels.
        /// ExpressionRule: A rule providing inline expression rules.
        /// AzureFunctionRule: A rule providing a binding to an HTTP Triggered Azure Function.
        /// WebhookRule: A rule providing a binding to a webserver following OAuth2.0 authentication protocol.
        /// Please note <see cref="RouterRule"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FunctionRouterRule"/>, <see cref="DirectMapRouterRule"/>, <see cref="ExpressionRouterRule"/>, <see cref="StaticRouterRule"/> and <see cref="WebhookRouterRule"/>.
        /// </param>
        /// <param name="workerSelectors">
        /// The worker label selectors to attach to a given job.
        /// Please note <see cref="WorkerSelectorAttachment"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ConditionalWorkerSelectorAttachment"/>, <see cref="PassThroughWorkerSelectorAttachment"/>, <see cref="RuleEngineWorkerSelectorAttachment"/>, <see cref="StaticWorkerSelectorAttachment"/> and <see cref="WeightedAllocationWorkerSelectorAttachment"/>.
        /// </param>
        /// <returns> A new <see cref="Models.ClassificationPolicy"/> instance for mocking. </returns>
        public static ClassificationPolicy ClassificationPolicy(string id = null, string name = null, string fallbackQueueId = null, IEnumerable<QueueSelectorAttachment> queueSelectors = null, RouterRule prioritizationRule = null, IEnumerable<WorkerSelectorAttachment> workerSelectors = null)
        {
            queueSelectors ??= new List<QueueSelectorAttachment>();
            workerSelectors ??= new List<WorkerSelectorAttachment>();

            return new ClassificationPolicy(id, name, fallbackQueueId, queueSelectors?.ToList(), prioritizationRule, workerSelectors?.ToList());
        }

        /// <summary> Initializes a new instance of ClassificationPolicyItem. </summary>
        /// <param name="classificationPolicy"> A container for the rules that govern how jobs are classified. </param>
        /// <param name="etag"> (Optional) The Concurrency Token. </param>
        /// <returns> A new <see cref="Models.ClassificationPolicyItem"/> instance for mocking. </returns>
        public static ClassificationPolicyItem ClassificationPolicyItem(ClassificationPolicy classificationPolicy = null, string etag = null)
        {
            return new ClassificationPolicyItem(classificationPolicy, etag);
        }

        /// <summary> Initializes a new instance of DistributionPolicy. </summary>
        /// <param name="id"> The unique identifier of the policy. </param>
        /// <param name="name"> The human readable name of the policy. </param>
        /// <param name="offerExpiresAfterSeconds"> The number of seconds after which any offers created under this policy will be expired. </param>
        /// <param name="mode">
        /// Abstract base class for defining a distribution mode
        /// Please note <see cref="DistributionMode"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="BestWorkerMode"/>, <see cref="LongestIdleMode"/> and <see cref="RoundRobinMode"/>.
        /// </param>
        /// <returns> A new <see cref="Models.DistributionPolicy"/> instance for mocking. </returns>
        public static DistributionPolicy DistributionPolicy(string id = null, string name = null, double? offerExpiresAfterSeconds = null, DistributionMode mode = null)
        {
            return new DistributionPolicy(id, name, offerExpiresAfterSeconds, mode);
        }

        /// <summary> Initializes a new instance of DistributionPolicyItem. </summary>
        /// <param name="distributionPolicy"> Policy governing how jobs are distributed to workers. </param>
        /// <param name="etag"> (Optional) The Concurrency Token. </param>
        /// <returns> A new <see cref="Models.DistributionPolicyItem"/> instance for mocking. </returns>
        public static DistributionPolicyItem DistributionPolicyItem(DistributionPolicy distributionPolicy = null, string etag = null)
        {
            return new DistributionPolicyItem(distributionPolicy, etag);
        }

        /// <summary> Initializes a new instance of ExceptionPolicy. </summary>
        /// <param name="id"> The Id of the exception policy. </param>
        /// <param name="name"> (Optional) The name of the exception policy. </param>
        /// <param name="exceptionRules"> (Optional) A dictionary collection of exception rules on the exception policy. Key is the Id of each exception rule. </param>
        /// <returns> A new <see cref="Models.ExceptionPolicy"/> instance for mocking. </returns>
        public static ExceptionPolicy ExceptionPolicy(string id = null, string name = null, IDictionary<string, ExceptionRule> exceptionRules = null)
        {
            exceptionRules ??= new Dictionary<string, ExceptionRule>();

            return new ExceptionPolicy(id, name, exceptionRules);
        }

        /// <summary> Initializes a new instance of ExceptionPolicyItem. </summary>
        /// <param name="exceptionPolicy"> A policy that defines actions to execute when exception are triggered. </param>
        /// <param name="etag"> (Optional) The Concurrency Token. </param>
        /// <returns> A new <see cref="Models.ExceptionPolicyItem"/> instance for mocking. </returns>
        public static ExceptionPolicyItem ExceptionPolicyItem(ExceptionPolicy exceptionPolicy = null, string etag = null)
        {
            return new ExceptionPolicyItem(exceptionPolicy, etag);
        }

        /// <summary> Initializes a new instance of RouterJob. </summary>
        /// <param name="id"> The id of the job. </param>
        /// <param name="channelReference"> Reference to an external parent context, eg. call ID. </param>
        /// <param name="status"> The status of the Job. </param>
        /// <param name="enqueuedAt"> The time a job was queued in UTC. </param>
        /// <param name="channelId"> The channel identifier. eg. voice, chat, etc. </param>
        /// <param name="classificationPolicyId"> The Id of the Classification policy used for classifying a job. </param>
        /// <param name="queueId"> The Id of the Queue that this job is queued to. </param>
        /// <param name="priority"> The priority of this job. </param>
        /// <param name="dispositionCode"> Reason code for cancelled or closed jobs. </param>
        /// <param name="requestedWorkerSelectors"> A collection of manually specified label selectors, which a worker must satisfy in order to process this job. </param>
        /// <param name="attachedWorkerSelectors"> A collection of label selectors attached by a classification policy, which a worker must satisfy in order to process this job. </param>
        /// <param name="labels"> A set of key/value pairs that are identifying attributes used by the rules engines to make decisions. </param>
        /// <param name="assignments">
        /// A collection of the assignments of the job.
        /// Key is AssignmentId.
        /// </param>
        /// <param name="tags"> A set of non-identifying attributes attached to this job. </param>
        /// <param name="notes"> Notes attached to a job, sorted by timestamp. </param>
        /// <param name="scheduledAt"> If set, job will be scheduled to be enqueued at a given time. </param>
        /// <param name="matchingMode"></param>
        /// <returns> A new <see cref="Models.RouterJob"/> instance for mocking. </returns>
        public static RouterJob RouterJob(string id = null, string channelReference = null, RouterJobStatus? status = null, DateTimeOffset? enqueuedAt = null, string channelId = null, string classificationPolicyId = null, string queueId = null, int? priority = null, string dispositionCode = null, IEnumerable<RouterWorkerSelector> requestedWorkerSelectors = null, IEnumerable<RouterWorkerSelector> attachedWorkerSelectors = null, IDictionary<string, object> labels = null, IReadOnlyDictionary<string, RouterJobAssignment> assignments = null, IDictionary<string, object> tags = null, IDictionary<string, string> notes = null, DateTimeOffset? scheduledAt = null, JobMatchingMode matchingMode = null)
        {
            requestedWorkerSelectors ??= new List<RouterWorkerSelector>();
            attachedWorkerSelectors ??= new List<RouterWorkerSelector>();
            labels ??= new Dictionary<string, object>();
            assignments ??= new Dictionary<string, RouterJobAssignment>();
            tags ??= new Dictionary<string, object>();
            notes ??= new Dictionary<string, string>();

            return new RouterJob(id, channelReference, status, enqueuedAt, channelId, classificationPolicyId, queueId, priority, dispositionCode, requestedWorkerSelectors?.ToList(), attachedWorkerSelectors?.ToList(), labels, assignments, tags, notes, scheduledAt, matchingMode);
        }

        /// <summary> Initializes a new instance of RouterWorkerSelector. </summary>
        /// <param name="key"> The label key to query against. </param>
        /// <param name="labelOperator"> Describes how the value of the label is compared to the value defined on the label selector. </param>
        /// <param name="value"> The value to compare against the actual label value with the given operator. </param>
        /// <param name="expiresAfterSeconds"> Describes how long this label selector is valid in seconds. </param>
        /// <param name="expedite"> Pushes the job to the front of the queue as long as this selector is active. </param>
        /// <param name="status"> The status of the worker selector. </param>
        /// <param name="expiresAt"> The time at which this worker selector expires in UTC. </param>
        /// <returns> A new <see cref="Models.RouterWorkerSelector"/> instance for mocking. </returns>
        public static RouterWorkerSelector RouterWorkerSelector(string key = null, LabelOperator labelOperator = default, object value = null, double? expiresAfterSeconds = null, bool? expedite = null, RouterWorkerSelectorStatus? status = null, DateTimeOffset? expiresAt = null)
        {
            return new RouterWorkerSelector(key, labelOperator, value, expiresAfterSeconds, expedite, status, expiresAt);
        }

        /// <summary> Initializes a new instance of RouterJobAssignment. </summary>
        /// <param name="assignmentId"> The Id of the job assignment. </param>
        /// <param name="workerId"> The Id of the Worker assigned to the job. </param>
        /// <param name="assignedAt"> The assignment time of the job in UTC. </param>
        /// <param name="completedAt"> The time the job was marked as completed after being assigned in UTC. </param>
        /// <param name="closedAt"> The time the job was marked as closed after being completed in UTC. </param>
        /// <returns> A new <see cref="Models.RouterJobAssignment"/> instance for mocking. </returns>
        public static RouterJobAssignment RouterJobAssignment(string assignmentId = null, string workerId = null, DateTimeOffset assignedAt = default, DateTimeOffset? completedAt = null, DateTimeOffset? closedAt = null)
        {
            return new RouterJobAssignment(assignmentId, workerId, assignedAt, completedAt, closedAt);
        }

        /// <summary> Initializes a new instance of RouterJobItem. </summary>
        /// <param name="job"> A unit of work to be routed. </param>
        /// <param name="etag"> (Optional) The Concurrency Token. </param>
        /// <returns> A new <see cref="Models.RouterJobItem"/> instance for mocking. </returns>
        public static RouterJobItem RouterJobItem(RouterJob job = null, string etag = null)
        {
            return new RouterJobItem(job, etag);
        }

        /// <summary> Initializes a new instance of RouterJobPositionDetails. </summary>
        /// <param name="jobId"> Id of the job these details are about. </param>
        /// <param name="position"> Position of the job in question within that queue. </param>
        /// <param name="queueId"> Id of the queue this job is enqueued in. </param>
        /// <param name="queueLength"> Length of the queue: total number of enqueued jobs. </param>
        /// <param name="estimatedWaitTimeMinutes"> Estimated wait time of the job rounded up to the nearest minute. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="queueId"/> is null. </exception>
        /// <returns> A new <see cref="Models.RouterJobPositionDetails"/> instance for mocking. </returns>
        public static RouterJobPositionDetails RouterJobPositionDetails(string jobId = null, int position = default, string queueId = null, int queueLength = default, double estimatedWaitTimeMinutes = default)
        {
            if (jobId == null)
            {
                throw new ArgumentNullException(nameof(jobId));
            }
            if (queueId == null)
            {
                throw new ArgumentNullException(nameof(queueId));
            }

            return new RouterJobPositionDetails(jobId, position, queueId, queueLength, estimatedWaitTimeMinutes);
        }

        /// <summary> Initializes a new instance of UnassignJobResult. </summary>
        /// <param name="jobId"> The Id of the job unassigned. </param>
        /// <param name="unassignmentCount"> The number of times a job is unassigned. At a maximum 3. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <returns> A new <see cref="Models.UnassignJobResult"/> instance for mocking. </returns>
        public static UnassignJobResult UnassignJobResult(string jobId = null, int unassignmentCount = default)
        {
            if (jobId == null)
            {
                throw new ArgumentNullException(nameof(jobId));
            }

            return new UnassignJobResult(jobId, unassignmentCount);
        }

        /// <summary> Initializes a new instance of AcceptJobOfferResult. </summary>
        /// <param name="assignmentId"> The assignment Id that assigns a worker that has accepted an offer to a job. </param>
        /// <param name="jobId"> The Id of the job assigned. </param>
        /// <param name="workerId"> The Id of the worker that has been assigned this job. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assignmentId"/>, <paramref name="jobId"/> or <paramref name="workerId"/> is null. </exception>
        /// <returns> A new <see cref="Models.AcceptJobOfferResult"/> instance for mocking. </returns>
        public static AcceptJobOfferResult AcceptJobOfferResult(string assignmentId = null, string jobId = null, string workerId = null)
        {
            if (assignmentId == null)
            {
                throw new ArgumentNullException(nameof(assignmentId));
            }
            if (jobId == null)
            {
                throw new ArgumentNullException(nameof(jobId));
            }
            if (workerId == null)
            {
                throw new ArgumentNullException(nameof(workerId));
            }

            return new AcceptJobOfferResult(assignmentId, jobId, workerId);
        }

        /// <summary> Initializes a new instance of RouterQueue. </summary>
        /// <param name="id"> The Id of this queue. </param>
        /// <param name="name"> The name of this queue. </param>
        /// <param name="distributionPolicyId"> The ID of the distribution policy that will determine how a job is distributed to workers. </param>
        /// <param name="labels"> A set of key/value pairs that are identifying attributes used by the rules engines to make decisions. </param>
        /// <param name="exceptionPolicyId"> (Optional) The ID of the exception policy that determines various job escalation rules. </param>
        /// <returns> A new <see cref="Models.RouterQueue"/> instance for mocking. </returns>
        public static RouterQueue RouterQueue(string id = null, string name = null, string distributionPolicyId = null, IDictionary<string, object> labels = null, string exceptionPolicyId = null)
        {
            labels ??= new Dictionary<string, object>();

            return new RouterQueue(id, name, distributionPolicyId, labels, exceptionPolicyId);
        }

        /// <summary> Initializes a new instance of RouterQueueItem. </summary>
        /// <param name="queue"> A queue that can contain jobs to be routed. </param>
        /// <param name="etag"> (Optional) The Concurrency Token. </param>
        /// <returns> A new <see cref="Models.RouterQueueItem"/> instance for mocking. </returns>
        public static RouterQueueItem RouterQueueItem(RouterQueue queue = null, string etag = null)
        {
            return new RouterQueueItem(queue, etag);
        }

        /// <summary> Initializes a new instance of RouterQueueStatistics. </summary>
        /// <param name="queueId"> Id of the queue these details are about. </param>
        /// <param name="length"> Length of the queue: total number of enqueued jobs. </param>
        /// <param name="estimatedWaitTimeMinutes"> The estimated wait time of this queue rounded up to the nearest minute, grouped by job priority. </param>
        /// <param name="longestJobWaitTimeMinutes"> The wait time of the job that has been enqueued in this queue for the longest. </param>
        /// <returns> A new <see cref="Models.RouterQueueStatistics"/> instance for mocking. </returns>
        public static RouterQueueStatistics RouterQueueStatistics(string queueId = null, int length = default, IReadOnlyDictionary<string, double> estimatedWaitTimeMinutes = null, double? longestJobWaitTimeMinutes = null)
        {
            estimatedWaitTimeMinutes ??= new Dictionary<string, double>();

            return new RouterQueueStatistics(queueId, length, estimatedWaitTimeMinutes, longestJobWaitTimeMinutes);
        }

        /// <summary> Initializes a new instance of RouterWorker. </summary>
        /// <param name="id"></param>
        /// <param name="state"> The current state of the worker. </param>
        /// <param name="queueAssignments"> The queue(s) that this worker can receive work from. </param>
        /// <param name="totalCapacity"> The total capacity score this worker has to manage multiple concurrent jobs. </param>
        /// <param name="labels"> A set of key/value pairs that are identifying attributes used by the rules engines to make decisions. </param>
        /// <param name="tags"> A set of non-identifying attributes attached to this worker. </param>
        /// <param name="channelConfigurations"> The channel(s) this worker can handle and their impact on the workers capacity. </param>
        /// <param name="offers"> A list of active offers issued to this worker. </param>
        /// <param name="assignedJobs"> A list of assigned jobs attached to this worker. </param>
        /// <param name="loadRatio"> A value indicating the workers capacity. A value of '1' means all capacity is consumed. A value of '0' means no capacity is currently consumed. </param>
        /// <param name="availableForOffers"> A flag indicating this worker is open to receive offers or not. </param>
        /// <returns> A new <see cref="Models.RouterWorker"/> instance for mocking. </returns>
        public static RouterWorker RouterWorker(string id = null, RouterWorkerState? state = null, IDictionary<string, object> queueAssignments = null, int? totalCapacity = null, IDictionary<string, object> labels = null, IDictionary<string, object> tags = null, IDictionary<string, ChannelConfiguration> channelConfigurations = null, IEnumerable<RouterJobOffer> offers = null, IEnumerable<RouterWorkerAssignment> assignedJobs = null, double? loadRatio = null, bool? availableForOffers = null)
        {
            queueAssignments ??= new Dictionary<string, object>();
            labels ??= new Dictionary<string, object>();
            tags ??= new Dictionary<string, object>();
            channelConfigurations ??= new Dictionary<string, ChannelConfiguration>();
            offers ??= new List<RouterJobOffer>();
            assignedJobs ??= new List<RouterWorkerAssignment>();

            return new RouterWorker(id, state, queueAssignments, totalCapacity, labels, tags, channelConfigurations, offers?.ToList(), assignedJobs?.ToList(), loadRatio, availableForOffers);
        }

        /// <summary> Initializes a new instance of RouterJobOffer. </summary>
        /// <param name="offerId"> The Id of the offer. </param>
        /// <param name="jobId"> The Id of the job. </param>
        /// <param name="capacityCost"> The capacity cost consumed by the job offer. </param>
        /// <param name="offeredAt"> The time the offer was created in UTC. </param>
        /// <param name="expiresAt"> The time that the offer will expire in UTC. </param>
        /// <returns> A new <see cref="Models.RouterJobOffer"/> instance for mocking. </returns>
        public static RouterJobOffer RouterJobOffer(string offerId = null, string jobId = null, int capacityCost = default, DateTimeOffset? offeredAt = null, DateTimeOffset? expiresAt = null)
        {
            return new RouterJobOffer(offerId, jobId, capacityCost, offeredAt, expiresAt);
        }

        /// <summary> Initializes a new instance of RouterWorkerAssignment. </summary>
        /// <param name="assignmentId"> The Id of the assignment. </param>
        /// <param name="jobId"> The Id of the Job assigned. </param>
        /// <param name="capacityCost"> The amount of capacity this assignment has consumed on the worker. </param>
        /// <param name="assignedAt"> The assignment time of the job in UTC. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assignmentId"/> or <paramref name="jobId"/> is null. </exception>
        /// <returns> A new <see cref="Models.RouterWorkerAssignment"/> instance for mocking. </returns>
        public static RouterWorkerAssignment RouterWorkerAssignment(string assignmentId = null, string jobId = null, int capacityCost = default, DateTimeOffset assignedAt = default)
        {
            if (assignmentId == null)
            {
                throw new ArgumentNullException(nameof(assignmentId));
            }
            if (jobId == null)
            {
                throw new ArgumentNullException(nameof(jobId));
            }

            return new RouterWorkerAssignment(assignmentId, jobId, capacityCost, assignedAt);
        }

        /// <summary> Initializes a new instance of RouterWorkerItem. </summary>
        /// <param name="worker"> An entity for jobs to be routed to. </param>
        /// <param name="etag"> (Optional) The Concurrency Token. </param>
        /// <returns> A new <see cref="Models.RouterWorkerItem"/> instance for mocking. </returns>
        public static RouterWorkerItem RouterWorkerItem(RouterWorker worker = null, string etag = null)
        {
            return new RouterWorkerItem(worker, etag);
        }
    }
}
