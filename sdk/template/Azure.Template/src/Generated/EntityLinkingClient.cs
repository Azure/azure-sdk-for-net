// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Template
{
    /// <summary> The EntityLinking service client. </summary>
    public partial class EntityLinkingClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://vault.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of EntityLinkingClient for mocking. </summary>
        protected EntityLinkingClient()
        {
        }

        /// <summary> Initializes a new instance of EntityLinkingClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credential"/> is null. </exception>
        public EntityLinkingClient(TokenCredential credential) : this(credential, new Uri(""), new TextAnalyticsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of EntityLinkingClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        public EntityLinkingClient(TokenCredential credential, Uri endpoint, TextAnalyticsClientOptions options)
        {
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new TextAnalyticsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _endpoint = endpoint;
        }

        /// <summary> The API returns a list of recognized entities with links to a well known knowledge base. See the &lt;a href=&quot;https://aka.ms/talangs&quot;&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled languages. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="modelVersion">
        /// This value indicates which model will be used for scoring.
        /// If a model-version is not specified, the API should default to the latest, non-preview version.
        /// </param>
        /// <param name="loggingOptOut">
        /// If set to true, you opt-out of having your text input logged for troubleshooting.
        /// 
        /// By default, Text Analytics logs your input text for 48 hours, solely to allow for
        /// troubleshooting issues in providing you with the Text Analytics natural language
        /// processing functions. Setting this parameter to true disables input logging and
        /// may limit our ability to remediate issues that occur. Please see Cognitive Services
        /// Compliance and Privacy notes at https://aka.ms/cs-compliance for additional details,
        /// and Microsoft Responsible AI principles at https://www.microsoft.com/en-us/ai/responsible-ai.
        /// </param>
        /// <param name="stringIndexType"> The StringIndexType to use. Allowed values: &quot;TextElement_v8&quot; | &quot;UnicodeCodePoint&quot; | &quot;Utf16CodeUnit&quot;. </param>
        /// <param name="showStats"> If set to true, response will contain request and document level statistics. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>MultiLanguageBatchInput</c>:
        /// <code>{
        ///   documents: [
        ///     {
        ///       id: string, # Required. A unique, non-empty document identifier.
        ///       text: string, # Required. The input text to process.
        ///       language: string, # Optional. This is the 2 letter ISO 639-1 representation of a language. 
        /// 
        /// For example, use &quot;en&quot; for English; &quot;es&quot; for Spanish etc. z,an
        /// If not set, use &quot;en&quot; for English as default.&quot;
        ///     }
        ///   ], # Required. The set of documents to process as part of this batch.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>EntityLinkingResult</c>:
        /// <code>{
        ///   documents: [
        ///     {
        ///       id: string, # Required. Unique, non-empty document identifier.
        ///       warnings: [
        ///         {
        ///           code: &quot;LongWordsInDocument&quot; | &quot;DocumentTruncated&quot;, # Required. Warning code.
        ///           message: string, # Required. Warning message.
        ///           targetRef: string, # Optional. A JSON pointer reference indicating the target object.
        ///         }
        ///       ], # Required. Warnings encountered while processing document.
        ///       statistics: [
        ///         {
        ///           charactersCount: number, # Required. Number of text elements recognized in the document.
        ///           transactionsCount: number, # Required. Number of transactions for the document.
        ///         }
        ///       ], # Required. If showStats=true was specified in the request this field will contain information about the document payload.
        ///       entities: [LinkedEntity], # Required. Recognized well known entities in the document.
        ///     }
        ///   ], # Required. Response by document.
        ///   errors: [
        ///     {
        ///       id: string, # Required. Document id.
        ///       error: {
        ///         message: string, # Required. Error message.
        ///         code: &quot;InvalidRequest&quot; | &quot;InvalidArgument&quot; | &quot;InternalServerError&quot; | &quot;ServiceUnavailable&quot; | &quot;NotFound&quot;, # Required. Error code.
        ///         details: Dictionary&lt;string, string&gt;, # Optional. Error details.
        ///         target: string, # Optional. Error target.
        ///         innererror: {
        ///           message: string, # Required. Error message.
        ///           code: &quot;InvalidParameterValue&quot; | &quot;InvalidRequestBodyFormat&quot; | &quot;EmptyRequest&quot; | &quot;MissingInputRecords&quot; | &quot;InvalidDocument&quot; | &quot;ModelVersionIncorrect&quot; | &quot;InvalidDocumentBatch&quot; | &quot;UnsupportedLanguageCode&quot; | &quot;InvalidCountryHint&quot;, # Required. Error code.
        ///           details: Dictionary&lt;string, string&gt;, # Optional. Error details.
        ///           target: string, # Optional. Error target.
        ///           innererror: InnerError, # Optional. Inner error contains more specific information.
        ///         }, # Optional. Inner error contains more specific information.
        ///       }, # Required. Document error.
        ///     }
        ///   ], # Required. Errors by document id.
        ///   statistics: {
        ///     documentsCount: number, # Required. Number of documents submitted in the request.
        ///     validDocumentsCount: number, # Required. Number of valid documents. This excludes empty, over-size limit or non-supported languages documents.
        ///     erroneousDocumentsCount: number, # Required. Number of invalid documents. This includes empty, over-size limit or non-supported languages documents.
        ///     transactionsCount: number, # Required. Number of transactions for the request.
        ///   }, # Optional. If showStats=true was specified in the request this field will contain information about the request payload.
        ///   modelVersion: string, # Required. This field indicates which model is used for scoring.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> RecognizeAsync(RequestContent content, string modelVersion = null, bool? loggingOptOut = null, string stringIndexType = null, bool? showStats = null, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("EntityLinkingClient.Recognize");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRecognizeRequest(content, modelVersion, loggingOptOut, stringIndexType, showStats, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The API returns a list of recognized entities with links to a well known knowledge base. See the &lt;a href=&quot;https://aka.ms/talangs&quot;&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled languages. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="modelVersion">
        /// This value indicates which model will be used for scoring.
        /// If a model-version is not specified, the API should default to the latest, non-preview version.
        /// </param>
        /// <param name="loggingOptOut">
        /// If set to true, you opt-out of having your text input logged for troubleshooting.
        /// 
        /// By default, Text Analytics logs your input text for 48 hours, solely to allow for
        /// troubleshooting issues in providing you with the Text Analytics natural language
        /// processing functions. Setting this parameter to true disables input logging and
        /// may limit our ability to remediate issues that occur. Please see Cognitive Services
        /// Compliance and Privacy notes at https://aka.ms/cs-compliance for additional details,
        /// and Microsoft Responsible AI principles at https://www.microsoft.com/en-us/ai/responsible-ai.
        /// </param>
        /// <param name="stringIndexType"> The StringIndexType to use. Allowed values: &quot;TextElement_v8&quot; | &quot;UnicodeCodePoint&quot; | &quot;Utf16CodeUnit&quot;. </param>
        /// <param name="showStats"> If set to true, response will contain request and document level statistics. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>MultiLanguageBatchInput</c>:
        /// <code>{
        ///   documents: [
        ///     {
        ///       id: string, # Required. A unique, non-empty document identifier.
        ///       text: string, # Required. The input text to process.
        ///       language: string, # Optional. This is the 2 letter ISO 639-1 representation of a language. 
        /// 
        /// For example, use &quot;en&quot; for English; &quot;es&quot; for Spanish etc. z,an
        /// If not set, use &quot;en&quot; for English as default.&quot;
        ///     }
        ///   ], # Required. The set of documents to process as part of this batch.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>EntityLinkingResult</c>:
        /// <code>{
        ///   documents: [
        ///     {
        ///       id: string, # Required. Unique, non-empty document identifier.
        ///       warnings: [
        ///         {
        ///           code: &quot;LongWordsInDocument&quot; | &quot;DocumentTruncated&quot;, # Required. Warning code.
        ///           message: string, # Required. Warning message.
        ///           targetRef: string, # Optional. A JSON pointer reference indicating the target object.
        ///         }
        ///       ], # Required. Warnings encountered while processing document.
        ///       statistics: [
        ///         {
        ///           charactersCount: number, # Required. Number of text elements recognized in the document.
        ///           transactionsCount: number, # Required. Number of transactions for the document.
        ///         }
        ///       ], # Required. If showStats=true was specified in the request this field will contain information about the document payload.
        ///       entities: [LinkedEntity], # Required. Recognized well known entities in the document.
        ///     }
        ///   ], # Required. Response by document.
        ///   errors: [
        ///     {
        ///       id: string, # Required. Document id.
        ///       error: {
        ///         message: string, # Required. Error message.
        ///         code: &quot;InvalidRequest&quot; | &quot;InvalidArgument&quot; | &quot;InternalServerError&quot; | &quot;ServiceUnavailable&quot; | &quot;NotFound&quot;, # Required. Error code.
        ///         details: Dictionary&lt;string, string&gt;, # Optional. Error details.
        ///         target: string, # Optional. Error target.
        ///         innererror: {
        ///           message: string, # Required. Error message.
        ///           code: &quot;InvalidParameterValue&quot; | &quot;InvalidRequestBodyFormat&quot; | &quot;EmptyRequest&quot; | &quot;MissingInputRecords&quot; | &quot;InvalidDocument&quot; | &quot;ModelVersionIncorrect&quot; | &quot;InvalidDocumentBatch&quot; | &quot;UnsupportedLanguageCode&quot; | &quot;InvalidCountryHint&quot;, # Required. Error code.
        ///           details: Dictionary&lt;string, string&gt;, # Optional. Error details.
        ///           target: string, # Optional. Error target.
        ///           innererror: InnerError, # Optional. Inner error contains more specific information.
        ///         }, # Optional. Inner error contains more specific information.
        ///       }, # Required. Document error.
        ///     }
        ///   ], # Required. Errors by document id.
        ///   statistics: {
        ///     documentsCount: number, # Required. Number of documents submitted in the request.
        ///     validDocumentsCount: number, # Required. Number of valid documents. This excludes empty, over-size limit or non-supported languages documents.
        ///     erroneousDocumentsCount: number, # Required. Number of invalid documents. This includes empty, over-size limit or non-supported languages documents.
        ///     transactionsCount: number, # Required. Number of transactions for the request.
        ///   }, # Optional. If showStats=true was specified in the request this field will contain information about the request payload.
        ///   modelVersion: string, # Required. This field indicates which model is used for scoring.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response Recognize(RequestContent content, string modelVersion = null, bool? loggingOptOut = null, string stringIndexType = null, bool? showStats = null, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("EntityLinkingClient.Recognize");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRecognizeRequest(content, modelVersion, loggingOptOut, stringIndexType, showStats, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateRecognizeRequest(RequestContent content, string modelVersion, bool? loggingOptOut, string stringIndexType, bool? showStats, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/entities/linking", false);
            if (modelVersion != null)
            {
                uri.AppendQuery("model-version", modelVersion, true);
            }
            if (loggingOptOut != null)
            {
                uri.AppendQuery("loggingOptOut", loggingOptOut.Value, true);
            }
            if (stringIndexType != null)
            {
                uri.AppendQuery("stringIndexType", stringIndexType, true);
            }
            if (showStats != null)
            {
                uri.AppendQuery("showStats", showStats.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
