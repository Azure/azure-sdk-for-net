// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Linq;

namespace Azure.Template.Models
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class ReadonlyPropertiesModelFactory
    {
        /// <summary> Initializes a new instance of OutputModel. </summary>
        /// <param name="requiredReadonlyString"> Required string, illustrating a readonly reference type property. </param>
        /// <param name="requiredReadonlyInt"> Required int, illustrating a readonly value type property. </param>
        /// <param name="optionalReadonlyString"> Optional string, illustrating a readonly reference type property. </param>
        /// <param name="optionalReadonlyInt"> Optional int, illustrating a readonly value type property. </param>
        /// <param name="requiredReadonlyModel"> Required readonly model. </param>
        /// <param name="optionalReadonlyModel"> Optional readonly model. </param>
        /// <param name="readonlyStringList"> Required readonly string collection. </param>
        /// <param name="readonlyIntList"> Required readonly int collection. </param>
        /// <param name="optionalReadonlyStringList"> Optional readonly string collection. </param>
        /// <param name="optionalReadonlyIntList"> Optional readonly int collection. </param>
        /// <returns> A new <see cref="Models.OutputModel"/> instance for mocking. </returns>
        public static OutputModel OutputModel(string requiredReadonlyString = null, int requiredReadonlyInt = default, string optionalReadonlyString = null, int? optionalReadonlyInt = null, ReadonlyModel requiredReadonlyModel = null, ReadonlyModel optionalReadonlyModel = null, IEnumerable<string> readonlyStringList = null, IEnumerable<int> readonlyIntList = null, IEnumerable<string> optionalReadonlyStringList = null, IEnumerable<int> optionalReadonlyIntList = null)
        {
            readonlyStringList ??= new List<string>();
            readonlyIntList ??= new List<int>();
            optionalReadonlyStringList ??= new List<string>();
            optionalReadonlyIntList ??= new List<int>();

            return new OutputModel(requiredReadonlyString, requiredReadonlyInt, optionalReadonlyString, optionalReadonlyInt, requiredReadonlyModel, optionalReadonlyModel, readonlyStringList?.ToList(), readonlyIntList?.ToList(), optionalReadonlyStringList?.ToList(), optionalReadonlyIntList?.ToList());
        }

        /// <summary> Initializes a new instance of ReadonlyModel. </summary>
        /// <param name="requiredString"> Required string. </param>
        /// <returns> A new <see cref="Models.ReadonlyModel"/> instance for mocking. </returns>
        public static ReadonlyModel ReadonlyModel(string requiredString = null)
        {
            return new ReadonlyModel(requiredString);
        }

        /// <summary> Initializes a new instance of RoundTripModel. </summary>
        /// <param name="requiredReadonlyString"> Required string, illustrating a readonly reference type property. </param>
        /// <param name="requiredReadonlyInt"> Required int, illustrating a readonly value type property. </param>
        /// <param name="optionalReadonlyString"> Optional string, illustrating a readonly reference type property. </param>
        /// <param name="optionalReadonlyInt"> Optional int, illustrating a readonly value type property. </param>
        /// <param name="requiredReadonlyModel"> Required readonly model. </param>
        /// <param name="optionalReadonlyModel"> Optional readonly model. </param>
        /// <param name="readonlyStringList"> Required readonly string collection. </param>
        /// <param name="readonlyIntList"> Required readonly int collection. </param>
        /// <param name="optionalReadonlyStringList"> Optional readonly string collection. </param>
        /// <param name="optionalReadonlyIntList"> Optional readonly int collection. </param>
        /// <returns> A new <see cref="Models.RoundTripModel"/> instance for mocking. </returns>
        public static RoundTripModel RoundTripModel(string requiredReadonlyString = null, int requiredReadonlyInt = default, string optionalReadonlyString = null, int? optionalReadonlyInt = null, ReadonlyModel requiredReadonlyModel = null, ReadonlyModel optionalReadonlyModel = null, IEnumerable<string> readonlyStringList = null, IEnumerable<int> readonlyIntList = null, IEnumerable<string> optionalReadonlyStringList = null, IEnumerable<int> optionalReadonlyIntList = null)
        {
            readonlyStringList ??= new List<string>();
            readonlyIntList ??= new List<int>();
            optionalReadonlyStringList ??= new List<string>();
            optionalReadonlyIntList ??= new List<int>();

            return new RoundTripModel(requiredReadonlyString, requiredReadonlyInt, optionalReadonlyString, optionalReadonlyInt, requiredReadonlyModel, optionalReadonlyModel, readonlyStringList?.ToList(), readonlyIntList?.ToList(), optionalReadonlyStringList?.ToList(), optionalReadonlyIntList?.ToList());
        }
    }
}
