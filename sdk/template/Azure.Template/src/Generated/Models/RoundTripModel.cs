// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.Template.Models
{
    /// <summary> Round-trip model with readonly properties. </summary>
    public partial class RoundTripModel
    {
        /// <summary> Initializes a new instance of RoundTripModel. </summary>
        /// <param name="requiredReadonlyString"> Required string, illustrating a readonly reference type property. </param>
        /// <param name="requiredReadonlyInt"> Required int, illustrating a readonly value type property. </param>
        /// <param name="requiredReadonlyModel"> Required readonly model. </param>
        /// <param name="readonlyStringList"> Required readonly string collection. </param>
        /// <param name="readonlyIntList"> Required readonly int collection. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredReadonlyString"/>, <paramref name="requiredReadonlyModel"/>, <paramref name="readonlyStringList"/> or <paramref name="readonlyIntList"/> is null. </exception>
        public RoundTripModel(string requiredReadonlyString, int requiredReadonlyInt, ReadonlyModel requiredReadonlyModel, IEnumerable<string> readonlyStringList, IEnumerable<int> readonlyIntList)
        {
            Argument.AssertNotNull(requiredReadonlyString, nameof(requiredReadonlyString));
            Argument.AssertNotNull(requiredReadonlyModel, nameof(requiredReadonlyModel));
            Argument.AssertNotNull(readonlyStringList, nameof(readonlyStringList));
            Argument.AssertNotNull(readonlyIntList, nameof(readonlyIntList));

            RequiredReadonlyString = requiredReadonlyString;
            RequiredReadonlyInt = requiredReadonlyInt;
            RequiredReadonlyModel = requiredReadonlyModel;
            ReadonlyStringList = readonlyStringList.ToList();
            ReadonlyIntList = readonlyIntList.ToList();
            OptionalReadonlyStringList = new ChangeTrackingList<string>();
            OptionalReadonlyIntList = new ChangeTrackingList<int>();
        }

        /// <summary> Initializes a new instance of RoundTripModel. </summary>
        /// <param name="requiredReadonlyString"> Required string, illustrating a readonly reference type property. </param>
        /// <param name="requiredReadonlyInt"> Required int, illustrating a readonly value type property. </param>
        /// <param name="optionalReadonlyString"> Optional string, illustrating a readonly reference type property. </param>
        /// <param name="optionalReadonlyInt"> Optional int, illustrating a readonly value type property. </param>
        /// <param name="requiredReadonlyModel"> Required readonly model. </param>
        /// <param name="optionalReadonlyModel"> Optional readonly model. </param>
        /// <param name="readonlyStringList"> Required readonly string collection. </param>
        /// <param name="readonlyIntList"> Required readonly int collection. </param>
        /// <param name="optionalReadonlyStringList"> Optional readonly string collection. </param>
        /// <param name="optionalReadonlyIntList"> Optional readonly int collection. </param>
        internal RoundTripModel(string requiredReadonlyString, int requiredReadonlyInt, string optionalReadonlyString, int? optionalReadonlyInt, ReadonlyModel requiredReadonlyModel, ReadonlyModel optionalReadonlyModel, IReadOnlyList<string> readonlyStringList, IReadOnlyList<int> readonlyIntList, IReadOnlyList<string> optionalReadonlyStringList, IReadOnlyList<int> optionalReadonlyIntList)
        {
            RequiredReadonlyString = requiredReadonlyString;
            RequiredReadonlyInt = requiredReadonlyInt;
            OptionalReadonlyString = optionalReadonlyString;
            OptionalReadonlyInt = optionalReadonlyInt;
            RequiredReadonlyModel = requiredReadonlyModel;
            OptionalReadonlyModel = optionalReadonlyModel;
            ReadonlyStringList = readonlyStringList;
            ReadonlyIntList = readonlyIntList;
            OptionalReadonlyStringList = optionalReadonlyStringList;
            OptionalReadonlyIntList = optionalReadonlyIntList;
        }

        /// <summary> Required string, illustrating a readonly reference type property. </summary>
        public string RequiredReadonlyString { get; }
        /// <summary> Required int, illustrating a readonly value type property. </summary>
        public int RequiredReadonlyInt { get; }
        /// <summary> Optional string, illustrating a readonly reference type property. </summary>
        public string OptionalReadonlyString { get; }
        /// <summary> Optional int, illustrating a readonly value type property. </summary>
        public int? OptionalReadonlyInt { get; }
        /// <summary> Required readonly model. </summary>
        public ReadonlyModel RequiredReadonlyModel { get; }
        /// <summary> Optional readonly model. </summary>
        public ReadonlyModel OptionalReadonlyModel { get; }
        /// <summary> Required readonly string collection. </summary>
        public IReadOnlyList<string> ReadonlyStringList { get; }
        /// <summary> Required readonly int collection. </summary>
        public IReadOnlyList<int> ReadonlyIntList { get; }
        /// <summary> Optional readonly string collection. </summary>
        public IReadOnlyList<string> OptionalReadonlyStringList { get; }
        /// <summary> Optional readonly int collection. </summary>
        public IReadOnlyList<int> OptionalReadonlyIntList { get; }
    }
}
