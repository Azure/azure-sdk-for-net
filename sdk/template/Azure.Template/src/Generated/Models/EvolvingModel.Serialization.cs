// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.Template.Models
{
    public partial class EvolvingModel : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("requiredInt");
            writer.WriteNumberValue(RequiredInt);
            writer.WritePropertyName("requiredString");
            writer.WriteStringValue(RequiredString);
            if (Optional.IsDefined(OptionalInt))
            {
                writer.WritePropertyName("optionalInt");
                writer.WriteNumberValue(OptionalInt.Value);
            }
            if (Optional.IsDefined(OptionalString))
            {
                writer.WritePropertyName("optionalString");
                writer.WriteStringValue(OptionalString);
            }
            writer.WriteEndObject();
        }

        internal static EvolvingModel DeserializeEvolvingModel(JsonElement element)
        {
            int requiredInt = default;
            string requiredString = default;
            Optional<int> optionalInt = default;
            Optional<string> optionalString = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("requiredInt"))
                {
                    requiredInt = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("requiredString"))
                {
                    requiredString = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("optionalInt"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    optionalInt = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("optionalString"))
                {
                    optionalString = property.Value.GetString();
                    continue;
                }
            }
            return new EvolvingModel(requiredInt, requiredString, Optional.ToNullable(optionalInt), optionalString.Value);
        }
    }
}
