// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Template.Models
{
    public partial class OutputModel
    {
        internal static OutputModel DeserializeOutputModel(JsonElement element)
        {
            IReadOnlyDictionary<string, string> requiredStringStringMap = default;
            IReadOnlyDictionary<string, int> requiredStringIntMap = default;
            IReadOnlyDictionary<string, string> requiredIntStringMap = default;
            IReadOnlyDictionary<string, int> requiredIntIntMap = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("requiredStringStringMap"))
                {
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    requiredStringStringMap = dictionary;
                    continue;
                }
                if (property.NameEquals("requiredStringIntMap"))
                {
                    Dictionary<string, int> dictionary = new Dictionary<string, int>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetInt32());
                    }
                    requiredStringIntMap = dictionary;
                    continue;
                }
                if (property.NameEquals("requiredIntStringMap"))
                {
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    requiredIntStringMap = dictionary;
                    continue;
                }
                if (property.NameEquals("requiredIntIntMap"))
                {
                    Dictionary<string, int> dictionary = new Dictionary<string, int>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetInt32());
                    }
                    requiredIntIntMap = dictionary;
                    continue;
                }
            }
            return new OutputModel(requiredStringStringMap, requiredStringIntMap, requiredIntStringMap, requiredIntIntMap);
        }
    }
}
