// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Template
{
    /// <summary> The EvolvingModel. </summary>
    public partial class EvolvingModel : IVersionValidatable<MultiVersionClientOptions.ServiceVersion>
    {
        /// <summary> Initializes a new instance of EvolvingModel. </summary>
        /// <param name="requiredInt"> Value type property available in 2022-01-01. </param>
        /// <param name="requiredString"> Reference type property available in 2022-01-01. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredString"/> is null. </exception>
        public EvolvingModel(int requiredInt, string requiredString)
        {
            if (requiredString == null)
            {
                throw new ArgumentNullException(nameof(requiredString));
            }

            RequiredInt = requiredInt;
            RequiredString = requiredString;
        }

        /// <summary> Initializes a new instance of EvolvingModel. </summary>
        /// <param name="requiredInt"> Value type property available in 2022-01-01. </param>
        /// <param name="requiredString"> Reference type property available in 2022-01-01. </param>
        /// <param name="optionalInt"> Optional value type property.  Property added in service API version 2022-02-02. </param>
        /// <param name="optionalString"> Optional reference type property.  Property added in service API version 2022-02-02. </param>
        /// <param name="requiredOutputInt"></param>
        /// <param name="requiredOutputString"></param>
        internal EvolvingModel(int requiredInt, string requiredString, int? optionalInt, string optionalString, int? requiredOutputInt, string requiredOutputString)
        {
            RequiredInt = requiredInt;
            RequiredString = requiredString;
            OptionalInt = optionalInt;
            OptionalString = optionalString;
            _requiredOutputInt = requiredOutputInt;
            _requiredOutputString = requiredOutputString;
        }

        /// <summary>
        /// </summary>
        /// <param name="targetVersion"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public bool IsValidInput(MultiVersionClientOptions.ServiceVersion targetVersion, out string message)
        {
            List<string> invalidValues = new List<string>();

            // if caller set a property that wasn't present in the target version, not valid
            if (targetVersion <= MultiVersionClientOptions.ServiceVersion.V2022_02_02)
            {
                // property was added in v2
                if (OptionalInt.HasValue)
                {
                    invalidValues.Add(nameof(OptionalInt));
                }

                // property was added in v2
                if (OptionalString != null)
                {
                    invalidValues.Add(nameof(OptionalString));
                }

                // Back out if more than some max threshold?
            }

            if (invalidValues.Count == 0)
            {
                message = null;
                return true;
            }

            message = FormatVersionExceptionMessage(invalidValues);
            return false;

        }

        private string FormatVersionExceptionMessage(List<string> invalidValues)
        {
            throw new NotImplementedException();
        }

        /// <summary> Value type property available in 2022-01-01. </summary>
        public int RequiredInt { get; set; }
        /// <summary> Reference type property available in 2022-01-01. </summary>
        public string RequiredString { get; set; }

        /// <summary> Optional value type property.  Property added in service API version 2022-02-02.</summary>
        public int? OptionalInt { get; set; }
        /// <summary> Optional reference type property.  Property added in service API version 2022-02-02. </summary>
        public string OptionalString { get; set; }

        private int? _requiredOutputInt;
        /// <summary> Required output value type property.  Property added in service API version 2022-03-03.</summary>
        public int RequiredOutputInt
        {
            get
            {
                if (!_requiredOutputInt.HasValue)
                {
                    throw new NotSupportedException($"{nameof(RequiredOutputInt)} added in service API version 2022-03-03.");
                }

                return _requiredOutputInt.Value;
            }
        }

        private string _requiredOutputString;
        /// <summary> Required output reference type property.  Property added in service API version 2022-03-03. </summary>
        public string RequiredOutputString
        {
            get
            {
                if (_requiredOutputString == null)
                {
                    throw new NotSupportedException($"{nameof(RequiredOutputString)} added in service API version 2022-03-03.");
                }

                return _requiredOutputString;
            }
        }
    }
}
