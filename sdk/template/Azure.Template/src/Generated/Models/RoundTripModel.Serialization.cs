// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Template.Models
{
    public partial class RoundTripModel : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WriteEndObject();
        }

        internal static RoundTripModel DeserializeRoundTripModel(JsonElement element)
        {
            string requiredReadonlyString = default;
            int requiredReadonlyInt = default;
            Optional<string> optionalReadonlyString = default;
            Optional<int> optionalReadonlyInt = default;
            ReadonlyModel requiredReadonlyModel = default;
            Optional<ReadonlyModel> optionalReadonlyModel = default;
            IReadOnlyList<string> readonlyStringList = default;
            IReadOnlyList<int> readonlyIntList = default;
            Optional<IReadOnlyList<string>> optionalReadonlyStringList = default;
            Optional<IReadOnlyList<int>> optionalReadonlyIntList = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("requiredReadonlyString"))
                {
                    requiredReadonlyString = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("requiredReadonlyInt"))
                {
                    requiredReadonlyInt = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("optionalReadonlyString"))
                {
                    optionalReadonlyString = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("optionalReadonlyInt"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    optionalReadonlyInt = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("requiredReadonlyModel"))
                {
                    requiredReadonlyModel = ReadonlyModel.DeserializeReadonlyModel(property.Value);
                    continue;
                }
                if (property.NameEquals("optionalReadonlyModel"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    optionalReadonlyModel = ReadonlyModel.DeserializeReadonlyModel(property.Value);
                    continue;
                }
                if (property.NameEquals("readonlyStringList"))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    readonlyStringList = array;
                    continue;
                }
                if (property.NameEquals("readonlyIntList"))
                {
                    List<int> array = new List<int>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetInt32());
                    }
                    readonlyIntList = array;
                    continue;
                }
                if (property.NameEquals("optionalReadonlyStringList"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    optionalReadonlyStringList = array;
                    continue;
                }
                if (property.NameEquals("optionalReadonlyIntList"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<int> array = new List<int>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetInt32());
                    }
                    optionalReadonlyIntList = array;
                    continue;
                }
            }
            return new RoundTripModel(requiredReadonlyString, requiredReadonlyInt, optionalReadonlyString.Value, Optional.ToNullable(optionalReadonlyInt), requiredReadonlyModel, optionalReadonlyModel.Value, readonlyStringList, readonlyIntList, Optional.ToList(optionalReadonlyStringList), Optional.ToList(optionalReadonlyIntList));
        }
    }
}
