// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Template.Models
{
    public partial class RoundTripModel : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("requiredStringStringMap");
            writer.WriteStartObject();
            foreach (var item in RequiredStringMap)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteStringValue(item.Value);
            }
            writer.WriteEndObject();
            writer.WritePropertyName("requiredStringIntMap");
            writer.WriteStartObject();
            foreach (var item in RequiredStringIntMap)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteNumberValue(item.Value);
            }
            writer.WriteEndObject();
            writer.WritePropertyName("requiredIntStringMap");
            writer.WriteStartObject();
            foreach (var item in RequiredIntStringMap)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteStringValue(item.Value);
            }
            writer.WriteEndObject();
            writer.WritePropertyName("requiredIntIntMap");
            writer.WriteStartObject();
            foreach (var item in RequiredIntMap)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteNumberValue(item.Value);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static RoundTripModel DeserializeRoundTripModel(JsonElement element)
        {
            IDictionary<string, string> requiredStringStringMap = default;
            IDictionary<string, int> requiredStringIntMap = default;
            IDictionary<string, string> requiredIntStringMap = default;
            IDictionary<string, int> requiredIntIntMap = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("requiredStringStringMap"))
                {
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    requiredStringStringMap = dictionary;
                    continue;
                }
                if (property.NameEquals("requiredStringIntMap"))
                {
                    Dictionary<string, int> dictionary = new Dictionary<string, int>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetInt32());
                    }
                    requiredStringIntMap = dictionary;
                    continue;
                }
                if (property.NameEquals("requiredIntStringMap"))
                {
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    requiredIntStringMap = dictionary;
                    continue;
                }
                if (property.NameEquals("requiredIntIntMap"))
                {
                    Dictionary<string, int> dictionary = new Dictionary<string, int>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetInt32());
                    }
                    requiredIntIntMap = dictionary;
                    continue;
                }
            }
            return new RoundTripModel(requiredStringStringMap, requiredStringIntMap, requiredIntStringMap, requiredIntIntMap);
        }
    }
}
