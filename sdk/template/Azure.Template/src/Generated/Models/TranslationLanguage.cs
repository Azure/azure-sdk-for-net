// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Template.Models
{
    /// <summary> The language to translate the input text into. </summary>
    public readonly partial struct TranslationLanguage : IEquatable<TranslationLanguage>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TranslationLanguage"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TranslationLanguage(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string EnglishValue = "English";
        private const string SpanishValue = "Spanish";
        private const string MandarinValue = "Mandarin";
        private const string UndocumentedValue = "Undocumented";

        /// <summary> Translate to English. </summary>
        public static TranslationLanguage English { get; } = new TranslationLanguage(EnglishValue);
        /// <summary> Translate to Spanish. </summary>
        public static TranslationLanguage Spanish { get; } = new TranslationLanguage(SpanishValue);
        /// <summary> Translate to Mandarin. </summary>
        public static TranslationLanguage Mandarin { get; } = new TranslationLanguage(MandarinValue);
        /// <summary> Undocumented. </summary>
        public static TranslationLanguage Undocumented { get; } = new TranslationLanguage(UndocumentedValue);
        /// <summary> Determines if two <see cref="TranslationLanguage"/> values are the same. </summary>
        public static bool operator ==(TranslationLanguage left, TranslationLanguage right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TranslationLanguage"/> values are not the same. </summary>
        public static bool operator !=(TranslationLanguage left, TranslationLanguage right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TranslationLanguage"/>. </summary>
        public static implicit operator TranslationLanguage(string value) => new TranslationLanguage(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TranslationLanguage other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TranslationLanguage other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
