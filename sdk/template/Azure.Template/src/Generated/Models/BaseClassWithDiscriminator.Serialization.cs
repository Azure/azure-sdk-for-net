// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.Template.Models
{
    public abstract partial class BaseClassWithDiscriminator : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            // Note: we have to use this approach in order to implement the IUtf8Serializble
            // interface, which we have to implement so BaseClassWithDiscriminator can be cast
            // to IUtf8Serializable. Serialization moves to the derived type, since the base
            // type is now abstract.
            WriteCore(writer);
        }

        internal abstract void WriteCore(Utf8JsonWriter writer);

        internal static BaseClassWithDiscriminator DeserializeBaseClassWithDiscriminator(JsonElement element)
        {
            if (element.TryGetProperty("discriminatorProperty", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "A": return DerivedFromBaseClassWithDiscriminatorA.DeserializeDerivedFromBaseClassWithDiscriminatorA(element);
                    case "B": return DerivedFromBaseClassWithDiscriminatorB.DeserializeDerivedFromBaseClassWithDiscriminatorB(element);
                }
            }

            return DerivedFromBaseClassWithUnknownDiscriminator.DeserializeDerivedFromBaseClassWithDiscriminatorUnknown(element);
        }
    }
}
