// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Template
{
    // Data plane generated client. The ContainerRegistry service client.
    /// <summary> The ContainerRegistry service client. </summary>
    public partial class ContainerRegistryClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://vault.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly string _url;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of ContainerRegistryClient for mocking. </summary>
        protected ContainerRegistryClient()
        {
        }

        /// <summary> Initializes a new instance of ContainerRegistryClient. </summary>
        /// <param name="url"> Registry login URL. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="url"/> or <paramref name="credential"/> is null. </exception>
        public ContainerRegistryClient(string url, TokenCredential credential) : this(url, credential, new AzureContainerRegistryClientOptions())
        {
        }

        /// <summary> Initializes a new instance of ContainerRegistryClient. </summary>
        /// <param name="url"> Registry login URL. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="url"/> or <paramref name="credential"/> is null. </exception>
        public ContainerRegistryClient(string url, TokenCredential credential, AzureContainerRegistryClientOptions options)
        {
            Argument.AssertNotNull(url, nameof(url));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new AzureContainerRegistryClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _url = url;
            _apiVersion = options.Version;
        }

        /// <summary> Tells whether this Docker Registry instance supports Docker Registry HTTP API v2. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CheckDockerV2SupportAsync.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// Response response = await client.CheckDockerV2SupportAsync();
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> CheckDockerV2SupportAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryClient.CheckDockerV2Support");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCheckDockerV2SupportRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tells whether this Docker Registry instance supports Docker Registry HTTP API v2. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CheckDockerV2Support.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// Response response = client.CheckDockerV2Support();
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response CheckDockerV2Support(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryClient.CheckDockerV2Support");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCheckDockerV2SupportRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the manifest identified by `name` and `reference` where `reference` can be a tag or digest. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="reference"> A tag or a digest, pointing to a specific image. </param>
        /// <param name="accept"> Accept header string delimited by comma. For example, application/vnd.docker.distribution.manifest.v2+json. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="reference"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> or <paramref name="reference"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetManifestAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// Response response = await client.GetManifestAsync("<name>", "<reference>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call GetManifestAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// Response response = await client.GetManifestAsync("<name>", "<reference>", "<accept>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("mediaType").ToString());
        /// Console.WriteLine(result.GetProperty("manifests")[0].GetProperty("mediaType").ToString());
        /// Console.WriteLine(result.GetProperty("manifests")[0].GetProperty("size").ToString());
        /// Console.WriteLine(result.GetProperty("manifests")[0].GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("manifests")[0].GetProperty("platform").GetProperty("architecture").ToString());
        /// Console.WriteLine(result.GetProperty("manifests")[0].GetProperty("platform").GetProperty("os").ToString());
        /// Console.WriteLine(result.GetProperty("manifests")[0].GetProperty("platform").GetProperty("os.version").ToString());
        /// Console.WriteLine(result.GetProperty("manifests")[0].GetProperty("platform").GetProperty("os.features")[0].ToString());
        /// Console.WriteLine(result.GetProperty("manifests")[0].GetProperty("platform").GetProperty("variant").ToString());
        /// Console.WriteLine(result.GetProperty("manifests")[0].GetProperty("platform").GetProperty("features")[0].ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("mediaType").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("size").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("urls")[0].ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.created").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.authors").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.url").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.documentation").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.source").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.version").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.revision").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.vendor").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.licenses").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.ref.name").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.title").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.description").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("mediaType").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("size").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("urls")[0].ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.created").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.authors").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.url").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.documentation").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.source").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.version").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.revision").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.vendor").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.licenses").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.ref.name").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.title").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.description").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.created").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.authors").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.url").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.documentation").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.source").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.version").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.revision").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.vendor").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.licenses").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.ref.name").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.title").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.description").ToString());
        /// Console.WriteLine(result.GetProperty("architecture").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("tag").ToString());
        /// Console.WriteLine(result.GetProperty("fsLayers")[0].GetProperty("blobSum").ToString());
        /// Console.WriteLine(result.GetProperty("history")[0].GetProperty("v1Compatibility").ToString());
        /// Console.WriteLine(result.GetProperty("signatures")[0].GetProperty("header").GetProperty("jwk").GetProperty("crv").ToString());
        /// Console.WriteLine(result.GetProperty("signatures")[0].GetProperty("header").GetProperty("jwk").GetProperty("kid").ToString());
        /// Console.WriteLine(result.GetProperty("signatures")[0].GetProperty("header").GetProperty("jwk").GetProperty("kty").ToString());
        /// Console.WriteLine(result.GetProperty("signatures")[0].GetProperty("header").GetProperty("jwk").GetProperty("x").ToString());
        /// Console.WriteLine(result.GetProperty("signatures")[0].GetProperty("header").GetProperty("jwk").GetProperty("y").ToString());
        /// Console.WriteLine(result.GetProperty("signatures")[0].GetProperty("header").GetProperty("alg").ToString());
        /// Console.WriteLine(result.GetProperty("signatures")[0].GetProperty("signature").ToString());
        /// Console.WriteLine(result.GetProperty("signatures")[0].GetProperty("protected").ToString());
        /// Console.WriteLine(result.GetProperty("schemaVersion").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ManifestWrapper</c>:
        /// <code>{
        ///   mediaType: string, # Optional. Media type for this Manifest
        ///   manifests: [
        ///     {
        ///       mediaType: string, # Optional. The MIME type of the referenced object. This will generally be application/vnd.docker.image.manifest.v2+json, but it could also be application/vnd.docker.image.manifest.v1+json
        ///       size: number, # Optional. The size in bytes of the object
        ///       digest: string, # Optional. The digest of the content, as defined by the Registry V2 HTTP API Specification
        ///       platform: {
        ///         architecture: string, # Optional. Specifies the CPU architecture, for example amd64 or ppc64le.
        ///         os: string, # Optional. The os field specifies the operating system, for example linux or windows.
        ///         os.version: string, # Optional. The optional os.version field specifies the operating system version, for example 10.0.10586.
        ///         os.features: [string], # Optional. The optional os.features field specifies an array of strings, each listing a required OS feature (for example on Windows win32k
        ///         variant: string, # Optional. The optional variant field specifies a variant of the CPU, for example armv6l to specify a particular CPU variant of the ARM CPU.
        ///         features: [string], # Optional. The optional features field specifies an array of strings, each listing a required CPU feature (for example sse4 or aes
        ///       }, # Optional. The platform object describes the platform which the image in the manifest runs on. A full list of valid operating system and architecture values are listed in the Go language documentation for $GOOS and $GOARCH
        ///     }
        ///   ], # Optional. (ManifestList, OCIIndex) List of V2 image layer information
        ///   config: {
        ///     mediaType: string, # Optional. Layer media type
        ///     size: number, # Optional. Layer size
        ///     digest: string, # Optional. Layer digest
        ///     urls: [string], # Optional. Specifies a list of URIs from which this object may be downloaded.
        ///     annotations: {
        ///       org.opencontainers.image.created: string (ISO 8601 Format), # Optional. Date and time on which the image was built (string, date-time as defined by https://tools.ietf.org/html/rfc3339#section-5.6)
        ///       org.opencontainers.image.authors: string, # Optional. Contact details of the people or organization responsible for the image.
        ///       org.opencontainers.image.url: string, # Optional. URL to find more information on the image.
        ///       org.opencontainers.image.documentation: string, # Optional. URL to get documentation on the image.
        ///       org.opencontainers.image.source: string, # Optional. URL to get source code for building the image.
        ///       org.opencontainers.image.version: string, # Optional. Version of the packaged software. The version MAY match a label or tag in the source code repository, may also be Semantic versioning-compatible
        ///       org.opencontainers.image.revision: string, # Optional. Source control revision identifier for the packaged software.
        ///       org.opencontainers.image.vendor: string, # Optional. Name of the distributing entity, organization or individual.
        ///       org.opencontainers.image.licenses: string, # Optional. License(s) under which contained software is distributed as an SPDX License Expression.
        ///       org.opencontainers.image.ref.name: string, # Optional. Name of the reference for a target.
        ///       org.opencontainers.image.title: string, # Optional. Human-readable title of the image
        ///       org.opencontainers.image.description: string, # Optional. Human-readable description of the software packaged in the image
        ///     }, # Optional. Additional information provided through arbitrary metadata.
        ///   }, # Optional. (V2, OCI) Image config descriptor
        ///   layers: [Descriptor], # Optional. (V2, OCI) List of V2 image layer information
        ///   annotations: Annotations, # Optional. (OCI, OCIIndex) Additional metadata
        ///   architecture: string, # Optional. (V1) CPU architecture
        ///   name: string, # Optional. (V1) Image name
        ///   tag: string, # Optional. (V1) Image tag
        ///   fsLayers: [
        ///     {
        ///       blobSum: string, # Optional. SHA of an image layer
        ///     }
        ///   ], # Optional. (V1) List of layer information
        ///   history: [
        ///     {
        ///       v1Compatibility: string, # Optional. The raw v1 compatibility information
        ///     }
        ///   ], # Optional. (V1) Image history
        ///   signatures: [
        ///     {
        ///       header: {
        ///         jwk: {
        ///           crv: string, # Optional. crv value
        ///           kid: string, # Optional. kid value
        ///           kty: string, # Optional. kty value
        ///           x: string, # Optional. x value
        ///           y: string, # Optional. y value
        ///         }, # Optional. JSON web key parameter
        ///         alg: string, # Optional. The algorithm used to sign or encrypt the JWT
        ///       }, # Optional. A JSON web signature
        ///       signature: string, # Optional. A signature for the image manifest, signed by a libtrust private key
        ///       protected: string, # Optional. The signed protected header
        ///     }
        ///   ], # Optional. (V1) Image signature
        ///   schemaVersion: number, # Optional. Schema version
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetManifestAsync(string name, string reference, string accept = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));
            Argument.AssertNotNullOrEmpty(reference, nameof(reference));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryClient.GetManifest");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetManifestRequest(name, reference, accept, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the manifest identified by `name` and `reference` where `reference` can be a tag or digest. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="reference"> A tag or a digest, pointing to a specific image. </param>
        /// <param name="accept"> Accept header string delimited by comma. For example, application/vnd.docker.distribution.manifest.v2+json. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="reference"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> or <paramref name="reference"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetManifest with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// Response response = client.GetManifest("<name>", "<reference>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call GetManifest with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// Response response = client.GetManifest("<name>", "<reference>", "<accept>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("mediaType").ToString());
        /// Console.WriteLine(result.GetProperty("manifests")[0].GetProperty("mediaType").ToString());
        /// Console.WriteLine(result.GetProperty("manifests")[0].GetProperty("size").ToString());
        /// Console.WriteLine(result.GetProperty("manifests")[0].GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("manifests")[0].GetProperty("platform").GetProperty("architecture").ToString());
        /// Console.WriteLine(result.GetProperty("manifests")[0].GetProperty("platform").GetProperty("os").ToString());
        /// Console.WriteLine(result.GetProperty("manifests")[0].GetProperty("platform").GetProperty("os.version").ToString());
        /// Console.WriteLine(result.GetProperty("manifests")[0].GetProperty("platform").GetProperty("os.features")[0].ToString());
        /// Console.WriteLine(result.GetProperty("manifests")[0].GetProperty("platform").GetProperty("variant").ToString());
        /// Console.WriteLine(result.GetProperty("manifests")[0].GetProperty("platform").GetProperty("features")[0].ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("mediaType").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("size").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("urls")[0].ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.created").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.authors").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.url").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.documentation").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.source").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.version").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.revision").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.vendor").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.licenses").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.ref.name").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.title").ToString());
        /// Console.WriteLine(result.GetProperty("config").GetProperty("annotations").GetProperty("org.opencontainers.image.description").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("mediaType").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("size").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("urls")[0].ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.created").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.authors").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.url").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.documentation").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.source").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.version").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.revision").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.vendor").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.licenses").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.ref.name").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.title").ToString());
        /// Console.WriteLine(result.GetProperty("layers")[0].GetProperty("annotations").GetProperty("org.opencontainers.image.description").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.created").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.authors").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.url").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.documentation").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.source").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.version").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.revision").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.vendor").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.licenses").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.ref.name").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.title").ToString());
        /// Console.WriteLine(result.GetProperty("annotations").GetProperty("org.opencontainers.image.description").ToString());
        /// Console.WriteLine(result.GetProperty("architecture").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("tag").ToString());
        /// Console.WriteLine(result.GetProperty("fsLayers")[0].GetProperty("blobSum").ToString());
        /// Console.WriteLine(result.GetProperty("history")[0].GetProperty("v1Compatibility").ToString());
        /// Console.WriteLine(result.GetProperty("signatures")[0].GetProperty("header").GetProperty("jwk").GetProperty("crv").ToString());
        /// Console.WriteLine(result.GetProperty("signatures")[0].GetProperty("header").GetProperty("jwk").GetProperty("kid").ToString());
        /// Console.WriteLine(result.GetProperty("signatures")[0].GetProperty("header").GetProperty("jwk").GetProperty("kty").ToString());
        /// Console.WriteLine(result.GetProperty("signatures")[0].GetProperty("header").GetProperty("jwk").GetProperty("x").ToString());
        /// Console.WriteLine(result.GetProperty("signatures")[0].GetProperty("header").GetProperty("jwk").GetProperty("y").ToString());
        /// Console.WriteLine(result.GetProperty("signatures")[0].GetProperty("header").GetProperty("alg").ToString());
        /// Console.WriteLine(result.GetProperty("signatures")[0].GetProperty("signature").ToString());
        /// Console.WriteLine(result.GetProperty("signatures")[0].GetProperty("protected").ToString());
        /// Console.WriteLine(result.GetProperty("schemaVersion").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ManifestWrapper</c>:
        /// <code>{
        ///   mediaType: string, # Optional. Media type for this Manifest
        ///   manifests: [
        ///     {
        ///       mediaType: string, # Optional. The MIME type of the referenced object. This will generally be application/vnd.docker.image.manifest.v2+json, but it could also be application/vnd.docker.image.manifest.v1+json
        ///       size: number, # Optional. The size in bytes of the object
        ///       digest: string, # Optional. The digest of the content, as defined by the Registry V2 HTTP API Specification
        ///       platform: {
        ///         architecture: string, # Optional. Specifies the CPU architecture, for example amd64 or ppc64le.
        ///         os: string, # Optional. The os field specifies the operating system, for example linux or windows.
        ///         os.version: string, # Optional. The optional os.version field specifies the operating system version, for example 10.0.10586.
        ///         os.features: [string], # Optional. The optional os.features field specifies an array of strings, each listing a required OS feature (for example on Windows win32k
        ///         variant: string, # Optional. The optional variant field specifies a variant of the CPU, for example armv6l to specify a particular CPU variant of the ARM CPU.
        ///         features: [string], # Optional. The optional features field specifies an array of strings, each listing a required CPU feature (for example sse4 or aes
        ///       }, # Optional. The platform object describes the platform which the image in the manifest runs on. A full list of valid operating system and architecture values are listed in the Go language documentation for $GOOS and $GOARCH
        ///     }
        ///   ], # Optional. (ManifestList, OCIIndex) List of V2 image layer information
        ///   config: {
        ///     mediaType: string, # Optional. Layer media type
        ///     size: number, # Optional. Layer size
        ///     digest: string, # Optional. Layer digest
        ///     urls: [string], # Optional. Specifies a list of URIs from which this object may be downloaded.
        ///     annotations: {
        ///       org.opencontainers.image.created: string (ISO 8601 Format), # Optional. Date and time on which the image was built (string, date-time as defined by https://tools.ietf.org/html/rfc3339#section-5.6)
        ///       org.opencontainers.image.authors: string, # Optional. Contact details of the people or organization responsible for the image.
        ///       org.opencontainers.image.url: string, # Optional. URL to find more information on the image.
        ///       org.opencontainers.image.documentation: string, # Optional. URL to get documentation on the image.
        ///       org.opencontainers.image.source: string, # Optional. URL to get source code for building the image.
        ///       org.opencontainers.image.version: string, # Optional. Version of the packaged software. The version MAY match a label or tag in the source code repository, may also be Semantic versioning-compatible
        ///       org.opencontainers.image.revision: string, # Optional. Source control revision identifier for the packaged software.
        ///       org.opencontainers.image.vendor: string, # Optional. Name of the distributing entity, organization or individual.
        ///       org.opencontainers.image.licenses: string, # Optional. License(s) under which contained software is distributed as an SPDX License Expression.
        ///       org.opencontainers.image.ref.name: string, # Optional. Name of the reference for a target.
        ///       org.opencontainers.image.title: string, # Optional. Human-readable title of the image
        ///       org.opencontainers.image.description: string, # Optional. Human-readable description of the software packaged in the image
        ///     }, # Optional. Additional information provided through arbitrary metadata.
        ///   }, # Optional. (V2, OCI) Image config descriptor
        ///   layers: [Descriptor], # Optional. (V2, OCI) List of V2 image layer information
        ///   annotations: Annotations, # Optional. (OCI, OCIIndex) Additional metadata
        ///   architecture: string, # Optional. (V1) CPU architecture
        ///   name: string, # Optional. (V1) Image name
        ///   tag: string, # Optional. (V1) Image tag
        ///   fsLayers: [
        ///     {
        ///       blobSum: string, # Optional. SHA of an image layer
        ///     }
        ///   ], # Optional. (V1) List of layer information
        ///   history: [
        ///     {
        ///       v1Compatibility: string, # Optional. The raw v1 compatibility information
        ///     }
        ///   ], # Optional. (V1) Image history
        ///   signatures: [
        ///     {
        ///       header: {
        ///         jwk: {
        ///           crv: string, # Optional. crv value
        ///           kid: string, # Optional. kid value
        ///           kty: string, # Optional. kty value
        ///           x: string, # Optional. x value
        ///           y: string, # Optional. y value
        ///         }, # Optional. JSON web key parameter
        ///         alg: string, # Optional. The algorithm used to sign or encrypt the JWT
        ///       }, # Optional. A JSON web signature
        ///       signature: string, # Optional. A signature for the image manifest, signed by a libtrust private key
        ///       protected: string, # Optional. The signed protected header
        ///     }
        ///   ], # Optional. (V1) Image signature
        ///   schemaVersion: number, # Optional. Schema version
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetManifest(string name, string reference, string accept = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));
            Argument.AssertNotNullOrEmpty(reference, nameof(reference));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryClient.GetManifest");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetManifestRequest(name, reference, accept, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Put the manifest identified by `name` and `reference` where `reference` can be a tag or digest. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="reference"> A tag or a digest, pointing to a specific image. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/>, <paramref name="reference"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> or <paramref name="reference"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CreateManifestAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.CreateManifestAsync("<name>", "<reference>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateManifestAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// var data = new {
        ///     mediaType = "<mediaType>",
        ///     manifests = new[] {
        ///         new {
        ///             mediaType = "<mediaType>",
        ///             size = 1234L,
        ///             digest = "<digest>",
        ///             platform = new {
        ///                 architecture = "<architecture>",
        ///                 os = "<os>",
        ///                 os.version = "<os.version>",
        ///                 os.features = new[] {
        ///                     "<String>"
        ///                 },
        ///                 variant = "<variant>",
        ///                 features = new[] {
        ///                     "<String>"
        ///                 },
        ///             },
        ///         }
        ///     },
        ///     config = new {
        ///         mediaType = "<mediaType>",
        ///         size = 1234L,
        ///         digest = "<digest>",
        ///         urls = new[] {
        ///             "<String>"
        ///         },
        ///         annotations = new {
        ///             org.opencontainers.image.created = "2022-05-10T18:57:31.2311892Z",
        ///             org.opencontainers.image.authors = "<org.opencontainers.image.authors>",
        ///             org.opencontainers.image.url = "<org.opencontainers.image.url>",
        ///             org.opencontainers.image.documentation = "<org.opencontainers.image.documentation>",
        ///             org.opencontainers.image.source = "<org.opencontainers.image.source>",
        ///             org.opencontainers.image.version = "<org.opencontainers.image.version>",
        ///             org.opencontainers.image.revision = "<org.opencontainers.image.revision>",
        ///             org.opencontainers.image.vendor = "<org.opencontainers.image.vendor>",
        ///             org.opencontainers.image.licenses = "<org.opencontainers.image.licenses>",
        ///             org.opencontainers.image.ref.name = "<org.opencontainers.image.ref.name>",
        ///             org.opencontainers.image.title = "<org.opencontainers.image.title>",
        ///             org.opencontainers.image.description = "<org.opencontainers.image.description>",
        ///         },
        ///     },
        ///     layers = new[] {
        ///         new {
        ///             mediaType = "<mediaType>",
        ///             size = 1234L,
        ///             digest = "<digest>",
        ///             urls = new[] {
        ///                 "<String>"
        ///             },
        ///             annotations = new {
        ///                 org.opencontainers.image.created = "2022-05-10T18:57:31.2311892Z",
        ///                 org.opencontainers.image.authors = "<org.opencontainers.image.authors>",
        ///                 org.opencontainers.image.url = "<org.opencontainers.image.url>",
        ///                 org.opencontainers.image.documentation = "<org.opencontainers.image.documentation>",
        ///                 org.opencontainers.image.source = "<org.opencontainers.image.source>",
        ///                 org.opencontainers.image.version = "<org.opencontainers.image.version>",
        ///                 org.opencontainers.image.revision = "<org.opencontainers.image.revision>",
        ///                 org.opencontainers.image.vendor = "<org.opencontainers.image.vendor>",
        ///                 org.opencontainers.image.licenses = "<org.opencontainers.image.licenses>",
        ///                 org.opencontainers.image.ref.name = "<org.opencontainers.image.ref.name>",
        ///                 org.opencontainers.image.title = "<org.opencontainers.image.title>",
        ///                 org.opencontainers.image.description = "<org.opencontainers.image.description>",
        ///             },
        ///         }
        ///     },
        ///     annotations = new {
        ///         org.opencontainers.image.created = "2022-05-10T18:57:31.2311892Z",
        ///         org.opencontainers.image.authors = "<org.opencontainers.image.authors>",
        ///         org.opencontainers.image.url = "<org.opencontainers.image.url>",
        ///         org.opencontainers.image.documentation = "<org.opencontainers.image.documentation>",
        ///         org.opencontainers.image.source = "<org.opencontainers.image.source>",
        ///         org.opencontainers.image.version = "<org.opencontainers.image.version>",
        ///         org.opencontainers.image.revision = "<org.opencontainers.image.revision>",
        ///         org.opencontainers.image.vendor = "<org.opencontainers.image.vendor>",
        ///         org.opencontainers.image.licenses = "<org.opencontainers.image.licenses>",
        ///         org.opencontainers.image.ref.name = "<org.opencontainers.image.ref.name>",
        ///         org.opencontainers.image.title = "<org.opencontainers.image.title>",
        ///         org.opencontainers.image.description = "<org.opencontainers.image.description>",
        ///     },
        ///     architecture = "<architecture>",
        ///     name = "<name>",
        ///     tag = "<tag>",
        ///     fsLayers = new[] {
        ///         new {
        ///             blobSum = "<blobSum>",
        ///         }
        ///     },
        ///     history = new[] {
        ///         new {
        ///             v1Compatibility = "<v1Compatibility>",
        ///         }
        ///     },
        ///     signatures = new[] {
        ///         new {
        ///             header = new {
        ///                 jwk = new {
        ///                     crv = "<crv>",
        ///                     kid = "<kid>",
        ///                     kty = "<kty>",
        ///                     x = "<x>",
        ///                     y = "<y>",
        ///                 },
        ///                 alg = "<alg>",
        ///             },
        ///             signature = "<signature>",
        ///             protected = "<protected>",
        ///         }
        ///     },
        ///     schemaVersion = 1234,
        /// };
        /// 
        /// Response response = await client.CreateManifestAsync("<name>", "<reference>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
        /// <details><summary>ManifestWrapper</summary>Schema for <c>ManifestWrapper</c>:
        /// <code>{
        ///   mediaType: string, # Optional. Media type for this Manifest
        ///   manifests: [
        ///     {
        ///       mediaType: string, # Optional. The MIME type of the referenced object. This will generally be application/vnd.docker.image.manifest.v2+json, but it could also be application/vnd.docker.image.manifest.v1+json
        ///       size: number, # Optional. The size in bytes of the object
        ///       digest: string, # Optional. The digest of the content, as defined by the Registry V2 HTTP API Specification
        ///       platform: {
        ///         architecture: string, # Optional. Specifies the CPU architecture, for example amd64 or ppc64le.
        ///         os: string, # Optional. The os field specifies the operating system, for example linux or windows.
        ///         os.version: string, # Optional. The optional os.version field specifies the operating system version, for example 10.0.10586.
        ///         os.features: [string], # Optional. The optional os.features field specifies an array of strings, each listing a required OS feature (for example on Windows win32k
        ///         variant: string, # Optional. The optional variant field specifies a variant of the CPU, for example armv6l to specify a particular CPU variant of the ARM CPU.
        ///         features: [string], # Optional. The optional features field specifies an array of strings, each listing a required CPU feature (for example sse4 or aes
        ///       }, # Optional. The platform object describes the platform which the image in the manifest runs on. A full list of valid operating system and architecture values are listed in the Go language documentation for $GOOS and $GOARCH
        ///     }
        ///   ], # Optional. (ManifestList, OCIIndex) List of V2 image layer information
        ///   config: {
        ///     mediaType: string, # Optional. Layer media type
        ///     size: number, # Optional. Layer size
        ///     digest: string, # Optional. Layer digest
        ///     urls: [string], # Optional. Specifies a list of URIs from which this object may be downloaded.
        ///     annotations: {
        ///       org.opencontainers.image.created: string (ISO 8601 Format), # Optional. Date and time on which the image was built (string, date-time as defined by https://tools.ietf.org/html/rfc3339#section-5.6)
        ///       org.opencontainers.image.authors: string, # Optional. Contact details of the people or organization responsible for the image.
        ///       org.opencontainers.image.url: string, # Optional. URL to find more information on the image.
        ///       org.opencontainers.image.documentation: string, # Optional. URL to get documentation on the image.
        ///       org.opencontainers.image.source: string, # Optional. URL to get source code for building the image.
        ///       org.opencontainers.image.version: string, # Optional. Version of the packaged software. The version MAY match a label or tag in the source code repository, may also be Semantic versioning-compatible
        ///       org.opencontainers.image.revision: string, # Optional. Source control revision identifier for the packaged software.
        ///       org.opencontainers.image.vendor: string, # Optional. Name of the distributing entity, organization or individual.
        ///       org.opencontainers.image.licenses: string, # Optional. License(s) under which contained software is distributed as an SPDX License Expression.
        ///       org.opencontainers.image.ref.name: string, # Optional. Name of the reference for a target.
        ///       org.opencontainers.image.title: string, # Optional. Human-readable title of the image
        ///       org.opencontainers.image.description: string, # Optional. Human-readable description of the software packaged in the image
        ///     }, # Optional. Additional information provided through arbitrary metadata.
        ///   }, # Optional. (V2, OCI) Image config descriptor
        ///   layers: [Descriptor], # Optional. (V2, OCI) List of V2 image layer information
        ///   annotations: Annotations, # Optional. (OCI, OCIIndex) Additional metadata
        ///   architecture: string, # Optional. (V1) CPU architecture
        ///   name: string, # Optional. (V1) Image name
        ///   tag: string, # Optional. (V1) Image tag
        ///   fsLayers: [
        ///     {
        ///       blobSum: string, # Optional. SHA of an image layer
        ///     }
        ///   ], # Optional. (V1) List of layer information
        ///   history: [
        ///     {
        ///       v1Compatibility: string, # Optional. The raw v1 compatibility information
        ///     }
        ///   ], # Optional. (V1) Image history
        ///   signatures: [
        ///     {
        ///       header: {
        ///         jwk: {
        ///           crv: string, # Optional. crv value
        ///           kid: string, # Optional. kid value
        ///           kty: string, # Optional. kty value
        ///           x: string, # Optional. x value
        ///           y: string, # Optional. y value
        ///         }, # Optional. JSON web key parameter
        ///         alg: string, # Optional. The algorithm used to sign or encrypt the JWT
        ///       }, # Optional. A JSON web signature
        ///       signature: string, # Optional. A signature for the image manifest, signed by a libtrust private key
        ///       protected: string, # Optional. The signed protected header
        ///     }
        ///   ], # Optional. (V1) Image signature
        ///   schemaVersion: number, # Optional. Schema version
        /// }
        /// </code>
        /// </details>
        /// <details><summary>~+ 5 more JSON objects</summary><details><summary>ManifestList</summary>Schema for <c>ManifestList</c>:
        /// <code>{
        ///   mediaType: string, # Optional. Media type for this Manifest
        ///   manifests: [
        ///     {
        ///       mediaType: string, # Optional. The MIME type of the referenced object. This will generally be application/vnd.docker.image.manifest.v2+json, but it could also be application/vnd.docker.image.manifest.v1+json
        ///       size: number, # Optional. The size in bytes of the object
        ///       digest: string, # Optional. The digest of the content, as defined by the Registry V2 HTTP API Specification
        ///       platform: {
        ///         architecture: string, # Optional. Specifies the CPU architecture, for example amd64 or ppc64le.
        ///         os: string, # Optional. The os field specifies the operating system, for example linux or windows.
        ///         os.version: string, # Optional. The optional os.version field specifies the operating system version, for example 10.0.10586.
        ///         os.features: [string], # Optional. The optional os.features field specifies an array of strings, each listing a required OS feature (for example on Windows win32k
        ///         variant: string, # Optional. The optional variant field specifies a variant of the CPU, for example armv6l to specify a particular CPU variant of the ARM CPU.
        ///         features: [string], # Optional. The optional features field specifies an array of strings, each listing a required CPU feature (for example sse4 or aes
        ///       }, # Optional. The platform object describes the platform which the image in the manifest runs on. A full list of valid operating system and architecture values are listed in the Go language documentation for $GOOS and $GOARCH
        ///     }
        ///   ], # Optional. List of V2 image layer information
        ///   schemaVersion: number, # Optional. Schema version
        /// }
        /// </code>
        /// </details>
        /// <details><summary>V2Manifest</summary>Schema for <c>V2Manifest</c>:
        /// <code>{
        ///   mediaType: string, # Optional. Media type for this Manifest
        ///   config: {
        ///     mediaType: string, # Optional. Layer media type
        ///     size: number, # Optional. Layer size
        ///     digest: string, # Optional. Layer digest
        ///     urls: [string], # Optional. Specifies a list of URIs from which this object may be downloaded.
        ///     annotations: {
        ///       org.opencontainers.image.created: string (ISO 8601 Format), # Optional. Date and time on which the image was built (string, date-time as defined by https://tools.ietf.org/html/rfc3339#section-5.6)
        ///       org.opencontainers.image.authors: string, # Optional. Contact details of the people or organization responsible for the image.
        ///       org.opencontainers.image.url: string, # Optional. URL to find more information on the image.
        ///       org.opencontainers.image.documentation: string, # Optional. URL to get documentation on the image.
        ///       org.opencontainers.image.source: string, # Optional. URL to get source code for building the image.
        ///       org.opencontainers.image.version: string, # Optional. Version of the packaged software. The version MAY match a label or tag in the source code repository, may also be Semantic versioning-compatible
        ///       org.opencontainers.image.revision: string, # Optional. Source control revision identifier for the packaged software.
        ///       org.opencontainers.image.vendor: string, # Optional. Name of the distributing entity, organization or individual.
        ///       org.opencontainers.image.licenses: string, # Optional. License(s) under which contained software is distributed as an SPDX License Expression.
        ///       org.opencontainers.image.ref.name: string, # Optional. Name of the reference for a target.
        ///       org.opencontainers.image.title: string, # Optional. Human-readable title of the image
        ///       org.opencontainers.image.description: string, # Optional. Human-readable description of the software packaged in the image
        ///     }, # Optional. Additional information provided through arbitrary metadata.
        ///   }, # Optional. V2 image config descriptor
        ///   layers: [Descriptor], # Optional. List of V2 image layer information
        ///   schemaVersion: number, # Optional. Schema version
        /// }
        /// </code>
        /// </details>
        /// <details><summary>OCIManifest</summary>Schema for <c>OCIManifest</c>:
        /// <code>{
        ///   config: {
        ///     mediaType: string, # Optional. Layer media type
        ///     size: number, # Optional. Layer size
        ///     digest: string, # Optional. Layer digest
        ///     urls: [string], # Optional. Specifies a list of URIs from which this object may be downloaded.
        ///     annotations: {
        ///       org.opencontainers.image.created: string (ISO 8601 Format), # Optional. Date and time on which the image was built (string, date-time as defined by https://tools.ietf.org/html/rfc3339#section-5.6)
        ///       org.opencontainers.image.authors: string, # Optional. Contact details of the people or organization responsible for the image.
        ///       org.opencontainers.image.url: string, # Optional. URL to find more information on the image.
        ///       org.opencontainers.image.documentation: string, # Optional. URL to get documentation on the image.
        ///       org.opencontainers.image.source: string, # Optional. URL to get source code for building the image.
        ///       org.opencontainers.image.version: string, # Optional. Version of the packaged software. The version MAY match a label or tag in the source code repository, may also be Semantic versioning-compatible
        ///       org.opencontainers.image.revision: string, # Optional. Source control revision identifier for the packaged software.
        ///       org.opencontainers.image.vendor: string, # Optional. Name of the distributing entity, organization or individual.
        ///       org.opencontainers.image.licenses: string, # Optional. License(s) under which contained software is distributed as an SPDX License Expression.
        ///       org.opencontainers.image.ref.name: string, # Optional. Name of the reference for a target.
        ///       org.opencontainers.image.title: string, # Optional. Human-readable title of the image
        ///       org.opencontainers.image.description: string, # Optional. Human-readable description of the software packaged in the image
        ///     }, # Optional. Additional information provided through arbitrary metadata.
        ///   }, # Optional. V2 image config descriptor
        ///   layers: [Descriptor], # Optional. List of V2 image layer information
        ///   annotations: Annotations, # Optional. Additional information provided through arbitrary metadata.
        ///   schemaVersion: number, # Optional. Schema version
        /// }
        /// </code>
        /// </details>
        /// <details><summary>OCIIndex</summary>Schema for <c>OCIIndex</c>:
        /// <code>{
        ///   manifests: [
        ///     {
        ///       mediaType: string, # Optional. The MIME type of the referenced object. This will generally be application/vnd.docker.image.manifest.v2+json, but it could also be application/vnd.docker.image.manifest.v1+json
        ///       size: number, # Optional. The size in bytes of the object
        ///       digest: string, # Optional. The digest of the content, as defined by the Registry V2 HTTP API Specification
        ///       platform: {
        ///         architecture: string, # Optional. Specifies the CPU architecture, for example amd64 or ppc64le.
        ///         os: string, # Optional. The os field specifies the operating system, for example linux or windows.
        ///         os.version: string, # Optional. The optional os.version field specifies the operating system version, for example 10.0.10586.
        ///         os.features: [string], # Optional. The optional os.features field specifies an array of strings, each listing a required OS feature (for example on Windows win32k
        ///         variant: string, # Optional. The optional variant field specifies a variant of the CPU, for example armv6l to specify a particular CPU variant of the ARM CPU.
        ///         features: [string], # Optional. The optional features field specifies an array of strings, each listing a required CPU feature (for example sse4 or aes
        ///       }, # Optional. The platform object describes the platform which the image in the manifest runs on. A full list of valid operating system and architecture values are listed in the Go language documentation for $GOOS and $GOARCH
        ///     }
        ///   ], # Optional. List of OCI image layer information
        ///   annotations: {
        ///     org.opencontainers.image.created: string (ISO 8601 Format), # Optional. Date and time on which the image was built (string, date-time as defined by https://tools.ietf.org/html/rfc3339#section-5.6)
        ///     org.opencontainers.image.authors: string, # Optional. Contact details of the people or organization responsible for the image.
        ///     org.opencontainers.image.url: string, # Optional. URL to find more information on the image.
        ///     org.opencontainers.image.documentation: string, # Optional. URL to get documentation on the image.
        ///     org.opencontainers.image.source: string, # Optional. URL to get source code for building the image.
        ///     org.opencontainers.image.version: string, # Optional. Version of the packaged software. The version MAY match a label or tag in the source code repository, may also be Semantic versioning-compatible
        ///     org.opencontainers.image.revision: string, # Optional. Source control revision identifier for the packaged software.
        ///     org.opencontainers.image.vendor: string, # Optional. Name of the distributing entity, organization or individual.
        ///     org.opencontainers.image.licenses: string, # Optional. License(s) under which contained software is distributed as an SPDX License Expression.
        ///     org.opencontainers.image.ref.name: string, # Optional. Name of the reference for a target.
        ///     org.opencontainers.image.title: string, # Optional. Human-readable title of the image
        ///     org.opencontainers.image.description: string, # Optional. Human-readable description of the software packaged in the image
        ///   }, # Optional. Additional information provided through arbitrary metadata.
        ///   schemaVersion: number, # Optional. Schema version
        /// }
        /// </code>
        /// </details>
        /// <details><summary>V1Manifest</summary>Schema for <c>V1Manifest</c>:
        /// <code>{
        ///   architecture: string, # Optional. CPU architecture
        ///   name: string, # Optional. Image name
        ///   tag: string, # Optional. Image tag
        ///   fsLayers: [
        ///     {
        ///       blobSum: string, # Optional. SHA of an image layer
        ///     }
        ///   ], # Optional. List of layer information
        ///   history: [
        ///     {
        ///       v1Compatibility: string, # Optional. The raw v1 compatibility information
        ///     }
        ///   ], # Optional. Image history
        ///   signatures: [
        ///     {
        ///       header: {
        ///         jwk: {
        ///           crv: string, # Optional. crv value
        ///           kid: string, # Optional. kid value
        ///           kty: string, # Optional. kty value
        ///           x: string, # Optional. x value
        ///           y: string, # Optional. y value
        ///         }, # Optional. JSON web key parameter
        ///         alg: string, # Optional. The algorithm used to sign or encrypt the JWT
        ///       }, # Optional. A JSON web signature
        ///       signature: string, # Optional. A signature for the image manifest, signed by a libtrust private key
        ///       protected: string, # Optional. The signed protected header
        ///     }
        ///   ], # Optional. Image signature
        ///   schemaVersion: number, # Optional. Schema version
        /// }
        /// </code>
        /// </details>
        /// </details>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateManifestAsync(string name, string reference, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));
            Argument.AssertNotNullOrEmpty(reference, nameof(reference));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryClient.CreateManifest");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateManifestRequest(name, reference, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Put the manifest identified by `name` and `reference` where `reference` can be a tag or digest. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="reference"> A tag or a digest, pointing to a specific image. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/>, <paramref name="reference"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> or <paramref name="reference"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CreateManifest with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.CreateManifest("<name>", "<reference>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateManifest with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// var data = new {
        ///     mediaType = "<mediaType>",
        ///     manifests = new[] {
        ///         new {
        ///             mediaType = "<mediaType>",
        ///             size = 1234L,
        ///             digest = "<digest>",
        ///             platform = new {
        ///                 architecture = "<architecture>",
        ///                 os = "<os>",
        ///                 os.version = "<os.version>",
        ///                 os.features = new[] {
        ///                     "<String>"
        ///                 },
        ///                 variant = "<variant>",
        ///                 features = new[] {
        ///                     "<String>"
        ///                 },
        ///             },
        ///         }
        ///     },
        ///     config = new {
        ///         mediaType = "<mediaType>",
        ///         size = 1234L,
        ///         digest = "<digest>",
        ///         urls = new[] {
        ///             "<String>"
        ///         },
        ///         annotations = new {
        ///             org.opencontainers.image.created = "2022-05-10T18:57:31.2311892Z",
        ///             org.opencontainers.image.authors = "<org.opencontainers.image.authors>",
        ///             org.opencontainers.image.url = "<org.opencontainers.image.url>",
        ///             org.opencontainers.image.documentation = "<org.opencontainers.image.documentation>",
        ///             org.opencontainers.image.source = "<org.opencontainers.image.source>",
        ///             org.opencontainers.image.version = "<org.opencontainers.image.version>",
        ///             org.opencontainers.image.revision = "<org.opencontainers.image.revision>",
        ///             org.opencontainers.image.vendor = "<org.opencontainers.image.vendor>",
        ///             org.opencontainers.image.licenses = "<org.opencontainers.image.licenses>",
        ///             org.opencontainers.image.ref.name = "<org.opencontainers.image.ref.name>",
        ///             org.opencontainers.image.title = "<org.opencontainers.image.title>",
        ///             org.opencontainers.image.description = "<org.opencontainers.image.description>",
        ///         },
        ///     },
        ///     layers = new[] {
        ///         new {
        ///             mediaType = "<mediaType>",
        ///             size = 1234L,
        ///             digest = "<digest>",
        ///             urls = new[] {
        ///                 "<String>"
        ///             },
        ///             annotations = new {
        ///                 org.opencontainers.image.created = "2022-05-10T18:57:31.2311892Z",
        ///                 org.opencontainers.image.authors = "<org.opencontainers.image.authors>",
        ///                 org.opencontainers.image.url = "<org.opencontainers.image.url>",
        ///                 org.opencontainers.image.documentation = "<org.opencontainers.image.documentation>",
        ///                 org.opencontainers.image.source = "<org.opencontainers.image.source>",
        ///                 org.opencontainers.image.version = "<org.opencontainers.image.version>",
        ///                 org.opencontainers.image.revision = "<org.opencontainers.image.revision>",
        ///                 org.opencontainers.image.vendor = "<org.opencontainers.image.vendor>",
        ///                 org.opencontainers.image.licenses = "<org.opencontainers.image.licenses>",
        ///                 org.opencontainers.image.ref.name = "<org.opencontainers.image.ref.name>",
        ///                 org.opencontainers.image.title = "<org.opencontainers.image.title>",
        ///                 org.opencontainers.image.description = "<org.opencontainers.image.description>",
        ///             },
        ///         }
        ///     },
        ///     annotations = new {
        ///         org.opencontainers.image.created = "2022-05-10T18:57:31.2311892Z",
        ///         org.opencontainers.image.authors = "<org.opencontainers.image.authors>",
        ///         org.opencontainers.image.url = "<org.opencontainers.image.url>",
        ///         org.opencontainers.image.documentation = "<org.opencontainers.image.documentation>",
        ///         org.opencontainers.image.source = "<org.opencontainers.image.source>",
        ///         org.opencontainers.image.version = "<org.opencontainers.image.version>",
        ///         org.opencontainers.image.revision = "<org.opencontainers.image.revision>",
        ///         org.opencontainers.image.vendor = "<org.opencontainers.image.vendor>",
        ///         org.opencontainers.image.licenses = "<org.opencontainers.image.licenses>",
        ///         org.opencontainers.image.ref.name = "<org.opencontainers.image.ref.name>",
        ///         org.opencontainers.image.title = "<org.opencontainers.image.title>",
        ///         org.opencontainers.image.description = "<org.opencontainers.image.description>",
        ///     },
        ///     architecture = "<architecture>",
        ///     name = "<name>",
        ///     tag = "<tag>",
        ///     fsLayers = new[] {
        ///         new {
        ///             blobSum = "<blobSum>",
        ///         }
        ///     },
        ///     history = new[] {
        ///         new {
        ///             v1Compatibility = "<v1Compatibility>",
        ///         }
        ///     },
        ///     signatures = new[] {
        ///         new {
        ///             header = new {
        ///                 jwk = new {
        ///                     crv = "<crv>",
        ///                     kid = "<kid>",
        ///                     kty = "<kty>",
        ///                     x = "<x>",
        ///                     y = "<y>",
        ///                 },
        ///                 alg = "<alg>",
        ///             },
        ///             signature = "<signature>",
        ///             protected = "<protected>",
        ///         }
        ///     },
        ///     schemaVersion = 1234,
        /// };
        /// 
        /// Response response = client.CreateManifest("<name>", "<reference>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
        /// <details><summary>ManifestWrapper</summary>Schema for <c>ManifestWrapper</c>:
        /// <code>{
        ///   mediaType: string, # Optional. Media type for this Manifest
        ///   manifests: [
        ///     {
        ///       mediaType: string, # Optional. The MIME type of the referenced object. This will generally be application/vnd.docker.image.manifest.v2+json, but it could also be application/vnd.docker.image.manifest.v1+json
        ///       size: number, # Optional. The size in bytes of the object
        ///       digest: string, # Optional. The digest of the content, as defined by the Registry V2 HTTP API Specification
        ///       platform: {
        ///         architecture: string, # Optional. Specifies the CPU architecture, for example amd64 or ppc64le.
        ///         os: string, # Optional. The os field specifies the operating system, for example linux or windows.
        ///         os.version: string, # Optional. The optional os.version field specifies the operating system version, for example 10.0.10586.
        ///         os.features: [string], # Optional. The optional os.features field specifies an array of strings, each listing a required OS feature (for example on Windows win32k
        ///         variant: string, # Optional. The optional variant field specifies a variant of the CPU, for example armv6l to specify a particular CPU variant of the ARM CPU.
        ///         features: [string], # Optional. The optional features field specifies an array of strings, each listing a required CPU feature (for example sse4 or aes
        ///       }, # Optional. The platform object describes the platform which the image in the manifest runs on. A full list of valid operating system and architecture values are listed in the Go language documentation for $GOOS and $GOARCH
        ///     }
        ///   ], # Optional. (ManifestList, OCIIndex) List of V2 image layer information
        ///   config: {
        ///     mediaType: string, # Optional. Layer media type
        ///     size: number, # Optional. Layer size
        ///     digest: string, # Optional. Layer digest
        ///     urls: [string], # Optional. Specifies a list of URIs from which this object may be downloaded.
        ///     annotations: {
        ///       org.opencontainers.image.created: string (ISO 8601 Format), # Optional. Date and time on which the image was built (string, date-time as defined by https://tools.ietf.org/html/rfc3339#section-5.6)
        ///       org.opencontainers.image.authors: string, # Optional. Contact details of the people or organization responsible for the image.
        ///       org.opencontainers.image.url: string, # Optional. URL to find more information on the image.
        ///       org.opencontainers.image.documentation: string, # Optional. URL to get documentation on the image.
        ///       org.opencontainers.image.source: string, # Optional. URL to get source code for building the image.
        ///       org.opencontainers.image.version: string, # Optional. Version of the packaged software. The version MAY match a label or tag in the source code repository, may also be Semantic versioning-compatible
        ///       org.opencontainers.image.revision: string, # Optional. Source control revision identifier for the packaged software.
        ///       org.opencontainers.image.vendor: string, # Optional. Name of the distributing entity, organization or individual.
        ///       org.opencontainers.image.licenses: string, # Optional. License(s) under which contained software is distributed as an SPDX License Expression.
        ///       org.opencontainers.image.ref.name: string, # Optional. Name of the reference for a target.
        ///       org.opencontainers.image.title: string, # Optional. Human-readable title of the image
        ///       org.opencontainers.image.description: string, # Optional. Human-readable description of the software packaged in the image
        ///     }, # Optional. Additional information provided through arbitrary metadata.
        ///   }, # Optional. (V2, OCI) Image config descriptor
        ///   layers: [Descriptor], # Optional. (V2, OCI) List of V2 image layer information
        ///   annotations: Annotations, # Optional. (OCI, OCIIndex) Additional metadata
        ///   architecture: string, # Optional. (V1) CPU architecture
        ///   name: string, # Optional. (V1) Image name
        ///   tag: string, # Optional. (V1) Image tag
        ///   fsLayers: [
        ///     {
        ///       blobSum: string, # Optional. SHA of an image layer
        ///     }
        ///   ], # Optional. (V1) List of layer information
        ///   history: [
        ///     {
        ///       v1Compatibility: string, # Optional. The raw v1 compatibility information
        ///     }
        ///   ], # Optional. (V1) Image history
        ///   signatures: [
        ///     {
        ///       header: {
        ///         jwk: {
        ///           crv: string, # Optional. crv value
        ///           kid: string, # Optional. kid value
        ///           kty: string, # Optional. kty value
        ///           x: string, # Optional. x value
        ///           y: string, # Optional. y value
        ///         }, # Optional. JSON web key parameter
        ///         alg: string, # Optional. The algorithm used to sign or encrypt the JWT
        ///       }, # Optional. A JSON web signature
        ///       signature: string, # Optional. A signature for the image manifest, signed by a libtrust private key
        ///       protected: string, # Optional. The signed protected header
        ///     }
        ///   ], # Optional. (V1) Image signature
        ///   schemaVersion: number, # Optional. Schema version
        /// }
        /// </code>
        /// </details>
        /// <details><summary>~+ 5 more JSON objects</summary><details><summary>ManifestList</summary>Schema for <c>ManifestList</c>:
        /// <code>{
        ///   mediaType: string, # Optional. Media type for this Manifest
        ///   manifests: [
        ///     {
        ///       mediaType: string, # Optional. The MIME type of the referenced object. This will generally be application/vnd.docker.image.manifest.v2+json, but it could also be application/vnd.docker.image.manifest.v1+json
        ///       size: number, # Optional. The size in bytes of the object
        ///       digest: string, # Optional. The digest of the content, as defined by the Registry V2 HTTP API Specification
        ///       platform: {
        ///         architecture: string, # Optional. Specifies the CPU architecture, for example amd64 or ppc64le.
        ///         os: string, # Optional. The os field specifies the operating system, for example linux or windows.
        ///         os.version: string, # Optional. The optional os.version field specifies the operating system version, for example 10.0.10586.
        ///         os.features: [string], # Optional. The optional os.features field specifies an array of strings, each listing a required OS feature (for example on Windows win32k
        ///         variant: string, # Optional. The optional variant field specifies a variant of the CPU, for example armv6l to specify a particular CPU variant of the ARM CPU.
        ///         features: [string], # Optional. The optional features field specifies an array of strings, each listing a required CPU feature (for example sse4 or aes
        ///       }, # Optional. The platform object describes the platform which the image in the manifest runs on. A full list of valid operating system and architecture values are listed in the Go language documentation for $GOOS and $GOARCH
        ///     }
        ///   ], # Optional. List of V2 image layer information
        ///   schemaVersion: number, # Optional. Schema version
        /// }
        /// </code>
        /// </details>
        /// <details><summary>V2Manifest</summary>Schema for <c>V2Manifest</c>:
        /// <code>{
        ///   mediaType: string, # Optional. Media type for this Manifest
        ///   config: {
        ///     mediaType: string, # Optional. Layer media type
        ///     size: number, # Optional. Layer size
        ///     digest: string, # Optional. Layer digest
        ///     urls: [string], # Optional. Specifies a list of URIs from which this object may be downloaded.
        ///     annotations: {
        ///       org.opencontainers.image.created: string (ISO 8601 Format), # Optional. Date and time on which the image was built (string, date-time as defined by https://tools.ietf.org/html/rfc3339#section-5.6)
        ///       org.opencontainers.image.authors: string, # Optional. Contact details of the people or organization responsible for the image.
        ///       org.opencontainers.image.url: string, # Optional. URL to find more information on the image.
        ///       org.opencontainers.image.documentation: string, # Optional. URL to get documentation on the image.
        ///       org.opencontainers.image.source: string, # Optional. URL to get source code for building the image.
        ///       org.opencontainers.image.version: string, # Optional. Version of the packaged software. The version MAY match a label or tag in the source code repository, may also be Semantic versioning-compatible
        ///       org.opencontainers.image.revision: string, # Optional. Source control revision identifier for the packaged software.
        ///       org.opencontainers.image.vendor: string, # Optional. Name of the distributing entity, organization or individual.
        ///       org.opencontainers.image.licenses: string, # Optional. License(s) under which contained software is distributed as an SPDX License Expression.
        ///       org.opencontainers.image.ref.name: string, # Optional. Name of the reference for a target.
        ///       org.opencontainers.image.title: string, # Optional. Human-readable title of the image
        ///       org.opencontainers.image.description: string, # Optional. Human-readable description of the software packaged in the image
        ///     }, # Optional. Additional information provided through arbitrary metadata.
        ///   }, # Optional. V2 image config descriptor
        ///   layers: [Descriptor], # Optional. List of V2 image layer information
        ///   schemaVersion: number, # Optional. Schema version
        /// }
        /// </code>
        /// </details>
        /// <details><summary>OCIManifest</summary>Schema for <c>OCIManifest</c>:
        /// <code>{
        ///   config: {
        ///     mediaType: string, # Optional. Layer media type
        ///     size: number, # Optional. Layer size
        ///     digest: string, # Optional. Layer digest
        ///     urls: [string], # Optional. Specifies a list of URIs from which this object may be downloaded.
        ///     annotations: {
        ///       org.opencontainers.image.created: string (ISO 8601 Format), # Optional. Date and time on which the image was built (string, date-time as defined by https://tools.ietf.org/html/rfc3339#section-5.6)
        ///       org.opencontainers.image.authors: string, # Optional. Contact details of the people or organization responsible for the image.
        ///       org.opencontainers.image.url: string, # Optional. URL to find more information on the image.
        ///       org.opencontainers.image.documentation: string, # Optional. URL to get documentation on the image.
        ///       org.opencontainers.image.source: string, # Optional. URL to get source code for building the image.
        ///       org.opencontainers.image.version: string, # Optional. Version of the packaged software. The version MAY match a label or tag in the source code repository, may also be Semantic versioning-compatible
        ///       org.opencontainers.image.revision: string, # Optional. Source control revision identifier for the packaged software.
        ///       org.opencontainers.image.vendor: string, # Optional. Name of the distributing entity, organization or individual.
        ///       org.opencontainers.image.licenses: string, # Optional. License(s) under which contained software is distributed as an SPDX License Expression.
        ///       org.opencontainers.image.ref.name: string, # Optional. Name of the reference for a target.
        ///       org.opencontainers.image.title: string, # Optional. Human-readable title of the image
        ///       org.opencontainers.image.description: string, # Optional. Human-readable description of the software packaged in the image
        ///     }, # Optional. Additional information provided through arbitrary metadata.
        ///   }, # Optional. V2 image config descriptor
        ///   layers: [Descriptor], # Optional. List of V2 image layer information
        ///   annotations: Annotations, # Optional. Additional information provided through arbitrary metadata.
        ///   schemaVersion: number, # Optional. Schema version
        /// }
        /// </code>
        /// </details>
        /// <details><summary>OCIIndex</summary>Schema for <c>OCIIndex</c>:
        /// <code>{
        ///   manifests: [
        ///     {
        ///       mediaType: string, # Optional. The MIME type of the referenced object. This will generally be application/vnd.docker.image.manifest.v2+json, but it could also be application/vnd.docker.image.manifest.v1+json
        ///       size: number, # Optional. The size in bytes of the object
        ///       digest: string, # Optional. The digest of the content, as defined by the Registry V2 HTTP API Specification
        ///       platform: {
        ///         architecture: string, # Optional. Specifies the CPU architecture, for example amd64 or ppc64le.
        ///         os: string, # Optional. The os field specifies the operating system, for example linux or windows.
        ///         os.version: string, # Optional. The optional os.version field specifies the operating system version, for example 10.0.10586.
        ///         os.features: [string], # Optional. The optional os.features field specifies an array of strings, each listing a required OS feature (for example on Windows win32k
        ///         variant: string, # Optional. The optional variant field specifies a variant of the CPU, for example armv6l to specify a particular CPU variant of the ARM CPU.
        ///         features: [string], # Optional. The optional features field specifies an array of strings, each listing a required CPU feature (for example sse4 or aes
        ///       }, # Optional. The platform object describes the platform which the image in the manifest runs on. A full list of valid operating system and architecture values are listed in the Go language documentation for $GOOS and $GOARCH
        ///     }
        ///   ], # Optional. List of OCI image layer information
        ///   annotations: {
        ///     org.opencontainers.image.created: string (ISO 8601 Format), # Optional. Date and time on which the image was built (string, date-time as defined by https://tools.ietf.org/html/rfc3339#section-5.6)
        ///     org.opencontainers.image.authors: string, # Optional. Contact details of the people or organization responsible for the image.
        ///     org.opencontainers.image.url: string, # Optional. URL to find more information on the image.
        ///     org.opencontainers.image.documentation: string, # Optional. URL to get documentation on the image.
        ///     org.opencontainers.image.source: string, # Optional. URL to get source code for building the image.
        ///     org.opencontainers.image.version: string, # Optional. Version of the packaged software. The version MAY match a label or tag in the source code repository, may also be Semantic versioning-compatible
        ///     org.opencontainers.image.revision: string, # Optional. Source control revision identifier for the packaged software.
        ///     org.opencontainers.image.vendor: string, # Optional. Name of the distributing entity, organization or individual.
        ///     org.opencontainers.image.licenses: string, # Optional. License(s) under which contained software is distributed as an SPDX License Expression.
        ///     org.opencontainers.image.ref.name: string, # Optional. Name of the reference for a target.
        ///     org.opencontainers.image.title: string, # Optional. Human-readable title of the image
        ///     org.opencontainers.image.description: string, # Optional. Human-readable description of the software packaged in the image
        ///   }, # Optional. Additional information provided through arbitrary metadata.
        ///   schemaVersion: number, # Optional. Schema version
        /// }
        /// </code>
        /// </details>
        /// <details><summary>V1Manifest</summary>Schema for <c>V1Manifest</c>:
        /// <code>{
        ///   architecture: string, # Optional. CPU architecture
        ///   name: string, # Optional. Image name
        ///   tag: string, # Optional. Image tag
        ///   fsLayers: [
        ///     {
        ///       blobSum: string, # Optional. SHA of an image layer
        ///     }
        ///   ], # Optional. List of layer information
        ///   history: [
        ///     {
        ///       v1Compatibility: string, # Optional. The raw v1 compatibility information
        ///     }
        ///   ], # Optional. Image history
        ///   signatures: [
        ///     {
        ///       header: {
        ///         jwk: {
        ///           crv: string, # Optional. crv value
        ///           kid: string, # Optional. kid value
        ///           kty: string, # Optional. kty value
        ///           x: string, # Optional. x value
        ///           y: string, # Optional. y value
        ///         }, # Optional. JSON web key parameter
        ///         alg: string, # Optional. The algorithm used to sign or encrypt the JWT
        ///       }, # Optional. A JSON web signature
        ///       signature: string, # Optional. A signature for the image manifest, signed by a libtrust private key
        ///       protected: string, # Optional. The signed protected header
        ///     }
        ///   ], # Optional. Image signature
        ///   schemaVersion: number, # Optional. Schema version
        /// }
        /// </code>
        /// </details>
        /// </details>
        /// 
        /// </remarks>
        public virtual Response CreateManifest(string name, string reference, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));
            Argument.AssertNotNullOrEmpty(reference, nameof(reference));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryClient.CreateManifest");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateManifestRequest(name, reference, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete the manifest identified by `name` and `reference`. Note that a manifest can _only_ be deleted by `digest`. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="reference"> Digest of a BLOB. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="reference"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> or <paramref name="reference"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteManifestAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// Response response = await client.DeleteManifestAsync("<name>", "<reference>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteManifestAsync(string name, string reference, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));
            Argument.AssertNotNullOrEmpty(reference, nameof(reference));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryClient.DeleteManifest");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteManifestRequest(name, reference, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete the manifest identified by `name` and `reference`. Note that a manifest can _only_ be deleted by `digest`. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="reference"> Digest of a BLOB. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="reference"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> or <paramref name="reference"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteManifest with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// Response response = client.DeleteManifest("<name>", "<reference>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response DeleteManifest(string name, string reference, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));
            Argument.AssertNotNullOrEmpty(reference, nameof(reference));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryClient.DeleteManifest");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteManifestRequest(name, reference, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get repository attributes. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetPropertiesAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// Response response = await client.GetPropertiesAsync("<name>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("registry").ToString());
        /// Console.WriteLine(result.GetProperty("imageName").ToString());
        /// Console.WriteLine(result.GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("manifestCount").ToString());
        /// Console.WriteLine(result.GetProperty("tagCount").ToString());
        /// Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("deleteEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("writeEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("listEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("readEnabled").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ContainerRepositoryProperties</c>:
        /// <code>{
        ///   registry: string, # Required. Registry login server name. This is likely to be similar to {registry-name}.azurecr.io.
        ///   imageName: string, # Required. Image name
        ///   createdTime: string (ISO 8601 Format), # Required. Image created time
        ///   lastUpdateTime: string (ISO 8601 Format), # Required. Image last update time
        ///   manifestCount: number, # Required. Number of the manifests
        ///   tagCount: number, # Required. Number of the tags
        ///   changeableAttributes: {
        ///     deleteEnabled: boolean, # Optional. Delete enabled
        ///     writeEnabled: boolean, # Optional. Write enabled
        ///     listEnabled: boolean, # Optional. List enabled
        ///     readEnabled: boolean, # Optional. Read enabled
        ///   }, # Required. Writeable properties of the resource
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetPropertiesAsync(string name, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryClient.GetProperties");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetPropertiesRequest(name, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get repository attributes. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetProperties with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// Response response = client.GetProperties("<name>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("registry").ToString());
        /// Console.WriteLine(result.GetProperty("imageName").ToString());
        /// Console.WriteLine(result.GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("manifestCount").ToString());
        /// Console.WriteLine(result.GetProperty("tagCount").ToString());
        /// Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("deleteEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("writeEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("listEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("readEnabled").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ContainerRepositoryProperties</c>:
        /// <code>{
        ///   registry: string, # Required. Registry login server name. This is likely to be similar to {registry-name}.azurecr.io.
        ///   imageName: string, # Required. Image name
        ///   createdTime: string (ISO 8601 Format), # Required. Image created time
        ///   lastUpdateTime: string (ISO 8601 Format), # Required. Image last update time
        ///   manifestCount: number, # Required. Number of the manifests
        ///   tagCount: number, # Required. Number of the tags
        ///   changeableAttributes: {
        ///     deleteEnabled: boolean, # Optional. Delete enabled
        ///     writeEnabled: boolean, # Optional. Write enabled
        ///     listEnabled: boolean, # Optional. List enabled
        ///     readEnabled: boolean, # Optional. Read enabled
        ///   }, # Required. Writeable properties of the resource
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetProperties(string name, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryClient.GetProperties");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetPropertiesRequest(name, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete the repository identified by `name`. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call DeleteRepositoryAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// Response response = await client.DeleteRepositoryAsync("<name>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("manifestsDeleted")[0].ToString());
        /// Console.WriteLine(result.GetProperty("tagsDeleted")[0].ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>DeleteRepositoryResult</c>:
        /// <code>{
        ///   manifestsDeleted: [string], # Optional. SHA of the deleted image
        ///   tagsDeleted: [string], # Optional. Tag of the deleted image
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> DeleteRepositoryAsync(string name, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryClient.DeleteRepository");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRepositoryRequest(name, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete the repository identified by `name`. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call DeleteRepository with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// Response response = client.DeleteRepository("<name>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("manifestsDeleted")[0].ToString());
        /// Console.WriteLine(result.GetProperty("tagsDeleted")[0].ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>DeleteRepositoryResult</c>:
        /// <code>{
        ///   manifestsDeleted: [string], # Optional. SHA of the deleted image
        ///   tagsDeleted: [string], # Optional. Tag of the deleted image
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response DeleteRepository(string name, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryClient.DeleteRepository");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRepositoryRequest(name, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the attribute identified by `name` where `reference` is the name of the repository. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call UpdatePropertiesAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.UpdatePropertiesAsync("<name>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("registry").ToString());
        /// Console.WriteLine(result.GetProperty("imageName").ToString());
        /// Console.WriteLine(result.GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("manifestCount").ToString());
        /// Console.WriteLine(result.GetProperty("tagCount").ToString());
        /// Console.WriteLine(result.GetProperty("changeableAttributes").ToString());
        /// ]]></code>
        /// This sample shows how to call UpdatePropertiesAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// var data = new {
        ///     deleteEnabled = true,
        ///     writeEnabled = true,
        ///     listEnabled = true,
        ///     readEnabled = true,
        /// };
        /// 
        /// Response response = await client.UpdatePropertiesAsync("<name>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("registry").ToString());
        /// Console.WriteLine(result.GetProperty("imageName").ToString());
        /// Console.WriteLine(result.GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("manifestCount").ToString());
        /// Console.WriteLine(result.GetProperty("tagCount").ToString());
        /// Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("deleteEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("writeEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("listEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("readEnabled").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>RepositoryWriteableProperties</c>:
        /// <code>{
        ///   deleteEnabled: boolean, # Optional. Delete enabled
        ///   writeEnabled: boolean, # Optional. Write enabled
        ///   listEnabled: boolean, # Optional. List enabled
        ///   readEnabled: boolean, # Optional. Read enabled
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ContainerRepositoryProperties</c>:
        /// <code>{
        ///   registry: string, # Required. Registry login server name. This is likely to be similar to {registry-name}.azurecr.io.
        ///   imageName: string, # Required. Image name
        ///   createdTime: string (ISO 8601 Format), # Required. Image created time
        ///   lastUpdateTime: string (ISO 8601 Format), # Required. Image last update time
        ///   manifestCount: number, # Required. Number of the manifests
        ///   tagCount: number, # Required. Number of the tags
        ///   changeableAttributes: {
        ///     deleteEnabled: boolean, # Optional. Delete enabled
        ///     writeEnabled: boolean, # Optional. Write enabled
        ///     listEnabled: boolean, # Optional. List enabled
        ///     readEnabled: boolean, # Optional. Read enabled
        ///   }, # Required. Writeable properties of the resource
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> UpdatePropertiesAsync(string name, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryClient.UpdateProperties");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdatePropertiesRequest(name, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the attribute identified by `name` where `reference` is the name of the repository. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call UpdateProperties with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.UpdateProperties("<name>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("registry").ToString());
        /// Console.WriteLine(result.GetProperty("imageName").ToString());
        /// Console.WriteLine(result.GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("manifestCount").ToString());
        /// Console.WriteLine(result.GetProperty("tagCount").ToString());
        /// Console.WriteLine(result.GetProperty("changeableAttributes").ToString());
        /// ]]></code>
        /// This sample shows how to call UpdateProperties with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// var data = new {
        ///     deleteEnabled = true,
        ///     writeEnabled = true,
        ///     listEnabled = true,
        ///     readEnabled = true,
        /// };
        /// 
        /// Response response = client.UpdateProperties("<name>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("registry").ToString());
        /// Console.WriteLine(result.GetProperty("imageName").ToString());
        /// Console.WriteLine(result.GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("manifestCount").ToString());
        /// Console.WriteLine(result.GetProperty("tagCount").ToString());
        /// Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("deleteEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("writeEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("listEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("readEnabled").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>RepositoryWriteableProperties</c>:
        /// <code>{
        ///   deleteEnabled: boolean, # Optional. Delete enabled
        ///   writeEnabled: boolean, # Optional. Write enabled
        ///   listEnabled: boolean, # Optional. List enabled
        ///   readEnabled: boolean, # Optional. Read enabled
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ContainerRepositoryProperties</c>:
        /// <code>{
        ///   registry: string, # Required. Registry login server name. This is likely to be similar to {registry-name}.azurecr.io.
        ///   imageName: string, # Required. Image name
        ///   createdTime: string (ISO 8601 Format), # Required. Image created time
        ///   lastUpdateTime: string (ISO 8601 Format), # Required. Image last update time
        ///   manifestCount: number, # Required. Number of the manifests
        ///   tagCount: number, # Required. Number of the tags
        ///   changeableAttributes: {
        ///     deleteEnabled: boolean, # Optional. Delete enabled
        ///     writeEnabled: boolean, # Optional. Write enabled
        ///     listEnabled: boolean, # Optional. List enabled
        ///     readEnabled: boolean, # Optional. Read enabled
        ///   }, # Required. Writeable properties of the resource
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response UpdateProperties(string name, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryClient.UpdateProperties");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdatePropertiesRequest(name, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get tag attributes by tag. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="reference"> Tag name. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="reference"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> or <paramref name="reference"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetTagPropertiesAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// Response response = await client.GetTagPropertiesAsync("<name>", "<reference>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("registry").ToString());
        /// Console.WriteLine(result.GetProperty("imageName").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("signed").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("changeableAttributes").GetProperty("deleteEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("changeableAttributes").GetProperty("writeEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("changeableAttributes").GetProperty("listEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("changeableAttributes").GetProperty("readEnabled").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArtifactTagProperties</c>:
        /// <code>{
        ///   registry: string, # Required. Registry login server name. This is likely to be similar to {registry-name}.azurecr.io.
        ///   imageName: string, # Required. Image name
        ///   tag: {
        ///     name: string, # Required. Tag name
        ///     digest: string, # Required. Tag digest
        ///     createdTime: string (ISO 8601 Format), # Required. Tag created time
        ///     lastUpdateTime: string (ISO 8601 Format), # Required. Tag last update time
        ///     signed: boolean, # Optional. Is signed
        ///     changeableAttributes: {
        ///       deleteEnabled: boolean, # Optional. Delete enabled
        ///       writeEnabled: boolean, # Optional. Write enabled
        ///       listEnabled: boolean, # Optional. List enabled
        ///       readEnabled: boolean, # Optional. Read enabled
        ///     }, # Required. Writeable properties of the resource
        ///   }, # Required. List of tag attribute details
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetTagPropertiesAsync(string name, string reference, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));
            Argument.AssertNotNullOrEmpty(reference, nameof(reference));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryClient.GetTagProperties");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTagPropertiesRequest(name, reference, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get tag attributes by tag. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="reference"> Tag name. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="reference"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> or <paramref name="reference"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetTagProperties with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// Response response = client.GetTagProperties("<name>", "<reference>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("registry").ToString());
        /// Console.WriteLine(result.GetProperty("imageName").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("signed").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("changeableAttributes").GetProperty("deleteEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("changeableAttributes").GetProperty("writeEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("changeableAttributes").GetProperty("listEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("changeableAttributes").GetProperty("readEnabled").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArtifactTagProperties</c>:
        /// <code>{
        ///   registry: string, # Required. Registry login server name. This is likely to be similar to {registry-name}.azurecr.io.
        ///   imageName: string, # Required. Image name
        ///   tag: {
        ///     name: string, # Required. Tag name
        ///     digest: string, # Required. Tag digest
        ///     createdTime: string (ISO 8601 Format), # Required. Tag created time
        ///     lastUpdateTime: string (ISO 8601 Format), # Required. Tag last update time
        ///     signed: boolean, # Optional. Is signed
        ///     changeableAttributes: {
        ///       deleteEnabled: boolean, # Optional. Delete enabled
        ///       writeEnabled: boolean, # Optional. Write enabled
        ///       listEnabled: boolean, # Optional. List enabled
        ///       readEnabled: boolean, # Optional. Read enabled
        ///     }, # Required. Writeable properties of the resource
        ///   }, # Required. List of tag attribute details
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetTagProperties(string name, string reference, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));
            Argument.AssertNotNullOrEmpty(reference, nameof(reference));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryClient.GetTagProperties");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTagPropertiesRequest(name, reference, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update tag attributes. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="reference"> Tag name. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="reference"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> or <paramref name="reference"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call UpdateTagAttributesAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.UpdateTagAttributesAsync("<name>", "<reference>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("registry").ToString());
        /// Console.WriteLine(result.GetProperty("imageName").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("changeableAttributes").ToString());
        /// ]]></code>
        /// This sample shows how to call UpdateTagAttributesAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// var data = new {
        ///     deleteEnabled = true,
        ///     writeEnabled = true,
        ///     listEnabled = true,
        ///     readEnabled = true,
        /// };
        /// 
        /// Response response = await client.UpdateTagAttributesAsync("<name>", "<reference>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("registry").ToString());
        /// Console.WriteLine(result.GetProperty("imageName").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("signed").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("changeableAttributes").GetProperty("deleteEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("changeableAttributes").GetProperty("writeEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("changeableAttributes").GetProperty("listEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("changeableAttributes").GetProperty("readEnabled").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>TagWriteableProperties</c>:
        /// <code>{
        ///   deleteEnabled: boolean, # Optional. Delete enabled
        ///   writeEnabled: boolean, # Optional. Write enabled
        ///   listEnabled: boolean, # Optional. List enabled
        ///   readEnabled: boolean, # Optional. Read enabled
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArtifactTagProperties</c>:
        /// <code>{
        ///   registry: string, # Required. Registry login server name. This is likely to be similar to {registry-name}.azurecr.io.
        ///   imageName: string, # Required. Image name
        ///   tag: {
        ///     name: string, # Required. Tag name
        ///     digest: string, # Required. Tag digest
        ///     createdTime: string (ISO 8601 Format), # Required. Tag created time
        ///     lastUpdateTime: string (ISO 8601 Format), # Required. Tag last update time
        ///     signed: boolean, # Optional. Is signed
        ///     changeableAttributes: {
        ///       deleteEnabled: boolean, # Optional. Delete enabled
        ///       writeEnabled: boolean, # Optional. Write enabled
        ///       listEnabled: boolean, # Optional. List enabled
        ///       readEnabled: boolean, # Optional. Read enabled
        ///     }, # Required. Writeable properties of the resource
        ///   }, # Required. List of tag attribute details
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> UpdateTagAttributesAsync(string name, string reference, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));
            Argument.AssertNotNullOrEmpty(reference, nameof(reference));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryClient.UpdateTagAttributes");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateTagAttributesRequest(name, reference, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update tag attributes. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="reference"> Tag name. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="reference"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> or <paramref name="reference"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call UpdateTagAttributes with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.UpdateTagAttributes("<name>", "<reference>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("registry").ToString());
        /// Console.WriteLine(result.GetProperty("imageName").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("changeableAttributes").ToString());
        /// ]]></code>
        /// This sample shows how to call UpdateTagAttributes with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// var data = new {
        ///     deleteEnabled = true,
        ///     writeEnabled = true,
        ///     listEnabled = true,
        ///     readEnabled = true,
        /// };
        /// 
        /// Response response = client.UpdateTagAttributes("<name>", "<reference>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("registry").ToString());
        /// Console.WriteLine(result.GetProperty("imageName").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("signed").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("changeableAttributes").GetProperty("deleteEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("changeableAttributes").GetProperty("writeEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("changeableAttributes").GetProperty("listEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("tag").GetProperty("changeableAttributes").GetProperty("readEnabled").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>TagWriteableProperties</c>:
        /// <code>{
        ///   deleteEnabled: boolean, # Optional. Delete enabled
        ///   writeEnabled: boolean, # Optional. Write enabled
        ///   listEnabled: boolean, # Optional. List enabled
        ///   readEnabled: boolean, # Optional. Read enabled
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArtifactTagProperties</c>:
        /// <code>{
        ///   registry: string, # Required. Registry login server name. This is likely to be similar to {registry-name}.azurecr.io.
        ///   imageName: string, # Required. Image name
        ///   tag: {
        ///     name: string, # Required. Tag name
        ///     digest: string, # Required. Tag digest
        ///     createdTime: string (ISO 8601 Format), # Required. Tag created time
        ///     lastUpdateTime: string (ISO 8601 Format), # Required. Tag last update time
        ///     signed: boolean, # Optional. Is signed
        ///     changeableAttributes: {
        ///       deleteEnabled: boolean, # Optional. Delete enabled
        ///       writeEnabled: boolean, # Optional. Write enabled
        ///       listEnabled: boolean, # Optional. List enabled
        ///       readEnabled: boolean, # Optional. Read enabled
        ///     }, # Required. Writeable properties of the resource
        ///   }, # Required. List of tag attribute details
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response UpdateTagAttributes(string name, string reference, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));
            Argument.AssertNotNullOrEmpty(reference, nameof(reference));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryClient.UpdateTagAttributes");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateTagAttributesRequest(name, reference, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete tag. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="reference"> Tag name. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="reference"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> or <paramref name="reference"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteTagAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// Response response = await client.DeleteTagAsync("<name>", "<reference>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteTagAsync(string name, string reference, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));
            Argument.AssertNotNullOrEmpty(reference, nameof(reference));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryClient.DeleteTag");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteTagRequest(name, reference, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete tag. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="reference"> Tag name. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="reference"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> or <paramref name="reference"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteTag with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// Response response = client.DeleteTag("<name>", "<reference>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response DeleteTag(string name, string reference, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));
            Argument.AssertNotNullOrEmpty(reference, nameof(reference));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryClient.DeleteTag");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteTagRequest(name, reference, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get manifest attributes. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="digest"> Digest of a BLOB. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="digest"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> or <paramref name="digest"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetManifestPropertiesAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// Response response = await client.GetManifestPropertiesAsync("<name>", "<digest>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("registry").ToString());
        /// Console.WriteLine(result.GetProperty("imageName").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("imageSize").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("architecture").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("os").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("references")[0].GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("references")[0].GetProperty("architecture").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("references")[0].GetProperty("os").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("configMediaType").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("tags")[0].ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("changeableAttributes").GetProperty("deleteEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("changeableAttributes").GetProperty("writeEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("changeableAttributes").GetProperty("listEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("changeableAttributes").GetProperty("readEnabled").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArtifactManifestProperties</c>:
        /// <code>{
        ///   registry: string, # Optional. Registry login server name. This is likely to be similar to {registry-name}.azurecr.io.
        ///   imageName: string, # Optional. Repository name
        ///   manifest: {
        ///     digest: string, # Required. Manifest
        ///     imageSize: number, # Optional. Image size
        ///     createdTime: string (ISO 8601 Format), # Required. Created time
        ///     lastUpdateTime: string (ISO 8601 Format), # Required. Last update time
        ///     architecture: &quot;386&quot; | &quot;amd64&quot; | &quot;arm&quot; | &quot;arm64&quot; | &quot;mips&quot; | &quot;mipsle&quot; | &quot;mips64&quot; | &quot;mips64le&quot; | &quot;ppc64&quot; | &quot;ppc64le&quot; | &quot;riscv64&quot; | &quot;s390x&quot; | &quot;wasm&quot;, # Optional. CPU architecture
        ///     os: &quot;aix&quot; | &quot;android&quot; | &quot;darwin&quot; | &quot;dragonfly&quot; | &quot;freebsd&quot; | &quot;illumos&quot; | &quot;ios&quot; | &quot;js&quot; | &quot;linux&quot; | &quot;netbsd&quot; | &quot;openbsd&quot; | &quot;plan9&quot; | &quot;solaris&quot; | &quot;windows&quot;, # Optional. Operating system
        ///     references: [
        ///       {
        ///         digest: string, # Required. Manifest digest
        ///         architecture: &quot;386&quot; | &quot;amd64&quot; | &quot;arm&quot; | &quot;arm64&quot; | &quot;mips&quot; | &quot;mipsle&quot; | &quot;mips64&quot; | &quot;mips64le&quot; | &quot;ppc64&quot; | &quot;ppc64le&quot; | &quot;riscv64&quot; | &quot;s390x&quot; | &quot;wasm&quot;, # Optional. CPU architecture
        ///         os: &quot;aix&quot; | &quot;android&quot; | &quot;darwin&quot; | &quot;dragonfly&quot; | &quot;freebsd&quot; | &quot;illumos&quot; | &quot;ios&quot; | &quot;js&quot; | &quot;linux&quot; | &quot;netbsd&quot; | &quot;openbsd&quot; | &quot;plan9&quot; | &quot;solaris&quot; | &quot;windows&quot;, # Optional. Operating system
        ///       }
        ///     ], # Optional. List of artifacts that are referenced by this manifest list, with information about the platform each supports.  This list will be empty if this is a leaf manifest and not a manifest list.
        ///     configMediaType: string, # Optional. Config blob media type
        ///     tags: [string], # Optional. List of tags
        ///     changeableAttributes: {
        ///       deleteEnabled: boolean, # Optional. Delete enabled
        ///       writeEnabled: boolean, # Optional. Write enabled
        ///       listEnabled: boolean, # Optional. List enabled
        ///       readEnabled: boolean, # Optional. Read enabled
        ///     }, # Optional. Writeable properties of the resource
        ///   }, # Required. Manifest attributes
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetManifestPropertiesAsync(string name, string digest, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));
            Argument.AssertNotNullOrEmpty(digest, nameof(digest));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryClient.GetManifestProperties");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetManifestPropertiesRequest(name, digest, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get manifest attributes. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="digest"> Digest of a BLOB. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="digest"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> or <paramref name="digest"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetManifestProperties with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// Response response = client.GetManifestProperties("<name>", "<digest>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("registry").ToString());
        /// Console.WriteLine(result.GetProperty("imageName").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("imageSize").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("architecture").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("os").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("references")[0].GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("references")[0].GetProperty("architecture").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("references")[0].GetProperty("os").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("configMediaType").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("tags")[0].ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("changeableAttributes").GetProperty("deleteEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("changeableAttributes").GetProperty("writeEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("changeableAttributes").GetProperty("listEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("changeableAttributes").GetProperty("readEnabled").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArtifactManifestProperties</c>:
        /// <code>{
        ///   registry: string, # Optional. Registry login server name. This is likely to be similar to {registry-name}.azurecr.io.
        ///   imageName: string, # Optional. Repository name
        ///   manifest: {
        ///     digest: string, # Required. Manifest
        ///     imageSize: number, # Optional. Image size
        ///     createdTime: string (ISO 8601 Format), # Required. Created time
        ///     lastUpdateTime: string (ISO 8601 Format), # Required. Last update time
        ///     architecture: &quot;386&quot; | &quot;amd64&quot; | &quot;arm&quot; | &quot;arm64&quot; | &quot;mips&quot; | &quot;mipsle&quot; | &quot;mips64&quot; | &quot;mips64le&quot; | &quot;ppc64&quot; | &quot;ppc64le&quot; | &quot;riscv64&quot; | &quot;s390x&quot; | &quot;wasm&quot;, # Optional. CPU architecture
        ///     os: &quot;aix&quot; | &quot;android&quot; | &quot;darwin&quot; | &quot;dragonfly&quot; | &quot;freebsd&quot; | &quot;illumos&quot; | &quot;ios&quot; | &quot;js&quot; | &quot;linux&quot; | &quot;netbsd&quot; | &quot;openbsd&quot; | &quot;plan9&quot; | &quot;solaris&quot; | &quot;windows&quot;, # Optional. Operating system
        ///     references: [
        ///       {
        ///         digest: string, # Required. Manifest digest
        ///         architecture: &quot;386&quot; | &quot;amd64&quot; | &quot;arm&quot; | &quot;arm64&quot; | &quot;mips&quot; | &quot;mipsle&quot; | &quot;mips64&quot; | &quot;mips64le&quot; | &quot;ppc64&quot; | &quot;ppc64le&quot; | &quot;riscv64&quot; | &quot;s390x&quot; | &quot;wasm&quot;, # Optional. CPU architecture
        ///         os: &quot;aix&quot; | &quot;android&quot; | &quot;darwin&quot; | &quot;dragonfly&quot; | &quot;freebsd&quot; | &quot;illumos&quot; | &quot;ios&quot; | &quot;js&quot; | &quot;linux&quot; | &quot;netbsd&quot; | &quot;openbsd&quot; | &quot;plan9&quot; | &quot;solaris&quot; | &quot;windows&quot;, # Optional. Operating system
        ///       }
        ///     ], # Optional. List of artifacts that are referenced by this manifest list, with information about the platform each supports.  This list will be empty if this is a leaf manifest and not a manifest list.
        ///     configMediaType: string, # Optional. Config blob media type
        ///     tags: [string], # Optional. List of tags
        ///     changeableAttributes: {
        ///       deleteEnabled: boolean, # Optional. Delete enabled
        ///       writeEnabled: boolean, # Optional. Write enabled
        ///       listEnabled: boolean, # Optional. List enabled
        ///       readEnabled: boolean, # Optional. Read enabled
        ///     }, # Optional. Writeable properties of the resource
        ///   }, # Required. Manifest attributes
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetManifestProperties(string name, string digest, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));
            Argument.AssertNotNullOrEmpty(digest, nameof(digest));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryClient.GetManifestProperties");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetManifestPropertiesRequest(name, digest, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update properties of a manifest. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="digest"> Digest of a BLOB. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="digest"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> or <paramref name="digest"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call UpdateManifestPropertiesAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.UpdateManifestPropertiesAsync("<name>", "<digest>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("lastUpdateTime").ToString());
        /// ]]></code>
        /// This sample shows how to call UpdateManifestPropertiesAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// var data = new {
        ///     deleteEnabled = true,
        ///     writeEnabled = true,
        ///     listEnabled = true,
        ///     readEnabled = true,
        /// };
        /// 
        /// Response response = await client.UpdateManifestPropertiesAsync("<name>", "<digest>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("registry").ToString());
        /// Console.WriteLine(result.GetProperty("imageName").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("imageSize").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("architecture").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("os").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("references")[0].GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("references")[0].GetProperty("architecture").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("references")[0].GetProperty("os").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("configMediaType").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("tags")[0].ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("changeableAttributes").GetProperty("deleteEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("changeableAttributes").GetProperty("writeEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("changeableAttributes").GetProperty("listEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("changeableAttributes").GetProperty("readEnabled").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>ManifestWriteableProperties</c>:
        /// <code>{
        ///   deleteEnabled: boolean, # Optional. Delete enabled
        ///   writeEnabled: boolean, # Optional. Write enabled
        ///   listEnabled: boolean, # Optional. List enabled
        ///   readEnabled: boolean, # Optional. Read enabled
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArtifactManifestProperties</c>:
        /// <code>{
        ///   registry: string, # Optional. Registry login server name. This is likely to be similar to {registry-name}.azurecr.io.
        ///   imageName: string, # Optional. Repository name
        ///   manifest: {
        ///     digest: string, # Required. Manifest
        ///     imageSize: number, # Optional. Image size
        ///     createdTime: string (ISO 8601 Format), # Required. Created time
        ///     lastUpdateTime: string (ISO 8601 Format), # Required. Last update time
        ///     architecture: &quot;386&quot; | &quot;amd64&quot; | &quot;arm&quot; | &quot;arm64&quot; | &quot;mips&quot; | &quot;mipsle&quot; | &quot;mips64&quot; | &quot;mips64le&quot; | &quot;ppc64&quot; | &quot;ppc64le&quot; | &quot;riscv64&quot; | &quot;s390x&quot; | &quot;wasm&quot;, # Optional. CPU architecture
        ///     os: &quot;aix&quot; | &quot;android&quot; | &quot;darwin&quot; | &quot;dragonfly&quot; | &quot;freebsd&quot; | &quot;illumos&quot; | &quot;ios&quot; | &quot;js&quot; | &quot;linux&quot; | &quot;netbsd&quot; | &quot;openbsd&quot; | &quot;plan9&quot; | &quot;solaris&quot; | &quot;windows&quot;, # Optional. Operating system
        ///     references: [
        ///       {
        ///         digest: string, # Required. Manifest digest
        ///         architecture: &quot;386&quot; | &quot;amd64&quot; | &quot;arm&quot; | &quot;arm64&quot; | &quot;mips&quot; | &quot;mipsle&quot; | &quot;mips64&quot; | &quot;mips64le&quot; | &quot;ppc64&quot; | &quot;ppc64le&quot; | &quot;riscv64&quot; | &quot;s390x&quot; | &quot;wasm&quot;, # Optional. CPU architecture
        ///         os: &quot;aix&quot; | &quot;android&quot; | &quot;darwin&quot; | &quot;dragonfly&quot; | &quot;freebsd&quot; | &quot;illumos&quot; | &quot;ios&quot; | &quot;js&quot; | &quot;linux&quot; | &quot;netbsd&quot; | &quot;openbsd&quot; | &quot;plan9&quot; | &quot;solaris&quot; | &quot;windows&quot;, # Optional. Operating system
        ///       }
        ///     ], # Optional. List of artifacts that are referenced by this manifest list, with information about the platform each supports.  This list will be empty if this is a leaf manifest and not a manifest list.
        ///     configMediaType: string, # Optional. Config blob media type
        ///     tags: [string], # Optional. List of tags
        ///     changeableAttributes: {
        ///       deleteEnabled: boolean, # Optional. Delete enabled
        ///       writeEnabled: boolean, # Optional. Write enabled
        ///       listEnabled: boolean, # Optional. List enabled
        ///       readEnabled: boolean, # Optional. Read enabled
        ///     }, # Optional. Writeable properties of the resource
        ///   }, # Required. Manifest attributes
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> UpdateManifestPropertiesAsync(string name, string digest, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));
            Argument.AssertNotNullOrEmpty(digest, nameof(digest));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryClient.UpdateManifestProperties");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateManifestPropertiesRequest(name, digest, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update properties of a manifest. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="digest"> Digest of a BLOB. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="digest"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> or <paramref name="digest"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call UpdateManifestProperties with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.UpdateManifestProperties("<name>", "<digest>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("lastUpdateTime").ToString());
        /// ]]></code>
        /// This sample shows how to call UpdateManifestProperties with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// var data = new {
        ///     deleteEnabled = true,
        ///     writeEnabled = true,
        ///     listEnabled = true,
        ///     readEnabled = true,
        /// };
        /// 
        /// Response response = client.UpdateManifestProperties("<name>", "<digest>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("registry").ToString());
        /// Console.WriteLine(result.GetProperty("imageName").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("imageSize").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("createdTime").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("architecture").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("os").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("references")[0].GetProperty("digest").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("references")[0].GetProperty("architecture").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("references")[0].GetProperty("os").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("configMediaType").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("tags")[0].ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("changeableAttributes").GetProperty("deleteEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("changeableAttributes").GetProperty("writeEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("changeableAttributes").GetProperty("listEnabled").ToString());
        /// Console.WriteLine(result.GetProperty("manifest").GetProperty("changeableAttributes").GetProperty("readEnabled").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>ManifestWriteableProperties</c>:
        /// <code>{
        ///   deleteEnabled: boolean, # Optional. Delete enabled
        ///   writeEnabled: boolean, # Optional. Write enabled
        ///   listEnabled: boolean, # Optional. List enabled
        ///   readEnabled: boolean, # Optional. Read enabled
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArtifactManifestProperties</c>:
        /// <code>{
        ///   registry: string, # Optional. Registry login server name. This is likely to be similar to {registry-name}.azurecr.io.
        ///   imageName: string, # Optional. Repository name
        ///   manifest: {
        ///     digest: string, # Required. Manifest
        ///     imageSize: number, # Optional. Image size
        ///     createdTime: string (ISO 8601 Format), # Required. Created time
        ///     lastUpdateTime: string (ISO 8601 Format), # Required. Last update time
        ///     architecture: &quot;386&quot; | &quot;amd64&quot; | &quot;arm&quot; | &quot;arm64&quot; | &quot;mips&quot; | &quot;mipsle&quot; | &quot;mips64&quot; | &quot;mips64le&quot; | &quot;ppc64&quot; | &quot;ppc64le&quot; | &quot;riscv64&quot; | &quot;s390x&quot; | &quot;wasm&quot;, # Optional. CPU architecture
        ///     os: &quot;aix&quot; | &quot;android&quot; | &quot;darwin&quot; | &quot;dragonfly&quot; | &quot;freebsd&quot; | &quot;illumos&quot; | &quot;ios&quot; | &quot;js&quot; | &quot;linux&quot; | &quot;netbsd&quot; | &quot;openbsd&quot; | &quot;plan9&quot; | &quot;solaris&quot; | &quot;windows&quot;, # Optional. Operating system
        ///     references: [
        ///       {
        ///         digest: string, # Required. Manifest digest
        ///         architecture: &quot;386&quot; | &quot;amd64&quot; | &quot;arm&quot; | &quot;arm64&quot; | &quot;mips&quot; | &quot;mipsle&quot; | &quot;mips64&quot; | &quot;mips64le&quot; | &quot;ppc64&quot; | &quot;ppc64le&quot; | &quot;riscv64&quot; | &quot;s390x&quot; | &quot;wasm&quot;, # Optional. CPU architecture
        ///         os: &quot;aix&quot; | &quot;android&quot; | &quot;darwin&quot; | &quot;dragonfly&quot; | &quot;freebsd&quot; | &quot;illumos&quot; | &quot;ios&quot; | &quot;js&quot; | &quot;linux&quot; | &quot;netbsd&quot; | &quot;openbsd&quot; | &quot;plan9&quot; | &quot;solaris&quot; | &quot;windows&quot;, # Optional. Operating system
        ///       }
        ///     ], # Optional. List of artifacts that are referenced by this manifest list, with information about the platform each supports.  This list will be empty if this is a leaf manifest and not a manifest list.
        ///     configMediaType: string, # Optional. Config blob media type
        ///     tags: [string], # Optional. List of tags
        ///     changeableAttributes: {
        ///       deleteEnabled: boolean, # Optional. Delete enabled
        ///       writeEnabled: boolean, # Optional. Write enabled
        ///       listEnabled: boolean, # Optional. List enabled
        ///       readEnabled: boolean, # Optional. Read enabled
        ///     }, # Optional. Writeable properties of the resource
        ///   }, # Required. Manifest attributes
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response UpdateManifestProperties(string name, string digest, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));
            Argument.AssertNotNullOrEmpty(digest, nameof(digest));

            using var scope = ClientDiagnostics.CreateScope("ContainerRegistryClient.UpdateManifestProperties");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateManifestPropertiesRequest(name, digest, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List repositories. </summary>
        /// <param name="last"> Query parameter for the last item in previous query. Result set will include values lexically after last. </param>
        /// <param name="n"> query parameter for max number of items. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetRepositoriesAsync and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// await foreach (var data in client.GetRepositoriesAsync())
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetRepositoriesAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// await foreach (var data in client.GetRepositoriesAsync("<last>", 1234))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.ToString());
        /// }
        /// ]]></code>
        /// </example>
        public virtual AsyncPageable<BinaryData> GetRepositoriesAsync(string last = null, int? n = null, RequestContext context = null)
        {
            return GetRepositoriesImplementationAsync("ContainerRegistryClient.GetRepositories", last, n, context);
        }

        private AsyncPageable<BinaryData> GetRepositoriesImplementationAsync(string diagnosticsScopeName, string last, int? n, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetRepositoriesRequest(last, n, context)
                        : CreateGetRepositoriesNextPageRequest(nextLink, last, n, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "repositories", "link", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> List repositories. </summary>
        /// <param name="last"> Query parameter for the last item in previous query. Result set will include values lexically after last. </param>
        /// <param name="n"> query parameter for max number of items. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetRepositories and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// foreach (var data in client.GetRepositories())
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetRepositories with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// foreach (var data in client.GetRepositories("<last>", 1234))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.ToString());
        /// }
        /// ]]></code>
        /// </example>
        public virtual Pageable<BinaryData> GetRepositories(string last = null, int? n = null, RequestContext context = null)
        {
            return GetRepositoriesImplementation("ContainerRegistryClient.GetRepositories", last, n, context);
        }

        private Pageable<BinaryData> GetRepositoriesImplementation(string diagnosticsScopeName, string last, int? n, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetRepositoriesRequest(last, n, context)
                        : CreateGetRepositoriesNextPageRequest(nextLink, last, n, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "repositories", "link");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> List tags of a repository. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="last"> Query parameter for the last item in previous query. Result set will include values lexically after last. </param>
        /// <param name="n"> query parameter for max number of items. </param>
        /// <param name="orderby"> orderby query parameter. </param>
        /// <param name="digest"> filter by digest. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetTagsAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// await foreach (var data in client.GetTagsAsync("<name>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("digest").ToString());
        ///     Console.WriteLine(result.GetProperty("createdTime").ToString());
        ///     Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("changeableAttributes").ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetTagsAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// await foreach (var data in client.GetTagsAsync("<name>", "<last>", 1234, "<orderby>", "<digest>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("digest").ToString());
        ///     Console.WriteLine(result.GetProperty("createdTime").ToString());
        ///     Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("signed").ToString());
        ///     Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("deleteEnabled").ToString());
        ///     Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("writeEnabled").ToString());
        ///     Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("listEnabled").ToString());
        ///     Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("readEnabled").ToString());
        /// }
        /// ]]></code>
        /// </example>
        public virtual AsyncPageable<BinaryData> GetTagsAsync(string name, string last = null, int? n = null, string orderby = null, string digest = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            return GetTagsImplementationAsync("ContainerRegistryClient.GetTags", name, last, n, orderby, digest, context);
        }

        private AsyncPageable<BinaryData> GetTagsImplementationAsync(string diagnosticsScopeName, string name, string last, int? n, string orderby, string digest, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetTagsRequest(name, last, n, orderby, digest, context)
                        : CreateGetTagsNextPageRequest(nextLink, name, last, n, orderby, digest, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "tags", "link", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> List tags of a repository. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="last"> Query parameter for the last item in previous query. Result set will include values lexically after last. </param>
        /// <param name="n"> query parameter for max number of items. </param>
        /// <param name="orderby"> orderby query parameter. </param>
        /// <param name="digest"> filter by digest. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetTags with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// foreach (var data in client.GetTags("<name>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("digest").ToString());
        ///     Console.WriteLine(result.GetProperty("createdTime").ToString());
        ///     Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("changeableAttributes").ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetTags with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// foreach (var data in client.GetTags("<name>", "<last>", 1234, "<orderby>", "<digest>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("digest").ToString());
        ///     Console.WriteLine(result.GetProperty("createdTime").ToString());
        ///     Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("signed").ToString());
        ///     Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("deleteEnabled").ToString());
        ///     Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("writeEnabled").ToString());
        ///     Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("listEnabled").ToString());
        ///     Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("readEnabled").ToString());
        /// }
        /// ]]></code>
        /// </example>
        public virtual Pageable<BinaryData> GetTags(string name, string last = null, int? n = null, string orderby = null, string digest = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            return GetTagsImplementation("ContainerRegistryClient.GetTags", name, last, n, orderby, digest, context);
        }

        private Pageable<BinaryData> GetTagsImplementation(string diagnosticsScopeName, string name, string last, int? n, string orderby, string digest, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetTagsRequest(name, last, n, orderby, digest, context)
                        : CreateGetTagsNextPageRequest(nextLink, name, last, n, orderby, digest, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "tags", "link");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> List manifests of a repository. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="last"> Query parameter for the last item in previous query. Result set will include values lexically after last. </param>
        /// <param name="n"> query parameter for max number of items. </param>
        /// <param name="orderby"> orderby query parameter. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetManifestsAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// await foreach (var data in client.GetManifestsAsync("<name>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("digest").ToString());
        ///     Console.WriteLine(result.GetProperty("createdTime").ToString());
        ///     Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetManifestsAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// await foreach (var data in client.GetManifestsAsync("<name>", "<last>", 1234, "<orderby>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("digest").ToString());
        ///     Console.WriteLine(result.GetProperty("imageSize").ToString());
        ///     Console.WriteLine(result.GetProperty("createdTime").ToString());
        ///     Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("architecture").ToString());
        ///     Console.WriteLine(result.GetProperty("os").ToString());
        ///     Console.WriteLine(result.GetProperty("references")[0].GetProperty("digest").ToString());
        ///     Console.WriteLine(result.GetProperty("references")[0].GetProperty("architecture").ToString());
        ///     Console.WriteLine(result.GetProperty("references")[0].GetProperty("os").ToString());
        ///     Console.WriteLine(result.GetProperty("configMediaType").ToString());
        ///     Console.WriteLine(result.GetProperty("tags")[0].ToString());
        ///     Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("deleteEnabled").ToString());
        ///     Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("writeEnabled").ToString());
        ///     Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("listEnabled").ToString());
        ///     Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("readEnabled").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AcrManifests</c>:
        /// <code>{
        ///   digest: string, # Required. Manifest
        ///   imageSize: number, # Optional. Image size
        ///   createdTime: string (ISO 8601 Format), # Required. Created time
        ///   lastUpdateTime: string (ISO 8601 Format), # Required. Last update time
        ///   architecture: &quot;386&quot; | &quot;amd64&quot; | &quot;arm&quot; | &quot;arm64&quot; | &quot;mips&quot; | &quot;mipsle&quot; | &quot;mips64&quot; | &quot;mips64le&quot; | &quot;ppc64&quot; | &quot;ppc64le&quot; | &quot;riscv64&quot; | &quot;s390x&quot; | &quot;wasm&quot;, # Optional. CPU architecture
        ///   os: &quot;aix&quot; | &quot;android&quot; | &quot;darwin&quot; | &quot;dragonfly&quot; | &quot;freebsd&quot; | &quot;illumos&quot; | &quot;ios&quot; | &quot;js&quot; | &quot;linux&quot; | &quot;netbsd&quot; | &quot;openbsd&quot; | &quot;plan9&quot; | &quot;solaris&quot; | &quot;windows&quot;, # Optional. Operating system
        ///   references: [
        ///     {
        ///       digest: string, # Required. Manifest digest
        ///       architecture: &quot;386&quot; | &quot;amd64&quot; | &quot;arm&quot; | &quot;arm64&quot; | &quot;mips&quot; | &quot;mipsle&quot; | &quot;mips64&quot; | &quot;mips64le&quot; | &quot;ppc64&quot; | &quot;ppc64le&quot; | &quot;riscv64&quot; | &quot;s390x&quot; | &quot;wasm&quot;, # Optional. CPU architecture
        ///       os: &quot;aix&quot; | &quot;android&quot; | &quot;darwin&quot; | &quot;dragonfly&quot; | &quot;freebsd&quot; | &quot;illumos&quot; | &quot;ios&quot; | &quot;js&quot; | &quot;linux&quot; | &quot;netbsd&quot; | &quot;openbsd&quot; | &quot;plan9&quot; | &quot;solaris&quot; | &quot;windows&quot;, # Optional. Operating system
        ///     }
        ///   ], # Optional. List of artifacts that are referenced by this manifest list, with information about the platform each supports.  This list will be empty if this is a leaf manifest and not a manifest list.
        ///   configMediaType: string, # Optional. Config blob media type
        ///   tags: [string], # Optional. List of tags
        ///   changeableAttributes: {
        ///     deleteEnabled: boolean, # Optional. Delete enabled
        ///     writeEnabled: boolean, # Optional. Write enabled
        ///     listEnabled: boolean, # Optional. List enabled
        ///     readEnabled: boolean, # Optional. Read enabled
        ///   }, # Optional. Writeable properties of the resource
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetManifestsAsync(string name, string last = null, int? n = null, string orderby = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            return GetManifestsImplementationAsync("ContainerRegistryClient.GetManifests", name, last, n, orderby, context);
        }

        private AsyncPageable<BinaryData> GetManifestsImplementationAsync(string diagnosticsScopeName, string name, string last, int? n, string orderby, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetManifestsRequest(name, last, n, orderby, context)
                        : CreateGetManifestsNextPageRequest(nextLink, name, last, n, orderby, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "manifests", "link", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> List manifests of a repository. </summary>
        /// <param name="name"> Name of the image (including the namespace). </param>
        /// <param name="last"> Query parameter for the last item in previous query. Result set will include values lexically after last. </param>
        /// <param name="n"> query parameter for max number of items. </param>
        /// <param name="orderby"> orderby query parameter. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetManifests with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// foreach (var data in client.GetManifests("<name>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("digest").ToString());
        ///     Console.WriteLine(result.GetProperty("createdTime").ToString());
        ///     Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetManifests with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ContainerRegistryClient("<url>", credential);
        /// 
        /// foreach (var data in client.GetManifests("<name>", "<last>", 1234, "<orderby>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("digest").ToString());
        ///     Console.WriteLine(result.GetProperty("imageSize").ToString());
        ///     Console.WriteLine(result.GetProperty("createdTime").ToString());
        ///     Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("architecture").ToString());
        ///     Console.WriteLine(result.GetProperty("os").ToString());
        ///     Console.WriteLine(result.GetProperty("references")[0].GetProperty("digest").ToString());
        ///     Console.WriteLine(result.GetProperty("references")[0].GetProperty("architecture").ToString());
        ///     Console.WriteLine(result.GetProperty("references")[0].GetProperty("os").ToString());
        ///     Console.WriteLine(result.GetProperty("configMediaType").ToString());
        ///     Console.WriteLine(result.GetProperty("tags")[0].ToString());
        ///     Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("deleteEnabled").ToString());
        ///     Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("writeEnabled").ToString());
        ///     Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("listEnabled").ToString());
        ///     Console.WriteLine(result.GetProperty("changeableAttributes").GetProperty("readEnabled").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AcrManifests</c>:
        /// <code>{
        ///   digest: string, # Required. Manifest
        ///   imageSize: number, # Optional. Image size
        ///   createdTime: string (ISO 8601 Format), # Required. Created time
        ///   lastUpdateTime: string (ISO 8601 Format), # Required. Last update time
        ///   architecture: &quot;386&quot; | &quot;amd64&quot; | &quot;arm&quot; | &quot;arm64&quot; | &quot;mips&quot; | &quot;mipsle&quot; | &quot;mips64&quot; | &quot;mips64le&quot; | &quot;ppc64&quot; | &quot;ppc64le&quot; | &quot;riscv64&quot; | &quot;s390x&quot; | &quot;wasm&quot;, # Optional. CPU architecture
        ///   os: &quot;aix&quot; | &quot;android&quot; | &quot;darwin&quot; | &quot;dragonfly&quot; | &quot;freebsd&quot; | &quot;illumos&quot; | &quot;ios&quot; | &quot;js&quot; | &quot;linux&quot; | &quot;netbsd&quot; | &quot;openbsd&quot; | &quot;plan9&quot; | &quot;solaris&quot; | &quot;windows&quot;, # Optional. Operating system
        ///   references: [
        ///     {
        ///       digest: string, # Required. Manifest digest
        ///       architecture: &quot;386&quot; | &quot;amd64&quot; | &quot;arm&quot; | &quot;arm64&quot; | &quot;mips&quot; | &quot;mipsle&quot; | &quot;mips64&quot; | &quot;mips64le&quot; | &quot;ppc64&quot; | &quot;ppc64le&quot; | &quot;riscv64&quot; | &quot;s390x&quot; | &quot;wasm&quot;, # Optional. CPU architecture
        ///       os: &quot;aix&quot; | &quot;android&quot; | &quot;darwin&quot; | &quot;dragonfly&quot; | &quot;freebsd&quot; | &quot;illumos&quot; | &quot;ios&quot; | &quot;js&quot; | &quot;linux&quot; | &quot;netbsd&quot; | &quot;openbsd&quot; | &quot;plan9&quot; | &quot;solaris&quot; | &quot;windows&quot;, # Optional. Operating system
        ///     }
        ///   ], # Optional. List of artifacts that are referenced by this manifest list, with information about the platform each supports.  This list will be empty if this is a leaf manifest and not a manifest list.
        ///   configMediaType: string, # Optional. Config blob media type
        ///   tags: [string], # Optional. List of tags
        ///   changeableAttributes: {
        ///     deleteEnabled: boolean, # Optional. Delete enabled
        ///     writeEnabled: boolean, # Optional. Write enabled
        ///     listEnabled: boolean, # Optional. List enabled
        ///     readEnabled: boolean, # Optional. Read enabled
        ///   }, # Optional. Writeable properties of the resource
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetManifests(string name, string last = null, int? n = null, string orderby = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            return GetManifestsImplementation("ContainerRegistryClient.GetManifests", name, last, n, orderby, context);
        }

        private Pageable<BinaryData> GetManifestsImplementation(string diagnosticsScopeName, string name, string last, int? n, string orderby, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetManifestsRequest(name, last, n, orderby, context)
                        : CreateGetManifestsNextPageRequest(nextLink, name, last, n, orderby, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "manifests", "link");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        internal HttpMessage CreateCheckDockerV2SupportRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_url, false);
            uri.AppendPath("/v2/", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetManifestRequest(string name, string reference, string accept, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_url, false);
            uri.AppendPath("/v2/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/manifests/", false);
            uri.AppendPath(reference, true);
            request.Uri = uri;
            if (accept != null)
            {
                request.Headers.Add("accept", accept);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateManifestRequest(string name, string reference, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier201);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_url, false);
            uri.AppendPath("/v2/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/manifests/", false);
            uri.AppendPath(reference, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/vnd.docker.distribution.manifest.v2+json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteManifestRequest(string name, string reference, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202404);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_url, false);
            uri.AppendPath("/v2/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/manifests/", false);
            uri.AppendPath(reference, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetRepositoriesRequest(string last, int? n, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_url, false);
            uri.AppendPath("/acr/v1/_catalog", false);
            if (last != null)
            {
                uri.AppendQuery("last", last, true);
            }
            if (n != null)
            {
                uri.AppendQuery("n", n.Value, true);
            }
            if (_apiVersion != null)
            {
                uri.AppendQuery("api-version", _apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetPropertiesRequest(string name, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_url, false);
            uri.AppendPath("/acr/v1/", false);
            uri.AppendPath(name, true);
            if (_apiVersion != null)
            {
                uri.AppendQuery("api-version", _apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateDeleteRepositoryRequest(string name, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202404);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_url, false);
            uri.AppendPath("/acr/v1/", false);
            uri.AppendPath(name, true);
            if (_apiVersion != null)
            {
                uri.AppendQuery("api-version", _apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateUpdatePropertiesRequest(string name, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_url, false);
            uri.AppendPath("/acr/v1/", false);
            uri.AppendPath(name, true);
            if (_apiVersion != null)
            {
                uri.AppendQuery("api-version", _apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetTagsRequest(string name, string last, int? n, string orderby, string digest, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_url, false);
            uri.AppendPath("/acr/v1/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/_tags", false);
            if (last != null)
            {
                uri.AppendQuery("last", last, true);
            }
            if (n != null)
            {
                uri.AppendQuery("n", n.Value, true);
            }
            if (orderby != null)
            {
                uri.AppendQuery("orderby", orderby, true);
            }
            if (digest != null)
            {
                uri.AppendQuery("digest", digest, true);
            }
            if (_apiVersion != null)
            {
                uri.AppendQuery("api-version", _apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetTagPropertiesRequest(string name, string reference, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_url, false);
            uri.AppendPath("/acr/v1/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/_tags/", false);
            uri.AppendPath(reference, true);
            if (_apiVersion != null)
            {
                uri.AppendQuery("api-version", _apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateUpdateTagAttributesRequest(string name, string reference, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_url, false);
            uri.AppendPath("/acr/v1/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/_tags/", false);
            uri.AppendPath(reference, true);
            if (_apiVersion != null)
            {
                uri.AppendQuery("api-version", _apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteTagRequest(string name, string reference, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202404);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_url, false);
            uri.AppendPath("/acr/v1/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/_tags/", false);
            uri.AppendPath(reference, true);
            if (_apiVersion != null)
            {
                uri.AppendQuery("api-version", _apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetManifestsRequest(string name, string last, int? n, string orderby, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_url, false);
            uri.AppendPath("/acr/v1/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/_manifests", false);
            if (last != null)
            {
                uri.AppendQuery("last", last, true);
            }
            if (n != null)
            {
                uri.AppendQuery("n", n.Value, true);
            }
            if (orderby != null)
            {
                uri.AppendQuery("orderby", orderby, true);
            }
            if (_apiVersion != null)
            {
                uri.AppendQuery("api-version", _apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetManifestPropertiesRequest(string name, string digest, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_url, false);
            uri.AppendPath("/acr/v1/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/_manifests/", false);
            uri.AppendPath(digest, true);
            if (_apiVersion != null)
            {
                uri.AppendQuery("api-version", _apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateUpdateManifestPropertiesRequest(string name, string digest, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_url, false);
            uri.AppendPath("/acr/v1/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/_manifests/", false);
            uri.AppendPath(digest, true);
            if (_apiVersion != null)
            {
                uri.AppendQuery("api-version", _apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetRepositoriesNextPageRequest(string nextLink, string last, int? n, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_url, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetTagsNextPageRequest(string nextLink, string name, string last, int? n, string orderby, string digest, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_url, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetManifestsNextPageRequest(string nextLink, string name, string last, int? n, string orderby, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_url, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier201;
        private static ResponseClassifier ResponseClassifier201 => _responseClassifier201 ??= new StatusCodeClassifier(stackalloc ushort[] { 201 });
        private static ResponseClassifier _responseClassifier202404;
        private static ResponseClassifier ResponseClassifier202404 => _responseClassifier202404 ??= new StatusCodeClassifier(stackalloc ushort[] { 202, 404 });
    }
}
