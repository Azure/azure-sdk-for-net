<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="UpsertJobAsync(string,RequestContent,RequestContext)">
<example>
This sample shows how to call UpsertJobAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

var data = new {};

Response response = await client.UpsertJobAsync("<id>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call UpsertJobAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

var data = new {
    channelReference = "<channelReference>",
    channelId = "<channelId>",
    classificationPolicyId = "<classificationPolicyId>",
    queueId = "<queueId>",
    priority = 1234,
    dispositionCode = "<dispositionCode>",
    requestedWorkerSelectors = new[] {
        new {
            key = "<key>",
            labelOperator = "equal",
            value = new {},
            expiresAfterSeconds = 123.45d,
            expedite = true,
        }
    },
    labels = new {
        key = new {},
    },
    tags = new {
        key = new {},
    },
    notes = new {
        key = "<String>",
    },
    matchingMode = new {
        modeType = "queueAndMatchMode",
        queueAndMatchMode = new {},
        scheduleAndSuspendMode = new {
            scheduleAt = "2022-05-10T18:57:31.2311892Z",
        },
        suspendMode = new {},
    },
};

Response response = await client.UpsertJobAsync("<id>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("channelReference").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("enqueuedAt").ToString());
Console.WriteLine(result.GetProperty("channelId").ToString());
Console.WriteLine(result.GetProperty("classificationPolicyId").ToString());
Console.WriteLine(result.GetProperty("queueId").ToString());
Console.WriteLine(result.GetProperty("priority").ToString());
Console.WriteLine(result.GetProperty("dispositionCode").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("key").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expedite").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("key").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expedite").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
Console.WriteLine(result.GetProperty("labels").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("assignmentId").ToString());
Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("workerId").ToString());
Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("assignedAt").ToString());
Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("completedAt").ToString());
Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("closedAt").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("notes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("scheduledAt").ToString());
Console.WriteLine(result.GetProperty("matchingMode").GetProperty("modeType").ToString());
Console.WriteLine(result.GetProperty("matchingMode").GetProperty("queueAndMatchMode").ToString());
Console.WriteLine(result.GetProperty("matchingMode").GetProperty("scheduleAndSuspendMode").GetProperty("scheduleAt").ToString());
Console.WriteLine(result.GetProperty("matchingMode").GetProperty("suspendMode").ToString());
]]></code>
</example>
    </member>
    <member name="UpsertJob(string,RequestContent,RequestContext)">
<example>
This sample shows how to call UpsertJob with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

var data = new {};

Response response = client.UpsertJob("<id>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call UpsertJob with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

var data = new {
    channelReference = "<channelReference>",
    channelId = "<channelId>",
    classificationPolicyId = "<classificationPolicyId>",
    queueId = "<queueId>",
    priority = 1234,
    dispositionCode = "<dispositionCode>",
    requestedWorkerSelectors = new[] {
        new {
            key = "<key>",
            labelOperator = "equal",
            value = new {},
            expiresAfterSeconds = 123.45d,
            expedite = true,
        }
    },
    labels = new {
        key = new {},
    },
    tags = new {
        key = new {},
    },
    notes = new {
        key = "<String>",
    },
    matchingMode = new {
        modeType = "queueAndMatchMode",
        queueAndMatchMode = new {},
        scheduleAndSuspendMode = new {
            scheduleAt = "2022-05-10T18:57:31.2311892Z",
        },
        suspendMode = new {},
    },
};

Response response = client.UpsertJob("<id>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("channelReference").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("enqueuedAt").ToString());
Console.WriteLine(result.GetProperty("channelId").ToString());
Console.WriteLine(result.GetProperty("classificationPolicyId").ToString());
Console.WriteLine(result.GetProperty("queueId").ToString());
Console.WriteLine(result.GetProperty("priority").ToString());
Console.WriteLine(result.GetProperty("dispositionCode").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("key").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expedite").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("key").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expedite").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
Console.WriteLine(result.GetProperty("labels").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("assignmentId").ToString());
Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("workerId").ToString());
Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("assignedAt").ToString());
Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("completedAt").ToString());
Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("closedAt").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("notes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("scheduledAt").ToString());
Console.WriteLine(result.GetProperty("matchingMode").GetProperty("modeType").ToString());
Console.WriteLine(result.GetProperty("matchingMode").GetProperty("queueAndMatchMode").ToString());
Console.WriteLine(result.GetProperty("matchingMode").GetProperty("scheduleAndSuspendMode").GetProperty("scheduleAt").ToString());
Console.WriteLine(result.GetProperty("matchingMode").GetProperty("suspendMode").ToString());
]]></code>
</example>
    </member>
    <member name="GetJobAsync(string,RequestContext)">
<example>
This sample shows how to call GetJobAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

Response response = await client.GetJobAsync("<id>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("channelReference").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("enqueuedAt").ToString());
Console.WriteLine(result.GetProperty("channelId").ToString());
Console.WriteLine(result.GetProperty("classificationPolicyId").ToString());
Console.WriteLine(result.GetProperty("queueId").ToString());
Console.WriteLine(result.GetProperty("priority").ToString());
Console.WriteLine(result.GetProperty("dispositionCode").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("key").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expedite").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("key").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expedite").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
Console.WriteLine(result.GetProperty("labels").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("assignmentId").ToString());
Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("workerId").ToString());
Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("assignedAt").ToString());
Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("completedAt").ToString());
Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("closedAt").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("notes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("scheduledAt").ToString());
Console.WriteLine(result.GetProperty("matchingMode").GetProperty("modeType").ToString());
Console.WriteLine(result.GetProperty("matchingMode").GetProperty("queueAndMatchMode").ToString());
Console.WriteLine(result.GetProperty("matchingMode").GetProperty("scheduleAndSuspendMode").GetProperty("scheduleAt").ToString());
Console.WriteLine(result.GetProperty("matchingMode").GetProperty("suspendMode").ToString());
]]></code>
</example>
    </member>
    <member name="GetJob(string,RequestContext)">
<example>
This sample shows how to call GetJob with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

Response response = client.GetJob("<id>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("channelReference").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("enqueuedAt").ToString());
Console.WriteLine(result.GetProperty("channelId").ToString());
Console.WriteLine(result.GetProperty("classificationPolicyId").ToString());
Console.WriteLine(result.GetProperty("queueId").ToString());
Console.WriteLine(result.GetProperty("priority").ToString());
Console.WriteLine(result.GetProperty("dispositionCode").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("key").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expedite").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("key").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expedite").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
Console.WriteLine(result.GetProperty("labels").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("assignmentId").ToString());
Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("workerId").ToString());
Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("assignedAt").ToString());
Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("completedAt").ToString());
Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("closedAt").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("notes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("scheduledAt").ToString());
Console.WriteLine(result.GetProperty("matchingMode").GetProperty("modeType").ToString());
Console.WriteLine(result.GetProperty("matchingMode").GetProperty("queueAndMatchMode").ToString());
Console.WriteLine(result.GetProperty("matchingMode").GetProperty("scheduleAndSuspendMode").GetProperty("scheduleAt").ToString());
Console.WriteLine(result.GetProperty("matchingMode").GetProperty("suspendMode").ToString());
]]></code>
</example>
    </member>
    <member name="DeleteJobAsync(string,RequestContext)">
<example>
This sample shows how to call DeleteJobAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

Response response = await client.DeleteJobAsync("<id>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="DeleteJob(string,RequestContext)">
<example>
This sample shows how to call DeleteJob with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

Response response = client.DeleteJob("<id>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="ReclassifyJobActionAsync(string,RequestContent,RequestContext)">
<example>
This sample shows how to call ReclassifyJobActionAsync with required parameters and request content and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

var data = new {};

Response response = await client.ReclassifyJobActionAsync("<id>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
</example>
    </member>
    <member name="ReclassifyJobAction(string,RequestContent,RequestContext)">
<example>
This sample shows how to call ReclassifyJobAction with required parameters and request content and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

var data = new {};

Response response = client.ReclassifyJobAction("<id>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
</example>
    </member>
    <member name="CancelJobActionAsync(string,RequestContent,RequestContext)">
<example>
This sample shows how to call CancelJobActionAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

var data = new {};

Response response = await client.CancelJobActionAsync("<id>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CancelJobActionAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

var data = new {
    note = "<note>",
    dispositionCode = "<dispositionCode>",
};

Response response = await client.CancelJobActionAsync("<id>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
</example>
    </member>
    <member name="CancelJobAction(string,RequestContent,RequestContext)">
<example>
This sample shows how to call CancelJobAction with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

var data = new {};

Response response = client.CancelJobAction("<id>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CancelJobAction with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

var data = new {
    note = "<note>",
    dispositionCode = "<dispositionCode>",
};

Response response = client.CancelJobAction("<id>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
</example>
    </member>
    <member name="CompleteJobActionAsync(string,RequestContent,RequestContext)">
<example>
This sample shows how to call CompleteJobActionAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

var data = new {
    assignmentId = "<assignmentId>",
};

Response response = await client.CompleteJobActionAsync("<id>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CompleteJobActionAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

var data = new {
    assignmentId = "<assignmentId>",
    note = "<note>",
};

Response response = await client.CompleteJobActionAsync("<id>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
</example>
    </member>
    <member name="CompleteJobAction(string,RequestContent,RequestContext)">
<example>
This sample shows how to call CompleteJobAction with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

var data = new {
    assignmentId = "<assignmentId>",
};

Response response = client.CompleteJobAction("<id>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CompleteJobAction with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

var data = new {
    assignmentId = "<assignmentId>",
    note = "<note>",
};

Response response = client.CompleteJobAction("<id>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
</example>
    </member>
    <member name="CloseJobActionAsync(string,RequestContent,RequestContext)">
<example>
This sample shows how to call CloseJobActionAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

var data = new {
    assignmentId = "<assignmentId>",
};

Response response = await client.CloseJobActionAsync("<id>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CloseJobActionAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

var data = new {
    assignmentId = "<assignmentId>",
    dispositionCode = "<dispositionCode>",
    closeAt = "2022-05-10T18:57:31.2311892Z",
    note = "<note>",
};

Response response = await client.CloseJobActionAsync("<id>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
</example>
    </member>
    <member name="CloseJobAction(string,RequestContent,RequestContext)">
<example>
This sample shows how to call CloseJobAction with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

var data = new {
    assignmentId = "<assignmentId>",
};

Response response = client.CloseJobAction("<id>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CloseJobAction with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

var data = new {
    assignmentId = "<assignmentId>",
    dispositionCode = "<dispositionCode>",
    closeAt = "2022-05-10T18:57:31.2311892Z",
    note = "<note>",
};

Response response = client.CloseJobAction("<id>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
</example>
    </member>
    <member name="GetInQueuePositionAsync(string,RequestContext)">
<example>
This sample shows how to call GetInQueuePositionAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

Response response = await client.GetInQueuePositionAsync("<id>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("position").ToString());
Console.WriteLine(result.GetProperty("queueId").ToString());
Console.WriteLine(result.GetProperty("queueLength").ToString());
Console.WriteLine(result.GetProperty("estimatedWaitTimeMinutes").ToString());
]]></code>
</example>
    </member>
    <member name="GetInQueuePosition(string,RequestContext)">
<example>
This sample shows how to call GetInQueuePosition with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

Response response = client.GetInQueuePosition("<id>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("position").ToString());
Console.WriteLine(result.GetProperty("queueId").ToString());
Console.WriteLine(result.GetProperty("queueLength").ToString());
Console.WriteLine(result.GetProperty("estimatedWaitTimeMinutes").ToString());
]]></code>
</example>
    </member>
    <member name="UnassignJobActionAsync(string,string,RequestContent,RequestContext)">
<example>
This sample shows how to call UnassignJobActionAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

var data = new {};

Response response = await client.UnassignJobActionAsync("<id>", "<assignmentId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("unassignmentCount").ToString());
]]></code>
This sample shows how to call UnassignJobActionAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

var data = new {
    suspendMatching = true,
};

Response response = await client.UnassignJobActionAsync("<id>", "<assignmentId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("unassignmentCount").ToString());
]]></code>
</example>
    </member>
    <member name="UnassignJobAction(string,string,RequestContent,RequestContext)">
<example>
This sample shows how to call UnassignJobAction with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

var data = new {};

Response response = client.UnassignJobAction("<id>", "<assignmentId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("unassignmentCount").ToString());
]]></code>
This sample shows how to call UnassignJobAction with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

var data = new {
    suspendMatching = true,
};

Response response = client.UnassignJobAction("<id>", "<assignmentId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("unassignmentCount").ToString());
]]></code>
</example>
    </member>
    <member name="AcceptJobActionAsync(string,string,RequestContext)">
<example>
This sample shows how to call AcceptJobActionAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

Response response = await client.AcceptJobActionAsync("<workerId>", "<offerId>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("assignmentId").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("workerId").ToString());
]]></code>
</example>
    </member>
    <member name="AcceptJobAction(string,string,RequestContext)">
<example>
This sample shows how to call AcceptJobAction with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

Response response = client.AcceptJobAction("<workerId>", "<offerId>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("assignmentId").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("workerId").ToString());
]]></code>
</example>
    </member>
    <member name="DeclineJobActionAsync(string,string,RequestContent,RequestContext)">
<example>
This sample shows how to call DeclineJobActionAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

var data = new {};

Response response = await client.DeclineJobActionAsync("<workerId>", "<offerId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call DeclineJobActionAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

var data = new {
    retryOfferAt = "2022-05-10T18:57:31.2311892Z",
};

Response response = await client.DeclineJobActionAsync("<workerId>", "<offerId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
</example>
    </member>
    <member name="DeclineJobAction(string,string,RequestContent,RequestContext)">
<example>
This sample shows how to call DeclineJobAction with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

var data = new {};

Response response = client.DeclineJobAction("<workerId>", "<offerId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call DeclineJobAction with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

var data = new {
    retryOfferAt = "2022-05-10T18:57:31.2311892Z",
};

Response response = client.DeclineJobAction("<workerId>", "<offerId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
</example>
    </member>
    <member name="GetQueueStatisticsAsync(string,RequestContext)">
<example>
This sample shows how to call GetQueueStatisticsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

Response response = await client.GetQueueStatisticsAsync("<id>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("queueId").ToString());
Console.WriteLine(result.GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("estimatedWaitTimeMinutes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("longestJobWaitTimeMinutes").ToString());
]]></code>
</example>
    </member>
    <member name="GetQueueStatistics(string,RequestContext)">
<example>
This sample shows how to call GetQueueStatistics with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

Response response = client.GetQueueStatistics("<id>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("queueId").ToString());
Console.WriteLine(result.GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("estimatedWaitTimeMinutes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("longestJobWaitTimeMinutes").ToString());
]]></code>
</example>
    </member>
    <member name="UpsertWorkerAsync(string,RequestContent,RequestContext)">
<example>
This sample shows how to call UpsertWorkerAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

var data = new {};

Response response = await client.UpsertWorkerAsync("<workerId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call UpsertWorkerAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

var data = new {
    queueAssignments = new {
        key = new {},
    },
    totalCapacity = 1234,
    labels = new {
        key = new {},
    },
    tags = new {
        key = new {},
    },
    channelConfigurations = new {
        key = new {
            capacityCostPerJob = 1234,
            maxNumberOfJobs = 1234,
        },
    },
    availableForOffers = true,
};

Response response = await client.UpsertWorkerAsync("<workerId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("state").ToString());
Console.WriteLine(result.GetProperty("queueAssignments").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("totalCapacity").ToString());
Console.WriteLine(result.GetProperty("labels").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("channelConfigurations").GetProperty("<test>").GetProperty("capacityCostPerJob").ToString());
Console.WriteLine(result.GetProperty("channelConfigurations").GetProperty("<test>").GetProperty("maxNumberOfJobs").ToString());
Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offerId").ToString());
Console.WriteLine(result.GetProperty("offers")[0].GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("offers")[0].GetProperty("capacityCost").ToString());
Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offeredAt").ToString());
Console.WriteLine(result.GetProperty("offers")[0].GetProperty("expiresAt").ToString());
Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignmentId").ToString());
Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("capacityCost").ToString());
Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignedAt").ToString());
Console.WriteLine(result.GetProperty("loadRatio").ToString());
Console.WriteLine(result.GetProperty("availableForOffers").ToString());
]]></code>
</example>
    </member>
    <member name="UpsertWorker(string,RequestContent,RequestContext)">
<example>
This sample shows how to call UpsertWorker with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

var data = new {};

Response response = client.UpsertWorker("<workerId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call UpsertWorker with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

var data = new {
    queueAssignments = new {
        key = new {},
    },
    totalCapacity = 1234,
    labels = new {
        key = new {},
    },
    tags = new {
        key = new {},
    },
    channelConfigurations = new {
        key = new {
            capacityCostPerJob = 1234,
            maxNumberOfJobs = 1234,
        },
    },
    availableForOffers = true,
};

Response response = client.UpsertWorker("<workerId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("state").ToString());
Console.WriteLine(result.GetProperty("queueAssignments").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("totalCapacity").ToString());
Console.WriteLine(result.GetProperty("labels").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("channelConfigurations").GetProperty("<test>").GetProperty("capacityCostPerJob").ToString());
Console.WriteLine(result.GetProperty("channelConfigurations").GetProperty("<test>").GetProperty("maxNumberOfJobs").ToString());
Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offerId").ToString());
Console.WriteLine(result.GetProperty("offers")[0].GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("offers")[0].GetProperty("capacityCost").ToString());
Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offeredAt").ToString());
Console.WriteLine(result.GetProperty("offers")[0].GetProperty("expiresAt").ToString());
Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignmentId").ToString());
Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("capacityCost").ToString());
Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignedAt").ToString());
Console.WriteLine(result.GetProperty("loadRatio").ToString());
Console.WriteLine(result.GetProperty("availableForOffers").ToString());
]]></code>
</example>
    </member>
    <member name="GetWorkerAsync(string,RequestContext)">
<example>
This sample shows how to call GetWorkerAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

Response response = await client.GetWorkerAsync("<workerId>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("state").ToString());
Console.WriteLine(result.GetProperty("queueAssignments").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("totalCapacity").ToString());
Console.WriteLine(result.GetProperty("labels").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("channelConfigurations").GetProperty("<test>").GetProperty("capacityCostPerJob").ToString());
Console.WriteLine(result.GetProperty("channelConfigurations").GetProperty("<test>").GetProperty("maxNumberOfJobs").ToString());
Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offerId").ToString());
Console.WriteLine(result.GetProperty("offers")[0].GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("offers")[0].GetProperty("capacityCost").ToString());
Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offeredAt").ToString());
Console.WriteLine(result.GetProperty("offers")[0].GetProperty("expiresAt").ToString());
Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignmentId").ToString());
Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("capacityCost").ToString());
Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignedAt").ToString());
Console.WriteLine(result.GetProperty("loadRatio").ToString());
Console.WriteLine(result.GetProperty("availableForOffers").ToString());
]]></code>
</example>
    </member>
    <member name="GetWorker(string,RequestContext)">
<example>
This sample shows how to call GetWorker with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

Response response = client.GetWorker("<workerId>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("state").ToString());
Console.WriteLine(result.GetProperty("queueAssignments").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("totalCapacity").ToString());
Console.WriteLine(result.GetProperty("labels").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("channelConfigurations").GetProperty("<test>").GetProperty("capacityCostPerJob").ToString());
Console.WriteLine(result.GetProperty("channelConfigurations").GetProperty("<test>").GetProperty("maxNumberOfJobs").ToString());
Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offerId").ToString());
Console.WriteLine(result.GetProperty("offers")[0].GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("offers")[0].GetProperty("capacityCost").ToString());
Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offeredAt").ToString());
Console.WriteLine(result.GetProperty("offers")[0].GetProperty("expiresAt").ToString());
Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignmentId").ToString());
Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("capacityCost").ToString());
Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignedAt").ToString());
Console.WriteLine(result.GetProperty("loadRatio").ToString());
Console.WriteLine(result.GetProperty("availableForOffers").ToString());
]]></code>
</example>
    </member>
    <member name="DeleteWorkerAsync(string,RequestContext)">
<example>
This sample shows how to call DeleteWorkerAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

Response response = await client.DeleteWorkerAsync("<workerId>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="DeleteWorker(string,RequestContext)">
<example>
This sample shows how to call DeleteWorker with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

Response response = client.DeleteWorker("<workerId>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="GetJobsAsync(string,string,string,string,DateTimeOffset?,DateTimeOffset?,int?,RequestContext)">
<example>
This sample shows how to call GetJobsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

await foreach (var item in client.GetJobsAsync("<status>", "<queueId>", "<channelId>", "<classificationPolicyId>", DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("job").GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("channelReference").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("enqueuedAt").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("channelId").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("classificationPolicyId").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("queueId").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("priority").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("dispositionCode").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("key").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("expedite").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("key").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("expedite").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("labels").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("assignments").GetProperty("<test>").GetProperty("assignmentId").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("assignments").GetProperty("<test>").GetProperty("workerId").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("assignments").GetProperty("<test>").GetProperty("assignedAt").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("assignments").GetProperty("<test>").GetProperty("completedAt").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("assignments").GetProperty("<test>").GetProperty("closedAt").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("tags").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("notes").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("scheduledAt").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("matchingMode").GetProperty("modeType").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("matchingMode").GetProperty("queueAndMatchMode").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("matchingMode").GetProperty("scheduleAndSuspendMode").GetProperty("scheduleAt").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("matchingMode").GetProperty("suspendMode").ToString());
    Console.WriteLine(result.GetProperty("etag").ToString());
}
]]></code>
</example>
    </member>
    <member name="GetJobs(string,string,string,string,DateTimeOffset?,DateTimeOffset?,int?,RequestContext)">
<example>
This sample shows how to call GetJobs with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

foreach (var item in client.GetJobs("<status>", "<queueId>", "<channelId>", "<classificationPolicyId>", DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("job").GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("channelReference").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("enqueuedAt").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("channelId").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("classificationPolicyId").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("queueId").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("priority").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("dispositionCode").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("key").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("expedite").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("key").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("expedite").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("labels").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("assignments").GetProperty("<test>").GetProperty("assignmentId").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("assignments").GetProperty("<test>").GetProperty("workerId").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("assignments").GetProperty("<test>").GetProperty("assignedAt").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("assignments").GetProperty("<test>").GetProperty("completedAt").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("assignments").GetProperty("<test>").GetProperty("closedAt").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("tags").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("notes").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("scheduledAt").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("matchingMode").GetProperty("modeType").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("matchingMode").GetProperty("queueAndMatchMode").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("matchingMode").GetProperty("scheduleAndSuspendMode").GetProperty("scheduleAt").ToString());
    Console.WriteLine(result.GetProperty("job").GetProperty("matchingMode").GetProperty("suspendMode").ToString());
    Console.WriteLine(result.GetProperty("etag").ToString());
}
]]></code>
</example>
    </member>
    <member name="GetWorkersAsync(string,string,string,bool?,int?,RequestContext)">
<example>
This sample shows how to call GetWorkersAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

await foreach (var item in client.GetWorkersAsync("<state>", "<channelId>", "<queueId>", true, 1234, new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("worker").GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("worker").GetProperty("state").ToString());
    Console.WriteLine(result.GetProperty("worker").GetProperty("queueAssignments").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("worker").GetProperty("totalCapacity").ToString());
    Console.WriteLine(result.GetProperty("worker").GetProperty("labels").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("worker").GetProperty("tags").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("worker").GetProperty("channelConfigurations").GetProperty("<test>").GetProperty("capacityCostPerJob").ToString());
    Console.WriteLine(result.GetProperty("worker").GetProperty("channelConfigurations").GetProperty("<test>").GetProperty("maxNumberOfJobs").ToString());
    Console.WriteLine(result.GetProperty("worker").GetProperty("offers")[0].GetProperty("offerId").ToString());
    Console.WriteLine(result.GetProperty("worker").GetProperty("offers")[0].GetProperty("jobId").ToString());
    Console.WriteLine(result.GetProperty("worker").GetProperty("offers")[0].GetProperty("capacityCost").ToString());
    Console.WriteLine(result.GetProperty("worker").GetProperty("offers")[0].GetProperty("offeredAt").ToString());
    Console.WriteLine(result.GetProperty("worker").GetProperty("offers")[0].GetProperty("expiresAt").ToString());
    Console.WriteLine(result.GetProperty("worker").GetProperty("assignedJobs")[0].GetProperty("assignmentId").ToString());
    Console.WriteLine(result.GetProperty("worker").GetProperty("assignedJobs")[0].GetProperty("jobId").ToString());
    Console.WriteLine(result.GetProperty("worker").GetProperty("assignedJobs")[0].GetProperty("capacityCost").ToString());
    Console.WriteLine(result.GetProperty("worker").GetProperty("assignedJobs")[0].GetProperty("assignedAt").ToString());
    Console.WriteLine(result.GetProperty("worker").GetProperty("loadRatio").ToString());
    Console.WriteLine(result.GetProperty("worker").GetProperty("availableForOffers").ToString());
    Console.WriteLine(result.GetProperty("etag").ToString());
}
]]></code>
</example>
    </member>
    <member name="GetWorkers(string,string,string,bool?,int?,RequestContext)">
<example>
This sample shows how to call GetWorkers with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JobRouterClient("<https://my-service.azure.com>", credential);

foreach (var item in client.GetWorkers("<state>", "<channelId>", "<queueId>", true, 1234, new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("worker").GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("worker").GetProperty("state").ToString());
    Console.WriteLine(result.GetProperty("worker").GetProperty("queueAssignments").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("worker").GetProperty("totalCapacity").ToString());
    Console.WriteLine(result.GetProperty("worker").GetProperty("labels").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("worker").GetProperty("tags").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("worker").GetProperty("channelConfigurations").GetProperty("<test>").GetProperty("capacityCostPerJob").ToString());
    Console.WriteLine(result.GetProperty("worker").GetProperty("channelConfigurations").GetProperty("<test>").GetProperty("maxNumberOfJobs").ToString());
    Console.WriteLine(result.GetProperty("worker").GetProperty("offers")[0].GetProperty("offerId").ToString());
    Console.WriteLine(result.GetProperty("worker").GetProperty("offers")[0].GetProperty("jobId").ToString());
    Console.WriteLine(result.GetProperty("worker").GetProperty("offers")[0].GetProperty("capacityCost").ToString());
    Console.WriteLine(result.GetProperty("worker").GetProperty("offers")[0].GetProperty("offeredAt").ToString());
    Console.WriteLine(result.GetProperty("worker").GetProperty("offers")[0].GetProperty("expiresAt").ToString());
    Console.WriteLine(result.GetProperty("worker").GetProperty("assignedJobs")[0].GetProperty("assignmentId").ToString());
    Console.WriteLine(result.GetProperty("worker").GetProperty("assignedJobs")[0].GetProperty("jobId").ToString());
    Console.WriteLine(result.GetProperty("worker").GetProperty("assignedJobs")[0].GetProperty("capacityCost").ToString());
    Console.WriteLine(result.GetProperty("worker").GetProperty("assignedJobs")[0].GetProperty("assignedAt").ToString());
    Console.WriteLine(result.GetProperty("worker").GetProperty("loadRatio").ToString());
    Console.WriteLine(result.GetProperty("worker").GetProperty("availableForOffers").ToString());
    Console.WriteLine(result.GetProperty("etag").ToString());
}
]]></code>
</example>
    </member>
  </members>
</doc>