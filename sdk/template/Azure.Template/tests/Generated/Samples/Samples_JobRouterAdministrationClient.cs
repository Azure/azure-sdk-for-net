// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Template.Samples
{
    public class Samples_JobRouterAdministrationClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpsertClassificationPolicy()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            var data = new { };

            Response response = client.UpsertClassificationPolicy("<id>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpsertClassificationPolicy_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            var data = new
            {
                name = "<name>",
                fallbackQueueId = "<fallbackQueueId>",
                queueSelectors = new[] {
        new {
            condition = new {
                kind = "direct-map-rule",
            },
            queueSelectors = new[] {
                new {
                    key = "<key>",
                    labelOperator = "equal",
                    value = new {},
                }
            },
            kind = "conditional",
        }
    },
                prioritizationRule = new
                {
                    kind = "direct-map-rule",
                },
                workerSelectors = new[] {
        new {
            condition = new {
                kind = "direct-map-rule",
            },
            workerSelectors = new[] {
                new {
                    key = "<key>",
                    labelOperator = "equal",
                    value = new {},
                    expiresAfterSeconds = 123.45d,
                    expedite = true,
                }
            },
            kind = "conditional",
        }
    },
            };

            Response response = client.UpsertClassificationPolicy("<id>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("fallbackQueueId").ToString());
            Console.WriteLine(result.GetProperty("queueSelectors")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("prioritizationRule").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("workerSelectors")[0].GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpsertClassificationPolicy_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            var data = new { };

            Response response = await client.UpsertClassificationPolicyAsync("<id>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpsertClassificationPolicy_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            var data = new
            {
                name = "<name>",
                fallbackQueueId = "<fallbackQueueId>",
                queueSelectors = new[] {
        new {
            condition = new {
                kind = "direct-map-rule",
            },
            queueSelectors = new[] {
                new {
                    key = "<key>",
                    labelOperator = "equal",
                    value = new {},
                }
            },
            kind = "conditional",
        }
    },
                prioritizationRule = new
                {
                    kind = "direct-map-rule",
                },
                workerSelectors = new[] {
        new {
            condition = new {
                kind = "direct-map-rule",
            },
            workerSelectors = new[] {
                new {
                    key = "<key>",
                    labelOperator = "equal",
                    value = new {},
                    expiresAfterSeconds = 123.45d,
                    expedite = true,
                }
            },
            kind = "conditional",
        }
    },
            };

            Response response = await client.UpsertClassificationPolicyAsync("<id>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("fallbackQueueId").ToString());
            Console.WriteLine(result.GetProperty("queueSelectors")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("prioritizationRule").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("workerSelectors")[0].GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetClassificationPolicy()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            Response response = client.GetClassificationPolicy("<id>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetClassificationPolicy_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            Response response = client.GetClassificationPolicy("<id>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("fallbackQueueId").ToString());
            Console.WriteLine(result.GetProperty("queueSelectors")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("prioritizationRule").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("workerSelectors")[0].GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetClassificationPolicy_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            Response response = await client.GetClassificationPolicyAsync("<id>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetClassificationPolicy_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            Response response = await client.GetClassificationPolicyAsync("<id>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("fallbackQueueId").ToString());
            Console.WriteLine(result.GetProperty("queueSelectors")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("prioritizationRule").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("workerSelectors")[0].GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteClassificationPolicy()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            Response response = client.DeleteClassificationPolicy("<id>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteClassificationPolicy_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            Response response = client.DeleteClassificationPolicy("<id>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteClassificationPolicy_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            Response response = await client.DeleteClassificationPolicyAsync("<id>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteClassificationPolicy_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            Response response = await client.DeleteClassificationPolicyAsync("<id>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpsertDistributionPolicy()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            var data = new { };

            Response response = client.UpsertDistributionPolicy("<id>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpsertDistributionPolicy_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            var data = new
            {
                name = "<name>",
                offerExpiresAfterSeconds = 123.45d,
                mode = new
                {
                    scoringRule = new
                    {
                        kind = "direct-map-rule",
                    },
                    scoringRuleOptions = new
                    {
                        batchSize = 1234,
                        scoringParameters = new[] {
                "jobLabels"
            },
                        allowScoringBatchOfWorkers = true,
                        descendingOrder = true,
                    },
                    kind = "best-worker",
                    minConcurrentOffers = 1234,
                    maxConcurrentOffers = 1234,
                    bypassSelectors = true,
                },
            };

            Response response = client.UpsertDistributionPolicy("<id>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("offerExpiresAfterSeconds").ToString());
            Console.WriteLine(result.GetProperty("mode").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("mode").GetProperty("minConcurrentOffers").ToString());
            Console.WriteLine(result.GetProperty("mode").GetProperty("maxConcurrentOffers").ToString());
            Console.WriteLine(result.GetProperty("mode").GetProperty("bypassSelectors").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpsertDistributionPolicy_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            var data = new { };

            Response response = await client.UpsertDistributionPolicyAsync("<id>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpsertDistributionPolicy_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            var data = new
            {
                name = "<name>",
                offerExpiresAfterSeconds = 123.45d,
                mode = new
                {
                    scoringRule = new
                    {
                        kind = "direct-map-rule",
                    },
                    scoringRuleOptions = new
                    {
                        batchSize = 1234,
                        scoringParameters = new[] {
                "jobLabels"
            },
                        allowScoringBatchOfWorkers = true,
                        descendingOrder = true,
                    },
                    kind = "best-worker",
                    minConcurrentOffers = 1234,
                    maxConcurrentOffers = 1234,
                    bypassSelectors = true,
                },
            };

            Response response = await client.UpsertDistributionPolicyAsync("<id>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("offerExpiresAfterSeconds").ToString());
            Console.WriteLine(result.GetProperty("mode").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("mode").GetProperty("minConcurrentOffers").ToString());
            Console.WriteLine(result.GetProperty("mode").GetProperty("maxConcurrentOffers").ToString());
            Console.WriteLine(result.GetProperty("mode").GetProperty("bypassSelectors").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDistributionPolicy()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            Response response = client.GetDistributionPolicy("<id>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDistributionPolicy_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            Response response = client.GetDistributionPolicy("<id>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("offerExpiresAfterSeconds").ToString());
            Console.WriteLine(result.GetProperty("mode").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("mode").GetProperty("minConcurrentOffers").ToString());
            Console.WriteLine(result.GetProperty("mode").GetProperty("maxConcurrentOffers").ToString());
            Console.WriteLine(result.GetProperty("mode").GetProperty("bypassSelectors").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDistributionPolicy_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            Response response = await client.GetDistributionPolicyAsync("<id>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDistributionPolicy_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            Response response = await client.GetDistributionPolicyAsync("<id>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("offerExpiresAfterSeconds").ToString());
            Console.WriteLine(result.GetProperty("mode").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("mode").GetProperty("minConcurrentOffers").ToString());
            Console.WriteLine(result.GetProperty("mode").GetProperty("maxConcurrentOffers").ToString());
            Console.WriteLine(result.GetProperty("mode").GetProperty("bypassSelectors").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteDistributionPolicy()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            Response response = client.DeleteDistributionPolicy("<id>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteDistributionPolicy_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            Response response = client.DeleteDistributionPolicy("<id>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteDistributionPolicy_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            Response response = await client.DeleteDistributionPolicyAsync("<id>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteDistributionPolicy_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            Response response = await client.DeleteDistributionPolicyAsync("<id>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpsertExceptionPolicy()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            var data = new { };

            Response response = client.UpsertExceptionPolicy("<id>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpsertExceptionPolicy_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            var data = new
            {
                name = "<name>",
                exceptionRules = new
                {
                    key = new
                    {
                        trigger = new
                        {
                            threshold = 1234,
                            kind = "queue-length",
                        },
                        actions = new
                        {
                            key = new
                            {
                                note = "<note>",
                                dispositionCode = "<dispositionCode>",
                                kind = "cancel",
                            },
                        },
                    },
                },
            };

            Response response = client.UpsertExceptionPolicy("<id>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("exceptionRules").GetProperty("<test>").GetProperty("trigger").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("exceptionRules").GetProperty("<test>").GetProperty("actions").GetProperty("<test>").GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpsertExceptionPolicy_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            var data = new { };

            Response response = await client.UpsertExceptionPolicyAsync("<id>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpsertExceptionPolicy_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            var data = new
            {
                name = "<name>",
                exceptionRules = new
                {
                    key = new
                    {
                        trigger = new
                        {
                            threshold = 1234,
                            kind = "queue-length",
                        },
                        actions = new
                        {
                            key = new
                            {
                                note = "<note>",
                                dispositionCode = "<dispositionCode>",
                                kind = "cancel",
                            },
                        },
                    },
                },
            };

            Response response = await client.UpsertExceptionPolicyAsync("<id>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("exceptionRules").GetProperty("<test>").GetProperty("trigger").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("exceptionRules").GetProperty("<test>").GetProperty("actions").GetProperty("<test>").GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetExceptionPolicy()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            Response response = client.GetExceptionPolicy("<id>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetExceptionPolicy_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            Response response = client.GetExceptionPolicy("<id>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("exceptionRules").GetProperty("<test>").GetProperty("trigger").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("exceptionRules").GetProperty("<test>").GetProperty("actions").GetProperty("<test>").GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetExceptionPolicy_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            Response response = await client.GetExceptionPolicyAsync("<id>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetExceptionPolicy_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            Response response = await client.GetExceptionPolicyAsync("<id>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("exceptionRules").GetProperty("<test>").GetProperty("trigger").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("exceptionRules").GetProperty("<test>").GetProperty("actions").GetProperty("<test>").GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteExceptionPolicy()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            Response response = client.DeleteExceptionPolicy("<id>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteExceptionPolicy_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            Response response = client.DeleteExceptionPolicy("<id>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteExceptionPolicy_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            Response response = await client.DeleteExceptionPolicyAsync("<id>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteExceptionPolicy_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            Response response = await client.DeleteExceptionPolicyAsync("<id>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpsertQueue()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            var data = new { };

            Response response = client.UpsertQueue("<id>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpsertQueue_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            var data = new
            {
                name = "<name>",
                distributionPolicyId = "<distributionPolicyId>",
                labels = new
                {
                    key = new { },
                },
                exceptionPolicyId = "<exceptionPolicyId>",
            };

            Response response = client.UpsertQueue("<id>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("distributionPolicyId").ToString());
            Console.WriteLine(result.GetProperty("labels").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("exceptionPolicyId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpsertQueue_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            var data = new { };

            Response response = await client.UpsertQueueAsync("<id>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpsertQueue_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            var data = new
            {
                name = "<name>",
                distributionPolicyId = "<distributionPolicyId>",
                labels = new
                {
                    key = new { },
                },
                exceptionPolicyId = "<exceptionPolicyId>",
            };

            Response response = await client.UpsertQueueAsync("<id>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("distributionPolicyId").ToString());
            Console.WriteLine(result.GetProperty("labels").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("exceptionPolicyId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetQueue()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            Response response = client.GetQueue("<id>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetQueue_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            Response response = client.GetQueue("<id>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("distributionPolicyId").ToString());
            Console.WriteLine(result.GetProperty("labels").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("exceptionPolicyId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetQueue_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            Response response = await client.GetQueueAsync("<id>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetQueue_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            Response response = await client.GetQueueAsync("<id>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("distributionPolicyId").ToString());
            Console.WriteLine(result.GetProperty("labels").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("exceptionPolicyId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteQueue()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            Response response = client.DeleteQueue("<id>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteQueue_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            Response response = client.DeleteQueue("<id>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteQueue_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            Response response = await client.DeleteQueueAsync("<id>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteQueue_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            Response response = await client.DeleteQueueAsync("<id>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetClassificationPolicies()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            foreach (var item in client.GetClassificationPolicies(1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetClassificationPolicies_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            foreach (var item in client.GetClassificationPolicies(1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("classificationPolicy").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("classificationPolicy").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("classificationPolicy").GetProperty("fallbackQueueId").ToString());
                Console.WriteLine(result.GetProperty("classificationPolicy").GetProperty("queueSelectors")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("classificationPolicy").GetProperty("prioritizationRule").GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("classificationPolicy").GetProperty("workerSelectors")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetClassificationPolicies_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            await foreach (var item in client.GetClassificationPoliciesAsync(1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetClassificationPolicies_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            await foreach (var item in client.GetClassificationPoliciesAsync(1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("classificationPolicy").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("classificationPolicy").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("classificationPolicy").GetProperty("fallbackQueueId").ToString());
                Console.WriteLine(result.GetProperty("classificationPolicy").GetProperty("queueSelectors")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("classificationPolicy").GetProperty("prioritizationRule").GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("classificationPolicy").GetProperty("workerSelectors")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDistributionPolicies()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            foreach (var item in client.GetDistributionPolicies(1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDistributionPolicies_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            foreach (var item in client.GetDistributionPolicies(1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("distributionPolicy").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("distributionPolicy").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("distributionPolicy").GetProperty("offerExpiresAfterSeconds").ToString());
                Console.WriteLine(result.GetProperty("distributionPolicy").GetProperty("mode").GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("distributionPolicy").GetProperty("mode").GetProperty("minConcurrentOffers").ToString());
                Console.WriteLine(result.GetProperty("distributionPolicy").GetProperty("mode").GetProperty("maxConcurrentOffers").ToString());
                Console.WriteLine(result.GetProperty("distributionPolicy").GetProperty("mode").GetProperty("bypassSelectors").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDistributionPolicies_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            await foreach (var item in client.GetDistributionPoliciesAsync(1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDistributionPolicies_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            await foreach (var item in client.GetDistributionPoliciesAsync(1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("distributionPolicy").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("distributionPolicy").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("distributionPolicy").GetProperty("offerExpiresAfterSeconds").ToString());
                Console.WriteLine(result.GetProperty("distributionPolicy").GetProperty("mode").GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("distributionPolicy").GetProperty("mode").GetProperty("minConcurrentOffers").ToString());
                Console.WriteLine(result.GetProperty("distributionPolicy").GetProperty("mode").GetProperty("maxConcurrentOffers").ToString());
                Console.WriteLine(result.GetProperty("distributionPolicy").GetProperty("mode").GetProperty("bypassSelectors").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetExceptionPolicies()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            foreach (var item in client.GetExceptionPolicies(1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetExceptionPolicies_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            foreach (var item in client.GetExceptionPolicies(1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("exceptionPolicy").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("exceptionPolicy").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("exceptionPolicy").GetProperty("exceptionRules").GetProperty("<test>").GetProperty("trigger").GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("exceptionPolicy").GetProperty("exceptionRules").GetProperty("<test>").GetProperty("actions").GetProperty("<test>").GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetExceptionPolicies_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            await foreach (var item in client.GetExceptionPoliciesAsync(1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetExceptionPolicies_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            await foreach (var item in client.GetExceptionPoliciesAsync(1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("exceptionPolicy").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("exceptionPolicy").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("exceptionPolicy").GetProperty("exceptionRules").GetProperty("<test>").GetProperty("trigger").GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("exceptionPolicy").GetProperty("exceptionRules").GetProperty("<test>").GetProperty("actions").GetProperty("<test>").GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetQueues()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            foreach (var item in client.GetQueues(1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetQueues_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            foreach (var item in client.GetQueues(1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("queue").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("queue").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("queue").GetProperty("distributionPolicyId").ToString());
                Console.WriteLine(result.GetProperty("queue").GetProperty("labels").GetProperty("<test>").ToString());
                Console.WriteLine(result.GetProperty("queue").GetProperty("exceptionPolicyId").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetQueues_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            await foreach (var item in client.GetQueuesAsync(1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetQueues_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JobRouterAdministrationClient("<https://my-service.azure.com>", credential);

            await foreach (var item in client.GetQueuesAsync(1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("queue").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("queue").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("queue").GetProperty("distributionPolicyId").ToString());
                Console.WriteLine(result.GetProperty("queue").GetProperty("labels").GetProperty("<test>").ToString());
                Console.WriteLine(result.GetProperty("queue").GetProperty("exceptionPolicyId").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }
    }
}
