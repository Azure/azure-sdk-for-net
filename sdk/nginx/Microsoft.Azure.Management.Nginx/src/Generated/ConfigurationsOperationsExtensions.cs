// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Nginx
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ConfigurationsOperations.
    /// </summary>
    public static partial class ConfigurationsOperationsExtensions
    {
            /// <summary>
            /// List the Nginx configuration of given Nginx deployment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of targeted Nginx deployment
            /// </param>
            public static IPage<NginxConfiguration> List(this IConfigurationsOperations operations, string resourceGroupName, string deploymentName)
            {
                return operations.ListAsync(resourceGroupName, deploymentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List the Nginx configuration of given Nginx deployment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of targeted Nginx deployment
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NginxConfiguration>> ListAsync(this IConfigurationsOperations operations, string resourceGroupName, string deploymentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, deploymentName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the Nginx configuration of given Nginx deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of targeted Nginx deployment
            /// </param>
            /// <param name='configurationName'>
            /// The name of configuration, only 'default' is supported value due to the
            /// singleton of Nginx conf
            /// </param>
            public static NginxConfiguration Get(this IConfigurationsOperations operations, string resourceGroupName, string deploymentName, string configurationName)
            {
                return operations.GetAsync(resourceGroupName, deploymentName, configurationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the Nginx configuration of given Nginx deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of targeted Nginx deployment
            /// </param>
            /// <param name='configurationName'>
            /// The name of configuration, only 'default' is supported value due to the
            /// singleton of Nginx conf
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NginxConfiguration> GetAsync(this IConfigurationsOperations operations, string resourceGroupName, string deploymentName, string configurationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, deploymentName, configurationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update the Nginx configuration for given Nginx deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of targeted Nginx deployment
            /// </param>
            /// <param name='configurationName'>
            /// The name of configuration, only 'default' is supported value due to the
            /// singleton of Nginx conf
            /// </param>
            /// <param name='body'>
            /// The Nginx configuration
            /// </param>
            public static NginxConfiguration CreateOrUpdate(this IConfigurationsOperations operations, string resourceGroupName, string deploymentName, string configurationName, NginxConfiguration body = default(NginxConfiguration))
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, deploymentName, configurationName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update the Nginx configuration for given Nginx deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of targeted Nginx deployment
            /// </param>
            /// <param name='configurationName'>
            /// The name of configuration, only 'default' is supported value due to the
            /// singleton of Nginx conf
            /// </param>
            /// <param name='body'>
            /// The Nginx configuration
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NginxConfiguration> CreateOrUpdateAsync(this IConfigurationsOperations operations, string resourceGroupName, string deploymentName, string configurationName, NginxConfiguration body = default(NginxConfiguration), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, deploymentName, configurationName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Reset the Nginx configuration of given Nginx deployment to default
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of targeted Nginx deployment
            /// </param>
            /// <param name='configurationName'>
            /// The name of configuration, only 'default' is supported value due to the
            /// singleton of Nginx conf
            /// </param>
            public static void Delete(this IConfigurationsOperations operations, string resourceGroupName, string deploymentName, string configurationName)
            {
                operations.DeleteAsync(resourceGroupName, deploymentName, configurationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reset the Nginx configuration of given Nginx deployment to default
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of targeted Nginx deployment
            /// </param>
            /// <param name='configurationName'>
            /// The name of configuration, only 'default' is supported value due to the
            /// singleton of Nginx conf
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IConfigurationsOperations operations, string resourceGroupName, string deploymentName, string configurationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, deploymentName, configurationName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create or update the Nginx configuration for given Nginx deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of targeted Nginx deployment
            /// </param>
            /// <param name='configurationName'>
            /// The name of configuration, only 'default' is supported value due to the
            /// singleton of Nginx conf
            /// </param>
            /// <param name='body'>
            /// The Nginx configuration
            /// </param>
            public static NginxConfiguration BeginCreateOrUpdate(this IConfigurationsOperations operations, string resourceGroupName, string deploymentName, string configurationName, NginxConfiguration body = default(NginxConfiguration))
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, deploymentName, configurationName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update the Nginx configuration for given Nginx deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of targeted Nginx deployment
            /// </param>
            /// <param name='configurationName'>
            /// The name of configuration, only 'default' is supported value due to the
            /// singleton of Nginx conf
            /// </param>
            /// <param name='body'>
            /// The Nginx configuration
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NginxConfiguration> BeginCreateOrUpdateAsync(this IConfigurationsOperations operations, string resourceGroupName, string deploymentName, string configurationName, NginxConfiguration body = default(NginxConfiguration), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, deploymentName, configurationName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Reset the Nginx configuration of given Nginx deployment to default
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of targeted Nginx deployment
            /// </param>
            /// <param name='configurationName'>
            /// The name of configuration, only 'default' is supported value due to the
            /// singleton of Nginx conf
            /// </param>
            public static void BeginDelete(this IConfigurationsOperations operations, string resourceGroupName, string deploymentName, string configurationName)
            {
                operations.BeginDeleteAsync(resourceGroupName, deploymentName, configurationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reset the Nginx configuration of given Nginx deployment to default
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of targeted Nginx deployment
            /// </param>
            /// <param name='configurationName'>
            /// The name of configuration, only 'default' is supported value due to the
            /// singleton of Nginx conf
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IConfigurationsOperations operations, string resourceGroupName, string deploymentName, string configurationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, deploymentName, configurationName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List the Nginx configuration of given Nginx deployment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<NginxConfiguration> ListNext(this IConfigurationsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List the Nginx configuration of given Nginx deployment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NginxConfiguration>> ListNextAsync(this IConfigurationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
