// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Nginx
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CertificatesOperations.
    /// </summary>
    public static partial class CertificatesOperationsExtensions
    {
            /// <summary>
            /// Get a certificate of given Nginx deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of targeted Nginx deployment
            /// </param>
            /// <param name='certificateName'>
            /// The name of certificate
            /// </param>
            public static NginxCertificate Get(this ICertificatesOperations operations, string resourceGroupName, string deploymentName, string certificateName)
            {
                return operations.GetAsync(resourceGroupName, deploymentName, certificateName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a certificate of given Nginx deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of targeted Nginx deployment
            /// </param>
            /// <param name='certificateName'>
            /// The name of certificate
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NginxCertificate> GetAsync(this ICertificatesOperations operations, string resourceGroupName, string deploymentName, string certificateName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, deploymentName, certificateName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update the Nginx certificates for given Nginx deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of targeted Nginx deployment
            /// </param>
            /// <param name='certificateName'>
            /// The name of certificate
            /// </param>
            /// <param name='body'>
            /// The certificate
            /// </param>
            public static NginxCertificate CreateOrUpdate(this ICertificatesOperations operations, string resourceGroupName, string deploymentName, string certificateName, NginxCertificate body = default(NginxCertificate))
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, deploymentName, certificateName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update the Nginx certificates for given Nginx deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of targeted Nginx deployment
            /// </param>
            /// <param name='certificateName'>
            /// The name of certificate
            /// </param>
            /// <param name='body'>
            /// The certificate
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NginxCertificate> CreateOrUpdateAsync(this ICertificatesOperations operations, string resourceGroupName, string deploymentName, string certificateName, NginxCertificate body = default(NginxCertificate), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, deploymentName, certificateName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a certificate from the nginx deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of targeted Nginx deployment
            /// </param>
            /// <param name='certificateName'>
            /// The name of certificate
            /// </param>
            public static void Delete(this ICertificatesOperations operations, string resourceGroupName, string deploymentName, string certificateName)
            {
                operations.DeleteAsync(resourceGroupName, deploymentName, certificateName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a certificate from the nginx deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of targeted Nginx deployment
            /// </param>
            /// <param name='certificateName'>
            /// The name of certificate
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ICertificatesOperations operations, string resourceGroupName, string deploymentName, string certificateName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, deploymentName, certificateName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List all certificates of given Nginx deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of targeted Nginx deployment
            /// </param>
            public static IPage<NginxCertificate> List(this ICertificatesOperations operations, string resourceGroupName, string deploymentName)
            {
                return operations.ListAsync(resourceGroupName, deploymentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all certificates of given Nginx deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of targeted Nginx deployment
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NginxCertificate>> ListAsync(this ICertificatesOperations operations, string resourceGroupName, string deploymentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, deploymentName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update the Nginx certificates for given Nginx deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of targeted Nginx deployment
            /// </param>
            /// <param name='certificateName'>
            /// The name of certificate
            /// </param>
            /// <param name='body'>
            /// The certificate
            /// </param>
            public static NginxCertificate BeginCreateOrUpdate(this ICertificatesOperations operations, string resourceGroupName, string deploymentName, string certificateName, NginxCertificate body = default(NginxCertificate))
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, deploymentName, certificateName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update the Nginx certificates for given Nginx deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of targeted Nginx deployment
            /// </param>
            /// <param name='certificateName'>
            /// The name of certificate
            /// </param>
            /// <param name='body'>
            /// The certificate
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NginxCertificate> BeginCreateOrUpdateAsync(this ICertificatesOperations operations, string resourceGroupName, string deploymentName, string certificateName, NginxCertificate body = default(NginxCertificate), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, deploymentName, certificateName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a certificate from the nginx deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of targeted Nginx deployment
            /// </param>
            /// <param name='certificateName'>
            /// The name of certificate
            /// </param>
            public static void BeginDelete(this ICertificatesOperations operations, string resourceGroupName, string deploymentName, string certificateName)
            {
                operations.BeginDeleteAsync(resourceGroupName, deploymentName, certificateName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a certificate from the nginx deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of targeted Nginx deployment
            /// </param>
            /// <param name='certificateName'>
            /// The name of certificate
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this ICertificatesOperations operations, string resourceGroupName, string deploymentName, string certificateName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, deploymentName, certificateName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List all certificates of given Nginx deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<NginxCertificate> ListNext(this ICertificatesOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all certificates of given Nginx deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NginxCertificate>> ListNextAsync(this ICertificatesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
