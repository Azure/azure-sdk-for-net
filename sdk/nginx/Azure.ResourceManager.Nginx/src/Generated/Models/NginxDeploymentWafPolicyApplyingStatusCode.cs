// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Nginx.Models
{
    /// <summary> Machine readable code indicating the applying status code of a WAF Policy. </summary>
    public readonly partial struct NginxDeploymentWafPolicyApplyingStatusCode : IEquatable<NginxDeploymentWafPolicyApplyingStatusCode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="NginxDeploymentWafPolicyApplyingStatusCode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public NginxDeploymentWafPolicyApplyingStatusCode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotAppliedValue = "NotApplied";
        private const string ApplyingValue = "Applying";
        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";
        private const string RemovingValue = "Removing";

        /// <summary> The policy is not referenced in the nginx config and not applied. </summary>
        public static NginxDeploymentWafPolicyApplyingStatusCode NotApplied { get; } = new NginxDeploymentWafPolicyApplyingStatusCode(NotAppliedValue);
        /// <summary> The policy is referenced in the nginx config and is applying. </summary>
        public static NginxDeploymentWafPolicyApplyingStatusCode Applying { get; } = new NginxDeploymentWafPolicyApplyingStatusCode(ApplyingValue);
        /// <summary> The policy is referenced in the nginx config and that config has been successfully applied. </summary>
        public static NginxDeploymentWafPolicyApplyingStatusCode Succeeded { get; } = new NginxDeploymentWafPolicyApplyingStatusCode(SucceededValue);
        /// <summary> The policy is referenced in the nginx config and that config failed to apply. </summary>
        public static NginxDeploymentWafPolicyApplyingStatusCode Failed { get; } = new NginxDeploymentWafPolicyApplyingStatusCode(FailedValue);
        /// <summary> The policy is now not referenced in the nginx config and its being removed from the applied nginx config. </summary>
        public static NginxDeploymentWafPolicyApplyingStatusCode Removing { get; } = new NginxDeploymentWafPolicyApplyingStatusCode(RemovingValue);
        /// <summary> Determines if two <see cref="NginxDeploymentWafPolicyApplyingStatusCode"/> values are the same. </summary>
        public static bool operator ==(NginxDeploymentWafPolicyApplyingStatusCode left, NginxDeploymentWafPolicyApplyingStatusCode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="NginxDeploymentWafPolicyApplyingStatusCode"/> values are not the same. </summary>
        public static bool operator !=(NginxDeploymentWafPolicyApplyingStatusCode left, NginxDeploymentWafPolicyApplyingStatusCode right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="NginxDeploymentWafPolicyApplyingStatusCode"/>. </summary>
        public static implicit operator NginxDeploymentWafPolicyApplyingStatusCode(string value) => new NginxDeploymentWafPolicyApplyingStatusCode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is NginxDeploymentWafPolicyApplyingStatusCode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(NginxDeploymentWafPolicyApplyingStatusCode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
