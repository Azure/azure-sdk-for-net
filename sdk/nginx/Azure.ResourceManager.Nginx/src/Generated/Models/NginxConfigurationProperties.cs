// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.Nginx.Models
{
    /// <summary> The NginxConfigurationProperties. </summary>
    public partial class NginxConfigurationProperties
    {
        /// <summary> Initializes a new instance of <see cref="NginxConfigurationProperties"/>. </summary>
        public NginxConfigurationProperties()
        {
            Files = new ChangeTrackingList<NginxConfigurationFile>();
            ProtectedFiles = new ChangeTrackingList<NginxConfigurationFile>();
        }

        /// <summary> Initializes a new instance of <see cref="NginxConfigurationProperties"/>. </summary>
        /// <param name="provisioningState"></param>
        /// <param name="files"></param>
        /// <param name="protectedFiles"></param>
        /// <param name="package"></param>
        /// <param name="rootFile"></param>
        internal NginxConfigurationProperties(ProvisioningState? provisioningState, IList<NginxConfigurationFile> files, IList<NginxConfigurationFile> protectedFiles, NginxConfigurationPackage package, string rootFile)
        {
            ProvisioningState = provisioningState;
            Files = files;
            ProtectedFiles = protectedFiles;
            Package = package;
            RootFile = rootFile;
        }

        /// <summary> Gets the provisioning state. </summary>
        public ProvisioningState? ProvisioningState { get; }
        /// <summary> Gets the files. </summary>
        public IList<NginxConfigurationFile> Files { get; }
        /// <summary> Gets the protected files. </summary>
        public IList<NginxConfigurationFile> ProtectedFiles { get; }
        /// <summary> Gets or sets the package. </summary>
        internal NginxConfigurationPackage Package { get; set; }
        /// <summary> Gets or sets the package data. </summary>
        public string PackageData
        {
            get => Package is null ? default : Package.Data;
            set
            {
                if (Package is null)
                    Package = new NginxConfigurationPackage();
                Package.Data = value;
            }
        }

        /// <summary> Gets or sets the root file. </summary>
        public string RootFile { get; set; }
    }
}
