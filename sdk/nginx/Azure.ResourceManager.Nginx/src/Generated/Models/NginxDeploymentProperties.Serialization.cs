// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Nginx.Models
{
    public partial class NginxDeploymentProperties : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(ManagedResourceGroup))
            {
                writer.WritePropertyName("managedResourceGroup"u8);
                writer.WriteStringValue(ManagedResourceGroup);
            }
            if (Core.Optional.IsDefined(NetworkProfile))
            {
                writer.WritePropertyName("networkProfile"u8);
                writer.WriteObjectValue(NetworkProfile);
            }
            if (Core.Optional.IsDefined(EnableDiagnosticsSupport))
            {
                writer.WritePropertyName("enableDiagnosticsSupport"u8);
                writer.WriteBooleanValue(EnableDiagnosticsSupport.Value);
            }
            if (Core.Optional.IsDefined(Logging))
            {
                writer.WritePropertyName("logging"u8);
                writer.WriteObjectValue(Logging);
            }
            writer.WriteEndObject();
        }

        internal static NginxDeploymentProperties DeserializeNginxDeploymentProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<ProvisioningState> provisioningState = default;
            Core.Optional<string> nginxVersion = default;
            Core.Optional<string> managedResourceGroup = default;
            Core.Optional<NginxNetworkProfile> networkProfile = default;
            Core.Optional<string> ipAddress = default;
            Core.Optional<bool> enableDiagnosticsSupport = default;
            Core.Optional<NginxLogging> logging = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new ProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("nginxVersion"u8))
                {
                    nginxVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("managedResourceGroup"u8))
                {
                    managedResourceGroup = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("networkProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    networkProfile = NginxNetworkProfile.DeserializeNginxNetworkProfile(property.Value);
                    continue;
                }
                if (property.NameEquals("ipAddress"u8))
                {
                    ipAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("enableDiagnosticsSupport"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableDiagnosticsSupport = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("logging"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    logging = NginxLogging.DeserializeNginxLogging(property.Value);
                    continue;
                }
            }
            return new NginxDeploymentProperties(Core.Optional.ToNullable(provisioningState), nginxVersion.Value, managedResourceGroup.Value, networkProfile.Value, ipAddress.Value, Core.Optional.ToNullable(enableDiagnosticsSupport), logging.Value);
        }
    }
}
