// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Nginx.Models
{
    public partial class NginxConfigurationProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(Files))
            {
                writer.WritePropertyName("files");
                writer.WriteStartArray();
                foreach (var item in Files)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ProtectedFiles))
            {
                writer.WritePropertyName("protectedFiles");
                writer.WriteStartArray();
                foreach (var item in ProtectedFiles)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Package))
            {
                writer.WritePropertyName("package");
                writer.WriteObjectValue(Package);
            }
            if (Optional.IsDefined(RootFile))
            {
                writer.WritePropertyName("rootFile");
                writer.WriteStringValue(RootFile);
            }
            writer.WriteEndObject();
        }

        internal static NginxConfigurationProperties DeserializeNginxConfigurationProperties(JsonElement element)
        {
            Optional<ProvisioningState> provisioningState = default;
            Optional<IList<NginxConfigurationFile>> files = default;
            Optional<IList<NginxConfigurationFile>> protectedFiles = default;
            Optional<NginxConfigurationPackage> package = default;
            Optional<string> rootFile = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("provisioningState"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    provisioningState = new ProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("files"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<NginxConfigurationFile> array = new List<NginxConfigurationFile>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(NginxConfigurationFile.DeserializeNginxConfigurationFile(item));
                    }
                    files = array;
                    continue;
                }
                if (property.NameEquals("protectedFiles"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<NginxConfigurationFile> array = new List<NginxConfigurationFile>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(NginxConfigurationFile.DeserializeNginxConfigurationFile(item));
                    }
                    protectedFiles = array;
                    continue;
                }
                if (property.NameEquals("package"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    package = NginxConfigurationPackage.DeserializeNginxConfigurationPackage(property.Value);
                    continue;
                }
                if (property.NameEquals("rootFile"))
                {
                    rootFile = property.Value.GetString();
                    continue;
                }
            }
            return new NginxConfigurationProperties(Optional.ToNullable(provisioningState), Optional.ToList(files), Optional.ToList(protectedFiles), package.Value, rootFile.Value);
        }
    }
}
