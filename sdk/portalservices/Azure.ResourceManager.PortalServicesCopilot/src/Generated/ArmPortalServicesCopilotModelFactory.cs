// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.PortalServicesCopilot;

namespace Azure.ResourceManager.PortalServicesCopilot.Models
{
    /// <summary> A factory class for creating instances of the models for mocking. </summary>
    public static partial class ArmPortalServicesCopilotModelFactory
    {

        /// <summary> The copilot settings tenant resource definition. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="type"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="name"> The default copilot settings, applying to entire tenant. </param>
        /// <returns> A new <see cref="PortalServicesCopilot.PortalServicesCopilotSettingData"/> instance for mocking. </returns>
        public static PortalServicesCopilotSettingData PortalServicesCopilotSettingData(ResourceIdentifier id = default, string @type = default, SystemData systemData = default, PortalServicesCopilotSettingsProperties properties = default, string name = default)
        {
            return new PortalServicesCopilotSettingData(
                id,
                @type,
                systemData,
                additionalBinaryDataProperties: null,
                properties,
                name);
        }

        /// <summary> The Copilot Settings properties. </summary>
        /// <param name="accessControlEnabled"> Boolean indicating if role-based access control is enabled for copilot in this tenant. </param>
        /// <param name="provisioningState"> The status of the last provisioning operation performed on the resource. </param>
        /// <returns> A new <see cref="Models.PortalServicesCopilotSettingsProperties"/> instance for mocking. </returns>
        public static PortalServicesCopilotSettingsProperties PortalServicesCopilotSettingsProperties(bool accessControlEnabled = default, PortalServicesResourceProvisioningState? provisioningState = default)
        {
            return new PortalServicesCopilotSettingsProperties(accessControlEnabled, provisioningState, additionalBinaryDataProperties: null);
        }

        /// <summary> The type used for update operations of the CopilotSettingsResource. </summary>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="Models.CopilotSettingsResourceUpdate"/> instance for mocking. </returns>
        public static CopilotSettingsResourceUpdate CopilotSettingsResourceUpdate(CopilotSettingsResourceUpdateProperties properties = default)
        {
            return new CopilotSettingsResourceUpdate(properties, additionalBinaryDataProperties: null);
        }

        /// <summary> The updatable properties of the CopilotSettingsResource. </summary>
        /// <param name="accessControlEnabled"> Boolean indicating if role-based access control is enabled for copilot in this tenant. </param>
        /// <returns> A new <see cref="Models.CopilotSettingsResourceUpdateProperties"/> instance for mocking. </returns>
        public static CopilotSettingsResourceUpdateProperties CopilotSettingsResourceUpdateProperties(bool? accessControlEnabled = default)
        {
            return new CopilotSettingsResourceUpdateProperties(accessControlEnabled, additionalBinaryDataProperties: null);
        }
    }
}
