// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.PortalServicesCopilot.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.PortalServicesCopilot
{
    /// <summary>
    /// A Class representing a CopilotSettingsResource along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier"/> you can construct a <see cref="CopilotSettingsResource"/>
    /// from an instance of <see cref="ArmClient"/> using the GetCopilotSettingsResource method.
    /// Otherwise you can get one from its parent resource <see cref="TenantResource"/> using the GetCopilotSettingsResource method.
    /// </summary>
    public partial class CopilotSettingsResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="CopilotSettingsResource"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier()
        {
            var resourceId = $"/providers/Microsoft.PortalServices/copilotSettings/default";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _copilotSettingsResourceCopilotSettingsClientDiagnostics;
        private readonly CopilotSettingsRestOperations _copilotSettingsResourceCopilotSettingsRestClient;
        private readonly CopilotSettingsResourceData _data;

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.PortalServices/copilotSettings";

        /// <summary> Initializes a new instance of the <see cref="CopilotSettingsResource"/> class for mocking. </summary>
        protected CopilotSettingsResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="CopilotSettingsResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal CopilotSettingsResource(ArmClient client, CopilotSettingsResourceData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="CopilotSettingsResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal CopilotSettingsResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _copilotSettingsResourceCopilotSettingsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.PortalServicesCopilot", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string copilotSettingsResourceCopilotSettingsApiVersion);
            _copilotSettingsResourceCopilotSettingsRestClient = new CopilotSettingsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, copilotSettingsResourceCopilotSettingsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual CopilotSettingsResourceData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary>
        /// Get a CopilotSettingsResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.PortalServices/copilotSettings/default</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CopilotSettingsResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="CopilotSettingsResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CopilotSettingsResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _copilotSettingsResourceCopilotSettingsClientDiagnostics.CreateScope("CopilotSettingsResource.Get");
            scope.Start();
            try
            {
                var response = await _copilotSettingsResourceCopilotSettingsRestClient.GetAsync(cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new CopilotSettingsResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a CopilotSettingsResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.PortalServices/copilotSettings/default</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CopilotSettingsResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="CopilotSettingsResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CopilotSettingsResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _copilotSettingsResourceCopilotSettingsClientDiagnostics.CreateScope("CopilotSettingsResource.Get");
            scope.Start();
            try
            {
                var response = _copilotSettingsResourceCopilotSettingsRestClient.Get(cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new CopilotSettingsResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a CopilotSettingsResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.PortalServices/copilotSettings/default</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CopilotSettingsResource_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="CopilotSettingsResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _copilotSettingsResourceCopilotSettingsClientDiagnostics.CreateScope("CopilotSettingsResource.Delete");
            scope.Start();
            try
            {
                var response = await _copilotSettingsResourceCopilotSettingsRestClient.DeleteAsync(cancellationToken).ConfigureAwait(false);
                var uri = _copilotSettingsResourceCopilotSettingsRestClient.CreateDeleteRequestUri();
                var rehydrationToken = NextLinkOperationImplementation.GetRehydrationToken(RequestMethod.Delete, uri.ToUri(), uri.ToString(), "None", null, OperationFinalStateVia.OriginalUri.ToString());
                var operation = new PortalServicesCopilotArmOperation(response, rehydrationToken);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a CopilotSettingsResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.PortalServices/copilotSettings/default</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CopilotSettingsResource_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="CopilotSettingsResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation Delete(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _copilotSettingsResourceCopilotSettingsClientDiagnostics.CreateScope("CopilotSettingsResource.Delete");
            scope.Start();
            try
            {
                var response = _copilotSettingsResourceCopilotSettingsRestClient.Delete(cancellationToken);
                var uri = _copilotSettingsResourceCopilotSettingsRestClient.CreateDeleteRequestUri();
                var rehydrationToken = NextLinkOperationImplementation.GetRehydrationToken(RequestMethod.Delete, uri.ToUri(), uri.ToString(), "None", null, OperationFinalStateVia.OriginalUri.ToString());
                var operation = new PortalServicesCopilotArmOperation(response, rehydrationToken);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update a CopilotSettingsResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.PortalServices/copilotSettings/default</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CopilotSettingsResource_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="CopilotSettingsResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="patch"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="patch"/> is null. </exception>
        public virtual async Task<Response<CopilotSettingsResource>> UpdateAsync(CopilotSettingsResourcePatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _copilotSettingsResourceCopilotSettingsClientDiagnostics.CreateScope("CopilotSettingsResource.Update");
            scope.Start();
            try
            {
                var response = await _copilotSettingsResourceCopilotSettingsRestClient.UpdateAsync(patch, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new CopilotSettingsResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update a CopilotSettingsResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.PortalServices/copilotSettings/default</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CopilotSettingsResource_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="CopilotSettingsResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="patch"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="patch"/> is null. </exception>
        public virtual Response<CopilotSettingsResource> Update(CopilotSettingsResourcePatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _copilotSettingsResourceCopilotSettingsClientDiagnostics.CreateScope("CopilotSettingsResource.Update");
            scope.Start();
            try
            {
                var response = _copilotSettingsResourceCopilotSettingsRestClient.Update(patch, cancellationToken);
                return Response.FromValue(new CopilotSettingsResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a CopilotSettingsResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.PortalServices/copilotSettings/default</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CopilotSettingsResource_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="CopilotSettingsResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<CopilotSettingsResource>> CreateOrUpdateAsync(WaitUntil waitUntil, CopilotSettingsResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _copilotSettingsResourceCopilotSettingsClientDiagnostics.CreateScope("CopilotSettingsResource.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _copilotSettingsResourceCopilotSettingsRestClient.CreateOrUpdateAsync(data, cancellationToken).ConfigureAwait(false);
                var uri = _copilotSettingsResourceCopilotSettingsRestClient.CreateCreateOrUpdateRequestUri(data);
                var rehydrationToken = NextLinkOperationImplementation.GetRehydrationToken(RequestMethod.Put, uri.ToUri(), uri.ToString(), "None", null, OperationFinalStateVia.OriginalUri.ToString());
                var operation = new PortalServicesCopilotArmOperation<CopilotSettingsResource>(Response.FromValue(new CopilotSettingsResource(Client, response), response.GetRawResponse()), rehydrationToken);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a CopilotSettingsResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.PortalServices/copilotSettings/default</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CopilotSettingsResource_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="CopilotSettingsResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<CopilotSettingsResource> CreateOrUpdate(WaitUntil waitUntil, CopilotSettingsResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _copilotSettingsResourceCopilotSettingsClientDiagnostics.CreateScope("CopilotSettingsResource.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _copilotSettingsResourceCopilotSettingsRestClient.CreateOrUpdate(data, cancellationToken);
                var uri = _copilotSettingsResourceCopilotSettingsRestClient.CreateCreateOrUpdateRequestUri(data);
                var rehydrationToken = NextLinkOperationImplementation.GetRehydrationToken(RequestMethod.Put, uri.ToUri(), uri.ToString(), "None", null, OperationFinalStateVia.OriginalUri.ToString());
                var operation = new PortalServicesCopilotArmOperation<CopilotSettingsResource>(Response.FromValue(new CopilotSettingsResource(Client, response), response.GetRawResponse()), rehydrationToken);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
