<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetSecretAsync(String,RequestContext)">
<example>
This sample shows how to call GetSecretAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new WidgetManagerClient("<vaultBaseUrl>", credential);

Response response = await client.GetSecretAsync("<secretName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("contentType").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("kid").ToString());
Console.WriteLine(result.GetProperty("managed").ToString());
]]></code>
</example>
<remarks>
The GET operation is applicable to any secret stored in Azure Key Vault. This operation requires the secrets/get permission.

Below is the JSON schema for the response payload.

Response Body:

Schema for <c>SecretBundle</c>:
<code>{
  value: string, # Optional. The secret value.
  id: string, # Optional. The secret id.
  contentType: string, # Optional. The content type of the secret.
  tags: Dictionary&lt;string, string&gt;, # Optional. Application specific metadata in the form of key-value pairs.
  kid: string, # Optional. If this is a secret backing a KV certificate, then this field specifies the corresponding key backing the KV certificate.
  managed: boolean, # Optional. True if the secret&apos;s lifetime is managed by key vault. If this is a secret backing a certificate, then managed will be true.
}
</code>

</remarks>
    </member>
    <member name="GetSecret(String,RequestContext)">
<example>
This sample shows how to call GetSecret with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new WidgetManagerClient("<vaultBaseUrl>", credential);

Response response = client.GetSecret("<secretName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("contentType").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("kid").ToString());
Console.WriteLine(result.GetProperty("managed").ToString());
]]></code>
</example>
<remarks>
The GET operation is applicable to any secret stored in Azure Key Vault. This operation requires the secrets/get permission.

Below is the JSON schema for the response payload.

Response Body:

Schema for <c>SecretBundle</c>:
<code>{
  value: string, # Optional. The secret value.
  id: string, # Optional. The secret id.
  contentType: string, # Optional. The content type of the secret.
  tags: Dictionary&lt;string, string&gt;, # Optional. Application specific metadata in the form of key-value pairs.
  kid: string, # Optional. If this is a secret backing a KV certificate, then this field specifies the corresponding key backing the KV certificate.
  managed: boolean, # Optional. True if the secret&apos;s lifetime is managed by key vault. If this is a secret backing a certificate, then managed will be true.
}
</code>

</remarks>
    </member>
  </members>
</doc>