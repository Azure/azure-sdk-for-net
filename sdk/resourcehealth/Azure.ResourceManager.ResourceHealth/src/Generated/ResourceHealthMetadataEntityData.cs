// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.ResourceHealth.Models;

namespace Azure.ResourceManager.ResourceHealth
{
    /// <summary>
    /// A class representing the ResourceHealthMetadataEntity data model.
    /// The metadata entity contract.
    /// </summary>
    public partial class ResourceHealthMetadataEntityData : ResourceData
    {
        /// <summary> Initializes a new instance of <see cref="ResourceHealthMetadataEntityData"/>. </summary>
        internal ResourceHealthMetadataEntityData()
        {
            DependsOn = new ChangeTrackingList<string>();
            ApplicableScenarios = new ChangeTrackingList<MetadataEntityScenario>();
            SupportedValues = new ChangeTrackingList<MetadataSupportedValueDetail>();
        }

        /// <summary> Initializes a new instance of <see cref="ResourceHealthMetadataEntityData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="displayName"> The display name. </param>
        /// <param name="dependsOn"> The list of keys on which this entity depends on. </param>
        /// <param name="applicableScenarios"> The list of scenarios applicable to this metadata entity. </param>
        /// <param name="supportedValues"> The list of supported values. </param>
        internal ResourceHealthMetadataEntityData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, string displayName, IReadOnlyList<string> dependsOn, IReadOnlyList<MetadataEntityScenario> applicableScenarios, IReadOnlyList<MetadataSupportedValueDetail> supportedValues) : base(id, name, resourceType, systemData)
        {
            DisplayName = displayName;
            DependsOn = dependsOn;
            ApplicableScenarios = applicableScenarios;
            SupportedValues = supportedValues;
        }

        /// <summary> The display name. </summary>
        public string DisplayName { get; }
        /// <summary> The list of keys on which this entity depends on. </summary>
        public IReadOnlyList<string> DependsOn { get; }
        /// <summary> The list of scenarios applicable to this metadata entity. </summary>
        public IReadOnlyList<MetadataEntityScenario> ApplicableScenarios { get; }
        /// <summary> The list of supported values. </summary>
        public IReadOnlyList<MetadataSupportedValueDetail> SupportedValues { get; }
    }
}
