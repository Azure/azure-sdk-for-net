// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.ResourceHealth.Models;

namespace Azure.ResourceManager.ResourceHealth
{
    /// <summary> A class representing the EmergingIssuesGetResult data model. </summary>
    public partial class EmergingIssuesGetResultData : ResourceData
    {
        /// <summary> Initializes a new instance of EmergingIssuesGetResultData. </summary>
        internal EmergingIssuesGetResultData()
        {
            StatusBanners = new ChangeTrackingList<StatusBanner>();
            StatusActiveEvents = new ChangeTrackingList<StatusActiveEvent>();
        }

        /// <summary> Initializes a new instance of EmergingIssuesGetResultData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="refreshTimestamp"> Timestamp for when last time refreshed for ongoing emerging issue. </param>
        /// <param name="statusBanners"> The list of emerging issues of banner type. </param>
        /// <param name="statusActiveEvents"> The list of emerging issues of active event type. </param>
        internal EmergingIssuesGetResultData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, DateTimeOffset? refreshTimestamp, IReadOnlyList<StatusBanner> statusBanners, IReadOnlyList<StatusActiveEvent> statusActiveEvents) : base(id, name, resourceType, systemData)
        {
            RefreshTimestamp = refreshTimestamp;
            StatusBanners = statusBanners;
            StatusActiveEvents = statusActiveEvents;
        }

        /// <summary> Timestamp for when last time refreshed for ongoing emerging issue. </summary>
        public DateTimeOffset? RefreshTimestamp { get; }
        /// <summary> The list of emerging issues of banner type. </summary>
        public IReadOnlyList<StatusBanner> StatusBanners { get; }
        /// <summary> The list of emerging issues of active event type. </summary>
        public IReadOnlyList<StatusActiveEvent> StatusActiveEvents { get; }
    }
}
