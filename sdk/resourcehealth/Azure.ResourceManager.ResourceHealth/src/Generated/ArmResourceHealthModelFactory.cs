// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.ResourceHealth;

namespace Azure.ResourceManager.ResourceHealth.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmResourceHealthModelFactory
    {
        /// <summary> Initializes a new instance of AvailabilityStatusData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location"> Azure Resource Manager geo location of the resource. </param>
        /// <param name="properties"> Properties of availability state. </param>
        /// <returns> A new <see cref="ResourceHealth.AvailabilityStatusData"/> instance for mocking. </returns>
        public static AvailabilityStatusData AvailabilityStatusData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AzureLocation? location = null, AvailabilityStatusProperties properties = null)
        {
            return new AvailabilityStatusData(id, name, resourceType, systemData, location, properties);
        }

        /// <summary> Initializes a new instance of AvailabilityStatusProperties. </summary>
        /// <param name="availabilityState"> Availability status of the resource. When it is null, this availabilityStatus object represents an availability impacting event. </param>
        /// <param name="title"> Title description of the availability status. </param>
        /// <param name="summary"> Summary description of the availability status. </param>
        /// <param name="detailedStatus"> Details of the availability status. </param>
        /// <param name="reasonType"> When the resource&apos;s availabilityState is Unavailable, it describes where the health impacting event was originated. Examples are planned, unplanned, user initiated or an outage etc. </param>
        /// <param name="context"> When an event is created, it can either be triggered by a customer or the platform of the resource and this field will illustrate that. This field is connected to the category field in this object. </param>
        /// <param name="category"> When a context field is set to Platform, this field will reflect if the event was planned or unplanned. If the context field does not have a value of Platform, then this field will be ignored. </param>
        /// <param name="rootCauseAttributionOn"> When the resource&apos;s availabilityState is Unavailable, it provides the Timestamp for when the health impacting event was received. </param>
        /// <param name="healthEventType"> In case of an availability impacting event, it describes when the health impacting event was originated. Examples are Lifecycle, Downtime, Fault Analysis etc. </param>
        /// <param name="healthEventCause"> In case of an availability impacting event, it describes where the health impacting event was originated. Examples are PlatformInitiated, UserInitiated etc. </param>
        /// <param name="healthEventCategory"> In case of an availability impacting event, it describes the category of a PlatformInitiated health impacting event. Examples are Planned, Unplanned etc. </param>
        /// <param name="healthEventId"> It is a unique Id that identifies the event. </param>
        /// <param name="resolutionETA"> When the resource&apos;s availabilityState is Unavailable and the reasonType is not User Initiated, it provides the date and time for when the issue is expected to be resolved. </param>
        /// <param name="occuredOn"> Timestamp for when last change in health status occurred. </param>
        /// <param name="reasonChronicity"> Chronicity of the availability transition. </param>
        /// <param name="reportedOn"> Timestamp for when the health was last checked. </param>
        /// <param name="recentlyResolved"> An annotation describing a change in the availabilityState to Available from Unavailable with a reasonType of type Unplanned. </param>
        /// <param name="recommendedActions"> Lists actions the user can take based on the current availabilityState of the resource. </param>
        /// <param name="serviceImpactingEvents"> Lists the service impacting events that may be affecting the health of the resource. </param>
        /// <returns> A new <see cref="Models.AvailabilityStatusProperties"/> instance for mocking. </returns>
        public static AvailabilityStatusProperties AvailabilityStatusProperties(AvailabilityStateValue? availabilityState = null, string title = null, string summary = null, string detailedStatus = null, string reasonType = null, string context = null, string category = null, DateTimeOffset? rootCauseAttributionOn = null, string healthEventType = null, string healthEventCause = null, string healthEventCategory = null, string healthEventId = null, DateTimeOffset? resolutionETA = null, DateTimeOffset? occuredOn = null, ReasonChronicityType? reasonChronicity = null, DateTimeOffset? reportedOn = null, AvailabilityStatusPropertiesRecentlyResolved recentlyResolved = null, IEnumerable<RecommendedAction> recommendedActions = null, IEnumerable<ServiceImpactingEvent> serviceImpactingEvents = null)
        {
            recommendedActions ??= new List<RecommendedAction>();
            serviceImpactingEvents ??= new List<ServiceImpactingEvent>();

            return new AvailabilityStatusProperties(availabilityState, title, summary, detailedStatus, reasonType, context, category, rootCauseAttributionOn, healthEventType, healthEventCause, healthEventCategory, healthEventId, resolutionETA, occuredOn, reasonChronicity, reportedOn, recentlyResolved, recommendedActions?.ToList(), serviceImpactingEvents?.ToList());
        }

        /// <summary> Initializes a new instance of AvailabilityStatusPropertiesRecentlyResolved. </summary>
        /// <param name="unavailableOccuredOn"> Timestamp for when the availabilityState changed to Unavailable. </param>
        /// <param name="resolvedOn"> Timestamp when the availabilityState changes to Available. </param>
        /// <param name="unavailableSummary"> Brief description of cause of the resource becoming unavailable. </param>
        /// <returns> A new <see cref="Models.AvailabilityStatusPropertiesRecentlyResolved"/> instance for mocking. </returns>
        public static AvailabilityStatusPropertiesRecentlyResolved AvailabilityStatusPropertiesRecentlyResolved(DateTimeOffset? unavailableOccuredOn = null, DateTimeOffset? resolvedOn = null, string unavailableSummary = null)
        {
            return new AvailabilityStatusPropertiesRecentlyResolved(unavailableOccuredOn, resolvedOn, unavailableSummary);
        }

        /// <summary> Initializes a new instance of RecommendedAction. </summary>
        /// <param name="action"> Recommended action. </param>
        /// <param name="actionUri"> Link to the action. </param>
        /// <param name="actionUrlText"> Substring of action, it describes which text should host the action url. </param>
        /// <returns> A new <see cref="Models.RecommendedAction"/> instance for mocking. </returns>
        public static RecommendedAction RecommendedAction(string action = null, Uri actionUri = null, string actionUrlText = null)
        {
            return new RecommendedAction(action, actionUri, actionUrlText);
        }

        /// <summary> Initializes a new instance of ServiceImpactingEvent. </summary>
        /// <param name="eventStartOn"> Timestamp for when the event started. </param>
        /// <param name="eventStatusLastModifiedOn"> Timestamp for when event was submitted/detected. </param>
        /// <param name="correlationId"> Correlation id for the event. </param>
        /// <param name="statusValue"> Status of the service impacting event. </param>
        /// <param name="incidentProperties"> Properties of the service impacting event. </param>
        /// <returns> A new <see cref="Models.ServiceImpactingEvent"/> instance for mocking. </returns>
        public static ServiceImpactingEvent ServiceImpactingEvent(DateTimeOffset? eventStartOn = null, DateTimeOffset? eventStatusLastModifiedOn = null, string correlationId = null, string statusValue = null, ServiceImpactingEventIncidentProperties incidentProperties = null)
        {
            return new ServiceImpactingEvent(eventStartOn, eventStatusLastModifiedOn, correlationId, statusValue != null ? new ServiceImpactingEventStatus(statusValue) : null, incidentProperties);
        }

        /// <summary> Initializes a new instance of ServiceImpactingEventIncidentProperties. </summary>
        /// <param name="title"> Title of the incident. </param>
        /// <param name="service"> Service impacted by the event. </param>
        /// <param name="region"> Region impacted by the event. </param>
        /// <param name="incidentType"> Type of Event. </param>
        /// <returns> A new <see cref="Models.ServiceImpactingEventIncidentProperties"/> instance for mocking. </returns>
        public static ServiceImpactingEventIncidentProperties ServiceImpactingEventIncidentProperties(string title = null, string service = null, string region = null, string incidentType = null)
        {
            return new ServiceImpactingEventIncidentProperties(title, service, region, incidentType);
        }

        /// <summary> Initializes a new instance of MetadataEntityData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="displayName"> The display name. </param>
        /// <param name="dependsOn"> The list of keys on which this entity depends on. </param>
        /// <param name="applicableScenarios"> The list of scenarios applicable to this metadata entity. </param>
        /// <param name="supportedValues"> The list of supported values. </param>
        /// <returns> A new <see cref="ResourceHealth.MetadataEntityData"/> instance for mocking. </returns>
        public static MetadataEntityData MetadataEntityData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string displayName = null, IEnumerable<string> dependsOn = null, IEnumerable<Scenario> applicableScenarios = null, IEnumerable<MetadataSupportedValueDetail> supportedValues = null)
        {
            dependsOn ??= new List<string>();
            applicableScenarios ??= new List<Scenario>();
            supportedValues ??= new List<MetadataSupportedValueDetail>();

            return new MetadataEntityData(id, name, resourceType, systemData, displayName, dependsOn?.ToList(), applicableScenarios?.ToList(), supportedValues?.ToList());
        }

        /// <summary> Initializes a new instance of MetadataSupportedValueDetail. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="displayName"> The display name. </param>
        /// <param name="resourceTypes"> The list of associated resource types. </param>
        /// <returns> A new <see cref="Models.MetadataSupportedValueDetail"/> instance for mocking. </returns>
        public static MetadataSupportedValueDetail MetadataSupportedValueDetail(string id = null, string displayName = null, IEnumerable<string> resourceTypes = null)
        {
            resourceTypes ??= new List<string>();

            return new MetadataSupportedValueDetail(id, displayName, resourceTypes?.ToList());
        }

        /// <summary> Initializes a new instance of EventImpactedResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="targetResourceType"> Resource type within Microsoft cloud. </param>
        /// <param name="targetResourceId"> Identity for resource within Microsoft cloud. </param>
        /// <param name="targetRegion"> Impacted resource region name. </param>
        /// <param name="info"> Additional information. </param>
        /// <returns> A new <see cref="ResourceHealth.EventImpactedResourceData"/> instance for mocking. </returns>
        public static EventImpactedResourceData EventImpactedResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string targetResourceType = null, string targetResourceId = null, string targetRegion = null, IEnumerable<KeyValueItem> info = null)
        {
            info ??= new List<KeyValueItem>();

            return new EventImpactedResourceData(id, name, resourceType, systemData, targetResourceType, targetResourceId, targetRegion, info?.ToList());
        }

        /// <summary> Initializes a new instance of KeyValueItem. </summary>
        /// <param name="key"> Key of tuple. </param>
        /// <param name="value"> Value of tuple. </param>
        /// <returns> A new <see cref="Models.KeyValueItem"/> instance for mocking. </returns>
        public static KeyValueItem KeyValueItem(string key = null, string value = null)
        {
            return new KeyValueItem(key, value);
        }

        /// <summary> Initializes a new instance of EventData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="eventType"> Type of event. </param>
        /// <param name="eventSource"> Source of event. </param>
        /// <param name="status"> Current status of event. </param>
        /// <param name="title"> Title text of event. </param>
        /// <param name="summary"> Summary text of event. </param>
        /// <param name="header"> Header text of event. </param>
        /// <param name="level"> Level of insight. </param>
        /// <param name="eventLevel"> Level of event. </param>
        /// <param name="externalIncidentId"> The id of the Incident. </param>
        /// <param name="articleContent"> Article of event. </param>
        /// <param name="links"> Useful links of event. </param>
        /// <param name="impactStartOn"> It provides the Timestamp for when the health impacting event started. </param>
        /// <param name="impactMitigationOn"> It provides the Timestamp for when the health impacting event resolved. </param>
        /// <param name="impact"> List services impacted by the service health event. </param>
        /// <param name="recommendedActions"> Recommended actions of event. </param>
        /// <param name="faqs"> Frequently asked questions for the service health event. </param>
        /// <param name="isHIR"> It provides information if the event is High incident rate event or not. </param>
        /// <param name="enableMicrosoftSupport"> Tells if we want to enable or disable Microsoft Support for this event. </param>
        /// <param name="description"> Contains the communication message for the event, that could include summary, root cause and other details. </param>
        /// <param name="platformInitiated"> Is true if the event is platform initiated. </param>
        /// <param name="enableChatWithUs"> Tells if we want to enable or disable Microsoft Support for this event. </param>
        /// <param name="priority"> Priority level of the event. Has value from 0 to 23. 0 is the highest priority. Service issue events have higher priority followed by planned maintenance and health advisory. Critical events have higher priority followed by error, warning and informational. Furthermore, active events have higher priority than resolved. </param>
        /// <param name="lastUpdateOn"> It provides the Timestamp for when the health impacting event was last updated. </param>
        /// <param name="hirStage"> Stage for HIR Document. </param>
        /// <param name="additionalInformationMessage"> Additional information. </param>
        /// <param name="duration"> duration in seconds. </param>
        /// <param name="impactType"> The type of the impact. </param>
        /// <returns> A new <see cref="ResourceHealth.EventData"/> instance for mocking. </returns>
        public static EventData EventData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, EventTypeValue? eventType = null, EventSourceValue? eventSource = null, EventStatusValue? status = null, string title = null, string summary = null, string header = null, LevelValue? level = null, EventLevelValue? eventLevel = null, string externalIncidentId = null, string articleContent = null, IEnumerable<Link> links = null, DateTimeOffset? impactStartOn = null, DateTimeOffset? impactMitigationOn = null, IEnumerable<Impact> impact = null, EventPropertiesRecommendedActions recommendedActions = null, IEnumerable<Faq> faqs = null, bool? isHIR = null, bool? enableMicrosoftSupport = null, string description = null, bool? platformInitiated = null, bool? enableChatWithUs = null, int? priority = null, DateTimeOffset? lastUpdateOn = null, string hirStage = null, string additionalInformationMessage = null, int? duration = null, string impactType = null)
        {
            links ??= new List<Link>();
            impact ??= new List<Impact>();
            faqs ??= new List<Faq>();

            return new EventData(id, name, resourceType, systemData, eventType, eventSource, status, title, summary, header, level, eventLevel, externalIncidentId, articleContent != null ? new EventPropertiesArticle(articleContent) : null, links?.ToList(), impactStartOn, impactMitigationOn, impact?.ToList(), recommendedActions, faqs?.ToList(), isHIR, enableMicrosoftSupport, description, platformInitiated, enableChatWithUs, priority, lastUpdateOn, hirStage, additionalInformationMessage != null ? new EventPropertiesAdditionalInformation(additionalInformationMessage) : null, duration, impactType);
        }

        /// <summary> Initializes a new instance of Link. </summary>
        /// <param name="linkType"> Type of link. </param>
        /// <param name="displayText"> Display text of link. </param>
        /// <param name="extensionName"> It provides the name of portal extension to produce link for given service health event. </param>
        /// <param name="bladeName"> It provides the name of portal extension blade to produce link for given service health event. </param>
        /// <param name="parameters"> It provides a map of parameter name and value for portal extension blade to produce lik for given service health event. </param>
        /// <returns> A new <see cref="Models.Link"/> instance for mocking. </returns>
        public static Link Link(LinkTypeValue? linkType = null, LinkDisplayText displayText = null, string extensionName = null, string bladeName = null, BinaryData parameters = null)
        {
            return new Link(linkType, displayText, extensionName, bladeName, parameters);
        }

        /// <summary> Initializes a new instance of LinkDisplayText. </summary>
        /// <param name="value"> Display text of link. </param>
        /// <param name="localizedValue"> Localized display text of link. </param>
        /// <returns> A new <see cref="Models.LinkDisplayText"/> instance for mocking. </returns>
        public static LinkDisplayText LinkDisplayText(string value = null, string localizedValue = null)
        {
            return new LinkDisplayText(value, localizedValue);
        }

        /// <summary> Initializes a new instance of Impact. </summary>
        /// <param name="impactedService"> Impacted service name. </param>
        /// <param name="impactedRegions"> List regions impacted by the service health event. </param>
        /// <returns> A new <see cref="Models.Impact"/> instance for mocking. </returns>
        public static Impact Impact(string impactedService = null, IEnumerable<ImpactedServiceRegion> impactedRegions = null)
        {
            impactedRegions ??= new List<ImpactedServiceRegion>();

            return new Impact(impactedService, impactedRegions?.ToList());
        }

        /// <summary> Initializes a new instance of ImpactedServiceRegion. </summary>
        /// <param name="impactedRegion"> Impacted region name. </param>
        /// <param name="status"> Current status of event in the region. </param>
        /// <param name="impactedSubscriptions"> List subscription impacted by the service health event. </param>
        /// <param name="impactedTenants"> List tenant impacted by the service health event. </param>
        /// <param name="lastUpdateOn"> It provides the Timestamp for when the last update for the service health event. </param>
        /// <param name="updates"> List of updates for given service health event. </param>
        /// <returns> A new <see cref="Models.ImpactedServiceRegion"/> instance for mocking. </returns>
        public static ImpactedServiceRegion ImpactedServiceRegion(string impactedRegion = null, EventStatusValue? status = null, IEnumerable<string> impactedSubscriptions = null, IEnumerable<string> impactedTenants = null, DateTimeOffset? lastUpdateOn = null, IEnumerable<Update> updates = null)
        {
            impactedSubscriptions ??= new List<string>();
            impactedTenants ??= new List<string>();
            updates ??= new List<Update>();

            return new ImpactedServiceRegion(impactedRegion, status, impactedSubscriptions?.ToList(), impactedTenants?.ToList(), lastUpdateOn, updates?.ToList());
        }

        /// <summary> Initializes a new instance of Update. </summary>
        /// <param name="summary"> Summary text for the given update for the service health event. </param>
        /// <param name="updateOn"> It provides the Timestamp for the given update for the service health event. </param>
        /// <returns> A new <see cref="Models.Update"/> instance for mocking. </returns>
        public static Update Update(string summary = null, DateTimeOffset? updateOn = null)
        {
            return new Update(summary, updateOn);
        }

        /// <summary> Initializes a new instance of EventPropertiesRecommendedActions. </summary>
        /// <param name="message"> Recommended action title for the service health event. </param>
        /// <param name="actions"> Recommended actions for the service health event. </param>
        /// <param name="localeCode"> Recommended action locale for the service health event. </param>
        /// <returns> A new <see cref="Models.EventPropertiesRecommendedActions"/> instance for mocking. </returns>
        public static EventPropertiesRecommendedActions EventPropertiesRecommendedActions(string message = null, IEnumerable<EventPropertiesRecommendedActionsItem> actions = null, string localeCode = null)
        {
            actions ??= new List<EventPropertiesRecommendedActionsItem>();

            return new EventPropertiesRecommendedActions(message, actions?.ToList(), localeCode);
        }

        /// <summary> Initializes a new instance of EventPropertiesRecommendedActionsItem. </summary>
        /// <param name="groupId"> Recommended action group Id for the service health event. </param>
        /// <param name="actionText"> Recommended action text. </param>
        /// <returns> A new <see cref="Models.EventPropertiesRecommendedActionsItem"/> instance for mocking. </returns>
        public static EventPropertiesRecommendedActionsItem EventPropertiesRecommendedActionsItem(int? groupId = null, string actionText = null)
        {
            return new EventPropertiesRecommendedActionsItem(groupId, actionText);
        }

        /// <summary> Initializes a new instance of Faq. </summary>
        /// <param name="question"> FAQ question for the service health event. </param>
        /// <param name="answer"> FAQ answer for the service health event. </param>
        /// <param name="localeCode"> FAQ locale for the service health event. </param>
        /// <returns> A new <see cref="Models.Faq"/> instance for mocking. </returns>
        public static Faq Faq(string question = null, string answer = null, string localeCode = null)
        {
            return new Faq(question, answer, localeCode);
        }

        /// <summary> Initializes a new instance of EmergingIssuesGetResultData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="refreshTimestamp"> Timestamp for when last time refreshed for ongoing emerging issue. </param>
        /// <param name="statusBanners"> The list of emerging issues of banner type. </param>
        /// <param name="statusActiveEvents"> The list of emerging issues of active event type. </param>
        /// <returns> A new <see cref="ResourceHealth.EmergingIssuesGetResultData"/> instance for mocking. </returns>
        public static EmergingIssuesGetResultData EmergingIssuesGetResultData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, DateTimeOffset? refreshTimestamp = null, IEnumerable<StatusBanner> statusBanners = null, IEnumerable<StatusActiveEvent> statusActiveEvents = null)
        {
            statusBanners ??= new List<StatusBanner>();
            statusActiveEvents ??= new List<StatusActiveEvent>();

            return new EmergingIssuesGetResultData(id, name, resourceType, systemData, refreshTimestamp, statusBanners?.ToList(), statusActiveEvents?.ToList());
        }

        /// <summary> Initializes a new instance of StatusBanner. </summary>
        /// <param name="title"> The banner title. </param>
        /// <param name="message"> The details of banner. </param>
        /// <param name="cloud"> The cloud type of this banner. </param>
        /// <param name="lastModifiedOn"> The last time modified on this banner. </param>
        /// <returns> A new <see cref="Models.StatusBanner"/> instance for mocking. </returns>
        public static StatusBanner StatusBanner(string title = null, string message = null, string cloud = null, DateTimeOffset? lastModifiedOn = null)
        {
            return new StatusBanner(title, message, cloud, lastModifiedOn);
        }

        /// <summary> Initializes a new instance of StatusActiveEvent. </summary>
        /// <param name="title"> The active event title. </param>
        /// <param name="description"> The details of active event. </param>
        /// <param name="trackingId"> The tracking id of this active event. </param>
        /// <param name="startOn"> The impact start time on this active event. </param>
        /// <param name="cloud"> The cloud type of this active event. </param>
        /// <param name="severity"> The severity level of this active event. </param>
        /// <param name="stage"> The stage of this active event. </param>
        /// <param name="published"> The boolean value of this active event if published or not. </param>
        /// <param name="lastModifiedOn"> The last time modified on this banner. </param>
        /// <param name="impacts"> The list of emerging issues impacts. </param>
        /// <returns> A new <see cref="Models.StatusActiveEvent"/> instance for mocking. </returns>
        public static StatusActiveEvent StatusActiveEvent(string title = null, string description = null, string trackingId = null, DateTimeOffset? startOn = null, string cloud = null, SeverityValue? severity = null, StageValue? stage = null, bool? published = null, DateTimeOffset? lastModifiedOn = null, IEnumerable<EmergingIssueImpact> impacts = null)
        {
            impacts ??= new List<EmergingIssueImpact>();

            return new StatusActiveEvent(title, description, trackingId, startOn, cloud, severity, stage, published, lastModifiedOn, impacts?.ToList());
        }

        /// <summary> Initializes a new instance of EmergingIssueImpact. </summary>
        /// <param name="id"> The impacted service id. </param>
        /// <param name="name"> The impacted service name. </param>
        /// <param name="regions"> The list of impacted regions for corresponding emerging issues. </param>
        /// <returns> A new <see cref="Models.EmergingIssueImpact"/> instance for mocking. </returns>
        public static EmergingIssueImpact EmergingIssueImpact(string id = null, string name = null, IEnumerable<ImpactedRegion> regions = null)
        {
            regions ??= new List<ImpactedRegion>();

            return new EmergingIssueImpact(id, name, regions?.ToList());
        }

        /// <summary> Initializes a new instance of ImpactedRegion. </summary>
        /// <param name="id"> The impacted region id. </param>
        /// <param name="name"> The impacted region name. </param>
        /// <returns> A new <see cref="Models.ImpactedRegion"/> instance for mocking. </returns>
        public static ImpactedRegion ImpactedRegion(string id = null, string name = null)
        {
            return new ImpactedRegion(id, name);
        }
    }
}
