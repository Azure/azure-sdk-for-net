// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.ResourceHealth.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.ResourceHealth
{
    /// <summary>
    /// A class representing a collection of <see cref="EmergingIssuesGetResultResource" /> and their operations.
    /// Each <see cref="EmergingIssuesGetResultResource" /> in the collection will belong to the same instance of <see cref="TenantResource" />.
    /// To get an <see cref="EmergingIssuesGetResultCollection" /> instance call the GetEmergingIssuesGetResults method from an instance of <see cref="TenantResource" />.
    /// </summary>
    public partial class EmergingIssuesGetResultCollection : ArmCollection, IEnumerable<EmergingIssuesGetResultResource>, IAsyncEnumerable<EmergingIssuesGetResultResource>
    {
        private readonly ClientDiagnostics _emergingIssuesGetResultEmergingIssuesClientDiagnostics;
        private readonly EmergingIssuesRestOperations _emergingIssuesGetResultEmergingIssuesRestClient;

        /// <summary> Initializes a new instance of the <see cref="EmergingIssuesGetResultCollection"/> class for mocking. </summary>
        protected EmergingIssuesGetResultCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EmergingIssuesGetResultCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal EmergingIssuesGetResultCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _emergingIssuesGetResultEmergingIssuesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.ResourceHealth", EmergingIssuesGetResultResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(EmergingIssuesGetResultResource.ResourceType, out string emergingIssuesGetResultEmergingIssuesApiVersion);
            _emergingIssuesGetResultEmergingIssuesRestClient = new EmergingIssuesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, emergingIssuesGetResultEmergingIssuesApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != TenantResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, TenantResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Gets Azure services&apos; emerging issues.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.ResourceHealth/emergingIssues/{issueName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EmergingIssues_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="issueName"> The name of the emerging issue. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<EmergingIssuesGetResultResource>> GetAsync(IssueNameParameter issueName, CancellationToken cancellationToken = default)
        {
            using var scope = _emergingIssuesGetResultEmergingIssuesClientDiagnostics.CreateScope("EmergingIssuesGetResultCollection.Get");
            scope.Start();
            try
            {
                var response = await _emergingIssuesGetResultEmergingIssuesRestClient.GetAsync(issueName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EmergingIssuesGetResultResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets Azure services&apos; emerging issues.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.ResourceHealth/emergingIssues/{issueName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EmergingIssues_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="issueName"> The name of the emerging issue. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<EmergingIssuesGetResultResource> Get(IssueNameParameter issueName, CancellationToken cancellationToken = default)
        {
            using var scope = _emergingIssuesGetResultEmergingIssuesClientDiagnostics.CreateScope("EmergingIssuesGetResultCollection.Get");
            scope.Start();
            try
            {
                var response = _emergingIssuesGetResultEmergingIssuesRestClient.Get(issueName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EmergingIssuesGetResultResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists Azure services&apos; emerging issues.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.ResourceHealth/emergingIssues</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EmergingIssues_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EmergingIssuesGetResultResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EmergingIssuesGetResultResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _emergingIssuesGetResultEmergingIssuesRestClient.CreateListRequest();
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _emergingIssuesGetResultEmergingIssuesRestClient.CreateListNextPageRequest(nextLink);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new EmergingIssuesGetResultResource(Client, EmergingIssuesGetResultData.DeserializeEmergingIssuesGetResultData(e)), _emergingIssuesGetResultEmergingIssuesClientDiagnostics, Pipeline, "EmergingIssuesGetResultCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists Azure services&apos; emerging issues.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.ResourceHealth/emergingIssues</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EmergingIssues_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EmergingIssuesGetResultResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EmergingIssuesGetResultResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _emergingIssuesGetResultEmergingIssuesRestClient.CreateListRequest();
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _emergingIssuesGetResultEmergingIssuesRestClient.CreateListNextPageRequest(nextLink);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new EmergingIssuesGetResultResource(Client, EmergingIssuesGetResultData.DeserializeEmergingIssuesGetResultData(e)), _emergingIssuesGetResultEmergingIssuesClientDiagnostics, Pipeline, "EmergingIssuesGetResultCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.ResourceHealth/emergingIssues/{issueName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EmergingIssues_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="issueName"> The name of the emerging issue. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<bool>> ExistsAsync(IssueNameParameter issueName, CancellationToken cancellationToken = default)
        {
            using var scope = _emergingIssuesGetResultEmergingIssuesClientDiagnostics.CreateScope("EmergingIssuesGetResultCollection.Exists");
            scope.Start();
            try
            {
                var response = await _emergingIssuesGetResultEmergingIssuesRestClient.GetAsync(issueName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.ResourceHealth/emergingIssues/{issueName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EmergingIssues_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="issueName"> The name of the emerging issue. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<bool> Exists(IssueNameParameter issueName, CancellationToken cancellationToken = default)
        {
            using var scope = _emergingIssuesGetResultEmergingIssuesClientDiagnostics.CreateScope("EmergingIssuesGetResultCollection.Exists");
            scope.Start();
            try
            {
                var response = _emergingIssuesGetResultEmergingIssuesRestClient.Get(issueName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<EmergingIssuesGetResultResource> IEnumerable<EmergingIssuesGetResultResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<EmergingIssuesGetResultResource> IAsyncEnumerable<EmergingIssuesGetResultResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
