// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ResourceHealth.Models
{
    /// <summary> The severity level of this active event. </summary>
    public readonly partial struct SeverityValue : IEquatable<SeverityValue>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SeverityValue"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SeverityValue(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InformationValue = "Information";
        private const string WarningValue = "Warning";
        private const string ErrorValue = "Error";

        /// <summary> Information. </summary>
        public static SeverityValue Information { get; } = new SeverityValue(InformationValue);
        /// <summary> Warning. </summary>
        public static SeverityValue Warning { get; } = new SeverityValue(WarningValue);
        /// <summary> Error. </summary>
        public static SeverityValue Error { get; } = new SeverityValue(ErrorValue);
        /// <summary> Determines if two <see cref="SeverityValue"/> values are the same. </summary>
        public static bool operator ==(SeverityValue left, SeverityValue right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SeverityValue"/> values are not the same. </summary>
        public static bool operator !=(SeverityValue left, SeverityValue right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SeverityValue"/>. </summary>
        public static implicit operator SeverityValue(string value) => new SeverityValue(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SeverityValue other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SeverityValue other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
