// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ResourceHealth.Models
{
    public partial class EmergingIssueActiveEventType
    {
        internal static EmergingIssueActiveEventType DeserializeEmergingIssueActiveEventType(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<string> title = default;
            Core.Optional<string> description = default;
            Core.Optional<string> trackingId = default;
            Core.Optional<DateTimeOffset> startTime = default;
            Core.Optional<string> cloud = default;
            Core.Optional<ResourceHealthEventSeverityLevel> severity = default;
            Core.Optional<ResourceHealthEventStageValue> stage = default;
            Core.Optional<bool> published = default;
            Core.Optional<DateTimeOffset> lastModifiedTime = default;
            Core.Optional<IReadOnlyList<EmergingIssueImpact>> impacts = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("title"u8))
                {
                    title = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("trackingId"u8))
                {
                    trackingId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("startTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    startTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("cloud"u8))
                {
                    cloud = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("severity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    severity = new ResourceHealthEventSeverityLevel(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("stage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    stage = new ResourceHealthEventStageValue(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("published"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    published = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("lastModifiedTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastModifiedTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("impacts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<EmergingIssueImpact> array = new List<EmergingIssueImpact>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EmergingIssueImpact.DeserializeEmergingIssueImpact(item));
                    }
                    impacts = array;
                    continue;
                }
            }
            return new EmergingIssueActiveEventType(title.Value, description.Value, trackingId.Value, Core.Optional.ToNullable(startTime), cloud.Value, Core.Optional.ToNullable(severity), Core.Optional.ToNullable(stage), Core.Optional.ToNullable(published), Core.Optional.ToNullable(lastModifiedTime), Core.Optional.ToList(impacts));
        }
    }
}
