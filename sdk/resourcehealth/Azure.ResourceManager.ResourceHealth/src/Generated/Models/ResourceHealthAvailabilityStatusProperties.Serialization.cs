// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ResourceHealth.Models
{
    public partial class ResourceHealthAvailabilityStatusProperties
    {
        internal static ResourceHealthAvailabilityStatusProperties DeserializeResourceHealthAvailabilityStatusProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<ResourceHealthAvailabilityStateValue> availabilityState = default;
            Core.Optional<string> title = default;
            Core.Optional<string> summary = default;
            Core.Optional<string> detailedStatus = default;
            Core.Optional<string> reasonType = default;
            Core.Optional<string> context = default;
            Core.Optional<string> category = default;
            Core.Optional<string> articleId = default;
            Core.Optional<DateTimeOffset> rootCauseAttributionTime = default;
            Core.Optional<string> healthEventType = default;
            Core.Optional<string> healthEventCause = default;
            Core.Optional<string> healthEventCategory = default;
            Core.Optional<string> healthEventId = default;
            Core.Optional<DateTimeOffset> resolutionETA = default;
            Core.Optional<DateTimeOffset> occuredTime = default;
            Core.Optional<ReasonChronicityType> reasonChronicity = default;
            Core.Optional<DateTimeOffset> reportedTime = default;
            Core.Optional<ResourceHealthAvailabilityStateRecentlyResolved> recentlyResolved = default;
            Core.Optional<IReadOnlyList<ResourceHealthRecommendedAction>> recommendedActions = default;
            Core.Optional<IReadOnlyList<ServiceImpactingEvent>> serviceImpactingEvents = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("availabilityState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    availabilityState = new ResourceHealthAvailabilityStateValue(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("title"u8))
                {
                    title = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("summary"u8))
                {
                    summary = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("detailedStatus"u8))
                {
                    detailedStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("reasonType"u8))
                {
                    reasonType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("context"u8))
                {
                    context = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("category"u8))
                {
                    category = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("articleId"u8))
                {
                    articleId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("rootCauseAttributionTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    rootCauseAttributionTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("healthEventType"u8))
                {
                    healthEventType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("healthEventCause"u8))
                {
                    healthEventCause = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("healthEventCategory"u8))
                {
                    healthEventCategory = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("healthEventId"u8))
                {
                    healthEventId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resolutionETA"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    resolutionETA = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("occuredTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    occuredTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("reasonChronicity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    reasonChronicity = new ReasonChronicityType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("reportedTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    reportedTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("recentlyResolved"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    recentlyResolved = ResourceHealthAvailabilityStateRecentlyResolved.DeserializeResourceHealthAvailabilityStateRecentlyResolved(property.Value);
                    continue;
                }
                if (property.NameEquals("recommendedActions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ResourceHealthRecommendedAction> array = new List<ResourceHealthRecommendedAction>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ResourceHealthRecommendedAction.DeserializeResourceHealthRecommendedAction(item));
                    }
                    recommendedActions = array;
                    continue;
                }
                if (property.NameEquals("serviceImpactingEvents"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ServiceImpactingEvent> array = new List<ServiceImpactingEvent>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ServiceImpactingEvent.DeserializeServiceImpactingEvent(item));
                    }
                    serviceImpactingEvents = array;
                    continue;
                }
            }
            return new ResourceHealthAvailabilityStatusProperties(Core.Optional.ToNullable(availabilityState), title.Value, summary.Value, detailedStatus.Value, reasonType.Value, context.Value, category.Value, articleId.Value, Core.Optional.ToNullable(rootCauseAttributionTime), healthEventType.Value, healthEventCause.Value, healthEventCategory.Value, healthEventId.Value, Core.Optional.ToNullable(resolutionETA), Core.Optional.ToNullable(occuredTime), Core.Optional.ToNullable(reasonChronicity), Core.Optional.ToNullable(reportedTime), recentlyResolved.Value, Core.Optional.ToList(recommendedActions), Core.Optional.ToList(serviceImpactingEvents));
        }
    }
}
