// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.ResourceHealth.Models;

namespace Azure.ResourceManager.ResourceHealth
{
    public partial class ResourceHealthEventData
    {
        internal static ResourceHealthEventData DeserializeResourceHealthEventData(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Core.Optional<SystemData> systemData = default;
            Core.Optional<ResourceHealthEventTypeValue> eventType = default;
            Core.Optional<ResourceHealthEventSourceValue> eventSource = default;
            Core.Optional<ResourceHealthEventStatusValue> status = default;
            Core.Optional<string> title = default;
            Core.Optional<string> summary = default;
            Core.Optional<string> header = default;
            Core.Optional<ResourceHealthEventInsightLevelValue> level = default;
            Core.Optional<ResourceHealthEventLevelValue> eventLevel = default;
            Core.Optional<string> externalIncidentId = default;
            Core.Optional<string> reason = default;
            Core.Optional<ResourceHealthEventArticle> article = default;
            Core.Optional<IReadOnlyList<ResourceHealthEventLink>> links = default;
            Core.Optional<DateTimeOffset> impactStartTime = default;
            Core.Optional<DateTimeOffset> impactMitigationTime = default;
            Core.Optional<IReadOnlyList<ResourceHealthEventImpact>> impact = default;
            Core.Optional<ResourceHealthEventRecommendedActions> recommendedActions = default;
            Core.Optional<IReadOnlyList<ResourceHealthEventFaq>> faqs = default;
            Core.Optional<bool> isHIR = default;
            Core.Optional<bool> enableMicrosoftSupport = default;
            Core.Optional<string> description = default;
            Core.Optional<bool> platformInitiated = default;
            Core.Optional<bool> enableChatWithUs = default;
            Core.Optional<int> priority = default;
            Core.Optional<DateTimeOffset> lastUpdateTime = default;
            Core.Optional<string> hirStage = default;
            Core.Optional<ResourceHealthEventAdditionalInformation> additionalInformation = default;
            Core.Optional<int> duration = default;
            Core.Optional<string> impactType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("eventType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            eventType = new ResourceHealthEventTypeValue(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("eventSource"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            eventSource = new ResourceHealthEventSourceValue(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("status"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            status = new ResourceHealthEventStatusValue(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("title"u8))
                        {
                            title = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("summary"u8))
                        {
                            summary = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("header"u8))
                        {
                            header = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("level"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            level = new ResourceHealthEventInsightLevelValue(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("eventLevel"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            eventLevel = new ResourceHealthEventLevelValue(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("externalIncidentId"u8))
                        {
                            externalIncidentId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("reason"u8))
                        {
                            reason = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("article"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            article = ResourceHealthEventArticle.DeserializeResourceHealthEventArticle(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("links"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<ResourceHealthEventLink> array = new List<ResourceHealthEventLink>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(ResourceHealthEventLink.DeserializeResourceHealthEventLink(item));
                            }
                            links = array;
                            continue;
                        }
                        if (property0.NameEquals("impactStartTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            impactStartTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("impactMitigationTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            impactMitigationTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("impact"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<ResourceHealthEventImpact> array = new List<ResourceHealthEventImpact>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(ResourceHealthEventImpact.DeserializeResourceHealthEventImpact(item));
                            }
                            impact = array;
                            continue;
                        }
                        if (property0.NameEquals("recommendedActions"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            recommendedActions = ResourceHealthEventRecommendedActions.DeserializeResourceHealthEventRecommendedActions(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("faqs"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<ResourceHealthEventFaq> array = new List<ResourceHealthEventFaq>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(ResourceHealthEventFaq.DeserializeResourceHealthEventFaq(item));
                            }
                            faqs = array;
                            continue;
                        }
                        if (property0.NameEquals("isHIR"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            isHIR = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("enableMicrosoftSupport"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            enableMicrosoftSupport = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("description"u8))
                        {
                            description = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("platformInitiated"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            platformInitiated = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("enableChatWithUs"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            enableChatWithUs = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("priority"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            priority = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("lastUpdateTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            lastUpdateTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("hirStage"u8))
                        {
                            hirStage = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("additionalInformation"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            additionalInformation = ResourceHealthEventAdditionalInformation.DeserializeResourceHealthEventAdditionalInformation(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("duration"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            duration = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("impactType"u8))
                        {
                            impactType = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new ResourceHealthEventData(id, name, type, systemData.Value, Core.Optional.ToNullable(eventType), Core.Optional.ToNullable(eventSource), Core.Optional.ToNullable(status), title.Value, summary.Value, header.Value, Core.Optional.ToNullable(level), Core.Optional.ToNullable(eventLevel), externalIncidentId.Value, reason.Value, article.Value, Core.Optional.ToList(links), Core.Optional.ToNullable(impactStartTime), Core.Optional.ToNullable(impactMitigationTime), Core.Optional.ToList(impact), recommendedActions.Value, Core.Optional.ToList(faqs), Core.Optional.ToNullable(isHIR), Core.Optional.ToNullable(enableMicrosoftSupport), description.Value, Core.Optional.ToNullable(platformInitiated), Core.Optional.ToNullable(enableChatWithUs), Core.Optional.ToNullable(priority), Core.Optional.ToNullable(lastUpdateTime), hirStage.Value, additionalInformation.Value, Core.Optional.ToNullable(duration), impactType.Value);
        }
    }
}
