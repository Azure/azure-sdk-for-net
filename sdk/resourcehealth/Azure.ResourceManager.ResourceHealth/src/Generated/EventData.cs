// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.ResourceHealth.Models;

namespace Azure.ResourceManager.ResourceHealth
{
    /// <summary> A class representing the Event data model. </summary>
    public partial class EventData : ResourceData
    {
        /// <summary> Initializes a new instance of EventData. </summary>
        internal EventData()
        {
            Links = new ChangeTrackingList<Link>();
            Impact = new ChangeTrackingList<Impact>();
            Faqs = new ChangeTrackingList<Faq>();
        }

        /// <summary> Initializes a new instance of EventData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="eventType"> Type of event. </param>
        /// <param name="eventSource"> Source of event. </param>
        /// <param name="status"> Current status of event. </param>
        /// <param name="title"> Title text of event. </param>
        /// <param name="summary"> Summary text of event. </param>
        /// <param name="header"> Header text of event. </param>
        /// <param name="level"> Level of insight. </param>
        /// <param name="eventLevel"> Level of event. </param>
        /// <param name="externalIncidentId"> The id of the Incident. </param>
        /// <param name="article"> Article of event. </param>
        /// <param name="links"> Useful links of event. </param>
        /// <param name="impactStartOn"> It provides the Timestamp for when the health impacting event started. </param>
        /// <param name="impactMitigationOn"> It provides the Timestamp for when the health impacting event resolved. </param>
        /// <param name="impact"> List services impacted by the service health event. </param>
        /// <param name="recommendedActions"> Recommended actions of event. </param>
        /// <param name="faqs"> Frequently asked questions for the service health event. </param>
        /// <param name="isHIR"> It provides information if the event is High incident rate event or not. </param>
        /// <param name="enableMicrosoftSupport"> Tells if we want to enable or disable Microsoft Support for this event. </param>
        /// <param name="description"> Contains the communication message for the event, that could include summary, root cause and other details. </param>
        /// <param name="platformInitiated"> Is true if the event is platform initiated. </param>
        /// <param name="enableChatWithUs"> Tells if we want to enable or disable Microsoft Support for this event. </param>
        /// <param name="priority"> Priority level of the event. Has value from 0 to 23. 0 is the highest priority. Service issue events have higher priority followed by planned maintenance and health advisory. Critical events have higher priority followed by error, warning and informational. Furthermore, active events have higher priority than resolved. </param>
        /// <param name="lastUpdateOn"> It provides the Timestamp for when the health impacting event was last updated. </param>
        /// <param name="hirStage"> Stage for HIR Document. </param>
        /// <param name="additionalInformation"> Additional information. </param>
        /// <param name="duration"> duration in seconds. </param>
        /// <param name="impactType"> The type of the impact. </param>
        internal EventData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, EventTypeValue? eventType, EventSourceValue? eventSource, EventStatusValue? status, string title, string summary, string header, LevelValue? level, EventLevelValue? eventLevel, string externalIncidentId, EventPropertiesArticle article, IReadOnlyList<Link> links, DateTimeOffset? impactStartOn, DateTimeOffset? impactMitigationOn, IReadOnlyList<Impact> impact, EventPropertiesRecommendedActions recommendedActions, IReadOnlyList<Faq> faqs, bool? isHIR, bool? enableMicrosoftSupport, string description, bool? platformInitiated, bool? enableChatWithUs, int? priority, DateTimeOffset? lastUpdateOn, string hirStage, EventPropertiesAdditionalInformation additionalInformation, int? duration, string impactType) : base(id, name, resourceType, systemData)
        {
            EventType = eventType;
            EventSource = eventSource;
            Status = status;
            Title = title;
            Summary = summary;
            Header = header;
            Level = level;
            EventLevel = eventLevel;
            ExternalIncidentId = externalIncidentId;
            Article = article;
            Links = links;
            ImpactStartOn = impactStartOn;
            ImpactMitigationOn = impactMitigationOn;
            Impact = impact;
            RecommendedActions = recommendedActions;
            Faqs = faqs;
            IsHIR = isHIR;
            EnableMicrosoftSupport = enableMicrosoftSupport;
            Description = description;
            PlatformInitiated = platformInitiated;
            EnableChatWithUs = enableChatWithUs;
            Priority = priority;
            LastUpdateOn = lastUpdateOn;
            HirStage = hirStage;
            AdditionalInformation = additionalInformation;
            Duration = duration;
            ImpactType = impactType;
        }

        /// <summary> Type of event. </summary>
        public EventTypeValue? EventType { get; }
        /// <summary> Source of event. </summary>
        public EventSourceValue? EventSource { get; }
        /// <summary> Current status of event. </summary>
        public EventStatusValue? Status { get; }
        /// <summary> Title text of event. </summary>
        public string Title { get; }
        /// <summary> Summary text of event. </summary>
        public string Summary { get; }
        /// <summary> Header text of event. </summary>
        public string Header { get; }
        /// <summary> Level of insight. </summary>
        public LevelValue? Level { get; }
        /// <summary> Level of event. </summary>
        public EventLevelValue? EventLevel { get; }
        /// <summary> The id of the Incident. </summary>
        public string ExternalIncidentId { get; }
        /// <summary> Article of event. </summary>
        internal EventPropertiesArticle Article { get; }
        /// <summary> Article content of event. </summary>
        public string ArticleContent
        {
            get => Article?.ArticleContent;
        }

        /// <summary> Useful links of event. </summary>
        public IReadOnlyList<Link> Links { get; }
        /// <summary> It provides the Timestamp for when the health impacting event started. </summary>
        public DateTimeOffset? ImpactStartOn { get; }
        /// <summary> It provides the Timestamp for when the health impacting event resolved. </summary>
        public DateTimeOffset? ImpactMitigationOn { get; }
        /// <summary> List services impacted by the service health event. </summary>
        public IReadOnlyList<Impact> Impact { get; }
        /// <summary> Recommended actions of event. </summary>
        public EventPropertiesRecommendedActions RecommendedActions { get; }
        /// <summary> Frequently asked questions for the service health event. </summary>
        public IReadOnlyList<Faq> Faqs { get; }
        /// <summary> It provides information if the event is High incident rate event or not. </summary>
        public bool? IsHIR { get; }
        /// <summary> Tells if we want to enable or disable Microsoft Support for this event. </summary>
        public bool? EnableMicrosoftSupport { get; }
        /// <summary> Contains the communication message for the event, that could include summary, root cause and other details. </summary>
        public string Description { get; }
        /// <summary> Is true if the event is platform initiated. </summary>
        public bool? PlatformInitiated { get; }
        /// <summary> Tells if we want to enable or disable Microsoft Support for this event. </summary>
        public bool? EnableChatWithUs { get; }
        /// <summary> Priority level of the event. Has value from 0 to 23. 0 is the highest priority. Service issue events have higher priority followed by planned maintenance and health advisory. Critical events have higher priority followed by error, warning and informational. Furthermore, active events have higher priority than resolved. </summary>
        public int? Priority { get; }
        /// <summary> It provides the Timestamp for when the health impacting event was last updated. </summary>
        public DateTimeOffset? LastUpdateOn { get; }
        /// <summary> Stage for HIR Document. </summary>
        public string HirStage { get; }
        /// <summary> Additional information. </summary>
        internal EventPropertiesAdditionalInformation AdditionalInformation { get; }
        /// <summary> Additional information Message. </summary>
        public string AdditionalInformationMessage
        {
            get => AdditionalInformation?.Message;
        }

        /// <summary> duration in seconds. </summary>
        public int? Duration { get; }
        /// <summary> The type of the impact. </summary>
        public string ImpactType { get; }
    }
}
