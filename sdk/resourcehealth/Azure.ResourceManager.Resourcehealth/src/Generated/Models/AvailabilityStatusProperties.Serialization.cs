// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Resourcehealth.Models
{
    public partial class AvailabilityStatusProperties
    {
        internal static AvailabilityStatusProperties DeserializeAvailabilityStatusProperties(JsonElement element)
        {
            Optional<AvailabilityStateValue> availabilityState = default;
            Optional<string> title = default;
            Optional<string> summary = default;
            Optional<string> detailedStatus = default;
            Optional<string> reasonType = default;
            Optional<DateTimeOffset> rootCauseAttributionTime = default;
            Optional<string> healthEventType = default;
            Optional<string> healthEventCause = default;
            Optional<string> healthEventCategory = default;
            Optional<string> healthEventId = default;
            Optional<DateTimeOffset> resolutionETA = default;
            Optional<DateTimeOffset> occuredTime = default;
            Optional<ReasonChronicityType> reasonChronicity = default;
            Optional<DateTimeOffset> reportedTime = default;
            Optional<AvailabilityStatusPropertiesRecentlyResolved> recentlyResolved = default;
            Optional<IReadOnlyList<RecommendedAction>> recommendedActions = default;
            Optional<IReadOnlyList<ServiceImpactingEvent>> serviceImpactingEvents = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("availabilityState"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    availabilityState = new AvailabilityStateValue(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("title"))
                {
                    title = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("summary"))
                {
                    summary = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("detailedStatus"))
                {
                    detailedStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("reasonType"))
                {
                    reasonType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("rootCauseAttributionTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    rootCauseAttributionTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("healthEventType"))
                {
                    healthEventType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("healthEventCause"))
                {
                    healthEventCause = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("healthEventCategory"))
                {
                    healthEventCategory = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("healthEventId"))
                {
                    healthEventId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resolutionETA"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    resolutionETA = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("occuredTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    occuredTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("reasonChronicity"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    reasonChronicity = new ReasonChronicityType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("reportedTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    reportedTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("recentlyResolved"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    recentlyResolved = AvailabilityStatusPropertiesRecentlyResolved.DeserializeAvailabilityStatusPropertiesRecentlyResolved(property.Value);
                    continue;
                }
                if (property.NameEquals("recommendedActions"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<RecommendedAction> array = new List<RecommendedAction>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(RecommendedAction.DeserializeRecommendedAction(item));
                    }
                    recommendedActions = array;
                    continue;
                }
                if (property.NameEquals("serviceImpactingEvents"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ServiceImpactingEvent> array = new List<ServiceImpactingEvent>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ServiceImpactingEvent.DeserializeServiceImpactingEvent(item));
                    }
                    serviceImpactingEvents = array;
                    continue;
                }
            }
            return new AvailabilityStatusProperties(Optional.ToNullable(availabilityState), title.Value, summary.Value, detailedStatus.Value, reasonType.Value, Optional.ToNullable(rootCauseAttributionTime), healthEventType.Value, healthEventCause.Value, healthEventCategory.Value, healthEventId.Value, Optional.ToNullable(resolutionETA), Optional.ToNullable(occuredTime), Optional.ToNullable(reasonChronicity), Optional.ToNullable(reportedTime), recentlyResolved.Value, Optional.ToList(recommendedActions), Optional.ToList(serviceImpactingEvents));
        }
    }
}
