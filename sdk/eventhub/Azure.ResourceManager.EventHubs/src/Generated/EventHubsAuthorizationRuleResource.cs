// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.EventHubs.Models;

namespace Azure.ResourceManager.EventHubs
{
    /// <summary> TODO. </summary>
    public abstract partial class EventHubsAuthorizationRuleResource : ArmResource
    {
        internal static EventHubsAuthorizationRuleResource GetResource(ArmClient client, EventHubsAuthorizationRuleData data)
        {
            if (IsEventHubsNamespaceAuthorizationRuleResource(data.Id))
            {
                return new EventHubsNamespaceAuthorizationRuleResource(client, data);
            }
            if (IsEventHubAuthorizationRuleResource(data.Id))
            {
                return new EventHubAuthorizationRuleResource(client, data);
            }
            if (IsEventHubsDisasterRecoveryAuthorizationRuleResource(data.Id))
            {
                return new EventHubsDisasterRecoveryAuthorizationRuleResource(client, data);
            }
            // TODO -- should we throw or return an UnknownResource?
            throw new InvalidOperationException();
        }

        internal static bool IsEventHubsNamespaceAuthorizationRuleResource(ResourceIdentifier id)
        {
            // checking the resource type
            if (id.ResourceType != EventHubsNamespaceAuthorizationRuleResource.ResourceType)
            {
                return false;
            }
            // checking the resource scope
            if (id.Parent.Parent.ResourceType != "Microsoft.Resources/resourceGroups")
            {
                return false;
            }
            return true;
        }

        internal static bool IsEventHubAuthorizationRuleResource(ResourceIdentifier id)
        {
            // checking the resource type
            if (id.ResourceType != EventHubAuthorizationRuleResource.ResourceType)
            {
                return false;
            }
            // checking the resource scope
            if (id.Parent.Parent.Parent.ResourceType != "Microsoft.Resources/resourceGroups")
            {
                return false;
            }
            return true;
        }

        internal static bool IsEventHubsDisasterRecoveryAuthorizationRuleResource(ResourceIdentifier id)
        {
            // checking the resource type
            if (id.ResourceType != EventHubsDisasterRecoveryAuthorizationRuleResource.ResourceType)
            {
                return false;
            }
            // checking the resource scope
            if (id.Parent.Parent.Parent.ResourceType != "Microsoft.Resources/resourceGroups")
            {
                return false;
            }
            return true;
        }

        private readonly EventHubsAuthorizationRuleData _data;

        /// <summary> Initializes a new instance of the <see cref="EventHubsAuthorizationRuleResource"/> class for mocking. </summary>
        protected EventHubsAuthorizationRuleResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "EventHubsAuthorizationRuleResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal EventHubsAuthorizationRuleResource(ArmClient client, EventHubsAuthorizationRuleData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="EventHubsAuthorizationRuleResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal EventHubsAuthorizationRuleResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual EventHubsAuthorizationRuleData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        /// <summary> The core implementation for operation Get. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        protected abstract Task<Response<EventHubsAuthorizationRuleResource>> GetCoreAsync(CancellationToken cancellationToken = default);

        /// <summary> The default implementation for operation Get. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [ForwardsClientCalls]
        public async Task<Response<EventHubsAuthorizationRuleResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            return await GetCoreAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary> The core implementation for operation Get. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        protected abstract Response<EventHubsAuthorizationRuleResource> GetCore(CancellationToken cancellationToken = default);

        /// <summary> The default implementation for operation Get. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [ForwardsClientCalls]
        public Response<EventHubsAuthorizationRuleResource> Get(CancellationToken cancellationToken = default)
        {
            return GetCore(cancellationToken);
        }

        /// <summary> The core implementation for operation GetKeys. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        protected abstract Task<Response<EventHubsAccessKeys>> GetKeysCoreAsync(CancellationToken cancellationToken = default);

        /// <summary> The default implementation for operation GetKeys. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [ForwardsClientCalls]
        public async Task<Response<EventHubsAccessKeys>> GetKeysAsync(CancellationToken cancellationToken = default)
        {
            return await GetKeysCoreAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary> The core implementation for operation GetKeys. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        protected abstract Response<EventHubsAccessKeys> GetKeysCore(CancellationToken cancellationToken = default);

        /// <summary> The default implementation for operation GetKeys. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [ForwardsClientCalls]
        public Response<EventHubsAccessKeys> GetKeys(CancellationToken cancellationToken = default)
        {
            return GetKeysCore(cancellationToken);
        }
    }
}
