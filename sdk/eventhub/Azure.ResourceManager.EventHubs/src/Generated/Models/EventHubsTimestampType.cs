// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.EventHubs.Models
{
    /// <summary> Denotes the type of timestamp the message will hold.Two types of timestamp types - "AppendTime" and "CreateTime". AppendTime refers the time in which message got appended inside broker log. CreateTime refers to the time in which the message was generated on source side and producers can set this timestamp while sending the message. Default value is AppendTime. If you are using AMQP protocol, CreateTime equals AppendTime and its behavior remains the same. </summary>
    public readonly partial struct EventHubsTimestampType : IEquatable<EventHubsTimestampType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="EventHubsTimestampType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EventHubsTimestampType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string LogAppendValue = "LogAppend";
        private const string CreateValue = "Create";

        /// <summary> LogAppend. </summary>
        public static EventHubsTimestampType LogAppend { get; } = new EventHubsTimestampType(LogAppendValue);
        /// <summary> Create. </summary>
        public static EventHubsTimestampType Create { get; } = new EventHubsTimestampType(CreateValue);
        /// <summary> Determines if two <see cref="EventHubsTimestampType"/> values are the same. </summary>
        public static bool operator ==(EventHubsTimestampType left, EventHubsTimestampType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EventHubsTimestampType"/> values are not the same. </summary>
        public static bool operator !=(EventHubsTimestampType left, EventHubsTimestampType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="EventHubsTimestampType"/>. </summary>
        public static implicit operator EventHubsTimestampType(string value) => new EventHubsTimestampType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EventHubsTimestampType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EventHubsTimestampType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
