// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.EventHubs.Models
{
    public partial class Eventhub : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(MessageRetentionInDays))
            {
                writer.WritePropertyName("messageRetentionInDays");
                writer.WriteNumberValue(MessageRetentionInDays.Value);
            }
            if (Optional.IsDefined(PartitionCount))
            {
                writer.WritePropertyName("partitionCount");
                writer.WriteNumberValue(PartitionCount.Value);
            }
            if (Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status");
                writer.WriteStringValue(Status.Value.ToSerialString());
            }
            if (Optional.IsDefined(CaptureDescription))
            {
                writer.WritePropertyName("captureDescription");
                writer.WriteObjectValue(CaptureDescription);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static Eventhub DeserializeEventhub(JsonElement element)
        {
            Optional<string> id = default;
            Optional<string> name = default;
            Optional<string> type = default;
            Optional<IReadOnlyList<string>> partitionIds = default;
            Optional<DateTimeOffset> createdAt = default;
            Optional<DateTimeOffset> updatedAt = default;
            Optional<long> messageRetentionInDays = default;
            Optional<long> partitionCount = default;
            Optional<EntityStatus> status = default;
            Optional<CaptureDescription> captureDescription = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("partitionIds"))
                        {
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            partitionIds = array;
                            continue;
                        }
                        if (property0.NameEquals("createdAt"))
                        {
                            createdAt = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("updatedAt"))
                        {
                            updatedAt = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("messageRetentionInDays"))
                        {
                            messageRetentionInDays = property0.Value.GetInt64();
                            continue;
                        }
                        if (property0.NameEquals("partitionCount"))
                        {
                            partitionCount = property0.Value.GetInt64();
                            continue;
                        }
                        if (property0.NameEquals("status"))
                        {
                            status = property0.Value.GetString().ToEntityStatus();
                            continue;
                        }
                        if (property0.NameEquals("captureDescription"))
                        {
                            captureDescription = CaptureDescription.DeserializeCaptureDescription(property0.Value);
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new Eventhub(id.Value, name.Value, type.Value, Optional.ToList(partitionIds), Optional.ToNullable(createdAt), Optional.ToNullable(updatedAt), Optional.ToNullable(messageRetentionInDays), Optional.ToNullable(partitionCount), Optional.ToNullable(status), captureDescription.Value);
        }
    }
}
