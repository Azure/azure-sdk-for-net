// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.ResourceManager;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.EventHubs.Models
{
    /// <summary> Messaging Plan for the namespace. </summary>
    public partial class MessagingPlan : TrackedResource
    {
        /// <summary> Initializes a new instance of MessagingPlan. </summary>
        /// <param name="location"> The location. </param>
        public MessagingPlan(Location location) : base(location)
        {
        }

        /// <summary> Initializes a new instance of MessagingPlan. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="type"> The type. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="sku"> Sku type. </param>
        /// <param name="selectedEventHubUnit"> Selected event hub unit. </param>
        /// <param name="updatedAt"> The exact time the messaging plan was updated. </param>
        /// <param name="revision"> revision number. </param>
        internal MessagingPlan(ResourceIdentifier id, string name, ResourceType type, IDictionary<string, string> tags, Location location, int? sku, int? selectedEventHubUnit, DateTimeOffset? updatedAt, long? revision) : base(id, name, type, tags, location)
        {
            Sku = sku;
            SelectedEventHubUnit = selectedEventHubUnit;
            UpdatedAt = updatedAt;
            Revision = revision;
        }

        /// <summary> Sku type. </summary>
        public int? Sku { get; }
        /// <summary> Selected event hub unit. </summary>
        public int? SelectedEventHubUnit { get; }
        /// <summary> The exact time the messaging plan was updated. </summary>
        public DateTimeOffset? UpdatedAt { get; }
        /// <summary> revision number. </summary>
        public long? Revision { get; }
    }
}
