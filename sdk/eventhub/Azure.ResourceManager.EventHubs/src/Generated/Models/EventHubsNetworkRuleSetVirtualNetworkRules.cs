// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.EventHubs.Models
{
    /// <summary> The response from the List namespace operation. </summary>
    public partial class EventHubsNetworkRuleSetVirtualNetworkRules
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private Dictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EventHubsNetworkRuleSetVirtualNetworkRules"/>. </summary>
        public EventHubsNetworkRuleSetVirtualNetworkRules()
        {
        }

        /// <summary> Initializes a new instance of <see cref="EventHubsNetworkRuleSetVirtualNetworkRules"/>. </summary>
        /// <param name="subnet"> Subnet properties. </param>
        /// <param name="ignoreMissingVnetServiceEndpoint"> Value that indicates whether to ignore missing Vnet Service Endpoint. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EventHubsNetworkRuleSetVirtualNetworkRules(WritableSubResource subnet, bool? ignoreMissingVnetServiceEndpoint, Dictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Subnet = subnet;
            IgnoreMissingVnetServiceEndpoint = ignoreMissingVnetServiceEndpoint;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Subnet properties. </summary>
        internal WritableSubResource Subnet { get; set; }
        /// <summary> Gets or sets Id. </summary>
        public ResourceIdentifier SubnetId
        {
            get => Subnet is null ? default : Subnet.Id;
            set
            {
                if (Subnet is null)
                    Subnet = new WritableSubResource();
                Subnet.Id = value;
            }
        }

        /// <summary> Value that indicates whether to ignore missing Vnet Service Endpoint. </summary>
        public bool? IgnoreMissingVnetServiceEndpoint { get; set; }
    }
}
