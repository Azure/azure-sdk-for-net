// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.EventHubs.Models
{
    internal static partial class EventHubsNameUnavailableReasonExtensions
    {
        public static string ToSerialString(this EventHubsNameUnavailableReason value) => value switch
        {
            EventHubsNameUnavailableReason.None => "None",
            EventHubsNameUnavailableReason.InvalidName => "InvalidName",
            EventHubsNameUnavailableReason.SubscriptionIsDisabled => "SubscriptionIsDisabled",
            EventHubsNameUnavailableReason.NameInUse => "NameInUse",
            EventHubsNameUnavailableReason.NameInLockdown => "NameInLockdown",
            EventHubsNameUnavailableReason.TooManyNamespaceInCurrentSubscription => "TooManyNamespaceInCurrentSubscription",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown EventHubsNameUnavailableReason value.")
        };

        public static EventHubsNameUnavailableReason ToEventHubsNameUnavailableReason(this string value)
        {
            if (string.Equals(value, "None", StringComparison.InvariantCultureIgnoreCase)) return EventHubsNameUnavailableReason.None;
            if (string.Equals(value, "InvalidName", StringComparison.InvariantCultureIgnoreCase)) return EventHubsNameUnavailableReason.InvalidName;
            if (string.Equals(value, "SubscriptionIsDisabled", StringComparison.InvariantCultureIgnoreCase)) return EventHubsNameUnavailableReason.SubscriptionIsDisabled;
            if (string.Equals(value, "NameInUse", StringComparison.InvariantCultureIgnoreCase)) return EventHubsNameUnavailableReason.NameInUse;
            if (string.Equals(value, "NameInLockdown", StringComparison.InvariantCultureIgnoreCase)) return EventHubsNameUnavailableReason.NameInLockdown;
            if (string.Equals(value, "TooManyNamespaceInCurrentSubscription", StringComparison.InvariantCultureIgnoreCase)) return EventHubsNameUnavailableReason.TooManyNamespaceInCurrentSubscription;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown EventHubsNameUnavailableReason value.");
        }
    }
}
