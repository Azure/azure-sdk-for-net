// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.EventHubs.Models
{
    public partial class EventHubsThrottlingPolicy : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("rateLimitThreshold");
            writer.WriteNumberValue(RateLimitThreshold);
            writer.WritePropertyName("metricId");
            writer.WriteStringValue(MetricId.ToString());
            writer.WritePropertyName("name");
            writer.WriteStringValue(Name);
            writer.WritePropertyName("type");
            writer.WriteStringValue(ApplicationGroupPolicyType.ToString());
            writer.WriteEndObject();
        }

        internal static EventHubsThrottlingPolicy DeserializeEventHubsThrottlingPolicy(JsonElement element)
        {
            long rateLimitThreshold = default;
            EventHubsMetricId metricId = default;
            string name = default;
            ApplicationGroupPolicyType type = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("rateLimitThreshold"))
                {
                    rateLimitThreshold = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("metricId"))
                {
                    metricId = new EventHubsMetricId(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = new ApplicationGroupPolicyType(property.Value.GetString());
                    continue;
                }
            }
            return new EventHubsThrottlingPolicy(name, type, rateLimitThreshold, metricId);
        }
    }
}
