// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.EventHubs.Models
{
    /// <summary> Provisioning state of NetworkSecurityPerimeter configuration propagation. </summary>
    public readonly partial struct NetworkSecurityPerimeterConfigurationProvisioningState : IEquatable<NetworkSecurityPerimeterConfigurationProvisioningState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="NetworkSecurityPerimeterConfigurationProvisioningState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public NetworkSecurityPerimeterConfigurationProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string CreatingValue = "Creating";
        private const string UpdatingValue = "Updating";
        private const string AcceptedValue = "Accepted";
        private const string InvalidResponseValue = "InvalidResponse";
        private const string SucceededValue = "Succeeded";
        private const string SucceededWithIssuesValue = "SucceededWithIssues";
        private const string FailedValue = "Failed";
        private const string DeletingValue = "Deleting";
        private const string DeletedValue = "Deleted";
        private const string CanceledValue = "Canceled";

        /// <summary> Unknown. </summary>
        public static NetworkSecurityPerimeterConfigurationProvisioningState Unknown { get; } = new NetworkSecurityPerimeterConfigurationProvisioningState(UnknownValue);
        /// <summary> Creating. </summary>
        public static NetworkSecurityPerimeterConfigurationProvisioningState Creating { get; } = new NetworkSecurityPerimeterConfigurationProvisioningState(CreatingValue);
        /// <summary> Updating. </summary>
        public static NetworkSecurityPerimeterConfigurationProvisioningState Updating { get; } = new NetworkSecurityPerimeterConfigurationProvisioningState(UpdatingValue);
        /// <summary> Accepted. </summary>
        public static NetworkSecurityPerimeterConfigurationProvisioningState Accepted { get; } = new NetworkSecurityPerimeterConfigurationProvisioningState(AcceptedValue);
        /// <summary> InvalidResponse. </summary>
        public static NetworkSecurityPerimeterConfigurationProvisioningState InvalidResponse { get; } = new NetworkSecurityPerimeterConfigurationProvisioningState(InvalidResponseValue);
        /// <summary> Succeeded. </summary>
        public static NetworkSecurityPerimeterConfigurationProvisioningState Succeeded { get; } = new NetworkSecurityPerimeterConfigurationProvisioningState(SucceededValue);
        /// <summary> SucceededWithIssues. </summary>
        public static NetworkSecurityPerimeterConfigurationProvisioningState SucceededWithIssues { get; } = new NetworkSecurityPerimeterConfigurationProvisioningState(SucceededWithIssuesValue);
        /// <summary> Failed. </summary>
        public static NetworkSecurityPerimeterConfigurationProvisioningState Failed { get; } = new NetworkSecurityPerimeterConfigurationProvisioningState(FailedValue);
        /// <summary> Deleting. </summary>
        public static NetworkSecurityPerimeterConfigurationProvisioningState Deleting { get; } = new NetworkSecurityPerimeterConfigurationProvisioningState(DeletingValue);
        /// <summary> Deleted. </summary>
        public static NetworkSecurityPerimeterConfigurationProvisioningState Deleted { get; } = new NetworkSecurityPerimeterConfigurationProvisioningState(DeletedValue);
        /// <summary> Canceled. </summary>
        public static NetworkSecurityPerimeterConfigurationProvisioningState Canceled { get; } = new NetworkSecurityPerimeterConfigurationProvisioningState(CanceledValue);
        /// <summary> Determines if two <see cref="NetworkSecurityPerimeterConfigurationProvisioningState"/> values are the same. </summary>
        public static bool operator ==(NetworkSecurityPerimeterConfigurationProvisioningState left, NetworkSecurityPerimeterConfigurationProvisioningState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="NetworkSecurityPerimeterConfigurationProvisioningState"/> values are not the same. </summary>
        public static bool operator !=(NetworkSecurityPerimeterConfigurationProvisioningState left, NetworkSecurityPerimeterConfigurationProvisioningState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="NetworkSecurityPerimeterConfigurationProvisioningState"/>. </summary>
        public static implicit operator NetworkSecurityPerimeterConfigurationProvisioningState(string value) => new NetworkSecurityPerimeterConfigurationProvisioningState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is NetworkSecurityPerimeterConfigurationProvisioningState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(NetworkSecurityPerimeterConfigurationProvisioningState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
