// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.EventHubs.Models
{
    public partial class Destination : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Name != null)
            {
                writer.WritePropertyName("name");
                writer.WriteStringValue(Name);
            }
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (StorageAccountResourceId != null)
            {
                writer.WritePropertyName("storageAccountResourceId");
                writer.WriteStringValue(StorageAccountResourceId);
            }
            if (BlobContainer != null)
            {
                writer.WritePropertyName("blobContainer");
                writer.WriteStringValue(BlobContainer);
            }
            if (ArchiveNameFormat != null)
            {
                writer.WritePropertyName("archiveNameFormat");
                writer.WriteStringValue(ArchiveNameFormat);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static Destination DeserializeDestination(JsonElement element)
        {
            string name = default;
            string storageAccountResourceId = default;
            string blobContainer = default;
            string archiveNameFormat = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("storageAccountResourceId"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            storageAccountResourceId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("blobContainer"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            blobContainer = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("archiveNameFormat"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            archiveNameFormat = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new Destination(name, storageAccountResourceId, blobContainer, archiveNameFormat);
        }
    }
}
