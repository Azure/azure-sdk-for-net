// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.EventHub.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Single item in List or Get Consumer group operation
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ConsumerGroup : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the ConsumerGroup class.
        /// </summary>
        public ConsumerGroup()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConsumerGroup class.
        /// </summary>
        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.EventHub/Namespaces" or
        /// "Microsoft.EventHub/Namespaces/EventHubs"</param>
        /// <param name="location">The geo-location where the resource
        /// lives</param>
        /// <param name="createdAt">Exact time the message was created.</param>
        /// <param name="updatedAt">The exact time the message was
        /// updated.</param>
        /// <param name="userMetadata">User Metadata is a placeholder to store
        /// user-defined string data with maximum length 1024. e.g. it can be
        /// used to store descriptive data, such as list of teams and their
        /// contact information also user-defined configuration settings can be
        /// stored.</param>
        /// <param name="systemData">The system meta data relating to this
        /// resource.</param>
        public ConsumerGroup(string id = default(string), string name = default(string), string type = default(string), string location = default(string), System.DateTime? createdAt = default(System.DateTime?), System.DateTime? updatedAt = default(System.DateTime?), string userMetadata = default(string), SystemData systemData = default(SystemData))
            : base(id, name, type, location)
        {
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            UserMetadata = userMetadata;
            SystemData = systemData;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets exact time the message was created.
        /// </summary>
        [JsonProperty(PropertyName = "properties.createdAt")]
        public System.DateTime? CreatedAt { get; private set; }

        /// <summary>
        /// Gets the exact time the message was updated.
        /// </summary>
        [JsonProperty(PropertyName = "properties.updatedAt")]
        public System.DateTime? UpdatedAt { get; private set; }

        /// <summary>
        /// Gets or sets user Metadata is a placeholder to store user-defined
        /// string data with maximum length 1024. e.g. it can be used to store
        /// descriptive data, such as list of teams and their contact
        /// information also user-defined configuration settings can be stored.
        /// </summary>
        [JsonProperty(PropertyName = "properties.userMetadata")]
        public string UserMetadata { get; set; }

        /// <summary>
        /// Gets the system meta data relating to this resource.
        /// </summary>
        [JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData { get; private set; }

    }
}
