// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.EventHub.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// SKU parameters particular to a cluster instance.
    /// </summary>
    public partial class ClusterSku
    {
        /// <summary>
        /// Initializes a new instance of the ClusterSku class.
        /// </summary>
        public ClusterSku()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ClusterSku class.
        /// </summary>
        /// <param name="capacity">The quantity of Event Hubs Cluster Capacity
        /// Units contained in this cluster.</param>
        public ClusterSku(int? capacity = default(int?))
        {
            Capacity = capacity;
            CustomInit();
        }
        /// <summary>
        /// Static constructor for ClusterSku class.
        /// </summary>
        static ClusterSku()
        {
            Name = "Dedicated";
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the quantity of Event Hubs Cluster Capacity Units
        /// contained in this cluster.
        /// </summary>
        [JsonProperty(PropertyName = "capacity")]
        public int? Capacity { get; set; }

        /// <summary>
        /// Name of this SKU.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public static string Name { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Capacity > 32)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Capacity", 32);
            }
            if (Capacity < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Capacity", 1);
            }
        }
    }
}
