// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Management.EventHub.Models;

namespace Azure.Management.EventHub
{
    /// <summary> The Regions service client. </summary>
    public partial class RegionsClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal RegionsRestClient RestClient { get; }
        /// <summary> Initializes a new instance of RegionsClient for mocking. </summary>
        protected RegionsClient()
        {
        }

        /// <summary> Initializes a new instance of RegionsClient. </summary>
        public RegionsClient(string subscriptionId, TokenCredential tokenCredential, EventHubManagementClientOptions options = null) : this(subscriptionId, "https://management.azure.com", tokenCredential, options)
        {
        }

        /// <summary> Initializes a new instance of RegionsClient. </summary>
        public RegionsClient(string subscriptionId, string host, TokenCredential tokenCredential, EventHubManagementClientOptions options = null)
        {
            options ??= new EventHubManagementClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = ManagementPipelineBuilder.Build(tokenCredential, host, options);
            RestClient = new RegionsRestClient(_clientDiagnostics, _pipeline, subscriptionId: subscriptionId, host: host);
        }

        /// <summary> Gets the available Regions for a given sku. </summary>
        /// <param name="sku"> The sku type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<MessagingRegions> ListBySkuAsync(string sku, CancellationToken cancellationToken = default)
        {
            if (sku == null)
            {
                throw new ArgumentNullException(nameof(sku));
            }

            async Task<Page<MessagingRegions>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("RegionsClient.ListBySku");
                scope.Start();
                try
                {
                    var response = await RestClient.ListBySkuAsync(sku, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<MessagingRegions>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("RegionsClient.ListBySku");
                scope.Start();
                try
                {
                    var response = await RestClient.ListBySkuNextPageAsync(nextLink, sku, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets the available Regions for a given sku. </summary>
        /// <param name="sku"> The sku type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<MessagingRegions> ListBySku(string sku, CancellationToken cancellationToken = default)
        {
            if (sku == null)
            {
                throw new ArgumentNullException(nameof(sku));
            }

            Page<MessagingRegions> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("RegionsClient.ListBySku");
                scope.Start();
                try
                {
                    var response = RestClient.ListBySku(sku, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<MessagingRegions> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("RegionsClient.ListBySku");
                scope.Start();
                try
                {
                    var response = RestClient.ListBySkuNextPage(nextLink, sku, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
