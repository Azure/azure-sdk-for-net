# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

using namespace Microsoft.Azure.Commands.ActiveDirectory

function SelectRandomCharacters
{    
    <#
      .SYNOPSIS
        Selects a number of random characters from a set.
    #>

    param
    (
        [Parameter(Mandatory=$true)]
        [int]$length, 

        [Parameter(Mandatory=$true)]
        [string]$characters
    ) 

    $random = (1..$length | ForEach { Get-Random -Maximum $characters.length })
    return (-join $characters[$random])
}

function GenerateRandomPassword()
{
    <#
      .SYNOPSIS
        Generates a random password that can be assigned to a service principal.
        
      .DESCRIPTION
        The password generated by this function will contain a mix of alpha,
        numeric, and special characters and will vary a small amount in its length.        
    #>

    $baseLength = (Get-Random -Minimum 28 -Maximum 37)      
    $upper = (Get-Random -Minimum 6 -Maximum ([int][Math]::Ceiling($baseLength / 3)))  
    $special = (Get-Random -Minimum 2 -Maximum 3)     
    $lower = ($baseLength - $upper - $special - $special)                                 

    $password = SelectRandomCharacters $lower "abcdefghiklmnoprstuvwxyz"
    $password += SelectRandomCharacters $upper "ABCDEFGHKLMNOPRSTUVWXYZ"
    $password += SelectRandomCharacters $special "1234567890"
    $password += SelectRandomCharacters $special "!$%&/()=?}][{@#*+"

    $scrambled = ($password.ToCharArray()) | Get-Random -Count ($password.Length)
    return (-join $scrambled)
}

function TearDownResources
{
    <#
      .SYNOPSIS
        Cleans up any Azure resources created by the script.
        
      .DESCRIPTION
        Responsible for cleaning up any Azure resources created 
        by the script in case of failure.
    #>
    
    param
    (
        [Parameter(Mandatory=$true)]
        [bool] $cleanResourceGroup
    )
    
    Write-Host("Cleaning up resources that were created:")
    
    if ($cleanResourceGroup)
    {
        try 
        {
            Write-Host "`t...Removing resource group `"$($ResourceGroupName)`""
            Remove-AzResourceGroup -Name "$($ResourceGroupName)" -Force | Out-Null
        }
        catch 
        {
            Write-Error "The resource group: $($ResourceGroupName) could not be removed.  You will need to delete this manually."
            Write-Error ""            
            Write-Error $_.Exception.Message
        }
    }
}

function CreateServicePrincipal
{
    <#
      .SYNOPSIS
        Creates a service principal on Azure Active Directory
        
      .DESCRIPTION
        Creates a service principal on Azure Active Directory
        with the specified name and credentials.

        The principal will be granted the specified role on 
        the specified resource group.
    #>

    param
    (
      [Parameter(Mandatory=$true)]
      [string] $servicePrincipalName,

      [Parameter(Mandatory=$true)]
      [PSADPasswordCredential] $credentials,

      [Parameter(Mandatory=$true)]
      [string] $resourceGroupName,

      [Parameter(Mandatory=$true)]
      [string] $role
    )

    Write-Host "`t...Creating new service principal"
    Start-Sleep 1

    $principal = (New-AzADServicePrincipal -DisplayName "$($servicePrincipalName)" -PasswordCredential $credentials)

    if ($principal -eq $null)
    {
      return $null
    }
    
    Write-Host "`t...Assigning permissions (this will take a moment)"
    Start-Sleep 60

    # The propagation of the identity is non-deterministic.  Attempt to retry once after waiting for another minute if
    # the initial attempt fails.

    try 
    {
        New-AzRoleAssignment -ApplicationId "$($principal.ApplicationId)" -RoleDefinitionName "$($role)" -ResourceGroupName "$($resourceGroupName)" | Out-Null
    }
    catch 
    {
        Write-Host "`t...Still waiting for identity propagation (this will take a moment)"
        Start-Sleep 60
        New-AzRoleAssignment -ApplicationId "$($principal.ApplicationId)" -RoleDefinitionName "$($role)" -ResourceGroupName "$($resourceGroupName)" | Out-Null
        
        return $null
    }    

    return $principal
}