# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

using namespace Microsoft.Azure.Commands.ActiveDirectory

function SelectRandomCharacters
{    
    <#
      .SYNOPSIS
        Selects a number of random characters from a set.
    #>

    param
    (
        [Parameter(Mandatory=$true)]
        [int]$length, 

        [Parameter(Mandatory=$true)]
        [string]$characters
    ) 

    $random = (1..$length | ForEach { Get-Random -Maximum $characters.length })
    return (-join $characters[$random])
}

function GenerateRandomPassword()
{
    <#
      .SYNOPSIS
        Generates a random password that can be assigned to a service principal.
        
      .DESCRIPTION
        The password generated by this function will contain a mix of alpha,
        numeric, and special characters and will vary a small amount in its length.        
    #>

    $baseLength = (Get-Random -Minimum 28 -Maximum 37)      
    $upper = (Get-Random -Minimum 6 -Maximum ([int][Math]::Ceiling($baseLength / 3)))  
    $special = (Get-Random -Minimum 2 -Maximum 3)     
    $lower = ($baseLength - $upper - $special - $special)                                 

    $password = SelectRandomCharacters $lower "abcdefghiklmnoprstuvwxyz"
    $password += SelectRandomCharacters $upper "ABCDEFGHKLMNOPRSTUVWXYZ"
    $password += SelectRandomCharacters $special "1234567890"
    $password += SelectRandomCharacters $special "!$%&/()=?}][{@#*+"

    $scrambled = ($password.ToCharArray()) | Get-Random -Count ($password.Length)
    return (-join $scrambled)
}

function TearDownResources
{
    <#
      .SYNOPSIS
        Cleans up any Azure resources created by the script.
        
      .DESCRIPTION
        Responsible for cleaning up any Azure resources created 
        by the script in case of failure.
    #>
    
    param
    (
        [Parameter(Mandatory=$true)]
        [string] $resourceGroupName
    )
    
    Write-Host("Cleaning up resources that were created:")
    
    try 
    {
        Write-Host "`t...Removing resource group `"$($resourceGroupName)`""
        Remove-AzResourceGroup -Name "$($resourceGroupName)" -Force | Out-Null
    }
    catch 
    {
        Write-Error "The resource group: $($resourceGroupName) could not be removed.  You will need to delete this manually."
        Write-Error ""            
        Write-Error $_.Exception.Message
    }
}

function CreateServicePrincipal
{
    <#
      .SYNOPSIS
        Creates a service principal on Azure Active Directory
        
      .DESCRIPTION
        Creates a service principal on Azure Active Directory
        with the specified name and credentials.
    #>

    param
    (
      [Parameter(Mandatory=$true)]
      [string] $servicePrincipalName,

      [Parameter(Mandatory=$true)]
      [PSADPasswordCredential] $credentials
    )

    Write-Host "`t...Creating new service principal"
    Start-Sleep 1

    $principal = (New-AzADServicePrincipal -DisplayName "$($servicePrincipalName)" -PasswordCredential $credentials -ErrorAction SilentlyContinue)

    if ($principal -eq $null)
    {
      return $null
    }

    return $principal
}

function IsValidEventHubRegion
{
  <#
    .SYNOPSIS
      Checks if a region provides Azure Event Hubs
      
    .DESCRIPTION
      Lists all the regions that provide Azure Event Hubs
      and looks for the one passed in as a parameter. It returns 
      true if found or false otherwise. It outputs an error message listing 
      all the available regions if the one chosen could not be found.
  #>

  param
  (
    [Parameter(Mandatory=$true)]
    [string] $azureRegion
  )
  
  # Verify the location is valid for an Event Hubs namespace.

  $validLocations = @{}
  
  Get-AzLocation | where { $_.Providers.Contains("Microsoft.EventHub")} | ForEach { $validLocations[$_.Location] = $_.Location }

  $isValidLocation = $validLocations.Contains($azureRegion)

  if (!$isValidLocation)
  {
    Write-Error "The Azure region must be one of: `n$($validLocations.Keys -join ", ")`n`n" 
  }

  return $isValidLocation
}