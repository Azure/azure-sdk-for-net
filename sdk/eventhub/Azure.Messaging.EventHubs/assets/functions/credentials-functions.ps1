# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

function GenerateRandomCredentials()
{
  <#
    .SYNOPSIS
      It creates random credentials and returns them.
  #>

  return New-Object Microsoft.Azure.Commands.ActiveDirectory.PSADPasswordCredential -Property @{StartDate=Get-Date; EndDate=Get-Date -Year 2099; Password="$(GenerateRandomPassword)"} 
}

function GenerateRandomPassword() 
{
  <#
    .SYNOPSIS
      Generates a random password that can be assigned to a service principal.
      
    .DESCRIPTION
      The password generated by this function will contain a mix of alpha,
      numeric, and special characters and will vary a small amount in its length.        
  #>

  $baseLength = (Get-Random -Minimum 28 -Maximum 37)      
  $upper = (Get-Random -Minimum 6 -Maximum ([int][Math]::Ceiling($baseLength / 3)))  
  $special = (Get-Random -Minimum 2 -Maximum 3)     
  $lower = ($baseLength - $upper - $special - $special)                                 

  $password = SelectRandomCharacters $lower "abcdefghiklmnoprstuvwxyz"
  $password += SelectRandomCharacters $upper "ABCDEFGHKLMNOPRSTUVWXYZ"
  $password += SelectRandomCharacters $special "1234567890"
  $password += SelectRandomCharacters $special "!$%&/()=?}][{@#*+"

  $scrambled = ($password.ToCharArray()) | Get-Random -Count ($password.Length)
  return (-join $scrambled)
}

function SelectRandomCharacters 
{    
  <#
    .SYNOPSIS
      Selects a number of random characters from a set.
  #>

  param
  (
    [Parameter(Mandatory=$true)]
    [int]$length, 

    [Parameter(Mandatory=$true)]
    [string]$characters
  ) 

  $random = (1..$length | ForEach { Get-Random -Maximum $characters.length })
  return (-join $characters[$random])
}
