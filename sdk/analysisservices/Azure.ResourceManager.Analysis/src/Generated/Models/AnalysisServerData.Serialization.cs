// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Analysis.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Analysis
{
    public partial class AnalysisServerData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("sku");
            writer.WriteObjectValue(AnalysisSku);
            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags");
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("location");
            writer.WriteStringValue(Location);
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(AsAdministrators))
            {
                writer.WritePropertyName("asAdministrators");
                writer.WriteObjectValue(AsAdministrators);
            }
            if (Optional.IsDefined(BackupBlobContainerUri))
            {
                writer.WritePropertyName("backupBlobContainerUri");
                writer.WriteStringValue(BackupBlobContainerUri.AbsoluteUri);
            }
            if (Optional.IsDefined(GatewayDetails))
            {
                writer.WritePropertyName("gatewayDetails");
                writer.WriteObjectValue(GatewayDetails);
            }
            if (Optional.IsDefined(IPv4FirewallSettings))
            {
                writer.WritePropertyName("ipV4FirewallSettings");
                writer.WriteObjectValue(IPv4FirewallSettings);
            }
            if (Optional.IsDefined(QueryPoolConnectionMode))
            {
                writer.WritePropertyName("querypoolConnectionMode");
                writer.WriteStringValue(QueryPoolConnectionMode.Value.ToSerialString());
            }
            if (Optional.IsDefined(ManagedMode))
            {
                writer.WritePropertyName("managedMode");
                writer.WriteStringValue(ManagedMode.Value.ToString());
            }
            if (Optional.IsDefined(ServerMonitorMode))
            {
                writer.WritePropertyName("serverMonitorMode");
                writer.WriteStringValue(ServerMonitorMode.Value.ToString());
            }
            if (Optional.IsDefined(AnalysisServerSku))
            {
                writer.WritePropertyName("sku");
                writer.WriteObjectValue(AnalysisServerSku);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static AnalysisServerData DeserializeAnalysisServerData(JsonElement element)
        {
            AnalysisResourceSku sku = default;
            Optional<IDictionary<string, string>> tags = default;
            AzureLocation location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<ServerAdministrators> asAdministrators = default;
            Optional<Uri> backupBlobContainerUri = default;
            Optional<AnalysisGatewayDetails> gatewayDetails = default;
            Optional<AnalysisIPv4FirewallSettings> ipV4FirewallSettings = default;
            Optional<AnalysisConnectionMode> querypoolConnectionMode = default;
            Optional<AnalysisManagedMode> managedMode = default;
            Optional<ServerMonitorMode> serverMonitorMode = default;
            Optional<AnalysisState> state = default;
            Optional<AnalysisProvisioningState> provisioningState = default;
            Optional<string> serverFullName = default;
            Optional<AnalysisResourceSku> sku0 = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("sku"))
                {
                    sku = AnalysisResourceSku.DeserializeAnalysisResourceSku(property.Value);
                    continue;
                }
                if (property.NameEquals("tags"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"))
                {
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("asAdministrators"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            asAdministrators = ServerAdministrators.DeserializeServerAdministrators(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("backupBlobContainerUri"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                backupBlobContainerUri = null;
                                continue;
                            }
                            backupBlobContainerUri = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("gatewayDetails"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            gatewayDetails = AnalysisGatewayDetails.DeserializeAnalysisGatewayDetails(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("ipV4FirewallSettings"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            ipV4FirewallSettings = AnalysisIPv4FirewallSettings.DeserializeAnalysisIPv4FirewallSettings(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("querypoolConnectionMode"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            querypoolConnectionMode = property0.Value.GetString().ToAnalysisConnectionMode();
                            continue;
                        }
                        if (property0.NameEquals("managedMode"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            managedMode = new AnalysisManagedMode(property0.Value.GetInt32());
                            continue;
                        }
                        if (property0.NameEquals("serverMonitorMode"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            serverMonitorMode = new ServerMonitorMode(property0.Value.GetInt32());
                            continue;
                        }
                        if (property0.NameEquals("state"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            state = new AnalysisState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            provisioningState = new AnalysisProvisioningState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("serverFullName"))
                        {
                            serverFullName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("sku"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            sku0 = AnalysisResourceSku.DeserializeAnalysisResourceSku(property0.Value);
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new AnalysisServerData(id, name, type, systemData.Value, Optional.ToDictionary(tags), location, asAdministrators.Value, backupBlobContainerUri.Value, gatewayDetails.Value, ipV4FirewallSettings.Value, Optional.ToNullable(querypoolConnectionMode), Optional.ToNullable(managedMode), Optional.ToNullable(serverMonitorMode), Optional.ToNullable(state), Optional.ToNullable(provisioningState), serverFullName.Value, sku0.Value, sku);
        }
    }
}
