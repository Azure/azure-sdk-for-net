// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Analysiservices.Models
{
    /// <summary> The current state of Analysis Services resource. The state is to indicate more states outside of resource provisioning. </summary>
    public readonly partial struct AnalysiservicesState : IEquatable<AnalysiservicesState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AnalysiservicesState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AnalysiservicesState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DeletingValue = "Deleting";
        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";
        private const string PausedValue = "Paused";
        private const string SuspendedValue = "Suspended";
        private const string ProvisioningValue = "Provisioning";
        private const string UpdatingValue = "Updating";
        private const string SuspendingValue = "Suspending";
        private const string PausingValue = "Pausing";
        private const string ResumingValue = "Resuming";
        private const string PreparingValue = "Preparing";
        private const string ScalingValue = "Scaling";

        /// <summary> Deleting. </summary>
        public static AnalysiservicesState Deleting { get; } = new AnalysiservicesState(DeletingValue);
        /// <summary> Succeeded. </summary>
        public static AnalysiservicesState Succeeded { get; } = new AnalysiservicesState(SucceededValue);
        /// <summary> Failed. </summary>
        public static AnalysiservicesState Failed { get; } = new AnalysiservicesState(FailedValue);
        /// <summary> Paused. </summary>
        public static AnalysiservicesState Paused { get; } = new AnalysiservicesState(PausedValue);
        /// <summary> Suspended. </summary>
        public static AnalysiservicesState Suspended { get; } = new AnalysiservicesState(SuspendedValue);
        /// <summary> Provisioning. </summary>
        public static AnalysiservicesState Provisioning { get; } = new AnalysiservicesState(ProvisioningValue);
        /// <summary> Updating. </summary>
        public static AnalysiservicesState Updating { get; } = new AnalysiservicesState(UpdatingValue);
        /// <summary> Suspending. </summary>
        public static AnalysiservicesState Suspending { get; } = new AnalysiservicesState(SuspendingValue);
        /// <summary> Pausing. </summary>
        public static AnalysiservicesState Pausing { get; } = new AnalysiservicesState(PausingValue);
        /// <summary> Resuming. </summary>
        public static AnalysiservicesState Resuming { get; } = new AnalysiservicesState(ResumingValue);
        /// <summary> Preparing. </summary>
        public static AnalysiservicesState Preparing { get; } = new AnalysiservicesState(PreparingValue);
        /// <summary> Scaling. </summary>
        public static AnalysiservicesState Scaling { get; } = new AnalysiservicesState(ScalingValue);
        /// <summary> Determines if two <see cref="AnalysiservicesState"/> values are the same. </summary>
        public static bool operator ==(AnalysiservicesState left, AnalysiservicesState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AnalysiservicesState"/> values are not the same. </summary>
        public static bool operator !=(AnalysiservicesState left, AnalysiservicesState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AnalysiservicesState"/>. </summary>
        public static implicit operator AnalysiservicesState(string value) => new AnalysiservicesState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AnalysiservicesState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AnalysiservicesState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
