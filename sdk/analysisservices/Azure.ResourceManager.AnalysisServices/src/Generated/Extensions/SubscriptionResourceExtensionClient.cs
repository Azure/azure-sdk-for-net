// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.AnalysisServices.Models;

namespace Azure.ResourceManager.AnalysisServices
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    internal partial class SubscriptionResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _analysisServicesServerServersClientDiagnostics;
        private ServersRestOperations _analysisServicesServerServersRestClient;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class for mocking. </summary>
        protected SubscriptionResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics AnalysisServicesServerServersClientDiagnostics => _analysisServicesServerServersClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.AnalysisServices", AnalysisServicesServerResource.ResourceType.Namespace, Diagnostics);
        private ServersRestOperations AnalysisServicesServerServersRestClient => _analysisServicesServerServersRestClient ??= new ServersRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(AnalysisServicesServerResource.ResourceType));

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// Lists all the Analysis Services servers for the given subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/servers
        /// Operation Id: Servers_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AnalysisServicesServerResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AnalysisServicesServerResource> GetAnalysisServicesServersAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<AnalysisServicesServerResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AnalysisServicesServerServersClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetAnalysisServicesServers");
                scope.Start();
                try
                {
                    var response = await AnalysisServicesServerServersRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AnalysisServicesServerResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Lists all the Analysis Services servers for the given subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/servers
        /// Operation Id: Servers_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AnalysisServicesServerResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AnalysisServicesServerResource> GetAnalysisServicesServers(CancellationToken cancellationToken = default)
        {
            Page<AnalysisServicesServerResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AnalysisServicesServerServersClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetAnalysisServicesServers");
                scope.Start();
                try
                {
                    var response = AnalysisServicesServerServersRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AnalysisServicesServerResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Lists eligible SKUs for Analysis Services resource provider.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/skus
        /// Operation Id: Servers_ListSkusForNew
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ResourceSku" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ResourceSku> GetSkusForNewServersAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ResourceSku>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AnalysisServicesServerServersClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSkusForNewServers");
                scope.Start();
                try
                {
                    var response = await AnalysisServicesServerServersRestClient.ListSkusForNewAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Lists eligible SKUs for Analysis Services resource provider.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/skus
        /// Operation Id: Servers_ListSkusForNew
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ResourceSku" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ResourceSku> GetSkusForNewServers(CancellationToken cancellationToken = default)
        {
            Page<ResourceSku> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AnalysisServicesServerServersClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSkusForNewServers");
                scope.Start();
                try
                {
                    var response = AnalysisServicesServerServersRestClient.ListSkusForNew(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Check the name availability in the target location.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/locations/{location}/checkNameAvailability
        /// Operation Id: Servers_CheckNameAvailability
        /// </summary>
        /// <param name="location"> The region name which the operation will lookup into. </param>
        /// <param name="content"> Contains the information used to provision the Analysis Services server. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CheckServerNameAvailabilityResult>> CheckNameAvailabilityServerAsync(AzureLocation location, CheckServerNameAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            using var scope = AnalysisServicesServerServersClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.CheckNameAvailabilityServer");
            scope.Start();
            try
            {
                var response = await AnalysisServicesServerServersRestClient.CheckNameAvailabilityAsync(Id.SubscriptionId, location, content, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Check the name availability in the target location.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/locations/{location}/checkNameAvailability
        /// Operation Id: Servers_CheckNameAvailability
        /// </summary>
        /// <param name="location"> The region name which the operation will lookup into. </param>
        /// <param name="content"> Contains the information used to provision the Analysis Services server. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CheckServerNameAvailabilityResult> CheckNameAvailabilityServer(AzureLocation location, CheckServerNameAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            using var scope = AnalysisServicesServerServersClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.CheckNameAvailabilityServer");
            scope.Start();
            try
            {
                var response = AnalysisServicesServerServersRestClient.CheckNameAvailability(Id.SubscriptionId, location, content, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List the result of the specified operation.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/locations/{location}/operationresults/{operationId}
        /// Operation Id: Servers_ListOperationResults
        /// </summary>
        /// <param name="location"> The region name which the operation will lookup into. </param>
        /// <param name="operationId"> The target operation Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetOperationResultsServerAsync(AzureLocation location, string operationId, CancellationToken cancellationToken = default)
        {
            using var scope = AnalysisServicesServerServersClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetOperationResultsServer");
            scope.Start();
            try
            {
                var response = await AnalysisServicesServerServersRestClient.ListOperationResultsAsync(Id.SubscriptionId, location, operationId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List the result of the specified operation.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/locations/{location}/operationresults/{operationId}
        /// Operation Id: Servers_ListOperationResults
        /// </summary>
        /// <param name="location"> The region name which the operation will lookup into. </param>
        /// <param name="operationId"> The target operation Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetOperationResultsServer(AzureLocation location, string operationId, CancellationToken cancellationToken = default)
        {
            using var scope = AnalysisServicesServerServersClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetOperationResultsServer");
            scope.Start();
            try
            {
                var response = AnalysisServicesServerServersRestClient.ListOperationResults(Id.SubscriptionId, location, operationId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List the status of operation.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/locations/{location}/operationstatuses/{operationId}
        /// Operation Id: Servers_ListOperationStatuses
        /// </summary>
        /// <param name="location"> The region name which the operation will lookup into. </param>
        /// <param name="operationId"> The target operation Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<OperationStatus>> GetOperationStatusesServerAsync(AzureLocation location, string operationId, CancellationToken cancellationToken = default)
        {
            using var scope = AnalysisServicesServerServersClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetOperationStatusesServer");
            scope.Start();
            try
            {
                var response = await AnalysisServicesServerServersRestClient.ListOperationStatusesAsync(Id.SubscriptionId, location, operationId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List the status of operation.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/locations/{location}/operationstatuses/{operationId}
        /// Operation Id: Servers_ListOperationStatuses
        /// </summary>
        /// <param name="location"> The region name which the operation will lookup into. </param>
        /// <param name="operationId"> The target operation Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<OperationStatus> GetOperationStatusesServer(AzureLocation location, string operationId, CancellationToken cancellationToken = default)
        {
            using var scope = AnalysisServicesServerServersClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetOperationStatusesServer");
            scope.Start();
            try
            {
                var response = AnalysisServicesServerServersRestClient.ListOperationStatuses(Id.SubscriptionId, location, operationId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
