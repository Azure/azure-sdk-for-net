// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.AnalysisServices.Models
{
    /// <summary> The current state of Analysis Services resource. The state is to indicate more states outside of resource provisioning. </summary>
    public readonly partial struct AnalysisServicesState : IEquatable<AnalysisServicesState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AnalysisServicesState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AnalysisServicesState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DeletingValue = "Deleting";
        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";
        private const string PausedValue = "Paused";
        private const string SuspendedValue = "Suspended";
        private const string ProvisioningValue = "Provisioning";
        private const string UpdatingValue = "Updating";
        private const string SuspendingValue = "Suspending";
        private const string PausingValue = "Pausing";
        private const string ResumingValue = "Resuming";
        private const string PreparingValue = "Preparing";
        private const string ScalingValue = "Scaling";

        /// <summary> Deleting. </summary>
        public static AnalysisServicesState Deleting { get; } = new AnalysisServicesState(DeletingValue);
        /// <summary> Succeeded. </summary>
        public static AnalysisServicesState Succeeded { get; } = new AnalysisServicesState(SucceededValue);
        /// <summary> Failed. </summary>
        public static AnalysisServicesState Failed { get; } = new AnalysisServicesState(FailedValue);
        /// <summary> Paused. </summary>
        public static AnalysisServicesState Paused { get; } = new AnalysisServicesState(PausedValue);
        /// <summary> Suspended. </summary>
        public static AnalysisServicesState Suspended { get; } = new AnalysisServicesState(SuspendedValue);
        /// <summary> Provisioning. </summary>
        public static AnalysisServicesState Provisioning { get; } = new AnalysisServicesState(ProvisioningValue);
        /// <summary> Updating. </summary>
        public static AnalysisServicesState Updating { get; } = new AnalysisServicesState(UpdatingValue);
        /// <summary> Suspending. </summary>
        public static AnalysisServicesState Suspending { get; } = new AnalysisServicesState(SuspendingValue);
        /// <summary> Pausing. </summary>
        public static AnalysisServicesState Pausing { get; } = new AnalysisServicesState(PausingValue);
        /// <summary> Resuming. </summary>
        public static AnalysisServicesState Resuming { get; } = new AnalysisServicesState(ResumingValue);
        /// <summary> Preparing. </summary>
        public static AnalysisServicesState Preparing { get; } = new AnalysisServicesState(PreparingValue);
        /// <summary> Scaling. </summary>
        public static AnalysisServicesState Scaling { get; } = new AnalysisServicesState(ScalingValue);
        /// <summary> Determines if two <see cref="AnalysisServicesState"/> values are the same. </summary>
        public static bool operator ==(AnalysisServicesState left, AnalysisServicesState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AnalysisServicesState"/> values are not the same. </summary>
        public static bool operator !=(AnalysisServicesState left, AnalysisServicesState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AnalysisServicesState"/>. </summary>
        public static implicit operator AnalysisServicesState(string value) => new AnalysisServicesState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AnalysisServicesState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AnalysisServicesState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
