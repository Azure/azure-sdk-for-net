// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.SecretsStoreExtension.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.SecretsStoreExtension.Samples
{
    public partial class Sample_KeyVaultSecretProviderClassResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_AzureKeyVaultSecretProviderClassesGet()
        {
            // Generated from example definition: 2024-08-21-preview/AzureKeyVaultSecretProviderClasses_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "AzureKeyVaultSecretProviderClass_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this KeyVaultSecretProviderClassResource created on azure
            // for more information of creating KeyVaultSecretProviderClassResource, please refer to the document of KeyVaultSecretProviderClassResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rg-ssc-example";
            string azureKeyVaultSecretProviderClassName = "akvspc-ssc-example";
            ResourceIdentifier keyVaultSecretProviderClassResourceId = KeyVaultSecretProviderClassResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, azureKeyVaultSecretProviderClassName);
            KeyVaultSecretProviderClassResource keyVaultSecretProviderClass = client.GetKeyVaultSecretProviderClassResource(keyVaultSecretProviderClassResourceId);

            // invoke the operation
            KeyVaultSecretProviderClassResource result = await keyVaultSecretProviderClass.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            KeyVaultSecretProviderClassData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_AzureKeyVaultSecretProviderClassesDelete()
        {
            // Generated from example definition: 2024-08-21-preview/AzureKeyVaultSecretProviderClasses_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "AzureKeyVaultSecretProviderClass_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this KeyVaultSecretProviderClassResource created on azure
            // for more information of creating KeyVaultSecretProviderClassResource, please refer to the document of KeyVaultSecretProviderClassResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rg-ssc-example";
            string azureKeyVaultSecretProviderClassName = "akvspc-ssc-example";
            ResourceIdentifier keyVaultSecretProviderClassResourceId = KeyVaultSecretProviderClassResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, azureKeyVaultSecretProviderClassName);
            KeyVaultSecretProviderClassResource keyVaultSecretProviderClass = client.GetKeyVaultSecretProviderClassResource(keyVaultSecretProviderClassResourceId);

            // invoke the operation
            await keyVaultSecretProviderClass.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_AzureKeyVaultSecretProviderClassesUpdate()
        {
            // Generated from example definition: 2024-08-21-preview/AzureKeyVaultSecretProviderClasses_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "AzureKeyVaultSecretProviderClass_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this KeyVaultSecretProviderClassResource created on azure
            // for more information of creating KeyVaultSecretProviderClassResource, please refer to the document of KeyVaultSecretProviderClassResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rg-ssc-example";
            string azureKeyVaultSecretProviderClassName = "akvspc-ssc-example";
            ResourceIdentifier keyVaultSecretProviderClassResourceId = KeyVaultSecretProviderClassResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, azureKeyVaultSecretProviderClassName);
            KeyVaultSecretProviderClassResource keyVaultSecretProviderClass = client.GetKeyVaultSecretProviderClassResource(keyVaultSecretProviderClassResourceId);

            // invoke the operation
            KeyVaultSecretProviderClassPatch patch = new KeyVaultSecretProviderClassPatch
            {
                Tags =
{
["example-tag"] = "example-tag-value"
},
                Properties = new AzureKeyVaultSecretProviderClassUpdateProperties
                {
                    KeyvaultName = "example-ssc-key-vault",
                    ClientId = Guid.Parse("00000000-0000-0000-0000-000000000000"),
                    TenantId = Guid.Parse("00000000-0000-0000-0000-000000000000"),
                    Objects = "array: |\n  - |\n    objectName: my-secret-object\n    objectType: secret\n    objectVersionHistory: 1",
                },
            };
            ArmOperation<KeyVaultSecretProviderClassResource> lro = await keyVaultSecretProviderClass.UpdateAsync(WaitUntil.Completed, patch);
            KeyVaultSecretProviderClassResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            KeyVaultSecretProviderClassData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
