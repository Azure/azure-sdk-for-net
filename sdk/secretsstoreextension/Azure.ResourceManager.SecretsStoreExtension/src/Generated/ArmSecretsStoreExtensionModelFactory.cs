// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.SecretsStoreExtension.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmSecretsStoreExtensionModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="SecretsStoreExtension.KeyVaultSecretProviderClassData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"></param>
        /// <returns> A new <see cref="SecretsStoreExtension.KeyVaultSecretProviderClassData"/> instance for mocking. </returns>
        public static KeyVaultSecretProviderClassData KeyVaultSecretProviderClassData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, KeyVaultSecretProviderClassProperties properties = null, ExtendedLocation extendedLocation = null)
        {
            tags ??= new Dictionary<string, string>();

            return new KeyVaultSecretProviderClassData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                extendedLocation,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.KeyVaultSecretProviderClassProperties"/>. </summary>
        /// <param name="keyvaultName"> The name of the Azure Key Vault to sync secrets from. </param>
        /// <param name="clientId"> The user assigned managed identity client ID that should be used to access the Azure Key Vault. </param>
        /// <param name="tenantId"> The Azure Active Directory tenant ID that should be used for authenticating requests to the Azure Key Vault. </param>
        /// <param name="objects"> Objects defines the desired state of synced K8s secret objects. </param>
        /// <param name="provisioningState"> Provisioning state of the AzureKeyVaultSecretProviderClass instance. </param>
        /// <returns> A new <see cref="Models.KeyVaultSecretProviderClassProperties"/> instance for mocking. </returns>
        public static KeyVaultSecretProviderClassProperties KeyVaultSecretProviderClassProperties(string keyvaultName = null, Guid clientId = default, Guid tenantId = default, string objects = null, SecretsStoreExtensionProvisioningState? provisioningState = null)
        {
            return new KeyVaultSecretProviderClassProperties(
                keyvaultName,
                clientId,
                tenantId,
                objects,
                provisioningState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="SecretsStoreExtension.SecretSyncData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"></param>
        /// <returns> A new <see cref="SecretsStoreExtension.SecretSyncData"/> instance for mocking. </returns>
        public static SecretSyncData SecretSyncData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, SecretSyncProperties properties = null, ExtendedLocation extendedLocation = null)
        {
            tags ??= new Dictionary<string, string>();

            return new SecretSyncData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                extendedLocation,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SecretSyncProperties"/>. </summary>
        /// <param name="secretProviderClassName"> SecretProviderClassName specifies the name of the SecretProviderClass resource, which contains the information needed to access the cloud provider secret store. </param>
        /// <param name="serviceAccountName"> ServiceAccountName specifies the name of the service account used to access the cloud provider secret store. The audience field in the service account token must be passed as parameter in the controller configuration. The audience is used when requesting a token from the API server for the service account; the supported audiences are defined by each provider. </param>
        /// <param name="kubernetesSecretType"> Type specifies the type of the Kubernetes secret object, e.g. "Opaque" or"kubernetes.io/tls". The controller must have permission to create secrets of the specified type. </param>
        /// <param name="forceSynchronization"> ForceSynchronization can be used to force the secret synchronization. The secret synchronization is triggered by changing the value in this field. This field is not used to resolve synchronization conflicts. </param>
        /// <param name="objectSecretMapping"> An array of SecretObjectData that maps secret data from the external secret provider to the Kubernetes secret. Each entry specifies the source secret in the external provider and the corresponding key in the Kubernetes secret. </param>
        /// <param name="status"> SecretSyncStatus defines the observed state of the secret synchronization process. </param>
        /// <param name="provisioningState"> Provisioning state of the SecretSync instance. </param>
        /// <returns> A new <see cref="Models.SecretSyncProperties"/> instance for mocking. </returns>
        public static SecretSyncProperties SecretSyncProperties(string secretProviderClassName = null, string serviceAccountName = null, KubernetesSecretType kubernetesSecretType = default, string forceSynchronization = null, IEnumerable<KubernetesSecretObjectMapping> objectSecretMapping = null, SecretSyncStatus status = null, SecretsStoreExtensionProvisioningState? provisioningState = null)
        {
            objectSecretMapping ??= new List<KubernetesSecretObjectMapping>();

            return new SecretSyncProperties(
                secretProviderClassName,
                serviceAccountName,
                kubernetesSecretType,
                forceSynchronization,
                objectSecretMapping?.ToList(),
                status,
                provisioningState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SecretSyncStatus"/>. </summary>
        /// <param name="lastSuccessfulSyncOn"> LastSuccessfulSyncTime represents the last time the secret was retrieved from the Provider and updated. </param>
        /// <param name="conditions"> Conditions represent the status of the secret create and update processes. The status can be True, False, or Unknown with various reasons and messages explaining the state. Examples of reasons include CreateSucceeded, ProviderError, InvalidClusterSecretLabelError, InvalidClusterSecretAnnotationError, UnknownError, ValidatingAdmissionPolicyCheckFailed, UserInputValidationFailed, ControllerSpcError, ControllerInternalError, NoValueChange, and ValueChangeOrForceUpdateDetected. </param>
        /// <returns> A new <see cref="Models.SecretSyncStatus"/> instance for mocking. </returns>
        public static SecretSyncStatus SecretSyncStatus(DateTimeOffset? lastSuccessfulSyncOn = null, IEnumerable<SecretSyncCondition> conditions = null)
        {
            conditions ??= new List<SecretSyncCondition>();

            return new SecretSyncStatus(lastSuccessfulSyncOn, conditions?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SecretSyncCondition"/>. </summary>
        /// <param name="lastTransitionOn"> LastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable. </param>
        /// <param name="message"> Message is a human readable message indicating details about the transition. This may be an empty string. </param>
        /// <param name="observedGeneration"> ObservedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance. </param>
        /// <param name="reason"> Reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty. </param>
        /// <param name="status"> Status of the condition, one of True, False, Unknown. </param>
        /// <param name="type"> Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to de-conflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt). </param>
        /// <returns> A new <see cref="Models.SecretSyncCondition"/> instance for mocking. </returns>
        public static SecretSyncCondition SecretSyncCondition(DateTimeOffset? lastTransitionOn = null, string message = null, long? observedGeneration = null, string reason = null, SecretSyncConditionStatusType status = default, string type = null)
        {
            return new SecretSyncCondition(
                lastTransitionOn,
                message,
                observedGeneration,
                reason,
                status,
                type,
                serializedAdditionalRawData: null);
        }
    }
}
