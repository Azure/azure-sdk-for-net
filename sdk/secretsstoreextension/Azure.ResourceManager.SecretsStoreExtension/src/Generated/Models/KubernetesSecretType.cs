// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SecretsStoreExtension.Models
{
    /// <summary> Supported Kubernetes secret types. </summary>
    public readonly partial struct KubernetesSecretType : IEquatable<KubernetesSecretType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="KubernetesSecretType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public KubernetesSecretType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OpaqueValue = "Opaque";
        private const string TlsValue = "kubernetes.io/tls";

        /// <summary> Opaque is the default secret type. </summary>
        public static KubernetesSecretType Opaque { get; } = new KubernetesSecretType(OpaqueValue);
        /// <summary> The kubernetes.io/tls secret type is for storing a certificate and its associated key that are typically used for TLS. </summary>
        public static KubernetesSecretType Tls { get; } = new KubernetesSecretType(TlsValue);
        /// <summary> Determines if two <see cref="KubernetesSecretType"/> values are the same. </summary>
        public static bool operator ==(KubernetesSecretType left, KubernetesSecretType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="KubernetesSecretType"/> values are not the same. </summary>
        public static bool operator !=(KubernetesSecretType left, KubernetesSecretType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="KubernetesSecretType"/>. </summary>
        public static implicit operator KubernetesSecretType(string value) => new KubernetesSecretType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is KubernetesSecretType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(KubernetesSecretType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
