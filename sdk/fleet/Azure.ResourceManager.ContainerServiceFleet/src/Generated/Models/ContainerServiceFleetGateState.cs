// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ContainerServiceFleet.Models
{
    /// <summary> The state of the Gate. </summary>
    public readonly partial struct ContainerServiceFleetGateState : IEquatable<ContainerServiceFleetGateState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ContainerServiceFleetGateState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ContainerServiceFleetGateState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PendingValue = "Pending";
        private const string SkippedValue = "Skipped";
        private const string CompletedValue = "Completed";

        /// <summary> A Pending Gate will continue to block the staged rollout process it is controlling. </summary>
        public static ContainerServiceFleetGateState Pending { get; } = new ContainerServiceFleetGateState(PendingValue);
        /// <summary> A Skipped Gate means that the staged rollout process it is controlling was skipped. </summary>
        public static ContainerServiceFleetGateState Skipped { get; } = new ContainerServiceFleetGateState(SkippedValue);
        /// <summary> An Completed Gate allows the staged rollout process to continue. </summary>
        public static ContainerServiceFleetGateState Completed { get; } = new ContainerServiceFleetGateState(CompletedValue);
        /// <summary> Determines if two <see cref="ContainerServiceFleetGateState"/> values are the same. </summary>
        public static bool operator ==(ContainerServiceFleetGateState left, ContainerServiceFleetGateState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ContainerServiceFleetGateState"/> values are not the same. </summary>
        public static bool operator !=(ContainerServiceFleetGateState left, ContainerServiceFleetGateState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ContainerServiceFleetGateState"/>. </summary>
        public static implicit operator ContainerServiceFleetGateState(string value) => new ContainerServiceFleetGateState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ContainerServiceFleetGateState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ContainerServiceFleetGateState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
