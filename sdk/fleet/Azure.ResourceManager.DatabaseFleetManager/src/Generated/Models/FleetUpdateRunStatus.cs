// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.DatabaseFleetManager.Models
{
    /// <summary> The status of a UpdateRun. </summary>
    public partial class FleetUpdateRunStatus
    {
        /// <summary> Initializes a new instance of FleetUpdateRunStatus. </summary>
        internal FleetUpdateRunStatus()
        {
            Stages = new ChangeTrackingList<FleetUpdateStageStatus>();
        }

        /// <summary> Initializes a new instance of FleetUpdateRunStatus. </summary>
        /// <param name="status"> The status of the UpdateRun. </param>
        /// <param name="stages"> The stages composing an update run. Stages are run sequentially withing an UpdateRun. </param>
        /// <param name="nodeImageSelection"> The node image upgrade specs for the update run. It is only set in update run when `NodeImageSelection.type` is `Consistent`. </param>
        internal FleetUpdateRunStatus(FleetUpdateOperationStatus status, IReadOnlyList<FleetUpdateStageStatus> stages, NodeImageSelectionStatus nodeImageSelection)
        {
            Status = status;
            Stages = stages;
            NodeImageSelection = nodeImageSelection;
        }

        /// <summary> The status of the UpdateRun. </summary>
        public FleetUpdateOperationStatus Status { get; }
        /// <summary> The stages composing an update run. Stages are run sequentially withing an UpdateRun. </summary>
        public IReadOnlyList<FleetUpdateStageStatus> Stages { get; }
        /// <summary> The node image upgrade specs for the update run. It is only set in update run when `NodeImageSelection.type` is `Consistent`. </summary>
        internal NodeImageSelectionStatus NodeImageSelection { get; }
        /// <summary> The image versions to upgrade the nodes to. </summary>
        public IReadOnlyList<NodeImageVersion> SelectedNodeImageVersions
        {
            get => NodeImageSelection?.SelectedNodeImageVersions;
        }
    }
}
