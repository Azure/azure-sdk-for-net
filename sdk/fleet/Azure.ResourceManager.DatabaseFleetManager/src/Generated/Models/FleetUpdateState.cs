// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DatabaseFleetManager.Models
{
    /// <summary> The state of the UpdateRun, UpdateStage, UpdateGroup, or MemberUpdate. </summary>
    public readonly partial struct FleetUpdateState : IEquatable<FleetUpdateState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="FleetUpdateState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FleetUpdateState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotStartedValue = "NotStarted";
        private const string RunningValue = "Running";
        private const string StoppingValue = "Stopping";
        private const string StoppedValue = "Stopped";
        private const string SkippedValue = "Skipped";
        private const string FailedValue = "Failed";
        private const string CompletedValue = "Completed";

        /// <summary> The state of an UpdateRun/UpdateStage/UpdateGroup/MemberUpdate that has not been started. </summary>
        public static FleetUpdateState NotStarted { get; } = new FleetUpdateState(NotStartedValue);
        /// <summary> The state of an UpdateRun/UpdateStage/UpdateGroup/MemberUpdate that is running. </summary>
        public static FleetUpdateState Running { get; } = new FleetUpdateState(RunningValue);
        /// <summary> The state of an UpdateRun/UpdateStage/UpdateGroup/MemberUpdate that is being stopped. </summary>
        public static FleetUpdateState Stopping { get; } = new FleetUpdateState(StoppingValue);
        /// <summary> The state of an UpdateRun/UpdateStage/UpdateGroup/MemberUpdate that has stopped. </summary>
        public static FleetUpdateState Stopped { get; } = new FleetUpdateState(StoppedValue);
        /// <summary> The state of an UpdateRun/UpdateStage/UpdateGroup/MemberUpdate that has been skipped. </summary>
        public static FleetUpdateState Skipped { get; } = new FleetUpdateState(SkippedValue);
        /// <summary> The state of an UpdateRun/UpdateStage/UpdateGroup/MemberUpdate that has failed. </summary>
        public static FleetUpdateState Failed { get; } = new FleetUpdateState(FailedValue);
        /// <summary> The state of an UpdateRun/UpdateStage/UpdateGroup/MemberUpdate that has completed. </summary>
        public static FleetUpdateState Completed { get; } = new FleetUpdateState(CompletedValue);
        /// <summary> Determines if two <see cref="FleetUpdateState"/> values are the same. </summary>
        public static bool operator ==(FleetUpdateState left, FleetUpdateState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FleetUpdateState"/> values are not the same. </summary>
        public static bool operator !=(FleetUpdateState left, FleetUpdateState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="FleetUpdateState"/>. </summary>
        public static implicit operator FleetUpdateState(string value) => new FleetUpdateState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FleetUpdateState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FleetUpdateState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
