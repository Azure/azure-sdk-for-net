// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DatabaseFleetManager.Models
{
    /// <summary> The state of the UpdateRun, UpdateStage, UpdateGroup, or MemberUpdate. </summary>
    public readonly partial struct UpdateState : IEquatable<UpdateState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="UpdateState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public UpdateState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotStartedValue = "NotStarted";
        private const string RunningValue = "Running";
        private const string StoppingValue = "Stopping";
        private const string StoppedValue = "Stopped";
        private const string SkippedValue = "Skipped";
        private const string FailedValue = "Failed";
        private const string CompletedValue = "Completed";

        /// <summary> The state of an UpdateRun/UpdateStage/UpdateGroup/MemberUpdate that has not been started. </summary>
        public static UpdateState NotStarted { get; } = new UpdateState(NotStartedValue);
        /// <summary> The state of an UpdateRun/UpdateStage/UpdateGroup/MemberUpdate that is running. </summary>
        public static UpdateState Running { get; } = new UpdateState(RunningValue);
        /// <summary> The state of an UpdateRun/UpdateStage/UpdateGroup/MemberUpdate that is being stopped. </summary>
        public static UpdateState Stopping { get; } = new UpdateState(StoppingValue);
        /// <summary> The state of an UpdateRun/UpdateStage/UpdateGroup/MemberUpdate that has stopped. </summary>
        public static UpdateState Stopped { get; } = new UpdateState(StoppedValue);
        /// <summary> The state of an UpdateRun/UpdateStage/UpdateGroup/MemberUpdate that has been skipped. </summary>
        public static UpdateState Skipped { get; } = new UpdateState(SkippedValue);
        /// <summary> The state of an UpdateRun/UpdateStage/UpdateGroup/MemberUpdate that has failed. </summary>
        public static UpdateState Failed { get; } = new UpdateState(FailedValue);
        /// <summary> The state of an UpdateRun/UpdateStage/UpdateGroup/MemberUpdate that has completed. </summary>
        public static UpdateState Completed { get; } = new UpdateState(CompletedValue);
        /// <summary> Determines if two <see cref="UpdateState"/> values are the same. </summary>
        public static bool operator ==(UpdateState left, UpdateState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="UpdateState"/> values are not the same. </summary>
        public static bool operator !=(UpdateState left, UpdateState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="UpdateState"/>. </summary>
        public static implicit operator UpdateState(string value) => new UpdateState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is UpdateState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(UpdateState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
