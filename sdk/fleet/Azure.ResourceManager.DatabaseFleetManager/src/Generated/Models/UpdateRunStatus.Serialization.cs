// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DatabaseFleetManager.Models
{
    public partial class UpdateRunStatus
    {
        internal static UpdateRunStatus DeserializeUpdateRunStatus(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<UpdateStatus> status = default;
            Optional<IReadOnlyList<UpdateStageStatus>> stages = default;
            Optional<NodeImageSelectionStatus> nodeImageSelection = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("status"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    status = UpdateStatus.DeserializeUpdateStatus(property.Value);
                    continue;
                }
                if (property.NameEquals("stages"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<UpdateStageStatus> array = new List<UpdateStageStatus>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(UpdateStageStatus.DeserializeUpdateStageStatus(item));
                    }
                    stages = array;
                    continue;
                }
                if (property.NameEquals("nodeImageSelection"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nodeImageSelection = NodeImageSelectionStatus.DeserializeNodeImageSelectionStatus(property.Value);
                    continue;
                }
            }
            return new UpdateRunStatus(status.Value, Optional.ToList(stages), nodeImageSelection.Value);
        }
    }
}
