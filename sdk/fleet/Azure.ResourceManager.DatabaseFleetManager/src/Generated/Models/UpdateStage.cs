// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.DatabaseFleetManager.Models
{
    /// <summary>
    /// Contains the groups to be updated by an UpdateRun.
    /// Update order:
    /// - Sequential between stages: Stages run sequentially. The previous stage must complete before the next one starts.
    /// - Parallel within a stage: Groups within a stage run in parallel.
    /// - Sequential within a group: Clusters within a group are updated sequentially.
    /// </summary>
    public partial class UpdateStage
    {
        /// <summary> Initializes a new instance of UpdateStage. </summary>
        /// <param name="name"> The name of the stage. Must be unique within the UpdateRun. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public UpdateStage(string name)
        {
            Argument.AssertNotNull(name, nameof(name));

            Name = name;
            Groups = new ChangeTrackingList<UpdateGroup>();
        }

        /// <summary> Initializes a new instance of UpdateStage. </summary>
        /// <param name="name"> The name of the stage. Must be unique within the UpdateRun. </param>
        /// <param name="groups">
        /// A list of group names that compose the stage.
        /// The groups will be updated in parallel. Each group name can only appear once in the UpdateRun.
        /// </param>
        /// <param name="afterStageWaitInSeconds"> The time in seconds to wait at the end of this stage before starting the next one. Defaults to 0 seconds if unspecified. </param>
        internal UpdateStage(string name, IList<UpdateGroup> groups, int? afterStageWaitInSeconds)
        {
            Name = name;
            Groups = groups;
            AfterStageWaitInSeconds = afterStageWaitInSeconds;
        }

        /// <summary> The name of the stage. Must be unique within the UpdateRun. </summary>
        public string Name { get; set; }
        /// <summary>
        /// A list of group names that compose the stage.
        /// The groups will be updated in parallel. Each group name can only appear once in the UpdateRun.
        /// </summary>
        public IList<UpdateGroup> Groups { get; }
        /// <summary> The time in seconds to wait at the end of this stage before starting the next one. Defaults to 0 seconds if unspecified. </summary>
        public int? AfterStageWaitInSeconds { get; set; }
    }
}
