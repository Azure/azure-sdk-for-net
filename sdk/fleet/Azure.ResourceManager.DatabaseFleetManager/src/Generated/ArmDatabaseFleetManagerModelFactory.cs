// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;
using Azure.Core;
using Azure.ResourceManager.DatabaseFleetManager;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.DatabaseFleetManager.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmDatabaseFleetManagerModelFactory
    {
        /// <summary> Initializes a new instance of DatabaseFleetData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="eTag"> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </param>
        /// <param name="identity"> Managed identity. </param>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="hubProfile"> The FleetHubProfile configures the Fleet's hub. </param>
        /// <returns> A new <see cref="DatabaseFleetManager.DatabaseFleetData"/> instance for mocking. </returns>
        public static DatabaseFleetData DatabaseFleetData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ETag? eTag = null, ManagedServiceIdentity identity = null, FleetProvisioningState? provisioningState = null, FleetHubProfile hubProfile = null)
        {
            tags ??= new Dictionary<string, string>();

            return new DatabaseFleetData(id, name, resourceType, systemData, tags, location, eTag, identity, provisioningState, hubProfile);
        }

        /// <summary> Initializes a new instance of FleetHubProfile. </summary>
        /// <param name="dnsPrefix"> DNS prefix used to create the FQDN for the Fleet hub. </param>
        /// <param name="apiServerAccessProfile"> The access profile for the Fleet hub API server. </param>
        /// <param name="agentSubnetId"> The agent profile for the Fleet hub. </param>
        /// <param name="fqdn"> The FQDN of the Fleet hub. </param>
        /// <param name="kubernetesVersion"> The Kubernetes version of the Fleet hub. </param>
        /// <returns> A new <see cref="Models.FleetHubProfile"/> instance for mocking. </returns>
        public static FleetHubProfile FleetHubProfile(string dnsPrefix = null, FleetApiServerAccessProfile apiServerAccessProfile = null, ResourceIdentifier agentSubnetId = null, string fqdn = null, string kubernetesVersion = null)
        {
            return new FleetHubProfile(dnsPrefix, apiServerAccessProfile, agentSubnetId != null ? new FleetAgentProfile(agentSubnetId) : null, fqdn, kubernetesVersion);
        }

        /// <summary> Initializes a new instance of FleetCredentialResults. </summary>
        /// <param name="kubeconfigs"> Array of base64-encoded Kubernetes configuration files. </param>
        /// <returns> A new <see cref="Models.FleetCredentialResults"/> instance for mocking. </returns>
        public static FleetCredentialResults FleetCredentialResults(IEnumerable<FleetCredentialResult> kubeconfigs = null)
        {
            kubeconfigs ??= new List<FleetCredentialResult>();

            return new FleetCredentialResults(kubeconfigs?.ToList());
        }

        /// <summary> Initializes a new instance of FleetCredentialResult. </summary>
        /// <param name="name"> The name of the credential. </param>
        /// <param name="value"> Base64-encoded Kubernetes configuration file. </param>
        /// <returns> A new <see cref="Models.FleetCredentialResult"/> instance for mocking. </returns>
        public static FleetCredentialResult FleetCredentialResult(string name = null, byte[] value = null)
        {
            return new FleetCredentialResult(name, value);
        }

        /// <summary> Initializes a new instance of DatabaseFleetMemberData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="eTag"> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </param>
        /// <param name="clusterResourceId"> The ARM resource id of the cluster that joins the Fleet. Must be a valid Azure resource id. e.g.: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{clusterName}'. </param>
        /// <param name="group"> The group this member belongs to for multi-cluster update management. </param>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <returns> A new <see cref="DatabaseFleetManager.DatabaseFleetMemberData"/> instance for mocking. </returns>
        public static DatabaseFleetMemberData DatabaseFleetMemberData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ETag? eTag = null, ResourceIdentifier clusterResourceId = null, string group = null, FleetMemberProvisioningState? provisioningState = null)
        {
            return new DatabaseFleetMemberData(id, name, resourceType, systemData, eTag, clusterResourceId, group, provisioningState);
        }

        /// <summary> Initializes a new instance of DatabaseFleetUpdateRunData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="eTag"> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </param>
        /// <param name="provisioningState"> The provisioning state of the UpdateRun resource. </param>
        /// <param name="strategyStages">
        /// The strategy defines the order in which the clusters will be updated.
        /// If not set, all members will be updated sequentially. The UpdateRun status will show a single UpdateStage and a single UpdateGroup targeting all members.
        /// The strategy of the UpdateRun can be modified until the run is started.
        /// </param>
        /// <param name="managedClusterUpdate"> The update to be applied to all clusters in the UpdateRun. The managedClusterUpdate can be modified until the run is started. </param>
        /// <param name="status"> The status of the UpdateRun. </param>
        /// <returns> A new <see cref="DatabaseFleetManager.DatabaseFleetUpdateRunData"/> instance for mocking. </returns>
        public static DatabaseFleetUpdateRunData DatabaseFleetUpdateRunData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ETag? eTag = null, FleetUpdateRunProvisioningState? provisioningState = null, IEnumerable<FleetUpdateStage> strategyStages = null, FleetManagedClusterUpdate managedClusterUpdate = null, FleetUpdateRunStatus status = null)
        {
            strategyStages ??= new List<FleetUpdateStage>();

            return new DatabaseFleetUpdateRunData(id, name, resourceType, systemData, eTag, provisioningState, strategyStages != null ? new FleetUpdateRunStrategy(strategyStages?.ToList()) : null, managedClusterUpdate, status);
        }

        /// <summary> Initializes a new instance of FleetUpdateRunStatus. </summary>
        /// <param name="status"> The status of the UpdateRun. </param>
        /// <param name="stages"> The stages composing an update run. Stages are run sequentially withing an UpdateRun. </param>
        /// <param name="selectedNodeImageVersions"> The node image upgrade specs for the update run. It is only set in update run when `NodeImageSelection.type` is `Consistent`. </param>
        /// <returns> A new <see cref="Models.FleetUpdateRunStatus"/> instance for mocking. </returns>
        public static FleetUpdateRunStatus FleetUpdateRunStatus(FleetUpdateOperationStatus status = null, IEnumerable<FleetUpdateStageStatus> stages = null, IEnumerable<NodeImageVersion> selectedNodeImageVersions = null)
        {
            stages ??= new List<FleetUpdateStageStatus>();
            selectedNodeImageVersions ??= new List<NodeImageVersion>();

            return new FleetUpdateRunStatus(status, stages?.ToList(), selectedNodeImageVersions != null ? new NodeImageSelectionStatus(selectedNodeImageVersions?.ToList()) : null);
        }

        /// <summary> Initializes a new instance of FleetUpdateOperationStatus. </summary>
        /// <param name="startOn"> The time the operation or group was started. </param>
        /// <param name="completedOn"> The time the operation or group was completed. </param>
        /// <param name="state"> The State of the operation or group. </param>
        /// <param name="error"> The error details when a failure is encountered. </param>
        /// <returns> A new <see cref="Models.FleetUpdateOperationStatus"/> instance for mocking. </returns>
        public static FleetUpdateOperationStatus FleetUpdateOperationStatus(DateTimeOffset? startOn = null, DateTimeOffset? completedOn = null, FleetUpdateState? state = null, ResponseError error = null)
        {
            return new FleetUpdateOperationStatus(startOn, completedOn, state, error);
        }

        /// <summary> Initializes a new instance of FleetUpdateStageStatus. </summary>
        /// <param name="status"> The status of the UpdateStage. </param>
        /// <param name="name"> The name of the UpdateStage. </param>
        /// <param name="groups"> The list of groups to be updated as part of this UpdateStage. </param>
        /// <param name="afterStageWaitStatus"> The status of the wait period configured on the UpdateStage. </param>
        /// <returns> A new <see cref="Models.FleetUpdateStageStatus"/> instance for mocking. </returns>
        public static FleetUpdateStageStatus FleetUpdateStageStatus(FleetUpdateOperationStatus status = null, string name = null, IEnumerable<FleetUpdateGroupStatus> groups = null, FleetWaitStatus afterStageWaitStatus = null)
        {
            groups ??= new List<FleetUpdateGroupStatus>();

            return new FleetUpdateStageStatus(status, name, groups?.ToList(), afterStageWaitStatus);
        }

        /// <summary> Initializes a new instance of FleetUpdateGroupStatus. </summary>
        /// <param name="status"> The status of the UpdateGroup. </param>
        /// <param name="name"> The name of the UpdateGroup. </param>
        /// <param name="members"> The list of member this UpdateGroup updates. </param>
        /// <returns> A new <see cref="Models.FleetUpdateGroupStatus"/> instance for mocking. </returns>
        public static FleetUpdateGroupStatus FleetUpdateGroupStatus(FleetUpdateOperationStatus status = null, string name = null, IEnumerable<MemberUpdateStatus> members = null)
        {
            members ??= new List<MemberUpdateStatus>();

            return new FleetUpdateGroupStatus(status, name, members?.ToList());
        }

        /// <summary> Initializes a new instance of MemberUpdateStatus. </summary>
        /// <param name="status"> The status of the MemberUpdate operation. </param>
        /// <param name="name"> The name of the FleetMember. </param>
        /// <param name="clusterResourceId"> The Azure resource id of the target Kubernetes cluster. </param>
        /// <param name="operationId"> The operation resource id of the latest attempt to perform the operation. </param>
        /// <param name="message"> The status message after processing the member update operation. </param>
        /// <returns> A new <see cref="Models.MemberUpdateStatus"/> instance for mocking. </returns>
        public static MemberUpdateStatus MemberUpdateStatus(FleetUpdateOperationStatus status = null, string name = null, ResourceIdentifier clusterResourceId = null, string operationId = null, string message = null)
        {
            return new MemberUpdateStatus(status, name, clusterResourceId, operationId, message);
        }

        /// <summary> Initializes a new instance of FleetWaitStatus. </summary>
        /// <param name="status"> The status of the wait duration. </param>
        /// <param name="waitDurationInSeconds"> The wait duration configured in seconds. </param>
        /// <returns> A new <see cref="Models.FleetWaitStatus"/> instance for mocking. </returns>
        public static FleetWaitStatus FleetWaitStatus(FleetUpdateOperationStatus status = null, int? waitDurationInSeconds = null)
        {
            return new FleetWaitStatus(status, waitDurationInSeconds);
        }

        /// <summary> Initializes a new instance of NodeImageVersion. </summary>
        /// <param name="version"> The image version to upgrade the nodes to (e.g., 'AKSUbuntu-1804gen2containerd-2022.12.13'). </param>
        /// <returns> A new <see cref="Models.NodeImageVersion"/> instance for mocking. </returns>
        public static NodeImageVersion NodeImageVersion(string version = null)
        {
            return new NodeImageVersion(version);
        }
    }
}
