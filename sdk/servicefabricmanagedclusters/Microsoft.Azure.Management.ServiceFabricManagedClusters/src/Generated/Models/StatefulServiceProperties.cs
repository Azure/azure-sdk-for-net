// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ServiceFabricManagedClusters.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The properties of a stateful service resource.
    /// </summary>
    [Newtonsoft.Json.JsonObject("Stateful")]
    public partial class StatefulServiceProperties : ServiceResourceProperties
    {
        /// <summary>
        /// Initializes a new instance of the StatefulServiceProperties class.
        /// </summary>
        public StatefulServiceProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StatefulServiceProperties class.
        /// </summary>
        /// <param name="serviceTypeName">The name of the service type</param>
        /// <param name="placementConstraints">The placement constraints as a
        /// string. Placement constraints are boolean expressions on node
        /// properties and allow for restricting a service to particular nodes
        /// based on the service requirements. For example, to place a service
        /// on nodes where NodeType is blue specify the following: "NodeColor
        /// == blue)".</param>
        /// <param name="defaultMoveCost">Possible values include: 'Zero',
        /// 'Low', 'Medium', 'High'</param>
        /// <param name="provisioningState">The current deployment or
        /// provisioning state, which only appears in the response</param>
        /// <param name="servicePackageActivationMode">The activation Mode of
        /// the service package. Possible values include: 'SharedProcess',
        /// 'ExclusiveProcess'</param>
        /// <param name="hasPersistedState">A flag indicating whether this is a
        /// persistent service which stores states on the local disk. If it is
        /// then the value of this property is true, if not it is
        /// false.</param>
        /// <param name="targetReplicaSetSize">The target replica set size as a
        /// number.</param>
        /// <param name="minReplicaSetSize">The minimum replica set size as a
        /// number.</param>
        /// <param name="replicaRestartWaitDuration">The duration between when
        /// a replica goes down and when a new replica is created, represented
        /// in ISO 8601 format "hh:mm:ss".</param>
        /// <param name="quorumLossWaitDuration">The maximum duration for which
        /// a partition is allowed to be in a state of quorum loss, represented
        /// in ISO 8601 format "hh:mm:ss".</param>
        /// <param name="standByReplicaKeepDuration">The definition on how long
        /// StandBy replicas should be maintained before being removed,
        /// represented in ISO 8601 format "hh:mm:ss".</param>
        /// <param name="servicePlacementTimeLimit">The duration for which
        /// replicas can stay InBuild before reporting that build is stuck,
        /// represented in ISO 8601 format "hh:mm:ss".</param>
        public StatefulServiceProperties(string serviceTypeName, Partition partitionDescription, string placementConstraints = default(string), IList<ServiceCorrelation> correlationScheme = default(IList<ServiceCorrelation>), IList<ServiceLoadMetric> serviceLoadMetrics = default(IList<ServiceLoadMetric>), IList<ServicePlacementPolicy> servicePlacementPolicies = default(IList<ServicePlacementPolicy>), string defaultMoveCost = default(string), IList<ScalingPolicy> scalingPolicies = default(IList<ScalingPolicy>), string provisioningState = default(string), string servicePackageActivationMode = default(string), bool? hasPersistedState = default(bool?), int? targetReplicaSetSize = default(int?), int? minReplicaSetSize = default(int?), string replicaRestartWaitDuration = default(string), string quorumLossWaitDuration = default(string), string standByReplicaKeepDuration = default(string), string servicePlacementTimeLimit = default(string))
            : base(serviceTypeName, partitionDescription, placementConstraints, correlationScheme, serviceLoadMetrics, servicePlacementPolicies, defaultMoveCost, scalingPolicies, provisioningState, servicePackageActivationMode)
        {
            HasPersistedState = hasPersistedState;
            TargetReplicaSetSize = targetReplicaSetSize;
            MinReplicaSetSize = minReplicaSetSize;
            ReplicaRestartWaitDuration = replicaRestartWaitDuration;
            QuorumLossWaitDuration = quorumLossWaitDuration;
            StandByReplicaKeepDuration = standByReplicaKeepDuration;
            ServicePlacementTimeLimit = servicePlacementTimeLimit;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a flag indicating whether this is a persistent service
        /// which stores states on the local disk. If it is then the value of
        /// this property is true, if not it is false.
        /// </summary>
        [JsonProperty(PropertyName = "hasPersistedState")]
        public bool? HasPersistedState { get; set; }

        /// <summary>
        /// Gets or sets the target replica set size as a number.
        /// </summary>
        [JsonProperty(PropertyName = "targetReplicaSetSize")]
        public int? TargetReplicaSetSize { get; set; }

        /// <summary>
        /// Gets or sets the minimum replica set size as a number.
        /// </summary>
        [JsonProperty(PropertyName = "minReplicaSetSize")]
        public int? MinReplicaSetSize { get; set; }

        /// <summary>
        /// Gets or sets the duration between when a replica goes down and when
        /// a new replica is created, represented in ISO 8601 format
        /// "hh:mm:ss".
        /// </summary>
        [JsonProperty(PropertyName = "replicaRestartWaitDuration")]
        public string ReplicaRestartWaitDuration { get; set; }

        /// <summary>
        /// Gets or sets the maximum duration for which a partition is allowed
        /// to be in a state of quorum loss, represented in ISO 8601 format
        /// "hh:mm:ss".
        /// </summary>
        [JsonProperty(PropertyName = "quorumLossWaitDuration")]
        public string QuorumLossWaitDuration { get; set; }

        /// <summary>
        /// Gets or sets the definition on how long StandBy replicas should be
        /// maintained before being removed, represented in ISO 8601 format
        /// "hh:mm:ss".
        /// </summary>
        [JsonProperty(PropertyName = "standByReplicaKeepDuration")]
        public string StandByReplicaKeepDuration { get; set; }

        /// <summary>
        /// Gets or sets the duration for which replicas can stay InBuild
        /// before reporting that build is stuck, represented in ISO 8601
        /// format "hh:mm:ss".
        /// </summary>
        [JsonProperty(PropertyName = "servicePlacementTimeLimit")]
        public string ServicePlacementTimeLimit { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (TargetReplicaSetSize < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "TargetReplicaSetSize", 1);
            }
            if (MinReplicaSetSize < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "MinReplicaSetSize", 1);
            }
        }
    }
}
