// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ServiceFabricManagedClusters.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Describes a partitioning scheme where an integer range is allocated
    /// evenly across a number of partitions.
    /// </summary>
    [Newtonsoft.Json.JsonObject("UniformInt64Range")]
    public partial class UniformInt64RangePartitionScheme : Partition
    {
        /// <summary>
        /// Initializes a new instance of the UniformInt64RangePartitionScheme
        /// class.
        /// </summary>
        public UniformInt64RangePartitionScheme()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UniformInt64RangePartitionScheme
        /// class.
        /// </summary>
        /// <param name="count">The number of partitions.</param>
        /// <param name="lowKey">The lower bound of the partition key range
        /// that
        /// should be split between the partition ‘Count’
        /// </param>
        /// <param name="highKey">The upper bound of the partition key range
        /// that
        /// should be split between the partition ‘Count’
        /// </param>
        public UniformInt64RangePartitionScheme(int count, long lowKey, long highKey)
        {
            Count = count;
            LowKey = lowKey;
            HighKey = highKey;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the number of partitions.
        /// </summary>
        [JsonProperty(PropertyName = "count")]
        public int Count { get; set; }

        /// <summary>
        /// Gets or sets the lower bound of the partition key range that
        /// should be split between the partition ‘Count’
        ///
        /// </summary>
        [JsonProperty(PropertyName = "lowKey")]
        public long LowKey { get; set; }

        /// <summary>
        /// Gets or sets the upper bound of the partition key range that
        /// should be split between the partition ‘Count’
        ///
        /// </summary>
        [JsonProperty(PropertyName = "highKey")]
        public long HighKey { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            //Nothing to validate
        }
    }
}
