// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ServiceFabricManagedClusters.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Represents the health policy used to evaluate the health of services
    /// belonging to a service type.
    ///
    /// </summary>
    public partial class ServiceTypeHealthPolicy
    {
        /// <summary>
        /// Initializes a new instance of the ServiceTypeHealthPolicy class.
        /// </summary>
        public ServiceTypeHealthPolicy()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServiceTypeHealthPolicy class.
        /// </summary>
        /// <param name="maxPercentUnhealthyServices">The maximum allowed
        /// percentage of unhealthy services.
        ///
        /// The percentage represents the maximum tolerated percentage of
        /// services that can be unhealthy before the application is considered
        /// in error.
        /// If the percentage is respected but there is at least one unhealthy
        /// service, the health is evaluated as Warning.
        /// This is calculated by dividing the number of unhealthy services of
        /// the specific service type over the total number of services of the
        /// specific service type.
        /// The computation rounds up to tolerate one failure on small numbers
        /// of services.
        /// </param>
        /// <param name="maxPercentUnhealthyPartitionsPerService">The maximum
        /// allowed percentage of unhealthy partitions per service.
        ///
        /// The percentage represents the maximum tolerated percentage of
        /// partitions that can be unhealthy before the service is considered
        /// in error.
        /// If the percentage is respected but there is at least one unhealthy
        /// partition, the health is evaluated as Warning.
        /// The percentage is calculated by dividing the number of unhealthy
        /// partitions over the total number of partitions in the service.
        /// The computation rounds up to tolerate one failure on small numbers
        /// of partitions.
        /// </param>
        /// <param name="maxPercentUnhealthyReplicasPerPartition">The maximum
        /// allowed percentage of unhealthy replicas per partition.
        ///
        /// The percentage represents the maximum tolerated percentage of
        /// replicas that can be unhealthy before the partition is considered
        /// in error.
        /// If the percentage is respected but there is at least one unhealthy
        /// replica, the health is evaluated as Warning.
        /// The percentage is calculated by dividing the number of unhealthy
        /// replicas over the total number of replicas in the partition.
        /// The computation rounds up to tolerate one failure on small numbers
        /// of replicas.
        /// </param>
        public ServiceTypeHealthPolicy(int maxPercentUnhealthyServices, int maxPercentUnhealthyPartitionsPerService, int maxPercentUnhealthyReplicasPerPartition)
        {
            MaxPercentUnhealthyServices = maxPercentUnhealthyServices;
            MaxPercentUnhealthyPartitionsPerService = maxPercentUnhealthyPartitionsPerService;
            MaxPercentUnhealthyReplicasPerPartition = maxPercentUnhealthyReplicasPerPartition;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the maximum allowed percentage of unhealthy services.
        ///
        /// The percentage represents the maximum tolerated percentage of
        /// services that can be unhealthy before the application is considered
        /// in error.
        /// If the percentage is respected but there is at least one unhealthy
        /// service, the health is evaluated as Warning.
        /// This is calculated by dividing the number of unhealthy services of
        /// the specific service type over the total number of services of the
        /// specific service type.
        /// The computation rounds up to tolerate one failure on small numbers
        /// of services.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "maxPercentUnhealthyServices")]
        public int MaxPercentUnhealthyServices { get; set; }

        /// <summary>
        /// Gets or sets the maximum allowed percentage of unhealthy partitions
        /// per service.
        ///
        /// The percentage represents the maximum tolerated percentage of
        /// partitions that can be unhealthy before the service is considered
        /// in error.
        /// If the percentage is respected but there is at least one unhealthy
        /// partition, the health is evaluated as Warning.
        /// The percentage is calculated by dividing the number of unhealthy
        /// partitions over the total number of partitions in the service.
        /// The computation rounds up to tolerate one failure on small numbers
        /// of partitions.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "maxPercentUnhealthyPartitionsPerService")]
        public int MaxPercentUnhealthyPartitionsPerService { get; set; }

        /// <summary>
        /// Gets or sets the maximum allowed percentage of unhealthy replicas
        /// per partition.
        ///
        /// The percentage represents the maximum tolerated percentage of
        /// replicas that can be unhealthy before the partition is considered
        /// in error.
        /// If the percentage is respected but there is at least one unhealthy
        /// replica, the health is evaluated as Warning.
        /// The percentage is calculated by dividing the number of unhealthy
        /// replicas over the total number of replicas in the partition.
        /// The computation rounds up to tolerate one failure on small numbers
        /// of replicas.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "maxPercentUnhealthyReplicasPerPartition")]
        public int MaxPercentUnhealthyReplicasPerPartition { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (MaxPercentUnhealthyServices > 100)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "MaxPercentUnhealthyServices", 100);
            }
            if (MaxPercentUnhealthyServices < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "MaxPercentUnhealthyServices", 0);
            }
            if (MaxPercentUnhealthyPartitionsPerService > 100)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "MaxPercentUnhealthyPartitionsPerService", 100);
            }
            if (MaxPercentUnhealthyPartitionsPerService < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "MaxPercentUnhealthyPartitionsPerService", 0);
            }
            if (MaxPercentUnhealthyReplicasPerPartition > 100)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "MaxPercentUnhealthyReplicasPerPartition", 100);
            }
            if (MaxPercentUnhealthyReplicasPerPartition < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "MaxPercentUnhealthyReplicasPerPartition", 0);
            }
        }
    }
}
