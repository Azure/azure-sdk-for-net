// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ServiceFabricManagedClusters.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Describes a network security rule.
    /// </summary>
    public partial class NetworkSecurityRule
    {
        /// <summary>
        /// Initializes a new instance of the NetworkSecurityRule class.
        /// </summary>
        public NetworkSecurityRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NetworkSecurityRule class.
        /// </summary>
        /// <param name="name">Network security rule name.</param>
        /// <param name="protocol">Network protocol this rule applies to.
        /// Possible values include: 'http', 'https', 'tcp', 'udp', 'icmp',
        /// 'ah', 'esp'</param>
        /// <param name="access">The network traffic is allowed or denied.
        /// Possible values include: 'allow', 'deny'</param>
        /// <param name="priority">The priority of the rule. The value can be
        /// in the range 1000 to 3000. Values outside this range are reserved
        /// for Service Fabric ManagerCluster Resource Provider. The priority
        /// number must be unique for each rule in the collection. The lower
        /// the priority number, the higher the priority of the rule.</param>
        /// <param name="direction">Network security rule direction. Possible
        /// values include: 'inbound', 'outbound'</param>
        /// <param name="description">Network security rule
        /// description.</param>
        /// <param name="sourceAddressPrefixes">The CIDR or source IP
        /// ranges.</param>
        /// <param name="destinationAddressPrefixes">The destination address
        /// prefixes. CIDR or destination IP ranges.</param>
        /// <param name="sourcePortRanges">The source port ranges.</param>
        /// <param name="destinationPortRanges">The destination port
        /// ranges.</param>
        public NetworkSecurityRule(string name, string protocol, string access, int priority, string direction, string description = default(string), IList<string> sourceAddressPrefixes = default(IList<string>), IList<string> destinationAddressPrefixes = default(IList<string>), IList<string> sourcePortRanges = default(IList<string>), IList<string> destinationPortRanges = default(IList<string>))
        {
            Name = name;
            Description = description;
            Protocol = protocol;
            SourceAddressPrefixes = sourceAddressPrefixes;
            DestinationAddressPrefixes = destinationAddressPrefixes;
            SourcePortRanges = sourcePortRanges;
            DestinationPortRanges = destinationPortRanges;
            Access = access;
            Priority = priority;
            Direction = direction;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets network security rule name.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets network security rule description.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets network protocol this rule applies to. Possible values
        /// include: 'http', 'https', 'tcp', 'udp', 'icmp', 'ah', 'esp'
        /// </summary>
        [JsonProperty(PropertyName = "protocol")]
        public string Protocol { get; set; }

        /// <summary>
        /// Gets or sets the CIDR or source IP ranges.
        /// </summary>
        [JsonProperty(PropertyName = "sourceAddressPrefixes")]
        public IList<string> SourceAddressPrefixes { get; set; }

        /// <summary>
        /// Gets or sets the destination address prefixes. CIDR or destination
        /// IP ranges.
        /// </summary>
        [JsonProperty(PropertyName = "destinationAddressPrefixes")]
        public IList<string> DestinationAddressPrefixes { get; set; }

        /// <summary>
        /// Gets or sets the source port ranges.
        /// </summary>
        [JsonProperty(PropertyName = "sourcePortRanges")]
        public IList<string> SourcePortRanges { get; set; }

        /// <summary>
        /// Gets or sets the destination port ranges.
        /// </summary>
        [JsonProperty(PropertyName = "destinationPortRanges")]
        public IList<string> DestinationPortRanges { get; set; }

        /// <summary>
        /// Gets or sets the network traffic is allowed or denied. Possible
        /// values include: 'allow', 'deny'
        /// </summary>
        [JsonProperty(PropertyName = "access")]
        public string Access { get; set; }

        /// <summary>
        /// Gets or sets the priority of the rule. The value can be in the
        /// range 1000 to 3000. Values outside this range are reserved for
        /// Service Fabric ManagerCluster Resource Provider. The priority
        /// number must be unique for each rule in the collection. The lower
        /// the priority number, the higher the priority of the rule.
        /// </summary>
        [JsonProperty(PropertyName = "priority")]
        public int Priority { get; set; }

        /// <summary>
        /// Gets or sets network security rule direction. Possible values
        /// include: 'inbound', 'outbound'
        /// </summary>
        [JsonProperty(PropertyName = "direction")]
        public string Direction { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Protocol == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Protocol");
            }
            if (Access == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Access");
            }
            if (Direction == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Direction");
            }
            if (Priority > 3000)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Priority", 3000);
            }
            if (Priority < 1000)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Priority", 1000);
            }
        }
    }
}
