// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.ServiceFabricManagedClusters.Models;

namespace Azure.ResourceManager.ServiceFabricManagedClusters
{
    /// <summary>
    /// A class representing a collection of <see cref="LocationEnvironmentManagedClusterVersionResource" /> and their operations.
    /// Each <see cref="LocationEnvironmentManagedClusterVersionResource" /> in the collection will belong to the same instance of <see cref="SubscriptionResource" />.
    /// To get a <see cref="LocationEnvironmentManagedClusterVersionCollection" /> instance call the GetLocationEnvironmentManagedClusterVersions method from an instance of <see cref="SubscriptionResource" />.
    /// </summary>
    public partial class LocationEnvironmentManagedClusterVersionCollection : ArmCollection, IEnumerable<LocationEnvironmentManagedClusterVersionResource>, IAsyncEnumerable<LocationEnvironmentManagedClusterVersionResource>
    {
        private readonly ClientDiagnostics _locationEnvironmentManagedClusterVersionManagedClusterVersionClientDiagnostics;
        private readonly ManagedClusterVersionRestOperations _locationEnvironmentManagedClusterVersionManagedClusterVersionRestClient;
        private readonly AzureLocation _location;
        private readonly ManagedClusterVersionEnvironment _environment;

        /// <summary> Initializes a new instance of the <see cref="LocationEnvironmentManagedClusterVersionCollection"/> class for mocking. </summary>
        protected LocationEnvironmentManagedClusterVersionCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="LocationEnvironmentManagedClusterVersionCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        /// <param name="location"> The location for the cluster code versions. This is different from cluster location. </param>
        /// <param name="environment"> The operating system of the cluster. The default means all. </param>
        internal LocationEnvironmentManagedClusterVersionCollection(ArmClient client, ResourceIdentifier id, AzureLocation location, ManagedClusterVersionEnvironment environment) : base(client, id)
        {
            _location = location;
            _environment = environment;
            _locationEnvironmentManagedClusterVersionManagedClusterVersionClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.ServiceFabricManagedClusters", LocationEnvironmentManagedClusterVersionResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(LocationEnvironmentManagedClusterVersionResource.ResourceType, out string locationEnvironmentManagedClusterVersionManagedClusterVersionApiVersion);
            _locationEnvironmentManagedClusterVersionManagedClusterVersionRestClient = new ManagedClusterVersionRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, locationEnvironmentManagedClusterVersionManagedClusterVersionApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != SubscriptionResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, SubscriptionResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Gets information about an available Service Fabric cluster code version by environment.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabric/locations/{location}/environments/{environment}/managedClusterVersions/{clusterVersion}
        /// Operation Id: ManagedClusterVersion_GetByEnvironment
        /// </summary>
        /// <param name="clusterVersion"> The cluster code version. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="clusterVersion"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="clusterVersion"/> is null. </exception>
        public virtual async Task<Response<LocationEnvironmentManagedClusterVersionResource>> GetAsync(string clusterVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(clusterVersion, nameof(clusterVersion));

            using var scope = _locationEnvironmentManagedClusterVersionManagedClusterVersionClientDiagnostics.CreateScope("LocationEnvironmentManagedClusterVersionCollection.Get");
            scope.Start();
            try
            {
                var response = await _locationEnvironmentManagedClusterVersionManagedClusterVersionRestClient.GetByEnvironmentAsync(Id.SubscriptionId, new AzureLocation(_location), _environment, clusterVersion, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new LocationEnvironmentManagedClusterVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets information about an available Service Fabric cluster code version by environment.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabric/locations/{location}/environments/{environment}/managedClusterVersions/{clusterVersion}
        /// Operation Id: ManagedClusterVersion_GetByEnvironment
        /// </summary>
        /// <param name="clusterVersion"> The cluster code version. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="clusterVersion"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="clusterVersion"/> is null. </exception>
        public virtual Response<LocationEnvironmentManagedClusterVersionResource> Get(string clusterVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(clusterVersion, nameof(clusterVersion));

            using var scope = _locationEnvironmentManagedClusterVersionManagedClusterVersionClientDiagnostics.CreateScope("LocationEnvironmentManagedClusterVersionCollection.Get");
            scope.Start();
            try
            {
                var response = _locationEnvironmentManagedClusterVersionManagedClusterVersionRestClient.GetByEnvironment(Id.SubscriptionId, new AzureLocation(_location), _environment, clusterVersion, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new LocationEnvironmentManagedClusterVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets all available code versions for Service Fabric cluster resources by environment.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabric/locations/{location}/environments/{environment}/managedClusterVersions
        /// Operation Id: ManagedClusterVersion_ListByEnvironment
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="LocationEnvironmentManagedClusterVersionResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<LocationEnvironmentManagedClusterVersionResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<LocationEnvironmentManagedClusterVersionResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _locationEnvironmentManagedClusterVersionManagedClusterVersionClientDiagnostics.CreateScope("LocationEnvironmentManagedClusterVersionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _locationEnvironmentManagedClusterVersionManagedClusterVersionRestClient.ListByEnvironmentAsync(Id.SubscriptionId, new AzureLocation(_location), _environment, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Select(value => new LocationEnvironmentManagedClusterVersionResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Gets all available code versions for Service Fabric cluster resources by environment.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabric/locations/{location}/environments/{environment}/managedClusterVersions
        /// Operation Id: ManagedClusterVersion_ListByEnvironment
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="LocationEnvironmentManagedClusterVersionResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<LocationEnvironmentManagedClusterVersionResource> GetAll(CancellationToken cancellationToken = default)
        {
            Page<LocationEnvironmentManagedClusterVersionResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _locationEnvironmentManagedClusterVersionManagedClusterVersionClientDiagnostics.CreateScope("LocationEnvironmentManagedClusterVersionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _locationEnvironmentManagedClusterVersionManagedClusterVersionRestClient.ListByEnvironment(Id.SubscriptionId, new AzureLocation(_location), _environment, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Select(value => new LocationEnvironmentManagedClusterVersionResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabric/locations/{location}/environments/{environment}/managedClusterVersions/{clusterVersion}
        /// Operation Id: ManagedClusterVersion_GetByEnvironment
        /// </summary>
        /// <param name="clusterVersion"> The cluster code version. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="clusterVersion"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="clusterVersion"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string clusterVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(clusterVersion, nameof(clusterVersion));

            using var scope = _locationEnvironmentManagedClusterVersionManagedClusterVersionClientDiagnostics.CreateScope("LocationEnvironmentManagedClusterVersionCollection.Exists");
            scope.Start();
            try
            {
                var response = await _locationEnvironmentManagedClusterVersionManagedClusterVersionRestClient.GetByEnvironmentAsync(Id.SubscriptionId, new AzureLocation(_location), _environment, clusterVersion, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabric/locations/{location}/environments/{environment}/managedClusterVersions/{clusterVersion}
        /// Operation Id: ManagedClusterVersion_GetByEnvironment
        /// </summary>
        /// <param name="clusterVersion"> The cluster code version. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="clusterVersion"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="clusterVersion"/> is null. </exception>
        public virtual Response<bool> Exists(string clusterVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(clusterVersion, nameof(clusterVersion));

            using var scope = _locationEnvironmentManagedClusterVersionManagedClusterVersionClientDiagnostics.CreateScope("LocationEnvironmentManagedClusterVersionCollection.Exists");
            scope.Start();
            try
            {
                var response = _locationEnvironmentManagedClusterVersionManagedClusterVersionRestClient.GetByEnvironment(Id.SubscriptionId, new AzureLocation(_location), _environment, clusterVersion, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<LocationEnvironmentManagedClusterVersionResource> IEnumerable<LocationEnvironmentManagedClusterVersionResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<LocationEnvironmentManagedClusterVersionResource> IAsyncEnumerable<LocationEnvironmentManagedClusterVersionResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
