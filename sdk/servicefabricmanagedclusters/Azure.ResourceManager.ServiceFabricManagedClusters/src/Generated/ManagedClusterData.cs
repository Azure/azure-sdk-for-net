// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.ServiceFabricManagedClusters.Models;

namespace Azure.ResourceManager.ServiceFabricManagedClusters
{
    /// <summary> A class representing the ManagedCluster data model. </summary>
    public partial class ManagedClusterData : TrackedResourceData
    {
        /// <summary> Initializes a new instance of ManagedClusterData. </summary>
        /// <param name="location"> The location. </param>
        public ManagedClusterData(AzureLocation location) : base(location)
        {
            ClusterCertificateThumbprints = new ChangeTrackingList<string>();
            LoadBalancingRules = new ChangeTrackingList<LoadBalancingRule>();
            NetworkSecurityRules = new ChangeTrackingList<NetworkSecurityRule>();
            Clients = new ChangeTrackingList<ClientCertificate>();
            FabricSettings = new ChangeTrackingList<SettingsSectionDescription>();
            AddonFeatures = new ChangeTrackingList<ManagedClusterAddOnFeature>();
            IPTags = new ChangeTrackingList<IPTag>();
            AuxiliarySubnets = new ChangeTrackingList<Subnet>();
            ServiceEndpoints = new ChangeTrackingList<ServiceEndpoint>();
        }

        /// <summary> Initializes a new instance of ManagedClusterData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="sku"> The sku of the managed cluster. </param>
        /// <param name="dnsName"> The cluster dns name. </param>
        /// <param name="fqdn"> The fully qualified domain name associated with the public load balancer of the cluster. </param>
        /// <param name="ipv4Address"> The IPv4 address associated with the public load balancer of the cluster. </param>
        /// <param name="clusterId"> A service generated unique identifier for the cluster resource. </param>
        /// <param name="clusterState"> The current state of the cluster. </param>
        /// <param name="clusterCertificateThumbprints"> List of thumbprints of the cluster certificates. </param>
        /// <param name="clientConnectionPort"> The port used for client connections to the cluster. </param>
        /// <param name="httpGatewayConnectionPort"> The port used for HTTP connections to the cluster. </param>
        /// <param name="adminUserName"> VM admin user name. </param>
        /// <param name="adminPassword"> VM admin user password. </param>
        /// <param name="loadBalancingRules"> Load balancing rules that are applied to the public load balancer of the cluster. </param>
        /// <param name="allowRdpAccess"> Setting this to true enables RDP access to the VM. The default NSG rule opens RDP port to Internet which can be overridden with custom Network Security Rules. The default value for this setting is false. </param>
        /// <param name="networkSecurityRules"> Custom Network Security Rules that are applied to the Virtual Network of the cluster. </param>
        /// <param name="clients"> Client certificates that are allowed to manage the cluster. </param>
        /// <param name="azureActiveDirectory"> The AAD authentication settings of the cluster. </param>
        /// <param name="fabricSettings"> The list of custom fabric settings to configure the cluster. </param>
        /// <param name="provisioningState"> The provisioning state of the managed cluster resource. </param>
        /// <param name="clusterCodeVersion"> The Service Fabric runtime version of the cluster. This property is required when **clusterUpgradeMode** is set to &apos;Manual&apos;. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**. </param>
        /// <param name="clusterUpgradeMode">
        /// The upgrade mode of the cluster when new Service Fabric runtime version is available.
        /// 
        /// </param>
        /// <param name="clusterUpgradeCadence"> Indicates when new cluster runtime version upgrades will be applied after they are released. By default is Wave0. Only applies when **clusterUpgradeMode** is set to &apos;Automatic&apos;. </param>
        /// <param name="addonFeatures"> List of add-on features to enable on the cluster. </param>
        /// <param name="enableAutoOSUpgrade"> Setting this to true enables automatic OS upgrade for the node types that are created using any platform OS image with version &apos;latest&apos;. The default value for this setting is false. </param>
        /// <param name="zonalResiliency"> Indicates if the cluster has zone resiliency. </param>
        /// <param name="applicationTypeVersionsCleanupPolicy"> The policy used to clean up unused versions. </param>
        /// <param name="enableIPv6"> Setting this to true creates IPv6 address space for the default VNet used by the cluster. This setting cannot be changed once the cluster is created. The default value for this setting is false. </param>
        /// <param name="subnetId"> If specified, the node types for the cluster are created in this subnet instead of the default VNet. The **networkSecurityRules** specified for the cluster are also applied to this subnet. This setting cannot be changed once the cluster is created. </param>
        /// <param name="ipTags"> The list of IP tags associated with the default public IP address of the cluster. </param>
        /// <param name="ipv6Address"> IPv6 address for the cluster if IPv6 is enabled. </param>
        /// <param name="enableServicePublicIP"> Setting this to true will link the IPv4 address as the ServicePublicIP of the IPv6 address. It can only be set to True if IPv6 is enabled on the cluster. </param>
        /// <param name="auxiliarySubnets"> Auxiliary subnets for the cluster. </param>
        /// <param name="serviceEndpoints"> Service endpoints for subnets in the cluster. </param>
        /// <param name="etag"> Azure resource etag. </param>
        internal ManagedClusterData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, string> tags, AzureLocation location, ServiceFabricManagedClustersSku sku, string dnsName, string fqdn, string ipv4Address, string clusterId, ClusterState? clusterState, IReadOnlyList<string> clusterCertificateThumbprints, int? clientConnectionPort, int? httpGatewayConnectionPort, string adminUserName, string adminPassword, IList<LoadBalancingRule> loadBalancingRules, bool? allowRdpAccess, IList<NetworkSecurityRule> networkSecurityRules, IList<ClientCertificate> clients, AzureActiveDirectory azureActiveDirectory, IList<SettingsSectionDescription> fabricSettings, ManagedResourceProvisioningState? provisioningState, string clusterCodeVersion, ClusterUpgradeMode? clusterUpgradeMode, ClusterUpgradeCadence? clusterUpgradeCadence, IList<ManagedClusterAddOnFeature> addonFeatures, bool? enableAutoOSUpgrade, bool? zonalResiliency, ApplicationTypeVersionsCleanupPolicy applicationTypeVersionsCleanupPolicy, bool? enableIPv6, string subnetId, IList<IPTag> ipTags, string ipv6Address, bool? enableServicePublicIP, IList<Subnet> auxiliarySubnets, IList<ServiceEndpoint> serviceEndpoints, ETag? etag) : base(id, name, resourceType, systemData, tags, location)
        {
            Sku = sku;
            DnsName = dnsName;
            Fqdn = fqdn;
            IPv4Address = ipv4Address;
            ClusterId = clusterId;
            ClusterState = clusterState;
            ClusterCertificateThumbprints = clusterCertificateThumbprints;
            ClientConnectionPort = clientConnectionPort;
            HttpGatewayConnectionPort = httpGatewayConnectionPort;
            AdminUserName = adminUserName;
            AdminPassword = adminPassword;
            LoadBalancingRules = loadBalancingRules;
            AllowRdpAccess = allowRdpAccess;
            NetworkSecurityRules = networkSecurityRules;
            Clients = clients;
            AzureActiveDirectory = azureActiveDirectory;
            FabricSettings = fabricSettings;
            ProvisioningState = provisioningState;
            ClusterCodeVersion = clusterCodeVersion;
            ClusterUpgradeMode = clusterUpgradeMode;
            ClusterUpgradeCadence = clusterUpgradeCadence;
            AddonFeatures = addonFeatures;
            EnableAutoOSUpgrade = enableAutoOSUpgrade;
            ZonalResiliency = zonalResiliency;
            ApplicationTypeVersionsCleanupPolicy = applicationTypeVersionsCleanupPolicy;
            EnableIPv6 = enableIPv6;
            SubnetId = subnetId;
            IPTags = ipTags;
            IPv6Address = ipv6Address;
            EnableServicePublicIP = enableServicePublicIP;
            AuxiliarySubnets = auxiliarySubnets;
            ServiceEndpoints = serviceEndpoints;
            ETag = etag;
        }

        /// <summary> The sku of the managed cluster. </summary>
        internal ServiceFabricManagedClustersSku Sku { get; set; }
        /// <summary> Sku Name. </summary>
        public ServiceFabricManagedClustersSkuName? SkuName
        {
            get => Sku is null ? default(ServiceFabricManagedClustersSkuName?) : Sku.Name;
            set
            {
                Sku = value.HasValue ? new ServiceFabricManagedClustersSku(value.Value) : null;
            }
        }

        /// <summary> The cluster dns name. </summary>
        public string DnsName { get; set; }
        /// <summary> The fully qualified domain name associated with the public load balancer of the cluster. </summary>
        public string Fqdn { get; }
        /// <summary> The IPv4 address associated with the public load balancer of the cluster. </summary>
        public string IPv4Address { get; }
        /// <summary> A service generated unique identifier for the cluster resource. </summary>
        public string ClusterId { get; }
        /// <summary> The current state of the cluster. </summary>
        public ClusterState? ClusterState { get; }
        /// <summary> List of thumbprints of the cluster certificates. </summary>
        public IReadOnlyList<string> ClusterCertificateThumbprints { get; }
        /// <summary> The port used for client connections to the cluster. </summary>
        public int? ClientConnectionPort { get; set; }
        /// <summary> The port used for HTTP connections to the cluster. </summary>
        public int? HttpGatewayConnectionPort { get; set; }
        /// <summary> VM admin user name. </summary>
        public string AdminUserName { get; set; }
        /// <summary> VM admin user password. </summary>
        public string AdminPassword { get; set; }
        /// <summary> Load balancing rules that are applied to the public load balancer of the cluster. </summary>
        public IList<LoadBalancingRule> LoadBalancingRules { get; }
        /// <summary> Setting this to true enables RDP access to the VM. The default NSG rule opens RDP port to Internet which can be overridden with custom Network Security Rules. The default value for this setting is false. </summary>
        public bool? AllowRdpAccess { get; set; }
        /// <summary> Custom Network Security Rules that are applied to the Virtual Network of the cluster. </summary>
        public IList<NetworkSecurityRule> NetworkSecurityRules { get; }
        /// <summary> Client certificates that are allowed to manage the cluster. </summary>
        public IList<ClientCertificate> Clients { get; }
        /// <summary> The AAD authentication settings of the cluster. </summary>
        public AzureActiveDirectory AzureActiveDirectory { get; set; }
        /// <summary> The list of custom fabric settings to configure the cluster. </summary>
        public IList<SettingsSectionDescription> FabricSettings { get; }
        /// <summary> The provisioning state of the managed cluster resource. </summary>
        public ManagedResourceProvisioningState? ProvisioningState { get; }
        /// <summary> The Service Fabric runtime version of the cluster. This property is required when **clusterUpgradeMode** is set to &apos;Manual&apos;. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**. </summary>
        public string ClusterCodeVersion { get; set; }
        /// <summary>
        /// The upgrade mode of the cluster when new Service Fabric runtime version is available.
        /// 
        /// </summary>
        public ClusterUpgradeMode? ClusterUpgradeMode { get; set; }
        /// <summary> Indicates when new cluster runtime version upgrades will be applied after they are released. By default is Wave0. Only applies when **clusterUpgradeMode** is set to &apos;Automatic&apos;. </summary>
        public ClusterUpgradeCadence? ClusterUpgradeCadence { get; set; }
        /// <summary> List of add-on features to enable on the cluster. </summary>
        public IList<ManagedClusterAddOnFeature> AddonFeatures { get; }
        /// <summary> Setting this to true enables automatic OS upgrade for the node types that are created using any platform OS image with version &apos;latest&apos;. The default value for this setting is false. </summary>
        public bool? EnableAutoOSUpgrade { get; set; }
        /// <summary> Indicates if the cluster has zone resiliency. </summary>
        public bool? ZonalResiliency { get; set; }
        /// <summary> The policy used to clean up unused versions. </summary>
        internal ApplicationTypeVersionsCleanupPolicy ApplicationTypeVersionsCleanupPolicy { get; set; }
        /// <summary> Number of unused versions per application type to keep. </summary>
        public int? MaxUnusedVersionsToKeep
        {
            get => ApplicationTypeVersionsCleanupPolicy is null ? default(int?) : ApplicationTypeVersionsCleanupPolicy.MaxUnusedVersionsToKeep;
            set
            {
                ApplicationTypeVersionsCleanupPolicy = value.HasValue ? new ApplicationTypeVersionsCleanupPolicy(value.Value) : null;
            }
        }

        /// <summary> Setting this to true creates IPv6 address space for the default VNet used by the cluster. This setting cannot be changed once the cluster is created. The default value for this setting is false. </summary>
        public bool? EnableIPv6 { get; set; }
        /// <summary> If specified, the node types for the cluster are created in this subnet instead of the default VNet. The **networkSecurityRules** specified for the cluster are also applied to this subnet. This setting cannot be changed once the cluster is created. </summary>
        public string SubnetId { get; set; }
        /// <summary> The list of IP tags associated with the default public IP address of the cluster. </summary>
        public IList<IPTag> IPTags { get; }
        /// <summary> IPv6 address for the cluster if IPv6 is enabled. </summary>
        public string IPv6Address { get; }
        /// <summary> Setting this to true will link the IPv4 address as the ServicePublicIP of the IPv6 address. It can only be set to True if IPv6 is enabled on the cluster. </summary>
        public bool? EnableServicePublicIP { get; set; }
        /// <summary> Auxiliary subnets for the cluster. </summary>
        public IList<Subnet> AuxiliarySubnets { get; }
        /// <summary> Service endpoints for subnets in the cluster. </summary>
        public IList<ServiceEndpoint> ServiceEndpoints { get; }
        /// <summary> Azure resource etag. </summary>
        public ETag? ETag { get; }
    }
}
