// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.ServiceFabricManagedClusters.Models;

namespace Azure.ResourceManager.ServiceFabricManagedClusters
{
    public partial class ServiceFabricManagedNodeTypeData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Sku))
            {
                writer.WritePropertyName("sku"u8);
                writer.WriteObjectValue(Sku);
            }
            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(IsPrimary))
            {
                writer.WritePropertyName("isPrimary"u8);
                writer.WriteBooleanValue(IsPrimary.Value);
            }
            if (Optional.IsDefined(VmInstanceCount))
            {
                writer.WritePropertyName("vmInstanceCount"u8);
                writer.WriteNumberValue(VmInstanceCount.Value);
            }
            if (Optional.IsDefined(DataDiskSizeInGB))
            {
                writer.WritePropertyName("dataDiskSizeGB"u8);
                writer.WriteNumberValue(DataDiskSizeInGB.Value);
            }
            if (Optional.IsDefined(DataDiskType))
            {
                writer.WritePropertyName("dataDiskType"u8);
                writer.WriteStringValue(DataDiskType.Value.ToString());
            }
            if (Optional.IsDefined(DataDiskLetter))
            {
                writer.WritePropertyName("dataDiskLetter"u8);
                writer.WriteStringValue(DataDiskLetter);
            }
            if (Optional.IsCollectionDefined(PlacementProperties))
            {
                writer.WritePropertyName("placementProperties"u8);
                writer.WriteStartObject();
                foreach (var item in PlacementProperties)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(Capacities))
            {
                writer.WritePropertyName("capacities"u8);
                writer.WriteStartObject();
                foreach (var item in Capacities)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(ApplicationPorts))
            {
                writer.WritePropertyName("applicationPorts"u8);
                writer.WriteObjectValue(ApplicationPorts);
            }
            if (Optional.IsDefined(EphemeralPorts))
            {
                writer.WritePropertyName("ephemeralPorts"u8);
                writer.WriteObjectValue(EphemeralPorts);
            }
            if (Optional.IsDefined(VmSize))
            {
                writer.WritePropertyName("vmSize"u8);
                writer.WriteStringValue(VmSize);
            }
            if (Optional.IsDefined(VmImagePublisher))
            {
                writer.WritePropertyName("vmImagePublisher"u8);
                writer.WriteStringValue(VmImagePublisher);
            }
            if (Optional.IsDefined(VmImageOffer))
            {
                writer.WritePropertyName("vmImageOffer"u8);
                writer.WriteStringValue(VmImageOffer);
            }
            if (Optional.IsDefined(VmImageSku))
            {
                writer.WritePropertyName("vmImageSku"u8);
                writer.WriteStringValue(VmImageSku);
            }
            if (Optional.IsDefined(VmImageVersion))
            {
                writer.WritePropertyName("vmImageVersion"u8);
                writer.WriteStringValue(VmImageVersion);
            }
            if (Optional.IsCollectionDefined(VmSecrets))
            {
                writer.WritePropertyName("vmSecrets"u8);
                writer.WriteStartArray();
                foreach (var item in VmSecrets)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(VmExtensions))
            {
                writer.WritePropertyName("vmExtensions"u8);
                writer.WriteStartArray();
                foreach (var item in VmExtensions)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(VmManagedIdentity))
            {
                writer.WritePropertyName("vmManagedIdentity"u8);
                writer.WriteObjectValue(VmManagedIdentity);
            }
            if (Optional.IsDefined(IsStateless))
            {
                writer.WritePropertyName("isStateless"u8);
                writer.WriteBooleanValue(IsStateless.Value);
            }
            if (Optional.IsDefined(HasMultiplePlacementGroups))
            {
                writer.WritePropertyName("multiplePlacementGroups"u8);
                writer.WriteBooleanValue(HasMultiplePlacementGroups.Value);
            }
            if (Optional.IsCollectionDefined(FrontendConfigurations))
            {
                writer.WritePropertyName("frontendConfigurations"u8);
                writer.WriteStartArray();
                foreach (var item in FrontendConfigurations)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(NetworkSecurityRules))
            {
                writer.WritePropertyName("networkSecurityRules"u8);
                writer.WriteStartArray();
                foreach (var item in NetworkSecurityRules)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(AdditionalDataDisks))
            {
                writer.WritePropertyName("additionalDataDisks"u8);
                writer.WriteStartArray();
                foreach (var item in AdditionalDataDisks)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(IsEncryptionAtHostEnabled))
            {
                writer.WritePropertyName("enableEncryptionAtHost"u8);
                writer.WriteBooleanValue(IsEncryptionAtHostEnabled.Value);
            }
            if (Optional.IsDefined(IsAcceleratedNetworkingEnabled))
            {
                writer.WritePropertyName("enableAcceleratedNetworking"u8);
                writer.WriteBooleanValue(IsAcceleratedNetworkingEnabled.Value);
            }
            if (Optional.IsDefined(UseDefaultPublicLoadBalancer))
            {
                writer.WritePropertyName("useDefaultPublicLoadBalancer"u8);
                writer.WriteBooleanValue(UseDefaultPublicLoadBalancer.Value);
            }
            if (Optional.IsDefined(UseTempDataDisk))
            {
                writer.WritePropertyName("useTempDataDisk"u8);
                writer.WriteBooleanValue(UseTempDataDisk.Value);
            }
            if (Optional.IsDefined(IsOverProvisioningEnabled))
            {
                writer.WritePropertyName("enableOverProvisioning"u8);
                writer.WriteBooleanValue(IsOverProvisioningEnabled.Value);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static ServiceFabricManagedNodeTypeData DeserializeServiceFabricManagedNodeTypeData(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<NodeTypeSku> sku = default;
            Optional<IDictionary<string, string>> tags = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<bool> isPrimary = default;
            Optional<int> vmInstanceCount = default;
            Optional<int> dataDiskSizeGB = default;
            Optional<ServiceFabricManagedDataDiskType> dataDiskType = default;
            Optional<string> dataDiskLetter = default;
            Optional<IDictionary<string, string>> placementProperties = default;
            Optional<IDictionary<string, string>> capacities = default;
            Optional<EndpointRangeDescription> applicationPorts = default;
            Optional<EndpointRangeDescription> ephemeralPorts = default;
            Optional<string> vmSize = default;
            Optional<string> vmImagePublisher = default;
            Optional<string> vmImageOffer = default;
            Optional<string> vmImageSku = default;
            Optional<string> vmImageVersion = default;
            Optional<IList<NodeTypeVaultSecretGroup>> vmSecrets = default;
            Optional<IList<NodeTypeVmssExtension>> vmExtensions = default;
            Optional<VmManagedIdentity> vmManagedIdentity = default;
            Optional<bool> isStateless = default;
            Optional<bool> multiplePlacementGroups = default;
            Optional<IList<NodeTypeFrontendConfiguration>> frontendConfigurations = default;
            Optional<IList<ServiceFabricManagedNetworkSecurityRule>> networkSecurityRules = default;
            Optional<IList<NodeTypeVmssDataDisk>> additionalDataDisks = default;
            Optional<bool> enableEncryptionAtHost = default;
            Optional<ServiceFabricManagedResourceProvisioningState> provisioningState = default;
            Optional<bool> enableAcceleratedNetworking = default;
            Optional<bool> useDefaultPublicLoadBalancer = default;
            Optional<bool> useTempDataDisk = default;
            Optional<bool> enableOverProvisioning = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("sku"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sku = NodeTypeSku.DeserializeNodeTypeSku(property.Value);
                    continue;
                }
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("isPrimary"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            isPrimary = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("vmInstanceCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            vmInstanceCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("dataDiskSizeGB"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            dataDiskSizeGB = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("dataDiskType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            dataDiskType = new ServiceFabricManagedDataDiskType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("dataDiskLetter"u8))
                        {
                            dataDiskLetter = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("placementProperties"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            Dictionary<string, string> dictionary = new Dictionary<string, string>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, property1.Value.GetString());
                            }
                            placementProperties = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("capacities"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            Dictionary<string, string> dictionary = new Dictionary<string, string>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, property1.Value.GetString());
                            }
                            capacities = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("applicationPorts"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            applicationPorts = EndpointRangeDescription.DeserializeEndpointRangeDescription(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("ephemeralPorts"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            ephemeralPorts = EndpointRangeDescription.DeserializeEndpointRangeDescription(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("vmSize"u8))
                        {
                            vmSize = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("vmImagePublisher"u8))
                        {
                            vmImagePublisher = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("vmImageOffer"u8))
                        {
                            vmImageOffer = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("vmImageSku"u8))
                        {
                            vmImageSku = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("vmImageVersion"u8))
                        {
                            vmImageVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("vmSecrets"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<NodeTypeVaultSecretGroup> array = new List<NodeTypeVaultSecretGroup>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(NodeTypeVaultSecretGroup.DeserializeNodeTypeVaultSecretGroup(item));
                            }
                            vmSecrets = array;
                            continue;
                        }
                        if (property0.NameEquals("vmExtensions"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<NodeTypeVmssExtension> array = new List<NodeTypeVmssExtension>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(NodeTypeVmssExtension.DeserializeNodeTypeVmssExtension(item));
                            }
                            vmExtensions = array;
                            continue;
                        }
                        if (property0.NameEquals("vmManagedIdentity"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            vmManagedIdentity = VmManagedIdentity.DeserializeVmManagedIdentity(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("isStateless"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            isStateless = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("multiplePlacementGroups"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            multiplePlacementGroups = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("frontendConfigurations"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<NodeTypeFrontendConfiguration> array = new List<NodeTypeFrontendConfiguration>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(NodeTypeFrontendConfiguration.DeserializeNodeTypeFrontendConfiguration(item));
                            }
                            frontendConfigurations = array;
                            continue;
                        }
                        if (property0.NameEquals("networkSecurityRules"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<ServiceFabricManagedNetworkSecurityRule> array = new List<ServiceFabricManagedNetworkSecurityRule>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(ServiceFabricManagedNetworkSecurityRule.DeserializeServiceFabricManagedNetworkSecurityRule(item));
                            }
                            networkSecurityRules = array;
                            continue;
                        }
                        if (property0.NameEquals("additionalDataDisks"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<NodeTypeVmssDataDisk> array = new List<NodeTypeVmssDataDisk>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(NodeTypeVmssDataDisk.DeserializeNodeTypeVmssDataDisk(item));
                            }
                            additionalDataDisks = array;
                            continue;
                        }
                        if (property0.NameEquals("enableEncryptionAtHost"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            enableEncryptionAtHost = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            provisioningState = new ServiceFabricManagedResourceProvisioningState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("enableAcceleratedNetworking"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            enableAcceleratedNetworking = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("useDefaultPublicLoadBalancer"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            useDefaultPublicLoadBalancer = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("useTempDataDisk"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            useTempDataDisk = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("enableOverProvisioning"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            enableOverProvisioning = property0.Value.GetBoolean();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new ServiceFabricManagedNodeTypeData(id, name, type, systemData.Value, sku.Value, Optional.ToNullable(isPrimary), Optional.ToNullable(vmInstanceCount), Optional.ToNullable(dataDiskSizeGB), Optional.ToNullable(dataDiskType), dataDiskLetter.Value, Optional.ToDictionary(placementProperties), Optional.ToDictionary(capacities), applicationPorts.Value, ephemeralPorts.Value, vmSize.Value, vmImagePublisher.Value, vmImageOffer.Value, vmImageSku.Value, vmImageVersion.Value, Optional.ToList(vmSecrets), Optional.ToList(vmExtensions), vmManagedIdentity.Value, Optional.ToNullable(isStateless), Optional.ToNullable(multiplePlacementGroups), Optional.ToList(frontendConfigurations), Optional.ToList(networkSecurityRules), Optional.ToList(additionalDataDisks), Optional.ToNullable(enableEncryptionAtHost), Optional.ToNullable(provisioningState), Optional.ToNullable(enableAcceleratedNetworking), Optional.ToNullable(useDefaultPublicLoadBalancer), Optional.ToNullable(useTempDataDisk), Optional.ToNullable(enableOverProvisioning), Optional.ToDictionary(tags));
        }
    }
}
