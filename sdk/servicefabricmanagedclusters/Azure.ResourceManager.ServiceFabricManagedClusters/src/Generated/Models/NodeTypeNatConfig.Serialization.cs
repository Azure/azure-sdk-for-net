// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ServiceFabricManagedClusters.Models
{
    public partial class NodeTypeNatConfig : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(BackendPort))
            {
                writer.WritePropertyName("backendPort"u8);
                writer.WriteNumberValue(BackendPort.Value);
            }
            if (Optional.IsDefined(FrontendPortRangeStart))
            {
                writer.WritePropertyName("frontendPortRangeStart"u8);
                writer.WriteNumberValue(FrontendPortRangeStart.Value);
            }
            if (Optional.IsDefined(FrontendPortRangeEnd))
            {
                writer.WritePropertyName("frontendPortRangeEnd"u8);
                writer.WriteNumberValue(FrontendPortRangeEnd.Value);
            }
            writer.WriteEndObject();
        }

        internal static NodeTypeNatConfig DeserializeNodeTypeNatConfig(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            int? backendPort = default;
            int? frontendPortRangeStart = default;
            int? frontendPortRangeEnd = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("backendPort"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    backendPort = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("frontendPortRangeStart"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    frontendPortRangeStart = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("frontendPortRangeEnd"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    frontendPortRangeEnd = property.Value.GetInt32();
                    continue;
                }
            }
            return new NodeTypeNatConfig(backendPort, frontendPortRangeStart, frontendPortRangeEnd);
        }
    }
}
