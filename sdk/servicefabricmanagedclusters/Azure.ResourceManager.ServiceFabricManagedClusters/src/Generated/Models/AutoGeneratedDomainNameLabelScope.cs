// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ServiceFabricManagedClusters.Models
{
    /// <summary>
    /// This enum is the entrypoint to using a certificate from a public CA for your cluster. This property was introduced to solve the
    /// domain squatting problem with new domains. A domain name will be generated in the following format: &lt;cluster-name&gt;.&lt;hash&gt;.&lt;region-name&gt;.&lt;sfmc-domain&gt;.
    /// The hash portion comes from Azure DNS' Deterministic Name Library. The library creates a hash using the cluster's Tenant, Subscription, Resource Group
    /// and Resource Name using the AutoGeneratedDomainNameLabelScope/reuse policy chosen.
    ///
    /// </summary>
    public readonly partial struct AutoGeneratedDomainNameLabelScope : IEquatable<AutoGeneratedDomainNameLabelScope>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AutoGeneratedDomainNameLabelScope"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AutoGeneratedDomainNameLabelScope(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string TenantReuseValue = "TenantReuse";
        private const string SubscriptionReuseValue = "SubscriptionReuse";
        private const string ResourceGroupReuseValue = "ResourceGroupReuse";
        private const string NoReuseValue = "NoReuse";

        /// <summary> TenantReuse allows for the same hash to be created if the resource is created in the same Tenant with the same resource name. </summary>
        public static AutoGeneratedDomainNameLabelScope TenantReuse { get; } = new AutoGeneratedDomainNameLabelScope(TenantReuseValue);
        /// <summary> SubscriptionReuse allows for the same hash to be created if the resource is created in the same Subscription with the same resource name. </summary>
        public static AutoGeneratedDomainNameLabelScope SubscriptionReuse { get; } = new AutoGeneratedDomainNameLabelScope(SubscriptionReuseValue);
        /// <summary> ResourceGroupReuse allows for the same hash to be created if the resource is created in the same Resource Group with the same resource name. </summary>
        public static AutoGeneratedDomainNameLabelScope ResourceGroupReuse { get; } = new AutoGeneratedDomainNameLabelScope(ResourceGroupReuseValue);
        /// <summary> NoReuse will create a new hash regardless of the Subscription, Resource Group, Tenant and Resource name. </summary>
        public static AutoGeneratedDomainNameLabelScope NoReuse { get; } = new AutoGeneratedDomainNameLabelScope(NoReuseValue);
        /// <summary> Determines if two <see cref="AutoGeneratedDomainNameLabelScope"/> values are the same. </summary>
        public static bool operator ==(AutoGeneratedDomainNameLabelScope left, AutoGeneratedDomainNameLabelScope right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AutoGeneratedDomainNameLabelScope"/> values are not the same. </summary>
        public static bool operator !=(AutoGeneratedDomainNameLabelScope left, AutoGeneratedDomainNameLabelScope right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AutoGeneratedDomainNameLabelScope"/>. </summary>
        public static implicit operator AutoGeneratedDomainNameLabelScope(string value) => new AutoGeneratedDomainNameLabelScope(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AutoGeneratedDomainNameLabelScope other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AutoGeneratedDomainNameLabelScope other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
