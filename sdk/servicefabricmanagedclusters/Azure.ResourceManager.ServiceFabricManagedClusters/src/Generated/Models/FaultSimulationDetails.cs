// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ServiceFabricManagedClusters.Models
{
    /// <summary> Details for Fault Simulation. </summary>
    public partial class FaultSimulationDetails
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="FaultSimulationDetails"/>. </summary>
        internal FaultSimulationDetails()
        {
            NodeTypeFaultSimulation = new ChangeTrackingList<NodeTypeFaultSimulation>();
        }

        /// <summary> Initializes a new instance of <see cref="FaultSimulationDetails"/>. </summary>
        /// <param name="clusterId"> unique identifier for the cluster resource. </param>
        /// <param name="operationId"> unique identifier for the operation associated with the fault simulation. </param>
        /// <param name="nodeTypeFaultSimulation"> List of node type simulations associated with the cluster fault simulation. </param>
        /// <param name="parameters">
        /// Fault simulation parameters.
        /// Please note <see cref="FaultSimulationContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ZoneFaultSimulationContent"/>.
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal FaultSimulationDetails(string clusterId, string operationId, IReadOnlyList<NodeTypeFaultSimulation> nodeTypeFaultSimulation, FaultSimulationContent parameters, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ClusterId = clusterId;
            OperationId = operationId;
            NodeTypeFaultSimulation = nodeTypeFaultSimulation;
            Parameters = parameters;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> unique identifier for the cluster resource. </summary>
        public string ClusterId { get; }
        /// <summary> unique identifier for the operation associated with the fault simulation. </summary>
        public string OperationId { get; }
        /// <summary> List of node type simulations associated with the cluster fault simulation. </summary>
        public IReadOnlyList<NodeTypeFaultSimulation> NodeTypeFaultSimulation { get; }
        /// <summary>
        /// Fault simulation parameters.
        /// Please note <see cref="FaultSimulationContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ZoneFaultSimulationContent"/>.
        /// </summary>
        public FaultSimulationContent Parameters { get; }
    }
}
