// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ServiceFabricManagedClusters.Models
{
    /// <summary> Describes the parameters for updating a rolling upgrade of application or cluster. </summary>
    public partial class RuntimeRollingUpgradeUpdateMonitoringPolicy
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="RuntimeRollingUpgradeUpdateMonitoringPolicy"/>. </summary>
        /// <param name="rollingUpgradeMode"> The mode used to monitor health during a rolling upgrade. </param>
        public RuntimeRollingUpgradeUpdateMonitoringPolicy(RuntimeRollingUpgradeMode rollingUpgradeMode)
        {
            RollingUpgradeMode = rollingUpgradeMode;
        }

        /// <summary> Initializes a new instance of <see cref="RuntimeRollingUpgradeUpdateMonitoringPolicy"/>. </summary>
        /// <param name="rollingUpgradeMode"> The mode used to monitor health during a rolling upgrade. </param>
        /// <param name="forceRestart"> If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data). </param>
        /// <param name="replicaSetCheckTimeoutInMilliseconds"> The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer). </param>
        /// <param name="failureAction"> The compensating action to perform when a Monitored upgrade encounters monitoring policy or health policy violations. Invalid indicates the failure action is invalid. Rollback specifies that the upgrade will start rolling back automatically. Manual indicates that the upgrade will switch to UnmonitoredManual upgrade mode. </param>
        /// <param name="healthCheckWaitDurationInMilliseconds"> The amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds. </param>
        /// <param name="healthCheckStableDurationInMilliseconds"> The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds. </param>
        /// <param name="healthCheckRetryTimeoutInMilliseconds"> The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds. </param>
        /// <param name="upgradeTimeoutInMilliseconds"> The amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds. </param>
        /// <param name="upgradeDomainTimeoutInMilliseconds"> The amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds. </param>
        /// <param name="instanceCloseDelayDurationInSeconds"> Duration in seconds, to wait before a stateless instance is closed, to allow the active requests to drain gracefully. This would be effective when the instance is closing during the application/cluster upgrade, only for those instances which have a non-zero delay duration configured in the service description. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal RuntimeRollingUpgradeUpdateMonitoringPolicy(RuntimeRollingUpgradeMode rollingUpgradeMode, bool? forceRestart, long? replicaSetCheckTimeoutInMilliseconds, RuntimeFailureAction? failureAction, string healthCheckWaitDurationInMilliseconds, string healthCheckStableDurationInMilliseconds, string healthCheckRetryTimeoutInMilliseconds, string upgradeTimeoutInMilliseconds, string upgradeDomainTimeoutInMilliseconds, long? instanceCloseDelayDurationInSeconds, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            RollingUpgradeMode = rollingUpgradeMode;
            ForceRestart = forceRestart;
            ReplicaSetCheckTimeoutInMilliseconds = replicaSetCheckTimeoutInMilliseconds;
            FailureAction = failureAction;
            HealthCheckWaitDurationInMilliseconds = healthCheckWaitDurationInMilliseconds;
            HealthCheckStableDurationInMilliseconds = healthCheckStableDurationInMilliseconds;
            HealthCheckRetryTimeoutInMilliseconds = healthCheckRetryTimeoutInMilliseconds;
            UpgradeTimeoutInMilliseconds = upgradeTimeoutInMilliseconds;
            UpgradeDomainTimeoutInMilliseconds = upgradeDomainTimeoutInMilliseconds;
            InstanceCloseDelayDurationInSeconds = instanceCloseDelayDurationInSeconds;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="RuntimeRollingUpgradeUpdateMonitoringPolicy"/> for deserialization. </summary>
        internal RuntimeRollingUpgradeUpdateMonitoringPolicy()
        {
        }

        /// <summary> The mode used to monitor health during a rolling upgrade. </summary>
        public RuntimeRollingUpgradeMode RollingUpgradeMode { get; }
        /// <summary> If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data). </summary>
        public bool? ForceRestart { get; set; }
        /// <summary> The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer). </summary>
        public long? ReplicaSetCheckTimeoutInMilliseconds { get; set; }
        /// <summary> The compensating action to perform when a Monitored upgrade encounters monitoring policy or health policy violations. Invalid indicates the failure action is invalid. Rollback specifies that the upgrade will start rolling back automatically. Manual indicates that the upgrade will switch to UnmonitoredManual upgrade mode. </summary>
        public RuntimeFailureAction? FailureAction { get; set; }
        /// <summary> The amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds. </summary>
        public string HealthCheckWaitDurationInMilliseconds { get; set; }
        /// <summary> The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds. </summary>
        public string HealthCheckStableDurationInMilliseconds { get; set; }
        /// <summary> The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds. </summary>
        public string HealthCheckRetryTimeoutInMilliseconds { get; set; }
        /// <summary> The amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds. </summary>
        public string UpgradeTimeoutInMilliseconds { get; set; }
        /// <summary> The amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds. </summary>
        public string UpgradeDomainTimeoutInMilliseconds { get; set; }
        /// <summary> Duration in seconds, to wait before a stateless instance is closed, to allow the active requests to drain gracefully. This would be effective when the instance is closing during the application/cluster upgrade, only for those instances which have a non-zero delay duration configured in the service description. </summary>
        public long? InstanceCloseDelayDurationInSeconds { get; set; }
    }
}
