// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ServiceFabricManagedClusters.Models
{
    public partial class RuntimeRollingUpgradeUpdateMonitoringPolicy : IUtf8JsonSerializable, IJsonModel<RuntimeRollingUpgradeUpdateMonitoringPolicy>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<RuntimeRollingUpgradeUpdateMonitoringPolicy>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<RuntimeRollingUpgradeUpdateMonitoringPolicy>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RuntimeRollingUpgradeUpdateMonitoringPolicy>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(RuntimeRollingUpgradeUpdateMonitoringPolicy)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("rollingUpgradeMode"u8);
            writer.WriteStringValue(RollingUpgradeMode.ToString());
            if (Optional.IsDefined(ForceRestart))
            {
                writer.WritePropertyName("forceRestart"u8);
                writer.WriteBooleanValue(ForceRestart.Value);
            }
            if (Optional.IsDefined(ReplicaSetCheckTimeoutInMilliseconds))
            {
                writer.WritePropertyName("replicaSetCheckTimeoutInMilliseconds"u8);
                writer.WriteNumberValue(ReplicaSetCheckTimeoutInMilliseconds.Value);
            }
            if (Optional.IsDefined(FailureAction))
            {
                writer.WritePropertyName("failureAction"u8);
                writer.WriteStringValue(FailureAction.Value.ToString());
            }
            if (Optional.IsDefined(HealthCheckWaitDurationInMilliseconds))
            {
                writer.WritePropertyName("healthCheckWaitDurationInMilliseconds"u8);
                writer.WriteStringValue(HealthCheckWaitDurationInMilliseconds);
            }
            if (Optional.IsDefined(HealthCheckStableDurationInMilliseconds))
            {
                writer.WritePropertyName("healthCheckStableDurationInMilliseconds"u8);
                writer.WriteStringValue(HealthCheckStableDurationInMilliseconds);
            }
            if (Optional.IsDefined(HealthCheckRetryTimeoutInMilliseconds))
            {
                writer.WritePropertyName("healthCheckRetryTimeoutInMilliseconds"u8);
                writer.WriteStringValue(HealthCheckRetryTimeoutInMilliseconds);
            }
            if (Optional.IsDefined(UpgradeTimeoutInMilliseconds))
            {
                writer.WritePropertyName("upgradeTimeoutInMilliseconds"u8);
                writer.WriteStringValue(UpgradeTimeoutInMilliseconds);
            }
            if (Optional.IsDefined(UpgradeDomainTimeoutInMilliseconds))
            {
                writer.WritePropertyName("upgradeDomainTimeoutInMilliseconds"u8);
                writer.WriteStringValue(UpgradeDomainTimeoutInMilliseconds);
            }
            if (Optional.IsDefined(InstanceCloseDelayDurationInSeconds))
            {
                writer.WritePropertyName("instanceCloseDelayDurationInSeconds"u8);
                writer.WriteNumberValue(InstanceCloseDelayDurationInSeconds.Value);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        RuntimeRollingUpgradeUpdateMonitoringPolicy IJsonModel<RuntimeRollingUpgradeUpdateMonitoringPolicy>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RuntimeRollingUpgradeUpdateMonitoringPolicy>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(RuntimeRollingUpgradeUpdateMonitoringPolicy)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeRuntimeRollingUpgradeUpdateMonitoringPolicy(document.RootElement, options);
        }

        internal static RuntimeRollingUpgradeUpdateMonitoringPolicy DeserializeRuntimeRollingUpgradeUpdateMonitoringPolicy(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            RuntimeRollingUpgradeMode rollingUpgradeMode = default;
            bool? forceRestart = default;
            long? replicaSetCheckTimeoutInMilliseconds = default;
            RuntimeFailureAction? failureAction = default;
            string healthCheckWaitDurationInMilliseconds = default;
            string healthCheckStableDurationInMilliseconds = default;
            string healthCheckRetryTimeoutInMilliseconds = default;
            string upgradeTimeoutInMilliseconds = default;
            string upgradeDomainTimeoutInMilliseconds = default;
            long? instanceCloseDelayDurationInSeconds = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("rollingUpgradeMode"u8))
                {
                    rollingUpgradeMode = new RuntimeRollingUpgradeMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("forceRestart"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    forceRestart = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("replicaSetCheckTimeoutInMilliseconds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    replicaSetCheckTimeoutInMilliseconds = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("failureAction"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    failureAction = new RuntimeFailureAction(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("healthCheckWaitDurationInMilliseconds"u8))
                {
                    healthCheckWaitDurationInMilliseconds = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("healthCheckStableDurationInMilliseconds"u8))
                {
                    healthCheckStableDurationInMilliseconds = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("healthCheckRetryTimeoutInMilliseconds"u8))
                {
                    healthCheckRetryTimeoutInMilliseconds = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("upgradeTimeoutInMilliseconds"u8))
                {
                    upgradeTimeoutInMilliseconds = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("upgradeDomainTimeoutInMilliseconds"u8))
                {
                    upgradeDomainTimeoutInMilliseconds = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("instanceCloseDelayDurationInSeconds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    instanceCloseDelayDurationInSeconds = property.Value.GetInt64();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new RuntimeRollingUpgradeUpdateMonitoringPolicy(
                rollingUpgradeMode,
                forceRestart,
                replicaSetCheckTimeoutInMilliseconds,
                failureAction,
                healthCheckWaitDurationInMilliseconds,
                healthCheckStableDurationInMilliseconds,
                healthCheckRetryTimeoutInMilliseconds,
                upgradeTimeoutInMilliseconds,
                upgradeDomainTimeoutInMilliseconds,
                instanceCloseDelayDurationInSeconds,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<RuntimeRollingUpgradeUpdateMonitoringPolicy>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RuntimeRollingUpgradeUpdateMonitoringPolicy>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerServiceFabricManagedClustersContext.Default);
                default:
                    throw new FormatException($"The model {nameof(RuntimeRollingUpgradeUpdateMonitoringPolicy)} does not support writing '{options.Format}' format.");
            }
        }

        RuntimeRollingUpgradeUpdateMonitoringPolicy IPersistableModel<RuntimeRollingUpgradeUpdateMonitoringPolicy>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RuntimeRollingUpgradeUpdateMonitoringPolicy>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeRuntimeRollingUpgradeUpdateMonitoringPolicy(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(RuntimeRollingUpgradeUpdateMonitoringPolicy)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<RuntimeRollingUpgradeUpdateMonitoringPolicy>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
