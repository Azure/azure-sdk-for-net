// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ServiceFabricManagedClusters.Models
{
    public partial class VmApplication : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ConfigurationReference))
            {
                writer.WritePropertyName("configurationReference"u8);
                writer.WriteStringValue(ConfigurationReference.AbsoluteUri);
            }
            if (Optional.IsDefined(EnableAutomaticUpgrade))
            {
                writer.WritePropertyName("enableAutomaticUpgrade"u8);
                writer.WriteBooleanValue(EnableAutomaticUpgrade.Value);
            }
            if (Optional.IsDefined(Order))
            {
                writer.WritePropertyName("order"u8);
                writer.WriteNumberValue(Order.Value);
            }
            writer.WritePropertyName("packageReferenceId"u8);
            writer.WriteStringValue(PackageReferenceId);
            if (Optional.IsDefined(VmGalleryTags))
            {
                writer.WritePropertyName("vmGalleryTags"u8);
                writer.WriteStringValue(VmGalleryTags);
            }
            if (Optional.IsDefined(TreatFailureAsDeploymentFailure))
            {
                writer.WritePropertyName("treatFailureAsDeploymentFailure"u8);
                writer.WriteBooleanValue(TreatFailureAsDeploymentFailure.Value);
            }
            writer.WriteEndObject();
        }

        internal static VmApplication DeserializeVmApplication(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Uri configurationReference = default;
            bool? enableAutomaticUpgrade = default;
            int? order = default;
            ResourceIdentifier packageReferenceId = default;
            string vmGalleryTags = default;
            bool? treatFailureAsDeploymentFailure = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("configurationReference"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    configurationReference = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("enableAutomaticUpgrade"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableAutomaticUpgrade = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("order"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    order = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("packageReferenceId"u8))
                {
                    packageReferenceId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("vmGalleryTags"u8))
                {
                    vmGalleryTags = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("treatFailureAsDeploymentFailure"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    treatFailureAsDeploymentFailure = property.Value.GetBoolean();
                    continue;
                }
            }
            return new VmApplication(
                configurationReference,
                enableAutomaticUpgrade,
                order,
                packageReferenceId,
                vmGalleryTags,
                treatFailureAsDeploymentFailure);
        }
    }
}
