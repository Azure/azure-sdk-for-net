// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.ServiceFabricManagedClusters.Models;

namespace Azure.ResourceManager.ServiceFabricManagedClusters
{
    public partial class ManagedClusterData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Sku))
            {
                writer.WritePropertyName("sku");
                writer.WriteObjectValue(Sku);
            }
            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags");
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("location");
            writer.WriteStringValue(Location);
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(DnsName))
            {
                writer.WritePropertyName("dnsName");
                writer.WriteStringValue(DnsName);
            }
            if (Optional.IsDefined(ClientConnectionPort))
            {
                writer.WritePropertyName("clientConnectionPort");
                writer.WriteNumberValue(ClientConnectionPort.Value);
            }
            if (Optional.IsDefined(HttpGatewayConnectionPort))
            {
                writer.WritePropertyName("httpGatewayConnectionPort");
                writer.WriteNumberValue(HttpGatewayConnectionPort.Value);
            }
            if (Optional.IsDefined(AdminUserName))
            {
                writer.WritePropertyName("adminUserName");
                writer.WriteStringValue(AdminUserName);
            }
            if (Optional.IsDefined(AdminPassword))
            {
                writer.WritePropertyName("adminPassword");
                writer.WriteStringValue(AdminPassword);
            }
            if (Optional.IsCollectionDefined(LoadBalancingRules))
            {
                writer.WritePropertyName("loadBalancingRules");
                writer.WriteStartArray();
                foreach (var item in LoadBalancingRules)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(AllowRdpAccess))
            {
                writer.WritePropertyName("allowRdpAccess");
                writer.WriteBooleanValue(AllowRdpAccess.Value);
            }
            if (Optional.IsCollectionDefined(NetworkSecurityRules))
            {
                writer.WritePropertyName("networkSecurityRules");
                writer.WriteStartArray();
                foreach (var item in NetworkSecurityRules)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Clients))
            {
                writer.WritePropertyName("clients");
                writer.WriteStartArray();
                foreach (var item in Clients)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(AzureActiveDirectory))
            {
                writer.WritePropertyName("azureActiveDirectory");
                writer.WriteObjectValue(AzureActiveDirectory);
            }
            if (Optional.IsCollectionDefined(FabricSettings))
            {
                writer.WritePropertyName("fabricSettings");
                writer.WriteStartArray();
                foreach (var item in FabricSettings)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ClusterCodeVersion))
            {
                writer.WritePropertyName("clusterCodeVersion");
                writer.WriteStringValue(ClusterCodeVersion);
            }
            if (Optional.IsDefined(ClusterUpgradeMode))
            {
                writer.WritePropertyName("clusterUpgradeMode");
                writer.WriteStringValue(ClusterUpgradeMode.Value.ToString());
            }
            if (Optional.IsDefined(ClusterUpgradeCadence))
            {
                writer.WritePropertyName("clusterUpgradeCadence");
                writer.WriteStringValue(ClusterUpgradeCadence.Value.ToString());
            }
            if (Optional.IsCollectionDefined(AddonFeatures))
            {
                writer.WritePropertyName("addonFeatures");
                writer.WriteStartArray();
                foreach (var item in AddonFeatures)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(EnableAutoOSUpgrade))
            {
                writer.WritePropertyName("enableAutoOSUpgrade");
                writer.WriteBooleanValue(EnableAutoOSUpgrade.Value);
            }
            if (Optional.IsDefined(ZonalResiliency))
            {
                writer.WritePropertyName("zonalResiliency");
                writer.WriteBooleanValue(ZonalResiliency.Value);
            }
            if (Optional.IsDefined(ApplicationTypeVersionsCleanupPolicy))
            {
                writer.WritePropertyName("applicationTypeVersionsCleanupPolicy");
                writer.WriteObjectValue(ApplicationTypeVersionsCleanupPolicy);
            }
            if (Optional.IsDefined(EnableIPv6))
            {
                writer.WritePropertyName("enableIpv6");
                writer.WriteBooleanValue(EnableIPv6.Value);
            }
            if (Optional.IsDefined(SubnetId))
            {
                writer.WritePropertyName("subnetId");
                writer.WriteStringValue(SubnetId);
            }
            if (Optional.IsCollectionDefined(IPTags))
            {
                writer.WritePropertyName("ipTags");
                writer.WriteStartArray();
                foreach (var item in IPTags)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(EnableServicePublicIP))
            {
                writer.WritePropertyName("enableServicePublicIP");
                writer.WriteBooleanValue(EnableServicePublicIP.Value);
            }
            if (Optional.IsCollectionDefined(AuxiliarySubnets))
            {
                writer.WritePropertyName("auxiliarySubnets");
                writer.WriteStartArray();
                foreach (var item in AuxiliarySubnets)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ServiceEndpoints))
            {
                writer.WritePropertyName("serviceEndpoints");
                writer.WriteStartArray();
                foreach (var item in ServiceEndpoints)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static ManagedClusterData DeserializeManagedClusterData(JsonElement element)
        {
            Optional<ServiceFabricManagedClustersSku> sku = default;
            Optional<ETag> etag = default;
            Optional<IDictionary<string, string>> tags = default;
            AzureLocation location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<string> dnsName = default;
            Optional<string> fqdn = default;
            Optional<string> ipv4Address = default;
            Optional<string> clusterId = default;
            Optional<ClusterState> clusterState = default;
            Optional<IReadOnlyList<string>> clusterCertificateThumbprints = default;
            Optional<int> clientConnectionPort = default;
            Optional<int> httpGatewayConnectionPort = default;
            Optional<string> adminUserName = default;
            Optional<string> adminPassword = default;
            Optional<IList<LoadBalancingRule>> loadBalancingRules = default;
            Optional<bool> allowRdpAccess = default;
            Optional<IList<NetworkSecurityRule>> networkSecurityRules = default;
            Optional<IList<ClientCertificate>> clients = default;
            Optional<AzureActiveDirectory> azureActiveDirectory = default;
            Optional<IList<SettingsSectionDescription>> fabricSettings = default;
            Optional<ManagedResourceProvisioningState> provisioningState = default;
            Optional<string> clusterCodeVersion = default;
            Optional<ClusterUpgradeMode> clusterUpgradeMode = default;
            Optional<ClusterUpgradeCadence> clusterUpgradeCadence = default;
            Optional<IList<ManagedClusterAddOnFeature>> addonFeatures = default;
            Optional<bool> enableAutoOSUpgrade = default;
            Optional<bool> zonalResiliency = default;
            Optional<ApplicationTypeVersionsCleanupPolicy> applicationTypeVersionsCleanupPolicy = default;
            Optional<bool> enableIPv6 = default;
            Optional<string> subnetId = default;
            Optional<IList<IPTag>> ipTags = default;
            Optional<string> ipv6Address = default;
            Optional<bool> enableServicePublicIP = default;
            Optional<IList<Subnet>> auxiliarySubnets = default;
            Optional<IList<ServiceEndpoint>> serviceEndpoints = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("sku"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    sku = ServiceFabricManagedClustersSku.DeserializeServiceFabricManagedClustersSku(property.Value);
                    continue;
                }
                if (property.NameEquals("etag"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    etag = new ETag(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("tags"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"))
                {
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.ToString());
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("dnsName"))
                        {
                            dnsName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("fqdn"))
                        {
                            fqdn = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("ipv4Address"))
                        {
                            ipv4Address = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("clusterId"))
                        {
                            clusterId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("clusterState"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            clusterState = new ClusterState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("clusterCertificateThumbprints"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            clusterCertificateThumbprints = array;
                            continue;
                        }
                        if (property0.NameEquals("clientConnectionPort"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            clientConnectionPort = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("httpGatewayConnectionPort"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            httpGatewayConnectionPort = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("adminUserName"))
                        {
                            adminUserName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("adminPassword"))
                        {
                            adminPassword = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("loadBalancingRules"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<LoadBalancingRule> array = new List<LoadBalancingRule>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(LoadBalancingRule.DeserializeLoadBalancingRule(item));
                            }
                            loadBalancingRules = array;
                            continue;
                        }
                        if (property0.NameEquals("allowRdpAccess"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            allowRdpAccess = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("networkSecurityRules"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<NetworkSecurityRule> array = new List<NetworkSecurityRule>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(NetworkSecurityRule.DeserializeNetworkSecurityRule(item));
                            }
                            networkSecurityRules = array;
                            continue;
                        }
                        if (property0.NameEquals("clients"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<ClientCertificate> array = new List<ClientCertificate>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(ClientCertificate.DeserializeClientCertificate(item));
                            }
                            clients = array;
                            continue;
                        }
                        if (property0.NameEquals("azureActiveDirectory"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            azureActiveDirectory = AzureActiveDirectory.DeserializeAzureActiveDirectory(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("fabricSettings"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<SettingsSectionDescription> array = new List<SettingsSectionDescription>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(SettingsSectionDescription.DeserializeSettingsSectionDescription(item));
                            }
                            fabricSettings = array;
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            provisioningState = new ManagedResourceProvisioningState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("clusterCodeVersion"))
                        {
                            clusterCodeVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("clusterUpgradeMode"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            clusterUpgradeMode = new ClusterUpgradeMode(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("clusterUpgradeCadence"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            clusterUpgradeCadence = new ClusterUpgradeCadence(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("addonFeatures"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<ManagedClusterAddOnFeature> array = new List<ManagedClusterAddOnFeature>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(new ManagedClusterAddOnFeature(item.GetString()));
                            }
                            addonFeatures = array;
                            continue;
                        }
                        if (property0.NameEquals("enableAutoOSUpgrade"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            enableAutoOSUpgrade = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("zonalResiliency"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            zonalResiliency = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("applicationTypeVersionsCleanupPolicy"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            applicationTypeVersionsCleanupPolicy = ApplicationTypeVersionsCleanupPolicy.DeserializeApplicationTypeVersionsCleanupPolicy(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("enableIpv6"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            enableIPv6 = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("subnetId"))
                        {
                            subnetId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("ipTags"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<IPTag> array = new List<IPTag>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(IPTag.DeserializeIPTag(item));
                            }
                            ipTags = array;
                            continue;
                        }
                        if (property0.NameEquals("ipv6Address"))
                        {
                            ipv6Address = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("enableServicePublicIP"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            enableServicePublicIP = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("auxiliarySubnets"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<Subnet> array = new List<Subnet>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(Subnet.DeserializeSubnet(item));
                            }
                            auxiliarySubnets = array;
                            continue;
                        }
                        if (property0.NameEquals("serviceEndpoints"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<ServiceEndpoint> array = new List<ServiceEndpoint>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(ServiceEndpoint.DeserializeServiceEndpoint(item));
                            }
                            serviceEndpoints = array;
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new ManagedClusterData(id, name, type, systemData.Value, Optional.ToDictionary(tags), location, sku.Value, dnsName.Value, fqdn.Value, ipv4Address.Value, clusterId.Value, Optional.ToNullable(clusterState), Optional.ToList(clusterCertificateThumbprints), Optional.ToNullable(clientConnectionPort), Optional.ToNullable(httpGatewayConnectionPort), adminUserName.Value, adminPassword.Value, Optional.ToList(loadBalancingRules), Optional.ToNullable(allowRdpAccess), Optional.ToList(networkSecurityRules), Optional.ToList(clients), azureActiveDirectory.Value, Optional.ToList(fabricSettings), Optional.ToNullable(provisioningState), clusterCodeVersion.Value, Optional.ToNullable(clusterUpgradeMode), Optional.ToNullable(clusterUpgradeCadence), Optional.ToList(addonFeatures), Optional.ToNullable(enableAutoOSUpgrade), Optional.ToNullable(zonalResiliency), applicationTypeVersionsCleanupPolicy.Value, Optional.ToNullable(enableIPv6), subnetId.Value, Optional.ToList(ipTags), ipv6Address.Value, Optional.ToNullable(enableServicePublicIP), Optional.ToList(auxiliarySubnets), Optional.ToList(serviceEndpoints), Optional.ToNullable(etag));
        }
    }
}
