// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ServiceFabricManagedClusters.Models
{
    public partial class LoadBalancingRule : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("frontendPort");
            writer.WriteNumberValue(FrontendPort);
            writer.WritePropertyName("backendPort");
            writer.WriteNumberValue(BackendPort);
            writer.WritePropertyName("protocol");
            writer.WriteStringValue(Protocol.ToString());
            if (Optional.IsDefined(ProbePort))
            {
                writer.WritePropertyName("probePort");
                writer.WriteNumberValue(ProbePort.Value);
            }
            writer.WritePropertyName("probeProtocol");
            writer.WriteStringValue(ProbeProtocol.ToString());
            if (Optional.IsDefined(ProbeRequestPath))
            {
                writer.WritePropertyName("probeRequestPath");
                writer.WriteStringValue(ProbeRequestPath);
            }
            if (Optional.IsDefined(LoadDistribution))
            {
                writer.WritePropertyName("loadDistribution");
                writer.WriteStringValue(LoadDistribution);
            }
            writer.WriteEndObject();
        }

        internal static LoadBalancingRule DeserializeLoadBalancingRule(JsonElement element)
        {
            int frontendPort = default;
            int backendPort = default;
            Protocol protocol = default;
            Optional<int> probePort = default;
            ProbeProtocol probeProtocol = default;
            Optional<string> probeRequestPath = default;
            Optional<string> loadDistribution = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("frontendPort"))
                {
                    frontendPort = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("backendPort"))
                {
                    backendPort = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("protocol"))
                {
                    protocol = new Protocol(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("probePort"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    probePort = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("probeProtocol"))
                {
                    probeProtocol = new ProbeProtocol(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("probeRequestPath"))
                {
                    probeRequestPath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("loadDistribution"))
                {
                    loadDistribution = property.Value.GetString();
                    continue;
                }
            }
            return new LoadBalancingRule(frontendPort, backendPort, protocol, Optional.ToNullable(probePort), probeProtocol, probeRequestPath.Value, loadDistribution.Value);
        }
    }
}
