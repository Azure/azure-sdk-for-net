// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;

namespace Azure.ResourceManager.ServiceFabricManagedClusters.Models
{
    public partial class ManagedMaintenanceWindowStatus
    {
        internal static ManagedMaintenanceWindowStatus DeserializeManagedMaintenanceWindowStatus(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            bool? isWindowEnabled = default;
            bool? isRegionReady = default;
            bool? isWindowActive = default;
            bool? canApplyUpdates = default;
            DateTimeOffset? lastWindowStatusUpdateAtUTC = default;
            DateTimeOffset? lastWindowStartTimeUTC = default;
            DateTimeOffset? lastWindowEndTimeUTC = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("isWindowEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isWindowEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isRegionReady"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isRegionReady = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isWindowActive"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isWindowActive = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("canApplyUpdates"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    canApplyUpdates = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("lastWindowStatusUpdateAtUTC"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastWindowStatusUpdateAtUTC = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastWindowStartTimeUTC"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastWindowStartTimeUTC = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastWindowEndTimeUTC"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastWindowEndTimeUTC = property.Value.GetDateTimeOffset("O");
                    continue;
                }
            }
            return new ManagedMaintenanceWindowStatus(
                isWindowEnabled,
                isRegionReady,
                isWindowActive,
                canApplyUpdates,
                lastWindowStatusUpdateAtUTC,
                lastWindowStartTimeUTC,
                lastWindowEndTimeUTC);
        }
    }
}
