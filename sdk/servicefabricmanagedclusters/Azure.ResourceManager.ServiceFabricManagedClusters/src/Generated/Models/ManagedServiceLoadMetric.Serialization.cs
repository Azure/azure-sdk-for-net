// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ServiceFabricManagedClusters.Models
{
    public partial class ManagedServiceLoadMetric : IUtf8JsonSerializable, IJsonModel<ManagedServiceLoadMetric>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ManagedServiceLoadMetric>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<ManagedServiceLoadMetric>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            if ((options.Format != "W" || ((IPersistableModel<ManagedServiceLoadMetric>)this).GetFormatFromOptions(options) != "J") && options.Format != "J")
            {
                throw new InvalidOperationException($"Must use 'J' format when calling the {nameof(IJsonModel<ManagedServiceLoadMetric>)} interface");
            }

            writer.WriteStartObject();
            writer.WritePropertyName("name"u8);
            writer.WriteStringValue(Name);
            if (Optional.IsDefined(Weight))
            {
                writer.WritePropertyName("weight"u8);
                writer.WriteStringValue(Weight.Value.ToString());
            }
            if (Optional.IsDefined(PrimaryDefaultLoad))
            {
                writer.WritePropertyName("primaryDefaultLoad"u8);
                writer.WriteNumberValue(PrimaryDefaultLoad.Value);
            }
            if (Optional.IsDefined(SecondaryDefaultLoad))
            {
                writer.WritePropertyName("secondaryDefaultLoad"u8);
                writer.WriteNumberValue(SecondaryDefaultLoad.Value);
            }
            if (Optional.IsDefined(DefaultLoad))
            {
                writer.WritePropertyName("defaultLoad"u8);
                writer.WriteNumberValue(DefaultLoad.Value);
            }
            if (_serializedAdditionalRawData != null && options.Format == "J")
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        ManagedServiceLoadMetric IJsonModel<ManagedServiceLoadMetric>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(ManagedServiceLoadMetric)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeManagedServiceLoadMetric(document.RootElement, options);
        }

        internal static ManagedServiceLoadMetric DeserializeManagedServiceLoadMetric(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string name = default;
            Optional<ManagedServiceLoadMetricWeight> weight = default;
            Optional<int> primaryDefaultLoad = default;
            Optional<int> secondaryDefaultLoad = default;
            Optional<int> defaultLoad = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("weight"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    weight = new ManagedServiceLoadMetricWeight(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("primaryDefaultLoad"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    primaryDefaultLoad = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("secondaryDefaultLoad"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    secondaryDefaultLoad = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("defaultLoad"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    defaultLoad = property.Value.GetInt32();
                    continue;
                }
                if (options.Format == "J")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new ManagedServiceLoadMetric(name, Optional.ToNullable(weight), Optional.ToNullable(primaryDefaultLoad), Optional.ToNullable(secondaryDefaultLoad), Optional.ToNullable(defaultLoad), serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ManagedServiceLoadMetric>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(ManagedServiceLoadMetric)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        ManagedServiceLoadMetric IPersistableModel<ManagedServiceLoadMetric>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(ManagedServiceLoadMetric)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeManagedServiceLoadMetric(document.RootElement, options);
        }

        string IPersistableModel<ManagedServiceLoadMetric>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
