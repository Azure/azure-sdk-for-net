// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ServiceFabricManagedClusters.Models
{
    public partial class RollingUpgradeMonitoringPolicy : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("failureAction");
            writer.WriteStringValue(FailureAction.ToString());
            writer.WritePropertyName("healthCheckWaitDuration");
            writer.WriteStringValue(HealthCheckWaitDuration, "c");
            writer.WritePropertyName("healthCheckStableDuration");
            writer.WriteStringValue(HealthCheckStableDuration, "c");
            writer.WritePropertyName("healthCheckRetryTimeout");
            writer.WriteStringValue(HealthCheckRetryTimeout, "c");
            writer.WritePropertyName("upgradeTimeout");
            writer.WriteStringValue(UpgradeTimeout, "c");
            writer.WritePropertyName("upgradeDomainTimeout");
            writer.WriteStringValue(UpgradeDomainTimeout, "c");
            writer.WriteEndObject();
        }

        internal static RollingUpgradeMonitoringPolicy DeserializeRollingUpgradeMonitoringPolicy(JsonElement element)
        {
            PolicyViolationCompensationAction failureAction = default;
            TimeSpan healthCheckWaitDuration = default;
            TimeSpan healthCheckStableDuration = default;
            TimeSpan healthCheckRetryTimeout = default;
            TimeSpan upgradeTimeout = default;
            TimeSpan upgradeDomainTimeout = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("failureAction"))
                {
                    failureAction = new PolicyViolationCompensationAction(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("healthCheckWaitDuration"))
                {
                    healthCheckWaitDuration = property.Value.GetTimeSpan("c");
                    continue;
                }
                if (property.NameEquals("healthCheckStableDuration"))
                {
                    healthCheckStableDuration = property.Value.GetTimeSpan("c");
                    continue;
                }
                if (property.NameEquals("healthCheckRetryTimeout"))
                {
                    healthCheckRetryTimeout = property.Value.GetTimeSpan("c");
                    continue;
                }
                if (property.NameEquals("upgradeTimeout"))
                {
                    upgradeTimeout = property.Value.GetTimeSpan("c");
                    continue;
                }
                if (property.NameEquals("upgradeDomainTimeout"))
                {
                    upgradeDomainTimeout = property.Value.GetTimeSpan("c");
                    continue;
                }
            }
            return new RollingUpgradeMonitoringPolicy(failureAction, healthCheckWaitDuration, healthCheckStableDuration, healthCheckRetryTimeout, upgradeTimeout, upgradeDomainTimeout);
        }
    }
}
