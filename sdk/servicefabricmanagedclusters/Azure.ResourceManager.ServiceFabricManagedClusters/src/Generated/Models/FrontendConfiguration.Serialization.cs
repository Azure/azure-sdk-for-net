// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ServiceFabricManagedClusters.Models
{
    public partial class FrontendConfiguration : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(IPAddressType))
            {
                writer.WritePropertyName("ipAddressType");
                writer.WriteStringValue(IPAddressType.Value.ToString());
            }
            if (Optional.IsDefined(LoadBalancerBackendAddressPoolId))
            {
                writer.WritePropertyName("loadBalancerBackendAddressPoolId");
                writer.WriteStringValue(LoadBalancerBackendAddressPoolId);
            }
            if (Optional.IsDefined(LoadBalancerInboundNatPoolId))
            {
                writer.WritePropertyName("loadBalancerInboundNatPoolId");
                writer.WriteStringValue(LoadBalancerInboundNatPoolId);
            }
            writer.WriteEndObject();
        }

        internal static FrontendConfiguration DeserializeFrontendConfiguration(JsonElement element)
        {
            Optional<IPAddressType> ipAddressType = default;
            Optional<string> loadBalancerBackendAddressPoolId = default;
            Optional<string> loadBalancerInboundNatPoolId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("ipAddressType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    ipAddressType = new IPAddressType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("loadBalancerBackendAddressPoolId"))
                {
                    loadBalancerBackendAddressPoolId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("loadBalancerInboundNatPoolId"))
                {
                    loadBalancerInboundNatPoolId = property.Value.GetString();
                    continue;
                }
            }
            return new FrontendConfiguration(Optional.ToNullable(ipAddressType), loadBalancerBackendAddressPoolId.Value, loadBalancerInboundNatPoolId.Value);
        }
    }
}
