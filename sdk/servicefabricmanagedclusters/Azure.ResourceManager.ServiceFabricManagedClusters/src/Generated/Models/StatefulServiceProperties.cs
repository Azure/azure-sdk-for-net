// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ServiceFabricManagedClusters.Models
{
    /// <summary> The properties of a stateful service resource. </summary>
    public partial class StatefulServiceProperties : ServiceResourceProperties
    {
        /// <summary> Initializes a new instance of StatefulServiceProperties. </summary>
        /// <param name="serviceTypeName"> The name of the service type. </param>
        /// <param name="partitionDescription">
        /// Describes how the service is partitioned.
        /// Please note <see cref="Partition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="NamedPartitionScheme"/>, <see cref="SingletonPartitionScheme"/> and <see cref="UniformInt64RangePartitionScheme"/>.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serviceTypeName"/> or <paramref name="partitionDescription"/> is null. </exception>
        public StatefulServiceProperties(string serviceTypeName, Partition partitionDescription) : base(serviceTypeName, partitionDescription)
        {
            if (serviceTypeName == null)
            {
                throw new ArgumentNullException(nameof(serviceTypeName));
            }
            if (partitionDescription == null)
            {
                throw new ArgumentNullException(nameof(partitionDescription));
            }

            ServiceKind = ServiceKind.Stateful;
        }

        /// <summary> Initializes a new instance of StatefulServiceProperties. </summary>
        /// <param name="placementConstraints"> The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: &quot;NodeColor == blue)&quot;. </param>
        /// <param name="correlationScheme"> A list that describes the correlation of the service with other services. </param>
        /// <param name="serviceLoadMetrics"> The service load metrics is given as an array of ServiceLoadMetric objects. </param>
        /// <param name="servicePlacementPolicies">
        /// A list that describes the correlation of the service with other services.
        /// Please note <see cref="ServicePlacementPolicy"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ServicePlacementInvalidDomainPolicy"/>, <see cref="ServicePlacementNonPartiallyPlaceServicePolicy"/>, <see cref="ServicePlacementPreferPrimaryDomainPolicy"/>, <see cref="ServicePlacementRequiredDomainPolicy"/> and <see cref="ServicePlacementRequireDomainDistributionPolicy"/>.
        /// </param>
        /// <param name="defaultMoveCost"> Specifies the move cost for the service. </param>
        /// <param name="scalingPolicies"> Scaling policies for this service. </param>
        /// <param name="provisioningState"> The current deployment or provisioning state, which only appears in the response. </param>
        /// <param name="serviceKind"> The kind of service (Stateless or Stateful). </param>
        /// <param name="serviceTypeName"> The name of the service type. </param>
        /// <param name="partitionDescription">
        /// Describes how the service is partitioned.
        /// Please note <see cref="Partition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="NamedPartitionScheme"/>, <see cref="SingletonPartitionScheme"/> and <see cref="UniformInt64RangePartitionScheme"/>.
        /// </param>
        /// <param name="servicePackageActivationMode"> The activation Mode of the service package. </param>
        /// <param name="hasPersistedState"> A flag indicating whether this is a persistent service which stores states on the local disk. If it is then the value of this property is true, if not it is false. </param>
        /// <param name="targetReplicaSetSize"> The target replica set size as a number. </param>
        /// <param name="minReplicaSetSize"> The minimum replica set size as a number. </param>
        /// <param name="replicaRestartWaitDuration"> The duration between when a replica goes down and when a new replica is created, represented in ISO 8601 format &quot;hh:mm:ss&quot;. </param>
        /// <param name="quorumLossWaitDuration"> The maximum duration for which a partition is allowed to be in a state of quorum loss, represented in ISO 8601 format &quot;hh:mm:ss&quot;. </param>
        /// <param name="standByReplicaKeepDuration"> The definition on how long StandBy replicas should be maintained before being removed, represented in ISO 8601 format &quot;hh:mm:ss&quot;. </param>
        /// <param name="servicePlacementTimeLimit"> The duration for which replicas can stay InBuild before reporting that build is stuck, represented in ISO 8601 format &quot;hh:mm:ss&quot;. </param>
        internal StatefulServiceProperties(string placementConstraints, IList<ServiceCorrelation> correlationScheme, IList<ServiceLoadMetric> serviceLoadMetrics, IList<ServicePlacementPolicy> servicePlacementPolicies, MoveCost? defaultMoveCost, IList<ScalingPolicy> scalingPolicies, string provisioningState, ServiceKind serviceKind, string serviceTypeName, Partition partitionDescription, ServicePackageActivationMode? servicePackageActivationMode, bool? hasPersistedState, int? targetReplicaSetSize, int? minReplicaSetSize, TimeSpan? replicaRestartWaitDuration, TimeSpan? quorumLossWaitDuration, TimeSpan? standByReplicaKeepDuration, TimeSpan? servicePlacementTimeLimit) : base(placementConstraints, correlationScheme, serviceLoadMetrics, servicePlacementPolicies, defaultMoveCost, scalingPolicies, provisioningState, serviceKind, serviceTypeName, partitionDescription, servicePackageActivationMode)
        {
            HasPersistedState = hasPersistedState;
            TargetReplicaSetSize = targetReplicaSetSize;
            MinReplicaSetSize = minReplicaSetSize;
            ReplicaRestartWaitDuration = replicaRestartWaitDuration;
            QuorumLossWaitDuration = quorumLossWaitDuration;
            StandByReplicaKeepDuration = standByReplicaKeepDuration;
            ServicePlacementTimeLimit = servicePlacementTimeLimit;
            ServiceKind = serviceKind;
        }

        /// <summary> A flag indicating whether this is a persistent service which stores states on the local disk. If it is then the value of this property is true, if not it is false. </summary>
        public bool? HasPersistedState { get; set; }
        /// <summary> The target replica set size as a number. </summary>
        public int? TargetReplicaSetSize { get; set; }
        /// <summary> The minimum replica set size as a number. </summary>
        public int? MinReplicaSetSize { get; set; }
        /// <summary> The duration between when a replica goes down and when a new replica is created, represented in ISO 8601 format &quot;hh:mm:ss&quot;. </summary>
        public TimeSpan? ReplicaRestartWaitDuration { get; set; }
        /// <summary> The maximum duration for which a partition is allowed to be in a state of quorum loss, represented in ISO 8601 format &quot;hh:mm:ss&quot;. </summary>
        public TimeSpan? QuorumLossWaitDuration { get; set; }
        /// <summary> The definition on how long StandBy replicas should be maintained before being removed, represented in ISO 8601 format &quot;hh:mm:ss&quot;. </summary>
        public TimeSpan? StandByReplicaKeepDuration { get; set; }
        /// <summary> The duration for which replicas can stay InBuild before reporting that build is stuck, represented in ISO 8601 format &quot;hh:mm:ss&quot;. </summary>
        public TimeSpan? ServicePlacementTimeLimit { get; set; }
    }
}
