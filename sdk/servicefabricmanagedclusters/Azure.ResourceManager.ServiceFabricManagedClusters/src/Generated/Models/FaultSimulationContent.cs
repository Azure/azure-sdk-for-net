// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ServiceFabricManagedClusters.Models
{
    /// <summary>
    /// Parameters for Fault Simulation action.
    /// Please note <see cref="FaultSimulationContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
    /// The available derived classes include <see cref="ZoneFaultSimulationContent"/>.
    /// </summary>
    public abstract partial class FaultSimulationContent
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private protected IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="FaultSimulationContent"/>. </summary>
        protected FaultSimulationContent()
        {
        }

        /// <summary> Initializes a new instance of <see cref="FaultSimulationContent"/>. </summary>
        /// <param name="faultKind"> The kind of fault to be simulated. </param>
        /// <param name="force"> Force the action to go through without any check on the cluster. </param>
        /// <param name="constraints"> Constraints for Fault Simulation action. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal FaultSimulationContent(FaultKind faultKind, bool? force, FaultSimulationConstraints constraints, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            FaultKind = faultKind;
            Force = force;
            Constraints = constraints;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The kind of fault to be simulated. </summary>
        internal FaultKind FaultKind { get; set; }
        /// <summary> Force the action to go through without any check on the cluster. </summary>
        public bool? Force { get; set; }
        /// <summary> Constraints for Fault Simulation action. </summary>
        internal FaultSimulationConstraints Constraints { get; set; }
        /// <summary> The absolute expiration timestamp (UTC) after which this fault simulation should be stopped if it's still active. </summary>
        public DateTimeOffset? ConstraintsExpireOn
        {
            get => Constraints is null ? default : Constraints.ExpireOn;
            set
            {
                if (Constraints is null)
                    Constraints = new FaultSimulationConstraints();
                Constraints.ExpireOn = value;
            }
        }
    }
}
