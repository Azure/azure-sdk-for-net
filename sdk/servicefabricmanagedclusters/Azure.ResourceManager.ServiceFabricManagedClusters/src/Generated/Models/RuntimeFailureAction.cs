// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ServiceFabricManagedClusters.Models
{
    /// <summary> Cluster level definition for the compensating action to perform when a Monitored upgrade encounters monitoring policy or health policy violations. </summary>
    public readonly partial struct RuntimeFailureAction : IEquatable<RuntimeFailureAction>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RuntimeFailureAction"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RuntimeFailureAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RollbackValue = "Rollback";
        private const string ManualValue = "Manual";

        /// <summary> Indicates that a rollback of the upgrade will be performed by Service Fabric if the upgrade fails. </summary>
        public static RuntimeFailureAction Rollback { get; } = new RuntimeFailureAction(RollbackValue);
        /// <summary> Indicates that a manual repair will need to be performed by the administrator if the upgrade fails. Service Fabric will not proceed to the next upgrade domain automatically. </summary>
        public static RuntimeFailureAction Manual { get; } = new RuntimeFailureAction(ManualValue);
        /// <summary> Determines if two <see cref="RuntimeFailureAction"/> values are the same. </summary>
        public static bool operator ==(RuntimeFailureAction left, RuntimeFailureAction right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RuntimeFailureAction"/> values are not the same. </summary>
        public static bool operator !=(RuntimeFailureAction left, RuntimeFailureAction right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="RuntimeFailureAction"/>. </summary>
        public static implicit operator RuntimeFailureAction(string value) => new RuntimeFailureAction(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RuntimeFailureAction other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RuntimeFailureAction other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
