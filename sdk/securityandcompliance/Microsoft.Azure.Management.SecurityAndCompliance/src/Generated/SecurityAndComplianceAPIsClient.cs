// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SecurityAndCompliance
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;

    /// <summary>
    /// Use this API to manage Microsoft SecurityAndCompliance services in your
    /// Azure subscription.
    /// </summary>
    public partial class SecurityAndComplianceAPIsClient : ServiceClient<SecurityAndComplianceAPIsClient>, ISecurityAndComplianceAPIsClient, IAzureClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Credentials needed for the client to connect to Azure.
        /// </summary>
        public ServiceClientCredentials Credentials { get; private set; }

        /// <summary>
        /// The subscription identifier.
        /// </summary>
        public string SubscriptionId { get; set; }

        /// <summary>
        /// Client Api Version.
        /// </summary>
        public string ApiVersion { get; private set; }

        /// <summary>
        /// The preferred language for the response.
        /// </summary>
        public string AcceptLanguage { get; set; }

        /// <summary>
        /// The retry timeout in seconds for Long Running Operations. Default value is
        /// 30.
        /// </summary>
        public int? LongRunningOperationRetryTimeout { get; set; }

        /// <summary>
        /// Whether a unique x-ms-client-request-id should be generated. When set to
        /// true a unique x-ms-client-request-id value is generated and included in
        /// each request. Default is true.
        /// </summary>
        public bool? GenerateClientRequestId { get; set; }

        /// <summary>
        /// Gets the IOperations.
        /// </summary>
        public virtual IOperations Operations { get; private set; }

        /// <summary>
        /// Gets the IOperationResultsOperations.
        /// </summary>
        public virtual IOperationResultsOperations OperationResults { get; private set; }

        /// <summary>
        /// Gets the IPrivateLinkServicesForEDMUploadOperations.
        /// </summary>
        public virtual IPrivateLinkServicesForEDMUploadOperations PrivateLinkServicesForEDMUpload { get; private set; }

        /// <summary>
        /// Gets the IServicesOperations.
        /// </summary>
        public virtual IServicesOperations Services { get; private set; }

        /// <summary>
        /// Gets the IPrivateEndpointConnectionsForEDMOperations.
        /// </summary>
        public virtual IPrivateEndpointConnectionsForEDMOperations PrivateEndpointConnectionsForEDM { get; private set; }

        /// <summary>
        /// Gets the IPrivateLinkResourcesOperations.
        /// </summary>
        public virtual IPrivateLinkResourcesOperations PrivateLinkResources { get; private set; }

        /// <summary>
        /// Gets the IPrivateLinkServicesForM365ComplianceCenterOperations.
        /// </summary>
        public virtual IPrivateLinkServicesForM365ComplianceCenterOperations PrivateLinkServicesForM365ComplianceCenter { get; private set; }

        /// <summary>
        /// Gets the IPrivateEndpointConnectionsCompOperations.
        /// </summary>
        public virtual IPrivateEndpointConnectionsCompOperations PrivateEndpointConnectionsComp { get; private set; }

        /// <summary>
        /// Gets the IPrivateLinkResourcesCompOperations.
        /// </summary>
        public virtual IPrivateLinkResourcesCompOperations PrivateLinkResourcesComp { get; private set; }

        /// <summary>
        /// Gets the IPrivateLinkServicesForM365SecurityCenterOperations.
        /// </summary>
        public virtual IPrivateLinkServicesForM365SecurityCenterOperations PrivateLinkServicesForM365SecurityCenter { get; private set; }

        /// <summary>
        /// Gets the IPrivateEndpointConnectionsSecOperations.
        /// </summary>
        public virtual IPrivateEndpointConnectionsSecOperations PrivateEndpointConnectionsSec { get; private set; }

        /// <summary>
        /// Gets the IPrivateLinkResourcesSecOperations.
        /// </summary>
        public virtual IPrivateLinkResourcesSecOperations PrivateLinkResourcesSec { get; private set; }

        /// <summary>
        /// Gets the IPrivateLinkServicesForO365ManagementActivityAPIOperations.
        /// </summary>
        public virtual IPrivateLinkServicesForO365ManagementActivityAPIOperations PrivateLinkServicesForO365ManagementActivityAPI { get; private set; }

        /// <summary>
        /// Gets the IPrivateEndpointConnectionsAdtAPIOperations.
        /// </summary>
        public virtual IPrivateEndpointConnectionsAdtAPIOperations PrivateEndpointConnectionsAdtAPI { get; private set; }

        /// <summary>
        /// Gets the IPrivateLinkResourcesAdtAPIOperations.
        /// </summary>
        public virtual IPrivateLinkResourcesAdtAPIOperations PrivateLinkResourcesAdtAPI { get; private set; }

        /// <summary>
        /// Gets the IPrivateLinkServicesForSCCPowershellOperations.
        /// </summary>
        public virtual IPrivateLinkServicesForSCCPowershellOperations PrivateLinkServicesForSCCPowershell { get; private set; }

        /// <summary>
        /// Gets the IPrivateEndpointConnectionsForSCCPowershellOperations.
        /// </summary>
        public virtual IPrivateEndpointConnectionsForSCCPowershellOperations PrivateEndpointConnectionsForSCCPowershell { get; private set; }

        /// <summary>
        /// Gets the IPrivateLinkResourcesForSCCPowershellOperations.
        /// </summary>
        public virtual IPrivateLinkResourcesForSCCPowershellOperations PrivateLinkResourcesForSCCPowershell { get; private set; }

        /// <summary>
        /// Initializes a new instance of the SecurityAndComplianceAPIsClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling SecurityAndComplianceAPIsClient.Dispose(). False: will not dispose provided httpClient</param>
        protected SecurityAndComplianceAPIsClient(HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the SecurityAndComplianceAPIsClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected SecurityAndComplianceAPIsClient(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the SecurityAndComplianceAPIsClient class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected SecurityAndComplianceAPIsClient(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the SecurityAndComplianceAPIsClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected SecurityAndComplianceAPIsClient(System.Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the SecurityAndComplianceAPIsClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected SecurityAndComplianceAPIsClient(System.Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the SecurityAndComplianceAPIsClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public SecurityAndComplianceAPIsClient(ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the SecurityAndComplianceAPIsClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling SecurityAndComplianceAPIsClient.Dispose(). False: will not dispose provided httpClient</param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public SecurityAndComplianceAPIsClient(ServiceClientCredentials credentials, HttpClient httpClient, bool disposeHttpClient) : this(httpClient, disposeHttpClient)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the SecurityAndComplianceAPIsClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public SecurityAndComplianceAPIsClient(ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the SecurityAndComplianceAPIsClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public SecurityAndComplianceAPIsClient(System.Uri baseUri, ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            BaseUri = baseUri;
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the SecurityAndComplianceAPIsClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public SecurityAndComplianceAPIsClient(System.Uri baseUri, ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            BaseUri = baseUri;
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        /// </summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            Operations = new Operations(this);
            OperationResults = new OperationResultsOperations(this);
            PrivateLinkServicesForEDMUpload = new PrivateLinkServicesForEDMUploadOperations(this);
            Services = new ServicesOperations(this);
            PrivateEndpointConnectionsForEDM = new PrivateEndpointConnectionsForEDMOperations(this);
            PrivateLinkResources = new PrivateLinkResourcesOperations(this);
            PrivateLinkServicesForM365ComplianceCenter = new PrivateLinkServicesForM365ComplianceCenterOperations(this);
            PrivateEndpointConnectionsComp = new PrivateEndpointConnectionsCompOperations(this);
            PrivateLinkResourcesComp = new PrivateLinkResourcesCompOperations(this);
            PrivateLinkServicesForM365SecurityCenter = new PrivateLinkServicesForM365SecurityCenterOperations(this);
            PrivateEndpointConnectionsSec = new PrivateEndpointConnectionsSecOperations(this);
            PrivateLinkResourcesSec = new PrivateLinkResourcesSecOperations(this);
            PrivateLinkServicesForO365ManagementActivityAPI = new PrivateLinkServicesForO365ManagementActivityAPIOperations(this);
            PrivateEndpointConnectionsAdtAPI = new PrivateEndpointConnectionsAdtAPIOperations(this);
            PrivateLinkResourcesAdtAPI = new PrivateLinkResourcesAdtAPIOperations(this);
            PrivateLinkServicesForSCCPowershell = new PrivateLinkServicesForSCCPowershellOperations(this);
            PrivateEndpointConnectionsForSCCPowershell = new PrivateEndpointConnectionsForSCCPowershellOperations(this);
            PrivateLinkResourcesForSCCPowershell = new PrivateLinkResourcesForSCCPowershellOperations(this);
            BaseUri = new System.Uri("https://management.azure.com");
            ApiVersion = "2021-01-11";
            AcceptLanguage = "en-US";
            LongRunningOperationRetryTimeout = 30;
            GenerateClientRequestId = true;
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            SerializationSettings.Converters.Add(new TransformationJsonConverter());
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
            DeserializationSettings.Converters.Add(new TransformationJsonConverter());
            DeserializationSettings.Converters.Add(new CloudErrorJsonConverter());
        }
    }
}
