// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Linq;
using System.Net;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Dns;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.Dns.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class DnsModelFactory
    {

        /// <summary> Initializes a new instance of DnsARecordInfo. </summary>
        /// <param name="ipv4Address"> The IPv4 address of this A record. </param>
        /// <returns> A new <see cref="Models.DnsARecordInfo"/> instance for mocking. </returns>
        public static DnsARecordInfo DnsARecordInfo(IPAddress ipv4Address = null)
        {
            return new DnsARecordInfo(ipv4Address);
        }

        /// <summary> Initializes a new instance of DnsAaaaRecordInfo. </summary>
        /// <param name="ipv6Address"> The IPv6 address of this AAAA record. </param>
        /// <returns> A new <see cref="Models.DnsAaaaRecordInfo"/> instance for mocking. </returns>
        public static DnsAaaaRecordInfo DnsAaaaRecordInfo(IPAddress ipv6Address = null)
        {
            return new DnsAaaaRecordInfo(ipv6Address);
        }

        /// <summary> Initializes a new instance of DnsMXRecordInfo. </summary>
        /// <param name="preference"> The preference value for this MX record. </param>
        /// <param name="exchange"> The domain name of the mail host for this MX record. </param>
        /// <returns> A new <see cref="Models.DnsMXRecordInfo"/> instance for mocking. </returns>
        public static DnsMXRecordInfo DnsMXRecordInfo(int? preference = null, string exchange = null)
        {
            return new DnsMXRecordInfo(preference, exchange);
        }

        /// <summary> Initializes a new instance of DnsNSRecordInfo. </summary>
        /// <param name="dnsNSDomainName"> The name server name for this NS record. </param>
        /// <returns> A new <see cref="Models.DnsNSRecordInfo"/> instance for mocking. </returns>
        public static DnsNSRecordInfo DnsNSRecordInfo(string dnsNSDomainName = null)
        {
            return new DnsNSRecordInfo(dnsNSDomainName);
        }

        /// <summary> Initializes a new instance of DnsPtrRecordInfo. </summary>
        /// <param name="dnsPtrDomainName"> The PTR target domain name for this PTR record. </param>
        /// <returns> A new <see cref="Models.DnsPtrRecordInfo"/> instance for mocking. </returns>
        public static DnsPtrRecordInfo DnsPtrRecordInfo(string dnsPtrDomainName = null)
        {
            return new DnsPtrRecordInfo(dnsPtrDomainName);
        }

        /// <summary> Initializes a new instance of DnsSrvRecordInfo. </summary>
        /// <param name="priority"> The priority value for this SRV record. </param>
        /// <param name="weight"> The weight value for this SRV record. </param>
        /// <param name="port"> The port value for this SRV record. </param>
        /// <param name="target"> The target domain name for this SRV record. </param>
        /// <returns> A new <see cref="Models.DnsSrvRecordInfo"/> instance for mocking. </returns>
        public static DnsSrvRecordInfo DnsSrvRecordInfo(int? priority = null, int? weight = null, int? port = null, string target = null)
        {
            return new DnsSrvRecordInfo(priority, weight, port, target);
        }

        /// <summary> Initializes a new instance of DnsTxtRecordInfo. </summary>
        /// <param name="values"> The text value of this TXT record. </param>
        /// <returns> A new <see cref="Models.DnsTxtRecordInfo"/> instance for mocking. </returns>
        public static DnsTxtRecordInfo DnsTxtRecordInfo(IEnumerable<string> values = null)
        {
            values ??= new List<string>();

            return new DnsTxtRecordInfo(values?.ToList());
        }

        /// <summary> Initializes a new instance of DnsSoaRecordInfo. </summary>
        /// <param name="host"> The domain name of the authoritative name server for this SOA record. </param>
        /// <param name="email"> The email contact for this SOA record. </param>
        /// <param name="serialNumber"> The serial number for this SOA record. </param>
        /// <param name="refreshTimeInSeconds"> The refresh value for this SOA record. </param>
        /// <param name="retryTimeInSeconds"> The retry time for this SOA record. </param>
        /// <param name="expireTimeInSeconds"> The expire time for this SOA record. </param>
        /// <param name="minimumTtlInSeconds"> The minimum value for this SOA record. By convention this is used to determine the negative caching duration. </param>
        /// <returns> A new <see cref="Models.DnsSoaRecordInfo"/> instance for mocking. </returns>
        public static DnsSoaRecordInfo DnsSoaRecordInfo(string host = null, string email = null, long? serialNumber = null, long? refreshTimeInSeconds = null, long? retryTimeInSeconds = null, long? expireTimeInSeconds = null, long? minimumTtlInSeconds = null)
        {
            return new DnsSoaRecordInfo(host, email, serialNumber, refreshTimeInSeconds, retryTimeInSeconds, expireTimeInSeconds, minimumTtlInSeconds);
        }

        /// <summary> Initializes a new instance of DnsCaaRecordInfo. </summary>
        /// <param name="flags"> The flags for this CAA record as an integer between 0 and 255. </param>
        /// <param name="tag"> The tag for this CAA record. </param>
        /// <param name="value"> The value for this CAA record. </param>
        /// <returns> A new <see cref="Models.DnsCaaRecordInfo"/> instance for mocking. </returns>
        public static DnsCaaRecordInfo DnsCaaRecordInfo(int? flags = null, string tag = null, string value = null)
        {
            return new DnsCaaRecordInfo(flags, tag, value);
        }

        /// <summary> Initializes a new instance of DnsZoneData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="etag"> The etag of the zone. </param>
        /// <param name="maxNumberOfRecords"> The maximum number of record sets that can be created in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored. </param>
        /// <param name="maxNumberOfRecordsPerRecord"> The maximum number of records per record set that can be created in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored. </param>
        /// <param name="numberOfRecords"> The current number of record sets in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored. </param>
        /// <param name="nameServers"> The name servers for this DNS zone. This is a read-only property and any attempt to set this value will be ignored. </param>
        /// <param name="zoneType"> The type of this DNS zone (Public or Private). </param>
        /// <param name="registrationVirtualNetworks"> A list of references to virtual networks that register hostnames in this DNS zone. This is a only when ZoneType is Private. </param>
        /// <param name="resolutionVirtualNetworks"> A list of references to virtual networks that resolve records in this DNS zone. This is a only when ZoneType is Private. </param>
        /// <returns> A new <see cref="Dns.DnsZoneData"/> instance for mocking. </returns>
        public static DnsZoneData DnsZoneData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ETag? etag = null, long? maxNumberOfRecords = null, long? maxNumberOfRecordsPerRecord = null, long? numberOfRecords = null, IEnumerable<string> nameServers = null, DnsZoneType? zoneType = null, IEnumerable<WritableSubResource> registrationVirtualNetworks = null, IEnumerable<WritableSubResource> resolutionVirtualNetworks = null)
        {
            tags ??= new Dictionary<string, string>();
            nameServers ??= new List<string>();
            registrationVirtualNetworks ??= new List<WritableSubResource>();
            resolutionVirtualNetworks ??= new List<WritableSubResource>();

            return new DnsZoneData(id, name, resourceType, systemData, tags, location, etag, maxNumberOfRecords, maxNumberOfRecordsPerRecord, numberOfRecords, nameServers?.ToList(), zoneType, registrationVirtualNetworks?.ToList(), resolutionVirtualNetworks?.ToList());
        }

        /// <summary> Initializes a new instance of DnsResourceReferenceResult. </summary>
        /// <param name="dnsResourceReferences"> The result of dns resource reference request. A list of dns resource references for each of the azure resource in the request. </param>
        /// <returns> A new <see cref="Models.DnsResourceReferenceResult"/> instance for mocking. </returns>
        public static DnsResourceReferenceResult DnsResourceReferenceResult(IEnumerable<DnsResourceReference> dnsResourceReferences = null)
        {
            dnsResourceReferences ??= new List<DnsResourceReference>();

            return new DnsResourceReferenceResult(dnsResourceReferences?.ToList());
        }

        /// <summary> Initializes a new instance of DnsResourceReference. </summary>
        /// <param name="dnsResources"> A list of dns Records. </param>
        /// <param name="targetResourceId"> A reference to an azure resource from where the dns resource value is taken. </param>
        /// <returns> A new <see cref="Models.DnsResourceReference"/> instance for mocking. </returns>
        public static DnsResourceReference DnsResourceReference(IEnumerable<WritableSubResource> dnsResources = null, ResourceIdentifier targetResourceId = null)
        {
            dnsResources ??= new List<WritableSubResource>();

            return new DnsResourceReference(dnsResources?.ToList(), ResourceManagerModelFactory.WritableSubResource(targetResourceId));
        }
    }
}
