// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Linq;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Dns;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.Dns.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class DnsModelFactory
    {
        /// <summary> Initializes a new instance of DnsRecordData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="etag"> The etag of the record set. </param>
        /// <param name="metadata"> The metadata attached to the record set. </param>
        /// <param name="ttlInSeconds"> The TTL (time-to-live) of the records in the record set. </param>
        /// <param name="fqdn"> Fully qualified domain name of the record set. </param>
        /// <param name="provisioningState"> provisioning State of the record set. </param>
        /// <param name="targetResourceId"> A reference to an azure resource from where the dns resource value is taken. </param>
        /// <param name="aRecords"> The list of A records in the record set. </param>
        /// <param name="aaaaRecords"> The list of AAAA records in the record set. </param>
        /// <param name="mxRecords"> The list of MX records in the record set. </param>
        /// <param name="nsRecords"> The list of NS records in the record set. </param>
        /// <param name="ptrRecords"> The list of PTR records in the record set. </param>
        /// <param name="srvRecords"> The list of SRV records in the record set. </param>
        /// <param name="txtRecords"> The list of TXT records in the record set. </param>
        /// <param name="cname"> The CNAME record in the  record set. </param>
        /// <param name="dnsSoaRecordInfo"> The SOA record in the record set. </param>
        /// <param name="caaRecords"> The list of CAA records in the record set. </param>
        /// <returns> A new <see cref="Dns.DnsRecordData"/> instance for mocking. </returns>
        public static DnsRecordData DnsRecordData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ETag? etag = null, IDictionary<string, string> metadata = null, long? ttlInSeconds = null, string fqdn = null, string provisioningState = null, ResourceIdentifier targetResourceId = null, IEnumerable<DnsARecordInfo> aRecords = null, IEnumerable<DnsAaaaRecordInfo> aaaaRecords = null, IEnumerable<DnsMXRecordInfo> mxRecords = null, IEnumerable<DnsNSRecordInfo> nsRecords = null, IEnumerable<DnsPtrRecordInfo> ptrRecords = null, IEnumerable<DnsSrvRecordInfo> srvRecords = null, IEnumerable<DnsTxtRecordInfo> txtRecords = null, string cname = null, DnsSoaRecordInfo dnsSoaRecordInfo = null, IEnumerable<DnsCaaRecordInfo> caaRecords = null)
        {
            metadata ??= new Dictionary<string, string>();
            aRecords ??= new List<DnsARecordInfo>();
            aaaaRecords ??= new List<DnsAaaaRecordInfo>();
            mxRecords ??= new List<DnsMXRecordInfo>();
            nsRecords ??= new List<DnsNSRecordInfo>();
            ptrRecords ??= new List<DnsPtrRecordInfo>();
            srvRecords ??= new List<DnsSrvRecordInfo>();
            txtRecords ??= new List<DnsTxtRecordInfo>();
            caaRecords ??= new List<DnsCaaRecordInfo>();

            return new DnsRecordData(id, name, resourceType, systemData, etag, metadata, ttlInSeconds, fqdn, provisioningState, targetResourceId != null ? ResourceManagerModelFactory.WritableSubResource(targetResourceId) : null, aRecords?.ToList(), aaaaRecords?.ToList(), mxRecords?.ToList(), nsRecords?.ToList(), ptrRecords?.ToList(), srvRecords?.ToList(), txtRecords?.ToList(), cname != null ? new DnsCnameRecordInfo(cname) : null, dnsSoaRecordInfo, caaRecords?.ToList());
        }

        /// <summary> Initializes a new instance of DnsZoneData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="etag"> The etag of the zone. </param>
        /// <param name="maxNumberOfRecords"> The maximum number of record sets that can be created in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored. </param>
        /// <param name="maxNumberOfRecordsPerRecord"> The maximum number of records per record set that can be created in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored. </param>
        /// <param name="numberOfRecords"> The current number of record sets in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored. </param>
        /// <param name="nameServers"> The name servers for this DNS zone. This is a read-only property and any attempt to set this value will be ignored. </param>
        /// <param name="zoneType"> The type of this DNS zone (Public or Private). </param>
        /// <param name="registrationVirtualNetworks"> A list of references to virtual networks that register hostnames in this DNS zone. This is a only when ZoneType is Private. </param>
        /// <param name="resolutionVirtualNetworks"> A list of references to virtual networks that resolve records in this DNS zone. This is a only when ZoneType is Private. </param>
        /// <returns> A new <see cref="Dns.DnsZoneData"/> instance for mocking. </returns>
        public static DnsZoneData DnsZoneData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ETag? etag = null, long? maxNumberOfRecords = null, long? maxNumberOfRecordsPerRecord = null, long? numberOfRecords = null, IEnumerable<string> nameServers = null, DnsZoneType? zoneType = null, IEnumerable<WritableSubResource> registrationVirtualNetworks = null, IEnumerable<WritableSubResource> resolutionVirtualNetworks = null)
        {
            tags ??= new Dictionary<string, string>();
            nameServers ??= new List<string>();
            registrationVirtualNetworks ??= new List<WritableSubResource>();
            resolutionVirtualNetworks ??= new List<WritableSubResource>();

            return new DnsZoneData(id, name, resourceType, systemData, tags, location, etag, maxNumberOfRecords, maxNumberOfRecordsPerRecord, numberOfRecords, nameServers?.ToList(), zoneType, registrationVirtualNetworks?.ToList(), resolutionVirtualNetworks?.ToList());
        }

        /// <summary> Initializes a new instance of DnsResourceReferenceResult. </summary>
        /// <param name="dnsResourceReferences"> The result of dns resource reference request. A list of dns resource references for each of the azure resource in the request. </param>
        /// <returns> A new <see cref="Models.DnsResourceReferenceResult"/> instance for mocking. </returns>
        public static DnsResourceReferenceResult DnsResourceReferenceResult(IEnumerable<DnsResourceReference> dnsResourceReferences = null)
        {
            dnsResourceReferences ??= new List<DnsResourceReference>();

            return new DnsResourceReferenceResult(dnsResourceReferences?.ToList());
        }

        /// <summary> Initializes a new instance of DnsResourceReference. </summary>
        /// <param name="dnsResources"> A list of dns Records. </param>
        /// <param name="targetResourceId"> A reference to an azure resource from where the dns resource value is taken. </param>
        /// <returns> A new <see cref="Models.DnsResourceReference"/> instance for mocking. </returns>
        public static DnsResourceReference DnsResourceReference(IEnumerable<WritableSubResource> dnsResources = null, ResourceIdentifier targetResourceId = null)
        {
            dnsResources ??= new List<WritableSubResource>();

            return new DnsResourceReference(dnsResources?.ToList(), targetResourceId != null ? ResourceManagerModelFactory.WritableSubResource(targetResourceId) : null);
        }
    }
}
