// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Dns.Models
{
    public partial class DnsTlsaRecordInfo : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Usage))
            {
                writer.WritePropertyName("usage"u8);
                writer.WriteNumberValue(Usage.Value);
            }
            if (Optional.IsDefined(Selector))
            {
                writer.WritePropertyName("selector"u8);
                writer.WriteNumberValue(Selector.Value);
            }
            if (Optional.IsDefined(MatchingType))
            {
                writer.WritePropertyName("matchingType"u8);
                writer.WriteNumberValue(MatchingType.Value);
            }
            if (Optional.IsDefined(CertAssociationData))
            {
                writer.WritePropertyName("certAssociationData"u8);
                writer.WriteStringValue(CertAssociationData);
            }
            writer.WriteEndObject();
        }

        internal static DnsTlsaRecordInfo DeserializeDnsTlsaRecordInfo(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<int> usage = default;
            Optional<int> selector = default;
            Optional<int> matchingType = default;
            Optional<string> certAssociationData = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("usage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    usage = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("selector"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    selector = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("matchingType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    matchingType = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("certAssociationData"u8))
                {
                    certAssociationData = property.Value.GetString();
                    continue;
                }
            }
            return new DnsTlsaRecordInfo(Optional.ToNullable(usage), Optional.ToNullable(selector), Optional.ToNullable(matchingType), certAssociationData.Value);
        }
    }
}
