// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Dns.Models
{
    public partial class DnsSigningKey
    {
        internal static DnsSigningKey DeserializeDnsSigningKey(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<IReadOnlyList<DelegationSignerInfo>> delegationSignerInfo = default;
            Optional<int> flags = default;
            Optional<int> keyTag = default;
            Optional<int> protocol = default;
            Optional<string> publicKey = default;
            Optional<int> securityAlgorithmType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("delegationSignerInfo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DelegationSignerInfo> array = new List<DelegationSignerInfo>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Models.DelegationSignerInfo.DeserializeDelegationSignerInfo(item));
                    }
                    delegationSignerInfo = array;
                    continue;
                }
                if (property.NameEquals("flags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    flags = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("keyTag"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    keyTag = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("protocol"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    protocol = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("publicKey"u8))
                {
                    publicKey = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("securityAlgorithmType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    securityAlgorithmType = property.Value.GetInt32();
                    continue;
                }
            }
            return new DnsSigningKey(Optional.ToList(delegationSignerInfo), Optional.ToNullable(flags), Optional.ToNullable(keyTag), Optional.ToNullable(protocol), publicKey.Value, Optional.ToNullable(securityAlgorithmType));
        }
    }
}
