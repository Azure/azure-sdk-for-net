// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Dns;
using Azure.ResourceManager.Dns.Models;

namespace Azure.ResourceManager.Dns.Samples
{
    public partial class Sample_DnsPtrRecordCollection
    {
        // Create A recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateARecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateARecordset.json
            // this example is just showing the usage of "RecordSets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation
            string relativeRecordSetName = "record1";
            DnsRecordData data = new DnsRecordData()
            {
                Metadata =
{
["key1"] = "value1",
},
                TtlInSeconds = 3600,
                ARecords =
{
new DnsARecordInfo()
{
IPv4Address = IPAddress.Parse("127.0.0.1"),
}
},
            };
            ArmOperation<DnsPtrRecordResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, relativeRecordSetName, data);
            DnsPtrRecordResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create A recordset with alias target resource
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateARecordsetWithAliasTargetResource()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateARecordsetAlias.json
            // this example is just showing the usage of "RecordSets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation
            string relativeRecordSetName = "record1";
            DnsRecordData data = new DnsRecordData()
            {
                Metadata =
{
["key1"] = "value1",
},
                TtlInSeconds = 3600,
                TargetResourceId = new ResourceIdentifier("/subscriptions/726f8cd6-6459-4db4-8e6d-2cd2716904e2/resourceGroups/test/providers/Microsoft.Network/trafficManagerProfiles/testpp2"),
            };
            ArmOperation<DnsPtrRecordResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, relativeRecordSetName, data);
            DnsPtrRecordResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create AAAA recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateAAAARecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateAAAARecordset.json
            // this example is just showing the usage of "RecordSets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation
            string relativeRecordSetName = "record1";
            DnsRecordData data = new DnsRecordData()
            {
                Metadata =
{
["key1"] = "value1",
},
                TtlInSeconds = 3600,
                AaaaRecords =
{
new DnsAaaaRecordInfo()
{
IPv6Address = IPAddress.Parse("::1"),
}
},
            };
            ArmOperation<DnsPtrRecordResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, relativeRecordSetName, data);
            DnsPtrRecordResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create CAA recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateCAARecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateCaaRecordset.json
            // this example is just showing the usage of "RecordSets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation
            string relativeRecordSetName = "record1";
            DnsRecordData data = new DnsRecordData()
            {
                Metadata =
{
["key1"] = "value1",
},
                TtlInSeconds = 3600,
                CaaRecords =
{
new DnsCaaRecordInfo()
{
Flags = 0,
Tag = "issue",
Value = "ca.contoso.com",
}
},
            };
            ArmOperation<DnsPtrRecordResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, relativeRecordSetName, data);
            DnsPtrRecordResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create CNAME recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateCNAMERecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateCNAMERecordset.json
            // this example is just showing the usage of "RecordSets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation
            string relativeRecordSetName = "record1";
            DnsRecordData data = new DnsRecordData()
            {
                Metadata =
{
["key1"] = "value1",
},
                TtlInSeconds = 3600,
                Cname = "contoso.com",
            };
            ArmOperation<DnsPtrRecordResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, relativeRecordSetName, data);
            DnsPtrRecordResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create MX recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateMXRecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateMXRecordset.json
            // this example is just showing the usage of "RecordSets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation
            string relativeRecordSetName = "record1";
            DnsRecordData data = new DnsRecordData()
            {
                Metadata =
{
["key1"] = "value1",
},
                TtlInSeconds = 3600,
                MXRecords =
{
new DnsMXRecordInfo()
{
Preference = 0,
Exchange = "mail.contoso.com",
}
},
            };
            ArmOperation<DnsPtrRecordResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, relativeRecordSetName, data);
            DnsPtrRecordResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create NS recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateNSRecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateNSRecordset.json
            // this example is just showing the usage of "RecordSets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation
            string relativeRecordSetName = "record1";
            DnsRecordData data = new DnsRecordData()
            {
                Metadata =
{
["key1"] = "value1",
},
                TtlInSeconds = 3600,
                NSRecords =
{
new DnsNSRecordInfo()
{
DnsNSDomainName = "ns1.contoso.com",
}
},
            };
            ArmOperation<DnsPtrRecordResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, relativeRecordSetName, data);
            DnsPtrRecordResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create PTR recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreatePTRRecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdatePTRRecordset.json
            // this example is just showing the usage of "RecordSets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "0.0.127.in-addr.arpa";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation
            string relativeRecordSetName = "1";
            DnsRecordData data = new DnsRecordData()
            {
                Metadata =
{
["key1"] = "value1",
},
                TtlInSeconds = 3600,
                PtrRecords =
{
new DnsPtrRecordInfo()
{
DnsPtrDomainName = "localhost",
}
},
            };
            ArmOperation<DnsPtrRecordResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, relativeRecordSetName, data);
            DnsPtrRecordResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create SOA recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateSOARecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateSOARecordset.json
            // this example is just showing the usage of "RecordSets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation
            string relativeRecordSetName = "@";
            DnsRecordData data = new DnsRecordData()
            {
                Metadata =
{
["key1"] = "value1",
},
                TtlInSeconds = 3600,
                DnsSoaRecordInfo = new DnsSoaRecordInfo()
                {
                    Host = "ns1.contoso.com",
                    Email = "hostmaster.contoso.com",
                    SerialNumber = 1,
                    RefreshTimeInSeconds = 3600,
                    RetryTimeInSeconds = 300,
                    ExpireTimeInSeconds = 2419200,
                    MinimumTtlInSeconds = 300,
                },
            };
            ArmOperation<DnsPtrRecordResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, relativeRecordSetName, data);
            DnsPtrRecordResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create SRV recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateSRVRecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateSRVRecordset.json
            // this example is just showing the usage of "RecordSets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation
            string relativeRecordSetName = "record1";
            DnsRecordData data = new DnsRecordData()
            {
                Metadata =
{
["key1"] = "value1",
},
                TtlInSeconds = 3600,
                SrvRecords =
{
new DnsSrvRecordInfo()
{
Priority = 0,
Weight = 10,
Port = 80,
Target = "contoso.com",
}
},
            };
            ArmOperation<DnsPtrRecordResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, relativeRecordSetName, data);
            DnsPtrRecordResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create TXT recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateTXTRecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateTXTRecordset.json
            // this example is just showing the usage of "RecordSets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation
            string relativeRecordSetName = "record1";
            DnsRecordData data = new DnsRecordData()
            {
                Metadata =
{
["key1"] = "value1",
},
                TtlInSeconds = 3600,
                TxtRecords =
{
new DnsTxtRecordInfo()
{
Values =
{
"string1","string2"
},
}
},
            };
            ArmOperation<DnsPtrRecordResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, relativeRecordSetName, data);
            DnsPtrRecordResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get A recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetARecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetARecordset.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation
            string relativeRecordSetName = "record1";
            DnsPtrRecordResource result = await collection.GetAsync(relativeRecordSetName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get A recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetARecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetARecordset.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation
            string relativeRecordSetName = "record1";
            bool result = await collection.ExistsAsync(relativeRecordSetName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Get AAAA recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetAAAARecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetAAAARecordset.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation
            string relativeRecordSetName = "record1";
            DnsPtrRecordResource result = await collection.GetAsync(relativeRecordSetName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get AAAA recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetAAAARecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetAAAARecordset.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation
            string relativeRecordSetName = "record1";
            bool result = await collection.ExistsAsync(relativeRecordSetName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Get CAA recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetCAARecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetCaaRecordset.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation
            string relativeRecordSetName = "record1";
            DnsPtrRecordResource result = await collection.GetAsync(relativeRecordSetName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get CAA recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetCAARecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetCaaRecordset.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation
            string relativeRecordSetName = "record1";
            bool result = await collection.ExistsAsync(relativeRecordSetName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Get CNAME recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetCNAMERecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetCNAMERecordset.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation
            string relativeRecordSetName = "record1";
            DnsPtrRecordResource result = await collection.GetAsync(relativeRecordSetName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get CNAME recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetCNAMERecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetCNAMERecordset.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation
            string relativeRecordSetName = "record1";
            bool result = await collection.ExistsAsync(relativeRecordSetName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Get MX recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetMXRecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetMXRecordset.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation
            string relativeRecordSetName = "record1";
            DnsPtrRecordResource result = await collection.GetAsync(relativeRecordSetName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get MX recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetMXRecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetMXRecordset.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation
            string relativeRecordSetName = "record1";
            bool result = await collection.ExistsAsync(relativeRecordSetName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Get NS recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetNSRecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetNSRecordset.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation
            string relativeRecordSetName = "record1";
            DnsPtrRecordResource result = await collection.GetAsync(relativeRecordSetName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get NS recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetNSRecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetNSRecordset.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation
            string relativeRecordSetName = "record1";
            bool result = await collection.ExistsAsync(relativeRecordSetName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Get PTR recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetPTRRecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetPTRRecordset.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "0.0.127.in-addr.arpa";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation
            string relativeRecordSetName = "1";
            DnsPtrRecordResource result = await collection.GetAsync(relativeRecordSetName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get PTR recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetPTRRecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetPTRRecordset.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "0.0.127.in-addr.arpa";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation
            string relativeRecordSetName = "1";
            bool result = await collection.ExistsAsync(relativeRecordSetName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Get SOA recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetSOARecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetSOARecordset.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation
            string relativeRecordSetName = "@";
            DnsPtrRecordResource result = await collection.GetAsync(relativeRecordSetName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get SOA recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetSOARecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetSOARecordset.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation
            string relativeRecordSetName = "@";
            bool result = await collection.ExistsAsync(relativeRecordSetName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Get SRV recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetSRVRecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetSRVRecordset.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation
            string relativeRecordSetName = "record1";
            DnsPtrRecordResource result = await collection.GetAsync(relativeRecordSetName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get SRV recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetSRVRecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetSRVRecordset.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation
            string relativeRecordSetName = "record1";
            bool result = await collection.ExistsAsync(relativeRecordSetName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Get TXT recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetTXTRecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetTXTRecordset.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation
            string relativeRecordSetName = "record1";
            DnsPtrRecordResource result = await collection.GetAsync(relativeRecordSetName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get TXT recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetTXTRecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetTXTRecordset.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation
            string relativeRecordSetName = "record1";
            bool result = await collection.ExistsAsync(relativeRecordSetName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // List A recordsets
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_ListARecordsets()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListARecordset.json
            // this example is just showing the usage of "RecordSets_ListByType" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation and iterate over the result
            await foreach (DnsPtrRecordResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                DnsRecordData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // List AAAA recordsets
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_ListAAAARecordsets()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListAAAARecordset.json
            // this example is just showing the usage of "RecordSets_ListByType" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation and iterate over the result
            await foreach (DnsPtrRecordResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                DnsRecordData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // List CAA recordsets
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_ListCAARecordsets()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListCaaRecordset.json
            // this example is just showing the usage of "RecordSets_ListByType" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation and iterate over the result
            await foreach (DnsPtrRecordResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                DnsRecordData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // List CNAME recordsets
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_ListCNAMERecordsets()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListCNAMERecordset.json
            // this example is just showing the usage of "RecordSets_ListByType" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation and iterate over the result
            await foreach (DnsPtrRecordResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                DnsRecordData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // List MX recordsets
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_ListMXRecordsets()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListMXRecordset.json
            // this example is just showing the usage of "RecordSets_ListByType" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation and iterate over the result
            await foreach (DnsPtrRecordResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                DnsRecordData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // List NS recordsets
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_ListNSRecordsets()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListNSRecordset.json
            // this example is just showing the usage of "RecordSets_ListByType" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation and iterate over the result
            await foreach (DnsPtrRecordResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                DnsRecordData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // List PTR recordsets
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_ListPTRRecordsets()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListPTRRecordset.json
            // this example is just showing the usage of "RecordSets_ListByType" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "0.0.127.in-addr.arpa";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation and iterate over the result
            await foreach (DnsPtrRecordResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                DnsRecordData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // List SOA recordsets
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_ListSOARecordsets()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListSOARecordset.json
            // this example is just showing the usage of "RecordSets_ListByType" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation and iterate over the result
            await foreach (DnsPtrRecordResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                DnsRecordData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // List SRV recordsets
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_ListSRVRecordsets()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListSRVRecordset.json
            // this example is just showing the usage of "RecordSets_ListByType" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation and iterate over the result
            await foreach (DnsPtrRecordResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                DnsRecordData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // List TXT recordsets
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_ListTXTRecordsets()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListTXTRecordset.json
            // this example is just showing the usage of "RecordSets_ListByType" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // get the collection of this DnsPtrRecordResource
            DnsPtrRecordCollection collection = dnsZone.GetDnsPtrRecords();

            // invoke the operation and iterate over the result
            await foreach (DnsPtrRecordResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                DnsRecordData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }
    }
}
