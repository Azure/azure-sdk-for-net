// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Dns;

namespace Azure.ResourceManager.Dns.Samples
{
    public partial class Sample_DnsARecordResource
    {
        // Patch A recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_PatchARecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchARecordset.json
            // this example is just showing the usage of "RecordSets_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsARecordResource created on azure
            // for more information of creating DnsARecordResource, please refer to the document of DnsARecordResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            string relativeRecordSetName = "record1";
            ResourceIdentifier dnsDnsARecordInfoResourceId = DnsARecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName, relativeRecordSetName);
            DnsARecordResource dnsDnsARecordInfo = client.GetDnsARecordResource(dnsDnsARecordInfoResourceId);

            // invoke the operation
            DnsRecordData data = new DnsRecordData()
            {
                Metadata =
{
["key2"] = "value2",
},
            };
            DnsARecordResource result = await dnsDnsARecordInfo.UpdateAsync(data);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Patch AAAA recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_PatchAAAARecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchAAAARecordset.json
            // this example is just showing the usage of "RecordSets_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsARecordResource created on azure
            // for more information of creating DnsARecordResource, please refer to the document of DnsARecordResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            string relativeRecordSetName = "record1";
            ResourceIdentifier dnsDnsARecordInfoResourceId = DnsARecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName, relativeRecordSetName);
            DnsARecordResource dnsDnsARecordInfo = client.GetDnsARecordResource(dnsDnsARecordInfoResourceId);

            // invoke the operation
            DnsRecordData data = new DnsRecordData()
            {
                Metadata =
{
["key2"] = "value2",
},
            };
            DnsARecordResource result = await dnsDnsARecordInfo.UpdateAsync(data);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Patch CAA recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_PatchCAARecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchCaaRecordset.json
            // this example is just showing the usage of "RecordSets_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsARecordResource created on azure
            // for more information of creating DnsARecordResource, please refer to the document of DnsARecordResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            string relativeRecordSetName = "record1";
            ResourceIdentifier dnsDnsARecordInfoResourceId = DnsARecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName, relativeRecordSetName);
            DnsARecordResource dnsDnsARecordInfo = client.GetDnsARecordResource(dnsDnsARecordInfoResourceId);

            // invoke the operation
            DnsRecordData data = new DnsRecordData()
            {
                Metadata =
{
["key2"] = "value2",
},
            };
            DnsARecordResource result = await dnsDnsARecordInfo.UpdateAsync(data);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Patch CNAME recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_PatchCNAMERecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchCNAMERecordset.json
            // this example is just showing the usage of "RecordSets_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsARecordResource created on azure
            // for more information of creating DnsARecordResource, please refer to the document of DnsARecordResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            string relativeRecordSetName = "record1";
            ResourceIdentifier dnsDnsARecordInfoResourceId = DnsARecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName, relativeRecordSetName);
            DnsARecordResource dnsDnsARecordInfo = client.GetDnsARecordResource(dnsDnsARecordInfoResourceId);

            // invoke the operation
            DnsRecordData data = new DnsRecordData()
            {
                Metadata =
{
["key2"] = "value2",
},
            };
            DnsARecordResource result = await dnsDnsARecordInfo.UpdateAsync(data);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Patch MX recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_PatchMXRecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchMXRecordset.json
            // this example is just showing the usage of "RecordSets_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsARecordResource created on azure
            // for more information of creating DnsARecordResource, please refer to the document of DnsARecordResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            string relativeRecordSetName = "record1";
            ResourceIdentifier dnsDnsARecordInfoResourceId = DnsARecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName, relativeRecordSetName);
            DnsARecordResource dnsDnsARecordInfo = client.GetDnsARecordResource(dnsDnsARecordInfoResourceId);

            // invoke the operation
            DnsRecordData data = new DnsRecordData()
            {
                Metadata =
{
["key2"] = "value2",
},
            };
            DnsARecordResource result = await dnsDnsARecordInfo.UpdateAsync(data);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Patch NS recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_PatchNSRecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchNSRecordset.json
            // this example is just showing the usage of "RecordSets_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsARecordResource created on azure
            // for more information of creating DnsARecordResource, please refer to the document of DnsARecordResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            string relativeRecordSetName = "record1";
            ResourceIdentifier dnsDnsARecordInfoResourceId = DnsARecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName, relativeRecordSetName);
            DnsARecordResource dnsDnsARecordInfo = client.GetDnsARecordResource(dnsDnsARecordInfoResourceId);

            // invoke the operation
            DnsRecordData data = new DnsRecordData()
            {
                Metadata =
{
["key2"] = "value2",
},
            };
            DnsARecordResource result = await dnsDnsARecordInfo.UpdateAsync(data);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Patch PTR recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_PatchPTRRecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchPTRRecordset.json
            // this example is just showing the usage of "RecordSets_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsARecordResource created on azure
            // for more information of creating DnsARecordResource, please refer to the document of DnsARecordResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "0.0.127.in-addr.arpa";
            string relativeRecordSetName = "1";
            ResourceIdentifier dnsDnsARecordInfoResourceId = DnsARecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName, relativeRecordSetName);
            DnsARecordResource dnsDnsARecordInfo = client.GetDnsARecordResource(dnsDnsARecordInfoResourceId);

            // invoke the operation
            DnsRecordData data = new DnsRecordData()
            {
                Metadata =
{
["key2"] = "value2",
},
            };
            DnsARecordResource result = await dnsDnsARecordInfo.UpdateAsync(data);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Patch SOA recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_PatchSOARecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchSOARecordset.json
            // this example is just showing the usage of "RecordSets_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsARecordResource created on azure
            // for more information of creating DnsARecordResource, please refer to the document of DnsARecordResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            string relativeRecordSetName = "@";
            ResourceIdentifier dnsDnsARecordInfoResourceId = DnsARecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName, relativeRecordSetName);
            DnsARecordResource dnsDnsARecordInfo = client.GetDnsARecordResource(dnsDnsARecordInfoResourceId);

            // invoke the operation
            DnsRecordData data = new DnsRecordData()
            {
                Metadata =
{
["key2"] = "value2",
},
            };
            DnsARecordResource result = await dnsDnsARecordInfo.UpdateAsync(data);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Patch SRV recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_PatchSRVRecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchSRVRecordset.json
            // this example is just showing the usage of "RecordSets_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsARecordResource created on azure
            // for more information of creating DnsARecordResource, please refer to the document of DnsARecordResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            string relativeRecordSetName = "record1";
            ResourceIdentifier dnsDnsARecordInfoResourceId = DnsARecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName, relativeRecordSetName);
            DnsARecordResource dnsDnsARecordInfo = client.GetDnsARecordResource(dnsDnsARecordInfoResourceId);

            // invoke the operation
            DnsRecordData data = new DnsRecordData()
            {
                Metadata =
{
["key2"] = "value2",
},
            };
            DnsARecordResource result = await dnsDnsARecordInfo.UpdateAsync(data);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Patch TXT recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_PatchTXTRecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchTXTRecordset.json
            // this example is just showing the usage of "RecordSets_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsARecordResource created on azure
            // for more information of creating DnsARecordResource, please refer to the document of DnsARecordResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            string relativeRecordSetName = "record1";
            ResourceIdentifier dnsDnsARecordInfoResourceId = DnsARecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName, relativeRecordSetName);
            DnsARecordResource dnsDnsARecordInfo = client.GetDnsARecordResource(dnsDnsARecordInfoResourceId);

            // invoke the operation
            DnsRecordData data = new DnsRecordData()
            {
                Metadata =
{
["key2"] = "value2",
},
            };
            DnsARecordResource result = await dnsDnsARecordInfo.UpdateAsync(data);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Delete A recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteARecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/DeleteARecordset.json
            // this example is just showing the usage of "RecordSets_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsARecordResource created on azure
            // for more information of creating DnsARecordResource, please refer to the document of DnsARecordResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            string relativeRecordSetName = "record1";
            ResourceIdentifier dnsDnsARecordInfoResourceId = DnsARecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName, relativeRecordSetName);
            DnsARecordResource dnsDnsARecordInfo = client.GetDnsARecordResource(dnsDnsARecordInfoResourceId);

            // invoke the operation
            await dnsDnsARecordInfo.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Delete AAAA recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteAAAARecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/DeleteAAAARecordset.json
            // this example is just showing the usage of "RecordSets_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsARecordResource created on azure
            // for more information of creating DnsARecordResource, please refer to the document of DnsARecordResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            string relativeRecordSetName = "record1";
            ResourceIdentifier dnsDnsARecordInfoResourceId = DnsARecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName, relativeRecordSetName);
            DnsARecordResource dnsDnsARecordInfo = client.GetDnsARecordResource(dnsDnsARecordInfoResourceId);

            // invoke the operation
            await dnsDnsARecordInfo.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Delete CAA recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteCAARecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/DeleteCaaRecordset.json
            // this example is just showing the usage of "RecordSets_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsARecordResource created on azure
            // for more information of creating DnsARecordResource, please refer to the document of DnsARecordResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            string relativeRecordSetName = "record1";
            ResourceIdentifier dnsDnsARecordInfoResourceId = DnsARecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName, relativeRecordSetName);
            DnsARecordResource dnsDnsARecordInfo = client.GetDnsARecordResource(dnsDnsARecordInfoResourceId);

            // invoke the operation
            await dnsDnsARecordInfo.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Delete CNAME recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteCNAMERecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/DeleteARecordset.json
            // this example is just showing the usage of "RecordSets_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsARecordResource created on azure
            // for more information of creating DnsARecordResource, please refer to the document of DnsARecordResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            string relativeRecordSetName = "record1";
            ResourceIdentifier dnsDnsARecordInfoResourceId = DnsARecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName, relativeRecordSetName);
            DnsARecordResource dnsDnsARecordInfo = client.GetDnsARecordResource(dnsDnsARecordInfoResourceId);

            // invoke the operation
            await dnsDnsARecordInfo.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Delete MX recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteMXRecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/DeleteARecordset.json
            // this example is just showing the usage of "RecordSets_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsARecordResource created on azure
            // for more information of creating DnsARecordResource, please refer to the document of DnsARecordResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            string relativeRecordSetName = "record1";
            ResourceIdentifier dnsDnsARecordInfoResourceId = DnsARecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName, relativeRecordSetName);
            DnsARecordResource dnsDnsARecordInfo = client.GetDnsARecordResource(dnsDnsARecordInfoResourceId);

            // invoke the operation
            await dnsDnsARecordInfo.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Delete NS recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteNSRecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/DeleteARecordset.json
            // this example is just showing the usage of "RecordSets_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsARecordResource created on azure
            // for more information of creating DnsARecordResource, please refer to the document of DnsARecordResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            string relativeRecordSetName = "record1";
            ResourceIdentifier dnsDnsARecordInfoResourceId = DnsARecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName, relativeRecordSetName);
            DnsARecordResource dnsDnsARecordInfo = client.GetDnsARecordResource(dnsDnsARecordInfoResourceId);

            // invoke the operation
            await dnsDnsARecordInfo.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Delete PTR recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeletePTRRecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/DeletePTRRecordset.json
            // this example is just showing the usage of "RecordSets_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsARecordResource created on azure
            // for more information of creating DnsARecordResource, please refer to the document of DnsARecordResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "0.0.127.in-addr.arpa";
            string relativeRecordSetName = "1";
            ResourceIdentifier dnsDnsARecordInfoResourceId = DnsARecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName, relativeRecordSetName);
            DnsARecordResource dnsDnsARecordInfo = client.GetDnsARecordResource(dnsDnsARecordInfoResourceId);

            // invoke the operation
            await dnsDnsARecordInfo.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Delete SRV recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteSRVRecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/DeleteSRVRecordset.json
            // this example is just showing the usage of "RecordSets_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsARecordResource created on azure
            // for more information of creating DnsARecordResource, please refer to the document of DnsARecordResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            string relativeRecordSetName = "record1";
            ResourceIdentifier dnsDnsARecordInfoResourceId = DnsARecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName, relativeRecordSetName);
            DnsARecordResource dnsDnsARecordInfo = client.GetDnsARecordResource(dnsDnsARecordInfoResourceId);

            // invoke the operation
            await dnsDnsARecordInfo.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Delete TXT recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteTXTRecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/DeleteTXTRecordset.json
            // this example is just showing the usage of "RecordSets_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsARecordResource created on azure
            // for more information of creating DnsARecordResource, please refer to the document of DnsARecordResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            string relativeRecordSetName = "record1";
            ResourceIdentifier dnsDnsARecordInfoResourceId = DnsARecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName, relativeRecordSetName);
            DnsARecordResource dnsDnsARecordInfo = client.GetDnsARecordResource(dnsDnsARecordInfoResourceId);

            // invoke the operation
            await dnsDnsARecordInfo.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Get A recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetARecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetARecordset.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsARecordResource created on azure
            // for more information of creating DnsARecordResource, please refer to the document of DnsARecordResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            string relativeRecordSetName = "record1";
            ResourceIdentifier dnsDnsARecordInfoResourceId = DnsARecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName, relativeRecordSetName);
            DnsARecordResource dnsDnsARecordInfo = client.GetDnsARecordResource(dnsDnsARecordInfoResourceId);

            // invoke the operation
            DnsARecordResource result = await dnsDnsARecordInfo.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get AAAA recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetAAAARecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetAAAARecordset.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsARecordResource created on azure
            // for more information of creating DnsARecordResource, please refer to the document of DnsARecordResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            string relativeRecordSetName = "record1";
            ResourceIdentifier dnsDnsARecordInfoResourceId = DnsARecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName, relativeRecordSetName);
            DnsARecordResource dnsDnsARecordInfo = client.GetDnsARecordResource(dnsDnsARecordInfoResourceId);

            // invoke the operation
            DnsARecordResource result = await dnsDnsARecordInfo.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get CAA recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetCAARecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetCaaRecordset.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsARecordResource created on azure
            // for more information of creating DnsARecordResource, please refer to the document of DnsARecordResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            string relativeRecordSetName = "record1";
            ResourceIdentifier dnsDnsARecordInfoResourceId = DnsARecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName, relativeRecordSetName);
            DnsARecordResource dnsDnsARecordInfo = client.GetDnsARecordResource(dnsDnsARecordInfoResourceId);

            // invoke the operation
            DnsARecordResource result = await dnsDnsARecordInfo.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get CNAME recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetCNAMERecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetCNAMERecordset.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsARecordResource created on azure
            // for more information of creating DnsARecordResource, please refer to the document of DnsARecordResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            string relativeRecordSetName = "record1";
            ResourceIdentifier dnsDnsARecordInfoResourceId = DnsARecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName, relativeRecordSetName);
            DnsARecordResource dnsDnsARecordInfo = client.GetDnsARecordResource(dnsDnsARecordInfoResourceId);

            // invoke the operation
            DnsARecordResource result = await dnsDnsARecordInfo.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get MX recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetMXRecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetMXRecordset.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsARecordResource created on azure
            // for more information of creating DnsARecordResource, please refer to the document of DnsARecordResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            string relativeRecordSetName = "record1";
            ResourceIdentifier dnsDnsARecordInfoResourceId = DnsARecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName, relativeRecordSetName);
            DnsARecordResource dnsDnsARecordInfo = client.GetDnsARecordResource(dnsDnsARecordInfoResourceId);

            // invoke the operation
            DnsARecordResource result = await dnsDnsARecordInfo.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get NS recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetNSRecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetNSRecordset.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsARecordResource created on azure
            // for more information of creating DnsARecordResource, please refer to the document of DnsARecordResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            string relativeRecordSetName = "record1";
            ResourceIdentifier dnsDnsARecordInfoResourceId = DnsARecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName, relativeRecordSetName);
            DnsARecordResource dnsDnsARecordInfo = client.GetDnsARecordResource(dnsDnsARecordInfoResourceId);

            // invoke the operation
            DnsARecordResource result = await dnsDnsARecordInfo.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get PTR recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetPTRRecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetPTRRecordset.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsARecordResource created on azure
            // for more information of creating DnsARecordResource, please refer to the document of DnsARecordResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "0.0.127.in-addr.arpa";
            string relativeRecordSetName = "1";
            ResourceIdentifier dnsDnsARecordInfoResourceId = DnsARecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName, relativeRecordSetName);
            DnsARecordResource dnsDnsARecordInfo = client.GetDnsARecordResource(dnsDnsARecordInfoResourceId);

            // invoke the operation
            DnsARecordResource result = await dnsDnsARecordInfo.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get SOA recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetSOARecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetSOARecordset.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsARecordResource created on azure
            // for more information of creating DnsARecordResource, please refer to the document of DnsARecordResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            string relativeRecordSetName = "@";
            ResourceIdentifier dnsDnsARecordInfoResourceId = DnsARecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName, relativeRecordSetName);
            DnsARecordResource dnsDnsARecordInfo = client.GetDnsARecordResource(dnsDnsARecordInfoResourceId);

            // invoke the operation
            DnsARecordResource result = await dnsDnsARecordInfo.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get SRV recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetSRVRecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetSRVRecordset.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsARecordResource created on azure
            // for more information of creating DnsARecordResource, please refer to the document of DnsARecordResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            string relativeRecordSetName = "record1";
            ResourceIdentifier dnsDnsARecordInfoResourceId = DnsARecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName, relativeRecordSetName);
            DnsARecordResource dnsDnsARecordInfo = client.GetDnsARecordResource(dnsDnsARecordInfoResourceId);

            // invoke the operation
            DnsARecordResource result = await dnsDnsARecordInfo.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get TXT recordset
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetTXTRecordset()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetTXTRecordset.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsARecordResource created on azure
            // for more information of creating DnsARecordResource, please refer to the document of DnsARecordResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            string relativeRecordSetName = "record1";
            ResourceIdentifier dnsDnsARecordInfoResourceId = DnsARecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName, relativeRecordSetName);
            DnsARecordResource dnsDnsARecordInfo = client.GetDnsARecordResource(dnsDnsARecordInfoResourceId);

            // invoke the operation
            DnsARecordResource result = await dnsDnsARecordInfo.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
