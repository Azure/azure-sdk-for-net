// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Dns;
using Azure.ResourceManager.Dns.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Dns.Samples
{
    public partial class Sample_DnsZoneResource
    {
        // List recordsets by zone
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAllRecordData_ListRecordsetsByZone()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListRecordSetsByZone.json
            // this example is just showing the usage of "RecordSets_ListByDnsZone" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // invoke the operation and iterate over the result
            await foreach (DnsRecordData item in dnsZone.GetAllRecordDataAsync())
            {
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {item.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Delete zone
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteZone()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/DeleteZone.json
            // this example is just showing the usage of "Zones_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // invoke the operation
            await dnsZone.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Get zone
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetZone()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetZone.json
            // this example is just showing the usage of "Zones_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // invoke the operation
            DnsZoneResource result = await dnsZone.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsZoneData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Patch zone
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_PatchZone()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchZone.json
            // this example is just showing the usage of "Zones_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DnsZoneResource created on azure
            // for more information of creating DnsZoneResource, please refer to the document of DnsZoneResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string zoneName = "zone1";
            ResourceIdentifier dnsZoneResourceId = DnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, zoneName);
            DnsZoneResource dnsZone = client.GetDnsZoneResource(dnsZoneResourceId);

            // invoke the operation
            DnsZonePatch patch = new DnsZonePatch()
            {
                Tags =
{
["key2"] = "value2",
},
            };
            DnsZoneResource result = await dnsZone.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsZoneData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // List zones by subscription
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetDnsZones_ListZonesBySubscription()
        {
            // Generated from example definition: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListZonesBySubscription.json
            // this example is just showing the usage of "Zones_List" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "subid";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation and iterate over the result
            await foreach (DnsZoneResource item in subscriptionResource.GetDnsZonesAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                DnsZoneData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }
    }
}
