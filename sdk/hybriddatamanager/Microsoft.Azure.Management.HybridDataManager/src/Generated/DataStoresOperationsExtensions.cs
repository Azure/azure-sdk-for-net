// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.HybridData
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Azure.OData;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DataStoresOperations.
    /// </summary>
    public static partial class DataStoresOperationsExtensions
    {
            /// <summary>
            /// Gets all the data stores/repositories in the given resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IPage<DataStore> ListByDataManager(this IDataStoresOperations operations, string resourceGroupName, string dataManagerName, ODataQuery<DataStoreFilter> odataQuery = default(ODataQuery<DataStoreFilter>))
            {
                return operations.ListByDataManagerAsync(resourceGroupName, dataManagerName, odataQuery).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the data stores/repositories in the given resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DataStore>> ListByDataManagerAsync(this IDataStoresOperations operations, string resourceGroupName, string dataManagerName, ODataQuery<DataStoreFilter> odataQuery = default(ODataQuery<DataStoreFilter>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByDataManagerWithHttpMessagesAsync(resourceGroupName, dataManagerName, odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This method gets the data store/repository by name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataStoreName'>
            /// The data store/repository name queried.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            public static DataStore Get(this IDataStoresOperations operations, string dataStoreName, string resourceGroupName, string dataManagerName)
            {
                return operations.GetAsync(dataStoreName, resourceGroupName, dataManagerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This method gets the data store/repository by name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataStoreName'>
            /// The data store/repository name queried.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataStore> GetAsync(this IDataStoresOperations operations, string dataStoreName, string resourceGroupName, string dataManagerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(dataStoreName, resourceGroupName, dataManagerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates the data store/repository in the data manager.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataStoreName'>
            /// The data store/repository name to be created or updated.
            /// </param>
            /// <param name='dataStore'>
            /// The data store/repository object to be created or updated.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            public static DataStore CreateOrUpdate(this IDataStoresOperations operations, string dataStoreName, DataStore dataStore, string resourceGroupName, string dataManagerName)
            {
                return operations.CreateOrUpdateAsync(dataStoreName, dataStore, resourceGroupName, dataManagerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates the data store/repository in the data manager.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataStoreName'>
            /// The data store/repository name to be created or updated.
            /// </param>
            /// <param name='dataStore'>
            /// The data store/repository object to be created or updated.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataStore> CreateOrUpdateAsync(this IDataStoresOperations operations, string dataStoreName, DataStore dataStore, string resourceGroupName, string dataManagerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(dataStoreName, dataStore, resourceGroupName, dataManagerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This method deletes the given data store/repository.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataStoreName'>
            /// The data store/repository name to be deleted.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            public static void Delete(this IDataStoresOperations operations, string dataStoreName, string resourceGroupName, string dataManagerName)
            {
                operations.DeleteAsync(dataStoreName, resourceGroupName, dataManagerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This method deletes the given data store/repository.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataStoreName'>
            /// The data store/repository name to be deleted.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IDataStoresOperations operations, string dataStoreName, string resourceGroupName, string dataManagerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(dataStoreName, resourceGroupName, dataManagerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates or updates the data store/repository in the data manager.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataStoreName'>
            /// The data store/repository name to be created or updated.
            /// </param>
            /// <param name='dataStore'>
            /// The data store/repository object to be created or updated.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            public static DataStore BeginCreateOrUpdate(this IDataStoresOperations operations, string dataStoreName, DataStore dataStore, string resourceGroupName, string dataManagerName)
            {
                return operations.BeginCreateOrUpdateAsync(dataStoreName, dataStore, resourceGroupName, dataManagerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates the data store/repository in the data manager.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataStoreName'>
            /// The data store/repository name to be created or updated.
            /// </param>
            /// <param name='dataStore'>
            /// The data store/repository object to be created or updated.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataStore> BeginCreateOrUpdateAsync(this IDataStoresOperations operations, string dataStoreName, DataStore dataStore, string resourceGroupName, string dataManagerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(dataStoreName, dataStore, resourceGroupName, dataManagerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This method deletes the given data store/repository.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataStoreName'>
            /// The data store/repository name to be deleted.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            public static void BeginDelete(this IDataStoresOperations operations, string dataStoreName, string resourceGroupName, string dataManagerName)
            {
                operations.BeginDeleteAsync(dataStoreName, resourceGroupName, dataManagerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This method deletes the given data store/repository.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataStoreName'>
            /// The data store/repository name to be deleted.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='dataManagerName'>
            /// The name of the DataManager Resource within the specified resource group.
            /// DataManager names must be between 3 and 24 characters in length and use any
            /// alphanumeric and underscore only
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IDataStoresOperations operations, string dataStoreName, string resourceGroupName, string dataManagerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(dataStoreName, resourceGroupName, dataManagerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets all the data stores/repositories in the given resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DataStore> ListByDataManagerNext(this IDataStoresOperations operations, string nextPageLink)
            {
                return operations.ListByDataManagerNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the data stores/repositories in the given resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DataStore>> ListByDataManagerNextAsync(this IDataStoresOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByDataManagerNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
