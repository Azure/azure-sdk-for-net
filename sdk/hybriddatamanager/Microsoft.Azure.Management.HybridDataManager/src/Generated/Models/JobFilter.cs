// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.HybridData.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Contains the information about the filters for the job.
    /// </summary>
    public partial class JobFilter
    {
        /// <summary>
        /// Initializes a new instance of the JobFilter class.
        /// </summary>
        public JobFilter()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the JobFilter class.
        /// </summary>
        /// <param name="status">The status of the job. Possible values
        /// include: 'None', 'InProgress', 'Succeeded', 'WaitingForAction',
        /// 'Failed', 'Cancelled', 'Cancelling', 'PartiallySucceeded'</param>
        /// <param name="startTime">The start time of the job.</param>
        public JobFilter(JobStatus status, System.DateTime? startTime = default(System.DateTime?))
        {
            Status = status;
            StartTime = startTime;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the status of the job. Possible values include:
        /// 'None', 'InProgress', 'Succeeded', 'WaitingForAction', 'Failed',
        /// 'Cancelled', 'Cancelling', 'PartiallySucceeded'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public JobStatus Status { get; set; }

        /// <summary>
        /// Gets or sets the start time of the job.
        /// </summary>
        [JsonProperty(PropertyName = "startTime")]
        public System.DateTime? StartTime { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
