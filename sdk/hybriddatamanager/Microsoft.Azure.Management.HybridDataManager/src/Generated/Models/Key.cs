// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.HybridData.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Encryption Key.
    /// </summary>
    public partial class Key
    {
        /// <summary>
        /// Initializes a new instance of the Key class.
        /// </summary>
        public Key()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Key class.
        /// </summary>
        /// <param name="keyModulus">Modulus of the encryption key.</param>
        /// <param name="keyExponent">Exponent of the encryption key.</param>
        /// <param name="encryptionChunkSizeInBytes">The maximum byte size that
        /// can be encrypted by the key. For a key size larger than the size,
        /// break into chunks and encrypt each chunk, append each encrypted
        /// chunk with : to mark the end of the chunk.</param>
        public Key(string keyModulus, string keyExponent, int encryptionChunkSizeInBytes)
        {
            KeyModulus = keyModulus;
            KeyExponent = keyExponent;
            EncryptionChunkSizeInBytes = encryptionChunkSizeInBytes;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets modulus of the encryption key.
        /// </summary>
        [JsonProperty(PropertyName = "keyModulus")]
        public string KeyModulus { get; set; }

        /// <summary>
        /// Gets or sets exponent of the encryption key.
        /// </summary>
        [JsonProperty(PropertyName = "keyExponent")]
        public string KeyExponent { get; set; }

        /// <summary>
        /// Gets or sets the maximum byte size that can be encrypted by the
        /// key. For a key size larger than the size, break into chunks and
        /// encrypt each chunk, append each encrypted chunk with : to mark the
        /// end of the chunk.
        /// </summary>
        [JsonProperty(PropertyName = "encryptionChunkSizeInBytes")]
        public int EncryptionChunkSizeInBytes { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (KeyModulus == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "KeyModulus");
            }
            if (KeyExponent == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "KeyExponent");
            }
        }
    }
}
