// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.HybridData.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Public key
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class PublicKey : DmsBaseObject
    {
        /// <summary>
        /// Initializes a new instance of the PublicKey class.
        /// </summary>
        public PublicKey()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PublicKey class.
        /// </summary>
        /// <param name="dataServiceLevel1Key">Level one public key for
        /// encryption</param>
        /// <param name="dataServiceLevel2Key">Level two public key for
        /// encryption</param>
        /// <param name="name">Name of the object.</param>
        /// <param name="id">Id of the object.</param>
        /// <param name="type">Type of the object.</param>
        public PublicKey(Key dataServiceLevel1Key, Key dataServiceLevel2Key, string name = default(string), string id = default(string), string type = default(string))
            : base(name, id, type)
        {
            DataServiceLevel1Key = dataServiceLevel1Key;
            DataServiceLevel2Key = dataServiceLevel2Key;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets level one public key for encryption
        /// </summary>
        [JsonProperty(PropertyName = "properties.dataServiceLevel1Key")]
        public Key DataServiceLevel1Key { get; set; }

        /// <summary>
        /// Gets or sets level two public key for encryption
        /// </summary>
        [JsonProperty(PropertyName = "properties.dataServiceLevel2Key")]
        public Key DataServiceLevel2Key { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DataServiceLevel1Key == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DataServiceLevel1Key");
            }
            if (DataServiceLevel2Key == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DataServiceLevel2Key");
            }
            if (DataServiceLevel1Key != null)
            {
                DataServiceLevel1Key.Validate();
            }
            if (DataServiceLevel2Key != null)
            {
                DataServiceLevel2Key.Validate();
            }
        }
    }
}
