// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.HybridData.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for JobStatus.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum JobStatus
    {
        [EnumMember(Value = "None")]
        None,
        [EnumMember(Value = "InProgress")]
        InProgress,
        [EnumMember(Value = "Succeeded")]
        Succeeded,
        [EnumMember(Value = "WaitingForAction")]
        WaitingForAction,
        [EnumMember(Value = "Failed")]
        Failed,
        [EnumMember(Value = "Cancelled")]
        Cancelled,
        [EnumMember(Value = "Cancelling")]
        Cancelling,
        [EnumMember(Value = "PartiallySucceeded")]
        PartiallySucceeded
    }
    internal static class JobStatusEnumExtension
    {
        internal static string ToSerializedValue(this JobStatus? value)
        {
            return value == null ? null : ((JobStatus)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this JobStatus value)
        {
            switch( value )
            {
                case JobStatus.None:
                    return "None";
                case JobStatus.InProgress:
                    return "InProgress";
                case JobStatus.Succeeded:
                    return "Succeeded";
                case JobStatus.WaitingForAction:
                    return "WaitingForAction";
                case JobStatus.Failed:
                    return "Failed";
                case JobStatus.Cancelled:
                    return "Cancelled";
                case JobStatus.Cancelling:
                    return "Cancelling";
                case JobStatus.PartiallySucceeded:
                    return "PartiallySucceeded";
            }
            return null;
        }

        internal static JobStatus? ParseJobStatus(this string value)
        {
            switch( value )
            {
                case "None":
                    return JobStatus.None;
                case "InProgress":
                    return JobStatus.InProgress;
                case "Succeeded":
                    return JobStatus.Succeeded;
                case "WaitingForAction":
                    return JobStatus.WaitingForAction;
                case "Failed":
                    return JobStatus.Failed;
                case "Cancelled":
                    return JobStatus.Cancelled;
                case "Cancelling":
                    return JobStatus.Cancelling;
                case "PartiallySucceeded":
                    return JobStatus.PartiallySucceeded;
            }
            return null;
        }
    }
}
