// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.HybridData.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Data Service.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class DataService : DmsBaseObject
    {
        /// <summary>
        /// Initializes a new instance of the DataService class.
        /// </summary>
        public DataService()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DataService class.
        /// </summary>
        /// <param name="state">State of the data service. Possible values
        /// include: 'Disabled', 'Enabled', 'Supported'</param>
        /// <param name="name">Name of the object.</param>
        /// <param name="id">Id of the object.</param>
        /// <param name="type">Type of the object.</param>
        /// <param name="supportedDataSinkTypes">Supported data store types
        /// which can be used as a sink.</param>
        /// <param name="supportedDataSourceTypes">Supported data store types
        /// which can be used as a source.</param>
        public DataService(State state, string name = default(string), string id = default(string), string type = default(string), IList<string> supportedDataSinkTypes = default(IList<string>), IList<string> supportedDataSourceTypes = default(IList<string>))
            : base(name, id, type)
        {
            State = state;
            SupportedDataSinkTypes = supportedDataSinkTypes;
            SupportedDataSourceTypes = supportedDataSourceTypes;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets state of the data service. Possible values include:
        /// 'Disabled', 'Enabled', 'Supported'
        /// </summary>
        [JsonProperty(PropertyName = "properties.state")]
        public State State { get; set; }

        /// <summary>
        /// Gets or sets supported data store types which can be used as a
        /// sink.
        /// </summary>
        [JsonProperty(PropertyName = "properties.supportedDataSinkTypes")]
        public IList<string> SupportedDataSinkTypes { get; set; }

        /// <summary>
        /// Gets or sets supported data store types which can be used as a
        /// source.
        /// </summary>
        [JsonProperty(PropertyName = "properties.supportedDataSourceTypes")]
        public IList<string> SupportedDataSourceTypes { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
