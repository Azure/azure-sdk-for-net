// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.HybridData
{
    /// <summary>
    /// A class representing a collection of <see cref="HybridDataStoreResource" /> and their operations.
    /// Each <see cref="HybridDataStoreResource" /> in the collection will belong to the same instance of <see cref="HybridDataManagerResource" />.
    /// To get a <see cref="HybridDataStoreCollection" /> instance call the GetHybridDataStores method from an instance of <see cref="HybridDataManagerResource" />.
    /// </summary>
    public partial class HybridDataStoreCollection : ArmCollection, IEnumerable<HybridDataStoreResource>, IAsyncEnumerable<HybridDataStoreResource>
    {
        private readonly ClientDiagnostics _hybridDataStoreDataStoresClientDiagnostics;
        private readonly DataStoresRestOperations _hybridDataStoreDataStoresRestClient;

        /// <summary> Initializes a new instance of the <see cref="HybridDataStoreCollection"/> class for mocking. </summary>
        protected HybridDataStoreCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="HybridDataStoreCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal HybridDataStoreCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _hybridDataStoreDataStoresClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.HybridData", HybridDataStoreResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(HybridDataStoreResource.ResourceType, out string hybridDataStoreDataStoresApiVersion);
            _hybridDataStoreDataStoresRestClient = new DataStoresRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, hybridDataStoreDataStoresApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != HybridDataManagerResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, HybridDataManagerResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Creates or updates the data store/repository in the data manager.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStores/{dataStoreName}
        /// Operation Id: DataStores_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="dataStoreName"> The data store/repository name to be created or updated. </param>
        /// <param name="data"> The data store/repository object to be created or updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dataStoreName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dataStoreName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<HybridDataStoreResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string dataStoreName, HybridDataStoreData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dataStoreName, nameof(dataStoreName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _hybridDataStoreDataStoresClientDiagnostics.CreateScope("HybridDataStoreCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _hybridDataStoreDataStoresRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dataStoreName, data, cancellationToken).ConfigureAwait(false);
                var operation = new HybridDataArmOperation<HybridDataStoreResource>(new HybridDataStoreOperationSource(Client), _hybridDataStoreDataStoresClientDiagnostics, Pipeline, _hybridDataStoreDataStoresRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dataStoreName, data).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates the data store/repository in the data manager.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStores/{dataStoreName}
        /// Operation Id: DataStores_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="dataStoreName"> The data store/repository name to be created or updated. </param>
        /// <param name="data"> The data store/repository object to be created or updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dataStoreName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dataStoreName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<HybridDataStoreResource> CreateOrUpdate(WaitUntil waitUntil, string dataStoreName, HybridDataStoreData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dataStoreName, nameof(dataStoreName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _hybridDataStoreDataStoresClientDiagnostics.CreateScope("HybridDataStoreCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _hybridDataStoreDataStoresRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dataStoreName, data, cancellationToken);
                var operation = new HybridDataArmOperation<HybridDataStoreResource>(new HybridDataStoreOperationSource(Client), _hybridDataStoreDataStoresClientDiagnostics, Pipeline, _hybridDataStoreDataStoresRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dataStoreName, data).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// This method gets the data store/repository by name.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStores/{dataStoreName}
        /// Operation Id: DataStores_Get
        /// </summary>
        /// <param name="dataStoreName"> The data store/repository name queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dataStoreName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dataStoreName"/> is null. </exception>
        public virtual async Task<Response<HybridDataStoreResource>> GetAsync(string dataStoreName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dataStoreName, nameof(dataStoreName));

            using var scope = _hybridDataStoreDataStoresClientDiagnostics.CreateScope("HybridDataStoreCollection.Get");
            scope.Start();
            try
            {
                var response = await _hybridDataStoreDataStoresRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dataStoreName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new HybridDataStoreResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// This method gets the data store/repository by name.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStores/{dataStoreName}
        /// Operation Id: DataStores_Get
        /// </summary>
        /// <param name="dataStoreName"> The data store/repository name queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dataStoreName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dataStoreName"/> is null. </exception>
        public virtual Response<HybridDataStoreResource> Get(string dataStoreName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dataStoreName, nameof(dataStoreName));

            using var scope = _hybridDataStoreDataStoresClientDiagnostics.CreateScope("HybridDataStoreCollection.Get");
            scope.Start();
            try
            {
                var response = _hybridDataStoreDataStoresRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dataStoreName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new HybridDataStoreResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets all the data stores/repositories in the given resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStores
        /// Operation Id: DataStores_ListByDataManager
        /// </summary>
        /// <param name="filter"> OData Filter options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="HybridDataStoreResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<HybridDataStoreResource> GetAllAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _hybridDataStoreDataStoresRestClient.CreateListByDataManagerRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _hybridDataStoreDataStoresRestClient.CreateListByDataManagerNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new HybridDataStoreResource(Client, HybridDataStoreData.DeserializeHybridDataStoreData(e)), _hybridDataStoreDataStoresClientDiagnostics, Pipeline, "HybridDataStoreCollection.GetAll", "value", "nextLink");
        }

        /// <summary>
        /// Gets all the data stores/repositories in the given resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStores
        /// Operation Id: DataStores_ListByDataManager
        /// </summary>
        /// <param name="filter"> OData Filter options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="HybridDataStoreResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<HybridDataStoreResource> GetAll(string filter = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _hybridDataStoreDataStoresRestClient.CreateListByDataManagerRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _hybridDataStoreDataStoresRestClient.CreateListByDataManagerNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new HybridDataStoreResource(Client, HybridDataStoreData.DeserializeHybridDataStoreData(e)), _hybridDataStoreDataStoresClientDiagnostics, Pipeline, "HybridDataStoreCollection.GetAll", "value", "nextLink");
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStores/{dataStoreName}
        /// Operation Id: DataStores_Get
        /// </summary>
        /// <param name="dataStoreName"> The data store/repository name queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dataStoreName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dataStoreName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string dataStoreName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dataStoreName, nameof(dataStoreName));

            using var scope = _hybridDataStoreDataStoresClientDiagnostics.CreateScope("HybridDataStoreCollection.Exists");
            scope.Start();
            try
            {
                var response = await _hybridDataStoreDataStoresRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dataStoreName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStores/{dataStoreName}
        /// Operation Id: DataStores_Get
        /// </summary>
        /// <param name="dataStoreName"> The data store/repository name queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dataStoreName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dataStoreName"/> is null. </exception>
        public virtual Response<bool> Exists(string dataStoreName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dataStoreName, nameof(dataStoreName));

            using var scope = _hybridDataStoreDataStoresClientDiagnostics.CreateScope("HybridDataStoreCollection.Exists");
            scope.Start();
            try
            {
                var response = _hybridDataStoreDataStoresRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dataStoreName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<HybridDataStoreResource> IEnumerable<HybridDataStoreResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<HybridDataStoreResource> IAsyncEnumerable<HybridDataStoreResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
