// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.HybridData
{
    /// <summary>
    /// A class representing a collection of <see cref="HybridDataServiceResource" /> and their operations.
    /// Each <see cref="HybridDataServiceResource" /> in the collection will belong to the same instance of <see cref="HybridDataManagerResource" />.
    /// To get a <see cref="HybridDataServiceCollection" /> instance call the GetHybridDataServices method from an instance of <see cref="HybridDataManagerResource" />.
    /// </summary>
    public partial class HybridDataServiceCollection : ArmCollection, IEnumerable<HybridDataServiceResource>, IAsyncEnumerable<HybridDataServiceResource>
    {
        private readonly ClientDiagnostics _hybridDataServiceDataServicesClientDiagnostics;
        private readonly DataServicesRestOperations _hybridDataServiceDataServicesRestClient;

        /// <summary> Initializes a new instance of the <see cref="HybridDataServiceCollection"/> class for mocking. </summary>
        protected HybridDataServiceCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="HybridDataServiceCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal HybridDataServiceCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _hybridDataServiceDataServicesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.HybridData", HybridDataServiceResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(HybridDataServiceResource.ResourceType, out string hybridDataServiceDataServicesApiVersion);
            _hybridDataServiceDataServicesRestClient = new DataServicesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, hybridDataServiceDataServicesApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != HybridDataManagerResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, HybridDataManagerResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Gets the data service that matches the data service name given.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}
        /// Operation Id: DataServices_Get
        /// </summary>
        /// <param name="dataServiceName"> The name of the data service that is being queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dataServiceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dataServiceName"/> is null. </exception>
        public virtual async Task<Response<HybridDataServiceResource>> GetAsync(string dataServiceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dataServiceName, nameof(dataServiceName));

            using var scope = _hybridDataServiceDataServicesClientDiagnostics.CreateScope("HybridDataServiceCollection.Get");
            scope.Start();
            try
            {
                var response = await _hybridDataServiceDataServicesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dataServiceName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new HybridDataServiceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the data service that matches the data service name given.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}
        /// Operation Id: DataServices_Get
        /// </summary>
        /// <param name="dataServiceName"> The name of the data service that is being queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dataServiceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dataServiceName"/> is null. </exception>
        public virtual Response<HybridDataServiceResource> Get(string dataServiceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dataServiceName, nameof(dataServiceName));

            using var scope = _hybridDataServiceDataServicesClientDiagnostics.CreateScope("HybridDataServiceCollection.Get");
            scope.Start();
            try
            {
                var response = _hybridDataServiceDataServicesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dataServiceName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new HybridDataServiceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// This method gets all the data services.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices
        /// Operation Id: DataServices_ListByDataManager
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="HybridDataServiceResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<HybridDataServiceResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _hybridDataServiceDataServicesRestClient.CreateListByDataManagerRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _hybridDataServiceDataServicesRestClient.CreateListByDataManagerNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new HybridDataServiceResource(Client, HybridDataServiceData.DeserializeHybridDataServiceData(e)), _hybridDataServiceDataServicesClientDiagnostics, Pipeline, "HybridDataServiceCollection.GetAll", "value", "nextLink");
        }

        /// <summary>
        /// This method gets all the data services.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices
        /// Operation Id: DataServices_ListByDataManager
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="HybridDataServiceResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<HybridDataServiceResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _hybridDataServiceDataServicesRestClient.CreateListByDataManagerRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _hybridDataServiceDataServicesRestClient.CreateListByDataManagerNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new HybridDataServiceResource(Client, HybridDataServiceData.DeserializeHybridDataServiceData(e)), _hybridDataServiceDataServicesClientDiagnostics, Pipeline, "HybridDataServiceCollection.GetAll", "value", "nextLink");
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}
        /// Operation Id: DataServices_Get
        /// </summary>
        /// <param name="dataServiceName"> The name of the data service that is being queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dataServiceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dataServiceName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string dataServiceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dataServiceName, nameof(dataServiceName));

            using var scope = _hybridDataServiceDataServicesClientDiagnostics.CreateScope("HybridDataServiceCollection.Exists");
            scope.Start();
            try
            {
                var response = await _hybridDataServiceDataServicesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dataServiceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}
        /// Operation Id: DataServices_Get
        /// </summary>
        /// <param name="dataServiceName"> The name of the data service that is being queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dataServiceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dataServiceName"/> is null. </exception>
        public virtual Response<bool> Exists(string dataServiceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dataServiceName, nameof(dataServiceName));

            using var scope = _hybridDataServiceDataServicesClientDiagnostics.CreateScope("HybridDataServiceCollection.Exists");
            scope.Start();
            try
            {
                var response = _hybridDataServiceDataServicesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dataServiceName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<HybridDataServiceResource> IEnumerable<HybridDataServiceResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<HybridDataServiceResource> IAsyncEnumerable<HybridDataServiceResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
