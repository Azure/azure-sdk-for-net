// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.HybridData.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.HybridData
{
    /// <summary>
    /// A class representing the HybridDataService data model.
    /// Data Service.
    /// </summary>
    public partial class HybridDataServiceData : ResourceData
    {
        /// <summary> Initializes a new instance of HybridDataServiceData. </summary>
        /// <param name="state"> State of the data service. </param>
        public HybridDataServiceData(HybridDataState state)
        {
            State = state;
            SupportedDataSinkTypes = new ChangeTrackingList<string>();
            SupportedDataSourceTypes = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of HybridDataServiceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="state"> State of the data service. </param>
        /// <param name="supportedDataSinkTypes"> Supported data store types which can be used as a sink. </param>
        /// <param name="supportedDataSourceTypes"> Supported data store types which can be used as a source. </param>
        internal HybridDataServiceData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, HybridDataState state, IList<string> supportedDataSinkTypes, IList<string> supportedDataSourceTypes) : base(id, name, resourceType, systemData)
        {
            State = state;
            SupportedDataSinkTypes = supportedDataSinkTypes;
            SupportedDataSourceTypes = supportedDataSourceTypes;
        }

        /// <summary> State of the data service. </summary>
        public HybridDataState State { get; set; }
        /// <summary> Supported data store types which can be used as a sink. </summary>
        public IList<string> SupportedDataSinkTypes { get; }
        /// <summary> Supported data store types which can be used as a source. </summary>
        public IList<string> SupportedDataSourceTypes { get; }
    }
}
