// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.HybridData;

namespace Azure.ResourceManager.HybridData.Mocking
{
    /// <summary> A class to add extension methods to ArmClient. </summary>
    public partial class HybridDataArmClientMockingExtension : ArmResource
    {
        /// <summary> Initializes a new instance of the <see cref="HybridDataArmClientMockingExtension"/> class for mocking. </summary>
        protected HybridDataArmClientMockingExtension()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="HybridDataArmClientMockingExtension"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal HybridDataArmClientMockingExtension(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        internal HybridDataArmClientMockingExtension(ArmClient client) : this(client, ResourceIdentifier.Root)
        {
        }

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// Gets an object representing a <see cref="HybridDataManagerResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="HybridDataManagerResource.CreateResourceIdentifier" /> to create a <see cref="HybridDataManagerResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="HybridDataManagerResource" /> object. </returns>
        public virtual HybridDataManagerResource GetHybridDataManagerResource(ResourceIdentifier id)
        {
            HybridDataManagerResource.ValidateResourceId(id);
            return new HybridDataManagerResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="HybridDataServiceResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="HybridDataServiceResource.CreateResourceIdentifier" /> to create a <see cref="HybridDataServiceResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="HybridDataServiceResource" /> object. </returns>
        public virtual HybridDataServiceResource GetHybridDataServiceResource(ResourceIdentifier id)
        {
            HybridDataServiceResource.ValidateResourceId(id);
            return new HybridDataServiceResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="HybridDataJobDefinitionResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="HybridDataJobDefinitionResource.CreateResourceIdentifier" /> to create a <see cref="HybridDataJobDefinitionResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="HybridDataJobDefinitionResource" /> object. </returns>
        public virtual HybridDataJobDefinitionResource GetHybridDataJobDefinitionResource(ResourceIdentifier id)
        {
            HybridDataJobDefinitionResource.ValidateResourceId(id);
            return new HybridDataJobDefinitionResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="HybridDataJobResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="HybridDataJobResource.CreateResourceIdentifier" /> to create a <see cref="HybridDataJobResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="HybridDataJobResource" /> object. </returns>
        public virtual HybridDataJobResource GetHybridDataJobResource(ResourceIdentifier id)
        {
            HybridDataJobResource.ValidateResourceId(id);
            return new HybridDataJobResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="HybridDataStoreResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="HybridDataStoreResource.CreateResourceIdentifier" /> to create a <see cref="HybridDataStoreResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="HybridDataStoreResource" /> object. </returns>
        public virtual HybridDataStoreResource GetHybridDataStoreResource(ResourceIdentifier id)
        {
            HybridDataStoreResource.ValidateResourceId(id);
            return new HybridDataStoreResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="HybridDataStoreTypeResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="HybridDataStoreTypeResource.CreateResourceIdentifier" /> to create a <see cref="HybridDataStoreTypeResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="HybridDataStoreTypeResource" /> object. </returns>
        public virtual HybridDataStoreTypeResource GetHybridDataStoreTypeResource(ResourceIdentifier id)
        {
            HybridDataStoreTypeResource.ValidateResourceId(id);
            return new HybridDataStoreTypeResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="HybridDataPublicKeyResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="HybridDataPublicKeyResource.CreateResourceIdentifier" /> to create a <see cref="HybridDataPublicKeyResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="HybridDataPublicKeyResource" /> object. </returns>
        public virtual HybridDataPublicKeyResource GetHybridDataPublicKeyResource(ResourceIdentifier id)
        {
            HybridDataPublicKeyResource.ValidateResourceId(id);
            return new HybridDataPublicKeyResource(Client, id);
        }
    }
}
