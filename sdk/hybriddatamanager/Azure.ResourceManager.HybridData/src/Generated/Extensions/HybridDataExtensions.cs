// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.HybridData
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.HybridData. </summary>
    public static partial class HybridDataExtensions
    {
        private static ResourceGroupResourceExtensionClient GetResourceGroupResourceExtensionClient(ArmResource resource)
        {
            return resource.GetCachedClient(client =>
            {
                return new ResourceGroupResourceExtensionClient(client, resource.Id);
            });
        }

        private static ResourceGroupResourceExtensionClient GetResourceGroupResourceExtensionClient(ArmClient client, ResourceIdentifier scope)
        {
            return client.GetResourceClient(() =>
            {
                return new ResourceGroupResourceExtensionClient(client, scope);
            });
        }

        private static SubscriptionResourceExtensionClient GetSubscriptionResourceExtensionClient(ArmResource resource)
        {
            return resource.GetCachedClient(client =>
            {
                return new SubscriptionResourceExtensionClient(client, resource.Id);
            });
        }

        private static SubscriptionResourceExtensionClient GetSubscriptionResourceExtensionClient(ArmClient client, ResourceIdentifier scope)
        {
            return client.GetResourceClient(() =>
            {
                return new SubscriptionResourceExtensionClient(client, scope);
            });
        }
        #region HybridDataManagerResource
        /// <summary>
        /// Gets an object representing a <see cref="HybridDataManagerResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="HybridDataManagerResource.CreateResourceIdentifier" /> to create a <see cref="HybridDataManagerResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="HybridDataManagerResource" /> object. </returns>
        public static HybridDataManagerResource GetHybridDataManagerResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                HybridDataManagerResource.ValidateResourceId(id);
                return new HybridDataManagerResource(client, id);
            }
            );
        }
        #endregion

        #region HybridDataServiceResource
        /// <summary>
        /// Gets an object representing a <see cref="HybridDataServiceResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="HybridDataServiceResource.CreateResourceIdentifier" /> to create a <see cref="HybridDataServiceResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="HybridDataServiceResource" /> object. </returns>
        public static HybridDataServiceResource GetHybridDataServiceResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                HybridDataServiceResource.ValidateResourceId(id);
                return new HybridDataServiceResource(client, id);
            }
            );
        }
        #endregion

        #region HybridDataJobDefinitionResource
        /// <summary>
        /// Gets an object representing a <see cref="HybridDataJobDefinitionResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="HybridDataJobDefinitionResource.CreateResourceIdentifier" /> to create a <see cref="HybridDataJobDefinitionResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="HybridDataJobDefinitionResource" /> object. </returns>
        public static HybridDataJobDefinitionResource GetHybridDataJobDefinitionResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                HybridDataJobDefinitionResource.ValidateResourceId(id);
                return new HybridDataJobDefinitionResource(client, id);
            }
            );
        }
        #endregion

        #region HybridDataJobResource
        /// <summary>
        /// Gets an object representing a <see cref="HybridDataJobResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="HybridDataJobResource.CreateResourceIdentifier" /> to create a <see cref="HybridDataJobResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="HybridDataJobResource" /> object. </returns>
        public static HybridDataJobResource GetHybridDataJobResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                HybridDataJobResource.ValidateResourceId(id);
                return new HybridDataJobResource(client, id);
            }
            );
        }
        #endregion

        #region HybridDataStoreResource
        /// <summary>
        /// Gets an object representing a <see cref="HybridDataStoreResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="HybridDataStoreResource.CreateResourceIdentifier" /> to create a <see cref="HybridDataStoreResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="HybridDataStoreResource" /> object. </returns>
        public static HybridDataStoreResource GetHybridDataStoreResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                HybridDataStoreResource.ValidateResourceId(id);
                return new HybridDataStoreResource(client, id);
            }
            );
        }
        #endregion

        #region HybridDataStoreTypeResource
        /// <summary>
        /// Gets an object representing a <see cref="HybridDataStoreTypeResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="HybridDataStoreTypeResource.CreateResourceIdentifier" /> to create a <see cref="HybridDataStoreTypeResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="HybridDataStoreTypeResource" /> object. </returns>
        public static HybridDataStoreTypeResource GetHybridDataStoreTypeResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                HybridDataStoreTypeResource.ValidateResourceId(id);
                return new HybridDataStoreTypeResource(client, id);
            }
            );
        }
        #endregion

        #region HybridDataPublicKeyResource
        /// <summary>
        /// Gets an object representing a <see cref="HybridDataPublicKeyResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="HybridDataPublicKeyResource.CreateResourceIdentifier" /> to create a <see cref="HybridDataPublicKeyResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="HybridDataPublicKeyResource" /> object. </returns>
        public static HybridDataPublicKeyResource GetHybridDataPublicKeyResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                HybridDataPublicKeyResource.ValidateResourceId(id);
                return new HybridDataPublicKeyResource(client, id);
            }
            );
        }
        #endregion

        /// <summary> Gets a collection of HybridDataManagerResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of HybridDataManagerResources and their operations over a HybridDataManagerResource. </returns>
        public static HybridDataManagerCollection GetHybridDataManagers(this ResourceGroupResource resourceGroupResource)
        {
            return GetResourceGroupResourceExtensionClient(resourceGroupResource).GetHybridDataManagers();
        }

        /// <summary>
        /// Gets information about the specified data manager resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataManagers_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="dataManagerName"> The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dataManagerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dataManagerName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<HybridDataManagerResource>> GetHybridDataManagerAsync(this ResourceGroupResource resourceGroupResource, string dataManagerName, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetHybridDataManagers().GetAsync(dataManagerName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets information about the specified data manager resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataManagers_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="dataManagerName"> The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dataManagerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dataManagerName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<HybridDataManagerResource> GetHybridDataManager(this ResourceGroupResource resourceGroupResource, string dataManagerName, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetHybridDataManagers().Get(dataManagerName, cancellationToken);
        }

        /// <summary>
        /// Lists all the data manager resources available under the subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.HybridData/dataManagers</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataManagers_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="HybridDataManagerResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<HybridDataManagerResource> GetHybridDataManagersAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetSubscriptionResourceExtensionClient(subscriptionResource).GetHybridDataManagersAsync(cancellationToken);
        }

        /// <summary>
        /// Lists all the data manager resources available under the subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.HybridData/dataManagers</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataManagers_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="HybridDataManagerResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<HybridDataManagerResource> GetHybridDataManagers(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetSubscriptionResourceExtensionClient(subscriptionResource).GetHybridDataManagers(cancellationToken);
        }
    }
}
