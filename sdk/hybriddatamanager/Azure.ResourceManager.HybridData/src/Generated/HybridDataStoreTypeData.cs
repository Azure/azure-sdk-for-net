// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.HybridData.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.HybridData
{
    /// <summary>
    /// A class representing the HybridDataStoreType data model.
    /// Data Store Type.
    /// </summary>
    public partial class HybridDataStoreTypeData : ResourceData
    {
        /// <summary> Initializes a new instance of HybridDataStoreTypeData. </summary>
        /// <param name="state"> State of the data store type. </param>
        public HybridDataStoreTypeData(HybridDataState state)
        {
            State = state;
            SupportedDataServicesAsSink = new ChangeTrackingList<string>();
            SupportedDataServicesAsSource = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of HybridDataStoreTypeData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="repositoryType"> Arm type for the manager resource to which the data source type is associated. This is optional. </param>
        /// <param name="state"> State of the data store type. </param>
        /// <param name="supportedDataServicesAsSink"> Supported data services where it can be used as a sink. </param>
        /// <param name="supportedDataServicesAsSource"> Supported data services where it can be used as a source. </param>
        internal HybridDataStoreTypeData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, ResourceType? repositoryType, HybridDataState state, IList<string> supportedDataServicesAsSink, IList<string> supportedDataServicesAsSource) : base(id, name, resourceType, systemData)
        {
            RepositoryType = repositoryType;
            State = state;
            SupportedDataServicesAsSink = supportedDataServicesAsSink;
            SupportedDataServicesAsSource = supportedDataServicesAsSource;
        }

        /// <summary> Arm type for the manager resource to which the data source type is associated. This is optional. </summary>
        public ResourceType? RepositoryType { get; set; }
        /// <summary> State of the data store type. </summary>
        public HybridDataState State { get; set; }
        /// <summary> Supported data services where it can be used as a sink. </summary>
        public IList<string> SupportedDataServicesAsSink { get; }
        /// <summary> Supported data services where it can be used as a source. </summary>
        public IList<string> SupportedDataServicesAsSource { get; }
    }
}
