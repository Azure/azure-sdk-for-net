// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.HybridData
{
    /// <summary>
    /// A Class representing a DataService along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier" /> you can construct a <see cref="DataServiceResource" />
    /// from an instance of <see cref="ArmClient" /> using the GetDataServiceResource method.
    /// Otherwise you can get one from its parent resource <see cref="DataManagerResource" /> using the GetDataService method.
    /// </summary>
    public partial class DataServiceResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="DataServiceResource"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string dataManagerName, string dataServiceName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _dataServiceClientDiagnostics;
        private readonly DataServicesRestOperations _dataServiceRestClient;
        private readonly ClientDiagnostics _jobClientDiagnostics;
        private readonly JobsRestOperations _jobRestClient;
        private readonly DataServiceData _data;

        /// <summary> Initializes a new instance of the <see cref="DataServiceResource"/> class for mocking. </summary>
        protected DataServiceResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "DataServiceResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal DataServiceResource(ArmClient client, DataServiceData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="DataServiceResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal DataServiceResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _dataServiceClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.HybridData", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string dataServiceApiVersion);
            _dataServiceRestClient = new DataServicesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, dataServiceApiVersion);
            _jobClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.HybridData", JobResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(JobResource.ResourceType, out string jobApiVersion);
            _jobRestClient = new JobsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, jobApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.HybridData/dataManagers/dataServices";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual DataServiceData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets a collection of JobDefinitionResources in the DataService. </summary>
        /// <returns> An object representing collection of JobDefinitionResources and their operations over a JobDefinitionResource. </returns>
        public virtual JobDefinitionCollection GetJobDefinitions()
        {
            return GetCachedClient(Client => new JobDefinitionCollection(Client, Id));
        }

        /// <summary>
        /// This method gets job definition object by name.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}
        /// Operation Id: JobDefinitions_Get
        /// </summary>
        /// <param name="jobDefinitionName"> The job definition name that is being queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="jobDefinitionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="jobDefinitionName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<JobDefinitionResource>> GetJobDefinitionAsync(string jobDefinitionName, CancellationToken cancellationToken = default)
        {
            return await GetJobDefinitions().GetAsync(jobDefinitionName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// This method gets job definition object by name.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}
        /// Operation Id: JobDefinitions_Get
        /// </summary>
        /// <param name="jobDefinitionName"> The job definition name that is being queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="jobDefinitionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="jobDefinitionName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<JobDefinitionResource> GetJobDefinition(string jobDefinitionName, CancellationToken cancellationToken = default)
        {
            return GetJobDefinitions().Get(jobDefinitionName, cancellationToken);
        }

        /// <summary>
        /// Gets the data service that matches the data service name given.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}
        /// Operation Id: DataServices_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<DataServiceResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _dataServiceClientDiagnostics.CreateScope("DataServiceResource.Get");
            scope.Start();
            try
            {
                var response = await _dataServiceRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DataServiceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the data service that matches the data service name given.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}
        /// Operation Id: DataServices_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DataServiceResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _dataServiceClientDiagnostics.CreateScope("DataServiceResource.Get");
            scope.Start();
            try
            {
                var response = _dataServiceRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DataServiceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// This method gets all the jobs of a data service type in a given resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobs
        /// Operation Id: Jobs_ListByDataService
        /// </summary>
        /// <param name="filter"> OData Filter options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="JobResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<JobResource> GetJobsAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<JobResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _jobClientDiagnostics.CreateScope("DataServiceResource.GetJobs");
                scope.Start();
                try
                {
                    var response = await _jobRestClient.ListByDataServiceAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new JobResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<JobResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _jobClientDiagnostics.CreateScope("DataServiceResource.GetJobs");
                scope.Start();
                try
                {
                    var response = await _jobRestClient.ListByDataServiceNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new JobResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// This method gets all the jobs of a data service type in a given resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobs
        /// Operation Id: Jobs_ListByDataService
        /// </summary>
        /// <param name="filter"> OData Filter options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="JobResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<JobResource> GetJobs(string filter = null, CancellationToken cancellationToken = default)
        {
            Page<JobResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _jobClientDiagnostics.CreateScope("DataServiceResource.GetJobs");
                scope.Start();
                try
                {
                    var response = _jobRestClient.ListByDataService(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new JobResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<JobResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _jobClientDiagnostics.CreateScope("DataServiceResource.GetJobs");
                scope.Start();
                try
                {
                    var response = _jobRestClient.ListByDataServiceNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new JobResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
