// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.HybridData.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.HybridData
{
    /// <summary>
    /// A class representing the HybridDataStore data model.
    /// Data store.
    /// </summary>
    public partial class HybridDataStoreData : ResourceData
    {
        /// <summary> Initializes a new instance of HybridDataStoreData. </summary>
        /// <param name="state"> State of the data source. </param>
        /// <param name="dataStoreTypeId"> The arm id of the data store type. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataStoreTypeId"/> is null. </exception>
        public HybridDataStoreData(HybridDataState state, ResourceIdentifier dataStoreTypeId)
        {
            Argument.AssertNotNull(dataStoreTypeId, nameof(dataStoreTypeId));

            State = state;
            DataStoreTypeId = dataStoreTypeId;
            CustomerSecrets = new ChangeTrackingList<HybridDataCustomerSecret>();
        }

        /// <summary> Initializes a new instance of HybridDataStoreData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="repositoryId"> Arm Id for the manager resource to which the data source is associated. This is optional. </param>
        /// <param name="state"> State of the data source. </param>
        /// <param name="extendedProperties"> A generic json used differently by each data source type. </param>
        /// <param name="dataStoreTypeId"> The arm id of the data store type. </param>
        /// <param name="customerSecrets"> List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys. </param>
        internal HybridDataStoreData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, ResourceIdentifier repositoryId, HybridDataState state, BinaryData extendedProperties, ResourceIdentifier dataStoreTypeId, IList<HybridDataCustomerSecret> customerSecrets) : base(id, name, resourceType, systemData)
        {
            RepositoryId = repositoryId;
            State = state;
            ExtendedProperties = extendedProperties;
            DataStoreTypeId = dataStoreTypeId;
            CustomerSecrets = customerSecrets;
        }

        /// <summary> Arm Id for the manager resource to which the data source is associated. This is optional. </summary>
        public ResourceIdentifier RepositoryId { get; set; }
        /// <summary> State of the data source. </summary>
        public HybridDataState State { get; set; }
        /// <summary>
        /// A generic json used differently by each data source type.
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData ExtendedProperties { get; set; }
        /// <summary> The arm id of the data store type. </summary>
        public ResourceIdentifier DataStoreTypeId { get; set; }
        /// <summary> List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys. </summary>
        public IList<HybridDataCustomerSecret> CustomerSecrets { get; }
    }
}
