// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;
using Azure.ResourceManager.HybridData.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.HybridData
{
    /// <summary>
    /// A class representing the HybridDataPublicKey data model.
    /// Public key
    /// </summary>
    public partial class HybridDataPublicKeyData : ResourceData
    {
        /// <summary> Initializes a new instance of HybridDataPublicKeyData. </summary>
        /// <param name="dataServiceLevel1Key"> Level one public key for encryption. </param>
        /// <param name="dataServiceLevel2Key"> Level two public key for encryption. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataServiceLevel1Key"/> or <paramref name="dataServiceLevel2Key"/> is null. </exception>
        public HybridDataPublicKeyData(HybridDataEncryptionKey dataServiceLevel1Key, HybridDataEncryptionKey dataServiceLevel2Key)
        {
            Argument.AssertNotNull(dataServiceLevel1Key, nameof(dataServiceLevel1Key));
            Argument.AssertNotNull(dataServiceLevel2Key, nameof(dataServiceLevel2Key));

            DataServiceLevel1Key = dataServiceLevel1Key;
            DataServiceLevel2Key = dataServiceLevel2Key;
        }

        /// <summary> Initializes a new instance of HybridDataPublicKeyData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="dataServiceLevel1Key"> Level one public key for encryption. </param>
        /// <param name="dataServiceLevel2Key"> Level two public key for encryption. </param>
        internal HybridDataPublicKeyData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, HybridDataEncryptionKey dataServiceLevel1Key, HybridDataEncryptionKey dataServiceLevel2Key) : base(id, name, resourceType, systemData)
        {
            DataServiceLevel1Key = dataServiceLevel1Key;
            DataServiceLevel2Key = dataServiceLevel2Key;
        }

        /// <summary> Level one public key for encryption. </summary>
        public HybridDataEncryptionKey DataServiceLevel1Key { get; set; }
        /// <summary> Level two public key for encryption. </summary>
        public HybridDataEncryptionKey DataServiceLevel2Key { get; set; }
    }
}
