// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.HybridData
{
    /// <summary>
    /// A class representing a collection of <see cref="HybridDataJobDefinitionResource" /> and their operations.
    /// Each <see cref="HybridDataJobDefinitionResource" /> in the collection will belong to the same instance of <see cref="HybridDataServiceResource" />.
    /// To get a <see cref="HybridDataJobDefinitionCollection" /> instance call the GetHybridDataJobDefinitions method from an instance of <see cref="HybridDataServiceResource" />.
    /// </summary>
    public partial class HybridDataJobDefinitionCollection : ArmCollection, IEnumerable<HybridDataJobDefinitionResource>, IAsyncEnumerable<HybridDataJobDefinitionResource>
    {
        private readonly ClientDiagnostics _hybridDataJobDefinitionJobDefinitionsClientDiagnostics;
        private readonly JobDefinitionsRestOperations _hybridDataJobDefinitionJobDefinitionsRestClient;

        /// <summary> Initializes a new instance of the <see cref="HybridDataJobDefinitionCollection"/> class for mocking. </summary>
        protected HybridDataJobDefinitionCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="HybridDataJobDefinitionCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal HybridDataJobDefinitionCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _hybridDataJobDefinitionJobDefinitionsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.HybridData", HybridDataJobDefinitionResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(HybridDataJobDefinitionResource.ResourceType, out string hybridDataJobDefinitionJobDefinitionsApiVersion);
            _hybridDataJobDefinitionJobDefinitionsRestClient = new JobDefinitionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, hybridDataJobDefinitionJobDefinitionsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != HybridDataServiceResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, HybridDataServiceResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Creates or updates a job definition.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}
        /// Operation Id: JobDefinitions_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="jobDefinitionName"> The job definition name to be created or updated. </param>
        /// <param name="data"> Job Definition object to be created or updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="jobDefinitionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="jobDefinitionName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<HybridDataJobDefinitionResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string jobDefinitionName, HybridDataJobDefinitionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobDefinitionName, nameof(jobDefinitionName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _hybridDataJobDefinitionJobDefinitionsClientDiagnostics.CreateScope("HybridDataJobDefinitionCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _hybridDataJobDefinitionJobDefinitionsRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, jobDefinitionName, data, cancellationToken).ConfigureAwait(false);
                var operation = new HybridDataArmOperation<HybridDataJobDefinitionResource>(new HybridDataJobDefinitionOperationSource(Client), _hybridDataJobDefinitionJobDefinitionsClientDiagnostics, Pipeline, _hybridDataJobDefinitionJobDefinitionsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, jobDefinitionName, data).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates a job definition.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}
        /// Operation Id: JobDefinitions_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="jobDefinitionName"> The job definition name to be created or updated. </param>
        /// <param name="data"> Job Definition object to be created or updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="jobDefinitionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="jobDefinitionName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<HybridDataJobDefinitionResource> CreateOrUpdate(WaitUntil waitUntil, string jobDefinitionName, HybridDataJobDefinitionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobDefinitionName, nameof(jobDefinitionName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _hybridDataJobDefinitionJobDefinitionsClientDiagnostics.CreateScope("HybridDataJobDefinitionCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _hybridDataJobDefinitionJobDefinitionsRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, jobDefinitionName, data, cancellationToken);
                var operation = new HybridDataArmOperation<HybridDataJobDefinitionResource>(new HybridDataJobDefinitionOperationSource(Client), _hybridDataJobDefinitionJobDefinitionsClientDiagnostics, Pipeline, _hybridDataJobDefinitionJobDefinitionsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, jobDefinitionName, data).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// This method gets job definition object by name.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}
        /// Operation Id: JobDefinitions_Get
        /// </summary>
        /// <param name="jobDefinitionName"> The job definition name that is being queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="jobDefinitionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="jobDefinitionName"/> is null. </exception>
        public virtual async Task<Response<HybridDataJobDefinitionResource>> GetAsync(string jobDefinitionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobDefinitionName, nameof(jobDefinitionName));

            using var scope = _hybridDataJobDefinitionJobDefinitionsClientDiagnostics.CreateScope("HybridDataJobDefinitionCollection.Get");
            scope.Start();
            try
            {
                var response = await _hybridDataJobDefinitionJobDefinitionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, jobDefinitionName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new HybridDataJobDefinitionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// This method gets job definition object by name.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}
        /// Operation Id: JobDefinitions_Get
        /// </summary>
        /// <param name="jobDefinitionName"> The job definition name that is being queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="jobDefinitionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="jobDefinitionName"/> is null. </exception>
        public virtual Response<HybridDataJobDefinitionResource> Get(string jobDefinitionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobDefinitionName, nameof(jobDefinitionName));

            using var scope = _hybridDataJobDefinitionJobDefinitionsClientDiagnostics.CreateScope("HybridDataJobDefinitionCollection.Get");
            scope.Start();
            try
            {
                var response = _hybridDataJobDefinitionJobDefinitionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, jobDefinitionName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new HybridDataJobDefinitionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// This method gets all the job definitions of the given data service name.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions
        /// Operation Id: JobDefinitions_ListByDataService
        /// </summary>
        /// <param name="filter"> OData Filter options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="HybridDataJobDefinitionResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<HybridDataJobDefinitionResource> GetAllAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _hybridDataJobDefinitionJobDefinitionsRestClient.CreateListByDataServiceRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _hybridDataJobDefinitionJobDefinitionsRestClient.CreateListByDataServiceNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new HybridDataJobDefinitionResource(Client, HybridDataJobDefinitionData.DeserializeHybridDataJobDefinitionData(e)), _hybridDataJobDefinitionJobDefinitionsClientDiagnostics, Pipeline, "HybridDataJobDefinitionCollection.GetAll", "value", "nextLink");
        }

        /// <summary>
        /// This method gets all the job definitions of the given data service name.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions
        /// Operation Id: JobDefinitions_ListByDataService
        /// </summary>
        /// <param name="filter"> OData Filter options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="HybridDataJobDefinitionResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<HybridDataJobDefinitionResource> GetAll(string filter = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _hybridDataJobDefinitionJobDefinitionsRestClient.CreateListByDataServiceRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _hybridDataJobDefinitionJobDefinitionsRestClient.CreateListByDataServiceNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new HybridDataJobDefinitionResource(Client, HybridDataJobDefinitionData.DeserializeHybridDataJobDefinitionData(e)), _hybridDataJobDefinitionJobDefinitionsClientDiagnostics, Pipeline, "HybridDataJobDefinitionCollection.GetAll", "value", "nextLink");
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}
        /// Operation Id: JobDefinitions_Get
        /// </summary>
        /// <param name="jobDefinitionName"> The job definition name that is being queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="jobDefinitionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="jobDefinitionName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string jobDefinitionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobDefinitionName, nameof(jobDefinitionName));

            using var scope = _hybridDataJobDefinitionJobDefinitionsClientDiagnostics.CreateScope("HybridDataJobDefinitionCollection.Exists");
            scope.Start();
            try
            {
                var response = await _hybridDataJobDefinitionJobDefinitionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, jobDefinitionName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}
        /// Operation Id: JobDefinitions_Get
        /// </summary>
        /// <param name="jobDefinitionName"> The job definition name that is being queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="jobDefinitionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="jobDefinitionName"/> is null. </exception>
        public virtual Response<bool> Exists(string jobDefinitionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobDefinitionName, nameof(jobDefinitionName));

            using var scope = _hybridDataJobDefinitionJobDefinitionsClientDiagnostics.CreateScope("HybridDataJobDefinitionCollection.Exists");
            scope.Start();
            try
            {
                var response = _hybridDataJobDefinitionJobDefinitionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, jobDefinitionName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<HybridDataJobDefinitionResource> IEnumerable<HybridDataJobDefinitionResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<HybridDataJobDefinitionResource> IAsyncEnumerable<HybridDataJobDefinitionResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
