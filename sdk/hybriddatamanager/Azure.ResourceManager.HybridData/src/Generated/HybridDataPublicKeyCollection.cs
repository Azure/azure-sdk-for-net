// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.HybridData
{
    /// <summary>
    /// A class representing a collection of <see cref="HybridDataPublicKeyResource" /> and their operations.
    /// Each <see cref="HybridDataPublicKeyResource" /> in the collection will belong to the same instance of <see cref="HybridDataManagerResource" />.
    /// To get a <see cref="HybridDataPublicKeyCollection" /> instance call the GetHybridDataPublicKeys method from an instance of <see cref="HybridDataManagerResource" />.
    /// </summary>
    public partial class HybridDataPublicKeyCollection : ArmCollection, IEnumerable<HybridDataPublicKeyResource>, IAsyncEnumerable<HybridDataPublicKeyResource>
    {
        private readonly ClientDiagnostics _hybridDataPublicKeyPublicKeysClientDiagnostics;
        private readonly PublicKeysRestOperations _hybridDataPublicKeyPublicKeysRestClient;

        /// <summary> Initializes a new instance of the <see cref="HybridDataPublicKeyCollection"/> class for mocking. </summary>
        protected HybridDataPublicKeyCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="HybridDataPublicKeyCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal HybridDataPublicKeyCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _hybridDataPublicKeyPublicKeysClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.HybridData", HybridDataPublicKeyResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(HybridDataPublicKeyResource.ResourceType, out string hybridDataPublicKeyPublicKeysApiVersion);
            _hybridDataPublicKeyPublicKeysRestClient = new PublicKeysRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, hybridDataPublicKeyPublicKeysApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != HybridDataManagerResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, HybridDataManagerResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// This method gets the public keys.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/publicKeys/{publicKeyName}
        /// Operation Id: PublicKeys_Get
        /// </summary>
        /// <param name="publicKeyName"> Name of the public key. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="publicKeyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="publicKeyName"/> is null. </exception>
        public virtual async Task<Response<HybridDataPublicKeyResource>> GetAsync(string publicKeyName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(publicKeyName, nameof(publicKeyName));

            using var scope = _hybridDataPublicKeyPublicKeysClientDiagnostics.CreateScope("HybridDataPublicKeyCollection.Get");
            scope.Start();
            try
            {
                var response = await _hybridDataPublicKeyPublicKeysRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, publicKeyName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new HybridDataPublicKeyResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// This method gets the public keys.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/publicKeys/{publicKeyName}
        /// Operation Id: PublicKeys_Get
        /// </summary>
        /// <param name="publicKeyName"> Name of the public key. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="publicKeyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="publicKeyName"/> is null. </exception>
        public virtual Response<HybridDataPublicKeyResource> Get(string publicKeyName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(publicKeyName, nameof(publicKeyName));

            using var scope = _hybridDataPublicKeyPublicKeysClientDiagnostics.CreateScope("HybridDataPublicKeyCollection.Get");
            scope.Start();
            try
            {
                var response = _hybridDataPublicKeyPublicKeysRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, publicKeyName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new HybridDataPublicKeyResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// This method gets the list view of public keys, however it will only have one element.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/publicKeys
        /// Operation Id: PublicKeys_ListByDataManager
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="HybridDataPublicKeyResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<HybridDataPublicKeyResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _hybridDataPublicKeyPublicKeysRestClient.CreateListByDataManagerRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _hybridDataPublicKeyPublicKeysRestClient.CreateListByDataManagerNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new HybridDataPublicKeyResource(Client, HybridDataPublicKeyData.DeserializeHybridDataPublicKeyData(e)), _hybridDataPublicKeyPublicKeysClientDiagnostics, Pipeline, "HybridDataPublicKeyCollection.GetAll", "value", "nextLink");
        }

        /// <summary>
        /// This method gets the list view of public keys, however it will only have one element.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/publicKeys
        /// Operation Id: PublicKeys_ListByDataManager
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="HybridDataPublicKeyResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<HybridDataPublicKeyResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _hybridDataPublicKeyPublicKeysRestClient.CreateListByDataManagerRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _hybridDataPublicKeyPublicKeysRestClient.CreateListByDataManagerNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new HybridDataPublicKeyResource(Client, HybridDataPublicKeyData.DeserializeHybridDataPublicKeyData(e)), _hybridDataPublicKeyPublicKeysClientDiagnostics, Pipeline, "HybridDataPublicKeyCollection.GetAll", "value", "nextLink");
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/publicKeys/{publicKeyName}
        /// Operation Id: PublicKeys_Get
        /// </summary>
        /// <param name="publicKeyName"> Name of the public key. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="publicKeyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="publicKeyName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string publicKeyName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(publicKeyName, nameof(publicKeyName));

            using var scope = _hybridDataPublicKeyPublicKeysClientDiagnostics.CreateScope("HybridDataPublicKeyCollection.Exists");
            scope.Start();
            try
            {
                var response = await _hybridDataPublicKeyPublicKeysRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, publicKeyName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/publicKeys/{publicKeyName}
        /// Operation Id: PublicKeys_Get
        /// </summary>
        /// <param name="publicKeyName"> Name of the public key. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="publicKeyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="publicKeyName"/> is null. </exception>
        public virtual Response<bool> Exists(string publicKeyName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(publicKeyName, nameof(publicKeyName));

            using var scope = _hybridDataPublicKeyPublicKeysClientDiagnostics.CreateScope("HybridDataPublicKeyCollection.Exists");
            scope.Start();
            try
            {
                var response = _hybridDataPublicKeyPublicKeysRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, publicKeyName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<HybridDataPublicKeyResource> IEnumerable<HybridDataPublicKeyResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<HybridDataPublicKeyResource> IAsyncEnumerable<HybridDataPublicKeyResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
