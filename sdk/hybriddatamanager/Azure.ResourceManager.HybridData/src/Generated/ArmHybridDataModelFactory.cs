// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;
using Azure.Core;
using Azure.ResourceManager.HybridData;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.HybridData.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmHybridDataModelFactory
    {
        /// <summary> Initializes a new instance of HybridDataManagerData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="etag"> Etag of the Resource. </param>
        /// <param name="sku"> The sku type. </param>
        /// <returns> A new <see cref="HybridData.HybridDataManagerData"/> instance for mocking. </returns>
        public static HybridDataManagerData HybridDataManagerData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ETag? etag = null, HybridDataSku sku = null)
        {
            tags ??= new Dictionary<string, string>();

            return new HybridDataManagerData(id, name, resourceType, systemData, tags, location, etag, sku);
        }

        /// <summary> Initializes a new instance of HybridDataServiceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="state"> State of the data service. </param>
        /// <param name="supportedDataSinkTypes"> Supported data store types which can be used as a sink. </param>
        /// <param name="supportedDataSourceTypes"> Supported data store types which can be used as a source. </param>
        /// <returns> A new <see cref="HybridData.HybridDataServiceData"/> instance for mocking. </returns>
        public static HybridDataServiceData HybridDataServiceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, HybridDataState state = default, IEnumerable<string> supportedDataSinkTypes = null, IEnumerable<string> supportedDataSourceTypes = null)
        {
            supportedDataSinkTypes ??= new List<string>();
            supportedDataSourceTypes ??= new List<string>();

            return new HybridDataServiceData(id, name, resourceType, systemData, state, supportedDataSinkTypes?.ToList(), supportedDataSourceTypes?.ToList());
        }

        /// <summary> Initializes a new instance of HybridDataJobDefinitionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="dataSourceId"> Data Source Id associated to the job definition. </param>
        /// <param name="dataSinkId"> Data Sink Id associated to the job definition. </param>
        /// <param name="schedules"> Schedule for running the job definition. </param>
        /// <param name="state"> State of the job definition. </param>
        /// <param name="lastModifiedOn"> Last modified time of the job definition. </param>
        /// <param name="runLocation"> This is the preferred geo location for the job to run. </param>
        /// <param name="userConfirmation"> Enum to detect if user confirmation is required. If not passed will default to NotRequired. </param>
        /// <param name="dataServiceInput"> A generic json used differently by each data service type. </param>
        /// <param name="customerSecrets"> List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys. </param>
        /// <returns> A new <see cref="HybridData.HybridDataJobDefinitionData"/> instance for mocking. </returns>
        public static HybridDataJobDefinitionData HybridDataJobDefinitionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string dataSourceId = null, string dataSinkId = null, IEnumerable<HybridDataJobRunSchedule> schedules = null, HybridDataState state = default, DateTimeOffset? lastModifiedOn = null, HybridDataJobRunLocation? runLocation = null, UserConfirmationSetting? userConfirmation = null, BinaryData dataServiceInput = null, IEnumerable<HybridDataCustomerSecret> customerSecrets = null)
        {
            schedules ??= new List<HybridDataJobRunSchedule>();
            customerSecrets ??= new List<HybridDataCustomerSecret>();

            return new HybridDataJobDefinitionData(id, name, resourceType, systemData, dataSourceId, dataSinkId, schedules?.ToList(), state, lastModifiedOn, runLocation, userConfirmation, dataServiceInput, customerSecrets?.ToList());
        }

        /// <summary> Initializes a new instance of HybridDataJobData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="status"> Status of the job. </param>
        /// <param name="startOn"> Time at which the job was started in UTC ISO 8601 format. </param>
        /// <param name="endOn"> Time at which the job ended in UTC ISO 8601 format. </param>
        /// <param name="error"> Top level error for the job. </param>
        /// <param name="isCancellable"> Describes whether the job is cancellable. </param>
        /// <param name="bytesProcessed"> Number of bytes processed by the job as of now. </param>
        /// <param name="itemsProcessed"> Number of items processed by the job as of now. </param>
        /// <param name="totalBytesToProcess"> Number of bytes to be processed by the job in total. </param>
        /// <param name="totalItemsToProcess"> Number of items to be processed by the job in total. </param>
        /// <param name="details"> Details of a job run. This field will only be sent for expand details filter. </param>
        /// <param name="dataSourceName"> Name of the data source on which the job was triggered. </param>
        /// <param name="dataSinkName"> Name of the data sink on which the job was triggered. </param>
        /// <returns> A new <see cref="HybridData.HybridDataJobData"/> instance for mocking. </returns>
        public static HybridDataJobData HybridDataJobData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, HybridDataJobStatus status = default, DateTimeOffset startOn = default, DateTimeOffset? endOn = null, HybridDataJobTopLevelError error = null, JobCancellationSetting isCancellable = default, long? bytesProcessed = null, long? itemsProcessed = null, long? totalBytesToProcess = null, long? totalItemsToProcess = null, HybridDataJobDetails details = null, string dataSourceName = null, string dataSinkName = null)
        {
            return new HybridDataJobData(id, name, resourceType, systemData, status, startOn, endOn, error, isCancellable, bytesProcessed, itemsProcessed, totalBytesToProcess, totalItemsToProcess, details, dataSourceName, dataSinkName);
        }

        /// <summary> Initializes a new instance of HybridDataStoreData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="repositoryId"> Arm Id for the manager resource to which the data source is associated. This is optional. </param>
        /// <param name="state"> State of the data source. </param>
        /// <param name="extendedProperties"> A generic json used differently by each data source type. </param>
        /// <param name="dataStoreTypeId"> The arm id of the data store type. </param>
        /// <param name="customerSecrets"> List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys. </param>
        /// <returns> A new <see cref="HybridData.HybridDataStoreData"/> instance for mocking. </returns>
        public static HybridDataStoreData HybridDataStoreData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ResourceIdentifier repositoryId = null, HybridDataState state = default, BinaryData extendedProperties = null, ResourceIdentifier dataStoreTypeId = null, IEnumerable<HybridDataCustomerSecret> customerSecrets = null)
        {
            customerSecrets ??= new List<HybridDataCustomerSecret>();

            return new HybridDataStoreData(id, name, resourceType, systemData, repositoryId, state, extendedProperties, dataStoreTypeId, customerSecrets?.ToList());
        }

        /// <summary> Initializes a new instance of HybridDataStoreTypeData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="repositoryType"> Arm type for the manager resource to which the data source type is associated. This is optional. </param>
        /// <param name="state"> State of the data store type. </param>
        /// <param name="supportedDataServicesAsSink"> Supported data services where it can be used as a sink. </param>
        /// <param name="supportedDataServicesAsSource"> Supported data services where it can be used as a source. </param>
        /// <returns> A new <see cref="HybridData.HybridDataStoreTypeData"/> instance for mocking. </returns>
        public static HybridDataStoreTypeData HybridDataStoreTypeData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ResourceType? repositoryType = null, HybridDataState state = default, IEnumerable<string> supportedDataServicesAsSink = null, IEnumerable<string> supportedDataServicesAsSource = null)
        {
            supportedDataServicesAsSink ??= new List<string>();
            supportedDataServicesAsSource ??= new List<string>();

            return new HybridDataStoreTypeData(id, name, resourceType, systemData, repositoryType, state, supportedDataServicesAsSink?.ToList(), supportedDataServicesAsSource?.ToList());
        }

        /// <summary> Initializes a new instance of HybridDataPublicKeyData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="dataServiceLevel1Key"> Level one public key for encryption. </param>
        /// <param name="dataServiceLevel2Key"> Level two public key for encryption. </param>
        /// <returns> A new <see cref="HybridData.HybridDataPublicKeyData"/> instance for mocking. </returns>
        public static HybridDataPublicKeyData HybridDataPublicKeyData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, HybridDataEncryptionKey dataServiceLevel1Key = null, HybridDataEncryptionKey dataServiceLevel2Key = null)
        {
            return new HybridDataPublicKeyData(id, name, resourceType, systemData, dataServiceLevel1Key, dataServiceLevel2Key);
        }
    }
}
