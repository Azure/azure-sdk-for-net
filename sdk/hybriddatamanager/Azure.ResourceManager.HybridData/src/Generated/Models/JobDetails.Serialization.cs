// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.HybridData;

namespace Azure.ResourceManager.HybridData.Models
{
    public partial class JobDetails : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(JobStages))
            {
                writer.WritePropertyName("jobStages");
                writer.WriteStartArray();
                foreach (var item in JobStages)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(JobDefinition))
            {
                writer.WritePropertyName("jobDefinition");
                writer.WriteObjectValue(JobDefinition);
            }
            if (Optional.IsCollectionDefined(ErrorDetails))
            {
                writer.WritePropertyName("errorDetails");
                writer.WriteStartArray();
                foreach (var item in ErrorDetails)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ItemDetailsLink))
            {
                writer.WritePropertyName("itemDetailsLink");
                writer.WriteStringValue(ItemDetailsLink);
            }
            writer.WriteEndObject();
        }

        internal static JobDetails DeserializeJobDetails(JsonElement element)
        {
            Optional<IList<JobStages>> jobStages = default;
            Optional<JobDefinitionData> jobDefinition = default;
            Optional<IList<ErrorDetails>> errorDetails = default;
            Optional<string> itemDetailsLink = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("jobStages"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<JobStages> array = new List<JobStages>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Models.JobStages.DeserializeJobStages(item));
                    }
                    jobStages = array;
                    continue;
                }
                if (property.NameEquals("jobDefinition"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    jobDefinition = JobDefinitionData.DeserializeJobDefinitionData(property.Value);
                    continue;
                }
                if (property.NameEquals("errorDetails"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ErrorDetails> array = new List<ErrorDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Models.ErrorDetails.DeserializeErrorDetails(item));
                    }
                    errorDetails = array;
                    continue;
                }
                if (property.NameEquals("itemDetailsLink"))
                {
                    itemDetailsLink = property.Value.GetString();
                    continue;
                }
            }
            return new JobDetails(Optional.ToList(jobStages), jobDefinition.Value, Optional.ToList(errorDetails), itemDetailsLink.Value);
        }
    }
}
