// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.HybridData.Models
{
    public partial class JobStages : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(StageName))
            {
                writer.WritePropertyName("stageName");
                writer.WriteStringValue(StageName);
            }
            writer.WritePropertyName("stageStatus");
            writer.WriteStringValue(StageStatus.ToSerialString());
            if (Optional.IsDefined(JobStageDetails))
            {
                writer.WritePropertyName("jobStageDetails");
#if NET6_0_OR_GREATER
				writer.WriteRawValue(JobStageDetails);
#else
                JsonSerializer.Serialize(writer, JsonDocument.Parse(JobStageDetails.ToString()).RootElement);
#endif
            }
            if (Optional.IsCollectionDefined(ErrorDetails))
            {
                writer.WritePropertyName("errorDetails");
                writer.WriteStartArray();
                foreach (var item in ErrorDetails)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static JobStages DeserializeJobStages(JsonElement element)
        {
            Optional<string> stageName = default;
            JobStatus stageStatus = default;
            Optional<BinaryData> jobStageDetails = default;
            Optional<IList<ErrorDetails>> errorDetails = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("stageName"))
                {
                    stageName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("stageStatus"))
                {
                    stageStatus = property.Value.GetString().ToJobStatus();
                    continue;
                }
                if (property.NameEquals("jobStageDetails"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    jobStageDetails = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("errorDetails"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ErrorDetails> array = new List<ErrorDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Models.ErrorDetails.DeserializeErrorDetails(item));
                    }
                    errorDetails = array;
                    continue;
                }
            }
            return new JobStages(stageName.Value, stageStatus, jobStageDetails.Value, Optional.ToList(errorDetails));
        }
    }
}
