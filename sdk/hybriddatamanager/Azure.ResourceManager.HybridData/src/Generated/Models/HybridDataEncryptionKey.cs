// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Azure.ResourceManager.HybridData.Models
{
    /// <summary> Encryption Key. </summary>
    public partial class HybridDataEncryptionKey
    {
        /// <summary> Initializes a new instance of HybridDataEncryptionKey. </summary>
        /// <param name="keyModulus"> Modulus of the encryption key. </param>
        /// <param name="keyExponent"> Exponent of the encryption key. </param>
        /// <param name="encryptionChunkSizeInBytes"> The maximum byte size that can be encrypted by the key. For a key size larger than the size, break into chunks and encrypt each chunk, append each encrypted chunk with : to mark the end of the chunk. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="keyModulus"/> or <paramref name="keyExponent"/> is null. </exception>
        public HybridDataEncryptionKey(string keyModulus, string keyExponent, int encryptionChunkSizeInBytes)
        {
            Argument.AssertNotNull(keyModulus, nameof(keyModulus));
            Argument.AssertNotNull(keyExponent, nameof(keyExponent));

            KeyModulus = keyModulus;
            KeyExponent = keyExponent;
            EncryptionChunkSizeInBytes = encryptionChunkSizeInBytes;
        }

        /// <summary> Modulus of the encryption key. </summary>
        public string KeyModulus { get; set; }
        /// <summary> Exponent of the encryption key. </summary>
        public string KeyExponent { get; set; }
        /// <summary> The maximum byte size that can be encrypted by the key. For a key size larger than the size, break into chunks and encrypt each chunk, append each encrypted chunk with : to mark the end of the chunk. </summary>
        public int EncryptionChunkSizeInBytes { get; set; }
    }
}
