// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.HybridData.Models
{
    public partial class HybridDataEncryptionKey : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("keyModulus"u8);
            writer.WriteStringValue(KeyModulus);
            writer.WritePropertyName("keyExponent"u8);
            writer.WriteStringValue(KeyExponent);
            writer.WritePropertyName("encryptionChunkSizeInBytes"u8);
            writer.WriteNumberValue(EncryptionChunkSizeInBytes);
            writer.WriteEndObject();
        }

        internal static HybridDataEncryptionKey DeserializeHybridDataEncryptionKey(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string keyModulus = default;
            string keyExponent = default;
            int encryptionChunkSizeInBytes = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("keyModulus"u8))
                {
                    keyModulus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("keyExponent"u8))
                {
                    keyExponent = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("encryptionChunkSizeInBytes"u8))
                {
                    encryptionChunkSizeInBytes = property.Value.GetInt32();
                    continue;
                }
            }
            return new HybridDataEncryptionKey(keyModulus, keyExponent, encryptionChunkSizeInBytes);
        }
    }
}
