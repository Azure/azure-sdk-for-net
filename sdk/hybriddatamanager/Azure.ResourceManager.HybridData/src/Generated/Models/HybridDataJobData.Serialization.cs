// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.HybridData.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.HybridData
{
    public partial class HybridDataJobData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("status"u8);
            writer.WriteStringValue(Status.ToSerialString());
            writer.WritePropertyName("startTime"u8);
            writer.WriteStringValue(StartOn, "O");
            if (Optional.IsDefined(EndOn))
            {
                writer.WritePropertyName("endTime"u8);
                writer.WriteStringValue(EndOn.Value, "O");
            }
            if (Optional.IsDefined(Error))
            {
                writer.WritePropertyName("error"u8);
                writer.WriteObjectValue(Error);
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            writer.WritePropertyName("isCancellable"u8);
            writer.WriteStringValue(IsCancellable.ToSerialString());
            if (Optional.IsDefined(BytesProcessed))
            {
                writer.WritePropertyName("bytesProcessed"u8);
                writer.WriteNumberValue(BytesProcessed.Value);
            }
            if (Optional.IsDefined(ItemsProcessed))
            {
                writer.WritePropertyName("itemsProcessed"u8);
                writer.WriteNumberValue(ItemsProcessed.Value);
            }
            if (Optional.IsDefined(TotalBytesToProcess))
            {
                writer.WritePropertyName("totalBytesToProcess"u8);
                writer.WriteNumberValue(TotalBytesToProcess.Value);
            }
            if (Optional.IsDefined(TotalItemsToProcess))
            {
                writer.WritePropertyName("totalItemsToProcess"u8);
                writer.WriteNumberValue(TotalItemsToProcess.Value);
            }
            if (Optional.IsDefined(Details))
            {
                writer.WritePropertyName("details"u8);
                writer.WriteObjectValue(Details);
            }
            if (Optional.IsDefined(DataSourceName))
            {
                writer.WritePropertyName("dataSourceName"u8);
                writer.WriteStringValue(DataSourceName);
            }
            if (Optional.IsDefined(DataSinkName))
            {
                writer.WritePropertyName("dataSinkName"u8);
                writer.WriteStringValue(DataSinkName);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static HybridDataJobData DeserializeHybridDataJobData(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            HybridDataJobStatus status = default;
            DateTimeOffset startTime = default;
            Optional<DateTimeOffset> endTime = default;
            Optional<HybridDataJobTopLevelError> error = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            JobCancellationSetting isCancellable = default;
            Optional<long> bytesProcessed = default;
            Optional<long> itemsProcessed = default;
            Optional<long> totalBytesToProcess = default;
            Optional<long> totalItemsToProcess = default;
            Optional<HybridDataJobDetails> details = default;
            Optional<string> dataSourceName = default;
            Optional<string> dataSinkName = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("status"u8))
                {
                    status = property.Value.GetString().ToHybridDataJobStatus();
                    continue;
                }
                if (property.NameEquals("startTime"u8))
                {
                    startTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("endTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    endTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("error"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    error = HybridDataJobTopLevelError.DeserializeHybridDataJobTopLevelError(property.Value);
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("isCancellable"u8))
                        {
                            isCancellable = property0.Value.GetString().ToJobCancellationSetting();
                            continue;
                        }
                        if (property0.NameEquals("bytesProcessed"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            bytesProcessed = property0.Value.GetInt64();
                            continue;
                        }
                        if (property0.NameEquals("itemsProcessed"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            itemsProcessed = property0.Value.GetInt64();
                            continue;
                        }
                        if (property0.NameEquals("totalBytesToProcess"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            totalBytesToProcess = property0.Value.GetInt64();
                            continue;
                        }
                        if (property0.NameEquals("totalItemsToProcess"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            totalItemsToProcess = property0.Value.GetInt64();
                            continue;
                        }
                        if (property0.NameEquals("details"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            details = HybridDataJobDetails.DeserializeHybridDataJobDetails(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("dataSourceName"u8))
                        {
                            dataSourceName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("dataSinkName"u8))
                        {
                            dataSinkName = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new HybridDataJobData(id, name, type, systemData.Value, status, startTime, Optional.ToNullable(endTime), error.Value, isCancellable, Optional.ToNullable(bytesProcessed), Optional.ToNullable(itemsProcessed), Optional.ToNullable(totalBytesToProcess), Optional.ToNullable(totalItemsToProcess), details.Value, dataSourceName.Value, dataSinkName.Value);
        }
    }
}
