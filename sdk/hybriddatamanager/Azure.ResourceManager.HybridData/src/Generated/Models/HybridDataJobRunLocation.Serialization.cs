// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.HybridData.Models
{
    internal static partial class HybridDataJobRunLocationExtensions
    {
        public static string ToSerialString(this HybridDataJobRunLocation value) => value switch
        {
            HybridDataJobRunLocation.None => "none",
            HybridDataJobRunLocation.AustraliaEast => "australiaeast",
            HybridDataJobRunLocation.AustraliaSoutheast => "australiasoutheast",
            HybridDataJobRunLocation.BrazilSouth => "brazilsouth",
            HybridDataJobRunLocation.CanadaCentral => "canadacentral",
            HybridDataJobRunLocation.CanadaEast => "canadaeast",
            HybridDataJobRunLocation.CentralIndia => "centralindia",
            HybridDataJobRunLocation.CentralUS => "centralus",
            HybridDataJobRunLocation.EastAsia => "eastasia",
            HybridDataJobRunLocation.EastUS => "eastus",
            HybridDataJobRunLocation.EastUS2 => "eastus2",
            HybridDataJobRunLocation.JapanEast => "japaneast",
            HybridDataJobRunLocation.JapanWest => "japanwest",
            HybridDataJobRunLocation.KoreaCentral => "koreacentral",
            HybridDataJobRunLocation.KoreaSouth => "koreasouth",
            HybridDataJobRunLocation.SoutheastAsia => "southeastasia",
            HybridDataJobRunLocation.SouthCentralUS => "southcentralus",
            HybridDataJobRunLocation.SouthIndia => "southindia",
            HybridDataJobRunLocation.NorthCentralUS => "northcentralus",
            HybridDataJobRunLocation.NorthEurope => "northeurope",
            HybridDataJobRunLocation.UKSouth => "uksouth",
            HybridDataJobRunLocation.UKWest => "ukwest",
            HybridDataJobRunLocation.WestCentralUS => "westcentralus",
            HybridDataJobRunLocation.WestEurope => "westeurope",
            HybridDataJobRunLocation.WestIndia => "westindia",
            HybridDataJobRunLocation.WestUS => "westus",
            HybridDataJobRunLocation.WestUS2 => "westus2",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown HybridDataJobRunLocation value.")
        };

        public static HybridDataJobRunLocation ToHybridDataJobRunLocation(this string value)
        {
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "none")) return HybridDataJobRunLocation.None;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "australiaeast")) return HybridDataJobRunLocation.AustraliaEast;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "australiasoutheast")) return HybridDataJobRunLocation.AustraliaSoutheast;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "brazilsouth")) return HybridDataJobRunLocation.BrazilSouth;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "canadacentral")) return HybridDataJobRunLocation.CanadaCentral;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "canadaeast")) return HybridDataJobRunLocation.CanadaEast;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "centralindia")) return HybridDataJobRunLocation.CentralIndia;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "centralus")) return HybridDataJobRunLocation.CentralUS;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "eastasia")) return HybridDataJobRunLocation.EastAsia;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "eastus")) return HybridDataJobRunLocation.EastUS;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "eastus2")) return HybridDataJobRunLocation.EastUS2;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "japaneast")) return HybridDataJobRunLocation.JapanEast;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "japanwest")) return HybridDataJobRunLocation.JapanWest;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "koreacentral")) return HybridDataJobRunLocation.KoreaCentral;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "koreasouth")) return HybridDataJobRunLocation.KoreaSouth;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "southeastasia")) return HybridDataJobRunLocation.SoutheastAsia;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "southcentralus")) return HybridDataJobRunLocation.SouthCentralUS;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "southindia")) return HybridDataJobRunLocation.SouthIndia;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "northcentralus")) return HybridDataJobRunLocation.NorthCentralUS;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "northeurope")) return HybridDataJobRunLocation.NorthEurope;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "uksouth")) return HybridDataJobRunLocation.UKSouth;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "ukwest")) return HybridDataJobRunLocation.UKWest;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "westcentralus")) return HybridDataJobRunLocation.WestCentralUS;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "westeurope")) return HybridDataJobRunLocation.WestEurope;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "westindia")) return HybridDataJobRunLocation.WestIndia;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "westus")) return HybridDataJobRunLocation.WestUS;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "westus2")) return HybridDataJobRunLocation.WestUS2;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown HybridDataJobRunLocation value.");
        }
    }
}
