// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.HybridData.Models
{
    internal static partial class HybridDataJobRunLocationExtensions
    {
        public static string ToSerialString(this HybridDataJobRunLocation value) => value switch
        {
            HybridDataJobRunLocation.None => "none",
            HybridDataJobRunLocation.AustraliaEast => "australiaeast",
            HybridDataJobRunLocation.AustraliaSoutheast => "australiasoutheast",
            HybridDataJobRunLocation.BrazilSouth => "brazilsouth",
            HybridDataJobRunLocation.CanadaCentral => "canadacentral",
            HybridDataJobRunLocation.CanadaEast => "canadaeast",
            HybridDataJobRunLocation.CentralIndia => "centralindia",
            HybridDataJobRunLocation.CentralUS => "centralus",
            HybridDataJobRunLocation.EastAsia => "eastasia",
            HybridDataJobRunLocation.EastUS => "eastus",
            HybridDataJobRunLocation.EastUS2 => "eastus2",
            HybridDataJobRunLocation.JapanEast => "japaneast",
            HybridDataJobRunLocation.JapanWest => "japanwest",
            HybridDataJobRunLocation.KoreaCentral => "koreacentral",
            HybridDataJobRunLocation.KoreaSouth => "koreasouth",
            HybridDataJobRunLocation.SoutheastAsia => "southeastasia",
            HybridDataJobRunLocation.SouthCentralUS => "southcentralus",
            HybridDataJobRunLocation.SouthIndia => "southindia",
            HybridDataJobRunLocation.NorthCentralUS => "northcentralus",
            HybridDataJobRunLocation.NorthEurope => "northeurope",
            HybridDataJobRunLocation.UKSouth => "uksouth",
            HybridDataJobRunLocation.UKWest => "ukwest",
            HybridDataJobRunLocation.WestCentralUS => "westcentralus",
            HybridDataJobRunLocation.WestEurope => "westeurope",
            HybridDataJobRunLocation.WestIndia => "westindia",
            HybridDataJobRunLocation.WestUS => "westus",
            HybridDataJobRunLocation.WestUS2 => "westus2",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown HybridDataJobRunLocation value.")
        };

        public static HybridDataJobRunLocation ToHybridDataJobRunLocation(this string value)
        {
            if (string.Equals(value, "none", StringComparison.InvariantCultureIgnoreCase)) return HybridDataJobRunLocation.None;
            if (string.Equals(value, "australiaeast", StringComparison.InvariantCultureIgnoreCase)) return HybridDataJobRunLocation.AustraliaEast;
            if (string.Equals(value, "australiasoutheast", StringComparison.InvariantCultureIgnoreCase)) return HybridDataJobRunLocation.AustraliaSoutheast;
            if (string.Equals(value, "brazilsouth", StringComparison.InvariantCultureIgnoreCase)) return HybridDataJobRunLocation.BrazilSouth;
            if (string.Equals(value, "canadacentral", StringComparison.InvariantCultureIgnoreCase)) return HybridDataJobRunLocation.CanadaCentral;
            if (string.Equals(value, "canadaeast", StringComparison.InvariantCultureIgnoreCase)) return HybridDataJobRunLocation.CanadaEast;
            if (string.Equals(value, "centralindia", StringComparison.InvariantCultureIgnoreCase)) return HybridDataJobRunLocation.CentralIndia;
            if (string.Equals(value, "centralus", StringComparison.InvariantCultureIgnoreCase)) return HybridDataJobRunLocation.CentralUS;
            if (string.Equals(value, "eastasia", StringComparison.InvariantCultureIgnoreCase)) return HybridDataJobRunLocation.EastAsia;
            if (string.Equals(value, "eastus", StringComparison.InvariantCultureIgnoreCase)) return HybridDataJobRunLocation.EastUS;
            if (string.Equals(value, "eastus2", StringComparison.InvariantCultureIgnoreCase)) return HybridDataJobRunLocation.EastUS2;
            if (string.Equals(value, "japaneast", StringComparison.InvariantCultureIgnoreCase)) return HybridDataJobRunLocation.JapanEast;
            if (string.Equals(value, "japanwest", StringComparison.InvariantCultureIgnoreCase)) return HybridDataJobRunLocation.JapanWest;
            if (string.Equals(value, "koreacentral", StringComparison.InvariantCultureIgnoreCase)) return HybridDataJobRunLocation.KoreaCentral;
            if (string.Equals(value, "koreasouth", StringComparison.InvariantCultureIgnoreCase)) return HybridDataJobRunLocation.KoreaSouth;
            if (string.Equals(value, "southeastasia", StringComparison.InvariantCultureIgnoreCase)) return HybridDataJobRunLocation.SoutheastAsia;
            if (string.Equals(value, "southcentralus", StringComparison.InvariantCultureIgnoreCase)) return HybridDataJobRunLocation.SouthCentralUS;
            if (string.Equals(value, "southindia", StringComparison.InvariantCultureIgnoreCase)) return HybridDataJobRunLocation.SouthIndia;
            if (string.Equals(value, "northcentralus", StringComparison.InvariantCultureIgnoreCase)) return HybridDataJobRunLocation.NorthCentralUS;
            if (string.Equals(value, "northeurope", StringComparison.InvariantCultureIgnoreCase)) return HybridDataJobRunLocation.NorthEurope;
            if (string.Equals(value, "uksouth", StringComparison.InvariantCultureIgnoreCase)) return HybridDataJobRunLocation.UKSouth;
            if (string.Equals(value, "ukwest", StringComparison.InvariantCultureIgnoreCase)) return HybridDataJobRunLocation.UKWest;
            if (string.Equals(value, "westcentralus", StringComparison.InvariantCultureIgnoreCase)) return HybridDataJobRunLocation.WestCentralUS;
            if (string.Equals(value, "westeurope", StringComparison.InvariantCultureIgnoreCase)) return HybridDataJobRunLocation.WestEurope;
            if (string.Equals(value, "westindia", StringComparison.InvariantCultureIgnoreCase)) return HybridDataJobRunLocation.WestIndia;
            if (string.Equals(value, "westus", StringComparison.InvariantCultureIgnoreCase)) return HybridDataJobRunLocation.WestUS;
            if (string.Equals(value, "westus2", StringComparison.InvariantCultureIgnoreCase)) return HybridDataJobRunLocation.WestUS2;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown HybridDataJobRunLocation value.");
        }
    }
}
