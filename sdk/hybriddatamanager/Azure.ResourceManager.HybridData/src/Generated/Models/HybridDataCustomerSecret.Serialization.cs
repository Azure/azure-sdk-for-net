// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.HybridData.Models
{
    public partial class HybridDataCustomerSecret : IUtf8JsonSerializable, Core.IModelSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((Core.IModelSerializable)this).Serialize(writer, new Core.Serialization.SerializableOptions());

        void Core.IModelSerializable.Serialize(Utf8JsonWriter writer, Core.Serialization.SerializableOptions options)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("keyIdentifier"u8);
            writer.WriteStringValue(KeyIdentifier);
            writer.WritePropertyName("keyValue"u8);
            writer.WriteStringValue(KeyValue);
            writer.WritePropertyName("algorithm"u8);
            writer.WriteStringValue(Algorithm.ToSerialString());
            writer.WriteEndObject();
        }

        internal static HybridDataCustomerSecret DeserializeHybridDataCustomerSecret(JsonElement element, Core.Serialization.SerializableOptions options = default)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string keyIdentifier = default;
            string keyValue = default;
            SupportedEncryptionAlgorithm algorithm = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("keyIdentifier"u8))
                {
                    keyIdentifier = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("keyValue"u8))
                {
                    keyValue = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("algorithm"u8))
                {
                    algorithm = property.Value.GetString().ToSupportedEncryptionAlgorithm();
                    continue;
                }
            }
            return new HybridDataCustomerSecret(keyIdentifier, keyValue, algorithm);
        }
    }
}
