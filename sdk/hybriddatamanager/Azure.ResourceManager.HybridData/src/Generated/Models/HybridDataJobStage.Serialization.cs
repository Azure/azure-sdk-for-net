// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.HybridData.Models
{
    public partial class HybridDataJobStage : IUtf8JsonSerializable, Core.IModelSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((Core.IModelSerializable)this).Serialize(writer, new Core.Serialization.SerializableOptions());

        void Core.IModelSerializable.Serialize(Utf8JsonWriter writer, Core.Serialization.SerializableOptions options)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(StageName))
            {
                writer.WritePropertyName("stageName"u8);
                writer.WriteStringValue(StageName);
            }
            writer.WritePropertyName("stageStatus"u8);
            writer.WriteStringValue(StageStatus.ToSerialString());
            if (Optional.IsDefined(JobStageDetails))
            {
                writer.WritePropertyName("jobStageDetails"u8);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(JobStageDetails);
#else
                JsonSerializer.Serialize(writer, JsonDocument.Parse(JobStageDetails.ToString()).RootElement);
#endif
            }
            if (Optional.IsCollectionDefined(ErrorDetails))
            {
                writer.WritePropertyName("errorDetails"u8);
                writer.WriteStartArray();
                foreach (var item in ErrorDetails)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static HybridDataJobStage DeserializeHybridDataJobStage(JsonElement element, Core.Serialization.SerializableOptions options = default)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> stageName = default;
            HybridDataJobStatus stageStatus = default;
            Optional<BinaryData> jobStageDetails = default;
            Optional<IList<HybridDataJobErrorDetails>> errorDetails = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("stageName"u8))
                {
                    stageName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("stageStatus"u8))
                {
                    stageStatus = property.Value.GetString().ToHybridDataJobStatus();
                    continue;
                }
                if (property.NameEquals("jobStageDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    jobStageDetails = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("errorDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<HybridDataJobErrorDetails> array = new List<HybridDataJobErrorDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(HybridDataJobErrorDetails.DeserializeHybridDataJobErrorDetails(item));
                    }
                    errorDetails = array;
                    continue;
                }
            }
            return new HybridDataJobStage(stageName.Value, stageStatus, jobStageDetails.Value, Optional.ToList(errorDetails));
        }
    }
}
