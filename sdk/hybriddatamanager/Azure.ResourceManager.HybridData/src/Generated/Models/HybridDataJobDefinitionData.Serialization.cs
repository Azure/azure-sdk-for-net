// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.HybridData.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.HybridData
{
    public partial class HybridDataJobDefinitionData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            writer.WritePropertyName("dataSourceId"u8);
            writer.WriteStringValue(DataSourceId);
            writer.WritePropertyName("dataSinkId"u8);
            writer.WriteStringValue(DataSinkId);
            if (Optional.IsCollectionDefined(Schedules))
            {
                writer.WritePropertyName("schedules"u8);
                writer.WriteStartArray();
                foreach (var item in Schedules)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("state"u8);
            writer.WriteStringValue(State.ToSerialString());
            if (Optional.IsDefined(LastModifiedOn))
            {
                writer.WritePropertyName("lastModifiedTime"u8);
                writer.WriteStringValue(LastModifiedOn.Value, "O");
            }
            if (Optional.IsDefined(RunLocation))
            {
                writer.WritePropertyName("runLocation"u8);
                writer.WriteStringValue(RunLocation.Value.ToSerialString());
            }
            if (Optional.IsDefined(UserConfirmation))
            {
                writer.WritePropertyName("userConfirmation"u8);
                writer.WriteStringValue(UserConfirmation.Value.ToSerialString());
            }
            if (Optional.IsDefined(DataServiceInput))
            {
                writer.WritePropertyName("dataServiceInput"u8);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(DataServiceInput);
#else
                JsonSerializer.Serialize(writer, JsonDocument.Parse(DataServiceInput.ToString()).RootElement);
#endif
            }
            if (Optional.IsCollectionDefined(CustomerSecrets))
            {
                writer.WritePropertyName("customerSecrets"u8);
                writer.WriteStartArray();
                foreach (var item in CustomerSecrets)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static HybridDataJobDefinitionData DeserializeHybridDataJobDefinitionData(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            string dataSourceId = default;
            string dataSinkId = default;
            Optional<IList<HybridDataJobRunSchedule>> schedules = default;
            HybridDataState state = default;
            Optional<DateTimeOffset> lastModifiedTime = default;
            Optional<HybridDataJobRunLocation> runLocation = default;
            Optional<UserConfirmationSetting> userConfirmation = default;
            Optional<BinaryData> dataServiceInput = default;
            Optional<IList<HybridDataCustomerSecret>> customerSecrets = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("dataSourceId"u8))
                        {
                            dataSourceId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("dataSinkId"u8))
                        {
                            dataSinkId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("schedules"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<HybridDataJobRunSchedule> array = new List<HybridDataJobRunSchedule>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(HybridDataJobRunSchedule.DeserializeHybridDataJobRunSchedule(item));
                            }
                            schedules = array;
                            continue;
                        }
                        if (property0.NameEquals("state"u8))
                        {
                            state = property0.Value.GetString().ToHybridDataState();
                            continue;
                        }
                        if (property0.NameEquals("lastModifiedTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            lastModifiedTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("runLocation"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            runLocation = property0.Value.GetString().ToHybridDataJobRunLocation();
                            continue;
                        }
                        if (property0.NameEquals("userConfirmation"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            userConfirmation = property0.Value.GetString().ToUserConfirmationSetting();
                            continue;
                        }
                        if (property0.NameEquals("dataServiceInput"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            dataServiceInput = BinaryData.FromString(property0.Value.GetRawText());
                            continue;
                        }
                        if (property0.NameEquals("customerSecrets"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<HybridDataCustomerSecret> array = new List<HybridDataCustomerSecret>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(HybridDataCustomerSecret.DeserializeHybridDataCustomerSecret(item));
                            }
                            customerSecrets = array;
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new HybridDataJobDefinitionData(id, name, type, systemData.Value, dataSourceId, dataSinkId, Optional.ToList(schedules), state, Optional.ToNullable(lastModifiedTime), Optional.ToNullable(runLocation), Optional.ToNullable(userConfirmation), dataServiceInput.Value, Optional.ToList(customerSecrets));
        }
    }
}
