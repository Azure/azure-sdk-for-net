// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.HybridData.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.HybridData
{
    /// <summary>
    /// A Class representing a DataManager along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier" /> you can construct a <see cref="DataManagerResource" />
    /// from an instance of <see cref="ArmClient" /> using the GetDataManagerResource method.
    /// Otherwise you can get one from its parent resource <see cref="ResourceGroupResource" /> using the GetDataManager method.
    /// </summary>
    public partial class DataManagerResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="DataManagerResource"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string dataManagerName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _dataManagerClientDiagnostics;
        private readonly DataManagersRestOperations _dataManagerRestClient;
        private readonly ClientDiagnostics _hybridDataJobDefinitionJobDefinitionsClientDiagnostics;
        private readonly JobDefinitionsRestOperations _hybridDataJobDefinitionJobDefinitionsRestClient;
        private readonly ClientDiagnostics _hybridDataJobJobsClientDiagnostics;
        private readonly JobsRestOperations _hybridDataJobJobsRestClient;
        private readonly DataManagerData _data;

        /// <summary> Initializes a new instance of the <see cref="DataManagerResource"/> class for mocking. </summary>
        protected DataManagerResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "DataManagerResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal DataManagerResource(ArmClient client, DataManagerData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="DataManagerResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal DataManagerResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _dataManagerClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.HybridData", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string dataManagerApiVersion);
            _dataManagerRestClient = new DataManagersRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, dataManagerApiVersion);
            _hybridDataJobDefinitionJobDefinitionsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.HybridData", HybridDataJobDefinitionResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(HybridDataJobDefinitionResource.ResourceType, out string hybridDataJobDefinitionJobDefinitionsApiVersion);
            _hybridDataJobDefinitionJobDefinitionsRestClient = new JobDefinitionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, hybridDataJobDefinitionJobDefinitionsApiVersion);
            _hybridDataJobJobsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.HybridData", HybridDataJobResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(HybridDataJobResource.ResourceType, out string hybridDataJobJobsApiVersion);
            _hybridDataJobJobsRestClient = new JobsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, hybridDataJobJobsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.HybridData/dataManagers";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual DataManagerData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets a collection of DataServiceResources in the DataManager. </summary>
        /// <returns> An object representing collection of DataServiceResources and their operations over a DataServiceResource. </returns>
        public virtual DataServiceCollection GetDataServices()
        {
            return GetCachedClient(Client => new DataServiceCollection(Client, Id));
        }

        /// <summary>
        /// Gets the data service that matches the data service name given.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}
        /// Operation Id: DataServices_Get
        /// </summary>
        /// <param name="dataServiceName"> The name of the data service that is being queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dataServiceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dataServiceName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<DataServiceResource>> GetDataServiceAsync(string dataServiceName, CancellationToken cancellationToken = default)
        {
            return await GetDataServices().GetAsync(dataServiceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the data service that matches the data service name given.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}
        /// Operation Id: DataServices_Get
        /// </summary>
        /// <param name="dataServiceName"> The name of the data service that is being queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dataServiceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dataServiceName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<DataServiceResource> GetDataService(string dataServiceName, CancellationToken cancellationToken = default)
        {
            return GetDataServices().Get(dataServiceName, cancellationToken);
        }

        /// <summary> Gets a collection of DataStoreResources in the DataManager. </summary>
        /// <returns> An object representing collection of DataStoreResources and their operations over a DataStoreResource. </returns>
        public virtual DataStoreCollection GetDataStores()
        {
            return GetCachedClient(Client => new DataStoreCollection(Client, Id));
        }

        /// <summary>
        /// This method gets the data store/repository by name.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStores/{dataStoreName}
        /// Operation Id: DataStores_Get
        /// </summary>
        /// <param name="dataStoreName"> The data store/repository name queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dataStoreName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dataStoreName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<DataStoreResource>> GetDataStoreAsync(string dataStoreName, CancellationToken cancellationToken = default)
        {
            return await GetDataStores().GetAsync(dataStoreName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// This method gets the data store/repository by name.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStores/{dataStoreName}
        /// Operation Id: DataStores_Get
        /// </summary>
        /// <param name="dataStoreName"> The data store/repository name queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dataStoreName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dataStoreName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<DataStoreResource> GetDataStore(string dataStoreName, CancellationToken cancellationToken = default)
        {
            return GetDataStores().Get(dataStoreName, cancellationToken);
        }

        /// <summary> Gets a collection of DataStoreTypeResources in the DataManager. </summary>
        /// <returns> An object representing collection of DataStoreTypeResources and their operations over a DataStoreTypeResource. </returns>
        public virtual DataStoreTypeCollection GetDataStoreTypes()
        {
            return GetCachedClient(Client => new DataStoreTypeCollection(Client, Id));
        }

        /// <summary>
        /// Gets the data store/repository type given its name.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStoreTypes/{dataStoreTypeName}
        /// Operation Id: DataStoreTypes_Get
        /// </summary>
        /// <param name="dataStoreTypeName"> The data store/repository type name for which details are needed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dataStoreTypeName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dataStoreTypeName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<DataStoreTypeResource>> GetDataStoreTypeAsync(string dataStoreTypeName, CancellationToken cancellationToken = default)
        {
            return await GetDataStoreTypes().GetAsync(dataStoreTypeName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the data store/repository type given its name.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStoreTypes/{dataStoreTypeName}
        /// Operation Id: DataStoreTypes_Get
        /// </summary>
        /// <param name="dataStoreTypeName"> The data store/repository type name for which details are needed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dataStoreTypeName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dataStoreTypeName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<DataStoreTypeResource> GetDataStoreType(string dataStoreTypeName, CancellationToken cancellationToken = default)
        {
            return GetDataStoreTypes().Get(dataStoreTypeName, cancellationToken);
        }

        /// <summary> Gets a collection of HybridDataPublicKeyResources in the DataManager. </summary>
        /// <returns> An object representing collection of HybridDataPublicKeyResources and their operations over a HybridDataPublicKeyResource. </returns>
        public virtual HybridDataPublicKeyCollection GetHybridDataPublicKeys()
        {
            return GetCachedClient(Client => new HybridDataPublicKeyCollection(Client, Id));
        }

        /// <summary>
        /// This method gets the public keys.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/publicKeys/{publicKeyName}
        /// Operation Id: PublicKeys_Get
        /// </summary>
        /// <param name="publicKeyName"> Name of the public key. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="publicKeyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="publicKeyName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<HybridDataPublicKeyResource>> GetHybridDataPublicKeyAsync(string publicKeyName, CancellationToken cancellationToken = default)
        {
            return await GetHybridDataPublicKeys().GetAsync(publicKeyName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// This method gets the public keys.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/publicKeys/{publicKeyName}
        /// Operation Id: PublicKeys_Get
        /// </summary>
        /// <param name="publicKeyName"> Name of the public key. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="publicKeyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="publicKeyName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<HybridDataPublicKeyResource> GetHybridDataPublicKey(string publicKeyName, CancellationToken cancellationToken = default)
        {
            return GetHybridDataPublicKeys().Get(publicKeyName, cancellationToken);
        }

        /// <summary>
        /// Gets information about the specified data manager resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}
        /// Operation Id: DataManagers_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<DataManagerResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _dataManagerClientDiagnostics.CreateScope("DataManagerResource.Get");
            scope.Start();
            try
            {
                var response = await _dataManagerRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DataManagerResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets information about the specified data manager resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}
        /// Operation Id: DataManagers_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DataManagerResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _dataManagerClientDiagnostics.CreateScope("DataManagerResource.Get");
            scope.Start();
            try
            {
                var response = _dataManagerRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DataManagerResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes a data manager resource in Microsoft Azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}
        /// Operation Id: DataManagers_Delete
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _dataManagerClientDiagnostics.CreateScope("DataManagerResource.Delete");
            scope.Start();
            try
            {
                var response = await _dataManagerRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new HybridDataArmOperation(_dataManagerClientDiagnostics, Pipeline, _dataManagerRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes a data manager resource in Microsoft Azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}
        /// Operation Id: DataManagers_Delete
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation Delete(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _dataManagerClientDiagnostics.CreateScope("DataManagerResource.Delete");
            scope.Start();
            try
            {
                var response = _dataManagerRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                var operation = new HybridDataArmOperation(_dataManagerClientDiagnostics, Pipeline, _dataManagerRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Updates the properties of an existing data manager resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}
        /// Operation Id: DataManagers_Update
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="patch"> Data manager resource details from request body. </param>
        /// <param name="ifMatch"> Defines the If-Match condition. The patch will be performed only if the ETag of the data manager resource on the server matches this value. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="patch"/> is null. </exception>
        public virtual async Task<ArmOperation<DataManagerResource>> UpdateAsync(WaitUntil waitUntil, DataManagerPatch patch, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _dataManagerClientDiagnostics.CreateScope("DataManagerResource.Update");
            scope.Start();
            try
            {
                var response = await _dataManagerRestClient.UpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patch, ifMatch, cancellationToken).ConfigureAwait(false);
                var operation = new HybridDataArmOperation<DataManagerResource>(new DataManagerOperationSource(Client), _dataManagerClientDiagnostics, Pipeline, _dataManagerRestClient.CreateUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patch, ifMatch).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Updates the properties of an existing data manager resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}
        /// Operation Id: DataManagers_Update
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="patch"> Data manager resource details from request body. </param>
        /// <param name="ifMatch"> Defines the If-Match condition. The patch will be performed only if the ETag of the data manager resource on the server matches this value. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="patch"/> is null. </exception>
        public virtual ArmOperation<DataManagerResource> Update(WaitUntil waitUntil, DataManagerPatch patch, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _dataManagerClientDiagnostics.CreateScope("DataManagerResource.Update");
            scope.Start();
            try
            {
                var response = _dataManagerRestClient.Update(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patch, ifMatch, cancellationToken);
                var operation = new HybridDataArmOperation<DataManagerResource>(new DataManagerOperationSource(Client), _dataManagerClientDiagnostics, Pipeline, _dataManagerRestClient.CreateUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patch, ifMatch).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// This method gets all the job definitions of the given data manager resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/jobDefinitions
        /// Operation Id: JobDefinitions_ListByDataManager
        /// </summary>
        /// <param name="filter"> OData Filter options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="HybridDataJobDefinitionResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<HybridDataJobDefinitionResource> GetJobDefinitionsAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<HybridDataJobDefinitionResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _hybridDataJobDefinitionJobDefinitionsClientDiagnostics.CreateScope("DataManagerResource.GetJobDefinitions");
                scope.Start();
                try
                {
                    var response = await _hybridDataJobDefinitionJobDefinitionsRestClient.ListByDataManagerAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new HybridDataJobDefinitionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<HybridDataJobDefinitionResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _hybridDataJobDefinitionJobDefinitionsClientDiagnostics.CreateScope("DataManagerResource.GetJobDefinitions");
                scope.Start();
                try
                {
                    var response = await _hybridDataJobDefinitionJobDefinitionsRestClient.ListByDataManagerNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new HybridDataJobDefinitionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// This method gets all the job definitions of the given data manager resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/jobDefinitions
        /// Operation Id: JobDefinitions_ListByDataManager
        /// </summary>
        /// <param name="filter"> OData Filter options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="HybridDataJobDefinitionResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<HybridDataJobDefinitionResource> GetJobDefinitions(string filter = null, CancellationToken cancellationToken = default)
        {
            Page<HybridDataJobDefinitionResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _hybridDataJobDefinitionJobDefinitionsClientDiagnostics.CreateScope("DataManagerResource.GetJobDefinitions");
                scope.Start();
                try
                {
                    var response = _hybridDataJobDefinitionJobDefinitionsRestClient.ListByDataManager(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new HybridDataJobDefinitionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<HybridDataJobDefinitionResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _hybridDataJobDefinitionJobDefinitionsClientDiagnostics.CreateScope("DataManagerResource.GetJobDefinitions");
                scope.Start();
                try
                {
                    var response = _hybridDataJobDefinitionJobDefinitionsRestClient.ListByDataManagerNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new HybridDataJobDefinitionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// This method gets all the jobs at the data manager resource level.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/jobs
        /// Operation Id: Jobs_ListByDataManager
        /// </summary>
        /// <param name="filter"> OData Filter options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="HybridDataJobResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<HybridDataJobResource> GetJobsAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<HybridDataJobResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _hybridDataJobJobsClientDiagnostics.CreateScope("DataManagerResource.GetJobs");
                scope.Start();
                try
                {
                    var response = await _hybridDataJobJobsRestClient.ListByDataManagerAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new HybridDataJobResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<HybridDataJobResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _hybridDataJobJobsClientDiagnostics.CreateScope("DataManagerResource.GetJobs");
                scope.Start();
                try
                {
                    var response = await _hybridDataJobJobsRestClient.ListByDataManagerNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new HybridDataJobResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// This method gets all the jobs at the data manager resource level.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/jobs
        /// Operation Id: Jobs_ListByDataManager
        /// </summary>
        /// <param name="filter"> OData Filter options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="HybridDataJobResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<HybridDataJobResource> GetJobs(string filter = null, CancellationToken cancellationToken = default)
        {
            Page<HybridDataJobResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _hybridDataJobJobsClientDiagnostics.CreateScope("DataManagerResource.GetJobs");
                scope.Start();
                try
                {
                    var response = _hybridDataJobJobsRestClient.ListByDataManager(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new HybridDataJobResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<HybridDataJobResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _hybridDataJobJobsClientDiagnostics.CreateScope("DataManagerResource.GetJobs");
                scope.Start();
                try
                {
                    var response = _hybridDataJobJobsRestClient.ListByDataManagerNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new HybridDataJobResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Add a tag to the current resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}
        /// Operation Id: DataManagers_Get
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="value"> The value for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> or <paramref name="value"/> is null. </exception>
        public virtual async Task<Response<DataManagerResource>> AddTagAsync(string key, string value, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));
            Argument.AssertNotNull(value, nameof(value));

            using var scope = _dataManagerClientDiagnostics.CreateScope("DataManagerResource.AddTag");
            scope.Start();
            try
            {
                if (await CanUseTagResourceAsync(cancellationToken: cancellationToken).ConfigureAwait(false))
                {
                    var originalTags = await GetTagResource().GetAsync(cancellationToken).ConfigureAwait(false);
                    originalTags.Value.Data.TagValues[key] = value;
                    await GetTagResource().CreateOrUpdateAsync(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalResponse = await _dataManagerRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(new DataManagerResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = (await GetAsync(cancellationToken: cancellationToken).ConfigureAwait(false)).Value.Data;
                    var patch = new DataManagerPatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags[key] = value;
                    var result = await UpdateAsync(WaitUntil.Completed, patch, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(result.Value, result.GetRawResponse());
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Add a tag to the current resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}
        /// Operation Id: DataManagers_Get
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="value"> The value for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> or <paramref name="value"/> is null. </exception>
        public virtual Response<DataManagerResource> AddTag(string key, string value, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));
            Argument.AssertNotNull(value, nameof(value));

            using var scope = _dataManagerClientDiagnostics.CreateScope("DataManagerResource.AddTag");
            scope.Start();
            try
            {
                if (CanUseTagResource(cancellationToken: cancellationToken))
                {
                    var originalTags = GetTagResource().Get(cancellationToken);
                    originalTags.Value.Data.TagValues[key] = value;
                    GetTagResource().CreateOrUpdate(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken);
                    var originalResponse = _dataManagerRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                    return Response.FromValue(new DataManagerResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = Get(cancellationToken: cancellationToken).Value.Data;
                    var patch = new DataManagerPatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags[key] = value;
                    var result = Update(WaitUntil.Completed, patch, cancellationToken: cancellationToken);
                    return Response.FromValue(result.Value, result.GetRawResponse());
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Replace the tags on the resource with the given set.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}
        /// Operation Id: DataManagers_Get
        /// </summary>
        /// <param name="tags"> The set of tags to use as replacement. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tags"/> is null. </exception>
        public virtual async Task<Response<DataManagerResource>> SetTagsAsync(IDictionary<string, string> tags, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tags, nameof(tags));

            using var scope = _dataManagerClientDiagnostics.CreateScope("DataManagerResource.SetTags");
            scope.Start();
            try
            {
                if (await CanUseTagResourceAsync(cancellationToken: cancellationToken).ConfigureAwait(false))
                {
                    await GetTagResource().DeleteAsync(WaitUntil.Completed, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalTags = await GetTagResource().GetAsync(cancellationToken).ConfigureAwait(false);
                    originalTags.Value.Data.TagValues.ReplaceWith(tags);
                    await GetTagResource().CreateOrUpdateAsync(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalResponse = await _dataManagerRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(new DataManagerResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = (await GetAsync(cancellationToken: cancellationToken).ConfigureAwait(false)).Value.Data;
                    var patch = new DataManagerPatch();
                    patch.Tags.ReplaceWith(tags);
                    var result = await UpdateAsync(WaitUntil.Completed, patch, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(result.Value, result.GetRawResponse());
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Replace the tags on the resource with the given set.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}
        /// Operation Id: DataManagers_Get
        /// </summary>
        /// <param name="tags"> The set of tags to use as replacement. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tags"/> is null. </exception>
        public virtual Response<DataManagerResource> SetTags(IDictionary<string, string> tags, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tags, nameof(tags));

            using var scope = _dataManagerClientDiagnostics.CreateScope("DataManagerResource.SetTags");
            scope.Start();
            try
            {
                if (CanUseTagResource(cancellationToken: cancellationToken))
                {
                    GetTagResource().Delete(WaitUntil.Completed, cancellationToken: cancellationToken);
                    var originalTags = GetTagResource().Get(cancellationToken);
                    originalTags.Value.Data.TagValues.ReplaceWith(tags);
                    GetTagResource().CreateOrUpdate(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken);
                    var originalResponse = _dataManagerRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                    return Response.FromValue(new DataManagerResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = Get(cancellationToken: cancellationToken).Value.Data;
                    var patch = new DataManagerPatch();
                    patch.Tags.ReplaceWith(tags);
                    var result = Update(WaitUntil.Completed, patch, cancellationToken: cancellationToken);
                    return Response.FromValue(result.Value, result.GetRawResponse());
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Removes a tag by key from the resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}
        /// Operation Id: DataManagers_Get
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> is null. </exception>
        public virtual async Task<Response<DataManagerResource>> RemoveTagAsync(string key, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));

            using var scope = _dataManagerClientDiagnostics.CreateScope("DataManagerResource.RemoveTag");
            scope.Start();
            try
            {
                if (await CanUseTagResourceAsync(cancellationToken: cancellationToken).ConfigureAwait(false))
                {
                    var originalTags = await GetTagResource().GetAsync(cancellationToken).ConfigureAwait(false);
                    originalTags.Value.Data.TagValues.Remove(key);
                    await GetTagResource().CreateOrUpdateAsync(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalResponse = await _dataManagerRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(new DataManagerResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = (await GetAsync(cancellationToken: cancellationToken).ConfigureAwait(false)).Value.Data;
                    var patch = new DataManagerPatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags.Remove(key);
                    var result = await UpdateAsync(WaitUntil.Completed, patch, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(result.Value, result.GetRawResponse());
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Removes a tag by key from the resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}
        /// Operation Id: DataManagers_Get
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> is null. </exception>
        public virtual Response<DataManagerResource> RemoveTag(string key, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));

            using var scope = _dataManagerClientDiagnostics.CreateScope("DataManagerResource.RemoveTag");
            scope.Start();
            try
            {
                if (CanUseTagResource(cancellationToken: cancellationToken))
                {
                    var originalTags = GetTagResource().Get(cancellationToken);
                    originalTags.Value.Data.TagValues.Remove(key);
                    GetTagResource().CreateOrUpdate(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken);
                    var originalResponse = _dataManagerRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                    return Response.FromValue(new DataManagerResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = Get(cancellationToken: cancellationToken).Value.Data;
                    var patch = new DataManagerPatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags.Remove(key);
                    var result = Update(WaitUntil.Completed, patch, cancellationToken: cancellationToken);
                    return Response.FromValue(result.Value, result.GetRawResponse());
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
