// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DelegatedNetwork
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DelegatedSubnetServiceOperations.
    /// </summary>
    public static partial class DelegatedSubnetServiceOperationsExtensions
    {
            /// <summary>
            /// Gets details about the specified dnc DelegatedSubnet Link.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource. It must be a minimum of 3 characters, and a
            /// maximum of 63.
            /// </param>
            public static DelegatedSubnet GetDetails(this IDelegatedSubnetServiceOperations operations, string resourceGroupName, string resourceName)
            {
                return operations.GetDetailsAsync(resourceGroupName, resourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets details about the specified dnc DelegatedSubnet Link.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource. It must be a minimum of 3 characters, and a
            /// maximum of 63.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DelegatedSubnet> GetDetailsAsync(this IDelegatedSubnetServiceOperations operations, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDetailsWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Put delegated subnet resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource. It must be a minimum of 3 characters, and a
            /// maximum of 63.
            /// </param>
            /// <param name='parameters'>
            /// Delegated subnet details.
            /// </param>
            public static DelegatedSubnet PutDetails(this IDelegatedSubnetServiceOperations operations, string resourceGroupName, string resourceName, DelegatedSubnet parameters)
            {
                return operations.PutDetailsAsync(resourceGroupName, resourceName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Put delegated subnet resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource. It must be a minimum of 3 characters, and a
            /// maximum of 63.
            /// </param>
            /// <param name='parameters'>
            /// Delegated subnet details.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DelegatedSubnet> PutDetailsAsync(this IDelegatedSubnetServiceOperations operations, string resourceGroupName, string resourceName, DelegatedSubnet parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutDetailsWithHttpMessagesAsync(resourceGroupName, resourceName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Patch delegated subnet resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource. It must be a minimum of 3 characters, and a
            /// maximum of 63.
            /// </param>
            /// <param name='parameters'>
            /// Delegated subnet details.
            /// </param>
            public static DelegatedSubnet PatchDetails(this IDelegatedSubnetServiceOperations operations, string resourceGroupName, string resourceName, ResourceUpdateParameters parameters)
            {
                return operations.PatchDetailsAsync(resourceGroupName, resourceName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Patch delegated subnet resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource. It must be a minimum of 3 characters, and a
            /// maximum of 63.
            /// </param>
            /// <param name='parameters'>
            /// Delegated subnet details.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DelegatedSubnet> PatchDetailsAsync(this IDelegatedSubnetServiceOperations operations, string resourceGroupName, string resourceName, ResourceUpdateParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchDetailsWithHttpMessagesAsync(resourceGroupName, resourceName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete dnc DelegatedSubnet.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource. It must be a minimum of 3 characters, and a
            /// maximum of 63.
            /// </param>
            /// <param name='forceDelete'>
            /// Force delete resource
            /// </param>
            public static void DeleteDetails(this IDelegatedSubnetServiceOperations operations, string resourceGroupName, string resourceName, bool? forceDelete = default(bool?))
            {
                operations.DeleteDetailsAsync(resourceGroupName, resourceName, forceDelete).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete dnc DelegatedSubnet.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource. It must be a minimum of 3 characters, and a
            /// maximum of 63.
            /// </param>
            /// <param name='forceDelete'>
            /// Force delete resource
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteDetailsAsync(this IDelegatedSubnetServiceOperations operations, string resourceGroupName, string resourceName, bool? forceDelete = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteDetailsWithHttpMessagesAsync(resourceGroupName, resourceName, forceDelete, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get all the DelegatedSubnets resources in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<DelegatedSubnet> ListBySubscription(this IDelegatedSubnetServiceOperations operations)
            {
                return operations.ListBySubscriptionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all the DelegatedSubnets resources in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DelegatedSubnet>> ListBySubscriptionAsync(this IDelegatedSubnetServiceOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all the DelegatedSubnets resources in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            public static IPage<DelegatedSubnet> ListByResourceGroup(this IDelegatedSubnetServiceOperations operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all the DelegatedSubnets resources in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DelegatedSubnet>> ListByResourceGroupAsync(this IDelegatedSubnetServiceOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Put delegated subnet resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource. It must be a minimum of 3 characters, and a
            /// maximum of 63.
            /// </param>
            /// <param name='parameters'>
            /// Delegated subnet details.
            /// </param>
            public static DelegatedSubnet BeginPutDetails(this IDelegatedSubnetServiceOperations operations, string resourceGroupName, string resourceName, DelegatedSubnet parameters)
            {
                return operations.BeginPutDetailsAsync(resourceGroupName, resourceName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Put delegated subnet resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource. It must be a minimum of 3 characters, and a
            /// maximum of 63.
            /// </param>
            /// <param name='parameters'>
            /// Delegated subnet details.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DelegatedSubnet> BeginPutDetailsAsync(this IDelegatedSubnetServiceOperations operations, string resourceGroupName, string resourceName, DelegatedSubnet parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginPutDetailsWithHttpMessagesAsync(resourceGroupName, resourceName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Patch delegated subnet resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource. It must be a minimum of 3 characters, and a
            /// maximum of 63.
            /// </param>
            /// <param name='parameters'>
            /// Delegated subnet details.
            /// </param>
            public static DelegatedSubnet BeginPatchDetails(this IDelegatedSubnetServiceOperations operations, string resourceGroupName, string resourceName, ResourceUpdateParameters parameters)
            {
                return operations.BeginPatchDetailsAsync(resourceGroupName, resourceName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Patch delegated subnet resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource. It must be a minimum of 3 characters, and a
            /// maximum of 63.
            /// </param>
            /// <param name='parameters'>
            /// Delegated subnet details.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DelegatedSubnet> BeginPatchDetailsAsync(this IDelegatedSubnetServiceOperations operations, string resourceGroupName, string resourceName, ResourceUpdateParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginPatchDetailsWithHttpMessagesAsync(resourceGroupName, resourceName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete dnc DelegatedSubnet.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource. It must be a minimum of 3 characters, and a
            /// maximum of 63.
            /// </param>
            /// <param name='forceDelete'>
            /// Force delete resource
            /// </param>
            public static void BeginDeleteDetails(this IDelegatedSubnetServiceOperations operations, string resourceGroupName, string resourceName, bool? forceDelete = default(bool?))
            {
                operations.BeginDeleteDetailsAsync(resourceGroupName, resourceName, forceDelete).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete dnc DelegatedSubnet.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource. It must be a minimum of 3 characters, and a
            /// maximum of 63.
            /// </param>
            /// <param name='forceDelete'>
            /// Force delete resource
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteDetailsAsync(this IDelegatedSubnetServiceOperations operations, string resourceGroupName, string resourceName, bool? forceDelete = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteDetailsWithHttpMessagesAsync(resourceGroupName, resourceName, forceDelete, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get all the DelegatedSubnets resources in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DelegatedSubnet> ListBySubscriptionNext(this IDelegatedSubnetServiceOperations operations, string nextPageLink)
            {
                return operations.ListBySubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all the DelegatedSubnets resources in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DelegatedSubnet>> ListBySubscriptionNextAsync(this IDelegatedSubnetServiceOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all the DelegatedSubnets resources in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DelegatedSubnet> ListByResourceGroupNext(this IDelegatedSubnetServiceOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all the DelegatedSubnets resources in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DelegatedSubnet>> ListByResourceGroupNextAsync(this IDelegatedSubnetServiceOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
