// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DelegatedNetwork.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Represents an instance of a orchestrator.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Orchestrator : OrchestratorResource
    {
        /// <summary>
        /// Initializes a new instance of the Orchestrator class.
        /// </summary>
        public Orchestrator()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Orchestrator class.
        /// </summary>
        /// <param name="controllerDetails">controller details</param>
        /// <param name="id">An identifier that represents the
        /// resource.</param>
        /// <param name="name">The name of the resource.</param>
        /// <param name="type">The type of resource.</param>
        /// <param name="location">Location of the resource.</param>
        /// <param name="identity">The identity of the orchestrator</param>
        /// <param name="tags">The resource tags.</param>
        /// <param name="resourceGuid">Resource guid.</param>
        /// <param name="provisioningState">The current state of
        /// orchestratorInstance resource. Possible values include: 'Deleting',
        /// 'Succeeded', 'Failed', 'Provisioning'</param>
        /// <param name="orchestratorAppId">AAD ID used with apiserver</param>
        /// <param name="orchestratorTenantId">TenantID of server App
        /// ID</param>
        /// <param name="clusterRootCA">RootCA certificate of kubernetes
        /// cluster base64 encoded</param>
        /// <param name="apiServerEndpoint">K8s APIServer url</param>
        public Orchestrator(ControllerDetails controllerDetails, string id = default(string), string name = default(string), string type = default(string), string location = default(string), OrchestratorIdentity identity = default(OrchestratorIdentity), IDictionary<string, string> tags = default(IDictionary<string, string>), string resourceGuid = default(string), string provisioningState = default(string), string orchestratorAppId = default(string), string orchestratorTenantId = default(string), string clusterRootCA = default(string), string apiServerEndpoint = default(string))
            : base(id, name, type, location, identity, tags)
        {
            ResourceGuid = resourceGuid;
            ProvisioningState = provisioningState;
            OrchestratorAppId = orchestratorAppId;
            OrchestratorTenantId = orchestratorTenantId;
            ClusterRootCA = clusterRootCA;
            ApiServerEndpoint = apiServerEndpoint;
            ControllerDetails = controllerDetails;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets resource guid.
        /// </summary>
        [JsonProperty(PropertyName = "properties.resourceGuid")]
        public string ResourceGuid { get; private set; }

        /// <summary>
        /// Gets the current state of orchestratorInstance resource. Possible
        /// values include: 'Deleting', 'Succeeded', 'Failed', 'Provisioning'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets AAD ID used with apiserver
        /// </summary>
        [JsonProperty(PropertyName = "properties.orchestratorAppId")]
        public string OrchestratorAppId { get; set; }

        /// <summary>
        /// Gets or sets tenantID of server App ID
        /// </summary>
        [JsonProperty(PropertyName = "properties.orchestratorTenantId")]
        public string OrchestratorTenantId { get; set; }

        /// <summary>
        /// Gets or sets rootCA certificate of kubernetes cluster base64
        /// encoded
        /// </summary>
        [JsonProperty(PropertyName = "properties.clusterRootCA")]
        public string ClusterRootCA { get; set; }

        /// <summary>
        /// Gets or sets k8s APIServer url
        /// </summary>
        [JsonProperty(PropertyName = "properties.apiServerEndpoint")]
        public string ApiServerEndpoint { get; set; }

        /// <summary>
        /// Gets or sets controller details
        /// </summary>
        [JsonProperty(PropertyName = "properties.controllerDetails")]
        public ControllerDetails ControllerDetails { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ControllerDetails == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ControllerDetails");
            }
        }
    }
}
