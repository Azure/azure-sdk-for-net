// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DelegatedNetwork
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ControllerOperations.
    /// </summary>
    public static partial class ControllerOperationsExtensions
    {
            /// <summary>
            /// Gets details about the specified dnc controller.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure Resource group of which a given DelegatedNetwork
            /// resource is part. This name must be at least 1 character in length, and no
            /// more than 90.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource. It must be a minimum of 3 characters, and a
            /// maximum of 63.
            /// </param>
            public static DelegatedController GetDetails(this IControllerOperations operations, string resourceGroupName, string resourceName)
            {
                return operations.GetDetailsAsync(resourceGroupName, resourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets details about the specified dnc controller.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure Resource group of which a given DelegatedNetwork
            /// resource is part. This name must be at least 1 character in length, and no
            /// more than 90.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource. It must be a minimum of 3 characters, and a
            /// maximum of 63.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DelegatedController> GetDetailsAsync(this IControllerOperations operations, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDetailsWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a dnc controller
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure Resource group of which a given DelegatedNetwork
            /// resource is part. This name must be at least 1 character in length, and no
            /// more than 90.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource. It must be a minimum of 3 characters, and a
            /// maximum of 63.
            /// </param>
            /// <param name='parameters'>
            /// controller type parameters
            /// </param>
            public static DelegatedController Create(this IControllerOperations operations, string resourceGroupName, string resourceName, DelegatedController parameters)
            {
                return operations.CreateAsync(resourceGroupName, resourceName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a dnc controller
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure Resource group of which a given DelegatedNetwork
            /// resource is part. This name must be at least 1 character in length, and no
            /// more than 90.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource. It must be a minimum of 3 characters, and a
            /// maximum of 63.
            /// </param>
            /// <param name='parameters'>
            /// controller type parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DelegatedController> CreateAsync(this IControllerOperations operations, string resourceGroupName, string resourceName, DelegatedController parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, resourceName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the DNC controller
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure Resource group of which a given DelegatedNetwork
            /// resource is part. This name must be at least 1 character in length, and no
            /// more than 90.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource. It must be a minimum of 3 characters, and a
            /// maximum of 63.
            /// </param>
            public static void Delete(this IControllerOperations operations, string resourceGroupName, string resourceName)
            {
                operations.DeleteAsync(resourceGroupName, resourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the DNC controller
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure Resource group of which a given DelegatedNetwork
            /// resource is part. This name must be at least 1 character in length, and no
            /// more than 90.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource. It must be a minimum of 3 characters, and a
            /// maximum of 63.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IControllerOperations operations, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update dnc controller
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure Resource group of which a given DelegatedNetwork
            /// resource is part. This name must be at least 1 character in length, and no
            /// more than 90.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource. It must be a minimum of 3 characters, and a
            /// maximum of 63.
            /// </param>
            /// <param name='parameters'>
            /// controller type parameters
            /// </param>
            public static DelegatedController Patch(this IControllerOperations operations, string resourceGroupName, string resourceName, ControllerResourceUpdateParameters parameters)
            {
                return operations.PatchAsync(resourceGroupName, resourceName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update dnc controller
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure Resource group of which a given DelegatedNetwork
            /// resource is part. This name must be at least 1 character in length, and no
            /// more than 90.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource. It must be a minimum of 3 characters, and a
            /// maximum of 63.
            /// </param>
            /// <param name='parameters'>
            /// controller type parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DelegatedController> PatchAsync(this IControllerOperations operations, string resourceGroupName, string resourceName, ControllerResourceUpdateParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchWithHttpMessagesAsync(resourceGroupName, resourceName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a dnc controller
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure Resource group of which a given DelegatedNetwork
            /// resource is part. This name must be at least 1 character in length, and no
            /// more than 90.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource. It must be a minimum of 3 characters, and a
            /// maximum of 63.
            /// </param>
            /// <param name='parameters'>
            /// controller type parameters
            /// </param>
            public static DelegatedController BeginCreate(this IControllerOperations operations, string resourceGroupName, string resourceName, DelegatedController parameters)
            {
                return operations.BeginCreateAsync(resourceGroupName, resourceName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a dnc controller
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure Resource group of which a given DelegatedNetwork
            /// resource is part. This name must be at least 1 character in length, and no
            /// more than 90.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource. It must be a minimum of 3 characters, and a
            /// maximum of 63.
            /// </param>
            /// <param name='parameters'>
            /// controller type parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DelegatedController> BeginCreateAsync(this IControllerOperations operations, string resourceGroupName, string resourceName, DelegatedController parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, resourceName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the DNC controller
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure Resource group of which a given DelegatedNetwork
            /// resource is part. This name must be at least 1 character in length, and no
            /// more than 90.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource. It must be a minimum of 3 characters, and a
            /// maximum of 63.
            /// </param>
            public static void BeginDelete(this IControllerOperations operations, string resourceGroupName, string resourceName)
            {
                operations.BeginDeleteAsync(resourceGroupName, resourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the DNC controller
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure Resource group of which a given DelegatedNetwork
            /// resource is part. This name must be at least 1 character in length, and no
            /// more than 90.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource. It must be a minimum of 3 characters, and a
            /// maximum of 63.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IControllerOperations operations, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
