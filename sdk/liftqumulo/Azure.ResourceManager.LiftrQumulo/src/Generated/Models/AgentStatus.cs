// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.LiftrQumulo.Models
{
    /// <summary> The Agent status. </summary>
    public readonly partial struct AgentStatus : IEquatable<AgentStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AgentStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AgentStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RegisteringValue = "Registering";
        private const string OfflineValue = "Offline";
        private const string OnlineValue = "Online";
        private const string ExecutingValue = "Executing";
        private const string RequiresAttentionValue = "RequiresAttention";
        private const string UnregisteringValue = "Unregistering";

        /// <summary> Registering. </summary>
        public static AgentStatus Registering { get; } = new AgentStatus(RegisteringValue);
        /// <summary> Offline. </summary>
        public static AgentStatus Offline { get; } = new AgentStatus(OfflineValue);
        /// <summary> Online. </summary>
        public static AgentStatus Online { get; } = new AgentStatus(OnlineValue);
        /// <summary> Executing. </summary>
        public static AgentStatus Executing { get; } = new AgentStatus(ExecutingValue);
        /// <summary> RequiresAttention. </summary>
        public static AgentStatus RequiresAttention { get; } = new AgentStatus(RequiresAttentionValue);
        /// <summary> Unregistering. </summary>
        public static AgentStatus Unregistering { get; } = new AgentStatus(UnregisteringValue);
        /// <summary> Determines if two <see cref="AgentStatus"/> values are the same. </summary>
        public static bool operator ==(AgentStatus left, AgentStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AgentStatus"/> values are not the same. </summary>
        public static bool operator !=(AgentStatus left, AgentStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AgentStatus"/>. </summary>
        public static implicit operator AgentStatus(string value) => new AgentStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AgentStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AgentStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
