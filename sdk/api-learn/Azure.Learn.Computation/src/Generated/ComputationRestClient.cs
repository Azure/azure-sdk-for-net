// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Learn.Computation
{
    internal partial class ComputationRestClient
    {
        private string nodeName;
        private Uri endpoint;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of ComputationRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="nodeName"> The String to use. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nodeName"/> is null. </exception>
        public ComputationRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string nodeName, Uri endpoint = null)
        {
            if (nodeName == null)
            {
                throw new ArgumentNullException(nameof(nodeName));
            }
            endpoint ??= new Uri("");

            this.nodeName = nodeName;
            this.endpoint = endpoint;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateComputePiRequest(int? precision)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ComputeNodes/", false);
            uri.AppendPath(nodeName, true);
            uri.AppendPath("/computePi", false);
            if (precision != null)
            {
                uri.AppendQuery("precision", precision.Value, true);
            }
            request.Uri = uri;
            return message;
        }

        /// <param name="precision"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<ResponseWithHeaders<ComputationComputePiHeaders>> ComputePiAsync(int? precision = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateComputePiRequest(precision);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new ComputationComputePiHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <param name="precision"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public ResponseWithHeaders<ComputationComputePiHeaders> ComputePi(int? precision = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateComputePiRequest(precision);
            _pipeline.Send(message, cancellationToken);
            var headers = new ComputationComputePiHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
