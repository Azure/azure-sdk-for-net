// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DevOps.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Representation of a pipeline template input parameter.
    /// </summary>
    public partial class InputDescriptor
    {
        /// <summary>
        /// Initializes a new instance of the InputDescriptor class.
        /// </summary>
        public InputDescriptor()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the InputDescriptor class.
        /// </summary>
        /// <param name="id">Identifier of the input parameter.</param>
        /// <param name="type">Data type of the value of the input parameter.
        /// Possible values include: 'String', 'SecureString', 'Int', 'Bool',
        /// 'Authorization'</param>
        /// <param name="description">Description of the input
        /// parameter.</param>
        /// <param name="possibleValues">List of possible values for the input
        /// parameter.</param>
        public InputDescriptor(string id, string type, string description = default(string), IList<InputValue> possibleValues = default(IList<InputValue>))
        {
            Id = id;
            Description = description;
            Type = type;
            PossibleValues = possibleValues;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets identifier of the input parameter.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets description of the input parameter.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets data type of the value of the input parameter.
        /// Possible values include: 'String', 'SecureString', 'Int', 'Bool',
        /// 'Authorization'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets list of possible values for the input parameter.
        /// </summary>
        [JsonProperty(PropertyName = "possibleValues")]
        public IList<InputValue> PossibleValues { get; set; }

    }
}
