// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.IoTFirmwareDefense
{
    /// <summary>
    /// A class representing a collection of <see cref="DryrunResource" /> and their operations.
    /// Each <see cref="DryrunResource" /> in the collection will belong to the same instance of <see cref="ArmResource" />.
    /// To get a <see cref="DryrunCollection" /> instance call the GetDryruns method from an instance of <see cref="ArmResource" />.
    /// </summary>
    public partial class DryrunCollection : ArmCollection, IEnumerable<DryrunResource>, IAsyncEnumerable<DryrunResource>
    {
        private readonly ClientDiagnostics _dryrunLinkersClientDiagnostics;
        private readonly LinkersRestOperations _dryrunLinkersRestClient;

        /// <summary> Initializes a new instance of the <see cref="DryrunCollection"/> class for mocking. </summary>
        protected DryrunCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="DryrunCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal DryrunCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _dryrunLinkersClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.IoTFirmwareDefense", DryrunResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(DryrunResource.ResourceType, out string dryrunLinkersApiVersion);
            _dryrunLinkersRestClient = new LinkersRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, dryrunLinkersApiVersion);
        }

        /// <summary>
        /// create a dryrun job to do necessary check before actual creation
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.ServiceLinker/dryruns/{dryrunName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Linkers_CreateDryrun</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="dryrunName"> The name of dryrun. </param>
        /// <param name="data"> dryrun resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dryrunName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dryrunName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<DryrunResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string dryrunName, DryrunResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dryrunName, nameof(dryrunName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _dryrunLinkersClientDiagnostics.CreateScope("DryrunCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _dryrunLinkersRestClient.CreateDryrunAsync(Id, dryrunName, data, cancellationToken).ConfigureAwait(false);
                var operation = new IoTFirmwareDefenseArmOperation<DryrunResource>(new DryrunOperationSource(Client), _dryrunLinkersClientDiagnostics, Pipeline, _dryrunLinkersRestClient.CreateCreateDryrunRequest(Id, dryrunName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// create a dryrun job to do necessary check before actual creation
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.ServiceLinker/dryruns/{dryrunName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Linkers_CreateDryrun</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="dryrunName"> The name of dryrun. </param>
        /// <param name="data"> dryrun resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dryrunName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dryrunName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<DryrunResource> CreateOrUpdate(WaitUntil waitUntil, string dryrunName, DryrunResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dryrunName, nameof(dryrunName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _dryrunLinkersClientDiagnostics.CreateScope("DryrunCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _dryrunLinkersRestClient.CreateDryrun(Id, dryrunName, data, cancellationToken);
                var operation = new IoTFirmwareDefenseArmOperation<DryrunResource>(new DryrunOperationSource(Client), _dryrunLinkersClientDiagnostics, Pipeline, _dryrunLinkersRestClient.CreateCreateDryrunRequest(Id, dryrunName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// get a dryrun job
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.ServiceLinker/dryruns/{dryrunName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Linkers_GetDryrun</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dryrunName"> The name of dryrun. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dryrunName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dryrunName"/> is null. </exception>
        public virtual async Task<Response<DryrunResource>> GetAsync(string dryrunName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dryrunName, nameof(dryrunName));

            using var scope = _dryrunLinkersClientDiagnostics.CreateScope("DryrunCollection.Get");
            scope.Start();
            try
            {
                var response = await _dryrunLinkersRestClient.GetDryrunAsync(Id, dryrunName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DryrunResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// get a dryrun job
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.ServiceLinker/dryruns/{dryrunName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Linkers_GetDryrun</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dryrunName"> The name of dryrun. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dryrunName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dryrunName"/> is null. </exception>
        public virtual Response<DryrunResource> Get(string dryrunName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dryrunName, nameof(dryrunName));

            using var scope = _dryrunLinkersClientDiagnostics.CreateScope("DryrunCollection.Get");
            scope.Start();
            try
            {
                var response = _dryrunLinkersRestClient.GetDryrun(Id, dryrunName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DryrunResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// list dryrun jobs
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.ServiceLinker/dryruns</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Linkers_ListDryrun</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DryrunResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<DryrunResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _dryrunLinkersRestClient.CreateListDryrunRequest(Id);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _dryrunLinkersRestClient.CreateListDryrunNextPageRequest(nextLink, Id);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new DryrunResource(Client, DryrunResourceData.DeserializeDryrunResourceData(e)), _dryrunLinkersClientDiagnostics, Pipeline, "DryrunCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// list dryrun jobs
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.ServiceLinker/dryruns</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Linkers_ListDryrun</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DryrunResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<DryrunResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _dryrunLinkersRestClient.CreateListDryrunRequest(Id);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _dryrunLinkersRestClient.CreateListDryrunNextPageRequest(nextLink, Id);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new DryrunResource(Client, DryrunResourceData.DeserializeDryrunResourceData(e)), _dryrunLinkersClientDiagnostics, Pipeline, "DryrunCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.ServiceLinker/dryruns/{dryrunName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Linkers_GetDryrun</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dryrunName"> The name of dryrun. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dryrunName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dryrunName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string dryrunName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dryrunName, nameof(dryrunName));

            using var scope = _dryrunLinkersClientDiagnostics.CreateScope("DryrunCollection.Exists");
            scope.Start();
            try
            {
                var response = await _dryrunLinkersRestClient.GetDryrunAsync(Id, dryrunName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.ServiceLinker/dryruns/{dryrunName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Linkers_GetDryrun</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dryrunName"> The name of dryrun. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dryrunName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dryrunName"/> is null. </exception>
        public virtual Response<bool> Exists(string dryrunName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dryrunName, nameof(dryrunName));

            using var scope = _dryrunLinkersClientDiagnostics.CreateScope("DryrunCollection.Exists");
            scope.Start();
            try
            {
                var response = _dryrunLinkersRestClient.GetDryrun(Id, dryrunName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<DryrunResource> IEnumerable<DryrunResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<DryrunResource> IAsyncEnumerable<DryrunResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
