// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.IoTFirmwareDefense.Models
{
    /// <summary> The AccessKeyPermission. </summary>
    public readonly partial struct AccessKeyPermission : IEquatable<AccessKeyPermission>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AccessKeyPermission"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AccessKeyPermission(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ReadValue = "Read";
        private const string WriteValue = "Write";
        private const string ListenValue = "Listen";
        private const string SendValue = "Send";
        private const string ManageValue = "Manage";

        /// <summary> Read. </summary>
        public static AccessKeyPermission Read { get; } = new AccessKeyPermission(ReadValue);
        /// <summary> Write. </summary>
        public static AccessKeyPermission Write { get; } = new AccessKeyPermission(WriteValue);
        /// <summary> Listen. </summary>
        public static AccessKeyPermission Listen { get; } = new AccessKeyPermission(ListenValue);
        /// <summary> Send. </summary>
        public static AccessKeyPermission Send { get; } = new AccessKeyPermission(SendValue);
        /// <summary> Manage. </summary>
        public static AccessKeyPermission Manage { get; } = new AccessKeyPermission(ManageValue);
        /// <summary> Determines if two <see cref="AccessKeyPermission"/> values are the same. </summary>
        public static bool operator ==(AccessKeyPermission left, AccessKeyPermission right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AccessKeyPermission"/> values are not the same. </summary>
        public static bool operator !=(AccessKeyPermission left, AccessKeyPermission right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AccessKeyPermission"/>. </summary>
        public static implicit operator AccessKeyPermission(string value) => new AccessKeyPermission(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AccessKeyPermission other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AccessKeyPermission other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
