// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace Azure.ResourceManager.IoTFirmwareDefense.Models
{
    /// <summary> The dryrun parameters for creation or update a linker. </summary>
    public partial class CreateOrUpdateDryrunParameters : DryrunParameters
    {
        /// <summary> Initializes a new instance of CreateOrUpdateDryrunParameters. </summary>
        public CreateOrUpdateDryrunParameters()
        {
            ActionName = DryrunActionName.CreateOrUpdate;
        }

        /// <summary> Initializes a new instance of CreateOrUpdateDryrunParameters. </summary>
        /// <param name="actionName"> The name of action for you dryrun job. </param>
        /// <param name="targetService">
        /// The target service properties
        /// Please note <see cref="TargetServiceBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureResource"/>, <see cref="ConfluentBootstrapServer"/>, <see cref="ConfluentSchemaRegistry"/> and <see cref="SelfHostedServer"/>.
        /// </param>
        /// <param name="authInfo">
        /// The authentication type.
        /// Please note <see cref="AuthInfoBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AccessKeyInfoBase"/>, <see cref="SecretAuthInfo"/>, <see cref="ServicePrincipalCertificateAuthInfo"/>, <see cref="ServicePrincipalSecretAuthInfo"/>, <see cref="SystemAssignedIdentityAuthInfo"/>, <see cref="UserAccountAuthInfo"/> and <see cref="UserAssignedIdentityAuthInfo"/>.
        /// </param>
        /// <param name="clientType"> The application client type. </param>
        /// <param name="provisioningState"> The provisioning state. </param>
        /// <param name="vNetSolution"> The VNet solution. </param>
        /// <param name="secretStore"> An option to store secret value in secure place. </param>
        /// <param name="scope"> connection scope in source service. </param>
        /// <param name="publicNetworkSolution"> The network solution. </param>
        /// <param name="configurationInfo"> The connection information consumed by applications, including secrets, connection strings. </param>
        internal CreateOrUpdateDryrunParameters(DryrunActionName actionName, TargetServiceBase targetService, AuthInfoBase authInfo, ClientType? clientType, string provisioningState, VNetSolution vNetSolution, SecretStore secretStore, string scope, PublicNetworkSolution publicNetworkSolution, ConfigurationInfo configurationInfo) : base(actionName)
        {
            TargetService = targetService;
            AuthInfo = authInfo;
            ClientType = clientType;
            ProvisioningState = provisioningState;
            VNetSolution = vNetSolution;
            SecretStore = secretStore;
            Scope = scope;
            PublicNetworkSolution = publicNetworkSolution;
            ConfigurationInfo = configurationInfo;
            ActionName = actionName;
        }

        /// <summary>
        /// The target service properties
        /// Please note <see cref="TargetServiceBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureResource"/>, <see cref="ConfluentBootstrapServer"/>, <see cref="ConfluentSchemaRegistry"/> and <see cref="SelfHostedServer"/>.
        /// </summary>
        public TargetServiceBase TargetService { get; set; }
        /// <summary>
        /// The authentication type.
        /// Please note <see cref="AuthInfoBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AccessKeyInfoBase"/>, <see cref="SecretAuthInfo"/>, <see cref="ServicePrincipalCertificateAuthInfo"/>, <see cref="ServicePrincipalSecretAuthInfo"/>, <see cref="SystemAssignedIdentityAuthInfo"/>, <see cref="UserAccountAuthInfo"/> and <see cref="UserAssignedIdentityAuthInfo"/>.
        /// </summary>
        public AuthInfoBase AuthInfo { get; set; }
        /// <summary> The application client type. </summary>
        public ClientType? ClientType { get; set; }
        /// <summary> The provisioning state. </summary>
        public string ProvisioningState { get; }
        /// <summary> The VNet solution. </summary>
        public VNetSolution VNetSolution { get; set; }
        /// <summary> An option to store secret value in secure place. </summary>
        public SecretStore SecretStore { get; set; }
        /// <summary> connection scope in source service. </summary>
        public string Scope { get; set; }
        /// <summary> The network solution. </summary>
        public PublicNetworkSolution PublicNetworkSolution { get; set; }
        /// <summary> The connection information consumed by applications, including secrets, connection strings. </summary>
        public ConfigurationInfo ConfigurationInfo { get; set; }
    }
}
