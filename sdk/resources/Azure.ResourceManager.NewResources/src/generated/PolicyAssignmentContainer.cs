// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Core.Resources;

namespace Azure.ResourceManager.NewResources
{
    /// <summary> A class representing collection of PolicyAssignment and their operations over a scope. </summary>
    public partial class PolicyAssignmentContainer : ContainerBase
    {
        /// <summary> Initializes a new instance of the <see cref="PolicyAssignmentContainer"/> class for mocking. </summary>
        protected PolicyAssignmentContainer()
        {
        }

        /// <summary> Initializes a new instance of PolicyAssignmentContainer class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        /// <param name="scope"> Typed scope Identifier for the container. </param>
        internal PolicyAssignmentContainer(OperationsBase parent, ResourceIdentifier scope):base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            // TODO: Validate scope
            _scope = scope;
        }

        private readonly ResourceIdentifier _scope;

        private readonly ClientDiagnostics _clientDiagnostics;

        /// <summary> Represents the REST operations. </summary>
        private PolicyAssignmentsRestOperations _restClient => new PolicyAssignmentsRestOperations(_clientDiagnostics, Pipeline);

        /// <summary> Typed Resource Identifier for the container. </summary>
        public new ResourceIdentifier Id => base.Id as ResourceIdentifier;

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => ResourceIdentifier.RootResourceIdentifier.ResourceType;

        // Container level operations.

        /// <summary> The operation to create or update a PolicyAssignment. Please note some properties can be set only during creation. </summary>
        /// <param name="policyAssignmentName"> The name of the policy assignment. </param>
        /// <param name="parameters"> Parameters for the policy assignment. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public Response<PolicyAssignment> CreateOrUpdate(string policyAssignmentName, PolicyAssignmentData parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PolicyAssignmentContainer.CreateOrUpdate");
            scope.Start();
            try
            {
                if (policyAssignmentName == null)
                {
                    throw new ArgumentNullException(nameof(policyAssignmentName));
                }
                if (parameters == null)
                {
                    throw new ArgumentNullException(nameof(parameters));
                }

                return StartCreateOrUpdate(policyAssignmentName, parameters, cancellationToken: cancellationToken).WaitForCompletion(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The operation to create or update a PolicyAssignment. Please note some properties can be set only during creation. </summary>
        /// <param name="policyAssignmentName"> The name of the policy assignment. </param>
        /// <param name="parameters"> Parameters for the policy assignment. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public async Task<Response<PolicyAssignment>> CreateOrUpdateAsync(string policyAssignmentName, PolicyAssignmentData parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PolicyAssignmentContainer.CreateOrUpdate");
            scope.Start();
            try
            {
                if (policyAssignmentName == null)
                {
                    throw new ArgumentNullException(nameof(policyAssignmentName));
                }
                if (parameters == null)
                {
                    throw new ArgumentNullException(nameof(parameters));
                }

                var operation = await StartCreateOrUpdateAsync(policyAssignmentName, parameters, cancellationToken: cancellationToken).ConfigureAwait(false);
                return await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The operation to create or update a PolicyAssignment. Please note some properties can be set only during creation. </summary>
        /// <param name="policyAssignmentName"> The name of the policy assignment. </param>
        /// <param name="parameters"> Parameters for the policy assignment. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public PolicyAssignmentsCreateOperation StartCreateOrUpdate(string policyAssignmentName, PolicyAssignmentData parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PolicyAssignmentContainer.StartCreateOrUpdate");
            scope.Start();
            try
            {
                if (policyAssignmentName == null)
                {
                    throw new ArgumentNullException(nameof(policyAssignmentName));
                }
                if (parameters == null)
                {
                    throw new ArgumentNullException(nameof(parameters));
                }

                var originalResponse = _restClient.Create(_scope, policyAssignmentName, parameters, cancellationToken: cancellationToken);
                return new PolicyAssignmentsCreateOperation(Parent, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The operation to create or update a PolicyAssignment. Please note some properties can be set only during creation. </summary>
        /// <param name="policyAssignmentName"> The name of the policy assignment. </param>
        /// <param name="parameters"> Parameters for the policy assignment. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public async Task<PolicyAssignmentsCreateOperation> StartCreateOrUpdateAsync(string policyAssignmentName, PolicyAssignmentData parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PolicyAssignmentContainer.StartCreateOrUpdate");
            scope.Start();
            try
            {
                if (policyAssignmentName == null)
                {
                    throw new ArgumentNullException(nameof(policyAssignmentName));
                }
                if (parameters == null)
                {
                    throw new ArgumentNullException(nameof(parameters));
                }

                var originalResponse = await _restClient.CreateAsync(_scope, policyAssignmentName, parameters, cancellationToken: cancellationToken).ConfigureAwait(false);
                return new PolicyAssignmentsCreateOperation(Parent, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <inheritdoc />
        /// <param name="policyAssignmentName"> The name of the policy assignment to get. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public Response<PolicyAssignment> Get(string policyAssignmentName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PolicyAssignmentContainer.Get");
            scope.Start();
            try
            {
                if (policyAssignmentName == null)
                {
                    throw new ArgumentNullException(nameof(policyAssignmentName));
                }

                var response = _restClient.Get(_scope, policyAssignmentName, cancellationToken: cancellationToken);
                return Response.FromValue(new PolicyAssignment(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <inheritdoc />
        /// <param name="policyAssignmentName"> The name of the policy assignment to get. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public async Task<Response<PolicyAssignment>> GetAsync(string policyAssignmentName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PolicyAssignmentContainer.Get");
            scope.Start();
            try
            {
                if (policyAssignmentName == null)
                {
                    throw new ArgumentNullException(nameof(policyAssignmentName));
                }

                var response = await _restClient.GetAsync(_scope, policyAssignmentName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new PolicyAssignment(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // /// <summary> Filters the list of PolicyAssignment for this resource group represented as generic resources. </summary>
        // /// <param name="nameFilter"> The filter used in this operation. </param>
        // /// <param name="top"> The number of results to return. </param>
        // /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        // /// <returns> A collection of resource that may take multiple service requests to iterate over. </returns>
        // public Pageable<Core.GenericResource> ListAsGenericResource(string nameFilter, int? top = null, CancellationToken cancellationToken = default)
        // {
        //     using var scope = _clientDiagnostics.CreateScope("PolicyAssignmentContainer.ListAsGenericResource");
        //     scope.Start();
        //     try
        //     {
        //         var filters = new ResourceFilterCollection(PolicyAssignment.ResourceType);
        //         filters.SubstringFilter = nameFilter;
        //         return ResourceListOperations.ListAtContext(Parent as ResourceGroupOperations, filters, top, cancellationToken);
        //     }
        //     catch (Exception e)
        //     {
        //         scope.Failed(e);
        //         throw;
        //     }
        // }

        // /// <summary> Filters the list of PolicyAssignment for this resource group represented as generic resources. </summary>
        // /// <param name="nameFilter"> The filter used in this operation. </param>
        // /// <param name="top"> The number of results to return. </param>
        // /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        // /// <returns> An async collection of resource that may take multiple service requests to iterate over. </returns>
        // public AsyncPageable<Core.GenericResource> ListAsGenericResourceAsync(string nameFilter, int? top = null, CancellationToken cancellationToken = default)
        // {
        //     using var scope = _clientDiagnostics.CreateScope("PolicyAssignmentContainer.ListAsGenericResource");
        //     scope.Start();
        //     try
        //     {
        //         var filters = new ResourceFilterCollection(PolicyAssignment.ResourceType);
        //         filters.SubstringFilter = nameFilter;
        //         return ResourceListOperations.ListAtContextAsync(Parent as ResourceGroupOperations, filters, top, cancellationToken);
        //     }
        //     catch (Exception e)
        //     {
        //         scope.Failed(e);
        //         throw;
        //     }
        // }

        // Builders.
        // public ArmBuilder<ResourceGroupResourceIdentifier, PolicyAssignment, PolicyAssignmentData> Construct() { }
    }
}
