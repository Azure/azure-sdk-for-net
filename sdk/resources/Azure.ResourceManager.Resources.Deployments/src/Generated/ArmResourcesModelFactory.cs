// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Resources.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmResourcesModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.ErrorAdditionalInfo"/>. </summary>
        /// <param name="errorAdditionalInfoType"> The additional info type. </param>
        /// <param name="info"> The additional info. </param>
        /// <returns> A new <see cref="Models.ErrorAdditionalInfo"/> instance for mocking. </returns>
        public static ErrorAdditionalInfo ErrorAdditionalInfo(string errorAdditionalInfoType = null, BinaryData info = null)
        {
            return new ErrorAdditionalInfo(errorAdditionalInfoType, info, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ArmDeploymentContent"/>. </summary>
        /// <param name="location"> The location to store the deployment data. </param>
        /// <param name="properties"> The deployment properties. </param>
        /// <param name="tags"> Deployment tags. </param>
        /// <param name="identity"> The Managed Identity configuration for a deployment. </param>
        /// <returns> A new <see cref="Models.ArmDeploymentContent"/> instance for mocking. </returns>
        public static ArmDeploymentContent ArmDeploymentContent(AzureLocation? location = null, ArmDeploymentProperties properties = null, IDictionary<string, string> tags = null, ManagedServiceIdentity identity = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ArmDeploymentContent(location, properties, tags, identity, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ArmDeploymentProperties"/>. </summary>
        /// <param name="template"> The template content. You use this element when you want to pass the template syntax directly in the request rather than link to an existing template. It can be a JObject or well-formed JSON string. Use either the templateLink property or the template property, but not both. </param>
        /// <param name="templateLink"> The URI of the template. Use either the templateLink property or the template property, but not both. </param>
        /// <param name="parameters"> Name and value pairs that define the deployment parameters for the template. You use this element when you want to provide the parameter values directly in the request rather than link to an existing parameter file. Use either the parametersLink property or the parameters property, but not both. It can be a JObject or a well formed JSON string. </param>
        /// <param name="externalInputs"> External input values, used by external tooling for parameter evaluation. </param>
        /// <param name="externalInputDefinitions"> External input definitions, used by external tooling to define expected external input values. </param>
        /// <param name="parametersLink"> The URI of parameters file. You use this element to link to an existing parameters file. Use either the parametersLink property or the parameters property, but not both. </param>
        /// <param name="extensionConfigs"> The configurations to use for deployment extensions. The keys of this object are deployment extension aliases as defined in the deployment template. </param>
        /// <param name="mode"> The mode that is used to deploy resources. This value can be either Incremental or Complete. In Incremental mode, resources are deployed without deleting existing resources that are not included in the template. In Complete mode, resources are deployed and existing resources in the resource group that are not included in the template are deleted. Be careful when using Complete mode as you may unintentionally delete resources. </param>
        /// <param name="debugSettingDetailLevel"> The debug setting of the deployment. </param>
        /// <param name="errorDeployment"> The deployment on error behavior. </param>
        /// <param name="expressionEvaluationScope"> Specifies whether template expressions are evaluated within the scope of the parent template or nested template. Only applicable to nested templates. If not specified, default value is outer. </param>
        /// <param name="validationLevel"> The validation level of the deployment. </param>
        /// <returns> A new <see cref="Models.ArmDeploymentProperties"/> instance for mocking. </returns>
        public static ArmDeploymentProperties ArmDeploymentProperties(BinaryData template = null, ArmDeploymentTemplateLink templateLink = null, BinaryData parameters = null, IDictionary<string, ArmDeploymentExternalInput> externalInputs = null, IDictionary<string, ArmDeploymentExternalInputDefinition> externalInputDefinitions = null, ArmDeploymentParametersLink parametersLink = null, IDictionary<string, IDictionary<string, ArmDeploymentExtensionConfigItem>> extensionConfigs = null, ArmDeploymentMode mode = default, string debugSettingDetailLevel = null, ErrorDeployment errorDeployment = null, ExpressionEvaluationScope? expressionEvaluationScope = null, ValidationLevel? validationLevel = null)
        {
            externalInputs ??= new Dictionary<string, ArmDeploymentExternalInput>();
            externalInputDefinitions ??= new Dictionary<string, ArmDeploymentExternalInputDefinition>();
            extensionConfigs ??= new Dictionary<string, IDictionary<string, ArmDeploymentExtensionConfigItem>>();

            return new ArmDeploymentProperties(
                template,
                templateLink,
                parameters,
                externalInputs,
                externalInputDefinitions,
                parametersLink,
                extensionConfigs,
                mode,
                debugSettingDetailLevel != null ? new DebugSetting(debugSettingDetailLevel, serializedAdditionalRawData: null) : null,
                errorDeployment,
                expressionEvaluationScope != null ? new ExpressionEvaluationOptions(expressionEvaluationScope, serializedAdditionalRawData: null) : null,
                validationLevel,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ArmDeploymentExternalInputDefinition"/>. </summary>
        /// <param name="kind"> The kind of external input. </param>
        /// <param name="config"> Configuration for the external input. </param>
        /// <returns> A new <see cref="Models.ArmDeploymentExternalInputDefinition"/> instance for mocking. </returns>
        public static ArmDeploymentExternalInputDefinition ArmDeploymentExternalInputDefinition(string kind = null, BinaryData config = null)
        {
            return new ArmDeploymentExternalInputDefinition(kind, config, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ArmDeploymentExtensionConfigItem"/>. </summary>
        /// <param name="extensionConfigPropertyType"> The value type of the extension config property. </param>
        /// <param name="value"> The value of the extension config property. </param>
        /// <param name="keyVaultReference"> The Azure Key Vault reference used to retrieve the secret value of the extension config property. </param>
        /// <returns> A new <see cref="Models.ArmDeploymentExtensionConfigItem"/> instance for mocking. </returns>
        public static ArmDeploymentExtensionConfigItem ArmDeploymentExtensionConfigItem(ExtensionConfigPropertyType? extensionConfigPropertyType = null, BinaryData value = null, KeyVaultParameterReference keyVaultReference = null)
        {
            return new ArmDeploymentExtensionConfigItem(extensionConfigPropertyType, value, keyVaultReference, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Resources.ArmDeploymentData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location"> the location of the deployment. </param>
        /// <param name="properties"> Deployment properties. </param>
        /// <param name="tags"> Deployment tags. </param>
        /// <returns> A new <see cref="Resources.ArmDeploymentData"/> instance for mocking. </returns>
        public static ArmDeploymentData ArmDeploymentData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AzureLocation? location = null, ArmDeploymentPropertiesExtended properties = null, IReadOnlyDictionary<string, string> tags = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ArmDeploymentData(
                id,
                name,
                resourceType,
                systemData,
                location,
                properties,
                tags,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ArmDeploymentPropertiesExtended"/>. </summary>
        /// <param name="provisioningState"> Denotes the state of provisioning. </param>
        /// <param name="correlationId"> The correlation ID of the deployment. </param>
        /// <param name="timestamp"> The timestamp of the template deployment. </param>
        /// <param name="duration"> The duration of the template deployment. </param>
        /// <param name="outputs"> Key/value pairs that represent deployment output. </param>
        /// <param name="providers"> The list of resource providers needed for the deployment. </param>
        /// <param name="dependencies"> The list of deployment dependencies. </param>
        /// <param name="templateLink"> The URI referencing the template. </param>
        /// <param name="parameters"> Deployment parameters. </param>
        /// <param name="parametersLink"> The URI referencing the parameters. </param>
        /// <param name="extensions"> The extensions used in this deployment. </param>
        /// <param name="mode"> The deployment mode. Possible values are Incremental and Complete. </param>
        /// <param name="debugSettingDetailLevel"> The debug setting of the deployment. </param>
        /// <param name="errorDeployment"> The deployment on error behavior. </param>
        /// <param name="templateHash"> The hash produced for the template. </param>
        /// <param name="outputResourceDetails"> Array of provisioned resources. </param>
        /// <param name="validatedResourceDetails"> Array of validated resources. </param>
        /// <param name="error"> The deployment error. </param>
        /// <param name="diagnostics"> Contains diagnostic information collected during validation process. </param>
        /// <param name="validationLevel"> The validation level of the deployment. </param>
        /// <returns> A new <see cref="Models.ArmDeploymentPropertiesExtended"/> instance for mocking. </returns>
        public static ArmDeploymentPropertiesExtended ArmDeploymentPropertiesExtended(ResourcesProvisioningState? provisioningState = null, string correlationId = null, DateTimeOffset? timestamp = null, TimeSpan? duration = null, BinaryData outputs = null, IEnumerable<ResourceProviderData> providers = null, IEnumerable<ArmDependency> dependencies = null, ArmDeploymentTemplateLink templateLink = null, BinaryData parameters = null, ArmDeploymentParametersLink parametersLink = null, IEnumerable<ArmDeploymentExtensionDefinition> extensions = null, ArmDeploymentMode? mode = null, string debugSettingDetailLevel = null, ErrorDeploymentExtended errorDeployment = null, string templateHash = null, IEnumerable<ArmResourceReference> outputResourceDetails = null, IEnumerable<ArmResourceReference> validatedResourceDetails = null, ResponseError error = null, IEnumerable<DeploymentDiagnosticsDefinition> diagnostics = null, ValidationLevel? validationLevel = null)
        {
            providers ??= new List<ResourceProviderData>();
            dependencies ??= new List<ArmDependency>();
            extensions ??= new List<ArmDeploymentExtensionDefinition>();
            outputResourceDetails ??= new List<ArmResourceReference>();
            validatedResourceDetails ??= new List<ArmResourceReference>();
            diagnostics ??= new List<DeploymentDiagnosticsDefinition>();

            return new ArmDeploymentPropertiesExtended(
                provisioningState,
                correlationId,
                timestamp,
                duration,
                outputs,
                providers?.ToList(),
                dependencies?.ToList(),
                templateLink,
                parameters,
                parametersLink,
                extensions?.ToList(),
                mode,
                debugSettingDetailLevel != null ? new DebugSetting(debugSettingDetailLevel, serializedAdditionalRawData: null) : null,
                errorDeployment,
                templateHash,
                outputResourceDetails?.ToList(),
                validatedResourceDetails?.ToList(),
                error,
                diagnostics?.ToList(),
                validationLevel,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ArmDependency"/>. </summary>
        /// <param name="dependsOn"> The list of dependencies. </param>
        /// <param name="id"> The ID of the dependency. </param>
        /// <param name="resourceType"> The dependency resource type. </param>
        /// <param name="resourceName"> The dependency resource name. </param>
        /// <returns> A new <see cref="Models.ArmDependency"/> instance for mocking. </returns>
        public static ArmDependency ArmDependency(IEnumerable<BasicArmDependency> dependsOn = null, string id = null, ResourceType? resourceType = null, string resourceName = null)
        {
            dependsOn ??= new List<BasicArmDependency>();

            return new ArmDependency(dependsOn?.ToList(), id, resourceType, resourceName, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.BasicArmDependency"/>. </summary>
        /// <param name="id"> The ID of the dependency. </param>
        /// <param name="resourceType"> The dependency resource type. </param>
        /// <param name="resourceName"> The dependency resource name. </param>
        /// <returns> A new <see cref="Models.BasicArmDependency"/> instance for mocking. </returns>
        public static BasicArmDependency BasicArmDependency(string id = null, ResourceType? resourceType = null, string resourceName = null)
        {
            return new BasicArmDependency(id, resourceType, resourceName, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ArmDeploymentExtensionDefinition"/>. </summary>
        /// <param name="alias"> The alias of the extension as defined in the deployment template. </param>
        /// <param name="name"> The extension name. </param>
        /// <param name="version"> The extension version. </param>
        /// <param name="configId"> The extension configuration ID. It uniquely identifies a deployment control plane within an extension. </param>
        /// <param name="config"> The extension configuration. </param>
        /// <returns> A new <see cref="Models.ArmDeploymentExtensionDefinition"/> instance for mocking. </returns>
        public static ArmDeploymentExtensionDefinition ArmDeploymentExtensionDefinition(string @alias = null, string name = null, string version = null, string configId = null, IReadOnlyDictionary<string, ArmDeploymentExtensionConfigItem> config = null)
        {
            config ??= new Dictionary<string, ArmDeploymentExtensionConfigItem>();

            return new ArmDeploymentExtensionDefinition(
                @alias,
                name,
                version,
                configId,
                config,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ErrorDeploymentExtended"/>. </summary>
        /// <param name="provisioningState"> The state of the provisioning for the on error deployment. </param>
        /// <param name="deploymentType"> The deployment on error behavior type. Possible values are LastSuccessful and SpecificDeployment. </param>
        /// <param name="deploymentName"> The deployment to be used on error case. </param>
        /// <returns> A new <see cref="Models.ErrorDeploymentExtended"/> instance for mocking. </returns>
        public static ErrorDeploymentExtended ErrorDeploymentExtended(string provisioningState = null, ErrorDeploymentType? deploymentType = null, string deploymentName = null)
        {
            return new ErrorDeploymentExtended(provisioningState, deploymentType, deploymentName, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ArmResourceReference"/>. </summary>
        /// <param name="id"> The fully qualified Azure resource ID. </param>
        /// <param name="extension"> The extension the resource was deployed with. </param>
        /// <param name="resourceType"> The resource type. </param>
        /// <param name="identifiers"> The extensible resource identifiers. </param>
        /// <param name="apiVersion"> The API version the resource was deployed with. </param>
        /// <returns> A new <see cref="Models.ArmResourceReference"/> instance for mocking. </returns>
        public static ArmResourceReference ArmResourceReference(ResourceIdentifier id = null, ArmDeploymentExtensionDefinition extension = null, string resourceType = null, BinaryData identifiers = null, string apiVersion = null)
        {
            return new ArmResourceReference(
                id,
                extension,
                resourceType,
                identifiers,
                apiVersion,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DeploymentDiagnosticsDefinition"/>. </summary>
        /// <param name="level"> Denotes the additional response level. </param>
        /// <param name="code"> The error code. </param>
        /// <param name="message"> The error message. </param>
        /// <param name="target"> The error target. </param>
        /// <param name="additionalInfo"> The error additional info. </param>
        /// <returns> A new <see cref="Models.DeploymentDiagnosticsDefinition"/> instance for mocking. </returns>
        public static DeploymentDiagnosticsDefinition DeploymentDiagnosticsDefinition(Level level = default, string code = null, string message = null, string target = null, IEnumerable<ErrorAdditionalInfo> additionalInfo = null)
        {
            additionalInfo ??= new List<ErrorAdditionalInfo>();

            return new DeploymentDiagnosticsDefinition(
                level,
                code,
                message,
                target,
                additionalInfo?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ArmDeploymentValidateResult"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="error"> The deployment validation error. </param>
        /// <param name="properties"> The template deployment properties. </param>
        /// <returns> A new <see cref="Models.ArmDeploymentValidateResult"/> instance for mocking. </returns>
        public static ArmDeploymentValidateResult ArmDeploymentValidateResult(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ResponseError error = null, ArmDeploymentPropertiesExtended properties = null)
        {
            return new ArmDeploymentValidateResult(
                id,
                name,
                resourceType,
                systemData,
                error,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ArmDeploymentExportResult"/>. </summary>
        /// <param name="template"> The template content. </param>
        /// <returns> A new <see cref="Models.ArmDeploymentExportResult"/> instance for mocking. </returns>
        public static ArmDeploymentExportResult ArmDeploymentExportResult(BinaryData template = null)
        {
            return new ArmDeploymentExportResult(template, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ArmDeploymentWhatIfContent"/>. </summary>
        /// <param name="location"> The location to store the deployment data, only required at the tenant and management group scope. </param>
        /// <param name="properties"> The deployment properties. </param>
        /// <returns> A new <see cref="Models.ArmDeploymentWhatIfContent"/> instance for mocking. </returns>
        public static ArmDeploymentWhatIfContent ArmDeploymentWhatIfContent(AzureLocation? location = null, ArmDeploymentWhatIfProperties properties = null)
        {
            return new ArmDeploymentWhatIfContent(location, properties, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ArmDeploymentWhatIfProperties"/>. </summary>
        /// <param name="template"> The template content. You use this element when you want to pass the template syntax directly in the request rather than link to an existing template. It can be a JObject or well-formed JSON string. Use either the templateLink property or the template property, but not both. </param>
        /// <param name="templateLink"> The URI of the template. Use either the templateLink property or the template property, but not both. </param>
        /// <param name="parameters"> Name and value pairs that define the deployment parameters for the template. You use this element when you want to provide the parameter values directly in the request rather than link to an existing parameter file. Use either the parametersLink property or the parameters property, but not both. It can be a JObject or a well formed JSON string. </param>
        /// <param name="externalInputs"> External input values, used by external tooling for parameter evaluation. </param>
        /// <param name="externalInputDefinitions"> External input definitions, used by external tooling to define expected external input values. </param>
        /// <param name="parametersLink"> The URI of parameters file. You use this element to link to an existing parameters file. Use either the parametersLink property or the parameters property, but not both. </param>
        /// <param name="extensionConfigs"> The configurations to use for deployment extensions. The keys of this object are deployment extension aliases as defined in the deployment template. </param>
        /// <param name="mode"> The mode that is used to deploy resources. This value can be either Incremental or Complete. In Incremental mode, resources are deployed without deleting existing resources that are not included in the template. In Complete mode, resources are deployed and existing resources in the resource group that are not included in the template are deleted. Be careful when using Complete mode as you may unintentionally delete resources. </param>
        /// <param name="debugSettingDetailLevel"> The debug setting of the deployment. </param>
        /// <param name="errorDeployment"> The deployment on error behavior. </param>
        /// <param name="expressionEvaluationScope"> Specifies whether template expressions are evaluated within the scope of the parent template or nested template. Only applicable to nested templates. If not specified, default value is outer. </param>
        /// <param name="validationLevel"> The validation level of the deployment. </param>
        /// <param name="whatIfResultFormat"> Optional What-If operation settings. </param>
        /// <returns> A new <see cref="Models.ArmDeploymentWhatIfProperties"/> instance for mocking. </returns>
        public static ArmDeploymentWhatIfProperties ArmDeploymentWhatIfProperties(BinaryData template = null, ArmDeploymentTemplateLink templateLink = null, BinaryData parameters = null, IDictionary<string, ArmDeploymentExternalInput> externalInputs = null, IDictionary<string, ArmDeploymentExternalInputDefinition> externalInputDefinitions = null, ArmDeploymentParametersLink parametersLink = null, IDictionary<string, IDictionary<string, ArmDeploymentExtensionConfigItem>> extensionConfigs = null, ArmDeploymentMode mode = default, string debugSettingDetailLevel = null, ErrorDeployment errorDeployment = null, ExpressionEvaluationScope? expressionEvaluationScope = null, ValidationLevel? validationLevel = null, WhatIfResultFormat? whatIfResultFormat = null)
        {
            externalInputs ??= new Dictionary<string, ArmDeploymentExternalInput>();
            externalInputDefinitions ??= new Dictionary<string, ArmDeploymentExternalInputDefinition>();
            extensionConfigs ??= new Dictionary<string, IDictionary<string, ArmDeploymentExtensionConfigItem>>();

            return new ArmDeploymentWhatIfProperties(
                template,
                templateLink,
                parameters,
                externalInputs,
                externalInputDefinitions,
                parametersLink,
                extensionConfigs,
                mode,
                debugSettingDetailLevel != null ? new DebugSetting(debugSettingDetailLevel, serializedAdditionalRawData: null) : null,
                errorDeployment,
                expressionEvaluationScope != null ? new ExpressionEvaluationOptions(expressionEvaluationScope, serializedAdditionalRawData: null) : null,
                validationLevel,
                serializedAdditionalRawData: null,
                whatIfResultFormat != null ? new ArmDeploymentWhatIfSettings(whatIfResultFormat, serializedAdditionalRawData: null) : null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.WhatIfOperationResult"/>. </summary>
        /// <param name="status"> Status of the What-If operation. </param>
        /// <param name="error"> Error when What-If operation fails. </param>
        /// <param name="changes"> List of resource changes predicted by What-If operation. </param>
        /// <param name="potentialChanges"> List of resource changes predicted by What-If operation. </param>
        /// <param name="diagnostics"> List of resource diagnostics detected by What-If operation. </param>
        /// <returns> A new <see cref="Models.WhatIfOperationResult"/> instance for mocking. </returns>
        public static WhatIfOperationResult WhatIfOperationResult(string status = null, ResponseError error = null, IEnumerable<WhatIfChange> changes = null, IEnumerable<WhatIfChange> potentialChanges = null, IEnumerable<DeploymentDiagnosticsDefinition> diagnostics = null)
        {
            changes ??= new List<WhatIfChange>();
            potentialChanges ??= new List<WhatIfChange>();
            diagnostics ??= new List<DeploymentDiagnosticsDefinition>();

            return new WhatIfOperationResult(
                status,
                error,
                changes?.ToList(),
                potentialChanges?.ToList(),
                diagnostics?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.WhatIfChange"/>. </summary>
        /// <param name="resourceId"> Resource ID. </param>
        /// <param name="deploymentId"> The resource id of the Deployment responsible for this change. </param>
        /// <param name="symbolicName"> The symbolic name of the resource responsible for this change. </param>
        /// <param name="identifiers"> A subset of properties that uniquely identify a Bicep extensible resource because it lacks a resource id like an Azure resource has. </param>
        /// <param name="extension"> The extension the resource was deployed with. </param>
        /// <param name="changeType"> Type of change that will be made to the resource when the deployment is executed. </param>
        /// <param name="unsupportedReason"> The explanation about why the resource is unsupported by What-If. </param>
        /// <param name="before"> The snapshot of the resource before the deployment is executed. </param>
        /// <param name="after"> The predicted snapshot of the resource after the deployment is executed. </param>
        /// <param name="delta"> The predicted changes to resource properties. </param>
        /// <returns> A new <see cref="Models.WhatIfChange"/> instance for mocking. </returns>
        public static WhatIfChange WhatIfChange(string resourceId = null, string deploymentId = null, string symbolicName = null, BinaryData identifiers = null, ArmDeploymentExtensionDefinition extension = null, WhatIfChangeType changeType = default, string unsupportedReason = null, BinaryData before = null, BinaryData after = null, IEnumerable<WhatIfPropertyChange> delta = null)
        {
            delta ??= new List<WhatIfPropertyChange>();

            return new WhatIfChange(
                resourceId,
                deploymentId,
                symbolicName,
                identifiers,
                extension,
                changeType,
                unsupportedReason,
                before,
                after,
                delta?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.WhatIfPropertyChange"/>. </summary>
        /// <param name="path"> The path of the property. </param>
        /// <param name="propertyChangeType"> The type of property change. </param>
        /// <param name="before"> The value of the property before the deployment is executed. </param>
        /// <param name="after"> The value of the property after the deployment is executed. </param>
        /// <param name="children"> Nested property changes. </param>
        /// <returns> A new <see cref="Models.WhatIfPropertyChange"/> instance for mocking. </returns>
        public static WhatIfPropertyChange WhatIfPropertyChange(string path = null, WhatIfPropertyChangeType propertyChangeType = default, BinaryData before = null, BinaryData after = null, IEnumerable<WhatIfPropertyChange> children = null)
        {
            children ??= new List<WhatIfPropertyChange>();

            return new WhatIfPropertyChange(
                path,
                propertyChangeType,
                before,
                after,
                children?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ArmDeploymentOperation"/>. </summary>
        /// <param name="id"> Full deployment operation ID. </param>
        /// <param name="operationId"> Deployment operation ID. </param>
        /// <param name="properties"> Deployment properties. </param>
        /// <returns> A new <see cref="Models.ArmDeploymentOperation"/> instance for mocking. </returns>
        public static ArmDeploymentOperation ArmDeploymentOperation(string id = null, string operationId = null, ArmDeploymentOperationProperties properties = null)
        {
            return new ArmDeploymentOperation(id, operationId, properties, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ArmDeploymentOperationProperties"/>. </summary>
        /// <param name="provisioningOperation"> The name of the current provisioning operation. </param>
        /// <param name="provisioningState"> The state of the provisioning. </param>
        /// <param name="timestamp"> The date and time of the operation. </param>
        /// <param name="duration"> The duration of the operation. </param>
        /// <param name="serviceRequestId"> Deployment operation service request id. </param>
        /// <param name="statusCode"> Operation status code from the resource provider. This property may not be set if a response has not yet been received. </param>
        /// <param name="statusMessage"> Operation status message from the resource provider. This property is optional.  It will only be provided if an error was received from the resource provider. </param>
        /// <param name="targetResource"> The target resource. </param>
        /// <param name="requestContent"> The HTTP request message. </param>
        /// <param name="responseContent"> The HTTP response message. </param>
        /// <returns> A new <see cref="Models.ArmDeploymentOperationProperties"/> instance for mocking. </returns>
        public static ArmDeploymentOperationProperties ArmDeploymentOperationProperties(ProvisioningOperationKind? provisioningOperation = null, string provisioningState = null, DateTimeOffset? timestamp = null, TimeSpan? duration = null, string serviceRequestId = null, string statusCode = null, StatusMessage statusMessage = null, TargetResource targetResource = null, BinaryData requestContent = null, BinaryData responseContent = null)
        {
            return new ArmDeploymentOperationProperties(
                provisioningOperation,
                provisioningState,
                timestamp,
                duration,
                serviceRequestId,
                statusCode,
                statusMessage,
                targetResource,
                requestContent != null ? new HttpMessage(requestContent, serializedAdditionalRawData: null) : null,
                responseContent != null ? new HttpMessage(responseContent, serializedAdditionalRawData: null) : null,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.StatusMessage"/>. </summary>
        /// <param name="status"> Status of the deployment operation. </param>
        /// <param name="error"> The error reported by the operation. </param>
        /// <returns> A new <see cref="Models.StatusMessage"/> instance for mocking. </returns>
        public static StatusMessage StatusMessage(string status = null, ResponseError error = null)
        {
            return new StatusMessage(status, error, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TargetResource"/>. </summary>
        /// <param name="id"> The Azure resource ID of the resource. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. </param>
        /// <param name="extension"> The extension the resource was deployed with. </param>
        /// <param name="identifiers"> The extensible resource identifiers. </param>
        /// <param name="apiVersion"> The API version the resource was deployed with. </param>
        /// <param name="symbolicName"> The symbolic name of the resource as defined in the deployment template. </param>
        /// <returns> A new <see cref="Models.TargetResource"/> instance for mocking. </returns>
        public static TargetResource TargetResource(string id = null, string resourceName = null, ResourceType? resourceType = null, ArmDeploymentExtensionDefinition extension = null, BinaryData identifiers = null, string apiVersion = null, string symbolicName = null)
        {
            return new TargetResource(
                id,
                resourceName,
                resourceType,
                extension,
                identifiers,
                apiVersion,
                symbolicName,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TemplateHashResult"/>. </summary>
        /// <param name="minifiedTemplate"> The minified template string. </param>
        /// <param name="templateHash"> The template hash. </param>
        /// <returns> A new <see cref="Models.TemplateHashResult"/> instance for mocking. </returns>
        public static TemplateHashResult TemplateHashResult(string minifiedTemplate = null, string templateHash = null)
        {
            return new TemplateHashResult(minifiedTemplate, templateHash, serializedAdditionalRawData: null);
        }
    }
}
