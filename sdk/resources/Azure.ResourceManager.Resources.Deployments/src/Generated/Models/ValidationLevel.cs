// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Resources.Models
{
    /// <summary> The level of validation performed on the deployment. </summary>
    public readonly partial struct ValidationLevel : IEquatable<ValidationLevel>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ValidationLevel"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ValidationLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string TemplateValue = "Template";
        private const string ProviderValue = "Provider";
        private const string ProviderNoRbacValue = "ProviderNoRbac";

        /// <summary> Static analysis of the template is performed. </summary>
        public static ValidationLevel Template { get; } = new ValidationLevel(TemplateValue);
        /// <summary> Static analysis of the template is performed and resource declarations are sent to resource providers for semantic validation. Validates that the caller has RBAC write permissions on each resource. </summary>
        public static ValidationLevel Provider { get; } = new ValidationLevel(ProviderValue);
        /// <summary> Static analysis of the template is performed and resource declarations are sent to resource providers for semantic validation. Skips validating that the caller has RBAC write permissions on each resource. </summary>
        public static ValidationLevel ProviderNoRbac { get; } = new ValidationLevel(ProviderNoRbacValue);
        /// <summary> Determines if two <see cref="ValidationLevel"/> values are the same. </summary>
        public static bool operator ==(ValidationLevel left, ValidationLevel right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ValidationLevel"/> values are not the same. </summary>
        public static bool operator !=(ValidationLevel left, ValidationLevel right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ValidationLevel"/>. </summary>
        public static implicit operator ValidationLevel(string value) => new ValidationLevel(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ValidationLevel other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ValidationLevel other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
