// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Resources.Models
{
    /// <summary> The ExtensionConfigPropertyType. </summary>
    public readonly partial struct ExtensionConfigPropertyType : IEquatable<ExtensionConfigPropertyType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ExtensionConfigPropertyType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ExtensionConfigPropertyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string StringValue = "String";
        private const string IntValue = "Int";
        private const string BoolValue = "Bool";
        private const string ArrayValue = "Array";
        private const string ObjectValue = "Object";
        private const string SecureStringValue = "SecureString";
        private const string SecureObjectValue = "SecureObject";

        /// <summary> Property type representing a string value. </summary>
        public static ExtensionConfigPropertyType String { get; } = new ExtensionConfigPropertyType(StringValue);
        /// <summary> Property type representing an integer value. </summary>
        public static ExtensionConfigPropertyType Int { get; } = new ExtensionConfigPropertyType(IntValue);
        /// <summary> Property type representing a boolean value. </summary>
        public static ExtensionConfigPropertyType Bool { get; } = new ExtensionConfigPropertyType(BoolValue);
        /// <summary> Property type representing an array value. </summary>
        public static ExtensionConfigPropertyType Array { get; } = new ExtensionConfigPropertyType(ArrayValue);
        /// <summary> Property type representing an object value. </summary>
        public static ExtensionConfigPropertyType Object { get; } = new ExtensionConfigPropertyType(ObjectValue);
        /// <summary> Property type representing a secure string value. </summary>
        public static ExtensionConfigPropertyType SecureString { get; } = new ExtensionConfigPropertyType(SecureStringValue);
        /// <summary> Property type representing a secure object value. </summary>
        public static ExtensionConfigPropertyType SecureObject { get; } = new ExtensionConfigPropertyType(SecureObjectValue);
        /// <summary> Determines if two <see cref="ExtensionConfigPropertyType"/> values are the same. </summary>
        public static bool operator ==(ExtensionConfigPropertyType left, ExtensionConfigPropertyType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ExtensionConfigPropertyType"/> values are not the same. </summary>
        public static bool operator !=(ExtensionConfigPropertyType left, ExtensionConfigPropertyType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ExtensionConfigPropertyType"/>. </summary>
        public static implicit operator ExtensionConfigPropertyType(string value) => new ExtensionConfigPropertyType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ExtensionConfigPropertyType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ExtensionConfigPropertyType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
