// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ResourceManager.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Location metadata information
    /// </summary>
    public partial class LocationMetadata
    {
        /// <summary>
        /// Initializes a new instance of the LocationMetadata class.
        /// </summary>
        public LocationMetadata()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LocationMetadata class.
        /// </summary>
        /// <param name="regionType">The type of the region. Possible values
        /// include: 'Physical', 'Logical'</param>
        /// <param name="regionCategory">The category of the region. Possible
        /// values include: 'Recommended', 'Other'</param>
        /// <param name="geographyGroup">The geography group of the
        /// location.</param>
        /// <param name="longitude">The longitude of the location.</param>
        /// <param name="latitude">The latitude of the location.</param>
        /// <param name="physicalLocation">The physical location of the Azure
        /// location.</param>
        /// <param name="pairedRegion">The regions paired to this
        /// region.</param>
        public LocationMetadata(string regionType = default(string), string regionCategory = default(string), string geographyGroup = default(string), string longitude = default(string), string latitude = default(string), string physicalLocation = default(string), IList<PairedRegion> pairedRegion = default(IList<PairedRegion>))
        {
            RegionType = regionType;
            RegionCategory = regionCategory;
            GeographyGroup = geographyGroup;
            Longitude = longitude;
            Latitude = latitude;
            PhysicalLocation = physicalLocation;
            PairedRegion = pairedRegion;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the type of the region. Possible values include: 'Physical',
        /// 'Logical'
        /// </summary>
        [JsonProperty(PropertyName = "regionType")]
        public string RegionType { get; private set; }

        /// <summary>
        /// Gets the category of the region. Possible values include:
        /// 'Recommended', 'Other'
        /// </summary>
        [JsonProperty(PropertyName = "regionCategory")]
        public string RegionCategory { get; private set; }

        /// <summary>
        /// Gets the geography group of the location.
        /// </summary>
        [JsonProperty(PropertyName = "geographyGroup")]
        public string GeographyGroup { get; private set; }

        /// <summary>
        /// Gets the longitude of the location.
        /// </summary>
        [JsonProperty(PropertyName = "longitude")]
        public string Longitude { get; private set; }

        /// <summary>
        /// Gets the latitude of the location.
        /// </summary>
        [JsonProperty(PropertyName = "latitude")]
        public string Latitude { get; private set; }

        /// <summary>
        /// Gets the physical location of the Azure location.
        /// </summary>
        [JsonProperty(PropertyName = "physicalLocation")]
        public string PhysicalLocation { get; private set; }

        /// <summary>
        /// Gets or sets the regions paired to this region.
        /// </summary>
        [JsonProperty(PropertyName = "pairedRegion")]
        public IList<PairedRegion> PairedRegion { get; set; }

    }
}
