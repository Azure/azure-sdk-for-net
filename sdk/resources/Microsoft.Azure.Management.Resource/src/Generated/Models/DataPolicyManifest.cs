// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ResourceManager.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The data policy manifest.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class DataPolicyManifest : IResource
    {
        /// <summary>
        /// Initializes a new instance of the DataPolicyManifest class.
        /// </summary>
        public DataPolicyManifest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DataPolicyManifest class.
        /// </summary>
        /// <param name="namespaces">The list of namespaces for the data policy
        /// manifest.</param>
        /// <param name="policyMode">The policy mode of the data policy
        /// manifest.</param>
        /// <param name="isBuiltInOnly">A value indicating whether policy mode
        /// is allowed only in built-in definitions.</param>
        /// <param name="resourceTypeAliases">An array of resource type
        /// aliases.</param>
        /// <param name="effects">The effect definition.</param>
        /// <param name="fieldValues">The non-alias field accessor values that
        /// can be used in the policy rule.</param>
        /// <param name="standard">The standard resource functions
        /// (subscription and/or resourceGroup).</param>
        /// <param name="custom">An array of data manifest custom resource
        /// definition.</param>
        /// <param name="id">The ID of the data policy manifest.</param>
        /// <param name="name">The name of the data policy manifest (it's the
        /// same as the Policy Mode).</param>
        /// <param name="type">The type of the resource
        /// (Microsoft.Authorization/dataPolicyManifests).</param>
        public DataPolicyManifest(IList<string> namespaces = default(IList<string>), string policyMode = default(string), bool? isBuiltInOnly = default(bool?), IList<ResourceTypeAliases> resourceTypeAliases = default(IList<ResourceTypeAliases>), IList<DataEffect> effects = default(IList<DataEffect>), IList<string> fieldValues = default(IList<string>), IList<string> standard = default(IList<string>), IList<DataManifestCustomResourceFunctionDefinition> custom = default(IList<DataManifestCustomResourceFunctionDefinition>), string id = default(string), string name = default(string), string type = default(string))
        {
            Namespaces = namespaces;
            PolicyMode = policyMode;
            IsBuiltInOnly = isBuiltInOnly;
            ResourceTypeAliases = resourceTypeAliases;
            Effects = effects;
            FieldValues = fieldValues;
            Standard = standard;
            Custom = custom;
            Id = id;
            Name = name;
            Type = type;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the list of namespaces for the data policy manifest.
        /// </summary>
        [JsonProperty(PropertyName = "properties.namespaces")]
        public IList<string> Namespaces { get; set; }

        /// <summary>
        /// Gets or sets the policy mode of the data policy manifest.
        /// </summary>
        [JsonProperty(PropertyName = "properties.policyMode")]
        public string PolicyMode { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether policy mode is allowed only
        /// in built-in definitions.
        /// </summary>
        [JsonProperty(PropertyName = "properties.isBuiltInOnly")]
        public bool? IsBuiltInOnly { get; set; }

        /// <summary>
        /// Gets or sets an array of resource type aliases.
        /// </summary>
        [JsonProperty(PropertyName = "properties.resourceTypeAliases")]
        public IList<ResourceTypeAliases> ResourceTypeAliases { get; set; }

        /// <summary>
        /// Gets or sets the effect definition.
        /// </summary>
        [JsonProperty(PropertyName = "properties.effects")]
        public IList<DataEffect> Effects { get; set; }

        /// <summary>
        /// Gets or sets the non-alias field accessor values that can be used
        /// in the policy rule.
        /// </summary>
        [JsonProperty(PropertyName = "properties.fieldValues")]
        public IList<string> FieldValues { get; set; }

        /// <summary>
        /// Gets or sets the standard resource functions (subscription and/or
        /// resourceGroup).
        /// </summary>
        [JsonProperty(PropertyName = "properties.resourceFunctions.standard")]
        public IList<string> Standard { get; set; }

        /// <summary>
        /// Gets or sets an array of data manifest custom resource definition.
        /// </summary>
        [JsonProperty(PropertyName = "properties.resourceFunctions.custom")]
        public IList<DataManifestCustomResourceFunctionDefinition> Custom { get; set; }

        /// <summary>
        /// Gets the ID of the data policy manifest.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; private set; }

        /// <summary>
        /// Gets the name of the data policy manifest (it's the same as the
        /// Policy Mode).
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets the type of the resource
        /// (Microsoft.Authorization/dataPolicyManifests).
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

    }
}
