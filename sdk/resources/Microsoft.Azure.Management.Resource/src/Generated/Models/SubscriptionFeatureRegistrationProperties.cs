// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ResourceManager.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class SubscriptionFeatureRegistrationProperties
    {
        /// <summary>
        /// Initializes a new instance of the
        /// SubscriptionFeatureRegistrationProperties class.
        /// </summary>
        public SubscriptionFeatureRegistrationProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// SubscriptionFeatureRegistrationProperties class.
        /// </summary>
        /// <param name="tenantId">The tenantId.</param>
        /// <param name="subscriptionId">The subscriptionId.</param>
        /// <param name="featureName">The featureName.</param>
        /// <param name="displayName">The featureDisplayName.</param>
        /// <param name="providerNamespace">The providerNamespace.</param>
        /// <param name="state">The state. Possible values include:
        /// 'NotSpecified', 'NotRegistered', 'Pending', 'Registering',
        /// 'Registered', 'Unregistering', 'Unregistered'</param>
        /// <param name="metadata">Key-value pairs for meta data.</param>
        /// <param name="releaseDate">The feature release date.</param>
        /// <param name="registrationDate">The feature registration
        /// date.</param>
        /// <param name="documentationLink">The feature documentation
        /// link.</param>
        /// <param name="approvalType">The feature approval type. Possible
        /// values include: 'NotSpecified', 'ApprovalRequired',
        /// 'AutoApproval'</param>
        /// <param name="shouldFeatureDisplayInPortal">Indicates whether
        /// feature should be displayed in Portal.</param>
        /// <param name="description">The feature description.</param>
        public SubscriptionFeatureRegistrationProperties(string tenantId = default(string), string subscriptionId = default(string), string featureName = default(string), string displayName = default(string), string providerNamespace = default(string), string state = default(string), AuthorizationProfile authorizationProfile = default(AuthorizationProfile), IDictionary<string, string> metadata = default(IDictionary<string, string>), System.DateTime? releaseDate = default(System.DateTime?), System.DateTime? registrationDate = default(System.DateTime?), string documentationLink = default(string), string approvalType = default(string), bool? shouldFeatureDisplayInPortal = default(bool?), string description = default(string))
        {
            TenantId = tenantId;
            SubscriptionId = subscriptionId;
            FeatureName = featureName;
            DisplayName = displayName;
            ProviderNamespace = providerNamespace;
            State = state;
            AuthorizationProfile = authorizationProfile;
            Metadata = metadata;
            ReleaseDate = releaseDate;
            RegistrationDate = registrationDate;
            DocumentationLink = documentationLink;
            ApprovalType = approvalType;
            ShouldFeatureDisplayInPortal = shouldFeatureDisplayInPortal;
            Description = description;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the tenantId.
        /// </summary>
        [JsonProperty(PropertyName = "tenantId")]
        public string TenantId { get; private set; }

        /// <summary>
        /// Gets the subscriptionId.
        /// </summary>
        [JsonProperty(PropertyName = "subscriptionId")]
        public string SubscriptionId { get; private set; }

        /// <summary>
        /// Gets the featureName.
        /// </summary>
        [JsonProperty(PropertyName = "featureName")]
        public string FeatureName { get; private set; }

        /// <summary>
        /// Gets the featureDisplayName.
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; private set; }

        /// <summary>
        /// Gets the providerNamespace.
        /// </summary>
        [JsonProperty(PropertyName = "providerNamespace")]
        public string ProviderNamespace { get; private set; }

        /// <summary>
        /// Gets or sets the state. Possible values include: 'NotSpecified',
        /// 'NotRegistered', 'Pending', 'Registering', 'Registered',
        /// 'Unregistering', 'Unregistered'
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public string State { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "authorizationProfile")]
        public AuthorizationProfile AuthorizationProfile { get; set; }

        /// <summary>
        /// Gets or sets key-value pairs for meta data.
        /// </summary>
        [JsonProperty(PropertyName = "metadata")]
        public IDictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Gets the feature release date.
        /// </summary>
        [JsonProperty(PropertyName = "releaseDate")]
        public System.DateTime? ReleaseDate { get; private set; }

        /// <summary>
        /// Gets the feature registration date.
        /// </summary>
        [JsonProperty(PropertyName = "registrationDate")]
        public System.DateTime? RegistrationDate { get; private set; }

        /// <summary>
        /// Gets the feature documentation link.
        /// </summary>
        [JsonProperty(PropertyName = "documentationLink")]
        public string DocumentationLink { get; private set; }

        /// <summary>
        /// Gets the feature approval type. Possible values include:
        /// 'NotSpecified', 'ApprovalRequired', 'AutoApproval'
        /// </summary>
        [JsonProperty(PropertyName = "approvalType")]
        public string ApprovalType { get; private set; }

        /// <summary>
        /// Gets or sets indicates whether feature should be displayed in
        /// Portal.
        /// </summary>
        [JsonProperty(PropertyName = "shouldFeatureDisplayInPortal")]
        public bool? ShouldFeatureDisplayInPortal { get; set; }

        /// <summary>
        /// Gets or sets the feature description.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DocumentationLink != null)
            {
                if (DocumentationLink.Length > 1000)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "DocumentationLink", 1000);
                }
            }
            if (Description != null)
            {
                if (Description.Length > 1000)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Description", 1000);
                }
            }
        }
    }
}
