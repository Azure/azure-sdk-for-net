// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ResourceManager.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The policy property value override.
    /// </summary>
    public partial class OverrideModel
    {
        /// <summary>
        /// Initializes a new instance of the OverrideModel class.
        /// </summary>
        public OverrideModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OverrideModel class.
        /// </summary>
        /// <param name="kind">The override kind. Possible values include:
        /// 'policyEffect'</param>
        /// <param name="value">The value to override the policy
        /// property.</param>
        /// <param name="selectors">The list of the selector
        /// expressions.</param>
        public OverrideModel(string kind = default(string), string value = default(string), IList<Selector> selectors = default(IList<Selector>))
        {
            Kind = kind;
            Value = value;
            Selectors = selectors;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the override kind. Possible values include:
        /// 'policyEffect'
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Gets or sets the value to override the policy property.
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }

        /// <summary>
        /// Gets or sets the list of the selector expressions.
        /// </summary>
        [JsonProperty(PropertyName = "selectors")]
        public IList<Selector> Selectors { get; set; }

    }
}
