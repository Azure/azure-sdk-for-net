// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ResourceManager.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The policy exemption.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class PolicyExemption : IResource
    {
        /// <summary>
        /// Initializes a new instance of the PolicyExemption class.
        /// </summary>
        public PolicyExemption()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PolicyExemption class.
        /// </summary>
        /// <param name="policyAssignmentId">The ID of the policy assignment
        /// that is being exempted.</param>
        /// <param name="exemptionCategory">The policy exemption category.
        /// Possible values are Waiver and Mitigated. Possible values include:
        /// 'Waiver', 'Mitigated'</param>
        /// <param name="policyDefinitionReferenceIds">The policy definition
        /// reference ID list when the associated policy assignment is an
        /// assignment of a policy set definition.</param>
        /// <param name="expiresOn">The expiration date and time (in UTC ISO
        /// 8601 format yyyy-MM-ddTHH:mm:ssZ) of the policy exemption.</param>
        /// <param name="displayName">The display name of the policy
        /// exemption.</param>
        /// <param name="description">The description of the policy
        /// exemption.</param>
        /// <param name="metadata">The policy exemption metadata. Metadata is
        /// an open ended object and is typically a collection of key value
        /// pairs.</param>
        /// <param name="systemData">Azure Resource Manager metadata containing
        /// createdBy and modifiedBy information.</param>
        /// <param name="id">The ID of the policy exemption.</param>
        /// <param name="name">The name of the policy exemption.</param>
        /// <param name="type">The type of the resource
        /// (Microsoft.Authorization/policyExemptions).</param>
        public PolicyExemption(string policyAssignmentId, string exemptionCategory, IList<string> policyDefinitionReferenceIds = default(IList<string>), System.DateTime? expiresOn = default(System.DateTime?), string displayName = default(string), string description = default(string), object metadata = default(object), SystemData systemData = default(SystemData), string id = default(string), string name = default(string), string type = default(string))
        {
            PolicyAssignmentId = policyAssignmentId;
            PolicyDefinitionReferenceIds = policyDefinitionReferenceIds;
            ExemptionCategory = exemptionCategory;
            ExpiresOn = expiresOn;
            DisplayName = displayName;
            Description = description;
            Metadata = metadata;
            SystemData = systemData;
            Id = id;
            Name = name;
            Type = type;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the ID of the policy assignment that is being
        /// exempted.
        /// </summary>
        [JsonProperty(PropertyName = "properties.policyAssignmentId")]
        public string PolicyAssignmentId { get; set; }

        /// <summary>
        /// Gets or sets the policy definition reference ID list when the
        /// associated policy assignment is an assignment of a policy set
        /// definition.
        /// </summary>
        [JsonProperty(PropertyName = "properties.policyDefinitionReferenceIds")]
        public IList<string> PolicyDefinitionReferenceIds { get; set; }

        /// <summary>
        /// Gets or sets the policy exemption category. Possible values are
        /// Waiver and Mitigated. Possible values include: 'Waiver',
        /// 'Mitigated'
        /// </summary>
        [JsonProperty(PropertyName = "properties.exemptionCategory")]
        public string ExemptionCategory { get; set; }

        /// <summary>
        /// Gets or sets the expiration date and time (in UTC ISO 8601 format
        /// yyyy-MM-ddTHH:mm:ssZ) of the policy exemption.
        /// </summary>
        [JsonProperty(PropertyName = "properties.expiresOn")]
        public System.DateTime? ExpiresOn { get; set; }

        /// <summary>
        /// Gets or sets the display name of the policy exemption.
        /// </summary>
        [JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the description of the policy exemption.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the policy exemption metadata. Metadata is an open
        /// ended object and is typically a collection of key value pairs.
        /// </summary>
        [JsonProperty(PropertyName = "properties.metadata")]
        public object Metadata { get; set; }

        /// <summary>
        /// Gets azure Resource Manager metadata containing createdBy and
        /// modifiedBy information.
        /// </summary>
        [JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData { get; private set; }

        /// <summary>
        /// Gets the ID of the policy exemption.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; private set; }

        /// <summary>
        /// Gets the name of the policy exemption.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets the type of the resource
        /// (Microsoft.Authorization/policyExemptions).
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (PolicyAssignmentId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PolicyAssignmentId");
            }
            if (ExemptionCategory == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ExemptionCategory");
            }
        }
    }
}
