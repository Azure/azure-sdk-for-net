// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ResourceManager
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PrivateLinkAssociationOperations.
    /// </summary>
    public static partial class PrivateLinkAssociationOperationsExtensions
    {
            /// <summary>
            /// Create a PrivateLinkAssociation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The management group ID.
            /// </param>
            /// <param name='plaId'>
            /// The ID of the PLA
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to create the private link association.
            /// </param>
            public static PrivateLinkAssociation Put(this IPrivateLinkAssociationOperations operations, string groupId, string plaId, PrivateLinkAssociationObject parameters)
            {
                return operations.PutAsync(groupId, plaId, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a PrivateLinkAssociation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The management group ID.
            /// </param>
            /// <param name='plaId'>
            /// The ID of the PLA
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to create the private link association.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PrivateLinkAssociation> PutAsync(this IPrivateLinkAssociationOperations operations, string groupId, string plaId, PrivateLinkAssociationObject parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutWithHttpMessagesAsync(groupId, plaId, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a single private link association
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The management group ID.
            /// </param>
            /// <param name='plaId'>
            /// The ID of the PLA
            /// </param>
            public static PrivateLinkAssociation Get(this IPrivateLinkAssociationOperations operations, string groupId, string plaId)
            {
                return operations.GetAsync(groupId, plaId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a single private link association
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The management group ID.
            /// </param>
            /// <param name='plaId'>
            /// The ID of the PLA
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PrivateLinkAssociation> GetAsync(this IPrivateLinkAssociationOperations operations, string groupId, string plaId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(groupId, plaId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a PrivateLinkAssociation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The management group ID.
            /// </param>
            /// <param name='plaId'>
            /// The ID of the PLA
            /// </param>
            public static void Delete(this IPrivateLinkAssociationOperations operations, string groupId, string plaId)
            {
                operations.DeleteAsync(groupId, plaId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a PrivateLinkAssociation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The management group ID.
            /// </param>
            /// <param name='plaId'>
            /// The ID of the PLA
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IPrivateLinkAssociationOperations operations, string groupId, string plaId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(groupId, plaId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a private link association for a management group scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The management group ID.
            /// </param>
            public static PrivateLinkAssociationGetResult List(this IPrivateLinkAssociationOperations operations, string groupId)
            {
                return operations.ListAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a private link association for a management group scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The management group ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PrivateLinkAssociationGetResult> ListAsync(this IPrivateLinkAssociationOperations operations, string groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
