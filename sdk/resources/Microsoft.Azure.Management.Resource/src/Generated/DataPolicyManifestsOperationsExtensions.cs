// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ResourceManager
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DataPolicyManifestsOperations.
    /// </summary>
    public static partial class DataPolicyManifestsOperationsExtensions
    {
            /// <summary>
            /// Retrieves a data policy manifest.
            /// </summary>
            /// <remarks>
            /// This operation retrieves the data policy manifest with the given policy
            /// mode.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='policyMode'>
            /// The policy mode of the data policy manifest to get.
            /// </param>
            public static DataPolicyManifest GetByPolicyMode(this IDataPolicyManifestsOperations operations, string policyMode)
            {
                return operations.GetByPolicyModeAsync(policyMode).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a data policy manifest.
            /// </summary>
            /// <remarks>
            /// This operation retrieves the data policy manifest with the given policy
            /// mode.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='policyMode'>
            /// The policy mode of the data policy manifest to get.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataPolicyManifest> GetByPolicyModeAsync(this IDataPolicyManifestsOperations operations, string policyMode, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByPolicyModeWithHttpMessagesAsync(policyMode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves data policy manifests
            /// </summary>
            /// <remarks>
            /// This operation retrieves a list of all the data policy manifests that match
            /// the optional given $filter. Valid values for $filter are:
            /// "$filter=namespace eq '{0}'". If $filter is not provided, the unfiltered
            /// list includes all data policy manifests for data resource types. If
            /// $filter=namespace is provided, the returned list only includes all data
            /// policy manifests that have a namespace matching the provided value.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation. Valid values for $filter are:
            /// "namespace eq '{value}'". If $filter is not provided, no filtering is
            /// performed. If $filter=namespace eq '{value}' is provided, the returned list
            /// only includes all data policy manifests that have a namespace matching the
            /// provided value.
            /// </param>
            public static IPage<DataPolicyManifest> List(this IDataPolicyManifestsOperations operations, string filter = default(string))
            {
                return operations.ListAsync(filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves data policy manifests
            /// </summary>
            /// <remarks>
            /// This operation retrieves a list of all the data policy manifests that match
            /// the optional given $filter. Valid values for $filter are:
            /// "$filter=namespace eq '{0}'". If $filter is not provided, the unfiltered
            /// list includes all data policy manifests for data resource types. If
            /// $filter=namespace is provided, the returned list only includes all data
            /// policy manifests that have a namespace matching the provided value.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation. Valid values for $filter are:
            /// "namespace eq '{value}'". If $filter is not provided, no filtering is
            /// performed. If $filter=namespace eq '{value}' is provided, the returned list
            /// only includes all data policy manifests that have a namespace matching the
            /// provided value.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DataPolicyManifest>> ListAsync(this IDataPolicyManifestsOperations operations, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves data policy manifests
            /// </summary>
            /// <remarks>
            /// This operation retrieves a list of all the data policy manifests that match
            /// the optional given $filter. Valid values for $filter are:
            /// "$filter=namespace eq '{0}'". If $filter is not provided, the unfiltered
            /// list includes all data policy manifests for data resource types. If
            /// $filter=namespace is provided, the returned list only includes all data
            /// policy manifests that have a namespace matching the provided value.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DataPolicyManifest> ListNext(this IDataPolicyManifestsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves data policy manifests
            /// </summary>
            /// <remarks>
            /// This operation retrieves a list of all the data policy manifests that match
            /// the optional given $filter. Valid values for $filter are:
            /// "$filter=namespace eq '{0}'". If $filter is not provided, the unfiltered
            /// list includes all data policy manifests for data resource types. If
            /// $filter=namespace is provided, the returned list only includes all data
            /// policy manifests that have a namespace matching the provided value.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DataPolicyManifest>> ListNextAsync(this IDataPolicyManifestsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
