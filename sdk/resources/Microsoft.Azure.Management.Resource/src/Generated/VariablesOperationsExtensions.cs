// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ResourceManager
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for VariablesOperations.
    /// </summary>
    public static partial class VariablesOperationsExtensions
    {
            /// <summary>
            /// Deletes a variable.
            /// </summary>
            /// <remarks>
            /// This operation deletes a variable, given its name and the subscription it
            /// was created in. The scope of a variable is the part of its ID preceding
            /// '/providers/Microsoft.Authorization/variables/{variableName}'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='variableName'>
            /// The name of the variable to operate on.
            /// </param>
            public static void Delete(this IVariablesOperations operations, string variableName)
            {
                operations.DeleteAsync(variableName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a variable.
            /// </summary>
            /// <remarks>
            /// This operation deletes a variable, given its name and the subscription it
            /// was created in. The scope of a variable is the part of its ID preceding
            /// '/providers/Microsoft.Authorization/variables/{variableName}'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='variableName'>
            /// The name of the variable to operate on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IVariablesOperations operations, string variableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(variableName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates or updates a variable.
            /// </summary>
            /// <remarks>
            /// This operation creates or updates a variable with the given subscription
            /// and name. Policy variables can only be used by a policy definition at the
            /// scope they are created or below.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='variableName'>
            /// The name of the variable to operate on.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for the variable.
            /// </param>
            public static Variable CreateOrUpdate(this IVariablesOperations operations, string variableName, Variable parameters)
            {
                return operations.CreateOrUpdateAsync(variableName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a variable.
            /// </summary>
            /// <remarks>
            /// This operation creates or updates a variable with the given subscription
            /// and name. Policy variables can only be used by a policy definition at the
            /// scope they are created or below.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='variableName'>
            /// The name of the variable to operate on.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for the variable.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Variable> CreateOrUpdateAsync(this IVariablesOperations operations, string variableName, Variable parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(variableName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves a variable.
            /// </summary>
            /// <remarks>
            /// This operation retrieves a single variable, given its name and the
            /// subscription it was created at.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='variableName'>
            /// The name of the variable to operate on.
            /// </param>
            public static Variable Get(this IVariablesOperations operations, string variableName)
            {
                return operations.GetAsync(variableName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a variable.
            /// </summary>
            /// <remarks>
            /// This operation retrieves a single variable, given its name and the
            /// subscription it was created at.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='variableName'>
            /// The name of the variable to operate on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Variable> GetAsync(this IVariablesOperations operations, string variableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(variableName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a variable.
            /// </summary>
            /// <remarks>
            /// This operation deletes a variable, given its name and the management group
            /// it was created in. The scope of a variable is the part of its ID preceding
            /// '/providers/Microsoft.Authorization/variables/{variableName}'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// The ID of the management group.
            /// </param>
            /// <param name='variableName'>
            /// The name of the variable to operate on.
            /// </param>
            public static void DeleteAtManagementGroup(this IVariablesOperations operations, string managementGroupId, string variableName)
            {
                operations.DeleteAtManagementGroupAsync(managementGroupId, variableName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a variable.
            /// </summary>
            /// <remarks>
            /// This operation deletes a variable, given its name and the management group
            /// it was created in. The scope of a variable is the part of its ID preceding
            /// '/providers/Microsoft.Authorization/variables/{variableName}'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// The ID of the management group.
            /// </param>
            /// <param name='variableName'>
            /// The name of the variable to operate on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAtManagementGroupAsync(this IVariablesOperations operations, string managementGroupId, string variableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteAtManagementGroupWithHttpMessagesAsync(managementGroupId, variableName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates or updates a variable.
            /// </summary>
            /// <remarks>
            /// This operation creates or updates a variable with the given  management
            /// group and name. Policy variables can only be used by a policy definition at
            /// the scope they are created or below.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// The ID of the management group.
            /// </param>
            /// <param name='variableName'>
            /// The name of the variable to operate on.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for the variable.
            /// </param>
            public static Variable CreateOrUpdateAtManagementGroup(this IVariablesOperations operations, string managementGroupId, string variableName, Variable parameters)
            {
                return operations.CreateOrUpdateAtManagementGroupAsync(managementGroupId, variableName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a variable.
            /// </summary>
            /// <remarks>
            /// This operation creates or updates a variable with the given  management
            /// group and name. Policy variables can only be used by a policy definition at
            /// the scope they are created or below.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// The ID of the management group.
            /// </param>
            /// <param name='variableName'>
            /// The name of the variable to operate on.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for the variable.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Variable> CreateOrUpdateAtManagementGroupAsync(this IVariablesOperations operations, string managementGroupId, string variableName, Variable parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateAtManagementGroupWithHttpMessagesAsync(managementGroupId, variableName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves a variable.
            /// </summary>
            /// <remarks>
            /// This operation retrieves a single variable, given its name and the
            /// management group it was created at.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// The ID of the management group.
            /// </param>
            /// <param name='variableName'>
            /// The name of the variable to operate on.
            /// </param>
            public static Variable GetAtManagementGroup(this IVariablesOperations operations, string managementGroupId, string variableName)
            {
                return operations.GetAtManagementGroupAsync(managementGroupId, variableName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a variable.
            /// </summary>
            /// <remarks>
            /// This operation retrieves a single variable, given its name and the
            /// management group it was created at.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// The ID of the management group.
            /// </param>
            /// <param name='variableName'>
            /// The name of the variable to operate on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Variable> GetAtManagementGroupAsync(this IVariablesOperations operations, string managementGroupId, string variableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAtManagementGroupWithHttpMessagesAsync(managementGroupId, variableName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves all variables that are at this subscription level.
            /// </summary>
            /// <remarks>
            /// This operation retrieves the list of all variables associated with the
            /// given subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<Variable> List(this IVariablesOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all variables that are at this subscription level.
            /// </summary>
            /// <remarks>
            /// This operation retrieves the list of all variables associated with the
            /// given subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Variable>> ListAsync(this IVariablesOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves all variables that are at this management group level.
            /// </summary>
            /// <remarks>
            /// This operation retrieves the list of all variables applicable to the
            /// management group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// The ID of the management group.
            /// </param>
            public static IPage<Variable> ListForManagementGroup(this IVariablesOperations operations, string managementGroupId)
            {
                return operations.ListForManagementGroupAsync(managementGroupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all variables that are at this management group level.
            /// </summary>
            /// <remarks>
            /// This operation retrieves the list of all variables applicable to the
            /// management group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// The ID of the management group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Variable>> ListForManagementGroupAsync(this IVariablesOperations operations, string managementGroupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForManagementGroupWithHttpMessagesAsync(managementGroupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves all variables that are at this subscription level.
            /// </summary>
            /// <remarks>
            /// This operation retrieves the list of all variables associated with the
            /// given subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Variable> ListNext(this IVariablesOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all variables that are at this subscription level.
            /// </summary>
            /// <remarks>
            /// This operation retrieves the list of all variables associated with the
            /// given subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Variable>> ListNextAsync(this IVariablesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves all variables that are at this management group level.
            /// </summary>
            /// <remarks>
            /// This operation retrieves the list of all variables applicable to the
            /// management group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Variable> ListForManagementGroupNext(this IVariablesOperations operations, string nextPageLink)
            {
                return operations.ListForManagementGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all variables that are at this management group level.
            /// </summary>
            /// <remarks>
            /// This operation retrieves the list of all variables applicable to the
            /// management group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Variable>> ListForManagementGroupNextAsync(this IVariablesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForManagementGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
