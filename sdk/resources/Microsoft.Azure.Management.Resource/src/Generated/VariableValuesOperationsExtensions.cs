// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ResourceManager
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for VariableValuesOperations.
    /// </summary>
    public static partial class VariableValuesOperationsExtensions
    {
            /// <summary>
            /// Deletes a variable value.
            /// </summary>
            /// <remarks>
            /// This operation deletes a variable value, given its name, the subscription
            /// it was created in, and the variable it belongs to. The scope of a variable
            /// value is the part of its ID preceding
            /// '/providers/Microsoft.Authorization/variables/{variableName}'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='variableName'>
            /// The name of the variable to operate on.
            /// </param>
            /// <param name='variableValueName'>
            /// The name of the variable value to operate on.
            /// </param>
            public static void Delete(this IVariableValuesOperations operations, string variableName, string variableValueName)
            {
                operations.DeleteAsync(variableName, variableValueName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a variable value.
            /// </summary>
            /// <remarks>
            /// This operation deletes a variable value, given its name, the subscription
            /// it was created in, and the variable it belongs to. The scope of a variable
            /// value is the part of its ID preceding
            /// '/providers/Microsoft.Authorization/variables/{variableName}'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='variableName'>
            /// The name of the variable to operate on.
            /// </param>
            /// <param name='variableValueName'>
            /// The name of the variable value to operate on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IVariableValuesOperations operations, string variableName, string variableValueName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(variableName, variableValueName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates or updates a variable value.
            /// </summary>
            /// <remarks>
            /// This operation creates or updates a variable value with the given
            /// subscription and name for a given variable. Variable values are scoped to
            /// the variable for which they are created for.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='variableName'>
            /// The name of the variable to operate on.
            /// </param>
            /// <param name='variableValueName'>
            /// The name of the variable value to operate on.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for the variable value.
            /// </param>
            public static VariableValue CreateOrUpdate(this IVariableValuesOperations operations, string variableName, string variableValueName, VariableValue parameters)
            {
                return operations.CreateOrUpdateAsync(variableName, variableValueName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a variable value.
            /// </summary>
            /// <remarks>
            /// This operation creates or updates a variable value with the given
            /// subscription and name for a given variable. Variable values are scoped to
            /// the variable for which they are created for.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='variableName'>
            /// The name of the variable to operate on.
            /// </param>
            /// <param name='variableValueName'>
            /// The name of the variable value to operate on.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for the variable value.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VariableValue> CreateOrUpdateAsync(this IVariableValuesOperations operations, string variableName, string variableValueName, VariableValue parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(variableName, variableValueName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves a variable value.
            /// </summary>
            /// <remarks>
            /// This operation retrieves a single variable value; given its name,
            /// subscription it was created at and the variable it's created for.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='variableName'>
            /// The name of the variable to operate on.
            /// </param>
            /// <param name='variableValueName'>
            /// The name of the variable value to operate on.
            /// </param>
            public static VariableValue Get(this IVariableValuesOperations operations, string variableName, string variableValueName)
            {
                return operations.GetAsync(variableName, variableValueName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a variable value.
            /// </summary>
            /// <remarks>
            /// This operation retrieves a single variable value; given its name,
            /// subscription it was created at and the variable it's created for.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='variableName'>
            /// The name of the variable to operate on.
            /// </param>
            /// <param name='variableValueName'>
            /// The name of the variable value to operate on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VariableValue> GetAsync(this IVariableValuesOperations operations, string variableName, string variableValueName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(variableName, variableValueName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List variable values for a variable.
            /// </summary>
            /// <remarks>
            /// This operation retrieves the list of all variable values associated with
            /// the given variable that is at a subscription level.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='variableName'>
            /// The name of the variable to operate on.
            /// </param>
            public static IPage<VariableValue> List(this IVariableValuesOperations operations, string variableName)
            {
                return operations.ListAsync(variableName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List variable values for a variable.
            /// </summary>
            /// <remarks>
            /// This operation retrieves the list of all variable values associated with
            /// the given variable that is at a subscription level.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='variableName'>
            /// The name of the variable to operate on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<VariableValue>> ListAsync(this IVariableValuesOperations operations, string variableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(variableName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List variable values at management group level.
            /// </summary>
            /// <remarks>
            /// This operation retrieves the list of all variable values applicable the
            /// variable indicated at the management group scope.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// The ID of the management group.
            /// </param>
            /// <param name='variableName'>
            /// The name of the variable to operate on.
            /// </param>
            public static IPage<VariableValue> ListForManagementGroup(this IVariableValuesOperations operations, string managementGroupId, string variableName)
            {
                return operations.ListForManagementGroupAsync(managementGroupId, variableName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List variable values at management group level.
            /// </summary>
            /// <remarks>
            /// This operation retrieves the list of all variable values applicable the
            /// variable indicated at the management group scope.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// The ID of the management group.
            /// </param>
            /// <param name='variableName'>
            /// The name of the variable to operate on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<VariableValue>> ListForManagementGroupAsync(this IVariableValuesOperations operations, string managementGroupId, string variableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForManagementGroupWithHttpMessagesAsync(managementGroupId, variableName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a variable value.
            /// </summary>
            /// <remarks>
            /// This operation deletes a variable value, given its name, the management
            /// group it was created in, and the variable it belongs to. The scope of a
            /// variable value is the part of its ID preceding
            /// '/providers/Microsoft.Authorization/variables/{variableName}'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// The ID of the management group.
            /// </param>
            /// <param name='variableName'>
            /// The name of the variable to operate on.
            /// </param>
            /// <param name='variableValueName'>
            /// The name of the variable value to operate on.
            /// </param>
            public static void DeleteAtManagementGroup(this IVariableValuesOperations operations, string managementGroupId, string variableName, string variableValueName)
            {
                operations.DeleteAtManagementGroupAsync(managementGroupId, variableName, variableValueName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a variable value.
            /// </summary>
            /// <remarks>
            /// This operation deletes a variable value, given its name, the management
            /// group it was created in, and the variable it belongs to. The scope of a
            /// variable value is the part of its ID preceding
            /// '/providers/Microsoft.Authorization/variables/{variableName}'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// The ID of the management group.
            /// </param>
            /// <param name='variableName'>
            /// The name of the variable to operate on.
            /// </param>
            /// <param name='variableValueName'>
            /// The name of the variable value to operate on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAtManagementGroupAsync(this IVariableValuesOperations operations, string managementGroupId, string variableName, string variableValueName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteAtManagementGroupWithHttpMessagesAsync(managementGroupId, variableName, variableValueName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates or updates a variable value.
            /// </summary>
            /// <remarks>
            /// This operation creates or updates a variable value with the given
            /// management group and name for a given variable. Variable values are scoped
            /// to the variable for which they are created for.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// The ID of the management group.
            /// </param>
            /// <param name='variableName'>
            /// The name of the variable to operate on.
            /// </param>
            /// <param name='variableValueName'>
            /// The name of the variable value to operate on.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for the variable value.
            /// </param>
            public static VariableValue CreateOrUpdateAtManagementGroup(this IVariableValuesOperations operations, string managementGroupId, string variableName, string variableValueName, VariableValue parameters)
            {
                return operations.CreateOrUpdateAtManagementGroupAsync(managementGroupId, variableName, variableValueName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a variable value.
            /// </summary>
            /// <remarks>
            /// This operation creates or updates a variable value with the given
            /// management group and name for a given variable. Variable values are scoped
            /// to the variable for which they are created for.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// The ID of the management group.
            /// </param>
            /// <param name='variableName'>
            /// The name of the variable to operate on.
            /// </param>
            /// <param name='variableValueName'>
            /// The name of the variable value to operate on.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for the variable value.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VariableValue> CreateOrUpdateAtManagementGroupAsync(this IVariableValuesOperations operations, string managementGroupId, string variableName, string variableValueName, VariableValue parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateAtManagementGroupWithHttpMessagesAsync(managementGroupId, variableName, variableValueName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves a variable value.
            /// </summary>
            /// <remarks>
            /// This operation retrieves a single variable value; given its name,
            /// management group it was created at and the variable it's created for.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// The ID of the management group.
            /// </param>
            /// <param name='variableName'>
            /// The name of the variable to operate on.
            /// </param>
            /// <param name='variableValueName'>
            /// The name of the variable value to operate on.
            /// </param>
            public static VariableValue GetAtManagementGroup(this IVariableValuesOperations operations, string managementGroupId, string variableName, string variableValueName)
            {
                return operations.GetAtManagementGroupAsync(managementGroupId, variableName, variableValueName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a variable value.
            /// </summary>
            /// <remarks>
            /// This operation retrieves a single variable value; given its name,
            /// management group it was created at and the variable it's created for.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// The ID of the management group.
            /// </param>
            /// <param name='variableName'>
            /// The name of the variable to operate on.
            /// </param>
            /// <param name='variableValueName'>
            /// The name of the variable value to operate on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VariableValue> GetAtManagementGroupAsync(this IVariableValuesOperations operations, string managementGroupId, string variableName, string variableValueName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAtManagementGroupWithHttpMessagesAsync(managementGroupId, variableName, variableValueName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List variable values for a variable.
            /// </summary>
            /// <remarks>
            /// This operation retrieves the list of all variable values associated with
            /// the given variable that is at a subscription level.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<VariableValue> ListNext(this IVariableValuesOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List variable values for a variable.
            /// </summary>
            /// <remarks>
            /// This operation retrieves the list of all variable values associated with
            /// the given variable that is at a subscription level.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<VariableValue>> ListNextAsync(this IVariableValuesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List variable values at management group level.
            /// </summary>
            /// <remarks>
            /// This operation retrieves the list of all variable values applicable the
            /// variable indicated at the management group scope.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<VariableValue> ListForManagementGroupNext(this IVariableValuesOperations operations, string nextPageLink)
            {
                return operations.ListForManagementGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List variable values at management group level.
            /// </summary>
            /// <remarks>
            /// This operation retrieves the list of all variable values applicable the
            /// variable indicated at the management group scope.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<VariableValue>> ListForManagementGroupNextAsync(this IVariableValuesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForManagementGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
