// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ResourceManager
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PolicyExemptionsOperations.
    /// </summary>
    public static partial class PolicyExemptionsOperationsExtensions
    {
            /// <summary>
            /// Deletes a policy exemption.
            /// </summary>
            /// <remarks>
            /// This operation deletes a policy exemption, given its name and the scope it
            /// was created in. The scope of a policy exemption is the part of its ID
            /// preceding
            /// '/providers/Microsoft.Authorization/policyExemptions/{policyExemptionName}'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the policy exemption. Valid scopes are: management group
            /// (format:
            /// '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
            /// subscription (format: '/subscriptions/{subscriptionId}'), resource group
            /// (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
            /// resource (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
            /// </param>
            /// <param name='policyExemptionName'>
            /// The name of the policy exemption to delete.
            /// </param>
            public static void Delete(this IPolicyExemptionsOperations operations, string scope, string policyExemptionName)
            {
                operations.DeleteAsync(scope, policyExemptionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a policy exemption.
            /// </summary>
            /// <remarks>
            /// This operation deletes a policy exemption, given its name and the scope it
            /// was created in. The scope of a policy exemption is the part of its ID
            /// preceding
            /// '/providers/Microsoft.Authorization/policyExemptions/{policyExemptionName}'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the policy exemption. Valid scopes are: management group
            /// (format:
            /// '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
            /// subscription (format: '/subscriptions/{subscriptionId}'), resource group
            /// (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
            /// resource (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
            /// </param>
            /// <param name='policyExemptionName'>
            /// The name of the policy exemption to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IPolicyExemptionsOperations operations, string scope, string policyExemptionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(scope, policyExemptionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates or updates a policy exemption.
            /// </summary>
            /// <remarks>
            /// This operation creates or updates a policy exemption with the given scope
            /// and name. Policy exemptions apply to all resources contained within their
            /// scope. For example, when you create a policy exemption at resource group
            /// scope for a policy assignment at the same or above level, the exemption
            /// exempts to all applicable resources in the resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the policy exemption. Valid scopes are: management group
            /// (format:
            /// '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
            /// subscription (format: '/subscriptions/{subscriptionId}'), resource group
            /// (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
            /// resource (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
            /// </param>
            /// <param name='policyExemptionName'>
            /// The name of the policy exemption to delete.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for the policy exemption.
            /// </param>
            public static PolicyExemption CreateOrUpdate(this IPolicyExemptionsOperations operations, string scope, string policyExemptionName, PolicyExemption parameters)
            {
                return operations.CreateOrUpdateAsync(scope, policyExemptionName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a policy exemption.
            /// </summary>
            /// <remarks>
            /// This operation creates or updates a policy exemption with the given scope
            /// and name. Policy exemptions apply to all resources contained within their
            /// scope. For example, when you create a policy exemption at resource group
            /// scope for a policy assignment at the same or above level, the exemption
            /// exempts to all applicable resources in the resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the policy exemption. Valid scopes are: management group
            /// (format:
            /// '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
            /// subscription (format: '/subscriptions/{subscriptionId}'), resource group
            /// (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
            /// resource (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
            /// </param>
            /// <param name='policyExemptionName'>
            /// The name of the policy exemption to delete.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for the policy exemption.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PolicyExemption> CreateOrUpdateAsync(this IPolicyExemptionsOperations operations, string scope, string policyExemptionName, PolicyExemption parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(scope, policyExemptionName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves a policy exemption.
            /// </summary>
            /// <remarks>
            /// This operation retrieves a single policy exemption, given its name and the
            /// scope it was created at.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the policy exemption. Valid scopes are: management group
            /// (format:
            /// '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
            /// subscription (format: '/subscriptions/{subscriptionId}'), resource group
            /// (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
            /// resource (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
            /// </param>
            /// <param name='policyExemptionName'>
            /// The name of the policy exemption to delete.
            /// </param>
            public static PolicyExemption Get(this IPolicyExemptionsOperations operations, string scope, string policyExemptionName)
            {
                return operations.GetAsync(scope, policyExemptionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a policy exemption.
            /// </summary>
            /// <remarks>
            /// This operation retrieves a single policy exemption, given its name and the
            /// scope it was created at.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the policy exemption. Valid scopes are: management group
            /// (format:
            /// '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
            /// subscription (format: '/subscriptions/{subscriptionId}'), resource group
            /// (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
            /// resource (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
            /// </param>
            /// <param name='policyExemptionName'>
            /// The name of the policy exemption to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PolicyExemption> GetAsync(this IPolicyExemptionsOperations operations, string scope, string policyExemptionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(scope, policyExemptionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves all policy exemptions that apply to a subscription.
            /// </summary>
            /// <remarks>
            /// This operation retrieves the list of all policy exemptions associated with
            /// the given subscription that match the optional given $filter. Valid values
            /// for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or
            /// 'policyAssignmentId eq '{value}''. If $filter is not provided, the
            /// unfiltered list includes all policy exemptions associated with the
            /// subscription, including those that apply directly or from management groups
            /// that contain the given subscription, as well as any applied to objects
            /// contained within the subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation. Valid values for $filter are:
            /// 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq
            /// '{value}''. If $filter is not provided, no filtering is performed. If
            /// $filter is not provided, the unfiltered list includes all policy exemptions
            /// associated with the scope, including those that apply directly or apply
            /// from containing scopes. If $filter=atScope() is provided, the returned list
            /// only includes all policy exemptions that apply to the scope, which is
            /// everything in the unfiltered list except those applied to sub scopes
            /// contained within the given scope. If $filter=atExactScope() is provided,
            /// the returned list only includes all policy exemptions that at the given
            /// scope. If $filter=excludeExpired() is provided, the returned list only
            /// includes all policy exemptions that either haven't expired or didn't set
            /// expiration date. If $filter=policyAssignmentId eq '{value}' is provided.
            /// the returned list only includes all policy exemptions that are associated
            /// with the give policyAssignmentId.
            /// </param>
            public static IPage<PolicyExemption> List(this IPolicyExemptionsOperations operations, string filter = default(string))
            {
                return operations.ListAsync(filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all policy exemptions that apply to a subscription.
            /// </summary>
            /// <remarks>
            /// This operation retrieves the list of all policy exemptions associated with
            /// the given subscription that match the optional given $filter. Valid values
            /// for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or
            /// 'policyAssignmentId eq '{value}''. If $filter is not provided, the
            /// unfiltered list includes all policy exemptions associated with the
            /// subscription, including those that apply directly or from management groups
            /// that contain the given subscription, as well as any applied to objects
            /// contained within the subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation. Valid values for $filter are:
            /// 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq
            /// '{value}''. If $filter is not provided, no filtering is performed. If
            /// $filter is not provided, the unfiltered list includes all policy exemptions
            /// associated with the scope, including those that apply directly or apply
            /// from containing scopes. If $filter=atScope() is provided, the returned list
            /// only includes all policy exemptions that apply to the scope, which is
            /// everything in the unfiltered list except those applied to sub scopes
            /// contained within the given scope. If $filter=atExactScope() is provided,
            /// the returned list only includes all policy exemptions that at the given
            /// scope. If $filter=excludeExpired() is provided, the returned list only
            /// includes all policy exemptions that either haven't expired or didn't set
            /// expiration date. If $filter=policyAssignmentId eq '{value}' is provided.
            /// the returned list only includes all policy exemptions that are associated
            /// with the give policyAssignmentId.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PolicyExemption>> ListAsync(this IPolicyExemptionsOperations operations, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves all policy exemptions that apply to a resource group.
            /// </summary>
            /// <remarks>
            /// This operation retrieves the list of all policy exemptions associated with
            /// the given resource group in the given subscription that match the optional
            /// given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()',
            /// 'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter is not
            /// provided, the unfiltered list includes all policy exemptions associated
            /// with the resource group, including those that apply directly or apply from
            /// containing scopes, as well as any applied to resources contained within the
            /// resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the resource.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation. Valid values for $filter are:
            /// 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq
            /// '{value}''. If $filter is not provided, no filtering is performed. If
            /// $filter is not provided, the unfiltered list includes all policy exemptions
            /// associated with the scope, including those that apply directly or apply
            /// from containing scopes. If $filter=atScope() is provided, the returned list
            /// only includes all policy exemptions that apply to the scope, which is
            /// everything in the unfiltered list except those applied to sub scopes
            /// contained within the given scope. If $filter=atExactScope() is provided,
            /// the returned list only includes all policy exemptions that at the given
            /// scope. If $filter=excludeExpired() is provided, the returned list only
            /// includes all policy exemptions that either haven't expired or didn't set
            /// expiration date. If $filter=policyAssignmentId eq '{value}' is provided.
            /// the returned list only includes all policy exemptions that are associated
            /// with the give policyAssignmentId.
            /// </param>
            public static IPage<PolicyExemption> ListForResourceGroup(this IPolicyExemptionsOperations operations, string resourceGroupName, string filter = default(string))
            {
                return operations.ListForResourceGroupAsync(resourceGroupName, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all policy exemptions that apply to a resource group.
            /// </summary>
            /// <remarks>
            /// This operation retrieves the list of all policy exemptions associated with
            /// the given resource group in the given subscription that match the optional
            /// given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()',
            /// 'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter is not
            /// provided, the unfiltered list includes all policy exemptions associated
            /// with the resource group, including those that apply directly or apply from
            /// containing scopes, as well as any applied to resources contained within the
            /// resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the resource.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation. Valid values for $filter are:
            /// 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq
            /// '{value}''. If $filter is not provided, no filtering is performed. If
            /// $filter is not provided, the unfiltered list includes all policy exemptions
            /// associated with the scope, including those that apply directly or apply
            /// from containing scopes. If $filter=atScope() is provided, the returned list
            /// only includes all policy exemptions that apply to the scope, which is
            /// everything in the unfiltered list except those applied to sub scopes
            /// contained within the given scope. If $filter=atExactScope() is provided,
            /// the returned list only includes all policy exemptions that at the given
            /// scope. If $filter=excludeExpired() is provided, the returned list only
            /// includes all policy exemptions that either haven't expired or didn't set
            /// expiration date. If $filter=policyAssignmentId eq '{value}' is provided.
            /// the returned list only includes all policy exemptions that are associated
            /// with the give policyAssignmentId.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PolicyExemption>> ListForResourceGroupAsync(this IPolicyExemptionsOperations operations, string resourceGroupName, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForResourceGroupWithHttpMessagesAsync(resourceGroupName, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves all policy exemptions that apply to a resource.
            /// </summary>
            /// <remarks>
            /// This operation retrieves the list of all policy exemptions associated with
            /// the specified resource in the given resource group and subscription that
            /// match the optional given $filter. Valid values for $filter are:
            /// 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq
            /// '{value}''. If $filter is not provided, the unfiltered list includes all
            /// policy exemptions associated with the resource, including those that apply
            /// directly or from all containing scopes, as well as any applied to resources
            /// contained within the resource. Three parameters plus the resource name are
            /// used to identify a specific resource. If the resource is not part of a
            /// parent resource (the more common case), the parent resource path should not
            /// be provided (or provided as ''). For example a web app could be specified
            /// as ({resourceProviderNamespace} == 'Microsoft.Web', {parentResourcePath} ==
            /// '', {resourceType} == 'sites', {resourceName} == 'MyWebApp'). If the
            /// resource is part of a parent resource, then all parameters should be
            /// provided. For example a virtual machine DNS name could be specified as
            /// ({resourceProviderNamespace} == 'Microsoft.Compute', {parentResourcePath}
            /// == 'virtualMachines/MyVirtualMachine', {resourceType} == 'domainNames',
            /// {resourceName} == 'MyComputerName'). A convenient alternative to providing
            /// the namespace and type name separately is to provide both in the
            /// {resourceType} parameter, format: ({resourceProviderNamespace} == '',
            /// {parentResourcePath} == '', {resourceType} == 'Microsoft.Web/sites',
            /// {resourceName} == 'MyWebApp').
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the resource.
            /// </param>
            /// <param name='resourceProviderNamespace'>
            /// The namespace of the resource provider. For example, the namespace of a
            /// virtual machine is Microsoft.Compute (from
            /// Microsoft.Compute/virtualMachines)
            /// </param>
            /// <param name='parentResourcePath'>
            /// The parent resource path. Use empty string if there is none.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type name. For example the type name of a web app is 'sites'
            /// (from Microsoft.Web/sites).
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation. Valid values for $filter are:
            /// 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq
            /// '{value}''. If $filter is not provided, no filtering is performed. If
            /// $filter is not provided, the unfiltered list includes all policy exemptions
            /// associated with the scope, including those that apply directly or apply
            /// from containing scopes. If $filter=atScope() is provided, the returned list
            /// only includes all policy exemptions that apply to the scope, which is
            /// everything in the unfiltered list except those applied to sub scopes
            /// contained within the given scope. If $filter=atExactScope() is provided,
            /// the returned list only includes all policy exemptions that at the given
            /// scope. If $filter=excludeExpired() is provided, the returned list only
            /// includes all policy exemptions that either haven't expired or didn't set
            /// expiration date. If $filter=policyAssignmentId eq '{value}' is provided.
            /// the returned list only includes all policy exemptions that are associated
            /// with the give policyAssignmentId.
            /// </param>
            public static IPage<PolicyExemption> ListForResource(this IPolicyExemptionsOperations operations, string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string filter = default(string))
            {
                return operations.ListForResourceAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all policy exemptions that apply to a resource.
            /// </summary>
            /// <remarks>
            /// This operation retrieves the list of all policy exemptions associated with
            /// the specified resource in the given resource group and subscription that
            /// match the optional given $filter. Valid values for $filter are:
            /// 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq
            /// '{value}''. If $filter is not provided, the unfiltered list includes all
            /// policy exemptions associated with the resource, including those that apply
            /// directly or from all containing scopes, as well as any applied to resources
            /// contained within the resource. Three parameters plus the resource name are
            /// used to identify a specific resource. If the resource is not part of a
            /// parent resource (the more common case), the parent resource path should not
            /// be provided (or provided as ''). For example a web app could be specified
            /// as ({resourceProviderNamespace} == 'Microsoft.Web', {parentResourcePath} ==
            /// '', {resourceType} == 'sites', {resourceName} == 'MyWebApp'). If the
            /// resource is part of a parent resource, then all parameters should be
            /// provided. For example a virtual machine DNS name could be specified as
            /// ({resourceProviderNamespace} == 'Microsoft.Compute', {parentResourcePath}
            /// == 'virtualMachines/MyVirtualMachine', {resourceType} == 'domainNames',
            /// {resourceName} == 'MyComputerName'). A convenient alternative to providing
            /// the namespace and type name separately is to provide both in the
            /// {resourceType} parameter, format: ({resourceProviderNamespace} == '',
            /// {parentResourcePath} == '', {resourceType} == 'Microsoft.Web/sites',
            /// {resourceName} == 'MyWebApp').
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the resource.
            /// </param>
            /// <param name='resourceProviderNamespace'>
            /// The namespace of the resource provider. For example, the namespace of a
            /// virtual machine is Microsoft.Compute (from
            /// Microsoft.Compute/virtualMachines)
            /// </param>
            /// <param name='parentResourcePath'>
            /// The parent resource path. Use empty string if there is none.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type name. For example the type name of a web app is 'sites'
            /// (from Microsoft.Web/sites).
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation. Valid values for $filter are:
            /// 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq
            /// '{value}''. If $filter is not provided, no filtering is performed. If
            /// $filter is not provided, the unfiltered list includes all policy exemptions
            /// associated with the scope, including those that apply directly or apply
            /// from containing scopes. If $filter=atScope() is provided, the returned list
            /// only includes all policy exemptions that apply to the scope, which is
            /// everything in the unfiltered list except those applied to sub scopes
            /// contained within the given scope. If $filter=atExactScope() is provided,
            /// the returned list only includes all policy exemptions that at the given
            /// scope. If $filter=excludeExpired() is provided, the returned list only
            /// includes all policy exemptions that either haven't expired or didn't set
            /// expiration date. If $filter=policyAssignmentId eq '{value}' is provided.
            /// the returned list only includes all policy exemptions that are associated
            /// with the give policyAssignmentId.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PolicyExemption>> ListForResourceAsync(this IPolicyExemptionsOperations operations, string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForResourceWithHttpMessagesAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves all policy exemptions that apply to a management group.
            /// </summary>
            /// <remarks>
            /// This operation retrieves the list of all policy exemptions applicable to
            /// the management group that match the given $filter. Valid values for $filter
            /// are: 'atScope()', 'atExactScope()', 'excludeExpired()' or
            /// 'policyAssignmentId eq '{value}''. If $filter=atScope() is provided, the
            /// returned list includes all policy exemptions that are assigned to the
            /// management group or the management group's ancestors.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// The ID of the management group.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation. Valid values for $filter are:
            /// 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq
            /// '{value}''. If $filter is not provided, no filtering is performed. If
            /// $filter is not provided, the unfiltered list includes all policy exemptions
            /// associated with the scope, including those that apply directly or apply
            /// from containing scopes. If $filter=atScope() is provided, the returned list
            /// only includes all policy exemptions that apply to the scope, which is
            /// everything in the unfiltered list except those applied to sub scopes
            /// contained within the given scope. If $filter=atExactScope() is provided,
            /// the returned list only includes all policy exemptions that at the given
            /// scope. If $filter=excludeExpired() is provided, the returned list only
            /// includes all policy exemptions that either haven't expired or didn't set
            /// expiration date. If $filter=policyAssignmentId eq '{value}' is provided.
            /// the returned list only includes all policy exemptions that are associated
            /// with the give policyAssignmentId.
            /// </param>
            public static IPage<PolicyExemption> ListForManagementGroup(this IPolicyExemptionsOperations operations, string managementGroupId, string filter = default(string))
            {
                return operations.ListForManagementGroupAsync(managementGroupId, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all policy exemptions that apply to a management group.
            /// </summary>
            /// <remarks>
            /// This operation retrieves the list of all policy exemptions applicable to
            /// the management group that match the given $filter. Valid values for $filter
            /// are: 'atScope()', 'atExactScope()', 'excludeExpired()' or
            /// 'policyAssignmentId eq '{value}''. If $filter=atScope() is provided, the
            /// returned list includes all policy exemptions that are assigned to the
            /// management group or the management group's ancestors.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// The ID of the management group.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation. Valid values for $filter are:
            /// 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq
            /// '{value}''. If $filter is not provided, no filtering is performed. If
            /// $filter is not provided, the unfiltered list includes all policy exemptions
            /// associated with the scope, including those that apply directly or apply
            /// from containing scopes. If $filter=atScope() is provided, the returned list
            /// only includes all policy exemptions that apply to the scope, which is
            /// everything in the unfiltered list except those applied to sub scopes
            /// contained within the given scope. If $filter=atExactScope() is provided,
            /// the returned list only includes all policy exemptions that at the given
            /// scope. If $filter=excludeExpired() is provided, the returned list only
            /// includes all policy exemptions that either haven't expired or didn't set
            /// expiration date. If $filter=policyAssignmentId eq '{value}' is provided.
            /// the returned list only includes all policy exemptions that are associated
            /// with the give policyAssignmentId.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PolicyExemption>> ListForManagementGroupAsync(this IPolicyExemptionsOperations operations, string managementGroupId, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForManagementGroupWithHttpMessagesAsync(managementGroupId, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves all policy exemptions that apply to a subscription.
            /// </summary>
            /// <remarks>
            /// This operation retrieves the list of all policy exemptions associated with
            /// the given subscription that match the optional given $filter. Valid values
            /// for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or
            /// 'policyAssignmentId eq '{value}''. If $filter is not provided, the
            /// unfiltered list includes all policy exemptions associated with the
            /// subscription, including those that apply directly or from management groups
            /// that contain the given subscription, as well as any applied to objects
            /// contained within the subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<PolicyExemption> ListNext(this IPolicyExemptionsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all policy exemptions that apply to a subscription.
            /// </summary>
            /// <remarks>
            /// This operation retrieves the list of all policy exemptions associated with
            /// the given subscription that match the optional given $filter. Valid values
            /// for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or
            /// 'policyAssignmentId eq '{value}''. If $filter is not provided, the
            /// unfiltered list includes all policy exemptions associated with the
            /// subscription, including those that apply directly or from management groups
            /// that contain the given subscription, as well as any applied to objects
            /// contained within the subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PolicyExemption>> ListNextAsync(this IPolicyExemptionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves all policy exemptions that apply to a resource group.
            /// </summary>
            /// <remarks>
            /// This operation retrieves the list of all policy exemptions associated with
            /// the given resource group in the given subscription that match the optional
            /// given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()',
            /// 'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter is not
            /// provided, the unfiltered list includes all policy exemptions associated
            /// with the resource group, including those that apply directly or apply from
            /// containing scopes, as well as any applied to resources contained within the
            /// resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<PolicyExemption> ListForResourceGroupNext(this IPolicyExemptionsOperations operations, string nextPageLink)
            {
                return operations.ListForResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all policy exemptions that apply to a resource group.
            /// </summary>
            /// <remarks>
            /// This operation retrieves the list of all policy exemptions associated with
            /// the given resource group in the given subscription that match the optional
            /// given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()',
            /// 'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter is not
            /// provided, the unfiltered list includes all policy exemptions associated
            /// with the resource group, including those that apply directly or apply from
            /// containing scopes, as well as any applied to resources contained within the
            /// resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PolicyExemption>> ListForResourceGroupNextAsync(this IPolicyExemptionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves all policy exemptions that apply to a resource.
            /// </summary>
            /// <remarks>
            /// This operation retrieves the list of all policy exemptions associated with
            /// the specified resource in the given resource group and subscription that
            /// match the optional given $filter. Valid values for $filter are:
            /// 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq
            /// '{value}''. If $filter is not provided, the unfiltered list includes all
            /// policy exemptions associated with the resource, including those that apply
            /// directly or from all containing scopes, as well as any applied to resources
            /// contained within the resource. Three parameters plus the resource name are
            /// used to identify a specific resource. If the resource is not part of a
            /// parent resource (the more common case), the parent resource path should not
            /// be provided (or provided as ''). For example a web app could be specified
            /// as ({resourceProviderNamespace} == 'Microsoft.Web', {parentResourcePath} ==
            /// '', {resourceType} == 'sites', {resourceName} == 'MyWebApp'). If the
            /// resource is part of a parent resource, then all parameters should be
            /// provided. For example a virtual machine DNS name could be specified as
            /// ({resourceProviderNamespace} == 'Microsoft.Compute', {parentResourcePath}
            /// == 'virtualMachines/MyVirtualMachine', {resourceType} == 'domainNames',
            /// {resourceName} == 'MyComputerName'). A convenient alternative to providing
            /// the namespace and type name separately is to provide both in the
            /// {resourceType} parameter, format: ({resourceProviderNamespace} == '',
            /// {parentResourcePath} == '', {resourceType} == 'Microsoft.Web/sites',
            /// {resourceName} == 'MyWebApp').
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<PolicyExemption> ListForResourceNext(this IPolicyExemptionsOperations operations, string nextPageLink)
            {
                return operations.ListForResourceNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all policy exemptions that apply to a resource.
            /// </summary>
            /// <remarks>
            /// This operation retrieves the list of all policy exemptions associated with
            /// the specified resource in the given resource group and subscription that
            /// match the optional given $filter. Valid values for $filter are:
            /// 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq
            /// '{value}''. If $filter is not provided, the unfiltered list includes all
            /// policy exemptions associated with the resource, including those that apply
            /// directly or from all containing scopes, as well as any applied to resources
            /// contained within the resource. Three parameters plus the resource name are
            /// used to identify a specific resource. If the resource is not part of a
            /// parent resource (the more common case), the parent resource path should not
            /// be provided (or provided as ''). For example a web app could be specified
            /// as ({resourceProviderNamespace} == 'Microsoft.Web', {parentResourcePath} ==
            /// '', {resourceType} == 'sites', {resourceName} == 'MyWebApp'). If the
            /// resource is part of a parent resource, then all parameters should be
            /// provided. For example a virtual machine DNS name could be specified as
            /// ({resourceProviderNamespace} == 'Microsoft.Compute', {parentResourcePath}
            /// == 'virtualMachines/MyVirtualMachine', {resourceType} == 'domainNames',
            /// {resourceName} == 'MyComputerName'). A convenient alternative to providing
            /// the namespace and type name separately is to provide both in the
            /// {resourceType} parameter, format: ({resourceProviderNamespace} == '',
            /// {parentResourcePath} == '', {resourceType} == 'Microsoft.Web/sites',
            /// {resourceName} == 'MyWebApp').
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PolicyExemption>> ListForResourceNextAsync(this IPolicyExemptionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForResourceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves all policy exemptions that apply to a management group.
            /// </summary>
            /// <remarks>
            /// This operation retrieves the list of all policy exemptions applicable to
            /// the management group that match the given $filter. Valid values for $filter
            /// are: 'atScope()', 'atExactScope()', 'excludeExpired()' or
            /// 'policyAssignmentId eq '{value}''. If $filter=atScope() is provided, the
            /// returned list includes all policy exemptions that are assigned to the
            /// management group or the management group's ancestors.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<PolicyExemption> ListForManagementGroupNext(this IPolicyExemptionsOperations operations, string nextPageLink)
            {
                return operations.ListForManagementGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all policy exemptions that apply to a management group.
            /// </summary>
            /// <remarks>
            /// This operation retrieves the list of all policy exemptions applicable to
            /// the management group that match the given $filter. Valid values for $filter
            /// are: 'atScope()', 'atExactScope()', 'excludeExpired()' or
            /// 'policyAssignmentId eq '{value}''. If $filter=atScope() is provided, the
            /// returned list includes all policy exemptions that are assigned to the
            /// management group or the management group's ancestors.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PolicyExemption>> ListForManagementGroupNextAsync(this IPolicyExemptionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForManagementGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
