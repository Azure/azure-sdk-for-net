// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text;
using System.Text.Json;
using System.Xml;
using Azure.Core;

namespace Azure.ResourceManager.Resources.Models
{
    public partial class AzureCliScript : IJsonModel<AzureCliScript>
    {
        void IJsonModel<AzureCliScript>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options) => ((IUtf8JsonSerializable)this).Write(writer);

        AzureCliScript IJsonModel<AzureCliScript>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            using var document = JsonDocument.ParseValue(ref reader);
            return DeserializeAzureCliScript(document.RootElement);
        }

        BinaryData IPersistableModel<AzureCliScript>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ResourceGroupData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "bicep":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(ResourceGroupData)} does not support '{options.Format}' format.");
            }
        }

        AzureCliScript IPersistableModel<AzureCliScript>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            using var document = JsonDocument.Parse(data);
            return DeserializeAzureCliScript(document.RootElement);
        }

        string IPersistableModel<AzureCliScript>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            var sb = new StringBuilder();
            sb.AppendLine($"  name: '{Name}'");
            sb.AppendLine($"  location: '{Location}'");
            sb.AppendLine($"  kind: '{Kind}'");
            if (Optional.IsCollectionDefined(Tags) && Tags.Count > 0)
            {
                sb.AppendLine($"  tags: {{");
                foreach (var kv in Tags)
                {
                    sb.AppendLine($"    '{kv.Key}': '{kv.Value}'");
                }
                sb.AppendLine($"  }}");
            }
            sb.AppendLine($"  properties: {{");
            sb.AppendLine($"    azCliVersion: '{AzCliVersion}'");
            sb.AppendLine($"    retentionInterval: '{XmlConvert.ToString(RetentionInterval)}'");
            if (Timeout.HasValue)
            {
                sb.AppendLine($"    timeout: '{XmlConvert.ToString(Timeout.Value)}'");
            }
            sb.AppendLine($"    cleanupPreference: '{CleanupPreference}'");
            if (Optional.IsCollectionDefined(EnvironmentVariables) && EnvironmentVariables.Count > 0)
            {
                sb.AppendLine($"    environmentVariables: [");
                foreach (var variable in EnvironmentVariables)
                {
                    sb.AppendLine($"      {{");
                    sb.AppendChildObject(variable, options, true, 6);
                    sb.AppendLine($"      }}");
                }
                sb.AppendLine($"    ]");
            }
            sb.AppendLine($"    scriptContent: '''");
            sb.AppendLine($"{ScriptContent}");
            sb.AppendLine($"    '''");
            sb.AppendLine($"  }}");
            return BinaryData.FromString(sb.ToString());
        }
    }
}
