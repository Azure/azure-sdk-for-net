// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Resources.Models
{
    public partial class ScriptEnvironmentVariable : IJsonModel<ScriptEnvironmentVariable>
    {
        void IJsonModel<ScriptEnvironmentVariable>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options) => ((IUtf8JsonSerializable)this).Write(writer);

        ScriptEnvironmentVariable IJsonModel<ScriptEnvironmentVariable>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            using var document = JsonDocument.ParseValue(ref reader);
            return DeserializeScriptEnvironmentVariable(document.RootElement);
        }

        BinaryData IPersistableModel<ScriptEnvironmentVariable>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ResourceGroupData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "bicep":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(ResourceGroupData)} does not support '{options.Format}' format.");
            }
        }

        ScriptEnvironmentVariable IPersistableModel<ScriptEnvironmentVariable>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            using var document = JsonDocument.Parse(data);
            return DeserializeScriptEnvironmentVariable(document.RootElement);
        }

        string IPersistableModel<ScriptEnvironmentVariable>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            var sb = new StringBuilder();
            sb.AppendLine($"  name: '{Name}'");
            if (Optional.IsDefined(Value))
            {
                string value = Value.StartsWith("_p_.", StringComparison.Ordinal) ? Value.Substring(4) : $"'{Value}'";
                sb.AppendLine($"  value: {value}");
            }
            if (Optional.IsDefined(SecureValue))
            {
                string value = SecureValue.StartsWith("_p_.", StringComparison.Ordinal) ? SecureValue.Substring(4) : $"'{SecureValue}'";
                sb.AppendLine($"  secureValue: {value}");
            }
            return BinaryData.FromString(sb.ToString());
        }
    }
}
