// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.Resources
{
<<<<<<< HEAD:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ArmApplicationCollection.cs
    /// <summary> A class representing collection of ArmApplication and their operations over its parent. </summary>
    public partial class ArmApplicationCollection : ArmCollection, IEnumerable<ArmApplication>, IAsyncEnumerable<ArmApplication>
=======
    /// <summary> A class representing collection of Application and their operations over its parent. </summary>
    public partial class ApplicationCollection : ArmCollection, IEnumerable<ApplicationResource>, IAsyncEnumerable<ApplicationResource>
>>>>>>> ac26fe3cdb1f0f614cbd1bd9ba2a7ae2cdffe46b:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ApplicationCollection.cs
    {
        private readonly ClientDiagnostics _armApplicationApplicationsClientDiagnostics;
        private readonly ApplicationsRestOperations _armApplicationApplicationsRestClient;

        /// <summary> Initializes a new instance of the <see cref="ArmApplicationCollection"/> class for mocking. </summary>
        protected ArmApplicationCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ArmApplicationCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal ArmApplicationCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
<<<<<<< HEAD:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ArmApplicationCollection.cs
            _armApplicationApplicationsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Resources", ArmApplication.ResourceType.Namespace, DiagnosticOptions);
            TryGetApiVersion(ArmApplication.ResourceType, out string armApplicationApplicationsApiVersion);
            _armApplicationApplicationsRestClient = new ApplicationsRestOperations(Pipeline, DiagnosticOptions.ApplicationId, BaseUri, armApplicationApplicationsApiVersion);
=======
            _applicationClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Resources", ApplicationResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ApplicationResource.ResourceType, out string applicationApiVersion);
            _applicationRestClient = new ApplicationsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, applicationApiVersion);
>>>>>>> ac26fe3cdb1f0f614cbd1bd9ba2a7ae2cdffe46b:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ApplicationCollection.cs
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Creates a new managed application.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applications/{applicationName}
        /// Operation Id: Applications_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> "F:Azure.WaitUntil.Completed" if the method should wait to return until the long-running operation has completed on the service; "F:Azure.WaitUntil.Started" if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="applicationName"> The name of the managed application. </param>
        /// <param name="parameters"> Parameters supplied to the create or update a managed application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="applicationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationName"/> or <paramref name="parameters"/> is null. </exception>
<<<<<<< HEAD:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ArmApplicationCollection.cs
        public virtual async Task<ArmOperation<ArmApplication>> CreateOrUpdateAsync(WaitUntil waitUntil, string applicationName, ArmApplicationData parameters, CancellationToken cancellationToken = default)
=======
        public virtual async Task<ArmOperation<ApplicationResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string applicationName, ApplicationData parameters, CancellationToken cancellationToken = default)
>>>>>>> ac26fe3cdb1f0f614cbd1bd9ba2a7ae2cdffe46b:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ApplicationCollection.cs
        {
            Argument.AssertNotNullOrEmpty(applicationName, nameof(applicationName));
            Argument.AssertNotNull(parameters, nameof(parameters));

            using var scope = _armApplicationApplicationsClientDiagnostics.CreateScope("ArmApplicationCollection.CreateOrUpdate");
            scope.Start();
            try
            {
<<<<<<< HEAD:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ArmApplicationCollection.cs
                var response = await _armApplicationApplicationsRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, applicationName, parameters, cancellationToken).ConfigureAwait(false);
                var operation = new ResourcesArmOperation<ArmApplication>(new ArmApplicationOperationSource(Client), _armApplicationApplicationsClientDiagnostics, Pipeline, _armApplicationApplicationsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, applicationName, parameters).Request, response, OperationFinalStateVia.Location);
=======
                var response = await _applicationRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, applicationName, parameters, cancellationToken).ConfigureAwait(false);
                var operation = new ResourcesArmOperation<ApplicationResource>(new ApplicationOperationSource(Client), _applicationClientDiagnostics, Pipeline, _applicationRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, applicationName, parameters).Request, response, OperationFinalStateVia.Location);
>>>>>>> ac26fe3cdb1f0f614cbd1bd9ba2a7ae2cdffe46b:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ApplicationCollection.cs
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates a new managed application.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applications/{applicationName}
        /// Operation Id: Applications_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> "F:Azure.WaitUntil.Completed" if the method should wait to return until the long-running operation has completed on the service; "F:Azure.WaitUntil.Started" if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="applicationName"> The name of the managed application. </param>
        /// <param name="parameters"> Parameters supplied to the create or update a managed application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="applicationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationName"/> or <paramref name="parameters"/> is null. </exception>
<<<<<<< HEAD:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ArmApplicationCollection.cs
        public virtual ArmOperation<ArmApplication> CreateOrUpdate(WaitUntil waitUntil, string applicationName, ArmApplicationData parameters, CancellationToken cancellationToken = default)
=======
        public virtual ArmOperation<ApplicationResource> CreateOrUpdate(WaitUntil waitUntil, string applicationName, ApplicationData parameters, CancellationToken cancellationToken = default)
>>>>>>> ac26fe3cdb1f0f614cbd1bd9ba2a7ae2cdffe46b:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ApplicationCollection.cs
        {
            Argument.AssertNotNullOrEmpty(applicationName, nameof(applicationName));
            Argument.AssertNotNull(parameters, nameof(parameters));

            using var scope = _armApplicationApplicationsClientDiagnostics.CreateScope("ArmApplicationCollection.CreateOrUpdate");
            scope.Start();
            try
            {
<<<<<<< HEAD:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ArmApplicationCollection.cs
                var response = _armApplicationApplicationsRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, applicationName, parameters, cancellationToken);
                var operation = new ResourcesArmOperation<ArmApplication>(new ArmApplicationOperationSource(Client), _armApplicationApplicationsClientDiagnostics, Pipeline, _armApplicationApplicationsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, applicationName, parameters).Request, response, OperationFinalStateVia.Location);
=======
                var response = _applicationRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, applicationName, parameters, cancellationToken);
                var operation = new ResourcesArmOperation<ApplicationResource>(new ApplicationOperationSource(Client), _applicationClientDiagnostics, Pipeline, _applicationRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, applicationName, parameters).Request, response, OperationFinalStateVia.Location);
>>>>>>> ac26fe3cdb1f0f614cbd1bd9ba2a7ae2cdffe46b:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ApplicationCollection.cs
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the managed application.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applications/{applicationName}
        /// Operation Id: Applications_Get
        /// </summary>
        /// <param name="applicationName"> The name of the managed application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="applicationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationName"/> is null. </exception>
<<<<<<< HEAD:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ArmApplicationCollection.cs
        public virtual async Task<Response<ArmApplication>> GetAsync(string applicationName, CancellationToken cancellationToken = default)
=======
        public virtual async Task<Response<ApplicationResource>> GetAsync(string applicationName, CancellationToken cancellationToken = default)
>>>>>>> ac26fe3cdb1f0f614cbd1bd9ba2a7ae2cdffe46b:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ApplicationCollection.cs
        {
            Argument.AssertNotNullOrEmpty(applicationName, nameof(applicationName));

            using var scope = _armApplicationApplicationsClientDiagnostics.CreateScope("ArmApplicationCollection.Get");
            scope.Start();
            try
            {
                var response = await _armApplicationApplicationsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, applicationName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
<<<<<<< HEAD:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ArmApplicationCollection.cs
                return Response.FromValue(new ArmApplication(Client, response.Value), response.GetRawResponse());
=======
                return Response.FromValue(new ApplicationResource(Client, response.Value), response.GetRawResponse());
>>>>>>> ac26fe3cdb1f0f614cbd1bd9ba2a7ae2cdffe46b:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ApplicationCollection.cs
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the managed application.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applications/{applicationName}
        /// Operation Id: Applications_Get
        /// </summary>
        /// <param name="applicationName"> The name of the managed application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="applicationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationName"/> is null. </exception>
<<<<<<< HEAD:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ArmApplicationCollection.cs
        public virtual Response<ArmApplication> Get(string applicationName, CancellationToken cancellationToken = default)
=======
        public virtual Response<ApplicationResource> Get(string applicationName, CancellationToken cancellationToken = default)
>>>>>>> ac26fe3cdb1f0f614cbd1bd9ba2a7ae2cdffe46b:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ApplicationCollection.cs
        {
            Argument.AssertNotNullOrEmpty(applicationName, nameof(applicationName));

            using var scope = _armApplicationApplicationsClientDiagnostics.CreateScope("ArmApplicationCollection.Get");
            scope.Start();
            try
            {
                var response = _armApplicationApplicationsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, applicationName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
<<<<<<< HEAD:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ArmApplicationCollection.cs
                return Response.FromValue(new ArmApplication(Client, response.Value), response.GetRawResponse());
=======
                return Response.FromValue(new ApplicationResource(Client, response.Value), response.GetRawResponse());
>>>>>>> ac26fe3cdb1f0f614cbd1bd9ba2a7ae2cdffe46b:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ApplicationCollection.cs
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets all the applications within a resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applications
        /// Operation Id: Applications_ListByResourceGroup
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
<<<<<<< HEAD:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ArmApplicationCollection.cs
        /// <returns> An async collection of <see cref="ArmApplication" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ArmApplication> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ArmApplication>> FirstPageFunc(int? pageSizeHint)
=======
        /// <returns> An async collection of <see cref="ApplicationResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ApplicationResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ApplicationResource>> FirstPageFunc(int? pageSizeHint)
>>>>>>> ac26fe3cdb1f0f614cbd1bd9ba2a7ae2cdffe46b:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ApplicationCollection.cs
            {
                using var scope = _armApplicationApplicationsClientDiagnostics.CreateScope("ArmApplicationCollection.GetAll");
                scope.Start();
                try
                {
<<<<<<< HEAD:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ArmApplicationCollection.cs
                    var response = await _armApplicationApplicationsRestClient.ListByResourceGroupAsync(Id.SubscriptionId, Id.ResourceGroupName, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ArmApplication(Client, value)), response.Value.NextLink, response.GetRawResponse());
=======
                    var response = await _applicationRestClient.ListByResourceGroupAsync(Id.SubscriptionId, Id.ResourceGroupName, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ApplicationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
>>>>>>> ac26fe3cdb1f0f614cbd1bd9ba2a7ae2cdffe46b:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ApplicationCollection.cs
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
<<<<<<< HEAD:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ArmApplicationCollection.cs
            async Task<Page<ArmApplication>> NextPageFunc(string nextLink, int? pageSizeHint)
=======
            async Task<Page<ApplicationResource>> NextPageFunc(string nextLink, int? pageSizeHint)
>>>>>>> ac26fe3cdb1f0f614cbd1bd9ba2a7ae2cdffe46b:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ApplicationCollection.cs
            {
                using var scope = _armApplicationApplicationsClientDiagnostics.CreateScope("ArmApplicationCollection.GetAll");
                scope.Start();
                try
                {
<<<<<<< HEAD:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ArmApplicationCollection.cs
                    var response = await _armApplicationApplicationsRestClient.ListByResourceGroupNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ArmApplication(Client, value)), response.Value.NextLink, response.GetRawResponse());
=======
                    var response = await _applicationRestClient.ListByResourceGroupNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ApplicationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
>>>>>>> ac26fe3cdb1f0f614cbd1bd9ba2a7ae2cdffe46b:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ApplicationCollection.cs
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets all the applications within a resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applications
        /// Operation Id: Applications_ListByResourceGroup
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
<<<<<<< HEAD:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ArmApplicationCollection.cs
        /// <returns> A collection of <see cref="ArmApplication" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ArmApplication> GetAll(CancellationToken cancellationToken = default)
        {
            Page<ArmApplication> FirstPageFunc(int? pageSizeHint)
=======
        /// <returns> A collection of <see cref="ApplicationResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ApplicationResource> GetAll(CancellationToken cancellationToken = default)
        {
            Page<ApplicationResource> FirstPageFunc(int? pageSizeHint)
>>>>>>> ac26fe3cdb1f0f614cbd1bd9ba2a7ae2cdffe46b:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ApplicationCollection.cs
            {
                using var scope = _armApplicationApplicationsClientDiagnostics.CreateScope("ArmApplicationCollection.GetAll");
                scope.Start();
                try
                {
<<<<<<< HEAD:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ArmApplicationCollection.cs
                    var response = _armApplicationApplicationsRestClient.ListByResourceGroup(Id.SubscriptionId, Id.ResourceGroupName, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ArmApplication(Client, value)), response.Value.NextLink, response.GetRawResponse());
=======
                    var response = _applicationRestClient.ListByResourceGroup(Id.SubscriptionId, Id.ResourceGroupName, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ApplicationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
>>>>>>> ac26fe3cdb1f0f614cbd1bd9ba2a7ae2cdffe46b:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ApplicationCollection.cs
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
<<<<<<< HEAD:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ArmApplicationCollection.cs
            Page<ArmApplication> NextPageFunc(string nextLink, int? pageSizeHint)
=======
            Page<ApplicationResource> NextPageFunc(string nextLink, int? pageSizeHint)
>>>>>>> ac26fe3cdb1f0f614cbd1bd9ba2a7ae2cdffe46b:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ApplicationCollection.cs
            {
                using var scope = _armApplicationApplicationsClientDiagnostics.CreateScope("ArmApplicationCollection.GetAll");
                scope.Start();
                try
                {
<<<<<<< HEAD:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ArmApplicationCollection.cs
                    var response = _armApplicationApplicationsRestClient.ListByResourceGroupNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ArmApplication(Client, value)), response.Value.NextLink, response.GetRawResponse());
=======
                    var response = _applicationRestClient.ListByResourceGroupNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ApplicationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
>>>>>>> ac26fe3cdb1f0f614cbd1bd9ba2a7ae2cdffe46b:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ApplicationCollection.cs
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applications/{applicationName}
        /// Operation Id: Applications_Get
        /// </summary>
        /// <param name="applicationName"> The name of the managed application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="applicationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string applicationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(applicationName, nameof(applicationName));

            using var scope = _armApplicationApplicationsClientDiagnostics.CreateScope("ArmApplicationCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(applicationName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applications/{applicationName}
        /// Operation Id: Applications_Get
        /// </summary>
        /// <param name="applicationName"> The name of the managed application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="applicationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationName"/> is null. </exception>
        public virtual Response<bool> Exists(string applicationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(applicationName, nameof(applicationName));

            using var scope = _armApplicationApplicationsClientDiagnostics.CreateScope("ArmApplicationCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(applicationName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applications/{applicationName}
        /// Operation Id: Applications_Get
        /// </summary>
        /// <param name="applicationName"> The name of the managed application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="applicationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationName"/> is null. </exception>
<<<<<<< HEAD:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ArmApplicationCollection.cs
        public virtual async Task<Response<ArmApplication>> GetIfExistsAsync(string applicationName, CancellationToken cancellationToken = default)
=======
        public virtual async Task<Response<ApplicationResource>> GetIfExistsAsync(string applicationName, CancellationToken cancellationToken = default)
>>>>>>> ac26fe3cdb1f0f614cbd1bd9ba2a7ae2cdffe46b:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ApplicationCollection.cs
        {
            Argument.AssertNotNullOrEmpty(applicationName, nameof(applicationName));

            using var scope = _armApplicationApplicationsClientDiagnostics.CreateScope("ArmApplicationCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _armApplicationApplicationsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, applicationName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
<<<<<<< HEAD:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ArmApplicationCollection.cs
                    return Response.FromValue<ArmApplication>(null, response.GetRawResponse());
                return Response.FromValue(new ArmApplication(Client, response.Value), response.GetRawResponse());
=======
                    return Response.FromValue<ApplicationResource>(null, response.GetRawResponse());
                return Response.FromValue(new ApplicationResource(Client, response.Value), response.GetRawResponse());
>>>>>>> ac26fe3cdb1f0f614cbd1bd9ba2a7ae2cdffe46b:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ApplicationCollection.cs
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applications/{applicationName}
        /// Operation Id: Applications_Get
        /// </summary>
        /// <param name="applicationName"> The name of the managed application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="applicationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationName"/> is null. </exception>
<<<<<<< HEAD:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ArmApplicationCollection.cs
        public virtual Response<ArmApplication> GetIfExists(string applicationName, CancellationToken cancellationToken = default)
=======
        public virtual Response<ApplicationResource> GetIfExists(string applicationName, CancellationToken cancellationToken = default)
>>>>>>> ac26fe3cdb1f0f614cbd1bd9ba2a7ae2cdffe46b:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ApplicationCollection.cs
        {
            Argument.AssertNotNullOrEmpty(applicationName, nameof(applicationName));

            using var scope = _armApplicationApplicationsClientDiagnostics.CreateScope("ArmApplicationCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _armApplicationApplicationsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, applicationName, cancellationToken: cancellationToken);
                if (response.Value == null)
<<<<<<< HEAD:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ArmApplicationCollection.cs
                    return Response.FromValue<ArmApplication>(null, response.GetRawResponse());
                return Response.FromValue(new ArmApplication(Client, response.Value), response.GetRawResponse());
=======
                    return Response.FromValue<ApplicationResource>(null, response.GetRawResponse());
                return Response.FromValue(new ApplicationResource(Client, response.Value), response.GetRawResponse());
>>>>>>> ac26fe3cdb1f0f614cbd1bd9ba2a7ae2cdffe46b:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ApplicationCollection.cs
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

<<<<<<< HEAD:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ArmApplicationCollection.cs
        IEnumerator<ArmApplication> IEnumerable<ArmApplication>.GetEnumerator()
=======
        IEnumerator<ApplicationResource> IEnumerable<ApplicationResource>.GetEnumerator()
>>>>>>> ac26fe3cdb1f0f614cbd1bd9ba2a7ae2cdffe46b:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ApplicationCollection.cs
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

<<<<<<< HEAD:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ArmApplicationCollection.cs
        IAsyncEnumerator<ArmApplication> IAsyncEnumerable<ArmApplication>.GetAsyncEnumerator(CancellationToken cancellationToken)
=======
        IAsyncEnumerator<ApplicationResource> IAsyncEnumerable<ApplicationResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
>>>>>>> ac26fe3cdb1f0f614cbd1bd9ba2a7ae2cdffe46b:sdk/resources/Azure.ResourceManager.Resources/src/Generated/ApplicationCollection.cs
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
