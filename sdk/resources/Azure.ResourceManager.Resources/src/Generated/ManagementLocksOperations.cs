// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.Resources
{
    /// <summary> The ManagementLocks service client. </summary>
    public partial class ManagementLocksOperations
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal ManagementLocksRestOperations RestClient { get; }
        /// <summary> Initializes a new instance of ManagementLocksOperations for mocking. </summary>
        protected ManagementLocksOperations()
        {
        }
        /// <summary> Initializes a new instance of ManagementLocksOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="endpoint"> server parameter. </param>
        internal ManagementLocksOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string subscriptionId, Uri endpoint = null)
        {
            RestClient = new ManagementLocksRestOperations(clientDiagnostics, pipeline, subscriptionId, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> When you apply a lock at a parent scope, all child resources inherit the same lock. To create management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
        /// <param name="resourceGroupName"> The name of the resource group to lock. </param>
        /// <param name="lockName"> The lock name. The lock name can be a maximum of 260 characters. It cannot contain &lt;, &gt; %, &amp;, :, \, ?, /, or any control characters. </param>
        /// <param name="parameters"> The management lock parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ManagementLockObject>> CreateOrUpdateAtResourceGroupLevelAsync(string resourceGroupName, string lockName, ManagementLockObject parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ManagementLocksOperations.CreateOrUpdateAtResourceGroupLevel");
            scope.Start();
            try
            {
                return await RestClient.CreateOrUpdateAtResourceGroupLevelAsync(resourceGroupName, lockName, parameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> When you apply a lock at a parent scope, all child resources inherit the same lock. To create management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
        /// <param name="resourceGroupName"> The name of the resource group to lock. </param>
        /// <param name="lockName"> The lock name. The lock name can be a maximum of 260 characters. It cannot contain &lt;, &gt; %, &amp;, :, \, ?, /, or any control characters. </param>
        /// <param name="parameters"> The management lock parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ManagementLockObject> CreateOrUpdateAtResourceGroupLevel(string resourceGroupName, string lockName, ManagementLockObject parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ManagementLocksOperations.CreateOrUpdateAtResourceGroupLevel");
            scope.Start();
            try
            {
                return RestClient.CreateOrUpdateAtResourceGroupLevel(resourceGroupName, lockName, parameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> To delete management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
        /// <param name="resourceGroupName"> The name of the resource group containing the lock. </param>
        /// <param name="lockName"> The name of lock to delete. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteAtResourceGroupLevelAsync(string resourceGroupName, string lockName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ManagementLocksOperations.DeleteAtResourceGroupLevel");
            scope.Start();
            try
            {
                return await RestClient.DeleteAtResourceGroupLevelAsync(resourceGroupName, lockName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> To delete management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
        /// <param name="resourceGroupName"> The name of the resource group containing the lock. </param>
        /// <param name="lockName"> The name of lock to delete. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteAtResourceGroupLevel(string resourceGroupName, string lockName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ManagementLocksOperations.DeleteAtResourceGroupLevel");
            scope.Start();
            try
            {
                return RestClient.DeleteAtResourceGroupLevel(resourceGroupName, lockName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a management lock at the resource group level. </summary>
        /// <param name="resourceGroupName"> The name of the locked resource group. </param>
        /// <param name="lockName"> The name of the lock to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ManagementLockObject>> GetAtResourceGroupLevelAsync(string resourceGroupName, string lockName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ManagementLocksOperations.GetAtResourceGroupLevel");
            scope.Start();
            try
            {
                return await RestClient.GetAtResourceGroupLevelAsync(resourceGroupName, lockName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a management lock at the resource group level. </summary>
        /// <param name="resourceGroupName"> The name of the locked resource group. </param>
        /// <param name="lockName"> The name of the lock to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ManagementLockObject> GetAtResourceGroupLevel(string resourceGroupName, string lockName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ManagementLocksOperations.GetAtResourceGroupLevel");
            scope.Start();
            try
            {
                return RestClient.GetAtResourceGroupLevel(resourceGroupName, lockName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update a management lock by scope. </summary>
        /// <param name="scope"> The scope for the lock. When providing a scope for the assignment, use &apos;/subscriptions/{subscriptionId}&apos; for subscriptions, &apos;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}&apos; for resource groups, and &apos;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}&apos; for resources. </param>
        /// <param name="lockName"> The name of lock. </param>
        /// <param name="parameters"> Create or update management lock parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ManagementLockObject>> CreateOrUpdateByScopeAsync(string scope, string lockName, ManagementLockObject parameters, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("ManagementLocksOperations.CreateOrUpdateByScope");
            scope0.Start();
            try
            {
                return await RestClient.CreateOrUpdateByScopeAsync(scope, lockName, parameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update a management lock by scope. </summary>
        /// <param name="scope"> The scope for the lock. When providing a scope for the assignment, use &apos;/subscriptions/{subscriptionId}&apos; for subscriptions, &apos;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}&apos; for resource groups, and &apos;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}&apos; for resources. </param>
        /// <param name="lockName"> The name of lock. </param>
        /// <param name="parameters"> Create or update management lock parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ManagementLockObject> CreateOrUpdateByScope(string scope, string lockName, ManagementLockObject parameters, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("ManagementLocksOperations.CreateOrUpdateByScope");
            scope0.Start();
            try
            {
                return RestClient.CreateOrUpdateByScope(scope, lockName, parameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a management lock by scope. </summary>
        /// <param name="scope"> The scope for the lock. </param>
        /// <param name="lockName"> The name of lock. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteByScopeAsync(string scope, string lockName, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("ManagementLocksOperations.DeleteByScope");
            scope0.Start();
            try
            {
                return await RestClient.DeleteByScopeAsync(scope, lockName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a management lock by scope. </summary>
        /// <param name="scope"> The scope for the lock. </param>
        /// <param name="lockName"> The name of lock. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteByScope(string scope, string lockName, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("ManagementLocksOperations.DeleteByScope");
            scope0.Start();
            try
            {
                return RestClient.DeleteByScope(scope, lockName, cancellationToken);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> Get a management lock by scope. </summary>
        /// <param name="scope"> The scope for the lock. </param>
        /// <param name="lockName"> The name of lock. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ManagementLockObject>> GetByScopeAsync(string scope, string lockName, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("ManagementLocksOperations.GetByScope");
            scope0.Start();
            try
            {
                return await RestClient.GetByScopeAsync(scope, lockName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> Get a management lock by scope. </summary>
        /// <param name="scope"> The scope for the lock. </param>
        /// <param name="lockName"> The name of lock. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ManagementLockObject> GetByScope(string scope, string lockName, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("ManagementLocksOperations.GetByScope");
            scope0.Start();
            try
            {
                return RestClient.GetByScope(scope, lockName, cancellationToken);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> When you apply a lock at a parent scope, all child resources inherit the same lock. To create management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
        /// <param name="resourceGroupName"> The name of the resource group containing the resource to lock. </param>
        /// <param name="resourceProviderNamespace"> The resource provider namespace of the resource to lock. </param>
        /// <param name="parentResourcePath"> The parent resource identity. </param>
        /// <param name="resourceType"> The resource type of the resource to lock. </param>
        /// <param name="resourceName"> The name of the resource to lock. </param>
        /// <param name="lockName"> The name of lock. The lock name can be a maximum of 260 characters. It cannot contain &lt;, &gt; %, &amp;, :, \, ?, /, or any control characters. </param>
        /// <param name="parameters"> Parameters for creating or updating a  management lock. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ManagementLockObject>> CreateOrUpdateAtResourceLevelAsync(string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string lockName, ManagementLockObject parameters, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("ManagementLocksOperations.CreateOrUpdateAtResourceLevel");
            scope0.Start();
            try
            {
                return await RestClient.CreateOrUpdateAtResourceLevelAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, lockName, parameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> When you apply a lock at a parent scope, all child resources inherit the same lock. To create management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
        /// <param name="resourceGroupName"> The name of the resource group containing the resource to lock. </param>
        /// <param name="resourceProviderNamespace"> The resource provider namespace of the resource to lock. </param>
        /// <param name="parentResourcePath"> The parent resource identity. </param>
        /// <param name="resourceType"> The resource type of the resource to lock. </param>
        /// <param name="resourceName"> The name of the resource to lock. </param>
        /// <param name="lockName"> The name of lock. The lock name can be a maximum of 260 characters. It cannot contain &lt;, &gt; %, &amp;, :, \, ?, /, or any control characters. </param>
        /// <param name="parameters"> Parameters for creating or updating a  management lock. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ManagementLockObject> CreateOrUpdateAtResourceLevel(string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string lockName, ManagementLockObject parameters, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("ManagementLocksOperations.CreateOrUpdateAtResourceLevel");
            scope0.Start();
            try
            {
                return RestClient.CreateOrUpdateAtResourceLevel(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, lockName, parameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> To delete management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
        /// <param name="resourceGroupName"> The name of the resource group containing the resource with the lock to delete. </param>
        /// <param name="resourceProviderNamespace"> The resource provider namespace of the resource with the lock to delete. </param>
        /// <param name="parentResourcePath"> The parent resource identity. </param>
        /// <param name="resourceType"> The resource type of the resource with the lock to delete. </param>
        /// <param name="resourceName"> The name of the resource with the lock to delete. </param>
        /// <param name="lockName"> The name of the lock to delete. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteAtResourceLevelAsync(string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string lockName, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("ManagementLocksOperations.DeleteAtResourceLevel");
            scope0.Start();
            try
            {
                return await RestClient.DeleteAtResourceLevelAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, lockName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> To delete management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
        /// <param name="resourceGroupName"> The name of the resource group containing the resource with the lock to delete. </param>
        /// <param name="resourceProviderNamespace"> The resource provider namespace of the resource with the lock to delete. </param>
        /// <param name="parentResourcePath"> The parent resource identity. </param>
        /// <param name="resourceType"> The resource type of the resource with the lock to delete. </param>
        /// <param name="resourceName"> The name of the resource with the lock to delete. </param>
        /// <param name="lockName"> The name of the lock to delete. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteAtResourceLevel(string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string lockName, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("ManagementLocksOperations.DeleteAtResourceLevel");
            scope0.Start();
            try
            {
                return RestClient.DeleteAtResourceLevel(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, lockName, cancellationToken);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> Get the management lock of a resource or any level below resource. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
        /// <param name="parentResourcePath"> An extra path parameter needed in some services, like SQL Databases. </param>
        /// <param name="resourceType"> The type of the resource. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="lockName"> The name of lock. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ManagementLockObject>> GetAtResourceLevelAsync(string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string lockName, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("ManagementLocksOperations.GetAtResourceLevel");
            scope0.Start();
            try
            {
                return await RestClient.GetAtResourceLevelAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, lockName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> Get the management lock of a resource or any level below resource. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
        /// <param name="parentResourcePath"> An extra path parameter needed in some services, like SQL Databases. </param>
        /// <param name="resourceType"> The type of the resource. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="lockName"> The name of lock. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ManagementLockObject> GetAtResourceLevel(string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string lockName, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("ManagementLocksOperations.GetAtResourceLevel");
            scope0.Start();
            try
            {
                return RestClient.GetAtResourceLevel(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, lockName, cancellationToken);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> When you apply a lock at a parent scope, all child resources inherit the same lock. To create management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
        /// <param name="lockName"> The name of lock. The lock name can be a maximum of 260 characters. It cannot contain &lt;, &gt; %, &amp;, :, \, ?, /, or any control characters. </param>
        /// <param name="parameters"> The management lock parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ManagementLockObject>> CreateOrUpdateAtSubscriptionLevelAsync(string lockName, ManagementLockObject parameters, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("ManagementLocksOperations.CreateOrUpdateAtSubscriptionLevel");
            scope0.Start();
            try
            {
                return await RestClient.CreateOrUpdateAtSubscriptionLevelAsync(lockName, parameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> When you apply a lock at a parent scope, all child resources inherit the same lock. To create management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
        /// <param name="lockName"> The name of lock. The lock name can be a maximum of 260 characters. It cannot contain &lt;, &gt; %, &amp;, :, \, ?, /, or any control characters. </param>
        /// <param name="parameters"> The management lock parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ManagementLockObject> CreateOrUpdateAtSubscriptionLevel(string lockName, ManagementLockObject parameters, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("ManagementLocksOperations.CreateOrUpdateAtSubscriptionLevel");
            scope0.Start();
            try
            {
                return RestClient.CreateOrUpdateAtSubscriptionLevel(lockName, parameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> To delete management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
        /// <param name="lockName"> The name of lock to delete. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteAtSubscriptionLevelAsync(string lockName, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("ManagementLocksOperations.DeleteAtSubscriptionLevel");
            scope0.Start();
            try
            {
                return await RestClient.DeleteAtSubscriptionLevelAsync(lockName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> To delete management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions. </summary>
        /// <param name="lockName"> The name of lock to delete. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteAtSubscriptionLevel(string lockName, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("ManagementLocksOperations.DeleteAtSubscriptionLevel");
            scope0.Start();
            try
            {
                return RestClient.DeleteAtSubscriptionLevel(lockName, cancellationToken);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a management lock at the subscription level. </summary>
        /// <param name="lockName"> The name of the lock to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ManagementLockObject>> GetAtSubscriptionLevelAsync(string lockName, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("ManagementLocksOperations.GetAtSubscriptionLevel");
            scope0.Start();
            try
            {
                return await RestClient.GetAtSubscriptionLevelAsync(lockName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a management lock at the subscription level. </summary>
        /// <param name="lockName"> The name of the lock to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ManagementLockObject> GetAtSubscriptionLevel(string lockName, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("ManagementLocksOperations.GetAtSubscriptionLevel");
            scope0.Start();
            try
            {
                return RestClient.GetAtSubscriptionLevel(lockName, cancellationToken);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> Gets all the management locks for a resource group. </summary>
        /// <param name="resourceGroupName"> The name of the resource group containing the locks to get. </param>
        /// <param name="filter"> The filter to apply on the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<ManagementLockObject> ListAtResourceGroupLevelAsync(string resourceGroupName, string filter = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }

            async Task<Page<ManagementLockObject>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("ManagementLocksOperations.ListAtResourceGroupLevel");
                scope0.Start();
                try
                {
                    var response = await RestClient.ListAtResourceGroupLevelAsync(resourceGroupName, filter, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            async Task<Page<ManagementLockObject>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("ManagementLocksOperations.ListAtResourceGroupLevel");
                scope0.Start();
                try
                {
                    var response = await RestClient.ListAtResourceGroupLevelNextPageAsync(nextLink, resourceGroupName, filter, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets all the management locks for a resource group. </summary>
        /// <param name="resourceGroupName"> The name of the resource group containing the locks to get. </param>
        /// <param name="filter"> The filter to apply on the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<ManagementLockObject> ListAtResourceGroupLevel(string resourceGroupName, string filter = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }

            Page<ManagementLockObject> FirstPageFunc(int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("ManagementLocksOperations.ListAtResourceGroupLevel");
                scope0.Start();
                try
                {
                    var response = RestClient.ListAtResourceGroupLevel(resourceGroupName, filter, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            Page<ManagementLockObject> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("ManagementLocksOperations.ListAtResourceGroupLevel");
                scope0.Start();
                try
                {
                    var response = RestClient.ListAtResourceGroupLevelNextPage(nextLink, resourceGroupName, filter, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets all the management locks for a resource or any level below resource. </summary>
        /// <param name="resourceGroupName"> The name of the resource group containing the locked resource. The name is case insensitive. </param>
        /// <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
        /// <param name="parentResourcePath"> The parent resource identity. </param>
        /// <param name="resourceType"> The resource type of the locked resource. </param>
        /// <param name="resourceName"> The name of the locked resource. </param>
        /// <param name="filter"> The filter to apply on the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<ManagementLockObject> ListAtResourceLevelAsync(string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string filter = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (resourceProviderNamespace == null)
            {
                throw new ArgumentNullException(nameof(resourceProviderNamespace));
            }
            if (parentResourcePath == null)
            {
                throw new ArgumentNullException(nameof(parentResourcePath));
            }
            if (resourceType == null)
            {
                throw new ArgumentNullException(nameof(resourceType));
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException(nameof(resourceName));
            }

            async Task<Page<ManagementLockObject>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("ManagementLocksOperations.ListAtResourceLevel");
                scope0.Start();
                try
                {
                    var response = await RestClient.ListAtResourceLevelAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            async Task<Page<ManagementLockObject>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("ManagementLocksOperations.ListAtResourceLevel");
                scope0.Start();
                try
                {
                    var response = await RestClient.ListAtResourceLevelNextPageAsync(nextLink, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets all the management locks for a resource or any level below resource. </summary>
        /// <param name="resourceGroupName"> The name of the resource group containing the locked resource. The name is case insensitive. </param>
        /// <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
        /// <param name="parentResourcePath"> The parent resource identity. </param>
        /// <param name="resourceType"> The resource type of the locked resource. </param>
        /// <param name="resourceName"> The name of the locked resource. </param>
        /// <param name="filter"> The filter to apply on the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<ManagementLockObject> ListAtResourceLevel(string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string filter = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (resourceProviderNamespace == null)
            {
                throw new ArgumentNullException(nameof(resourceProviderNamespace));
            }
            if (parentResourcePath == null)
            {
                throw new ArgumentNullException(nameof(parentResourcePath));
            }
            if (resourceType == null)
            {
                throw new ArgumentNullException(nameof(resourceType));
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException(nameof(resourceName));
            }

            Page<ManagementLockObject> FirstPageFunc(int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("ManagementLocksOperations.ListAtResourceLevel");
                scope0.Start();
                try
                {
                    var response = RestClient.ListAtResourceLevel(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            Page<ManagementLockObject> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("ManagementLocksOperations.ListAtResourceLevel");
                scope0.Start();
                try
                {
                    var response = RestClient.ListAtResourceLevelNextPage(nextLink, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets all the management locks for a subscription. </summary>
        /// <param name="filter"> The filter to apply on the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<ManagementLockObject> ListAtSubscriptionLevelAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<ManagementLockObject>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("ManagementLocksOperations.ListAtSubscriptionLevel");
                scope0.Start();
                try
                {
                    var response = await RestClient.ListAtSubscriptionLevelAsync(filter, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            async Task<Page<ManagementLockObject>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("ManagementLocksOperations.ListAtSubscriptionLevel");
                scope0.Start();
                try
                {
                    var response = await RestClient.ListAtSubscriptionLevelNextPageAsync(nextLink, filter, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets all the management locks for a subscription. </summary>
        /// <param name="filter"> The filter to apply on the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<ManagementLockObject> ListAtSubscriptionLevel(string filter = null, CancellationToken cancellationToken = default)
        {
            Page<ManagementLockObject> FirstPageFunc(int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("ManagementLocksOperations.ListAtSubscriptionLevel");
                scope0.Start();
                try
                {
                    var response = RestClient.ListAtSubscriptionLevel(filter, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            Page<ManagementLockObject> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("ManagementLocksOperations.ListAtSubscriptionLevel");
                scope0.Start();
                try
                {
                    var response = RestClient.ListAtSubscriptionLevelNextPage(nextLink, filter, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets all the management locks for a scope. </summary>
        /// <param name="scope"> The scope for the lock. When providing a scope for the assignment, use &apos;/subscriptions/{subscriptionId}&apos; for subscriptions, &apos;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}&apos; for resource groups, and &apos;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}&apos; for resources. </param>
        /// <param name="filter"> The filter to apply on the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<ManagementLockObject> ListByScopeAsync(string scope, string filter = null, CancellationToken cancellationToken = default)
        {
            if (scope == null)
            {
                throw new ArgumentNullException(nameof(scope));
            }

            async Task<Page<ManagementLockObject>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("ManagementLocksOperations.ListByScope");
                scope0.Start();
                try
                {
                    var response = await RestClient.ListByScopeAsync(scope, filter, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            async Task<Page<ManagementLockObject>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("ManagementLocksOperations.ListByScope");
                scope0.Start();
                try
                {
                    var response = await RestClient.ListByScopeNextPageAsync(nextLink, scope, filter, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets all the management locks for a scope. </summary>
        /// <param name="scope"> The scope for the lock. When providing a scope for the assignment, use &apos;/subscriptions/{subscriptionId}&apos; for subscriptions, &apos;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}&apos; for resource groups, and &apos;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}&apos; for resources. </param>
        /// <param name="filter"> The filter to apply on the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<ManagementLockObject> ListByScope(string scope, string filter = null, CancellationToken cancellationToken = default)
        {
            if (scope == null)
            {
                throw new ArgumentNullException(nameof(scope));
            }

            Page<ManagementLockObject> FirstPageFunc(int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("ManagementLocksOperations.ListByScope");
                scope0.Start();
                try
                {
                    var response = RestClient.ListByScope(scope, filter, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            Page<ManagementLockObject> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("ManagementLocksOperations.ListByScope");
                scope0.Start();
                try
                {
                    var response = RestClient.ListByScopeNextPage(nextLink, scope, filter, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
