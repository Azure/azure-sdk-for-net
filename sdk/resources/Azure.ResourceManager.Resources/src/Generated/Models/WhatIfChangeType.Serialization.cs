// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.Resources.Models
{
    internal static partial class WhatIfChangeTypeExtensions
    {
        public static string ToSerialString(this WhatIfChangeType value) => value switch
        {
            WhatIfChangeType.Create => "Create",
            WhatIfChangeType.Delete => "Delete",
            WhatIfChangeType.Ignore => "Ignore",
            WhatIfChangeType.Deploy => "Deploy",
            WhatIfChangeType.NoChange => "NoChange",
            WhatIfChangeType.Modify => "Modify",
            WhatIfChangeType.Unsupported => "Unsupported",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown WhatIfChangeType value.")
        };

        public static WhatIfChangeType ToWhatIfChangeType(this string value)
        {
            if (string.Equals(value, "Create", StringComparison.InvariantCultureIgnoreCase)) return WhatIfChangeType.Create;
            if (string.Equals(value, "Delete", StringComparison.InvariantCultureIgnoreCase)) return WhatIfChangeType.Delete;
            if (string.Equals(value, "Ignore", StringComparison.InvariantCultureIgnoreCase)) return WhatIfChangeType.Ignore;
            if (string.Equals(value, "Deploy", StringComparison.InvariantCultureIgnoreCase)) return WhatIfChangeType.Deploy;
            if (string.Equals(value, "NoChange", StringComparison.InvariantCultureIgnoreCase)) return WhatIfChangeType.NoChange;
            if (string.Equals(value, "Modify", StringComparison.InvariantCultureIgnoreCase)) return WhatIfChangeType.Modify;
            if (string.Equals(value, "Unsupported", StringComparison.InvariantCultureIgnoreCase)) return WhatIfChangeType.Unsupported;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown WhatIfChangeType value.");
        }
    }
}
