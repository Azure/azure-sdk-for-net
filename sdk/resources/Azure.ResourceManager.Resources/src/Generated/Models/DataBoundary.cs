// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Resources.Models
{
    /// <summary> The data boundary definition. </summary>
    public readonly partial struct DataBoundary : IEquatable<DataBoundary>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DataBoundary"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DataBoundary(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotDefinedValue = "NotDefined";
        private const string GlobalValue = "Global";
        private const string EUValue = "EU";

        /// <summary> NotDefined. </summary>
        public static DataBoundary NotDefined { get; } = new DataBoundary(NotDefinedValue);
        /// <summary> Global. </summary>
        public static DataBoundary Global { get; } = new DataBoundary(GlobalValue);
        /// <summary> EU. </summary>
        public static DataBoundary EU { get; } = new DataBoundary(EUValue);
        /// <summary> Determines if two <see cref="DataBoundary"/> values are the same. </summary>
        public static bool operator ==(DataBoundary left, DataBoundary right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DataBoundary"/> values are not the same. </summary>
        public static bool operator !=(DataBoundary left, DataBoundary right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DataBoundary"/>. </summary>
        public static implicit operator DataBoundary(string value) => new DataBoundary(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DataBoundary other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DataBoundary other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
