// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.Resources.Models
{
    /// <summary> The policy definition. </summary>
    public partial class PolicyDefinition
    {
        /// <summary> Initializes a new instance of PolicyDefinition. </summary>
        public PolicyDefinition()
        {
            Parameters = new ChangeTrackingDictionary<string, ParameterDefinitionsValue>();
        }

        /// <summary> Initializes a new instance of PolicyDefinition. </summary>
        /// <param name="id"> The ID of the policy definition. </param>
        /// <param name="name"> The name of the policy definition. </param>
        /// <param name="type"> The type of the resource (Microsoft.Authorization/policyDefinitions). </param>
        /// <param name="policyType"> The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static. </param>
        /// <param name="mode"> The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data. </param>
        /// <param name="displayName"> The display name of the policy definition. </param>
        /// <param name="description"> The policy definition description. </param>
        /// <param name="policyRule"> The policy rule. </param>
        /// <param name="metadata"> The policy definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs. </param>
        /// <param name="parameters"> The parameter definitions for parameters used in the policy rule. The keys are the parameter names. </param>
        internal PolicyDefinition(string id, string name, string type, PolicyType? policyType, string mode, string displayName, string description, object policyRule, object metadata, IDictionary<string, ParameterDefinitionsValue> parameters)
        {
            Id = id;
            Name = name;
            Type = type;
            PolicyType = policyType;
            Mode = mode;
            DisplayName = displayName;
            Description = description;
            PolicyRule = policyRule;
            Metadata = metadata;
            Parameters = parameters;
        }

        /// <summary> The ID of the policy definition. </summary>
        public string Id { get; }
        /// <summary> The name of the policy definition. </summary>
        public string Name { get; }
        /// <summary> The type of the resource (Microsoft.Authorization/policyDefinitions). </summary>
        public string Type { get; }
        /// <summary> The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static. </summary>
        public PolicyType? PolicyType { get; set; }
        /// <summary> The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data. </summary>
        public string Mode { get; set; }
        /// <summary> The display name of the policy definition. </summary>
        public string DisplayName { get; set; }
        /// <summary> The policy definition description. </summary>
        public string Description { get; set; }
        /// <summary> The policy rule. </summary>
        public object PolicyRule { get; set; }
        /// <summary> The policy definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs. </summary>
        public object Metadata { get; set; }
        /// <summary> The parameter definitions for parameters used in the policy rule. The keys are the parameter names. </summary>
        public IDictionary<string, ParameterDefinitionsValue> Parameters { get; }
    }
}
