// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Resources.Models
{
    public partial class ScriptConfigurationBase : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(PrimaryScriptUri))
            {
                writer.WritePropertyName("primaryScriptUri");
                writer.WriteStringValue(PrimaryScriptUri);
            }
            if (Optional.IsDefined(SupportingScriptUris))
            {
                writer.WritePropertyName("supportingScriptUris");
                writer.WriteStartArray();
                foreach (var item in SupportingScriptUris)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ScriptContent))
            {
                writer.WritePropertyName("scriptContent");
                writer.WriteStringValue(ScriptContent);
            }
            if (Optional.IsDefined(Arguments))
            {
                writer.WritePropertyName("arguments");
                writer.WriteStringValue(Arguments);
            }
            if (Optional.IsDefined(EnvironmentVariables))
            {
                writer.WritePropertyName("environmentVariables");
                writer.WriteStartArray();
                foreach (var item in EnvironmentVariables)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ForceUpdateTag))
            {
                writer.WritePropertyName("forceUpdateTag");
                writer.WriteStringValue(ForceUpdateTag);
            }
            writer.WritePropertyName("retentionInterval");
            writer.WriteStringValue(RetentionInterval, "P");
            if (Optional.IsDefined(Timeout))
            {
                writer.WritePropertyName("timeout");
                writer.WriteStringValue(Timeout.Value, "P");
            }
            writer.WriteEndObject();
        }

        internal static ScriptConfigurationBase DeserializeScriptConfigurationBase(JsonElement element)
        {
            Optional<string> primaryScriptUri = default;
            Optional<IList<string>> supportingScriptUris = default;
            Optional<string> scriptContent = default;
            Optional<string> arguments = default;
            Optional<IList<EnvironmentVariable>> environmentVariables = default;
            Optional<string> forceUpdateTag = default;
            TimeSpan retentionInterval = default;
            Optional<TimeSpan> timeout = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("primaryScriptUri"))
                {
                    primaryScriptUri = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("supportingScriptUris"))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    supportingScriptUris = array;
                    continue;
                }
                if (property.NameEquals("scriptContent"))
                {
                    scriptContent = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("arguments"))
                {
                    arguments = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("environmentVariables"))
                {
                    List<EnvironmentVariable> array = new List<EnvironmentVariable>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(EnvironmentVariable.DeserializeEnvironmentVariable(item));
                        }
                    }
                    environmentVariables = array;
                    continue;
                }
                if (property.NameEquals("forceUpdateTag"))
                {
                    forceUpdateTag = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("retentionInterval"))
                {
                    retentionInterval = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("timeout"))
                {
                    timeout = property.Value.GetTimeSpan("P");
                    continue;
                }
            }
            return new ScriptConfigurationBase(primaryScriptUri.HasValue ? primaryScriptUri.Value : null, new ChangeTrackingList<string>(supportingScriptUris), scriptContent.HasValue ? scriptContent.Value : null, arguments.HasValue ? arguments.Value : null, new ChangeTrackingList<EnvironmentVariable>(environmentVariables), forceUpdateTag.HasValue ? forceUpdateTag.Value : null, retentionInterval, timeout.HasValue ? timeout.Value : (TimeSpan?)null);
        }
    }
}
