// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Resources.Models
{
    public partial class ApplicationJitAccessPolicy : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("jitAccessEnabled");
            writer.WriteBooleanValue(JitAccessEnabled);
            if (Optional.IsDefined(JitApprovalMode))
            {
                writer.WritePropertyName("jitApprovalMode");
                writer.WriteStringValue(JitApprovalMode.Value.ToString());
            }
            if (Optional.IsCollectionDefined(JitApprovers))
            {
                writer.WritePropertyName("jitApprovers");
                writer.WriteStartArray();
                foreach (var item in JitApprovers)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(MaximumJitAccessDuration))
            {
                writer.WritePropertyName("maximumJitAccessDuration");
                writer.WriteStringValue(MaximumJitAccessDuration);
            }
            writer.WriteEndObject();
        }

        internal static ApplicationJitAccessPolicy DeserializeApplicationJitAccessPolicy(JsonElement element)
        {
            bool jitAccessEnabled = default;
            Optional<JitApprovalMode> jitApprovalMode = default;
            Optional<IList<JitApproverDefinition>> jitApprovers = default;
            Optional<string> maximumJitAccessDuration = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("jitAccessEnabled"))
                {
                    jitAccessEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("jitApprovalMode"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    jitApprovalMode = new JitApprovalMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("jitApprovers"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<JitApproverDefinition> array = new List<JitApproverDefinition>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(JitApproverDefinition.DeserializeJitApproverDefinition(item));
                    }
                    jitApprovers = array;
                    continue;
                }
                if (property.NameEquals("maximumJitAccessDuration"))
                {
                    maximumJitAccessDuration = property.Value.GetString();
                    continue;
                }
            }
            return new ApplicationJitAccessPolicy(jitAccessEnabled, Optional.ToNullable(jitApprovalMode), Optional.ToList(jitApprovers), maximumJitAccessDuration.Value);
        }
    }
}
