// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Resources.Models
{
    /// <summary> Specifies an action for a newly unmanaged resource. Delete will attempt to delete the resource from Azure. Detach will leave the resource in it's current state. </summary>
    public readonly partial struct ArmDeploymentStackDeleteDetachEnum : IEquatable<ArmDeploymentStackDeleteDetachEnum>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ArmDeploymentStackDeleteDetachEnum"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ArmDeploymentStackDeleteDetachEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DeleteValue = "delete";
        private const string DetachValue = "detach";

        /// <summary> delete. </summary>
        public static ArmDeploymentStackDeleteDetachEnum Delete { get; } = new ArmDeploymentStackDeleteDetachEnum(DeleteValue);
        /// <summary> detach. </summary>
        public static ArmDeploymentStackDeleteDetachEnum Detach { get; } = new ArmDeploymentStackDeleteDetachEnum(DetachValue);
        /// <summary> Determines if two <see cref="ArmDeploymentStackDeleteDetachEnum"/> values are the same. </summary>
        public static bool operator ==(ArmDeploymentStackDeleteDetachEnum left, ArmDeploymentStackDeleteDetachEnum right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ArmDeploymentStackDeleteDetachEnum"/> values are not the same. </summary>
        public static bool operator !=(ArmDeploymentStackDeleteDetachEnum left, ArmDeploymentStackDeleteDetachEnum right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ArmDeploymentStackDeleteDetachEnum"/>. </summary>
        public static implicit operator ArmDeploymentStackDeleteDetachEnum(string value) => new ArmDeploymentStackDeleteDetachEnum(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ArmDeploymentStackDeleteDetachEnum other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ArmDeploymentStackDeleteDetachEnum other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
