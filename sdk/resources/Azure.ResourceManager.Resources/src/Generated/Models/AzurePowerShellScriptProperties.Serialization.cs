// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Resources.Models
{
    public partial class AzurePowerShellScriptProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("azPowerShellVersion");
            writer.WriteStringValue(AzPowerShellVersion);
            if (Optional.IsDefined(PrimaryScriptUri))
            {
                writer.WritePropertyName("primaryScriptUri");
                writer.WriteStringValue(PrimaryScriptUri);
            }
            if (Optional.IsCollectionDefined(SupportingScriptUris))
            {
                writer.WritePropertyName("supportingScriptUris");
                writer.WriteStartArray();
                foreach (var item in SupportingScriptUris)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ScriptContent))
            {
                writer.WritePropertyName("scriptContent");
                writer.WriteStringValue(ScriptContent);
            }
            if (Optional.IsDefined(Arguments))
            {
                writer.WritePropertyName("arguments");
                writer.WriteStringValue(Arguments);
            }
            if (Optional.IsCollectionDefined(EnvironmentVariables))
            {
                writer.WritePropertyName("environmentVariables");
                writer.WriteStartArray();
                foreach (var item in EnvironmentVariables)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ForceUpdateTag))
            {
                writer.WritePropertyName("forceUpdateTag");
                writer.WriteStringValue(ForceUpdateTag);
            }
            writer.WritePropertyName("retentionInterval");
            writer.WriteStringValue(RetentionInterval, "P");
            if (Optional.IsDefined(Timeout))
            {
                writer.WritePropertyName("timeout");
                writer.WriteStringValue(Timeout.Value, "P");
            }
            if (Optional.IsDefined(ContainerSettings))
            {
                writer.WritePropertyName("containerSettings");
                writer.WriteObjectValue(ContainerSettings);
            }
            if (Optional.IsDefined(StorageAccountSettings))
            {
                writer.WritePropertyName("storageAccountSettings");
                writer.WriteObjectValue(StorageAccountSettings);
            }
            if (Optional.IsDefined(CleanupPreference))
            {
                writer.WritePropertyName("cleanupPreference");
                writer.WriteStringValue(CleanupPreference.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static AzurePowerShellScriptProperties DeserializeAzurePowerShellScriptProperties(JsonElement element)
        {
            string azPowerShellVersion = default;
            Optional<string> primaryScriptUri = default;
            Optional<IList<string>> supportingScriptUris = default;
            Optional<string> scriptContent = default;
            Optional<string> arguments = default;
            Optional<IList<EnvironmentVariable>> environmentVariables = default;
            Optional<string> forceUpdateTag = default;
            TimeSpan retentionInterval = default;
            Optional<TimeSpan> timeout = default;
            Optional<ContainerConfiguration> containerSettings = default;
            Optional<StorageAccountConfiguration> storageAccountSettings = default;
            Optional<CleanupOptions> cleanupPreference = default;
            Optional<ScriptProvisioningState> provisioningState = default;
            Optional<ScriptStatus> status = default;
            Optional<IDictionary<string, object>> outputs = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("azPowerShellVersion"))
                {
                    azPowerShellVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("primaryScriptUri"))
                {
                    primaryScriptUri = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("supportingScriptUris"))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    supportingScriptUris = array;
                    continue;
                }
                if (property.NameEquals("scriptContent"))
                {
                    scriptContent = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("arguments"))
                {
                    arguments = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("environmentVariables"))
                {
                    List<EnvironmentVariable> array = new List<EnvironmentVariable>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EnvironmentVariable.DeserializeEnvironmentVariable(item));
                    }
                    environmentVariables = array;
                    continue;
                }
                if (property.NameEquals("forceUpdateTag"))
                {
                    forceUpdateTag = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("retentionInterval"))
                {
                    retentionInterval = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("timeout"))
                {
                    timeout = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("containerSettings"))
                {
                    containerSettings = ContainerConfiguration.DeserializeContainerConfiguration(property.Value);
                    continue;
                }
                if (property.NameEquals("storageAccountSettings"))
                {
                    storageAccountSettings = StorageAccountConfiguration.DeserializeStorageAccountConfiguration(property.Value);
                    continue;
                }
                if (property.NameEquals("cleanupPreference"))
                {
                    cleanupPreference = new CleanupOptions(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("provisioningState"))
                {
                    provisioningState = new ScriptProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("status"))
                {
                    status = ScriptStatus.DeserializeScriptStatus(property.Value);
                    continue;
                }
                if (property.NameEquals("outputs"))
                {
                    Dictionary<string, object> dictionary = new Dictionary<string, object>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetObject());
                    }
                    outputs = dictionary;
                    continue;
                }
            }
            return new AzurePowerShellScriptProperties(containerSettings.Value, storageAccountSettings.Value, Optional.ToNullable(cleanupPreference), Optional.ToNullable(provisioningState), status.Value, Optional.ToDictionary(outputs), azPowerShellVersion, primaryScriptUri.Value, Optional.ToList(supportingScriptUris), scriptContent.Value, arguments.Value, Optional.ToList(environmentVariables), forceUpdateTag.Value, retentionInterval, Optional.ToNullable(timeout));
        }
    }
}
