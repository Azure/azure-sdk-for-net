// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Resources.Models
{
    /// <summary> Properties of the Azure PowerShell script object. </summary>
    public partial class AzurePowerShellScriptProperties : DeploymentScriptPropertiesBase
    {
        /// <summary> Initializes a new instance of AzurePowerShellScriptProperties. </summary>
        /// <param name="azPowerShellVersion"> Azure PowerShell module version to be used. </param>
        /// <param name="retentionInterval"> Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P7D means one week). </param>
        public AzurePowerShellScriptProperties(string azPowerShellVersion, TimeSpan retentionInterval)
        {
            if (azPowerShellVersion == null)
            {
                throw new ArgumentNullException(nameof(azPowerShellVersion));
            }

            AzPowerShellVersion = azPowerShellVersion;
            RetentionInterval = retentionInterval;
        }

        /// <summary> Initializes a new instance of AzurePowerShellScriptProperties. </summary>
        /// <param name="containerSettings"> Container settings. </param>
        /// <param name="storageAccountSettings"> Storage Account settings. </param>
        /// <param name="cleanupPreference"> The clean up preference when the script execution gets in a terminal state. Default setting is &apos;Always&apos;. </param>
        /// <param name="provisioningState"> State of the script execution. This only appears in the response. </param>
        /// <param name="status"> Contains the results of script execution. </param>
        /// <param name="outputs"> List of script outputs. </param>
        /// <param name="azPowerShellVersion"> Azure PowerShell module version to be used. </param>
        /// <param name="primaryScriptUri"> Uri for the script. This is the entry point for the external script. </param>
        /// <param name="supportingScriptUris"> Supporting files for the external script. </param>
        /// <param name="scriptContent"> Script body. </param>
        /// <param name="arguments"> Command line arguments to pass to the script. Arguments are separated by spaces. ex: -Name blue* -Location &apos;West US 2&apos;. </param>
        /// <param name="environmentVariables"> The environment variables to pass over to the script. </param>
        /// <param name="forceUpdateTag"> Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID. </param>
        /// <param name="retentionInterval"> Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P7D means one week). </param>
        /// <param name="timeout"> Maximum allowed script execution time specified in ISO 8601 format. Default value is PT1H. </param>
        internal AzurePowerShellScriptProperties(ContainerConfiguration containerSettings, StorageAccountConfiguration storageAccountSettings, CleanupOptions? cleanupPreference, ScriptProvisioningState? provisioningState, ScriptStatus status, IDictionary<string, object> outputs, string azPowerShellVersion, string primaryScriptUri, IList<string> supportingScriptUris, string scriptContent, string arguments, IList<EnvironmentVariable> environmentVariables, string forceUpdateTag, TimeSpan retentionInterval, TimeSpan? timeout) : base(containerSettings, storageAccountSettings, cleanupPreference, provisioningState, status, outputs)
        {
            AzPowerShellVersion = azPowerShellVersion;
            PrimaryScriptUri = primaryScriptUri;
            SupportingScriptUris = supportingScriptUris;
            ScriptContent = scriptContent;
            Arguments = arguments;
            EnvironmentVariables = environmentVariables;
            ForceUpdateTag = forceUpdateTag;
            RetentionInterval = retentionInterval;
            Timeout = timeout;
        }

        /// <summary> Azure PowerShell module version to be used. </summary>
        public string AzPowerShellVersion { get; set; }
        /// <summary> Uri for the script. This is the entry point for the external script. </summary>
        public string PrimaryScriptUri { get; set; }
        /// <summary> Supporting files for the external script. </summary>
        public IList<string> SupportingScriptUris { get; set; }
        /// <summary> Script body. </summary>
        public string ScriptContent { get; set; }
        /// <summary> Command line arguments to pass to the script. Arguments are separated by spaces. ex: -Name blue* -Location &apos;West US 2&apos;. </summary>
        public string Arguments { get; set; }
        /// <summary> The environment variables to pass over to the script. </summary>
        public IList<EnvironmentVariable> EnvironmentVariables { get; set; }
        /// <summary> Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID. </summary>
        public string ForceUpdateTag { get; set; }
        /// <summary> Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P7D means one week). </summary>
        public TimeSpan RetentionInterval { get; set; }
        /// <summary> Maximum allowed script execution time specified in ISO 8601 format. Default value is PT1H. </summary>
        public TimeSpan? Timeout { get; set; }
    }
}
