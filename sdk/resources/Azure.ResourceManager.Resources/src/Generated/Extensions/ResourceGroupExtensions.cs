// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.Resources
{
    /// <summary> A class to add extension methods to ResourceGroup. </summary>
    public static partial class ResourceGroupExtensions
    {
        #region ManagementLockObjects
        /// <summary> Gets an object representing a ManagementLockObjectResourceGroupsContainer along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="ManagementLockObjectResourceGroupsContainer" /> object. </returns>
        public static ManagementLockObjectResourceGroupsContainer GetManagementLockObjects(this ResourceGroupOperations resourceGroup)
        {
            return new ManagementLockObjectResourceGroupsContainer(resourceGroup);
        }
        #endregion

        #region Applications
        /// <summary> Gets an object representing a ApplicationContainer along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="ApplicationContainer" /> object. </returns>
        public static ApplicationContainer GetApplications(this ResourceGroupOperations resourceGroup)
        {
            return new ApplicationContainer(resourceGroup);
        }
        #endregion

        #region ApplicationDefinitions
        /// <summary> Gets an object representing a ApplicationDefinitionContainer along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="ApplicationDefinitionContainer" /> object. </returns>
        public static ApplicationDefinitionContainer GetApplicationDefinitions(this ResourceGroupOperations resourceGroup)
        {
            return new ApplicationDefinitionContainer(resourceGroup);
        }
        #endregion

        #region PolicyAssignment
        /// <summary> Gets an object representing a PolicyAssignmentContainer along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="PolicyAssignmentContainer" /> object. </returns>
        private static PolicyAssignmentContainer GetPolicyAssignmentContainer(this ResourceGroupOperations resourceGroup)
        {
            return resourceGroup.UseClientContext((baseUri, credential, options, pipeline) => new PolicyAssignmentContainer(options, credential, baseUri, pipeline));
        }

        /// <summary> Lists the PolicyAssignment for this Azure.ResourceManager.Core.ResourceGroupOperations. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <param name="filter"> The filter to apply on the operation. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, no filtering is performed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <return> A collection of resource operations that may take multiple service requests to iterate over. </return>
        public static Pageable<PolicyAssignment> ListPolicyAssignment(this ResourceGroupOperations resourceGroup, string filter = null, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetPolicyAssignmentContainer().ListAtScope(resourceGroup.Id, filter, cancellationToken);
        }

        /// <summary> Lists the PolicyAssignment for this Azure.ResourceManager.Core.ResourceGroupOperations. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <param name="filter"> The filter to apply on the operation. Valid values for $filter are: &apos;atScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, no filtering is performed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <return> A collection of resource operations that may take multiple service requests to iterate over. </return>
        public static AsyncPageable<PolicyAssignment> ListPolicyAssignmentAsync(this ResourceGroupOperations resourceGroup, string filter = null, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetPolicyAssignmentContainer().ListAtScopeAsync(resourceGroup.Id, filter, cancellationToken);
        }

        /// <summary> The operation to create or update a PolicyAssignment. Please note some properties can be set only during creation. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <param name="policyAssignmentName"> The name of the policy assignment. </param>
        /// <param name="parameters"> Parameters for the policy assignment. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public static Response<PolicyAssignment> CreateOrUpdatePolicyAssignment(this ResourceGroupOperations resourceGroup, string policyAssignmentName, PolicyAssignmentData parameters, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetPolicyAssignmentContainer().CreateOrUpdateAtScope(resourceGroup.Id, policyAssignmentName, parameters, cancellationToken);
        }

        /// <summary> The operation to create or update a PolicyAssignment. Please note some properties can be set only during creation. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <param name="policyAssignmentName"> The name of the policy assignment. </param>
        /// <param name="parameters"> Parameters for the policy assignment. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public static Task<Response<PolicyAssignment>> CreateOrUpdatePolicyAssignmentAsync(this ResourceGroupOperations resourceGroup, string policyAssignmentName, PolicyAssignmentData parameters, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetPolicyAssignmentContainer().CreateOrUpdateAtScopeAsync(resourceGroup.Id, policyAssignmentName, parameters, cancellationToken);
        }

        /// <inheritdoc />
        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <param name="policyAssignmentName"> The name of the policy assignment to get. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public static Response<PolicyAssignment> GetPolicyAssignment(this ResourceGroupOperations resourceGroup, string policyAssignmentName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetPolicyAssignmentContainer().GetAtScope(resourceGroup.Id, policyAssignmentName, cancellationToken);
        }

        /// <inheritdoc />
        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <param name="policyAssignmentName"> The name of the policy assignment to get. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public static Task<Response<PolicyAssignment>> GetPolicyAssignmentAsync(this ResourceGroupOperations resourceGroup, string policyAssignmentName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetPolicyAssignmentContainer().GetAtScopeAsync(resourceGroup.Id, policyAssignmentName, cancellationToken);
        }
        #endregion
    }
}
