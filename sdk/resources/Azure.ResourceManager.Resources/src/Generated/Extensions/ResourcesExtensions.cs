// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Management;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.Resources
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.Resources. </summary>
    public static partial class ResourcesExtensions
    {
        private static TenantExtensionClient GetExtensionClient(Tenant tenant)
        {
            return tenant.GetCachedClient((client) =>
            {
                return new TenantExtensionClient(client, tenant.Id);
            }
            );
        }

        /// <summary> Gets a collection of Deployments in the Deployment. </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of Deployments and their operations over a Deployment. </returns>
        public static DeploymentCollection GetDeployments(this Tenant tenant)
        {
            return GetExtensionClient(tenant).GetDeployments();
        }

        /// <summary>
        /// Gets a deployment.
        /// Request Path: /{scope}/providers/Microsoft.Resources/deployments/{deploymentName}
        /// Operation Id: Deployments_GetAtScope
        /// </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="deploymentName"> The name of the deployment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="deploymentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        public static async Task<Response<Deployment>> GetDeploymentAsync(this Tenant tenant, string deploymentName, CancellationToken cancellationToken = default)
        {
            return await tenant.GetDeployments().GetAsync(deploymentName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a deployment.
        /// Request Path: /{scope}/providers/Microsoft.Resources/deployments/{deploymentName}
        /// Operation Id: Deployments_GetAtScope
        /// </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="deploymentName"> The name of the deployment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="deploymentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        public static Response<Deployment> GetDeployment(this Tenant tenant, string deploymentName, CancellationToken cancellationToken = default)
        {
            return tenant.GetDeployments().Get(deploymentName, cancellationToken);
        }

        /// <summary>
        /// Calculate the hash of the given template.
        /// Request Path: /providers/Microsoft.Resources/calculateTemplateHash
        /// Operation Id: Deployments_CalculateTemplateHash
        /// </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="template"> The template provided to calculate hash. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="template"/> is null. </exception>
        public static async Task<Response<TemplateHashResult>> CalculateDeploymentTemplateHashAsync(this Tenant tenant, BinaryData template, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(template, nameof(template));

            return await GetExtensionClient(tenant).CalculateDeploymentTemplateHashAsync(template, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Calculate the hash of the given template.
        /// Request Path: /providers/Microsoft.Resources/calculateTemplateHash
        /// Operation Id: Deployments_CalculateTemplateHash
        /// </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="template"> The template provided to calculate hash. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="template"/> is null. </exception>
        public static Response<TemplateHashResult> CalculateDeploymentTemplateHash(this Tenant tenant, BinaryData template, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(template, nameof(template));

            return GetExtensionClient(tenant).CalculateDeploymentTemplateHash(template, cancellationToken);
        }

        private static SubscriptionExtensionClient GetExtensionClient(Subscription subscription)
        {
            return subscription.GetCachedClient((client) =>
            {
                return new SubscriptionExtensionClient(client, subscription.Id);
            }
            );
        }

        /// <summary> Gets a collection of Deployments in the Deployment. </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of Deployments and their operations over a Deployment. </returns>
        public static DeploymentCollection GetDeployments(this Subscription subscription)
        {
            return GetExtensionClient(subscription).GetDeployments();
        }

        /// <summary>
        /// Gets a deployment.
        /// Request Path: /{scope}/providers/Microsoft.Resources/deployments/{deploymentName}
        /// Operation Id: Deployments_GetAtScope
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="deploymentName"> The name of the deployment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="deploymentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        public static async Task<Response<Deployment>> GetDeploymentAsync(this Subscription subscription, string deploymentName, CancellationToken cancellationToken = default)
        {
            return await subscription.GetDeployments().GetAsync(deploymentName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a deployment.
        /// Request Path: /{scope}/providers/Microsoft.Resources/deployments/{deploymentName}
        /// Operation Id: Deployments_GetAtScope
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="deploymentName"> The name of the deployment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="deploymentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        public static Response<Deployment> GetDeployment(this Subscription subscription, string deploymentName, CancellationToken cancellationToken = default)
        {
            return subscription.GetDeployments().Get(deploymentName, cancellationToken);
        }

        /// <summary>
        /// Gets all the applications within a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Solutions/applications
        /// Operation Id: Applications_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Application" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<Application> GetApplicationsAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetApplicationsAsync(cancellationToken);
        }

        /// <summary>
        /// Gets all the applications within a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Solutions/applications
        /// Operation Id: Applications_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Application" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<Application> GetApplications(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetApplications(cancellationToken);
        }

        /// <summary>
        /// Retrieves all JIT requests within the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Solutions/jitRequests
        /// Operation Id: JitRequests_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="JitRequest" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<JitRequest> GetJitRequestDefinitionsAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetJitRequestDefinitionsAsync(cancellationToken);
        }

        /// <summary>
        /// Retrieves all JIT requests within the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Solutions/jitRequests
        /// Operation Id: JitRequests_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="JitRequest" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<JitRequest> GetJitRequestDefinitions(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetJitRequestDefinitions(cancellationToken);
        }

        /// <summary>
        /// Lists all deployment scripts for a given subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Resources/deploymentScripts
        /// Operation Id: DeploymentScripts_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DeploymentScript" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<DeploymentScript> GetDeploymentScriptsAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetDeploymentScriptsAsync(cancellationToken);
        }

        /// <summary>
        /// Lists all deployment scripts for a given subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Resources/deploymentScripts
        /// Operation Id: DeploymentScripts_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DeploymentScript" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<DeploymentScript> GetDeploymentScripts(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetDeploymentScripts(cancellationToken);
        }

        /// <summary>
        /// Lists all the Template Specs within the specified subscriptions.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Resources/templateSpecs
        /// Operation Id: TemplateSpecs_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="expand"> Allows for expansion of additional Template Spec details in the response. Optional. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="TemplateSpec" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<TemplateSpec> GetTemplateSpecsAsync(this Subscription subscription, TemplateSpecExpandKind? expand = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetTemplateSpecsAsync(expand, cancellationToken);
        }

        /// <summary>
        /// Lists all the Template Specs within the specified subscriptions.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Resources/templateSpecs
        /// Operation Id: TemplateSpecs_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="expand"> Allows for expansion of additional Template Spec details in the response. Optional. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="TemplateSpec" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<TemplateSpec> GetTemplateSpecs(this Subscription subscription, TemplateSpecExpandKind? expand = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetTemplateSpecs(expand, cancellationToken);
        }

        private static ResourceGroupExtensionClient GetExtensionClient(ResourceGroup resourceGroup)
        {
            return resourceGroup.GetCachedClient((client) =>
            {
                return new ResourceGroupExtensionClient(client, resourceGroup.Id);
            }
            );
        }

        /// <summary> Gets a collection of Deployments in the Deployment. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of Deployments and their operations over a Deployment. </returns>
        public static DeploymentCollection GetDeployments(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetDeployments();
        }

        /// <summary>
        /// Gets a deployment.
        /// Request Path: /{scope}/providers/Microsoft.Resources/deployments/{deploymentName}
        /// Operation Id: Deployments_GetAtScope
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="deploymentName"> The name of the deployment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="deploymentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        public static async Task<Response<Deployment>> GetDeploymentAsync(this ResourceGroup resourceGroup, string deploymentName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetDeployments().GetAsync(deploymentName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a deployment.
        /// Request Path: /{scope}/providers/Microsoft.Resources/deployments/{deploymentName}
        /// Operation Id: Deployments_GetAtScope
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="deploymentName"> The name of the deployment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="deploymentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        public static Response<Deployment> GetDeployment(this ResourceGroup resourceGroup, string deploymentName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetDeployments().Get(deploymentName, cancellationToken);
        }

        /// <summary> Gets a collection of Applications in the Application. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of Applications and their operations over a Application. </returns>
        public static ApplicationCollection GetApplications(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetApplications();
        }

        /// <summary>
        /// Gets the managed application.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applications/{applicationName}
        /// Operation Id: Applications_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="applicationName"> The name of the managed application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="applicationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationName"/> is null. </exception>
        public static async Task<Response<Application>> GetApplicationAsync(this ResourceGroup resourceGroup, string applicationName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetApplications().GetAsync(applicationName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the managed application.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applications/{applicationName}
        /// Operation Id: Applications_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="applicationName"> The name of the managed application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="applicationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationName"/> is null. </exception>
        public static Response<Application> GetApplication(this ResourceGroup resourceGroup, string applicationName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetApplications().Get(applicationName, cancellationToken);
        }

        /// <summary> Gets a collection of ApplicationDefinitions in the ApplicationDefinition. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of ApplicationDefinitions and their operations over a ApplicationDefinition. </returns>
        public static ApplicationDefinitionCollection GetApplicationDefinitions(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetApplicationDefinitions();
        }

        /// <summary>
        /// Gets the managed application definition.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applicationDefinitions/{applicationDefinitionName}
        /// Operation Id: ApplicationDefinitions_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="applicationDefinitionName"> The name of the managed application definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="applicationDefinitionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationDefinitionName"/> is null. </exception>
        public static async Task<Response<ApplicationDefinition>> GetApplicationDefinitionAsync(this ResourceGroup resourceGroup, string applicationDefinitionName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetApplicationDefinitions().GetAsync(applicationDefinitionName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the managed application definition.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applicationDefinitions/{applicationDefinitionName}
        /// Operation Id: ApplicationDefinitions_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="applicationDefinitionName"> The name of the managed application definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="applicationDefinitionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationDefinitionName"/> is null. </exception>
        public static Response<ApplicationDefinition> GetApplicationDefinition(this ResourceGroup resourceGroup, string applicationDefinitionName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetApplicationDefinitions().Get(applicationDefinitionName, cancellationToken);
        }

        /// <summary> Gets a collection of JitRequests in the JitRequest. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of JitRequests and their operations over a JitRequest. </returns>
        public static JitRequestCollection GetJitRequests(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetJitRequests();
        }

        /// <summary>
        /// Gets the JIT request.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/jitRequests/{jitRequestName}
        /// Operation Id: JitRequests_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="jitRequestName"> The name of the JIT request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="jitRequestName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="jitRequestName"/> is null. </exception>
        public static async Task<Response<JitRequest>> GetJitRequestAsync(this ResourceGroup resourceGroup, string jitRequestName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetJitRequests().GetAsync(jitRequestName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the JIT request.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/jitRequests/{jitRequestName}
        /// Operation Id: JitRequests_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="jitRequestName"> The name of the JIT request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="jitRequestName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="jitRequestName"/> is null. </exception>
        public static Response<JitRequest> GetJitRequest(this ResourceGroup resourceGroup, string jitRequestName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetJitRequests().Get(jitRequestName, cancellationToken);
        }

        /// <summary> Gets a collection of DeploymentScripts in the DeploymentScript. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of DeploymentScripts and their operations over a DeploymentScript. </returns>
        public static DeploymentScriptCollection GetDeploymentScripts(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetDeploymentScripts();
        }

        /// <summary>
        /// Gets a deployment script with a given name.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deploymentScripts/{scriptName}
        /// Operation Id: DeploymentScripts_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="scriptName"> Name of the deployment script. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scriptName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scriptName"/> is null. </exception>
        public static async Task<Response<DeploymentScript>> GetDeploymentScriptAsync(this ResourceGroup resourceGroup, string scriptName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetDeploymentScripts().GetAsync(scriptName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a deployment script with a given name.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deploymentScripts/{scriptName}
        /// Operation Id: DeploymentScripts_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="scriptName"> Name of the deployment script. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scriptName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scriptName"/> is null. </exception>
        public static Response<DeploymentScript> GetDeploymentScript(this ResourceGroup resourceGroup, string scriptName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetDeploymentScripts().Get(scriptName, cancellationToken);
        }

        /// <summary> Gets a collection of TemplateSpecs in the TemplateSpec. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of TemplateSpecs and their operations over a TemplateSpec. </returns>
        public static TemplateSpecCollection GetTemplateSpecs(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetTemplateSpecs();
        }

        /// <summary>
        /// Gets a Template Spec with a given name.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Resources/templateSpecs/{templateSpecName}
        /// Operation Id: TemplateSpecs_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="templateSpecName"> Name of the Template Spec. </param>
        /// <param name="expand"> Allows for expansion of additional Template Spec details in the response. Optional. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="templateSpecName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="templateSpecName"/> is null. </exception>
        public static async Task<Response<TemplateSpec>> GetTemplateSpecAsync(this ResourceGroup resourceGroup, string templateSpecName, TemplateSpecExpandKind? expand = null, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetTemplateSpecs().GetAsync(templateSpecName, expand, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a Template Spec with a given name.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Resources/templateSpecs/{templateSpecName}
        /// Operation Id: TemplateSpecs_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="templateSpecName"> Name of the Template Spec. </param>
        /// <param name="expand"> Allows for expansion of additional Template Spec details in the response. Optional. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="templateSpecName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="templateSpecName"/> is null. </exception>
        public static Response<TemplateSpec> GetTemplateSpec(this ResourceGroup resourceGroup, string templateSpecName, TemplateSpecExpandKind? expand = null, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetTemplateSpecs().Get(templateSpecName, expand, cancellationToken);
        }

        private static ManagementGroupExtensionClient GetExtensionClient(ManagementGroup managementGroup)
        {
            return managementGroup.GetCachedClient((client) =>
            {
                return new ManagementGroupExtensionClient(client, managementGroup.Id);
            }
            );
        }

        /// <summary> Gets a collection of Deployments in the Deployment. </summary>
        /// <param name="managementGroup"> The <see cref="ManagementGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of Deployments and their operations over a Deployment. </returns>
        public static DeploymentCollection GetDeployments(this ManagementGroup managementGroup)
        {
            return GetExtensionClient(managementGroup).GetDeployments();
        }

        /// <summary>
        /// Gets a deployment.
        /// Request Path: /{scope}/providers/Microsoft.Resources/deployments/{deploymentName}
        /// Operation Id: Deployments_GetAtScope
        /// </summary>
        /// <param name="managementGroup"> The <see cref="ManagementGroup" /> instance the method will execute against. </param>
        /// <param name="deploymentName"> The name of the deployment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="deploymentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        public static async Task<Response<Deployment>> GetDeploymentAsync(this ManagementGroup managementGroup, string deploymentName, CancellationToken cancellationToken = default)
        {
            return await managementGroup.GetDeployments().GetAsync(deploymentName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a deployment.
        /// Request Path: /{scope}/providers/Microsoft.Resources/deployments/{deploymentName}
        /// Operation Id: Deployments_GetAtScope
        /// </summary>
        /// <param name="managementGroup"> The <see cref="ManagementGroup" /> instance the method will execute against. </param>
        /// <param name="deploymentName"> The name of the deployment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="deploymentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        public static Response<Deployment> GetDeployment(this ManagementGroup managementGroup, string deploymentName, CancellationToken cancellationToken = default)
        {
            return managementGroup.GetDeployments().Get(deploymentName, cancellationToken);
        }

        #region Deployment
        /// <summary>
        /// Gets an object representing a <see cref="Deployment" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="Deployment.CreateResourceIdentifier" /> to create a <see cref="Deployment" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="Deployment" /> object. </returns>
        public static Deployment GetDeployment(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                Deployment.ValidateResourceId(id);
                return new Deployment(client, id);
            }
            );
        }
        #endregion

        #region Application
        /// <summary>
        /// Gets an object representing an <see cref="Application" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="Application.CreateResourceIdentifier" /> to create an <see cref="Application" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="Application" /> object. </returns>
        public static Application GetApplication(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                Application.ValidateResourceId(id);
                return new Application(client, id);
            }
            );
        }
        #endregion

        #region ApplicationDefinition
        /// <summary>
        /// Gets an object representing an <see cref="ApplicationDefinition" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ApplicationDefinition.CreateResourceIdentifier" /> to create an <see cref="ApplicationDefinition" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ApplicationDefinition" /> object. </returns>
        public static ApplicationDefinition GetApplicationDefinition(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ApplicationDefinition.ValidateResourceId(id);
                return new ApplicationDefinition(client, id);
            }
            );
        }
        #endregion

        #region JitRequest
        /// <summary>
        /// Gets an object representing a <see cref="JitRequest" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="JitRequest.CreateResourceIdentifier" /> to create a <see cref="JitRequest" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="JitRequest" /> object. </returns>
        public static JitRequest GetJitRequest(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                JitRequest.ValidateResourceId(id);
                return new JitRequest(client, id);
            }
            );
        }
        #endregion

        #region DeploymentScript
        /// <summary>
        /// Gets an object representing a <see cref="DeploymentScript" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DeploymentScript.CreateResourceIdentifier" /> to create a <see cref="DeploymentScript" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DeploymentScript" /> object. </returns>
        public static DeploymentScript GetDeploymentScript(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DeploymentScript.ValidateResourceId(id);
                return new DeploymentScript(client, id);
            }
            );
        }
        #endregion

        #region ScriptLog
        /// <summary>
        /// Gets an object representing a <see cref="ScriptLog" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ScriptLog.CreateResourceIdentifier" /> to create a <see cref="ScriptLog" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ScriptLog" /> object. </returns>
        public static ScriptLog GetScriptLog(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ScriptLog.ValidateResourceId(id);
                return new ScriptLog(client, id);
            }
            );
        }
        #endregion

        #region TemplateSpec
        /// <summary>
        /// Gets an object representing a <see cref="TemplateSpec" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="TemplateSpec.CreateResourceIdentifier" /> to create a <see cref="TemplateSpec" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="TemplateSpec" /> object. </returns>
        public static TemplateSpec GetTemplateSpec(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                TemplateSpec.ValidateResourceId(id);
                return new TemplateSpec(client, id);
            }
            );
        }
        #endregion

        #region TemplateSpecVersion
        /// <summary>
        /// Gets an object representing a <see cref="TemplateSpecVersion" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="TemplateSpecVersion.CreateResourceIdentifier" /> to create a <see cref="TemplateSpecVersion" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="TemplateSpecVersion" /> object. </returns>
        public static TemplateSpecVersion GetTemplateSpecVersion(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                TemplateSpecVersion.ValidateResourceId(id);
                return new TemplateSpecVersion(client, id);
            }
            );
        }
        #endregion
    }
}
