// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.Resources
{
    /// <summary>
    /// A class representing a collection of <see cref="ArmDeploymentStackResource"/> and their operations.
    /// Each <see cref="ArmDeploymentStackResource"/> in the collection will belong to the same instance of <see cref="ArmResource"/>.
    /// To get an <see cref="ArmDeploymentStackCollection"/> instance call the GetArmDeploymentStacks method from an instance of <see cref="ArmResource"/>.
    /// </summary>
    public partial class ArmDeploymentStackCollection : ArmCollection, IEnumerable<ArmDeploymentStackResource>, IAsyncEnumerable<ArmDeploymentStackResource>
    {
        private readonly ClientDiagnostics _armDeploymentStackDeploymentStacksClientDiagnostics;
        private readonly DeploymentStacksRestOperations _armDeploymentStackDeploymentStacksRestClient;

        /// <summary> Initializes a new instance of the <see cref="ArmDeploymentStackCollection"/> class for mocking. </summary>
        protected ArmDeploymentStackCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ArmDeploymentStackCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal ArmDeploymentStackCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _armDeploymentStackDeploymentStacksClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Resources", ArmDeploymentStackResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ArmDeploymentStackResource.ResourceType, out string armDeploymentStackDeploymentStacksApiVersion);
            _armDeploymentStackDeploymentStacksRestClient = new DeploymentStacksRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, armDeploymentStackDeploymentStacksApiVersion);
        }

        /// <summary>
        /// Creates or updates a Deployment stack at specific scope.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.Resources/deploymentStacks/{deploymentStackName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DeploymentStacks_CreateOrUpdateAtScope</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ArmDeploymentStackResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="deploymentStackName"> Name of the deployment stack. </param>
        /// <param name="data"> Deployment stack supplied to the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="deploymentStackName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentStackName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<ArmDeploymentStackResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string deploymentStackName, ArmDeploymentStackData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(deploymentStackName, nameof(deploymentStackName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _armDeploymentStackDeploymentStacksClientDiagnostics.CreateScope("ArmDeploymentStackCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _armDeploymentStackDeploymentStacksRestClient.CreateOrUpdateAtScopeAsync(Id, deploymentStackName, data, cancellationToken).ConfigureAwait(false);
                var operation = new ResourcesArmOperation<ArmDeploymentStackResource>(new ArmDeploymentStackOperationSource(Client), _armDeploymentStackDeploymentStacksClientDiagnostics, Pipeline, _armDeploymentStackDeploymentStacksRestClient.CreateCreateOrUpdateAtScopeRequest(Id, deploymentStackName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates a Deployment stack at specific scope.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.Resources/deploymentStacks/{deploymentStackName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DeploymentStacks_CreateOrUpdateAtScope</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ArmDeploymentStackResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="deploymentStackName"> Name of the deployment stack. </param>
        /// <param name="data"> Deployment stack supplied to the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="deploymentStackName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentStackName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<ArmDeploymentStackResource> CreateOrUpdate(WaitUntil waitUntil, string deploymentStackName, ArmDeploymentStackData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(deploymentStackName, nameof(deploymentStackName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _armDeploymentStackDeploymentStacksClientDiagnostics.CreateScope("ArmDeploymentStackCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _armDeploymentStackDeploymentStacksRestClient.CreateOrUpdateAtScope(Id, deploymentStackName, data, cancellationToken);
                var operation = new ResourcesArmOperation<ArmDeploymentStackResource>(new ArmDeploymentStackOperationSource(Client), _armDeploymentStackDeploymentStacksClientDiagnostics, Pipeline, _armDeploymentStackDeploymentStacksRestClient.CreateCreateOrUpdateAtScopeRequest(Id, deploymentStackName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a Deployment stack with a given name at specific scope.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.Resources/deploymentStacks/{deploymentStackName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DeploymentStacks_GetAtScope</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ArmDeploymentStackResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="deploymentStackName"> Name of the deployment stack. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="deploymentStackName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentStackName"/> is null. </exception>
        public virtual async Task<Response<ArmDeploymentStackResource>> GetAsync(string deploymentStackName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(deploymentStackName, nameof(deploymentStackName));

            using var scope = _armDeploymentStackDeploymentStacksClientDiagnostics.CreateScope("ArmDeploymentStackCollection.Get");
            scope.Start();
            try
            {
                var response = await _armDeploymentStackDeploymentStacksRestClient.GetAtScopeAsync(Id, deploymentStackName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ArmDeploymentStackResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a Deployment stack with a given name at specific scope.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.Resources/deploymentStacks/{deploymentStackName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DeploymentStacks_GetAtScope</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ArmDeploymentStackResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="deploymentStackName"> Name of the deployment stack. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="deploymentStackName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentStackName"/> is null. </exception>
        public virtual Response<ArmDeploymentStackResource> Get(string deploymentStackName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(deploymentStackName, nameof(deploymentStackName));

            using var scope = _armDeploymentStackDeploymentStacksClientDiagnostics.CreateScope("ArmDeploymentStackCollection.Get");
            scope.Start();
            try
            {
                var response = _armDeploymentStackDeploymentStacksRestClient.GetAtScope(Id, deploymentStackName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ArmDeploymentStackResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists all the Deployment stacks within the specified scope.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.Resources/deploymentStacks</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DeploymentStacks_ListAtScope</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ArmDeploymentStackResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ArmDeploymentStackResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ArmDeploymentStackResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _armDeploymentStackDeploymentStacksRestClient.CreateListAtScopeRequest(Id);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _armDeploymentStackDeploymentStacksRestClient.CreateListAtScopeNextPageRequest(nextLink, Id);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new ArmDeploymentStackResource(Client, ArmDeploymentStackData.DeserializeArmDeploymentStackData(e)), _armDeploymentStackDeploymentStacksClientDiagnostics, Pipeline, "ArmDeploymentStackCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists all the Deployment stacks within the specified scope.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.Resources/deploymentStacks</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DeploymentStacks_ListAtScope</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ArmDeploymentStackResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ArmDeploymentStackResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ArmDeploymentStackResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _armDeploymentStackDeploymentStacksRestClient.CreateListAtScopeRequest(Id);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _armDeploymentStackDeploymentStacksRestClient.CreateListAtScopeNextPageRequest(nextLink, Id);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new ArmDeploymentStackResource(Client, ArmDeploymentStackData.DeserializeArmDeploymentStackData(e)), _armDeploymentStackDeploymentStacksClientDiagnostics, Pipeline, "ArmDeploymentStackCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.Resources/deploymentStacks/{deploymentStackName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DeploymentStacks_GetAtScope</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ArmDeploymentStackResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="deploymentStackName"> Name of the deployment stack. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="deploymentStackName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentStackName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string deploymentStackName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(deploymentStackName, nameof(deploymentStackName));

            using var scope = _armDeploymentStackDeploymentStacksClientDiagnostics.CreateScope("ArmDeploymentStackCollection.Exists");
            scope.Start();
            try
            {
                var response = await _armDeploymentStackDeploymentStacksRestClient.GetAtScopeAsync(Id, deploymentStackName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.Resources/deploymentStacks/{deploymentStackName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DeploymentStacks_GetAtScope</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ArmDeploymentStackResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="deploymentStackName"> Name of the deployment stack. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="deploymentStackName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentStackName"/> is null. </exception>
        public virtual Response<bool> Exists(string deploymentStackName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(deploymentStackName, nameof(deploymentStackName));

            using var scope = _armDeploymentStackDeploymentStacksClientDiagnostics.CreateScope("ArmDeploymentStackCollection.Exists");
            scope.Start();
            try
            {
                var response = _armDeploymentStackDeploymentStacksRestClient.GetAtScope(Id, deploymentStackName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.Resources/deploymentStacks/{deploymentStackName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DeploymentStacks_GetAtScope</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ArmDeploymentStackResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="deploymentStackName"> Name of the deployment stack. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="deploymentStackName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentStackName"/> is null. </exception>
        public virtual async Task<NullableResponse<ArmDeploymentStackResource>> GetIfExistsAsync(string deploymentStackName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(deploymentStackName, nameof(deploymentStackName));

            using var scope = _armDeploymentStackDeploymentStacksClientDiagnostics.CreateScope("ArmDeploymentStackCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _armDeploymentStackDeploymentStacksRestClient.GetAtScopeAsync(Id, deploymentStackName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<ArmDeploymentStackResource>(response.GetRawResponse());
                return Response.FromValue(new ArmDeploymentStackResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.Resources/deploymentStacks/{deploymentStackName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DeploymentStacks_GetAtScope</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ArmDeploymentStackResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="deploymentStackName"> Name of the deployment stack. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="deploymentStackName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentStackName"/> is null. </exception>
        public virtual NullableResponse<ArmDeploymentStackResource> GetIfExists(string deploymentStackName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(deploymentStackName, nameof(deploymentStackName));

            using var scope = _armDeploymentStackDeploymentStacksClientDiagnostics.CreateScope("ArmDeploymentStackCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _armDeploymentStackDeploymentStacksRestClient.GetAtScope(Id, deploymentStackName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<ArmDeploymentStackResource>(response.GetRawResponse());
                return Response.FromValue(new ArmDeploymentStackResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<ArmDeploymentStackResource> IEnumerable<ArmDeploymentStackResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<ArmDeploymentStackResource> IAsyncEnumerable<ArmDeploymentStackResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
