// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.Resources
{
    /// <summary> The Deployment service client. </summary>
    public partial class DeploymentOperations
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal DeploymentRestOperations RestClient { get; }

        /// <summary> Initializes a new instance of DeploymentOperations for mocking. </summary>
        protected DeploymentOperations()
        {
        }

        /// <summary> Initializes a new instance of DeploymentOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="endpoint"> server parameter. </param>
        internal DeploymentOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string subscriptionId, Uri endpoint = null)
        {
            RestClient = new DeploymentRestOperations(clientDiagnostics, pipeline, subscriptionId, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Gets a deployments operation. </summary>
        /// <param name="scope"> The resource scope. </param>
        /// <param name="deploymentName"> The name of the deployment. </param>
        /// <param name="operationId"> The ID of the operation to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<DeploymentOperation>> GetAtScopeAsync(string scope, string deploymentName, string operationId, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("DeploymentOperations.GetAtScope");
            scope0.Start();
            try
            {
                return await RestClient.GetAtScopeAsync(scope, deploymentName, operationId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a deployments operation. </summary>
        /// <param name="scope"> The resource scope. </param>
        /// <param name="deploymentName"> The name of the deployment. </param>
        /// <param name="operationId"> The ID of the operation to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DeploymentOperation> GetAtScope(string scope, string deploymentName, string operationId, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("DeploymentOperations.GetAtScope");
            scope0.Start();
            try
            {
                return RestClient.GetAtScope(scope, deploymentName, operationId, cancellationToken);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a deployments operation. </summary>
        /// <param name="deploymentName"> The name of the deployment. </param>
        /// <param name="operationId"> The ID of the operation to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<DeploymentOperation>> GetAtTenantScopeAsync(string deploymentName, string operationId, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("DeploymentOperations.GetAtTenantScope");
            scope0.Start();
            try
            {
                return await RestClient.GetAtTenantScopeAsync(deploymentName, operationId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a deployments operation. </summary>
        /// <param name="deploymentName"> The name of the deployment. </param>
        /// <param name="operationId"> The ID of the operation to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DeploymentOperation> GetAtTenantScope(string deploymentName, string operationId, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("DeploymentOperations.GetAtTenantScope");
            scope0.Start();
            try
            {
                return RestClient.GetAtTenantScope(deploymentName, operationId, cancellationToken);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a deployments operation. </summary>
        /// <param name="groupId"> The management group ID. </param>
        /// <param name="deploymentName"> The name of the deployment. </param>
        /// <param name="operationId"> The ID of the operation to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<DeploymentOperation>> GetAtManagementGroupScopeAsync(string groupId, string deploymentName, string operationId, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("DeploymentOperations.GetAtManagementGroupScope");
            scope0.Start();
            try
            {
                return await RestClient.GetAtManagementGroupScopeAsync(groupId, deploymentName, operationId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a deployments operation. </summary>
        /// <param name="groupId"> The management group ID. </param>
        /// <param name="deploymentName"> The name of the deployment. </param>
        /// <param name="operationId"> The ID of the operation to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DeploymentOperation> GetAtManagementGroupScope(string groupId, string deploymentName, string operationId, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("DeploymentOperations.GetAtManagementGroupScope");
            scope0.Start();
            try
            {
                return RestClient.GetAtManagementGroupScope(groupId, deploymentName, operationId, cancellationToken);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a deployments operation. </summary>
        /// <param name="deploymentName"> The name of the deployment. </param>
        /// <param name="operationId"> The ID of the operation to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<DeploymentOperation>> GetAtSubscriptionScopeAsync(string deploymentName, string operationId, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("DeploymentOperations.GetAtSubscriptionScope");
            scope0.Start();
            try
            {
                return await RestClient.GetAtSubscriptionScopeAsync(deploymentName, operationId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a deployments operation. </summary>
        /// <param name="deploymentName"> The name of the deployment. </param>
        /// <param name="operationId"> The ID of the operation to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DeploymentOperation> GetAtSubscriptionScope(string deploymentName, string operationId, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("DeploymentOperations.GetAtSubscriptionScope");
            scope0.Start();
            try
            {
                return RestClient.GetAtSubscriptionScope(deploymentName, operationId, cancellationToken);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a deployments operation. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="deploymentName"> The name of the deployment. </param>
        /// <param name="operationId"> The ID of the operation to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<DeploymentOperation>> GetAsync(string resourceGroupName, string deploymentName, string operationId, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("DeploymentOperations.Get");
            scope0.Start();
            try
            {
                return await RestClient.GetAsync(resourceGroupName, deploymentName, operationId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a deployments operation. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="deploymentName"> The name of the deployment. </param>
        /// <param name="operationId"> The ID of the operation to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DeploymentOperation> Get(string resourceGroupName, string deploymentName, string operationId, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("DeploymentOperations.Get");
            scope0.Start();
            try
            {
                return RestClient.Get(resourceGroupName, deploymentName, operationId, cancellationToken);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> Gets all deployments operations for a deployment. </summary>
        /// <param name="scope"> The resource scope. </param>
        /// <param name="deploymentName"> The name of the deployment. </param>
        /// <param name="top"> The number of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scope"/> or <paramref name="deploymentName"/> is null. </exception>
        public virtual AsyncPageable<DeploymentOperation> ListAtScopeAsync(string scope, string deploymentName, int? top = null, CancellationToken cancellationToken = default)
        {
            if (scope == null)
            {
                throw new ArgumentNullException(nameof(scope));
            }
            if (deploymentName == null)
            {
                throw new ArgumentNullException(nameof(deploymentName));
            }

            async Task<Page<DeploymentOperation>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("DeploymentOperations.ListAtScope");
                scope0.Start();
                try
                {
                    var response = await RestClient.ListAtScopeAsync(scope, deploymentName, top, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            async Task<Page<DeploymentOperation>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("DeploymentOperations.ListAtScope");
                scope0.Start();
                try
                {
                    var response = await RestClient.ListAtScopeNextPageAsync(nextLink, scope, deploymentName, top, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets all deployments operations for a deployment. </summary>
        /// <param name="scope"> The resource scope. </param>
        /// <param name="deploymentName"> The name of the deployment. </param>
        /// <param name="top"> The number of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scope"/> or <paramref name="deploymentName"/> is null. </exception>
        public virtual Pageable<DeploymentOperation> ListAtScope(string scope, string deploymentName, int? top = null, CancellationToken cancellationToken = default)
        {
            if (scope == null)
            {
                throw new ArgumentNullException(nameof(scope));
            }
            if (deploymentName == null)
            {
                throw new ArgumentNullException(nameof(deploymentName));
            }

            Page<DeploymentOperation> FirstPageFunc(int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("DeploymentOperations.ListAtScope");
                scope0.Start();
                try
                {
                    var response = RestClient.ListAtScope(scope, deploymentName, top, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            Page<DeploymentOperation> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("DeploymentOperations.ListAtScope");
                scope0.Start();
                try
                {
                    var response = RestClient.ListAtScopeNextPage(nextLink, scope, deploymentName, top, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets all deployments operations for a deployment. </summary>
        /// <param name="deploymentName"> The name of the deployment. </param>
        /// <param name="top"> The number of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        public virtual AsyncPageable<DeploymentOperation> ListAtTenantScopeAsync(string deploymentName, int? top = null, CancellationToken cancellationToken = default)
        {
            if (deploymentName == null)
            {
                throw new ArgumentNullException(nameof(deploymentName));
            }

            async Task<Page<DeploymentOperation>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("DeploymentOperations.ListAtTenantScope");
                scope0.Start();
                try
                {
                    var response = await RestClient.ListAtTenantScopeAsync(deploymentName, top, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            async Task<Page<DeploymentOperation>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("DeploymentOperations.ListAtTenantScope");
                scope0.Start();
                try
                {
                    var response = await RestClient.ListAtTenantScopeNextPageAsync(nextLink, deploymentName, top, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets all deployments operations for a deployment. </summary>
        /// <param name="deploymentName"> The name of the deployment. </param>
        /// <param name="top"> The number of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        public virtual Pageable<DeploymentOperation> ListAtTenantScope(string deploymentName, int? top = null, CancellationToken cancellationToken = default)
        {
            if (deploymentName == null)
            {
                throw new ArgumentNullException(nameof(deploymentName));
            }

            Page<DeploymentOperation> FirstPageFunc(int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("DeploymentOperations.ListAtTenantScope");
                scope0.Start();
                try
                {
                    var response = RestClient.ListAtTenantScope(deploymentName, top, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            Page<DeploymentOperation> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("DeploymentOperations.ListAtTenantScope");
                scope0.Start();
                try
                {
                    var response = RestClient.ListAtTenantScopeNextPage(nextLink, deploymentName, top, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets all deployments operations for a deployment. </summary>
        /// <param name="groupId"> The management group ID. </param>
        /// <param name="deploymentName"> The name of the deployment. </param>
        /// <param name="top"> The number of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupId"/> or <paramref name="deploymentName"/> is null. </exception>
        public virtual AsyncPageable<DeploymentOperation> ListAtManagementGroupScopeAsync(string groupId, string deploymentName, int? top = null, CancellationToken cancellationToken = default)
        {
            if (groupId == null)
            {
                throw new ArgumentNullException(nameof(groupId));
            }
            if (deploymentName == null)
            {
                throw new ArgumentNullException(nameof(deploymentName));
            }

            async Task<Page<DeploymentOperation>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("DeploymentOperations.ListAtManagementGroupScope");
                scope0.Start();
                try
                {
                    var response = await RestClient.ListAtManagementGroupScopeAsync(groupId, deploymentName, top, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            async Task<Page<DeploymentOperation>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("DeploymentOperations.ListAtManagementGroupScope");
                scope0.Start();
                try
                {
                    var response = await RestClient.ListAtManagementGroupScopeNextPageAsync(nextLink, groupId, deploymentName, top, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets all deployments operations for a deployment. </summary>
        /// <param name="groupId"> The management group ID. </param>
        /// <param name="deploymentName"> The name of the deployment. </param>
        /// <param name="top"> The number of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupId"/> or <paramref name="deploymentName"/> is null. </exception>
        public virtual Pageable<DeploymentOperation> ListAtManagementGroupScope(string groupId, string deploymentName, int? top = null, CancellationToken cancellationToken = default)
        {
            if (groupId == null)
            {
                throw new ArgumentNullException(nameof(groupId));
            }
            if (deploymentName == null)
            {
                throw new ArgumentNullException(nameof(deploymentName));
            }

            Page<DeploymentOperation> FirstPageFunc(int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("DeploymentOperations.ListAtManagementGroupScope");
                scope0.Start();
                try
                {
                    var response = RestClient.ListAtManagementGroupScope(groupId, deploymentName, top, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            Page<DeploymentOperation> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("DeploymentOperations.ListAtManagementGroupScope");
                scope0.Start();
                try
                {
                    var response = RestClient.ListAtManagementGroupScopeNextPage(nextLink, groupId, deploymentName, top, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets all deployments operations for a deployment. </summary>
        /// <param name="deploymentName"> The name of the deployment. </param>
        /// <param name="top"> The number of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        public virtual AsyncPageable<DeploymentOperation> ListAtSubscriptionScopeAsync(string deploymentName, int? top = null, CancellationToken cancellationToken = default)
        {
            if (deploymentName == null)
            {
                throw new ArgumentNullException(nameof(deploymentName));
            }

            async Task<Page<DeploymentOperation>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("DeploymentOperations.ListAtSubscriptionScope");
                scope0.Start();
                try
                {
                    var response = await RestClient.ListAtSubscriptionScopeAsync(deploymentName, top, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            async Task<Page<DeploymentOperation>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("DeploymentOperations.ListAtSubscriptionScope");
                scope0.Start();
                try
                {
                    var response = await RestClient.ListAtSubscriptionScopeNextPageAsync(nextLink, deploymentName, top, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets all deployments operations for a deployment. </summary>
        /// <param name="deploymentName"> The name of the deployment. </param>
        /// <param name="top"> The number of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        public virtual Pageable<DeploymentOperation> ListAtSubscriptionScope(string deploymentName, int? top = null, CancellationToken cancellationToken = default)
        {
            if (deploymentName == null)
            {
                throw new ArgumentNullException(nameof(deploymentName));
            }

            Page<DeploymentOperation> FirstPageFunc(int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("DeploymentOperations.ListAtSubscriptionScope");
                scope0.Start();
                try
                {
                    var response = RestClient.ListAtSubscriptionScope(deploymentName, top, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            Page<DeploymentOperation> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("DeploymentOperations.ListAtSubscriptionScope");
                scope0.Start();
                try
                {
                    var response = RestClient.ListAtSubscriptionScopeNextPage(nextLink, deploymentName, top, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets all deployments operations for a deployment. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="deploymentName"> The name of the deployment. </param>
        /// <param name="top"> The number of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="deploymentName"/> is null. </exception>
        public virtual AsyncPageable<DeploymentOperation> ListAsync(string resourceGroupName, string deploymentName, int? top = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (deploymentName == null)
            {
                throw new ArgumentNullException(nameof(deploymentName));
            }

            async Task<Page<DeploymentOperation>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("DeploymentOperations.List");
                scope0.Start();
                try
                {
                    var response = await RestClient.ListAsync(resourceGroupName, deploymentName, top, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            async Task<Page<DeploymentOperation>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("DeploymentOperations.List");
                scope0.Start();
                try
                {
                    var response = await RestClient.ListNextPageAsync(nextLink, resourceGroupName, deploymentName, top, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets all deployments operations for a deployment. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="deploymentName"> The name of the deployment. </param>
        /// <param name="top"> The number of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="deploymentName"/> is null. </exception>
        public virtual Pageable<DeploymentOperation> List(string resourceGroupName, string deploymentName, int? top = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (deploymentName == null)
            {
                throw new ArgumentNullException(nameof(deploymentName));
            }

            Page<DeploymentOperation> FirstPageFunc(int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("DeploymentOperations.List");
                scope0.Start();
                try
                {
                    var response = RestClient.List(resourceGroupName, deploymentName, top, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            Page<DeploymentOperation> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("DeploymentOperations.List");
                scope0.Start();
                try
                {
                    var response = RestClient.ListNextPage(nextLink, resourceGroupName, deploymentName, top, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
