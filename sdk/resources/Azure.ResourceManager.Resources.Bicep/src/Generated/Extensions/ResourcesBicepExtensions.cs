// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.ResourceManager.Resources.Bicep.Mocking;
using Azure.ResourceManager.Resources.Bicep.Models;

namespace Azure.ResourceManager.Resources.Bicep
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.Resources.Bicep. </summary>
    public static partial class ResourcesBicepExtensions
    {
        private static MockableResourcesBicepSubscriptionResource GetMockableResourcesBicepSubscriptionResource(ArmResource resource)
        {
            return resource.GetCachedClient(client => new MockableResourcesBicepSubscriptionResource(client, resource.Id));
        }

        /// <summary>
        /// Decompiles an ARM json template into a Bicep template
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Resources/decompileBicep</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DecompileOperationGroup_Bicep</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-11-01</description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableResourcesBicepSubscriptionResource.BicepDecompileOperationGroup(DecompileOperationContent,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="content"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> or <paramref name="content"/> is null. </exception>
        public static async Task<Response<DecompileOperationSuccessResponse>> BicepDecompileOperationGroupAsync(this SubscriptionResource subscriptionResource, DecompileOperationContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return await GetMockableResourcesBicepSubscriptionResource(subscriptionResource).BicepDecompileOperationGroupAsync(content, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Decompiles an ARM json template into a Bicep template
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Resources/decompileBicep</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DecompileOperationGroup_Bicep</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-11-01</description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableResourcesBicepSubscriptionResource.BicepDecompileOperationGroup(DecompileOperationContent,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="content"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> or <paramref name="content"/> is null. </exception>
        public static Response<DecompileOperationSuccessResponse> BicepDecompileOperationGroup(this SubscriptionResource subscriptionResource, DecompileOperationContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableResourcesBicepSubscriptionResource(subscriptionResource).BicepDecompileOperationGroup(content, cancellationToken);
        }
    }
}
