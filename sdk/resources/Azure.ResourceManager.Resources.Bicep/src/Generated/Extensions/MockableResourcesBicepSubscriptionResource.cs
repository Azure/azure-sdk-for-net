// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Resources.Bicep.Models;

namespace Azure.ResourceManager.Resources.Bicep.Mocking
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    public partial class MockableResourcesBicepSubscriptionResource : ArmResource
    {
        private ClientDiagnostics _decompileOperationGroupClientDiagnostics;
        private DecompileOperationGroupRestOperations _decompileOperationGroupRestClient;

        /// <summary> Initializes a new instance of the <see cref="MockableResourcesBicepSubscriptionResource"/> class for mocking. </summary>
        protected MockableResourcesBicepSubscriptionResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MockableResourcesBicepSubscriptionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableResourcesBicepSubscriptionResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics DecompileOperationGroupClientDiagnostics => _decompileOperationGroupClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Resources.Bicep", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private DecompileOperationGroupRestOperations DecompileOperationGroupRestClient => _decompileOperationGroupRestClient ??= new DecompileOperationGroupRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// Decompiles an ARM json template into a Bicep template
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Resources/decompileBicep</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DecompileOperationGroup_Bicep</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-11-01</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual async Task<Response<DecompileOperationSuccessResponse>> BicepDecompileOperationGroupAsync(DecompileOperationContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = DecompileOperationGroupClientDiagnostics.CreateScope("MockableResourcesBicepSubscriptionResource.BicepDecompileOperationGroup");
            scope.Start();
            try
            {
                var response = await DecompileOperationGroupRestClient.BicepAsync(Id.SubscriptionId, content, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Decompiles an ARM json template into a Bicep template
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Resources/decompileBicep</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DecompileOperationGroup_Bicep</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-11-01</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual Response<DecompileOperationSuccessResponse> BicepDecompileOperationGroup(DecompileOperationContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = DecompileOperationGroupClientDiagnostics.CreateScope("MockableResourcesBicepSubscriptionResource.BicepDecompileOperationGroup");
            scope.Start();
            try
            {
                var response = DecompileOperationGroupRestClient.Bicep(Id.SubscriptionId, content, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
