// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Resources.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmResourcesModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.DeploymentStackTemplateDefinition"/>. </summary>
        /// <param name="template"> The template content. Use this element to pass the template syntax directly in the request rather than link to an existing template. It can be a JObject or well-formed JSON string. Use either the templateLink property or the template property, but not both. </param>
        /// <param name="templateLink"> The URI of the template. Use either the templateLink property or the template property, but not both. </param>
        /// <returns> A new <see cref="Models.DeploymentStackTemplateDefinition"/> instance for mocking. </returns>
        public static DeploymentStackTemplateDefinition DeploymentStackTemplateDefinition(BinaryData template = null, DeploymentStacksTemplateLink templateLink = null)
        {
            return new DeploymentStackTemplateDefinition(template, templateLink, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Resources.DeploymentStackData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location"> The location of the Deployment stack. It cannot be changed after creation. It must be one of the supported Azure locations. </param>
        /// <param name="tags"> Deployment stack resource tags. </param>
        /// <param name="error"> The error detail. </param>
        /// <param name="template"> The template content. You use this element when you want to pass the template syntax directly in the request rather than link to an existing template. It can be a JObject or well-formed JSON string. Use either the templateLink property or the template property, but not both. </param>
        /// <param name="templateLink"> The URI of the template. Use either the templateLink property or the template property, but not both. </param>
        /// <param name="parameters"> Name and value pairs that define the deployment parameters for the template. Use this element when providing the parameter values directly in the request, rather than linking to an existing parameter file. Use either the parametersLink property or the parameters property, but not both. </param>
        /// <param name="parametersLink"> The URI of parameters file. Use this element to link to an existing parameters file. Use either the parametersLink property or the parameters property, but not both. </param>
        /// <param name="actionOnUnmanage"> Defines the behavior of resources that are no longer managed after the Deployment stack is updated or deleted. </param>
        /// <param name="debugSettingDetailLevel"> The debug setting of the deployment. </param>
        /// <param name="bypassStackOutOfSyncError"> Flag to bypass service errors that indicate the stack resource list is not correctly synchronized. </param>
        /// <param name="deploymentScope"> The scope at which the initial deployment should be created. If a scope is not specified, it will default to the scope of the deployment stack. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroupId}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'). </param>
        /// <param name="description"> Deployment stack description. Max length of 4096 characters. </param>
        /// <param name="denySettings"> Defines how resources deployed by the stack are locked. </param>
        /// <param name="provisioningState"> State of the deployment stack. </param>
        /// <param name="correlationId"> The correlation id of the last Deployment stack upsert or delete operation. It is in GUID format and is used for tracing. </param>
        /// <param name="detachedResources"> An array of resources that were detached during the most recent Deployment stack update. Detached means that the resource was removed from the template, but no relevant deletion operations were specified. So, the resource still exists while no longer being associated with the stack. </param>
        /// <param name="deletedResources"> An array of resources that were deleted during the most recent Deployment stack update. Deleted means that the resource was removed from the template and relevant deletion operations were specified. </param>
        /// <param name="failedResources"> An array of resources that failed to reach goal state during the most recent update. Each resourceId is accompanied by an error message. </param>
        /// <param name="resources"> An array of resources currently managed by the deployment stack. </param>
        /// <param name="deploymentId"> The resourceId of the deployment resource created by the deployment stack. </param>
        /// <param name="outputs"> The outputs of the deployment resource created by the deployment stack. </param>
        /// <param name="duration"> The duration of the last successful Deployment stack update. </param>
        /// <returns> A new <see cref="Resources.DeploymentStackData"/> instance for mocking. </returns>
        public static DeploymentStackData DeploymentStackData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AzureLocation? location = null, IDictionary<string, string> tags = null, ResponseError error = null, BinaryData template = null, DeploymentStacksTemplateLink templateLink = null, IDictionary<string, DeploymentParameter> parameters = null, DeploymentStacksParametersLink parametersLink = null, ActionOnUnmanage actionOnUnmanage = null, string debugSettingDetailLevel = null, bool? bypassStackOutOfSyncError = null, string deploymentScope = null, string description = null, DenySettings denySettings = null, DeploymentStackProvisioningState? provisioningState = null, string correlationId = null, IEnumerable<SubResource> detachedResources = null, IEnumerable<SubResource> deletedResources = null, IEnumerable<ResourceReferenceExtended> failedResources = null, IEnumerable<ManagedResourceReference> resources = null, string deploymentId = null, BinaryData outputs = null, TimeSpan? duration = null)
        {
            tags ??= new Dictionary<string, string>();
            parameters ??= new Dictionary<string, DeploymentParameter>();
            detachedResources ??= new List<SubResource>();
            deletedResources ??= new List<SubResource>();
            failedResources ??= new List<ResourceReferenceExtended>();
            resources ??= new List<ManagedResourceReference>();

            return new DeploymentStackData(
                id,
                name,
                resourceType,
                systemData,
                location,
                tags,
                error,
                template,
                templateLink,
                parameters,
                parametersLink,
                actionOnUnmanage,
                debugSettingDetailLevel != null ? new DeploymentStacksDebugSetting(debugSettingDetailLevel, serializedAdditionalRawData: null) : null,
                bypassStackOutOfSyncError,
                deploymentScope,
                description,
                denySettings,
                provisioningState,
                correlationId,
                detachedResources?.ToList(),
                deletedResources?.ToList(),
                failedResources?.ToList(),
                resources?.ToList(),
                deploymentId,
                outputs,
                duration,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResourceReferenceAutoGenerated"/>. </summary>
        /// <param name="id"> The resourceId of a resource managed by the deployment stack. </param>
        /// <returns> A new <see cref="Models.ResourceReferenceAutoGenerated"/> instance for mocking. </returns>
        public static ResourceReferenceAutoGenerated ResourceReferenceAutoGenerated(string id = null)
        {
            return new ResourceReferenceAutoGenerated(id, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResourceReferenceExtended"/>. </summary>
        /// <param name="id"> The resourceId of a resource managed by the deployment stack. </param>
        /// <param name="error"> The error detail. </param>
        /// <returns> A new <see cref="Models.ResourceReferenceExtended"/> instance for mocking. </returns>
        public static ResourceReferenceExtended ResourceReferenceExtended(string id = null, ResponseError error = null)
        {
            return new ResourceReferenceExtended(id, serializedAdditionalRawData: null, error);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ManagedResourceReference"/>. </summary>
        /// <param name="id"> The resourceId of a resource managed by the deployment stack. </param>
        /// <param name="status"> Current management state of the resource in the deployment stack. </param>
        /// <param name="denyStatus"> denyAssignment settings applied to the resource. </param>
        /// <returns> A new <see cref="Models.ManagedResourceReference"/> instance for mocking. </returns>
        public static ManagedResourceReference ManagedResourceReference(string id = null, ResourceStatusMode? status = null, DenyStatusMode? denyStatus = null)
        {
            return new ManagedResourceReference(id, serializedAdditionalRawData: null, status, denyStatus);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DeploymentStackValidateResult"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The validation result details. </param>
        /// <param name="error"> The error detail. </param>
        /// <returns> A new <see cref="Models.DeploymentStackValidateResult"/> instance for mocking. </returns>
        public static DeploymentStackValidateResult DeploymentStackValidateResult(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, DeploymentStackValidateProperties properties = null, ResponseError error = null)
        {
            return new DeploymentStackValidateResult(
                id,
                name,
                resourceType,
                systemData,
                properties,
                error,
                serializedAdditionalRawData: null);
        }
    }
}
