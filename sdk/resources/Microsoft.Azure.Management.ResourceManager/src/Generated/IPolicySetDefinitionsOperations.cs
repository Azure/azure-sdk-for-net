// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ResourceManager
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// PolicySetDefinitionsOperations operations.
    /// </summary>
    public partial interface IPolicySetDefinitionsOperations
    {
        /// <summary>
        /// Creates or updates a policy set definition.
        /// </summary>
        /// <remarks>
        /// This operation creates or updates a policy set definition in the
        /// given subscription with the given name.
        /// </remarks>
        /// <param name='policySetDefinitionName'>
        /// The name of the policy set definition to create.
        /// </param>
        /// <param name='parameters'>
        /// The policy set definition properties.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<PolicySetDefinition>> CreateOrUpdateWithHttpMessagesAsync(string policySetDefinitionName, PolicySetDefinition parameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deletes a policy set definition.
        /// </summary>
        /// <remarks>
        /// This operation deletes the policy set definition in the given
        /// subscription with the given name.
        /// </remarks>
        /// <param name='policySetDefinitionName'>
        /// The name of the policy set definition to delete.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse> DeleteWithHttpMessagesAsync(string policySetDefinitionName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieves a policy set definition.
        /// </summary>
        /// <remarks>
        /// This operation retrieves the policy set definition in the given
        /// subscription with the given name.
        /// </remarks>
        /// <param name='policySetDefinitionName'>
        /// The name of the policy set definition to get.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<PolicySetDefinition>> GetWithHttpMessagesAsync(string policySetDefinitionName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieves a built in policy set definition.
        /// </summary>
        /// <remarks>
        /// This operation retrieves the built-in policy set definition with
        /// the given name.
        /// </remarks>
        /// <param name='policySetDefinitionName'>
        /// The name of the policy set definition to get.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<PolicySetDefinition>> GetBuiltInWithHttpMessagesAsync(string policySetDefinitionName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieves the policy set definitions for a subscription.
        /// </summary>
        /// <remarks>
        /// This operation retrieves a list of all the policy set definitions
        /// in a given subscription that match the optional given $filter.
        /// Valid values for $filter are: 'atExactScope()', 'policyType -eq
        /// {value}' or 'category eq '{value}''. If $filter is not provided,
        /// the unfiltered list includes all policy set definitions associated
        /// with the subscription, including those that apply directly or from
        /// management groups that contain the given subscription. If
        /// $filter=atExactScope() is provided, the returned list only includes
        /// all policy set definitions that at the given subscription. If
        /// $filter='policyType -eq {value}' is provided, the returned list
        /// only includes all policy set definitions whose type match the
        /// {value}. Possible policyType values are NotSpecified, BuiltIn and
        /// Custom. If $filter='category -eq {value}' is provided, the returned
        /// list only includes all policy set definitions whose category match
        /// the {value}.
        /// </remarks>
        /// <param name='filter'>
        /// The filter to apply on the operation. Valid values for $filter are:
        /// 'atExactScope()', 'policyType -eq {value}' or 'category eq
        /// '{value}''. If $filter is not provided, no filtering is performed.
        /// If $filter=atExactScope() is provided, the returned list only
        /// includes all policy set definitions that at the given scope. If
        /// $filter='policyType -eq {value}' is provided, the returned list
        /// only includes all policy set definitions whose type match the
        /// {value}. Possible policyType values are NotSpecified, BuiltIn,
        /// Custom, and Static. If $filter='category -eq {value}' is provided,
        /// the returned list only includes all policy set definitions whose
        /// category match the {value}.
        /// </param>
        /// <param name='top'>
        /// Maximum number of records to return. When the $top filter is not
        /// provided, it will return 500 records.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<IPage<PolicySetDefinition>>> ListWithHttpMessagesAsync(string filter = default(string), int? top = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieves built-in policy set definitions.
        /// </summary>
        /// <remarks>
        /// This operation retrieves a list of all the built-in policy set
        /// definitions that match the optional given $filter. If
        /// $filter='category -eq {value}' is provided, the returned list only
        /// includes all built-in policy set definitions whose category match
        /// the {value}.
        /// </remarks>
        /// <param name='filter'>
        /// The filter to apply on the operation. Valid values for $filter are:
        /// 'atExactScope()', 'policyType -eq {value}' or 'category eq
        /// '{value}''. If $filter is not provided, no filtering is performed.
        /// If $filter=atExactScope() is provided, the returned list only
        /// includes all policy set definitions that at the given scope. If
        /// $filter='policyType -eq {value}' is provided, the returned list
        /// only includes all policy set definitions whose type match the
        /// {value}. Possible policyType values are NotSpecified, BuiltIn,
        /// Custom, and Static. If $filter='category -eq {value}' is provided,
        /// the returned list only includes all policy set definitions whose
        /// category match the {value}.
        /// </param>
        /// <param name='top'>
        /// Maximum number of records to return. When the $top filter is not
        /// provided, it will return 500 records.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<IPage<PolicySetDefinition>>> ListBuiltInWithHttpMessagesAsync(string filter = default(string), int? top = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates or updates a policy set definition.
        /// </summary>
        /// <remarks>
        /// This operation creates or updates a policy set definition in the
        /// given management group with the given name.
        /// </remarks>
        /// <param name='policySetDefinitionName'>
        /// The name of the policy set definition to create.
        /// </param>
        /// <param name='parameters'>
        /// The policy set definition properties.
        /// </param>
        /// <param name='managementGroupId'>
        /// The ID of the management group.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<PolicySetDefinition>> CreateOrUpdateAtManagementGroupWithHttpMessagesAsync(string policySetDefinitionName, PolicySetDefinition parameters, string managementGroupId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deletes a policy set definition.
        /// </summary>
        /// <remarks>
        /// This operation deletes the policy set definition in the given
        /// management group with the given name.
        /// </remarks>
        /// <param name='policySetDefinitionName'>
        /// The name of the policy set definition to delete.
        /// </param>
        /// <param name='managementGroupId'>
        /// The ID of the management group.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse> DeleteAtManagementGroupWithHttpMessagesAsync(string policySetDefinitionName, string managementGroupId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieves a policy set definition.
        /// </summary>
        /// <remarks>
        /// This operation retrieves the policy set definition in the given
        /// management group with the given name.
        /// </remarks>
        /// <param name='policySetDefinitionName'>
        /// The name of the policy set definition to get.
        /// </param>
        /// <param name='managementGroupId'>
        /// The ID of the management group.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<PolicySetDefinition>> GetAtManagementGroupWithHttpMessagesAsync(string policySetDefinitionName, string managementGroupId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieves all policy set definitions in management group.
        /// </summary>
        /// <remarks>
        /// This operation retrieves a list of all the policy set definitions
        /// in a given management group that match the optional given $filter.
        /// Valid values for $filter are: 'atExactScope()', 'policyType -eq
        /// {value}' or 'category eq '{value}''. If $filter is not provided,
        /// the unfiltered list includes all policy set definitions associated
        /// with the management group, including those that apply directly or
        /// from management groups that contain the given management group. If
        /// $filter=atExactScope() is provided, the returned list only includes
        /// all policy set definitions that at the given management group. If
        /// $filter='policyType -eq {value}' is provided, the returned list
        /// only includes all policy set definitions whose type match the
        /// {value}. Possible policyType values are NotSpecified, BuiltIn and
        /// Custom. If $filter='category -eq {value}' is provided, the returned
        /// list only includes all policy set definitions whose category match
        /// the {value}.
        /// </remarks>
        /// <param name='managementGroupId'>
        /// The ID of the management group.
        /// </param>
        /// <param name='filter'>
        /// The filter to apply on the operation. Valid values for $filter are:
        /// 'atExactScope()', 'policyType -eq {value}' or 'category eq
        /// '{value}''. If $filter is not provided, no filtering is performed.
        /// If $filter=atExactScope() is provided, the returned list only
        /// includes all policy set definitions that at the given scope. If
        /// $filter='policyType -eq {value}' is provided, the returned list
        /// only includes all policy set definitions whose type match the
        /// {value}. Possible policyType values are NotSpecified, BuiltIn,
        /// Custom, and Static. If $filter='category -eq {value}' is provided,
        /// the returned list only includes all policy set definitions whose
        /// category match the {value}.
        /// </param>
        /// <param name='top'>
        /// Maximum number of records to return. When the $top filter is not
        /// provided, it will return 500 records.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<IPage<PolicySetDefinition>>> ListByManagementGroupWithHttpMessagesAsync(string managementGroupId, string filter = default(string), int? top = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieves the policy set definitions for a subscription.
        /// </summary>
        /// <remarks>
        /// This operation retrieves a list of all the policy set definitions
        /// in a given subscription that match the optional given $filter.
        /// Valid values for $filter are: 'atExactScope()', 'policyType -eq
        /// {value}' or 'category eq '{value}''. If $filter is not provided,
        /// the unfiltered list includes all policy set definitions associated
        /// with the subscription, including those that apply directly or from
        /// management groups that contain the given subscription. If
        /// $filter=atExactScope() is provided, the returned list only includes
        /// all policy set definitions that at the given subscription. If
        /// $filter='policyType -eq {value}' is provided, the returned list
        /// only includes all policy set definitions whose type match the
        /// {value}. Possible policyType values are NotSpecified, BuiltIn and
        /// Custom. If $filter='category -eq {value}' is provided, the returned
        /// list only includes all policy set definitions whose category match
        /// the {value}.
        /// </remarks>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<IPage<PolicySetDefinition>>> ListNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieves built-in policy set definitions.
        /// </summary>
        /// <remarks>
        /// This operation retrieves a list of all the built-in policy set
        /// definitions that match the optional given $filter. If
        /// $filter='category -eq {value}' is provided, the returned list only
        /// includes all built-in policy set definitions whose category match
        /// the {value}.
        /// </remarks>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<IPage<PolicySetDefinition>>> ListBuiltInNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieves all policy set definitions in management group.
        /// </summary>
        /// <remarks>
        /// This operation retrieves a list of all the policy set definitions
        /// in a given management group that match the optional given $filter.
        /// Valid values for $filter are: 'atExactScope()', 'policyType -eq
        /// {value}' or 'category eq '{value}''. If $filter is not provided,
        /// the unfiltered list includes all policy set definitions associated
        /// with the management group, including those that apply directly or
        /// from management groups that contain the given management group. If
        /// $filter=atExactScope() is provided, the returned list only includes
        /// all policy set definitions that at the given management group. If
        /// $filter='policyType -eq {value}' is provided, the returned list
        /// only includes all policy set definitions whose type match the
        /// {value}. Possible policyType values are NotSpecified, BuiltIn and
        /// Custom. If $filter='category -eq {value}' is provided, the returned
        /// list only includes all policy set definitions whose category match
        /// the {value}.
        /// </remarks>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<IPage<PolicySetDefinition>>> ListByManagementGroupNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
