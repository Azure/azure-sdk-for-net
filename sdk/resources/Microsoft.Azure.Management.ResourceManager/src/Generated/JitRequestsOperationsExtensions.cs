// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ResourceManager
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for JitRequestsOperations.
    /// </summary>
    public static partial class JitRequestsOperationsExtensions
    {
            /// <summary>
            /// Gets the JIT request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jitRequestName'>
            /// The name of the JIT request.
            /// </param>
            public static JitRequestDefinition Get(this IJitRequestsOperations operations, string resourceGroupName, string jitRequestName)
            {
                return operations.GetAsync(resourceGroupName, jitRequestName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the JIT request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jitRequestName'>
            /// The name of the JIT request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JitRequestDefinition> GetAsync(this IJitRequestsOperations operations, string resourceGroupName, string jitRequestName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, jitRequestName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates the JIT request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jitRequestName'>
            /// The name of the JIT request.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the update JIT request.
            /// </param>
            public static JitRequestDefinition CreateOrUpdate(this IJitRequestsOperations operations, string resourceGroupName, string jitRequestName, JitRequestDefinition parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, jitRequestName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates the JIT request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jitRequestName'>
            /// The name of the JIT request.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the update JIT request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JitRequestDefinition> CreateOrUpdateAsync(this IJitRequestsOperations operations, string resourceGroupName, string jitRequestName, JitRequestDefinition parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, jitRequestName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the JIT request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jitRequestName'>
            /// The name of the JIT request.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the update JIT request.
            /// </param>
            public static JitRequestDefinition Update(this IJitRequestsOperations operations, string resourceGroupName, string jitRequestName, JitRequestPatchable parameters)
            {
                return operations.UpdateAsync(resourceGroupName, jitRequestName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the JIT request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jitRequestName'>
            /// The name of the JIT request.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the update JIT request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JitRequestDefinition> UpdateAsync(this IJitRequestsOperations operations, string resourceGroupName, string jitRequestName, JitRequestPatchable parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, jitRequestName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the JIT request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jitRequestName'>
            /// The name of the JIT request.
            /// </param>
            public static void Delete(this IJitRequestsOperations operations, string resourceGroupName, string jitRequestName)
            {
                operations.DeleteAsync(resourceGroupName, jitRequestName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the JIT request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jitRequestName'>
            /// The name of the JIT request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IJitRequestsOperations operations, string resourceGroupName, string jitRequestName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, jitRequestName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Retrieves all JIT requests within the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static JitRequestDefinitionListResult ListBySubscription(this IJitRequestsOperations operations)
            {
                return operations.ListBySubscriptionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all JIT requests within the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JitRequestDefinitionListResult> ListBySubscriptionAsync(this IJitRequestsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves all JIT requests within the resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            public static JitRequestDefinitionListResult ListByResourceGroup(this IJitRequestsOperations operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all JIT requests within the resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JitRequestDefinitionListResult> ListByResourceGroupAsync(this IJitRequestsOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates the JIT request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jitRequestName'>
            /// The name of the JIT request.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the update JIT request.
            /// </param>
            public static JitRequestDefinition BeginCreateOrUpdate(this IJitRequestsOperations operations, string resourceGroupName, string jitRequestName, JitRequestDefinition parameters)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, jitRequestName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates the JIT request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jitRequestName'>
            /// The name of the JIT request.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the update JIT request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JitRequestDefinition> BeginCreateOrUpdateAsync(this IJitRequestsOperations operations, string resourceGroupName, string jitRequestName, JitRequestDefinition parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, jitRequestName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
