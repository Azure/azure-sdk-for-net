// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ResourceManager.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Information about JIT request definition.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class JitRequestDefinition : Resource
    {
        /// <summary>
        /// Initializes a new instance of the JitRequestDefinition class.
        /// </summary>
        public JitRequestDefinition()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the JitRequestDefinition class.
        /// </summary>
        /// <param name="applicationResourceId">The parent application
        /// id.</param>
        /// <param name="jitAuthorizationPolicies">The JIT authorization
        /// policies.</param>
        /// <param name="jitSchedulingPolicy">The JIT request
        /// properties.</param>
        /// <param name="id">Resource ID</param>
        /// <param name="name">Resource name</param>
        /// <param name="type">Resource type</param>
        /// <param name="location">Resource location</param>
        /// <param name="tags">Resource tags</param>
        /// <param name="publisherTenantId">The publisher tenant id.</param>
        /// <param name="provisioningState">The JIT request provisioning state.
        /// Possible values include: 'NotSpecified', 'Accepted', 'Running',
        /// 'Ready', 'Creating', 'Created', 'Deleting', 'Deleted', 'Canceled',
        /// 'Failed', 'Succeeded', 'Updating'</param>
        /// <param name="jitRequestState">The JIT request state. Possible
        /// values include: 'NotSpecified', 'Pending', 'Approved', 'Denied',
        /// 'Failed', 'Canceled', 'Expired', 'Timeout'</param>
        /// <param name="createdBy">The client entity that created the JIT
        /// request.</param>
        /// <param name="updatedBy">The client entity that last updated the JIT
        /// request.</param>
        public JitRequestDefinition(string applicationResourceId, IList<JitAuthorizationPolicies> jitAuthorizationPolicies, JitSchedulingPolicy jitSchedulingPolicy, string id = default(string), string name = default(string), string type = default(string), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string publisherTenantId = default(string), string provisioningState = default(string), string jitRequestState = default(string), ApplicationClientDetails createdBy = default(ApplicationClientDetails), ApplicationClientDetails updatedBy = default(ApplicationClientDetails))
            : base(id, name, type, location, tags)
        {
            ApplicationResourceId = applicationResourceId;
            PublisherTenantId = publisherTenantId;
            JitAuthorizationPolicies = jitAuthorizationPolicies;
            JitSchedulingPolicy = jitSchedulingPolicy;
            ProvisioningState = provisioningState;
            JitRequestState = jitRequestState;
            CreatedBy = createdBy;
            UpdatedBy = updatedBy;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the parent application id.
        /// </summary>
        [JsonProperty(PropertyName = "properties.applicationResourceId")]
        public string ApplicationResourceId { get; set; }

        /// <summary>
        /// Gets the publisher tenant id.
        /// </summary>
        [JsonProperty(PropertyName = "properties.publisherTenantId")]
        public string PublisherTenantId { get; private set; }

        /// <summary>
        /// Gets or sets the JIT authorization policies.
        /// </summary>
        [JsonProperty(PropertyName = "properties.jitAuthorizationPolicies")]
        public IList<JitAuthorizationPolicies> JitAuthorizationPolicies { get; set; }

        /// <summary>
        /// Gets or sets the JIT request properties.
        /// </summary>
        [JsonProperty(PropertyName = "properties.jitSchedulingPolicy")]
        public JitSchedulingPolicy JitSchedulingPolicy { get; set; }

        /// <summary>
        /// Gets the JIT request provisioning state. Possible values include:
        /// 'NotSpecified', 'Accepted', 'Running', 'Ready', 'Creating',
        /// 'Created', 'Deleting', 'Deleted', 'Canceled', 'Failed',
        /// 'Succeeded', 'Updating'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets the JIT request state. Possible values include:
        /// 'NotSpecified', 'Pending', 'Approved', 'Denied', 'Failed',
        /// 'Canceled', 'Expired', 'Timeout'
        /// </summary>
        [JsonProperty(PropertyName = "properties.jitRequestState")]
        public string JitRequestState { get; private set; }

        /// <summary>
        /// Gets the client entity that created the JIT request.
        /// </summary>
        [JsonProperty(PropertyName = "properties.createdBy")]
        public ApplicationClientDetails CreatedBy { get; private set; }

        /// <summary>
        /// Gets the client entity that last updated the JIT request.
        /// </summary>
        [JsonProperty(PropertyName = "properties.updatedBy")]
        public ApplicationClientDetails UpdatedBy { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ApplicationResourceId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ApplicationResourceId");
            }
            if (JitAuthorizationPolicies == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "JitAuthorizationPolicies");
            }
            if (JitSchedulingPolicy == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "JitSchedulingPolicy");
            }
            if (JitAuthorizationPolicies != null)
            {
                foreach (var element in JitAuthorizationPolicies)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (JitSchedulingPolicy != null)
            {
                JitSchedulingPolicy.Validate();
            }
        }
    }
}
