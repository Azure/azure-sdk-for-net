// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ResourceManager.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The predicted change to the resource property.
    /// </summary>
    public partial class WhatIfPropertyChange
    {
        /// <summary>
        /// Initializes a new instance of the WhatIfPropertyChange class.
        /// </summary>
        public WhatIfPropertyChange()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WhatIfPropertyChange class.
        /// </summary>
        /// <param name="path">The path of the property.</param>
        /// <param name="propertyChangeType">The type of property change.
        /// Possible values include: 'Create', 'Delete', 'Modify', 'Array',
        /// 'NoEffect'</param>
        /// <param name="before">The value of the property before the
        /// deployment is executed.</param>
        /// <param name="after">The value of the property after the deployment
        /// is executed.</param>
        /// <param name="children">Nested property changes.</param>
        public WhatIfPropertyChange(string path, PropertyChangeType propertyChangeType, object before = default(object), object after = default(object), IList<WhatIfPropertyChange> children = default(IList<WhatIfPropertyChange>))
        {
            Path = path;
            PropertyChangeType = propertyChangeType;
            Before = before;
            After = after;
            Children = children;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the path of the property.
        /// </summary>
        [JsonProperty(PropertyName = "path")]
        public string Path { get; set; }

        /// <summary>
        /// Gets or sets the type of property change. Possible values include:
        /// 'Create', 'Delete', 'Modify', 'Array', 'NoEffect'
        /// </summary>
        [JsonProperty(PropertyName = "propertyChangeType")]
        public PropertyChangeType PropertyChangeType { get; set; }

        /// <summary>
        /// Gets or sets the value of the property before the deployment is
        /// executed.
        /// </summary>
        [JsonProperty(PropertyName = "before")]
        public object Before { get; set; }

        /// <summary>
        /// Gets or sets the value of the property after the deployment is
        /// executed.
        /// </summary>
        [JsonProperty(PropertyName = "after")]
        public object After { get; set; }

        /// <summary>
        /// Gets or sets nested property changes.
        /// </summary>
        [JsonProperty(PropertyName = "children")]
        public IList<WhatIfPropertyChange> Children { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Path == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Path");
            }
            if (Children != null)
            {
                foreach (var element in Children)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
