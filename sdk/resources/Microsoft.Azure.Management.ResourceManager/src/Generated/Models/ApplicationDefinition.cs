// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ResourceManager.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Information about managed application definition.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ApplicationDefinition : GenericResource
    {
        /// <summary>
        /// Initializes a new instance of the ApplicationDefinition class.
        /// </summary>
        public ApplicationDefinition()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ApplicationDefinition class.
        /// </summary>
        /// <param name="lockLevel">The managed application lock level.
        /// Possible values include: 'CanNotDelete', 'ReadOnly', 'None'</param>
        /// <param name="id">Resource ID</param>
        /// <param name="name">Resource name</param>
        /// <param name="type">Resource type</param>
        /// <param name="location">Resource location</param>
        /// <param name="tags">Resource tags</param>
        /// <param name="managedBy">ID of the resource that manages this
        /// resource.</param>
        /// <param name="sku">The SKU of the resource.</param>
        /// <param name="displayName">The managed application definition
        /// display name.</param>
        /// <param name="isEnabled">A value indicating whether the package is
        /// enabled or not.</param>
        /// <param name="authorizations">The managed application provider
        /// authorizations.</param>
        /// <param name="artifacts">The collection of managed application
        /// artifacts. The portal will use the files specified as artifacts to
        /// construct the user experience of creating a managed application
        /// from a managed application definition.</param>
        /// <param name="description">The managed application definition
        /// description.</param>
        /// <param name="packageFileUri">The managed application definition
        /// package file Uri. Use this element</param>
        /// <param name="storageAccountId">The storage account id for bring
        /// your own storage scenario.</param>
        /// <param name="mainTemplate">The inline main template json which has
        /// resources to be provisioned. It can be a JObject or well-formed
        /// JSON string.</param>
        /// <param name="createUiDefinition">The createUiDefinition json for
        /// the backing template with Microsoft.Solutions/applications
        /// resource. It can be a JObject or well-formed JSON string.</param>
        /// <param name="notificationPolicy">The managed application
        /// notification policy.</param>
        /// <param name="lockingPolicy">The managed application locking
        /// policy.</param>
        /// <param name="deploymentPolicy">The managed application deployment
        /// policy.</param>
        /// <param name="managementPolicy">The managed application management
        /// policy that determines publisher's access to the managed resource
        /// group.</param>
        /// <param name="policies">The managed application provider
        /// policies.</param>
        public ApplicationDefinition(ApplicationLockLevel lockLevel, string id = default(string), string name = default(string), string type = default(string), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string managedBy = default(string), Sku sku = default(Sku), string displayName = default(string), bool? isEnabled = default(bool?), IList<ApplicationAuthorization> authorizations = default(IList<ApplicationAuthorization>), IList<ApplicationDefinitionArtifact> artifacts = default(IList<ApplicationDefinitionArtifact>), string description = default(string), string packageFileUri = default(string), string storageAccountId = default(string), object mainTemplate = default(object), object createUiDefinition = default(object), ApplicationNotificationPolicy notificationPolicy = default(ApplicationNotificationPolicy), ApplicationPackageLockingPolicyDefinition lockingPolicy = default(ApplicationPackageLockingPolicyDefinition), ApplicationDeploymentPolicy deploymentPolicy = default(ApplicationDeploymentPolicy), ApplicationManagementPolicy managementPolicy = default(ApplicationManagementPolicy), IList<ApplicationPolicy> policies = default(IList<ApplicationPolicy>))
            : base(id, name, type, location, tags, managedBy, sku)
        {
            LockLevel = lockLevel;
            DisplayName = displayName;
            IsEnabled = isEnabled;
            Authorizations = authorizations;
            Artifacts = artifacts;
            Description = description;
            PackageFileUri = packageFileUri;
            StorageAccountId = storageAccountId;
            MainTemplate = mainTemplate;
            CreateUiDefinition = createUiDefinition;
            NotificationPolicy = notificationPolicy;
            LockingPolicy = lockingPolicy;
            DeploymentPolicy = deploymentPolicy;
            ManagementPolicy = managementPolicy;
            Policies = policies;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the managed application lock level. Possible values
        /// include: 'CanNotDelete', 'ReadOnly', 'None'
        /// </summary>
        [JsonProperty(PropertyName = "properties.lockLevel")]
        public ApplicationLockLevel LockLevel { get; set; }

        /// <summary>
        /// Gets or sets the managed application definition display name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the package is enabled or
        /// not.
        /// </summary>
        [JsonProperty(PropertyName = "properties.isEnabled")]
        public bool? IsEnabled { get; set; }

        /// <summary>
        /// Gets or sets the managed application provider authorizations.
        /// </summary>
        [JsonProperty(PropertyName = "properties.authorizations")]
        public IList<ApplicationAuthorization> Authorizations { get; set; }

        /// <summary>
        /// Gets or sets the collection of managed application artifacts. The
        /// portal will use the files specified as artifacts to construct the
        /// user experience of creating a managed application from a managed
        /// application definition.
        /// </summary>
        [JsonProperty(PropertyName = "properties.artifacts")]
        public IList<ApplicationDefinitionArtifact> Artifacts { get; set; }

        /// <summary>
        /// Gets or sets the managed application definition description.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the managed application definition package file Uri.
        /// Use this element
        /// </summary>
        [JsonProperty(PropertyName = "properties.packageFileUri")]
        public string PackageFileUri { get; set; }

        /// <summary>
        /// Gets or sets the storage account id for bring your own storage
        /// scenario.
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageAccountId")]
        public string StorageAccountId { get; set; }

        /// <summary>
        /// Gets or sets the inline main template json which has resources to
        /// be provisioned. It can be a JObject or well-formed JSON string.
        /// </summary>
        [JsonProperty(PropertyName = "properties.mainTemplate")]
        public object MainTemplate { get; set; }

        /// <summary>
        /// Gets or sets the createUiDefinition json for the backing template
        /// with Microsoft.Solutions/applications resource. It can be a JObject
        /// or well-formed JSON string.
        /// </summary>
        [JsonProperty(PropertyName = "properties.createUiDefinition")]
        public object CreateUiDefinition { get; set; }

        /// <summary>
        /// Gets or sets the managed application notification policy.
        /// </summary>
        [JsonProperty(PropertyName = "properties.notificationPolicy")]
        public ApplicationNotificationPolicy NotificationPolicy { get; set; }

        /// <summary>
        /// Gets or sets the managed application locking policy.
        /// </summary>
        [JsonProperty(PropertyName = "properties.lockingPolicy")]
        public ApplicationPackageLockingPolicyDefinition LockingPolicy { get; set; }

        /// <summary>
        /// Gets or sets the managed application deployment policy.
        /// </summary>
        [JsonProperty(PropertyName = "properties.deploymentPolicy")]
        public ApplicationDeploymentPolicy DeploymentPolicy { get; set; }

        /// <summary>
        /// Gets or sets the managed application management policy that
        /// determines publisher's access to the managed resource group.
        /// </summary>
        [JsonProperty(PropertyName = "properties.managementPolicy")]
        public ApplicationManagementPolicy ManagementPolicy { get; set; }

        /// <summary>
        /// Gets or sets the managed application provider policies.
        /// </summary>
        [JsonProperty(PropertyName = "properties.policies")]
        public IList<ApplicationPolicy> Policies { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Authorizations != null)
            {
                foreach (var element in Authorizations)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Artifacts != null)
            {
                foreach (var element1 in Artifacts)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (NotificationPolicy != null)
            {
                NotificationPolicy.Validate();
            }
            if (DeploymentPolicy != null)
            {
                DeploymentPolicy.Validate();
            }
        }
    }
}
