// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ResourceManager.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Managed application Jit access policy.
    /// </summary>
    public partial class ApplicationJitAccessPolicy
    {
        /// <summary>
        /// Initializes a new instance of the ApplicationJitAccessPolicy class.
        /// </summary>
        public ApplicationJitAccessPolicy()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ApplicationJitAccessPolicy class.
        /// </summary>
        /// <param name="jitAccessEnabled">Whether the JIT access is
        /// enabled.</param>
        /// <param name="jitApprovalMode">JIT approval mode. Possible values
        /// include: 'NotSpecified', 'AutoApprove', 'ManualApprove'</param>
        /// <param name="jitApprovers">The JIT approvers</param>
        /// <param name="maximumJitAccessDuration">The maximum duration JIT
        /// access is granted. This is an ISO8601 time period value.</param>
        public ApplicationJitAccessPolicy(bool jitAccessEnabled, string jitApprovalMode = default(string), IList<JitApproverDefinition> jitApprovers = default(IList<JitApproverDefinition>), string maximumJitAccessDuration = default(string))
        {
            JitAccessEnabled = jitAccessEnabled;
            JitApprovalMode = jitApprovalMode;
            JitApprovers = jitApprovers;
            MaximumJitAccessDuration = maximumJitAccessDuration;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets whether the JIT access is enabled.
        /// </summary>
        [JsonProperty(PropertyName = "jitAccessEnabled")]
        public bool JitAccessEnabled { get; set; }

        /// <summary>
        /// Gets or sets JIT approval mode. Possible values include:
        /// 'NotSpecified', 'AutoApprove', 'ManualApprove'
        /// </summary>
        [JsonProperty(PropertyName = "jitApprovalMode")]
        public string JitApprovalMode { get; set; }

        /// <summary>
        /// Gets or sets the JIT approvers
        /// </summary>
        [JsonProperty(PropertyName = "jitApprovers")]
        public IList<JitApproverDefinition> JitApprovers { get; set; }

        /// <summary>
        /// Gets or sets the maximum duration JIT access is granted. This is an
        /// ISO8601 time period value.
        /// </summary>
        [JsonProperty(PropertyName = "maximumJitAccessDuration")]
        public string MaximumJitAccessDuration { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (JitApprovers != null)
            {
                foreach (var element in JitApprovers)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
