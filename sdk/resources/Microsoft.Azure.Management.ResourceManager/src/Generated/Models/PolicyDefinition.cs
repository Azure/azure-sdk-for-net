// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ResourceManager.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The policy definition.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class PolicyDefinition : IResource
    {
        /// <summary>
        /// Initializes a new instance of the PolicyDefinition class.
        /// </summary>
        public PolicyDefinition()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PolicyDefinition class.
        /// </summary>
        /// <param name="policyType">The type of policy definition. Possible
        /// values are NotSpecified, BuiltIn, Custom, and Static. Possible
        /// values include: 'NotSpecified', 'BuiltIn', 'Custom',
        /// 'Static'</param>
        /// <param name="mode">The policy definition mode. Some examples are
        /// All, Indexed, Microsoft.KeyVault.Data.</param>
        /// <param name="displayName">The display name of the policy
        /// definition.</param>
        /// <param name="description">The policy definition
        /// description.</param>
        /// <param name="policyRule">The policy rule.</param>
        /// <param name="metadata">The policy definition metadata.  Metadata is
        /// an open ended object and is typically a collection of key value
        /// pairs.</param>
        /// <param name="parameters">The parameter definitions for parameters
        /// used in the policy rule. The keys are the parameter names.</param>
        /// <param name="id">The ID of the policy definition.</param>
        /// <param name="name">The name of the policy definition.</param>
        /// <param name="type">The type of the resource
        /// (Microsoft.Authorization/policyDefinitions).</param>
        public PolicyDefinition(string policyType = default(string), string mode = default(string), string displayName = default(string), string description = default(string), object policyRule = default(object), object metadata = default(object), IDictionary<string, ParameterDefinitionsValue> parameters = default(IDictionary<string, ParameterDefinitionsValue>), string id = default(string), string name = default(string), string type = default(string))
        {
            PolicyType = policyType;
            Mode = mode;
            DisplayName = displayName;
            Description = description;
            PolicyRule = policyRule;
            Metadata = metadata;
            Parameters = parameters;
            Id = id;
            Name = name;
            Type = type;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the type of policy definition. Possible values are
        /// NotSpecified, BuiltIn, Custom, and Static. Possible values include:
        /// 'NotSpecified', 'BuiltIn', 'Custom', 'Static'
        /// </summary>
        [JsonProperty(PropertyName = "properties.policyType")]
        public string PolicyType { get; set; }

        /// <summary>
        /// Gets or sets the policy definition mode. Some examples are All,
        /// Indexed, Microsoft.KeyVault.Data.
        /// </summary>
        [JsonProperty(PropertyName = "properties.mode")]
        public string Mode { get; set; }

        /// <summary>
        /// Gets or sets the display name of the policy definition.
        /// </summary>
        [JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the policy definition description.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the policy rule.
        /// </summary>
        [JsonProperty(PropertyName = "properties.policyRule")]
        public object PolicyRule { get; set; }

        /// <summary>
        /// Gets or sets the policy definition metadata.  Metadata is an open
        /// ended object and is typically a collection of key value pairs.
        /// </summary>
        [JsonProperty(PropertyName = "properties.metadata")]
        public object Metadata { get; set; }

        /// <summary>
        /// Gets or sets the parameter definitions for parameters used in the
        /// policy rule. The keys are the parameter names.
        /// </summary>
        [JsonProperty(PropertyName = "properties.parameters")]
        public IDictionary<string, ParameterDefinitionsValue> Parameters { get; set; }

        /// <summary>
        /// Gets the ID of the policy definition.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; private set; }

        /// <summary>
        /// Gets the name of the policy definition.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets the type of the resource
        /// (Microsoft.Authorization/policyDefinitions).
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

    }
}
