// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ResourceManager.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Information about managed application.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ApplicationPatchable : GenericResource
    {
        /// <summary>
        /// Initializes a new instance of the ApplicationPatchable class.
        /// </summary>
        public ApplicationPatchable()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ApplicationPatchable class.
        /// </summary>
        /// <param name="id">Resource ID</param>
        /// <param name="name">Resource name</param>
        /// <param name="type">Resource type</param>
        /// <param name="location">Resource location</param>
        /// <param name="tags">Resource tags</param>
        /// <param name="managedBy">ID of the resource that manages this
        /// resource.</param>
        /// <param name="sku">The SKU of the resource.</param>
        /// <param name="managedResourceGroupId">The managed resource group
        /// Id.</param>
        /// <param name="applicationDefinitionId">The fully qualified path of
        /// managed application definition Id.</param>
        /// <param name="parameters">Name and value pairs that define the
        /// managed application parameters. It can be a JObject or a well
        /// formed JSON string.</param>
        /// <param name="outputs">Name and value pairs that define the managed
        /// application outputs.</param>
        /// <param name="provisioningState">The managed application
        /// provisioning state. Possible values include: 'NotSpecified',
        /// 'Accepted', 'Running', 'Ready', 'Creating', 'Created', 'Deleting',
        /// 'Deleted', 'Canceled', 'Failed', 'Succeeded', 'Updating'</param>
        /// <param name="billingDetails">The managed application billing
        /// details.</param>
        /// <param name="jitAccessPolicy">The managed application Jit access
        /// policy.</param>
        /// <param name="publisherTenantId">The publisher tenant Id.</param>
        /// <param name="authorizations">The  read-only authorizations property
        /// that is retrieved from the application package.</param>
        /// <param name="managementMode">The managed application management
        /// mode. Possible values include: 'NotSpecified', 'Unmanaged',
        /// 'Managed'</param>
        /// <param name="customerSupport">The read-only customer support
        /// property that is retrieved from the application package.</param>
        /// <param name="supportUrls">The read-only support URLs property that
        /// is retrieved from the application package.</param>
        /// <param name="artifacts">The collection of managed application
        /// artifacts.</param>
        /// <param name="createdBy">The client entity that created the JIT
        /// request.</param>
        /// <param name="updatedBy">The client entity that last updated the JIT
        /// request.</param>
        /// <param name="plan">The plan information.</param>
        /// <param name="kind">The kind of the managed application. Allowed
        /// values are MarketPlace and ServiceCatalog.</param>
        /// <param name="identity">The identity of the resource.</param>
        public ApplicationPatchable(string id = default(string), string name = default(string), string type = default(string), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string managedBy = default(string), Sku sku = default(Sku), string managedResourceGroupId = default(string), string applicationDefinitionId = default(string), object parameters = default(object), object outputs = default(object), string provisioningState = default(string), ApplicationBillingDetailsDefinition billingDetails = default(ApplicationBillingDetailsDefinition), ApplicationJitAccessPolicy jitAccessPolicy = default(ApplicationJitAccessPolicy), string publisherTenantId = default(string), IList<ApplicationAuthorization> authorizations = default(IList<ApplicationAuthorization>), string managementMode = default(string), ApplicationPackageContact customerSupport = default(ApplicationPackageContact), ApplicationPackageSupportUrls supportUrls = default(ApplicationPackageSupportUrls), IList<ApplicationArtifact> artifacts = default(IList<ApplicationArtifact>), ApplicationClientDetails createdBy = default(ApplicationClientDetails), ApplicationClientDetails updatedBy = default(ApplicationClientDetails), PlanPatchable plan = default(PlanPatchable), string kind = default(string), Identity identity = default(Identity))
            : base(id, name, type, location, tags, managedBy, sku)
        {
            ManagedResourceGroupId = managedResourceGroupId;
            ApplicationDefinitionId = applicationDefinitionId;
            Parameters = parameters;
            Outputs = outputs;
            ProvisioningState = provisioningState;
            BillingDetails = billingDetails;
            JitAccessPolicy = jitAccessPolicy;
            PublisherTenantId = publisherTenantId;
            Authorizations = authorizations;
            ManagementMode = managementMode;
            CustomerSupport = customerSupport;
            SupportUrls = supportUrls;
            Artifacts = artifacts;
            CreatedBy = createdBy;
            UpdatedBy = updatedBy;
            Plan = plan;
            Kind = kind;
            Identity = identity;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the managed resource group Id.
        /// </summary>
        [JsonProperty(PropertyName = "properties.managedResourceGroupId")]
        public string ManagedResourceGroupId { get; set; }

        /// <summary>
        /// Gets or sets the fully qualified path of managed application
        /// definition Id.
        /// </summary>
        [JsonProperty(PropertyName = "properties.applicationDefinitionId")]
        public string ApplicationDefinitionId { get; set; }

        /// <summary>
        /// Gets or sets name and value pairs that define the managed
        /// application parameters. It can be a JObject or a well formed JSON
        /// string.
        /// </summary>
        [JsonProperty(PropertyName = "properties.parameters")]
        public object Parameters { get; set; }

        /// <summary>
        /// Gets name and value pairs that define the managed application
        /// outputs.
        /// </summary>
        [JsonProperty(PropertyName = "properties.outputs")]
        public object Outputs { get; private set; }

        /// <summary>
        /// Gets the managed application provisioning state. Possible values
        /// include: 'NotSpecified', 'Accepted', 'Running', 'Ready',
        /// 'Creating', 'Created', 'Deleting', 'Deleted', 'Canceled', 'Failed',
        /// 'Succeeded', 'Updating'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets the managed application billing details.
        /// </summary>
        [JsonProperty(PropertyName = "properties.billingDetails")]
        public ApplicationBillingDetailsDefinition BillingDetails { get; private set; }

        /// <summary>
        /// Gets or sets the managed application Jit access policy.
        /// </summary>
        [JsonProperty(PropertyName = "properties.jitAccessPolicy")]
        public ApplicationJitAccessPolicy JitAccessPolicy { get; set; }

        /// <summary>
        /// Gets the publisher tenant Id.
        /// </summary>
        [JsonProperty(PropertyName = "properties.publisherTenantId")]
        public string PublisherTenantId { get; private set; }

        /// <summary>
        /// Gets the  read-only authorizations property that is retrieved from
        /// the application package.
        /// </summary>
        [JsonProperty(PropertyName = "properties.authorizations")]
        public IList<ApplicationAuthorization> Authorizations { get; private set; }

        /// <summary>
        /// Gets the managed application management mode. Possible values
        /// include: 'NotSpecified', 'Unmanaged', 'Managed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.managementMode")]
        public string ManagementMode { get; private set; }

        /// <summary>
        /// Gets the read-only customer support property that is retrieved from
        /// the application package.
        /// </summary>
        [JsonProperty(PropertyName = "properties.customerSupport")]
        public ApplicationPackageContact CustomerSupport { get; private set; }

        /// <summary>
        /// Gets the read-only support URLs property that is retrieved from the
        /// application package.
        /// </summary>
        [JsonProperty(PropertyName = "properties.supportUrls")]
        public ApplicationPackageSupportUrls SupportUrls { get; private set; }

        /// <summary>
        /// Gets the collection of managed application artifacts.
        /// </summary>
        [JsonProperty(PropertyName = "properties.artifacts")]
        public IList<ApplicationArtifact> Artifacts { get; private set; }

        /// <summary>
        /// Gets the client entity that created the JIT request.
        /// </summary>
        [JsonProperty(PropertyName = "properties.createdBy")]
        public ApplicationClientDetails CreatedBy { get; private set; }

        /// <summary>
        /// Gets the client entity that last updated the JIT request.
        /// </summary>
        [JsonProperty(PropertyName = "properties.updatedBy")]
        public ApplicationClientDetails UpdatedBy { get; private set; }

        /// <summary>
        /// Gets or sets the plan information.
        /// </summary>
        [JsonProperty(PropertyName = "plan")]
        public PlanPatchable Plan { get; set; }

        /// <summary>
        /// Gets or sets the kind of the managed application. Allowed values
        /// are MarketPlace and ServiceCatalog.
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Gets or sets the identity of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "identity")]
        public Identity Identity { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (JitAccessPolicy != null)
            {
                JitAccessPolicy.Validate();
            }
            if (Authorizations != null)
            {
                foreach (var element in Authorizations)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (CustomerSupport != null)
            {
                CustomerSupport.Validate();
            }
            if (Artifacts != null)
            {
                foreach (var element1 in Artifacts)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (Kind != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(Kind, "^[-\\w\\._,\\(\\)]+$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Kind", "^[-\\w\\._,\\(\\)]+$");
                }
            }
        }
    }
}
