// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.IoT.TimeSeriesInsights
{
    internal partial class AggregateSeries : IUtf8JsonSerializable, IModelJsonSerializable<AggregateSeries>
    {
        void IModelJsonSerializable<AggregateSeries>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            writer.WriteStartObject();
            writer.WritePropertyName("timeSeriesId"u8);
            writer.WriteStartArray();
            foreach (var item in TimeSeriesIdInternal)
            {
                if (item == null)
                {
                    writer.WriteNullValue();
                    continue;
                }
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("searchSpan"u8);
            if (SearchSpan is null)
            {
                writer.WriteNullValue();
            }
            else
            {
                ((IModelJsonSerializable<DateTimeRange>)SearchSpan).Serialize(writer, options);
            }
            if (Optional.IsDefined(Filter))
            {
                writer.WritePropertyName("filter"u8);
                if (Filter is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<TimeSeriesExpression>)Filter).Serialize(writer, options);
                }
            }
            writer.WritePropertyName("interval"u8);
            writer.WriteStringValue(Interval, "P");
            if (Optional.IsCollectionDefined(ProjectedVariables))
            {
                writer.WritePropertyName("projectedVariables"u8);
                writer.WriteStartArray();
                foreach (var item in ProjectedVariables)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(InlineVariables))
            {
                writer.WritePropertyName("inlineVariables"u8);
                writer.WriteStartObject();
                foreach (var item in InlineVariables)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value is null)
                    {
                        writer.WriteNullValue();
                    }
                    else
                    {
                        ((IModelJsonSerializable<TimeSeriesVariable>)item.Value).Serialize(writer, options);
                    }
                }
                writer.WriteEndObject();
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static AggregateSeries DeserializeAggregateSeries(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IList<object> timeSeriesId = default;
            DateTimeRange searchSpan = default;
            Optional<TimeSeriesExpression> filter = default;
            TimeSpan interval = default;
            Optional<IList<string>> projectedVariables = default;
            Optional<IDictionary<string, TimeSeriesVariable>> inlineVariables = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("timeSeriesId"u8))
                {
                    List<object> array = new List<object>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetObject());
                        }
                    }
                    timeSeriesId = array;
                    continue;
                }
                if (property.NameEquals("searchSpan"u8))
                {
                    searchSpan = DateTimeRange.DeserializeDateTimeRange(property.Value);
                    continue;
                }
                if (property.NameEquals("filter"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    filter = TimeSeriesExpression.DeserializeTimeSeriesExpression(property.Value);
                    continue;
                }
                if (property.NameEquals("interval"u8))
                {
                    interval = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("projectedVariables"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    projectedVariables = array;
                    continue;
                }
                if (property.NameEquals("inlineVariables"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, TimeSeriesVariable> dictionary = new Dictionary<string, TimeSeriesVariable>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, TimeSeriesVariable.DeserializeTimeSeriesVariable(property0.Value));
                    }
                    inlineVariables = dictionary;
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new AggregateSeries(timeSeriesId, searchSpan, filter.Value, interval, Optional.ToList(projectedVariables), Optional.ToDictionary(inlineVariables), rawData);
        }

        AggregateSeries IModelJsonSerializable<AggregateSeries>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeAggregateSeries(doc.RootElement, options);
        }

        BinaryData IModelSerializable<AggregateSeries>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        AggregateSeries IModelSerializable<AggregateSeries>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeAggregateSeries(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="AggregateSeries"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="AggregateSeries"/> to convert. </param>
        public static implicit operator RequestContent(AggregateSeries model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="AggregateSeries"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator AggregateSeries(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeAggregateSeries(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
