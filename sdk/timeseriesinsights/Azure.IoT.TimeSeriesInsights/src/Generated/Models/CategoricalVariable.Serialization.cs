// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.IoT.TimeSeriesInsights
{
    public partial class CategoricalVariable : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("value");
            writer.WriteObjectValue(Value);
            if (Optional.IsDefined(Interpolation))
            {
                writer.WritePropertyName("interpolation");
                writer.WriteObjectValue(Interpolation);
            }
            if (Optional.IsCollectionDefined(Categories))
            {
                writer.WritePropertyName("categories");
                writer.WriteStartArray();
                foreach (var item in Categories)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("defaultCategory");
            writer.WriteObjectValue(DefaultCategory);
            writer.WritePropertyName("kind");
            writer.WriteStringValue(Kind);
            if (Optional.IsDefined(Filter))
            {
                writer.WritePropertyName("filter");
                writer.WriteObjectValue(Filter);
            }
            writer.WriteEndObject();
        }

        internal static CategoricalVariable DeserializeCategoricalVariable(JsonElement element)
        {
            TimeSeriesExpression value = default;
            Optional<TimeSeriesInterpolation> interpolation = default;
            Optional<IList<TimeSeriesAggregateCategory>> categories = default;
            TimeSeriesDefaultCategory defaultCategory = default;
            string kind = default;
            Optional<TimeSeriesExpression> filter = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("value"))
                {
                    value = TimeSeriesExpression.DeserializeTimeSeriesExpression(property.Value);
                    continue;
                }
                if (property.NameEquals("interpolation"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    interpolation = TimeSeriesInterpolation.DeserializeTimeSeriesInterpolation(property.Value);
                    continue;
                }
                if (property.NameEquals("categories"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<TimeSeriesAggregateCategory> array = new List<TimeSeriesAggregateCategory>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TimeSeriesAggregateCategory.DeserializeTimeSeriesAggregateCategory(item));
                    }
                    categories = array;
                    continue;
                }
                if (property.NameEquals("defaultCategory"))
                {
                    defaultCategory = TimeSeriesDefaultCategory.DeserializeTimeSeriesDefaultCategory(property.Value);
                    continue;
                }
                if (property.NameEquals("kind"))
                {
                    kind = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("filter"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    filter = TimeSeriesExpression.DeserializeTimeSeriesExpression(property.Value);
                    continue;
                }
            }
            return new CategoricalVariable(kind, filter.Value, value, interpolation.Value, Optional.ToList(categories), defaultCategory);
        }
    }
}
