// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;

namespace Azure.IoT.TimeSeriesInsights
{
    internal partial class InstanceHitHighlights
    {
        internal static InstanceHitHighlights DeserializeInstanceHitHighlights(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IReadOnlyList<string> timeSeriesId = default;
            string typeName = default;
            string name = default;
            string description = default;
            IReadOnlyList<string> hierarchyIds = default;
            IReadOnlyList<string> hierarchyNames = default;
            IReadOnlyList<string> instanceFieldNames = default;
            IReadOnlyList<string> instanceFieldValues = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("timeSeriesId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    timeSeriesId = array;
                    continue;
                }
                if (property.NameEquals("typeName"u8))
                {
                    typeName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("hierarchyIds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    hierarchyIds = array;
                    continue;
                }
                if (property.NameEquals("hierarchyNames"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    hierarchyNames = array;
                    continue;
                }
                if (property.NameEquals("instanceFieldNames"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    instanceFieldNames = array;
                    continue;
                }
                if (property.NameEquals("instanceFieldValues"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    instanceFieldValues = array;
                    continue;
                }
            }
            return new InstanceHitHighlights(
                timeSeriesId ?? new ChangeTrackingList<string>(),
                typeName,
                name,
                description,
                hierarchyIds ?? new ChangeTrackingList<string>(),
                hierarchyNames ?? new ChangeTrackingList<string>(),
                instanceFieldNames ?? new ChangeTrackingList<string>(),
                instanceFieldValues ?? new ChangeTrackingList<string>());
        }
    }
}
