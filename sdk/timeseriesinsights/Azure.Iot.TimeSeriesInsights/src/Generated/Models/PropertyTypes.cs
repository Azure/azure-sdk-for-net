// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Iot.TimeSeriesInsights
{
    /// <summary> The type of the property that is either stored in events or computed by a calculation. </summary>
    public readonly partial struct PropertyTypes : IEquatable<PropertyTypes>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="PropertyTypes"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PropertyTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string BoolValue = "Bool";
        private const string DateTimeValue = "DateTime";
        private const string DoubleValue = "Double";
        private const string StringValue = "String";
        private const string TimeSpanValue = "TimeSpan";
        private const string LongValue = "Long";

        /// <summary> Bool. </summary>
        public static PropertyTypes Bool { get; } = new PropertyTypes(BoolValue);
        /// <summary> DateTime. </summary>
        public static PropertyTypes DateTime { get; } = new PropertyTypes(DateTimeValue);
        /// <summary> Double. </summary>
        public static PropertyTypes Double { get; } = new PropertyTypes(DoubleValue);
        /// <summary> String. </summary>
        public static PropertyTypes String { get; } = new PropertyTypes(StringValue);
        /// <summary> TimeSpan. </summary>
        public static PropertyTypes TimeSpan { get; } = new PropertyTypes(TimeSpanValue);
        /// <summary> Long. </summary>
        public static PropertyTypes Long { get; } = new PropertyTypes(LongValue);
        /// <summary> Determines if two <see cref="PropertyTypes"/> values are the same. </summary>
        public static bool operator ==(PropertyTypes left, PropertyTypes right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PropertyTypes"/> values are not the same. </summary>
        public static bool operator !=(PropertyTypes left, PropertyTypes right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="PropertyTypes"/>. </summary>
        public static implicit operator PropertyTypes(string value) => new PropertyTypes(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PropertyTypes other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PropertyTypes other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
