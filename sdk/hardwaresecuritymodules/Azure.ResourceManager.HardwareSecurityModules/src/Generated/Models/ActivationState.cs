// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Hardwaresecuritymodules.Models
{
    /// <summary> State of security domain activation. </summary>
    public readonly partial struct ActivationState : IEquatable<ActivationState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ActivationState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ActivationState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotDefinedValue = "NotDefined";
        private const string NotActivatedValue = "NotActivated";
        private const string ActiveValue = "Active";
        private const string FailedValue = "Failed";
        private const string UnknownValue = "Unknown";

        /// <summary> NotDefined. </summary>
        public static ActivationState NotDefined { get; } = new ActivationState(NotDefinedValue);
        /// <summary> NotActivated. </summary>
        public static ActivationState NotActivated { get; } = new ActivationState(NotActivatedValue);
        /// <summary> Active. </summary>
        public static ActivationState Active { get; } = new ActivationState(ActiveValue);
        /// <summary> Failed. </summary>
        public static ActivationState Failed { get; } = new ActivationState(FailedValue);
        /// <summary> Unknown. </summary>
        public static ActivationState Unknown { get; } = new ActivationState(UnknownValue);
        /// <summary> Determines if two <see cref="ActivationState"/> values are the same. </summary>
        public static bool operator ==(ActivationState left, ActivationState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ActivationState"/> values are not the same. </summary>
        public static bool operator !=(ActivationState left, ActivationState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ActivationState"/>. </summary>
        public static implicit operator ActivationState(string value) => new ActivationState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ActivationState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ActivationState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
