// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading;
using Autorest.CSharp.Core;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.IoTOperations;

namespace Azure.ResourceManager.IoTOperations.Mocking
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    public partial class MockableIoTOperationsSubscriptionResource : ArmResource
    {
        private ClientDiagnostics _instanceClientDiagnostics;
        private InstancesRestOperations _instanceRestClient;
        private ClientDiagnostics _solutionClientDiagnostics;
        private SolutionsRestOperations _solutionRestClient;
        private ClientDiagnostics _targetClientDiagnostics;
        private TargetsRestOperations _targetRestClient;

        /// <summary> Initializes a new instance of the <see cref="MockableIoTOperationsSubscriptionResource"/> class for mocking. </summary>
        protected MockableIoTOperationsSubscriptionResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MockableIoTOperationsSubscriptionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableIoTOperationsSubscriptionResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics InstanceClientDiagnostics => _instanceClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.IoTOperations", InstanceResource.ResourceType.Namespace, Diagnostics);
        private InstancesRestOperations InstanceRestClient => _instanceRestClient ??= new InstancesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(InstanceResource.ResourceType));
        private ClientDiagnostics SolutionClientDiagnostics => _solutionClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.IoTOperations", SolutionResource.ResourceType.Namespace, Diagnostics);
        private SolutionsRestOperations SolutionRestClient => _solutionRestClient ??= new SolutionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(SolutionResource.ResourceType));
        private ClientDiagnostics TargetClientDiagnostics => _targetClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.IoTOperations", TargetResource.ResourceType.Namespace, Diagnostics);
        private TargetsRestOperations TargetRestClient => _targetRestClient ??= new TargetsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(TargetResource.ResourceType));

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// List Instance resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.IoTOperationsOrchestrator/instances</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Instances_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-10-04-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="InstanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="InstanceResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<InstanceResource> GetInstancesAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => InstanceRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => InstanceRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new InstanceResource(Client, InstanceData.DeserializeInstanceData(e)), InstanceClientDiagnostics, Pipeline, "MockableIoTOperationsSubscriptionResource.GetInstances", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List Instance resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.IoTOperationsOrchestrator/instances</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Instances_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-10-04-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="InstanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="InstanceResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<InstanceResource> GetInstances(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => InstanceRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => InstanceRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new InstanceResource(Client, InstanceData.DeserializeInstanceData(e)), InstanceClientDiagnostics, Pipeline, "MockableIoTOperationsSubscriptionResource.GetInstances", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List Solution resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.IoTOperationsOrchestrator/solutions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Solutions_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-10-04-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SolutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SolutionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SolutionResource> GetSolutionsAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => SolutionRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => SolutionRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new SolutionResource(Client, SolutionData.DeserializeSolutionData(e)), SolutionClientDiagnostics, Pipeline, "MockableIoTOperationsSubscriptionResource.GetSolutions", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List Solution resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.IoTOperationsOrchestrator/solutions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Solutions_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-10-04-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SolutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SolutionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SolutionResource> GetSolutions(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => SolutionRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => SolutionRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new SolutionResource(Client, SolutionData.DeserializeSolutionData(e)), SolutionClientDiagnostics, Pipeline, "MockableIoTOperationsSubscriptionResource.GetSolutions", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List Target resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.IoTOperationsOrchestrator/targets</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Targets_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-10-04-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="TargetResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="TargetResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<TargetResource> GetTargetsAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => TargetRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => TargetRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new TargetResource(Client, TargetData.DeserializeTargetData(e)), TargetClientDiagnostics, Pipeline, "MockableIoTOperationsSubscriptionResource.GetTargets", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List Target resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.IoTOperationsOrchestrator/targets</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Targets_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-10-04-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="TargetResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="TargetResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<TargetResource> GetTargets(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => TargetRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => TargetRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new TargetResource(Client, TargetData.DeserializeTargetData(e)), TargetClientDiagnostics, Pipeline, "MockableIoTOperationsSubscriptionResource.GetTargets", "value", "nextLink", cancellationToken);
        }
    }
}
