// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.IoTOperations.Models
{
    /// <summary> Custom method for BrokerAuthentication. </summary>
    public partial class BrokerAuthenticatorMethodCustom
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="BrokerAuthenticatorMethodCustom"/>. </summary>
        /// <param name="endpoint"> Endpoint of the custom authentication server. Must be an HTTPS endpoint. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public BrokerAuthenticatorMethodCustom(Uri endpoint)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));

            Endpoint = endpoint;
            Headers = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="BrokerAuthenticatorMethodCustom"/>. </summary>
        /// <param name="auth"> Optional authentication needed for authenticating with the custom authentication server. </param>
        /// <param name="caCertConfigMap"> Optional CA certificate for validating the custom authentication server's certificate. </param>
        /// <param name="endpoint"> Endpoint of the custom authentication server. Must be an HTTPS endpoint. </param>
        /// <param name="headers"> Additional HTTP headers to pass to the custom authentication server. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal BrokerAuthenticatorMethodCustom(BrokerAuthenticatorCustomAuth auth, string caCertConfigMap, Uri endpoint, IDictionary<string, string> headers, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Auth = auth;
            CaCertConfigMap = caCertConfigMap;
            Endpoint = endpoint;
            Headers = headers;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="BrokerAuthenticatorMethodCustom"/> for deserialization. </summary>
        internal BrokerAuthenticatorMethodCustom()
        {
        }

        /// <summary> Optional authentication needed for authenticating with the custom authentication server. </summary>
        internal BrokerAuthenticatorCustomAuth Auth { get; set; }

        /// <summary> Optional CA certificate for validating the custom authentication server's certificate. </summary>
        public string CaCertConfigMap { get; set; }
        /// <summary> Endpoint of the custom authentication server. Must be an HTTPS endpoint. </summary>
        public Uri Endpoint { get; set; }
        /// <summary> Additional HTTP headers to pass to the custom authentication server. </summary>
        public IDictionary<string, string> Headers { get; }
    }
}
