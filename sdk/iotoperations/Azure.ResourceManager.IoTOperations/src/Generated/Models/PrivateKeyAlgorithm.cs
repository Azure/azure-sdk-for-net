// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.IoTOperations.Models
{
    /// <summary> Private key algorithm types. </summary>
    public readonly partial struct PrivateKeyAlgorithm : IEquatable<PrivateKeyAlgorithm>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PrivateKeyAlgorithm"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PrivateKeyAlgorithm(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string Ec256Value = "Ec256";
        private const string Ec384Value = "Ec384";
        private const string Ec521Value = "Ec521";
        private const string Ed25519Value = "Ed25519";
        private const string Rsa2048Value = "Rsa2048";
        private const string Rsa4096Value = "Rsa4096";
        private const string Rsa8192Value = "Rsa8192";

        /// <summary> Algorithm - ec256. </summary>
        public static PrivateKeyAlgorithm Ec256 { get; } = new PrivateKeyAlgorithm(Ec256Value);
        /// <summary> Algorithm - ec384. </summary>
        public static PrivateKeyAlgorithm Ec384 { get; } = new PrivateKeyAlgorithm(Ec384Value);
        /// <summary> Algorithm - ec521. </summary>
        public static PrivateKeyAlgorithm Ec521 { get; } = new PrivateKeyAlgorithm(Ec521Value);
        /// <summary> Algorithm - ed25519. </summary>
        public static PrivateKeyAlgorithm Ed25519 { get; } = new PrivateKeyAlgorithm(Ed25519Value);
        /// <summary> Algorithm - rsa2048. </summary>
        public static PrivateKeyAlgorithm Rsa2048 { get; } = new PrivateKeyAlgorithm(Rsa2048Value);
        /// <summary> Algorithm - rsa4096. </summary>
        public static PrivateKeyAlgorithm Rsa4096 { get; } = new PrivateKeyAlgorithm(Rsa4096Value);
        /// <summary> Algorithm - rsa8192. </summary>
        public static PrivateKeyAlgorithm Rsa8192 { get; } = new PrivateKeyAlgorithm(Rsa8192Value);
        /// <summary> Determines if two <see cref="PrivateKeyAlgorithm"/> values are the same. </summary>
        public static bool operator ==(PrivateKeyAlgorithm left, PrivateKeyAlgorithm right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PrivateKeyAlgorithm"/> values are not the same. </summary>
        public static bool operator !=(PrivateKeyAlgorithm left, PrivateKeyAlgorithm right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="PrivateKeyAlgorithm"/>. </summary>
        public static implicit operator PrivateKeyAlgorithm(string value) => new PrivateKeyAlgorithm(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PrivateKeyAlgorithm other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PrivateKeyAlgorithm other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
