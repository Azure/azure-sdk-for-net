// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.IoTOperations.Models
{
    /// <summary> AuthorizationConfig Rule Properties. </summary>
    public partial class AuthorizationRule
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AuthorizationRule"/>. </summary>
        /// <param name="brokerResources"> Give access to Broker methods and topics. </param>
        /// <param name="principals"> Give access to clients based on the following properties. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="brokerResources"/> or <paramref name="principals"/> is null. </exception>
        public AuthorizationRule(IEnumerable<BrokerResourceRule> brokerResources, PrincipalDefinition principals)
        {
            Argument.AssertNotNull(brokerResources, nameof(brokerResources));
            Argument.AssertNotNull(principals, nameof(principals));

            BrokerResources = brokerResources.ToList();
            Principals = principals;
            StateStoreResources = new ChangeTrackingList<StateStoreResourceRule>();
        }

        /// <summary> Initializes a new instance of <see cref="AuthorizationRule"/>. </summary>
        /// <param name="brokerResources"> Give access to Broker methods and topics. </param>
        /// <param name="principals"> Give access to clients based on the following properties. </param>
        /// <param name="stateStoreResources"> Give access to state store resources. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AuthorizationRule(IList<BrokerResourceRule> brokerResources, PrincipalDefinition principals, IList<StateStoreResourceRule> stateStoreResources, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            BrokerResources = brokerResources;
            Principals = principals;
            StateStoreResources = stateStoreResources;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="AuthorizationRule"/> for deserialization. </summary>
        internal AuthorizationRule()
        {
        }

        /// <summary> Give access to Broker methods and topics. </summary>
        public IList<BrokerResourceRule> BrokerResources { get; }
        /// <summary> Give access to clients based on the following properties. </summary>
        public PrincipalDefinition Principals { get; set; }
        /// <summary> Give access to state store resources. </summary>
        public IList<StateStoreResourceRule> StateStoreResources { get; }
    }
}
