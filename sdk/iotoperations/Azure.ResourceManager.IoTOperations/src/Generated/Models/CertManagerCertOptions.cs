// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.IoTOperations.Models
{
    /// <summary> Cert Manager Cert properties. </summary>
    public partial class CertManagerCertOptions
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="CertManagerCertOptions"/>. </summary>
        /// <param name="duration"> Lifetime of certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours and 45m for 45 minutes. </param>
        /// <param name="renewBefore"> When to begin renewing certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours and 45m for 45 minutes. </param>
        /// <param name="privateKey"> Configuration of certificate private key. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="duration"/>, <paramref name="renewBefore"/> or <paramref name="privateKey"/> is null. </exception>
        public CertManagerCertOptions(string duration, string renewBefore, CertManagerPrivateKey privateKey)
        {
            Argument.AssertNotNull(duration, nameof(duration));
            Argument.AssertNotNull(renewBefore, nameof(renewBefore));
            Argument.AssertNotNull(privateKey, nameof(privateKey));

            Duration = duration;
            RenewBefore = renewBefore;
            PrivateKey = privateKey;
        }

        /// <summary> Initializes a new instance of <see cref="CertManagerCertOptions"/>. </summary>
        /// <param name="duration"> Lifetime of certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours and 45m for 45 minutes. </param>
        /// <param name="renewBefore"> When to begin renewing certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours and 45m for 45 minutes. </param>
        /// <param name="privateKey"> Configuration of certificate private key. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CertManagerCertOptions(string duration, string renewBefore, CertManagerPrivateKey privateKey, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Duration = duration;
            RenewBefore = renewBefore;
            PrivateKey = privateKey;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="CertManagerCertOptions"/> for deserialization. </summary>
        internal CertManagerCertOptions()
        {
        }

        /// <summary> Lifetime of certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours and 45m for 45 minutes. </summary>
        public string Duration { get; set; }
        /// <summary> When to begin renewing certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours and 45m for 45 minutes. </summary>
        public string RenewBefore { get; set; }
        /// <summary> Configuration of certificate private key. </summary>
        public CertManagerPrivateKey PrivateKey { get; set; }
    }
}
