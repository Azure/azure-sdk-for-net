// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.IoTOperations.Models
{
    /// <summary> Kubernetes Service Types supported by Listener. </summary>
    public readonly partial struct ServiceType : IEquatable<ServiceType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ServiceType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ServiceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ClusterIPValue = "ClusterIp";
        private const string LoadBalancerValue = "LoadBalancer";
        private const string NodePortValue = "NodePort";

        /// <summary> Cluster IP Service. </summary>
        public static ServiceType ClusterIP { get; } = new ServiceType(ClusterIPValue);
        /// <summary> Load Balancer Service. </summary>
        public static ServiceType LoadBalancer { get; } = new ServiceType(LoadBalancerValue);
        /// <summary> Node Port Service. </summary>
        public static ServiceType NodePort { get; } = new ServiceType(NodePortValue);
        /// <summary> Determines if two <see cref="ServiceType"/> values are the same. </summary>
        public static bool operator ==(ServiceType left, ServiceType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ServiceType"/> values are not the same. </summary>
        public static bool operator !=(ServiceType left, ServiceType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ServiceType"/>. </summary>
        public static implicit operator ServiceType(string value) => new ServiceType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ServiceType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ServiceType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
