// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.IoTOperations;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.IoTOperations.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmIoTOperationsModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="IoTOperations.InstanceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="extendedLocation"> Edge location of the resource. </param>
        /// <param name="scope"> Deployment scope (such as Kubernetes namespace). </param>
        /// <param name="solution"> Name of the solution. </param>
        /// <param name="targetName"> Defines the Target the Instance will deploy to. </param>
        /// <param name="reconciliationPolicy"> Reconciliation Policy. </param>
        /// <param name="version"> Version of the particular resource. </param>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <returns> A new <see cref="IoTOperations.InstanceData"/> instance for mocking. </returns>
        public static InstanceData InstanceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ExtendedLocation extendedLocation = null, string scope = null, string solution = null, string targetName = null, ReconciliationPolicyModel reconciliationPolicy = null, string version = null, ProvisioningState? provisioningState = null)
        {
            tags ??= new Dictionary<string, string>();

            return new InstanceData(id, name, resourceType, systemData, tags, location, extendedLocation, scope, solution, targetName != null ? new TargetSelectorProperties(targetName, serializedAdditionalRawData: null) : null, reconciliationPolicy, version, provisioningState, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="IoTOperations.SolutionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="extendedLocation"> Edge location of the resource. </param>
        /// <param name="components"> A list of components. </param>
        /// <param name="version"> Version of the particular resource. </param>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <returns> A new <see cref="IoTOperations.SolutionData"/> instance for mocking. </returns>
        public static SolutionData SolutionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ExtendedLocation extendedLocation = null, IEnumerable<ComponentProperties> components = null, string version = null, ResourceProvisioningState? provisioningState = null)
        {
            tags ??= new Dictionary<string, string>();
            components ??= new List<ComponentProperties>();

            return new SolutionData(id, name, resourceType, systemData, tags, location, extendedLocation, components?.ToList(), version, provisioningState, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="IoTOperations.TargetData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="extendedLocation"> Edge location of the resource. </param>
        /// <param name="components"> A list of components. </param>
        /// <param name="scope"> Deployment scope (such as Kubernetes namespace). </param>
        /// <param name="topologies"> Defines the device topology for a target or instance. </param>
        /// <param name="reconciliationPolicy"> Reconciliation Policy. </param>
        /// <param name="version"> Version of the particular resource. </param>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <returns> A new <see cref="IoTOperations.TargetData"/> instance for mocking. </returns>
        public static TargetData TargetData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ExtendedLocation extendedLocation = null, IEnumerable<ComponentProperties> components = null, string scope = null, IEnumerable<TopologiesProperties> topologies = null, ReconciliationPolicyModel reconciliationPolicy = null, string version = null, ProvisioningState? provisioningState = null)
        {
            tags ??= new Dictionary<string, string>();
            components ??= new List<ComponentProperties>();
            topologies ??= new List<TopologiesProperties>();

            return new TargetData(id, name, resourceType, systemData, tags, location, extendedLocation, components?.ToList(), scope, topologies?.ToList(), reconciliationPolicy, version, provisioningState, serializedAdditionalRawData: null);
        }
    }
}
