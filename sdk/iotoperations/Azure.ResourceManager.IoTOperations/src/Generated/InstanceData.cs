// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.IoTOperations.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.IoTOperations
{
    /// <summary>
    /// A class representing the Instance data model.
    /// A Instance resource belonging to an Instance resource.
    /// </summary>
    public partial class InstanceData : TrackedResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="InstanceData"/>. </summary>
        /// <param name="location"> The location. </param>
        /// <param name="extendedLocation"> Edge location of the resource. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="extendedLocation"/> is null. </exception>
        public InstanceData(AzureLocation location, ExtendedLocation extendedLocation) : base(location)
        {
            Argument.AssertNotNull(extendedLocation, nameof(extendedLocation));

            ExtendedLocation = extendedLocation;
        }

        /// <summary> Initializes a new instance of <see cref="InstanceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="extendedLocation"> Edge location of the resource. </param>
        /// <param name="scope"> Deployment scope (such as Kubernetes namespace). </param>
        /// <param name="solution"> Name of the solution. </param>
        /// <param name="target"> Defines the Target the Instance will deploy to. </param>
        /// <param name="reconciliationPolicy"> Reconciliation Policy. </param>
        /// <param name="version"> Version of the particular resource. </param>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal InstanceData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, string> tags, AzureLocation location, ExtendedLocation extendedLocation, string scope, string solution, TargetSelectorProperties target, ReconciliationPolicyModel reconciliationPolicy, string version, ProvisioningState? provisioningState, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData, tags, location)
        {
            ExtendedLocation = extendedLocation;
            Scope = scope;
            Solution = solution;
            Target = target;
            ReconciliationPolicy = reconciliationPolicy;
            Version = version;
            ProvisioningState = provisioningState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="InstanceData"/> for deserialization. </summary>
        internal InstanceData()
        {
        }

        /// <summary> Edge location of the resource. </summary>
        public ExtendedLocation ExtendedLocation { get; set; }
        /// <summary> Deployment scope (such as Kubernetes namespace). </summary>
        public string Scope { get; set; }
        /// <summary> Name of the solution. </summary>
        public string Solution { get; set; }
        /// <summary> Defines the Target the Instance will deploy to. </summary>
        internal TargetSelectorProperties Target { get; set; }
        /// <summary> Name of the target. </summary>
        public string TargetName
        {
            get => Target is null ? default : Target.Name;
            set
            {
                if (Target is null)
                    Target = new TargetSelectorProperties();
                Target.Name = value;
            }
        }

        /// <summary> Reconciliation Policy. </summary>
        public ReconciliationPolicyModel ReconciliationPolicy { get; set; }
        /// <summary> Version of the particular resource. </summary>
        public string Version { get; set; }
        /// <summary> The status of the last operation. </summary>
        public ProvisioningState? ProvisioningState { get; }
    }
}
