// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.IoTOperations;
using Azure.ResourceManager.IoTOperations.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.IoTOperations.Samples
{
    public partial class Sample_TargetResource
    {
        // Targets_ListBySubscription - generated by [MaximumSet] rule - generated by [MaximumSet] rule
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetTargets_TargetsListBySubscriptionGeneratedByMaximumSetRuleGeneratedByMaximumSetRule()
        {
            // Generated from example definition: specification/iotoperationsorchestrator/resource-manager/Microsoft.IoTOperationsOrchestrator/preview/2023-10-04-preview/examples/Targets_ListBySubscription_MaximumSet_Gen.json
            // this example is just showing the usage of "Targets_ListBySubscription" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "02926E3F-C0AE-4019-84B3-FDFC0BD0C9CD";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation and iterate over the result
            await foreach (TargetResource item in subscriptionResource.GetTargetsAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                TargetData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Targets_Get - generated by [MaximumSet] rule - generated by [MaximumSet] rule
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_TargetsGetGeneratedByMaximumSetRuleGeneratedByMaximumSetRule()
        {
            // Generated from example definition: specification/iotoperationsorchestrator/resource-manager/Microsoft.IoTOperationsOrchestrator/preview/2023-10-04-preview/examples/Targets_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Targets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TargetResource created on azure
            // for more information of creating TargetResource, please refer to the document of TargetResource
            string subscriptionId = "02926E3F-C0AE-4019-84B3-FDFC0BD0C9CD";
            string resourceGroupName = "rgopenapi";
            string name = "8365lndv";
            ResourceIdentifier targetResourceId = TargetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            TargetResource target = client.GetTargetResource(targetResourceId);

            // invoke the operation
            TargetResource result = await target.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            TargetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Targets_Update - generated by [MaximumSet] rule - generated by [MaximumSet] rule
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_TargetsUpdateGeneratedByMaximumSetRuleGeneratedByMaximumSetRule()
        {
            // Generated from example definition: specification/iotoperationsorchestrator/resource-manager/Microsoft.IoTOperationsOrchestrator/preview/2023-10-04-preview/examples/Targets_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "Targets_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TargetResource created on azure
            // for more information of creating TargetResource, please refer to the document of TargetResource
            string subscriptionId = "02926E3F-C0AE-4019-84B3-FDFC0BD0C9CD";
            string resourceGroupName = "rgopenapi";
            string name = "e6v----8g8yrg--05441u8--56549-2ah6r35r";
            ResourceIdentifier targetResourceId = TargetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            TargetResource target = client.GetTargetResource(targetResourceId);

            // invoke the operation
            TargetPatch patch = new TargetPatch()
            {
                Tags =
{
},
            };
            TargetResource result = await target.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            TargetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Targets_Delete - generated by [MaximumSet] rule - generated by [MaximumSet] rule
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_TargetsDeleteGeneratedByMaximumSetRuleGeneratedByMaximumSetRule()
        {
            // Generated from example definition: specification/iotoperationsorchestrator/resource-manager/Microsoft.IoTOperationsOrchestrator/preview/2023-10-04-preview/examples/Targets_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "Targets_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TargetResource created on azure
            // for more information of creating TargetResource, please refer to the document of TargetResource
            string subscriptionId = "02926E3F-C0AE-4019-84B3-FDFC0BD0C9CD";
            string resourceGroupName = "rgopenapi";
            string name = "l22wq0w442s1w";
            ResourceIdentifier targetResourceId = TargetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            TargetResource target = client.GetTargetResource(targetResourceId);

            // invoke the operation
            await target.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }
    }
}
