// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.IoTOperations;
using Azure.ResourceManager.IoTOperations.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.IoTOperations.Samples
{
    public partial class Sample_SolutionCollection
    {
        // Solutions_ListByResourceGroup - generated by [MaximumSet] rule - generated by [MaximumSet] rule
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_SolutionsListByResourceGroupGeneratedByMaximumSetRuleGeneratedByMaximumSetRule()
        {
            // Generated from example definition: specification/iotoperationsorchestrator/resource-manager/Microsoft.IoTOperationsOrchestrator/preview/2023-10-04-preview/examples/Solutions_ListByResourceGroup_MaximumSet_Gen.json
            // this example is just showing the usage of "Solutions_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "02926E3F-C0AE-4019-84B3-FDFC0BD0C9CD";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SolutionResource
            SolutionCollection collection = resourceGroupResource.GetSolutions();

            // invoke the operation and iterate over the result
            await foreach (SolutionResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                SolutionData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Solutions_Get - generated by [MaximumSet] rule - generated by [MaximumSet] rule
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_SolutionsGetGeneratedByMaximumSetRuleGeneratedByMaximumSetRule()
        {
            // Generated from example definition: specification/iotoperationsorchestrator/resource-manager/Microsoft.IoTOperationsOrchestrator/preview/2023-10-04-preview/examples/Solutions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Solutions_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "02926E3F-C0AE-4019-84B3-FDFC0BD0C9CD";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SolutionResource
            SolutionCollection collection = resourceGroupResource.GetSolutions();

            // invoke the operation
            string name = "62---5r01-r156l-7hg2ms8b1-ljm-99w-u--1--69-jn1";
            SolutionResource result = await collection.GetAsync(name);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SolutionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Solutions_Get - generated by [MaximumSet] rule - generated by [MaximumSet] rule
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_SolutionsGetGeneratedByMaximumSetRuleGeneratedByMaximumSetRule()
        {
            // Generated from example definition: specification/iotoperationsorchestrator/resource-manager/Microsoft.IoTOperationsOrchestrator/preview/2023-10-04-preview/examples/Solutions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Solutions_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "02926E3F-C0AE-4019-84B3-FDFC0BD0C9CD";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SolutionResource
            SolutionCollection collection = resourceGroupResource.GetSolutions();

            // invoke the operation
            string name = "62---5r01-r156l-7hg2ms8b1-ljm-99w-u--1--69-jn1";
            bool result = await collection.ExistsAsync(name);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Solutions_Get - generated by [MaximumSet] rule - generated by [MaximumSet] rule
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetIfExists_SolutionsGetGeneratedByMaximumSetRuleGeneratedByMaximumSetRule()
        {
            // Generated from example definition: specification/iotoperationsorchestrator/resource-manager/Microsoft.IoTOperationsOrchestrator/preview/2023-10-04-preview/examples/Solutions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Solutions_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "02926E3F-C0AE-4019-84B3-FDFC0BD0C9CD";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SolutionResource
            SolutionCollection collection = resourceGroupResource.GetSolutions();

            // invoke the operation
            string name = "62---5r01-r156l-7hg2ms8b1-ljm-99w-u--1--69-jn1";
            NullableResponse<SolutionResource> response = await collection.GetIfExistsAsync(name);
            SolutionResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine($"Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                SolutionData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        // Solutions_CreateOrUpdate - generated by [MaximumSet] rule - generated by [MaximumSet] rule
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_SolutionsCreateOrUpdateGeneratedByMaximumSetRuleGeneratedByMaximumSetRule()
        {
            // Generated from example definition: specification/iotoperationsorchestrator/resource-manager/Microsoft.IoTOperationsOrchestrator/preview/2023-10-04-preview/examples/Solutions_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "Solutions_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "02926E3F-C0AE-4019-84B3-FDFC0BD0C9CD";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SolutionResource
            SolutionCollection collection = resourceGroupResource.GetSolutions();

            // invoke the operation
            string name = "49-gj2-mwgt--1m611----35u";
            SolutionData data = new SolutionData(new AzureLocation("svzwmojzvarczmvgfhjk"), new ExtendedLocation("bjjhfqsplgzdlbdlddleetyg", "sosibrbmmrfbbyp"))
            {
                Components =
{
new ComponentProperties("yhnelpxsobdyurwvhkq","wiabwsfqhhxru")
{
Dependencies =
{
"x"
},
Properties =
{
},
}
},
                Version = "jwxk",
                Tags =
{
},
            };
            ArmOperation<SolutionResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, name, data);
            SolutionResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SolutionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
