// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.IoTOperations;
using Azure.ResourceManager.IoTOperations.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.IoTOperations.Samples
{
    public partial class Sample_InstanceResource
    {
        // Instances_ListBySubscription - generated by [MaximumSet] rule - generated by [MaximumSet] rule
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetInstances_InstancesListBySubscriptionGeneratedByMaximumSetRuleGeneratedByMaximumSetRule()
        {
            // Generated from example definition: specification/iotoperationsorchestrator/resource-manager/Microsoft.IoTOperationsOrchestrator/preview/2023-10-04-preview/examples/Instances_ListBySubscription_MaximumSet_Gen.json
            // this example is just showing the usage of "Instances_ListBySubscription" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "02926E3F-C0AE-4019-84B3-FDFC0BD0C9CD";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation and iterate over the result
            await foreach (InstanceResource item in subscriptionResource.GetInstancesAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                InstanceData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Instances_Get - generated by [MaximumSet] rule - generated by [MaximumSet] rule
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_InstancesGetGeneratedByMaximumSetRuleGeneratedByMaximumSetRule()
        {
            // Generated from example definition: specification/iotoperationsorchestrator/resource-manager/Microsoft.IoTOperationsOrchestrator/preview/2023-10-04-preview/examples/Instances_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Instances_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this InstanceResource created on azure
            // for more information of creating InstanceResource, please refer to the document of InstanceResource
            string subscriptionId = "02926E3F-C0AE-4019-84B3-FDFC0BD0C9CD";
            string resourceGroupName = "rgopenapi";
            string name = "06-17cg----3s----1-y--7-g5";
            ResourceIdentifier instanceResourceId = InstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            InstanceResource instance = client.GetInstanceResource(instanceResourceId);

            // invoke the operation
            InstanceResource result = await instance.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            InstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Instances_Update - generated by [MaximumSet] rule - generated by [MaximumSet] rule
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_InstancesUpdateGeneratedByMaximumSetRuleGeneratedByMaximumSetRule()
        {
            // Generated from example definition: specification/iotoperationsorchestrator/resource-manager/Microsoft.IoTOperationsOrchestrator/preview/2023-10-04-preview/examples/Instances_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "Instances_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this InstanceResource created on azure
            // for more information of creating InstanceResource, please refer to the document of InstanceResource
            string subscriptionId = "02926E3F-C0AE-4019-84B3-FDFC0BD0C9CD";
            string resourceGroupName = "rgopenapi";
            string name = "23-oh6419-73-6h4--82-85-p-j6z25h231q--0ghs1-tb--6-10-3j-y";
            ResourceIdentifier instanceResourceId = InstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            InstanceResource instance = client.GetInstanceResource(instanceResourceId);

            // invoke the operation
            InstancePatch patch = new InstancePatch()
            {
                Tags =
{
},
            };
            InstanceResource result = await instance.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            InstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Instances_Delete - generated by [MaximumSet] rule - generated by [MaximumSet] rule
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_InstancesDeleteGeneratedByMaximumSetRuleGeneratedByMaximumSetRule()
        {
            // Generated from example definition: specification/iotoperationsorchestrator/resource-manager/Microsoft.IoTOperationsOrchestrator/preview/2023-10-04-preview/examples/Instances_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "Instances_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this InstanceResource created on azure
            // for more information of creating InstanceResource, please refer to the document of InstanceResource
            string subscriptionId = "02926E3F-C0AE-4019-84B3-FDFC0BD0C9CD";
            string resourceGroupName = "rgopenapi";
            string name = "9-7c5";
            ResourceIdentifier instanceResourceId = InstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            InstanceResource instance = client.GetInstanceResource(instanceResourceId);

            // invoke the operation
            await instance.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }
    }
}
