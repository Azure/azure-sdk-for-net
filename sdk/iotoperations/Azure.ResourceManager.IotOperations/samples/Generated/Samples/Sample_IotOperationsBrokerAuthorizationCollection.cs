// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.IotOperations.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.IotOperations.Samples
{
    public partial class Sample_IotOperationsBrokerAuthorizationCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_BrokerAuthorizationCreateOrUpdateComplex()
        {
            // Generated from example definition: 2024-11-01/BrokerAuthorization_CreateOrUpdate_Complex.json
            // this example is just showing the usage of "BrokerAuthorizationResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsBrokerResource created on azure
            // for more information of creating IotOperationsBrokerResource, please refer to the document of IotOperationsBrokerResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            string brokerName = "resource-name123";
            ResourceIdentifier iotOperationsBrokerResourceId = IotOperationsBrokerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName, brokerName);
            IotOperationsBrokerResource iotOperationsBroker = client.GetIotOperationsBrokerResource(iotOperationsBrokerResourceId);

            // get the collection of this IotOperationsBrokerAuthorizationResource
            IotOperationsBrokerAuthorizationCollection collection = iotOperationsBroker.GetIotOperationsBrokerAuthorizations();

            // invoke the operation
            string authorizationName = "resource-name123";
            IotOperationsBrokerAuthorizationData data = new IotOperationsBrokerAuthorizationData(new IotOperationsExtendedLocation("qmbrfwcpwwhggszhrdjv", IotOperationsExtendedLocationType.CustomLocation))
            {
                Properties = new IotOperationsBrokerAuthorizationProperties(new BrokerAuthorizationConfig
                {
                    Cache = IotOperationsOperationalMode.Enabled,
                    Rules = {new BrokerAuthorizationRule(new BrokerResourceRule[]
{
new BrokerResourceRule(BrokerResourceDefinitionMethod.Connect)
{
ClientIds = {"{principal.attributes.building}*"},
},
new BrokerResourceRule(BrokerResourceDefinitionMethod.Publish)
{
Topics = {"sensors/{principal.attributes.building}/{principal.clientId}/telemetry/*"},
},
new BrokerResourceRule(BrokerResourceDefinitionMethod.Subscribe)
{
Topics = {"commands/{principal.attributes.organization}"},
}
}, new PrincipalConfig
{
Attributes = {new Dictionary<string, string>
{
["building"] = "17",
["organization"] = "contoso"
}},
Usernames = {"temperature-sensor", "humidity-sensor"},
})
{
StateStoreResources = {new StateStoreResourceRule(StateStoreResourceKeyType.Pattern, new string[]{"myreadkey", "myotherkey?", "mynumerickeysuffix[0-9]", "clients:{principal.clientId}:*"}, StateStoreResourceDefinitionMethod.Read), new StateStoreResourceRule(StateStoreResourceKeyType.Binary, new string[]{"MTE2IDEwMSAxMTUgMTE2"}, StateStoreResourceDefinitionMethod.ReadWrite)},
}},
                }),
            };
            ArmOperation<IotOperationsBrokerAuthorizationResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, authorizationName, data);
            IotOperationsBrokerAuthorizationResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            IotOperationsBrokerAuthorizationData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_BrokerAuthorizationCreateOrUpdate()
        {
            // Generated from example definition: 2024-11-01/BrokerAuthorization_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "BrokerAuthorizationResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsBrokerResource created on azure
            // for more information of creating IotOperationsBrokerResource, please refer to the document of IotOperationsBrokerResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            string brokerName = "resource-name123";
            ResourceIdentifier iotOperationsBrokerResourceId = IotOperationsBrokerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName, brokerName);
            IotOperationsBrokerResource iotOperationsBroker = client.GetIotOperationsBrokerResource(iotOperationsBrokerResourceId);

            // get the collection of this IotOperationsBrokerAuthorizationResource
            IotOperationsBrokerAuthorizationCollection collection = iotOperationsBroker.GetIotOperationsBrokerAuthorizations();

            // invoke the operation
            string authorizationName = "resource-name123";
            IotOperationsBrokerAuthorizationData data = new IotOperationsBrokerAuthorizationData(new IotOperationsExtendedLocation("qmbrfwcpwwhggszhrdjv", IotOperationsExtendedLocationType.CustomLocation))
            {
                Properties = new IotOperationsBrokerAuthorizationProperties(new BrokerAuthorizationConfig
                {
                    Cache = IotOperationsOperationalMode.Enabled,
                    Rules = {new BrokerAuthorizationRule(new BrokerResourceRule[]
{
new BrokerResourceRule(BrokerResourceDefinitionMethod.Connect)
{
ClientIds = {"nlc"},
Topics = {"wvuca"},
}
}, new PrincipalConfig
{
Attributes = {new Dictionary<string, string>
{
["key5526"] = "nydhzdhbldygqcn"
}},
ClientIds = {"smopeaeddsygz"},
Usernames = {"iozngyqndrteikszkbasinzdjtm"},
})
{
StateStoreResources = {new StateStoreResourceRule(StateStoreResourceKeyType.Pattern, new string[]{"tkounsqtwvzyaklxjqoerpu"}, StateStoreResourceDefinitionMethod.Read)},
}},
                }),
            };
            ArmOperation<IotOperationsBrokerAuthorizationResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, authorizationName, data);
            IotOperationsBrokerAuthorizationResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            IotOperationsBrokerAuthorizationData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_BrokerAuthorizationCreateOrUpdateSimple()
        {
            // Generated from example definition: 2024-11-01/BrokerAuthorization_CreateOrUpdate_Simple.json
            // this example is just showing the usage of "BrokerAuthorizationResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsBrokerResource created on azure
            // for more information of creating IotOperationsBrokerResource, please refer to the document of IotOperationsBrokerResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            string brokerName = "resource-name123";
            ResourceIdentifier iotOperationsBrokerResourceId = IotOperationsBrokerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName, brokerName);
            IotOperationsBrokerResource iotOperationsBroker = client.GetIotOperationsBrokerResource(iotOperationsBrokerResourceId);

            // get the collection of this IotOperationsBrokerAuthorizationResource
            IotOperationsBrokerAuthorizationCollection collection = iotOperationsBroker.GetIotOperationsBrokerAuthorizations();

            // invoke the operation
            string authorizationName = "resource-name123";
            IotOperationsBrokerAuthorizationData data = new IotOperationsBrokerAuthorizationData(new IotOperationsExtendedLocation("qmbrfwcpwwhggszhrdjv", IotOperationsExtendedLocationType.CustomLocation))
            {
                Properties = new IotOperationsBrokerAuthorizationProperties(new BrokerAuthorizationConfig
                {
                    Cache = IotOperationsOperationalMode.Enabled,
                    Rules = {new BrokerAuthorizationRule(new BrokerResourceRule[]
{
new BrokerResourceRule(BrokerResourceDefinitionMethod.Connect),
new BrokerResourceRule(BrokerResourceDefinitionMethod.Subscribe)
{
Topics = {"topic", "topic/with/wildcard/#"},
}
}, new PrincipalConfig
{
Attributes = {new Dictionary<string, string>
{
["floor"] = "floor1",
["site"] = "site1"
}},
ClientIds = {"my-client-id"},
})
{
StateStoreResources = {new StateStoreResourceRule(StateStoreResourceKeyType.Pattern, new string[]{"*"}, StateStoreResourceDefinitionMethod.ReadWrite)},
}},
                }),
            };
            ArmOperation<IotOperationsBrokerAuthorizationResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, authorizationName, data);
            IotOperationsBrokerAuthorizationResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            IotOperationsBrokerAuthorizationData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_BrokerAuthorizationGet()
        {
            // Generated from example definition: 2024-11-01/BrokerAuthorization_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "BrokerAuthorizationResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsBrokerResource created on azure
            // for more information of creating IotOperationsBrokerResource, please refer to the document of IotOperationsBrokerResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            string brokerName = "resource-name123";
            ResourceIdentifier iotOperationsBrokerResourceId = IotOperationsBrokerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName, brokerName);
            IotOperationsBrokerResource iotOperationsBroker = client.GetIotOperationsBrokerResource(iotOperationsBrokerResourceId);

            // get the collection of this IotOperationsBrokerAuthorizationResource
            IotOperationsBrokerAuthorizationCollection collection = iotOperationsBroker.GetIotOperationsBrokerAuthorizations();

            // invoke the operation
            string authorizationName = "resource-name123";
            IotOperationsBrokerAuthorizationResource result = await collection.GetAsync(authorizationName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            IotOperationsBrokerAuthorizationData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_BrokerAuthorizationListByResourceGroup()
        {
            // Generated from example definition: 2024-11-01/BrokerAuthorization_ListByResourceGroup_MaximumSet_Gen.json
            // this example is just showing the usage of "BrokerAuthorizationResource_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsBrokerResource created on azure
            // for more information of creating IotOperationsBrokerResource, please refer to the document of IotOperationsBrokerResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            string brokerName = "resource-name123";
            ResourceIdentifier iotOperationsBrokerResourceId = IotOperationsBrokerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName, brokerName);
            IotOperationsBrokerResource iotOperationsBroker = client.GetIotOperationsBrokerResource(iotOperationsBrokerResourceId);

            // get the collection of this IotOperationsBrokerAuthorizationResource
            IotOperationsBrokerAuthorizationCollection collection = iotOperationsBroker.GetIotOperationsBrokerAuthorizations();

            // invoke the operation and iterate over the result
            await foreach (IotOperationsBrokerAuthorizationResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                IotOperationsBrokerAuthorizationData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_BrokerAuthorizationGet()
        {
            // Generated from example definition: 2024-11-01/BrokerAuthorization_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "BrokerAuthorizationResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsBrokerResource created on azure
            // for more information of creating IotOperationsBrokerResource, please refer to the document of IotOperationsBrokerResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            string brokerName = "resource-name123";
            ResourceIdentifier iotOperationsBrokerResourceId = IotOperationsBrokerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName, brokerName);
            IotOperationsBrokerResource iotOperationsBroker = client.GetIotOperationsBrokerResource(iotOperationsBrokerResourceId);

            // get the collection of this IotOperationsBrokerAuthorizationResource
            IotOperationsBrokerAuthorizationCollection collection = iotOperationsBroker.GetIotOperationsBrokerAuthorizations();

            // invoke the operation
            string authorizationName = "resource-name123";
            bool result = await collection.ExistsAsync(authorizationName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_BrokerAuthorizationGet()
        {
            // Generated from example definition: 2024-11-01/BrokerAuthorization_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "BrokerAuthorizationResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsBrokerResource created on azure
            // for more information of creating IotOperationsBrokerResource, please refer to the document of IotOperationsBrokerResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            string brokerName = "resource-name123";
            ResourceIdentifier iotOperationsBrokerResourceId = IotOperationsBrokerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName, brokerName);
            IotOperationsBrokerResource iotOperationsBroker = client.GetIotOperationsBrokerResource(iotOperationsBrokerResourceId);

            // get the collection of this IotOperationsBrokerAuthorizationResource
            IotOperationsBrokerAuthorizationCollection collection = iotOperationsBroker.GetIotOperationsBrokerAuthorizations();

            // invoke the operation
            string authorizationName = "resource-name123";
            NullableResponse<IotOperationsBrokerAuthorizationResource> response = await collection.GetIfExistsAsync(authorizationName);
            IotOperationsBrokerAuthorizationResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                IotOperationsBrokerAuthorizationData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
