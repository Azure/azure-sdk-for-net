// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.IotOperations.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.IotOperations.Samples
{
    public partial class Sample_IotOperationsBrokerCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_BrokerCreateOrUpdateComplex()
        {
            // Generated from example definition: 2024-11-01/Broker_CreateOrUpdate_Complex.json
            // this example is just showing the usage of "BrokerResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsInstanceResource created on azure
            // for more information of creating IotOperationsInstanceResource, please refer to the document of IotOperationsInstanceResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            ResourceIdentifier iotOperationsInstanceResourceId = IotOperationsInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName);
            IotOperationsInstanceResource iotOperationsInstance = client.GetIotOperationsInstanceResource(iotOperationsInstanceResourceId);

            // get the collection of this IotOperationsBrokerResource
            IotOperationsBrokerCollection collection = iotOperationsInstance.GetIotOperationsBrokers();

            // invoke the operation
            string brokerName = "resource-name123";
            IotOperationsBrokerData data = new IotOperationsBrokerData(new IotOperationsExtendedLocation("qmbrfwcpwwhggszhrdjv", IotOperationsExtendedLocationType.CustomLocation))
            {
                Properties = new IotOperationsBrokerProperties
                {
                    Cardinality = new BrokerCardinality(new BrokerBackendChain(2, 2)
                    {
                        Workers = 2,
                    }, new BrokerFrontend(2)
                    {
                        Workers = 2,
                    }),
                    DiskBackedMessageBuffer = new DiskBackedMessageBuffer("50M"),
                    GenerateResourceLimitsCpu = IotOperationsOperationalMode.Enabled,
                    MemoryProfile = BrokerMemoryProfile.Medium,
                },
            };
            ArmOperation<IotOperationsBrokerResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, brokerName, data);
            IotOperationsBrokerResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            IotOperationsBrokerData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_BrokerCreateOrUpdate()
        {
            // Generated from example definition: 2024-11-01/Broker_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "BrokerResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsInstanceResource created on azure
            // for more information of creating IotOperationsInstanceResource, please refer to the document of IotOperationsInstanceResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            ResourceIdentifier iotOperationsInstanceResourceId = IotOperationsInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName);
            IotOperationsInstanceResource iotOperationsInstance = client.GetIotOperationsInstanceResource(iotOperationsInstanceResourceId);

            // get the collection of this IotOperationsBrokerResource
            IotOperationsBrokerCollection collection = iotOperationsInstance.GetIotOperationsBrokers();

            // invoke the operation
            string brokerName = "resource-name123";
            IotOperationsBrokerData data = new IotOperationsBrokerData(new IotOperationsExtendedLocation("qmbrfwcpwwhggszhrdjv", IotOperationsExtendedLocationType.CustomLocation))
            {
                Properties = new IotOperationsBrokerProperties
                {
                    Advanced = new BrokerAdvancedSettings
                    {
                        Clients = new BrokerClientConfig
                        {
                            MaxSessionExpirySeconds = 3859,
                            MaxMessageExpirySeconds = 3263,
                            MaxPacketSizeBytes = 3029,
                            SubscriberQueueLimit = new SubscriberQueueLimit
                            {
                                Length = 6L,
                                Strategy = SubscriberMessageDropStrategy.None,
                            },
                            MaxReceiveMaximum = 2365,
                            MaxKeepAliveSeconds = 3744,
                        },
                        EncryptInternalTraffic = IotOperationsOperationalMode.Enabled,
                        InternalCerts = new CertManagerCertConfig("bchrc", "xkafmpgjfifkwwrhkswtopdnne", new CertManagerPrivateKey(PrivateKeyAlgorithm.Ec256, PrivateKeyRotationPolicy.Always)),
                    },
                    Cardinality = new BrokerCardinality(new BrokerBackendChain(11, 5)
                    {
                        Workers = 15,
                    }, new BrokerFrontend(2)
                    {
                        Workers = 6,
                    }),
                    Diagnostics = new BrokerDiagnostics
                    {
                        LogsLevel = "rnmwokumdmebpmfxxxzvvjfdywotav",
                        MetricsPrometheusPort = 7581,
                        SelfCheck = new BrokerDiagnosticSelfCheck
                        {
                            Mode = IotOperationsOperationalMode.Enabled,
                            IntervalSeconds = 158,
                            TimeoutSeconds = 14,
                        },
                        Traces = new BrokerDiagnosticTraces
                        {
                            Mode = IotOperationsOperationalMode.Enabled,
                            CacheSizeMegabytes = 28,
                            SelfTracing = new DiagnosticSelfTracing
                            {
                                Mode = IotOperationsOperationalMode.Enabled,
                                IntervalSeconds = 22,
                            },
                            SpanChannelCapacity = 1000,
                        },
                    },
                    DiskBackedMessageBuffer = new DiskBackedMessageBuffer("500M")
                    {
                        EphemeralVolumeClaimSpec = new VolumeClaimSpec
                        {
                            VolumeName = "c",
                            VolumeMode = "rxvpksjuuugqnqzeiprocknbn",
                            StorageClassName = "sseyhrjptkhrqvpdpjmornkqvon",
                            AccessModes = { "nuluhigrbb" },
                            DataSource = new LocalKubernetesReference("wazgyb", "cwhsgxxcxsyppoefm")
                            {
                                ApiGroup = "npqapyksvvpkohujx",
                            },
                            DataSourceRef = new KubernetesReference("odynqzekfzsnawrctaxg", "envszivbbmixbyddzg")
                            {
                                ApiGroup = "mnfnykznjjsoqpfsgdqioupt",
                                Namespace = "etcfzvxqd",
                            },
                            Resources = new VolumeClaimResourceRequirements
                            {
                                Limits =
{
["key2719"] = "hmphcrgctu"
},
                                Requests =
{
["key2909"] = "txocprnyrsgvhfrg"
},
                            },
                            Selector = new VolumeClaimSpecSelector
                            {
                                MatchExpressions = {new VolumeClaimSpecSelectorMatchExpressions("e", BrokerOperatorValue.In)
{
Values = {"slmpajlywqvuyknipgztsonqyybt"},
}},
                                MatchLabels =
{
["key6673"] = "wlngfalznwxnurzpgxomcxhbqefpr"
},
                            },
                        },
                        PersistentVolumeClaimSpec = new VolumeClaimSpec
                        {
                            VolumeName = "c",
                            VolumeMode = "rxvpksjuuugqnqzeiprocknbn",
                            StorageClassName = "sseyhrjptkhrqvpdpjmornkqvon",
                            AccessModes = { "nuluhigrbb" },
                            DataSource = new LocalKubernetesReference("wazgyb", "cwhsgxxcxsyppoefm")
                            {
                                ApiGroup = "npqapyksvvpkohujx",
                            },
                            DataSourceRef = new KubernetesReference("odynqzekfzsnawrctaxg", "envszivbbmixbyddzg")
                            {
                                ApiGroup = "mnfnykznjjsoqpfsgdqioupt",
                                Namespace = "etcfzvxqd",
                            },
                            Resources = new VolumeClaimResourceRequirements
                            {
                                Limits =
{
["key2719"] = "hmphcrgctu"
},
                                Requests =
{
["key2909"] = "txocprnyrsgvhfrg"
},
                            },
                            Selector = new VolumeClaimSpecSelector
                            {
                                MatchExpressions = {new VolumeClaimSpecSelectorMatchExpressions("e", BrokerOperatorValue.In)
{
Values = {"slmpajlywqvuyknipgztsonqyybt"},
}},
                                MatchLabels =
{
["key6673"] = "wlngfalznwxnurzpgxomcxhbqefpr"
},
                            },
                        },
                    },
                    GenerateResourceLimitsCpu = IotOperationsOperationalMode.Enabled,
                    MemoryProfile = BrokerMemoryProfile.Tiny,
                },
            };
            ArmOperation<IotOperationsBrokerResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, brokerName, data);
            IotOperationsBrokerResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            IotOperationsBrokerData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_BrokerCreateOrUpdateMinimal()
        {
            // Generated from example definition: 2024-11-01/Broker_CreateOrUpdate_Minimal.json
            // this example is just showing the usage of "BrokerResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsInstanceResource created on azure
            // for more information of creating IotOperationsInstanceResource, please refer to the document of IotOperationsInstanceResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            ResourceIdentifier iotOperationsInstanceResourceId = IotOperationsInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName);
            IotOperationsInstanceResource iotOperationsInstance = client.GetIotOperationsInstanceResource(iotOperationsInstanceResourceId);

            // get the collection of this IotOperationsBrokerResource
            IotOperationsBrokerCollection collection = iotOperationsInstance.GetIotOperationsBrokers();

            // invoke the operation
            string brokerName = "resource-name123";
            IotOperationsBrokerData data = new IotOperationsBrokerData(new IotOperationsExtendedLocation("qmbrfwcpwwhggszhrdjv", IotOperationsExtendedLocationType.CustomLocation))
            {
                Properties = new IotOperationsBrokerProperties
                {
                    MemoryProfile = BrokerMemoryProfile.Tiny,
                },
            };
            ArmOperation<IotOperationsBrokerResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, brokerName, data);
            IotOperationsBrokerResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            IotOperationsBrokerData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_BrokerCreateOrUpdateSimple()
        {
            // Generated from example definition: 2024-11-01/Broker_CreateOrUpdate_Simple.json
            // this example is just showing the usage of "BrokerResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsInstanceResource created on azure
            // for more information of creating IotOperationsInstanceResource, please refer to the document of IotOperationsInstanceResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            ResourceIdentifier iotOperationsInstanceResourceId = IotOperationsInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName);
            IotOperationsInstanceResource iotOperationsInstance = client.GetIotOperationsInstanceResource(iotOperationsInstanceResourceId);

            // get the collection of this IotOperationsBrokerResource
            IotOperationsBrokerCollection collection = iotOperationsInstance.GetIotOperationsBrokers();

            // invoke the operation
            string brokerName = "resource-name123";
            IotOperationsBrokerData data = new IotOperationsBrokerData(new IotOperationsExtendedLocation("qmbrfwcpwwhggszhrdjv", IotOperationsExtendedLocationType.CustomLocation))
            {
                Properties = new IotOperationsBrokerProperties
                {
                    Cardinality = new BrokerCardinality(new BrokerBackendChain(2, 2)
                    {
                        Workers = 2,
                    }, new BrokerFrontend(2)
                    {
                        Workers = 2,
                    }),
                    GenerateResourceLimitsCpu = IotOperationsOperationalMode.Enabled,
                    MemoryProfile = BrokerMemoryProfile.Low,
                },
            };
            ArmOperation<IotOperationsBrokerResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, brokerName, data);
            IotOperationsBrokerResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            IotOperationsBrokerData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_BrokerGet()
        {
            // Generated from example definition: 2024-11-01/Broker_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "BrokerResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsInstanceResource created on azure
            // for more information of creating IotOperationsInstanceResource, please refer to the document of IotOperationsInstanceResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            ResourceIdentifier iotOperationsInstanceResourceId = IotOperationsInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName);
            IotOperationsInstanceResource iotOperationsInstance = client.GetIotOperationsInstanceResource(iotOperationsInstanceResourceId);

            // get the collection of this IotOperationsBrokerResource
            IotOperationsBrokerCollection collection = iotOperationsInstance.GetIotOperationsBrokers();

            // invoke the operation
            string brokerName = "resource-name123";
            IotOperationsBrokerResource result = await collection.GetAsync(brokerName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            IotOperationsBrokerData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_BrokerListByResourceGroup()
        {
            // Generated from example definition: 2024-11-01/Broker_ListByResourceGroup_MaximumSet_Gen.json
            // this example is just showing the usage of "BrokerResource_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsInstanceResource created on azure
            // for more information of creating IotOperationsInstanceResource, please refer to the document of IotOperationsInstanceResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            ResourceIdentifier iotOperationsInstanceResourceId = IotOperationsInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName);
            IotOperationsInstanceResource iotOperationsInstance = client.GetIotOperationsInstanceResource(iotOperationsInstanceResourceId);

            // get the collection of this IotOperationsBrokerResource
            IotOperationsBrokerCollection collection = iotOperationsInstance.GetIotOperationsBrokers();

            // invoke the operation and iterate over the result
            await foreach (IotOperationsBrokerResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                IotOperationsBrokerData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_BrokerGet()
        {
            // Generated from example definition: 2024-11-01/Broker_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "BrokerResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsInstanceResource created on azure
            // for more information of creating IotOperationsInstanceResource, please refer to the document of IotOperationsInstanceResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            ResourceIdentifier iotOperationsInstanceResourceId = IotOperationsInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName);
            IotOperationsInstanceResource iotOperationsInstance = client.GetIotOperationsInstanceResource(iotOperationsInstanceResourceId);

            // get the collection of this IotOperationsBrokerResource
            IotOperationsBrokerCollection collection = iotOperationsInstance.GetIotOperationsBrokers();

            // invoke the operation
            string brokerName = "resource-name123";
            bool result = await collection.ExistsAsync(brokerName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_BrokerGet()
        {
            // Generated from example definition: 2024-11-01/Broker_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "BrokerResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsInstanceResource created on azure
            // for more information of creating IotOperationsInstanceResource, please refer to the document of IotOperationsInstanceResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            ResourceIdentifier iotOperationsInstanceResourceId = IotOperationsInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName);
            IotOperationsInstanceResource iotOperationsInstance = client.GetIotOperationsInstanceResource(iotOperationsInstanceResourceId);

            // get the collection of this IotOperationsBrokerResource
            IotOperationsBrokerCollection collection = iotOperationsInstance.GetIotOperationsBrokers();

            // invoke the operation
            string brokerName = "resource-name123";
            NullableResponse<IotOperationsBrokerResource> response = await collection.GetIfExistsAsync(brokerName);
            IotOperationsBrokerResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                IotOperationsBrokerData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
