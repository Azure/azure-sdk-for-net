// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.IotOperations.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.IotOperations.Samples
{
    public partial class Sample_IotOperationsDataflowEndpointCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_DataflowEndpointCreateOrUpdateADLSv2()
        {
            // Generated from example definition: 2024-11-01/DataflowEndpoint_CreateOrUpdate_ADLSv2.json
            // this example is just showing the usage of "DataflowEndpointResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsInstanceResource created on azure
            // for more information of creating IotOperationsInstanceResource, please refer to the document of IotOperationsInstanceResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            ResourceIdentifier iotOperationsInstanceResourceId = IotOperationsInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName);
            IotOperationsInstanceResource iotOperationsInstance = client.GetIotOperationsInstanceResource(iotOperationsInstanceResourceId);

            // get the collection of this IotOperationsDataflowEndpointResource
            IotOperationsDataflowEndpointCollection collection = iotOperationsInstance.GetIotOperationsDataflowEndpoints();

            // invoke the operation
            string dataflowEndpointName = "adlsv2-endpoint";
            IotOperationsDataflowEndpointData data = new IotOperationsDataflowEndpointData(new IotOperationsExtendedLocation("qmbrfwcpwwhggszhrdjv", IotOperationsExtendedLocationType.CustomLocation))
            {
                Properties = new IotOperationsDataflowEndpointProperties(DataflowEndpointType.DataLakeStorage)
                {
                    DataLakeStorageSettings = new DataflowEndpointDataLakeStorage(new DataflowEndpointDataLakeStorageAuthentication(DataLakeStorageAuthMethod.AccessToken)
                    {
                        AccessTokenSecretRef = "my-secret",
                    }, "example.blob.core.windows.net"),
                },
            };
            ArmOperation<IotOperationsDataflowEndpointResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, dataflowEndpointName, data);
            IotOperationsDataflowEndpointResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            IotOperationsDataflowEndpointData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_DataflowEndpointCreateOrUpdateADX()
        {
            // Generated from example definition: 2024-11-01/DataflowEndpoint_CreateOrUpdate_ADX.json
            // this example is just showing the usage of "DataflowEndpointResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsInstanceResource created on azure
            // for more information of creating IotOperationsInstanceResource, please refer to the document of IotOperationsInstanceResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            ResourceIdentifier iotOperationsInstanceResourceId = IotOperationsInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName);
            IotOperationsInstanceResource iotOperationsInstance = client.GetIotOperationsInstanceResource(iotOperationsInstanceResourceId);

            // get the collection of this IotOperationsDataflowEndpointResource
            IotOperationsDataflowEndpointCollection collection = iotOperationsInstance.GetIotOperationsDataflowEndpoints();

            // invoke the operation
            string dataflowEndpointName = "adx-endpoint";
            IotOperationsDataflowEndpointData data = new IotOperationsDataflowEndpointData(new IotOperationsExtendedLocation("qmbrfwcpwwhggszhrdjv", IotOperationsExtendedLocationType.CustomLocation))
            {
                Properties = new IotOperationsDataflowEndpointProperties(DataflowEndpointType.DataExplorer)
                {
                    DataExplorerSettings = new DataflowEndpointDataExplorer(new DataflowEndpointDataExplorerAuthentication(DataExplorerAuthMethod.SystemAssignedManagedIdentity), "example-database", "example.westeurope.kusto.windows.net")
                    {
                        Batching = new IotOperationsBatchingConfig
                        {
                            LatencySeconds = 9312,
                            MaxMessages = 9028,
                        },
                    },
                },
            };
            ArmOperation<IotOperationsDataflowEndpointResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, dataflowEndpointName, data);
            IotOperationsDataflowEndpointResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            IotOperationsDataflowEndpointData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_DataflowEndpointCreateOrUpdateAIO()
        {
            // Generated from example definition: 2024-11-01/DataflowEndpoint_CreateOrUpdate_AIO.json
            // this example is just showing the usage of "DataflowEndpointResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsInstanceResource created on azure
            // for more information of creating IotOperationsInstanceResource, please refer to the document of IotOperationsInstanceResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            ResourceIdentifier iotOperationsInstanceResourceId = IotOperationsInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName);
            IotOperationsInstanceResource iotOperationsInstance = client.GetIotOperationsInstanceResource(iotOperationsInstanceResourceId);

            // get the collection of this IotOperationsDataflowEndpointResource
            IotOperationsDataflowEndpointCollection collection = iotOperationsInstance.GetIotOperationsDataflowEndpoints();

            // invoke the operation
            string dataflowEndpointName = "aio-builtin-broker-endpoint";
            IotOperationsDataflowEndpointData data = new IotOperationsDataflowEndpointData(new IotOperationsExtendedLocation("qmbrfwcpwwhggszhrdjv", IotOperationsExtendedLocationType.CustomLocation))
            {
                Properties = new IotOperationsDataflowEndpointProperties(DataflowEndpointType.Mqtt)
                {
                    MqttSettings = new DataflowEndpointMqtt(new DataflowEndpointMqttAuthentication(default)
                    {
                        ServiceAccountTokenAudience = "aio-internal",
                    })
                    {
                        Host = "aio-broker:18883",
                        Tls = new IotOperationsTlsProperties
                        {
                            Mode = IotOperationsOperationalMode.Enabled,
                            TrustedCaCertificateConfigMapRef = "aio-ca-trust-bundle-test-only",
                        },
                    },
                },
            };
            ArmOperation<IotOperationsDataflowEndpointResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, dataflowEndpointName, data);
            IotOperationsDataflowEndpointResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            IotOperationsDataflowEndpointData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_DataflowEndpointCreateOrUpdateEventGrid()
        {
            // Generated from example definition: 2024-11-01/DataflowEndpoint_CreateOrUpdate_EventGrid.json
            // this example is just showing the usage of "DataflowEndpointResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsInstanceResource created on azure
            // for more information of creating IotOperationsInstanceResource, please refer to the document of IotOperationsInstanceResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            ResourceIdentifier iotOperationsInstanceResourceId = IotOperationsInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName);
            IotOperationsInstanceResource iotOperationsInstance = client.GetIotOperationsInstanceResource(iotOperationsInstanceResourceId);

            // get the collection of this IotOperationsDataflowEndpointResource
            IotOperationsDataflowEndpointCollection collection = iotOperationsInstance.GetIotOperationsDataflowEndpoints();

            // invoke the operation
            string dataflowEndpointName = "event-grid-endpoint";
            IotOperationsDataflowEndpointData data = new IotOperationsDataflowEndpointData(new IotOperationsExtendedLocation("qmbrfwcpwwhggszhrdjv", IotOperationsExtendedLocationType.CustomLocation))
            {
                Properties = new IotOperationsDataflowEndpointProperties(DataflowEndpointType.Mqtt)
                {
                    MqttSettings = new DataflowEndpointMqtt(new DataflowEndpointMqttAuthentication(MqttAuthMethod.SystemAssignedManagedIdentity))
                    {
                        Host = "example.westeurope-1.ts.eventgrid.azure.net:8883",
                        Tls = new IotOperationsTlsProperties
                        {
                            Mode = IotOperationsOperationalMode.Enabled,
                        },
                    },
                },
            };
            ArmOperation<IotOperationsDataflowEndpointResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, dataflowEndpointName, data);
            IotOperationsDataflowEndpointResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            IotOperationsDataflowEndpointData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_DataflowEndpointCreateOrUpdateEventHub()
        {
            // Generated from example definition: 2024-11-01/DataflowEndpoint_CreateOrUpdate_EventHub.json
            // this example is just showing the usage of "DataflowEndpointResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsInstanceResource created on azure
            // for more information of creating IotOperationsInstanceResource, please refer to the document of IotOperationsInstanceResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            ResourceIdentifier iotOperationsInstanceResourceId = IotOperationsInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName);
            IotOperationsInstanceResource iotOperationsInstance = client.GetIotOperationsInstanceResource(iotOperationsInstanceResourceId);

            // get the collection of this IotOperationsDataflowEndpointResource
            IotOperationsDataflowEndpointCollection collection = iotOperationsInstance.GetIotOperationsDataflowEndpoints();

            // invoke the operation
            string dataflowEndpointName = "event-hub-endpoint";
            IotOperationsDataflowEndpointData data = new IotOperationsDataflowEndpointData(new IotOperationsExtendedLocation("qmbrfwcpwwhggszhrdjv", IotOperationsExtendedLocationType.CustomLocation))
            {
                Properties = new IotOperationsDataflowEndpointProperties(DataflowEndpointType.Kafka)
                {
                    KafkaSettings = new DataflowEndpointKafka(new DataflowEndpointKafkaAuthentication(KafkaAuthMethod.SystemAssignedManagedIdentity), "example.servicebus.windows.net:9093")
                    {
                        ConsumerGroupId = "aiodataflows",
                        Tls = new IotOperationsTlsProperties
                        {
                            Mode = IotOperationsOperationalMode.Enabled,
                        },
                    },
                },
            };
            ArmOperation<IotOperationsDataflowEndpointResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, dataflowEndpointName, data);
            IotOperationsDataflowEndpointResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            IotOperationsDataflowEndpointData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_DataflowEndpointCreateOrUpdateFabric()
        {
            // Generated from example definition: 2024-11-01/DataflowEndpoint_CreateOrUpdate_Fabric.json
            // this example is just showing the usage of "DataflowEndpointResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsInstanceResource created on azure
            // for more information of creating IotOperationsInstanceResource, please refer to the document of IotOperationsInstanceResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            ResourceIdentifier iotOperationsInstanceResourceId = IotOperationsInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName);
            IotOperationsInstanceResource iotOperationsInstance = client.GetIotOperationsInstanceResource(iotOperationsInstanceResourceId);

            // get the collection of this IotOperationsDataflowEndpointResource
            IotOperationsDataflowEndpointCollection collection = iotOperationsInstance.GetIotOperationsDataflowEndpoints();

            // invoke the operation
            string dataflowEndpointName = "fabric-endpoint";
            IotOperationsDataflowEndpointData data = new IotOperationsDataflowEndpointData(new IotOperationsExtendedLocation("qmbrfwcpwwhggszhrdjv", IotOperationsExtendedLocationType.CustomLocation))
            {
                Properties = new IotOperationsDataflowEndpointProperties(DataflowEndpointType.FabricOneLake)
                {
                    FabricOneLakeSettings = new DataflowEndpointFabricOneLake(new DataflowEndpointFabricOneLakeAuthentication(FabricOneLakeAuthMethod.SystemAssignedManagedIdentity), new DataflowEndpointFabricOneLakeNames("example-lakehouse", "example-workspace"), DataflowEndpointFabricPathType.Tables, "onelake.dfs.fabric.microsoft.com"),
                },
            };
            ArmOperation<IotOperationsDataflowEndpointResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, dataflowEndpointName, data);
            IotOperationsDataflowEndpointResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            IotOperationsDataflowEndpointData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_DataflowEndpointCreateOrUpdateKafka()
        {
            // Generated from example definition: 2024-11-01/DataflowEndpoint_CreateOrUpdate_Kafka.json
            // this example is just showing the usage of "DataflowEndpointResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsInstanceResource created on azure
            // for more information of creating IotOperationsInstanceResource, please refer to the document of IotOperationsInstanceResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            ResourceIdentifier iotOperationsInstanceResourceId = IotOperationsInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName);
            IotOperationsInstanceResource iotOperationsInstance = client.GetIotOperationsInstanceResource(iotOperationsInstanceResourceId);

            // get the collection of this IotOperationsDataflowEndpointResource
            IotOperationsDataflowEndpointCollection collection = iotOperationsInstance.GetIotOperationsDataflowEndpoints();

            // invoke the operation
            string dataflowEndpointName = "generic-kafka-endpoint";
            IotOperationsDataflowEndpointData data = new IotOperationsDataflowEndpointData(new IotOperationsExtendedLocation("qmbrfwcpwwhggszhrdjv", IotOperationsExtendedLocationType.CustomLocation))
            {
                Properties = new IotOperationsDataflowEndpointProperties(DataflowEndpointType.Kafka)
                {
                    KafkaSettings = new DataflowEndpointKafka(new DataflowEndpointKafkaAuthentication(KafkaAuthMethod.Sasl)
                    {
                        SaslSettings = new DataflowEndpointAuthenticationSasl(DataflowEndpointAuthenticationSaslType.Plain, "my-secret"),
                    }, "example.kafka.local:9093")
                    {
                        ConsumerGroupId = "dataflows",
                        Batching = new DataflowEndpointKafkaBatching
                        {
                            Mode = IotOperationsOperationalMode.Enabled,
                            LatencyMs = 5,
                            MaxBytes = 1000000,
                            MaxMessages = 100000,
                        },
                        CopyMqttProperties = IotOperationsOperationalMode.Enabled,
                        Compression = DataflowEndpointKafkaCompression.Gzip,
                        KafkaAcks = DataflowEndpointKafkaAck.All,
                        PartitionStrategy = DataflowEndpointKafkaPartitionStrategy.Default,
                        Tls = new IotOperationsTlsProperties
                        {
                            Mode = IotOperationsOperationalMode.Enabled,
                            TrustedCaCertificateConfigMapRef = "ca-certificates",
                        },
                        CloudEventAttributes = CloudEventAttributeType.Propagate,
                    },
                },
            };
            ArmOperation<IotOperationsDataflowEndpointResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, dataflowEndpointName, data);
            IotOperationsDataflowEndpointResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            IotOperationsDataflowEndpointData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_DataflowEndpointCreateOrUpdateLocalStorage()
        {
            // Generated from example definition: 2024-11-01/DataflowEndpoint_CreateOrUpdate_LocalStorage.json
            // this example is just showing the usage of "DataflowEndpointResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsInstanceResource created on azure
            // for more information of creating IotOperationsInstanceResource, please refer to the document of IotOperationsInstanceResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            ResourceIdentifier iotOperationsInstanceResourceId = IotOperationsInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName);
            IotOperationsInstanceResource iotOperationsInstance = client.GetIotOperationsInstanceResource(iotOperationsInstanceResourceId);

            // get the collection of this IotOperationsDataflowEndpointResource
            IotOperationsDataflowEndpointCollection collection = iotOperationsInstance.GetIotOperationsDataflowEndpoints();

            // invoke the operation
            string dataflowEndpointName = "local-storage-endpoint";
            IotOperationsDataflowEndpointData data = new IotOperationsDataflowEndpointData(new IotOperationsExtendedLocation("qmbrfwcpwwhggszhrdjv", IotOperationsExtendedLocationType.CustomLocation))
            {
                Properties = new IotOperationsDataflowEndpointProperties(DataflowEndpointType.LocalStorage)
                {
                    LocalStoragePersistentVolumeClaimRef = "example-pvc",
                },
            };
            ArmOperation<IotOperationsDataflowEndpointResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, dataflowEndpointName, data);
            IotOperationsDataflowEndpointResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            IotOperationsDataflowEndpointData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_DataflowEndpointCreateOrUpdateMQTT()
        {
            // Generated from example definition: 2024-11-01/DataflowEndpoint_CreateOrUpdate_MQTT.json
            // this example is just showing the usage of "DataflowEndpointResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsInstanceResource created on azure
            // for more information of creating IotOperationsInstanceResource, please refer to the document of IotOperationsInstanceResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            ResourceIdentifier iotOperationsInstanceResourceId = IotOperationsInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName);
            IotOperationsInstanceResource iotOperationsInstance = client.GetIotOperationsInstanceResource(iotOperationsInstanceResourceId);

            // get the collection of this IotOperationsDataflowEndpointResource
            IotOperationsDataflowEndpointCollection collection = iotOperationsInstance.GetIotOperationsDataflowEndpoints();

            // invoke the operation
            string dataflowEndpointName = "generic-mqtt-broker-endpoint";
            IotOperationsDataflowEndpointData data = new IotOperationsDataflowEndpointData(new IotOperationsExtendedLocation("qmbrfwcpwwhggszhrdjv", IotOperationsExtendedLocationType.CustomLocation))
            {
                Properties = new IotOperationsDataflowEndpointProperties(DataflowEndpointType.Mqtt)
                {
                    MqttSettings = new DataflowEndpointMqtt(new DataflowEndpointMqttAuthentication(MqttAuthMethod.X509Certificate)
                    {
                        X509CertificateSecretRef = "example-secret",
                    })
                    {
                        ClientIdPrefix = "factory-gateway",
                        Host = "example.broker.local:1883",
                        Protocol = BrokerProtocolType.WebSockets,
                        KeepAliveSeconds = 60,
                        Retain = MqttRetainType.Keep,
                        MaxInflightMessages = 100,
                        Qos = 1,
                        SessionExpirySeconds = 3600,
                        Tls = new IotOperationsTlsProperties
                        {
                            Mode = IotOperationsOperationalMode.Disabled,
                        },
                    },
                },
            };
            ArmOperation<IotOperationsDataflowEndpointResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, dataflowEndpointName, data);
            IotOperationsDataflowEndpointResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            IotOperationsDataflowEndpointData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_DataflowEndpointCreateOrUpdate()
        {
            // Generated from example definition: 2024-11-01/DataflowEndpoint_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "DataflowEndpointResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsInstanceResource created on azure
            // for more information of creating IotOperationsInstanceResource, please refer to the document of IotOperationsInstanceResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            ResourceIdentifier iotOperationsInstanceResourceId = IotOperationsInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName);
            IotOperationsInstanceResource iotOperationsInstance = client.GetIotOperationsInstanceResource(iotOperationsInstanceResourceId);

            // get the collection of this IotOperationsDataflowEndpointResource
            IotOperationsDataflowEndpointCollection collection = iotOperationsInstance.GetIotOperationsDataflowEndpoints();

            // invoke the operation
            string dataflowEndpointName = "resource-name123";
            IotOperationsDataflowEndpointData data = new IotOperationsDataflowEndpointData(new IotOperationsExtendedLocation("qmbrfwcpwwhggszhrdjv", IotOperationsExtendedLocationType.CustomLocation))
            {
                Properties = new IotOperationsDataflowEndpointProperties(DataflowEndpointType.DataExplorer)
                {
                    DataExplorerSettings = new DataflowEndpointDataExplorer(new DataflowEndpointDataExplorerAuthentication(DataExplorerAuthMethod.SystemAssignedManagedIdentity)
                    {
                        SystemAssignedManagedIdentityAudience = "psxomrfbhoflycm",
                        UserAssignedManagedIdentitySettings = new DataflowEndpointAuthenticationUserAssignedManagedIdentity("fb90f267-8872-431a-a76a-a1cec5d3c4d2", "ed060aa2-71ff-4d3f-99c4-a9138356fdec")
                        {
                            Scope = "zop",
                        },
                    }, "yqcdpjsifm", "<cluster>.<region>.kusto.windows.net")
                    {
                        Batching = new IotOperationsBatchingConfig
                        {
                            LatencySeconds = 9312,
                            MaxMessages = 9028,
                        },
                    },
                    DataLakeStorageSettings = new DataflowEndpointDataLakeStorage(new DataflowEndpointDataLakeStorageAuthentication(DataLakeStorageAuthMethod.SystemAssignedManagedIdentity)
                    {
                        AccessTokenSecretRef = "sevriyphcvnlrnfudqzejecwa",
                        SystemAssignedManagedIdentityAudience = "psxomrfbhoflycm",
                        UserAssignedManagedIdentitySettings = new DataflowEndpointAuthenticationUserAssignedManagedIdentity("fb90f267-8872-431a-a76a-a1cec5d3c4d2", "ed060aa2-71ff-4d3f-99c4-a9138356fdec")
                        {
                            Scope = "zop",
                        },
                    }, "<account>.blob.core.windows.net")
                    {
                        Batching = new IotOperationsBatchingConfig
                        {
                            LatencySeconds = 9312,
                            MaxMessages = 9028,
                        },
                    },
                    FabricOneLakeSettings = new DataflowEndpointFabricOneLake(new DataflowEndpointFabricOneLakeAuthentication(FabricOneLakeAuthMethod.SystemAssignedManagedIdentity)
                    {
                        SystemAssignedManagedIdentityAudience = "psxomrfbhoflycm",
                        UserAssignedManagedIdentitySettings = new DataflowEndpointAuthenticationUserAssignedManagedIdentity("fb90f267-8872-431a-a76a-a1cec5d3c4d2", "ed060aa2-71ff-4d3f-99c4-a9138356fdec")
                        {
                            Scope = "zop",
                        },
                    }, new DataflowEndpointFabricOneLakeNames("wpeathi", "nwgmitkbljztgms"), DataflowEndpointFabricPathType.Files, "https://<host>.fabric.microsoft.com")
                    {
                        Batching = new IotOperationsBatchingConfig
                        {
                            LatencySeconds = 9312,
                            MaxMessages = 9028,
                        },
                    },
                    KafkaSettings = new DataflowEndpointKafka(new DataflowEndpointKafkaAuthentication(KafkaAuthMethod.SystemAssignedManagedIdentity)
                    {
                        SystemAssignedManagedIdentityAudience = "psxomrfbhoflycm",
                        UserAssignedManagedIdentitySettings = new DataflowEndpointAuthenticationUserAssignedManagedIdentity("fb90f267-8872-431a-a76a-a1cec5d3c4d2", "ed060aa2-71ff-4d3f-99c4-a9138356fdec")
                        {
                            Scope = "zop",
                        },
                        SaslSettings = new DataflowEndpointAuthenticationSasl(DataflowEndpointAuthenticationSaslType.Plain, "visyxoztqnylvbyokhtmpdkwes"),
                        X509CertificateSecretRef = "afwizrystfslkfqd",
                    }, "pwcqfiqclcgneolpewnyavoulbip")
                    {
                        ConsumerGroupId = "ukkzcjiyenhxokat",
                        Batching = new DataflowEndpointKafkaBatching
                        {
                            Mode = IotOperationsOperationalMode.Enabled,
                            LatencyMs = 3679,
                            MaxBytes = 8887,
                            MaxMessages = 2174,
                        },
                        CopyMqttProperties = IotOperationsOperationalMode.Enabled,
                        Compression = DataflowEndpointKafkaCompression.None,
                        KafkaAcks = DataflowEndpointKafkaAck.Zero,
                        PartitionStrategy = DataflowEndpointKafkaPartitionStrategy.Default,
                        Tls = new IotOperationsTlsProperties
                        {
                            Mode = IotOperationsOperationalMode.Enabled,
                            TrustedCaCertificateConfigMapRef = "tectjjvukvelsreihwadh",
                        },
                    },
                    LocalStoragePersistentVolumeClaimRef = "jjwqwvd",
                    MqttSettings = new DataflowEndpointMqtt(new DataflowEndpointMqttAuthentication(MqttAuthMethod.SystemAssignedManagedIdentity)
                    {
                        SystemAssignedManagedIdentityAudience = "psxomrfbhoflycm",
                        UserAssignedManagedIdentitySettings = new DataflowEndpointAuthenticationUserAssignedManagedIdentity("fb90f267-8872-431a-a76a-a1cec5d3c4d2", "ed060aa2-71ff-4d3f-99c4-a9138356fdec")
                        {
                            Scope = "zop",
                        },
                        ServiceAccountTokenAudience = "ejbklrbxgjaqleoycgpje",
                        X509CertificateSecretRef = "afwizrystfslkfqd",
                    })
                    {
                        ClientIdPrefix = "kkljsdxdirfhwxtkavldekeqhv",
                        Host = "nyhnxqnbspstctl",
                        Protocol = BrokerProtocolType.Mqtt,
                        KeepAliveSeconds = 0,
                        Retain = MqttRetainType.Keep,
                        MaxInflightMessages = 0,
                        Qos = 1,
                        SessionExpirySeconds = 0,
                        Tls = new IotOperationsTlsProperties
                        {
                            Mode = IotOperationsOperationalMode.Enabled,
                            TrustedCaCertificateConfigMapRef = "tectjjvukvelsreihwadh",
                        },
                    },
                },
            };
            ArmOperation<IotOperationsDataflowEndpointResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, dataflowEndpointName, data);
            IotOperationsDataflowEndpointResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            IotOperationsDataflowEndpointData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_DataflowEndpointGet()
        {
            // Generated from example definition: 2024-11-01/DataflowEndpoint_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "DataflowEndpointResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsInstanceResource created on azure
            // for more information of creating IotOperationsInstanceResource, please refer to the document of IotOperationsInstanceResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            ResourceIdentifier iotOperationsInstanceResourceId = IotOperationsInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName);
            IotOperationsInstanceResource iotOperationsInstance = client.GetIotOperationsInstanceResource(iotOperationsInstanceResourceId);

            // get the collection of this IotOperationsDataflowEndpointResource
            IotOperationsDataflowEndpointCollection collection = iotOperationsInstance.GetIotOperationsDataflowEndpoints();

            // invoke the operation
            string dataflowEndpointName = "resource-name123";
            IotOperationsDataflowEndpointResource result = await collection.GetAsync(dataflowEndpointName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            IotOperationsDataflowEndpointData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_DataflowEndpointListByResourceGroup()
        {
            // Generated from example definition: 2024-11-01/DataflowEndpoint_ListByResourceGroup_MaximumSet_Gen.json
            // this example is just showing the usage of "DataflowEndpointResource_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsInstanceResource created on azure
            // for more information of creating IotOperationsInstanceResource, please refer to the document of IotOperationsInstanceResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            ResourceIdentifier iotOperationsInstanceResourceId = IotOperationsInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName);
            IotOperationsInstanceResource iotOperationsInstance = client.GetIotOperationsInstanceResource(iotOperationsInstanceResourceId);

            // get the collection of this IotOperationsDataflowEndpointResource
            IotOperationsDataflowEndpointCollection collection = iotOperationsInstance.GetIotOperationsDataflowEndpoints();

            // invoke the operation and iterate over the result
            await foreach (IotOperationsDataflowEndpointResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                IotOperationsDataflowEndpointData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_DataflowEndpointGet()
        {
            // Generated from example definition: 2024-11-01/DataflowEndpoint_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "DataflowEndpointResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsInstanceResource created on azure
            // for more information of creating IotOperationsInstanceResource, please refer to the document of IotOperationsInstanceResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            ResourceIdentifier iotOperationsInstanceResourceId = IotOperationsInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName);
            IotOperationsInstanceResource iotOperationsInstance = client.GetIotOperationsInstanceResource(iotOperationsInstanceResourceId);

            // get the collection of this IotOperationsDataflowEndpointResource
            IotOperationsDataflowEndpointCollection collection = iotOperationsInstance.GetIotOperationsDataflowEndpoints();

            // invoke the operation
            string dataflowEndpointName = "resource-name123";
            bool result = await collection.ExistsAsync(dataflowEndpointName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_DataflowEndpointGet()
        {
            // Generated from example definition: 2024-11-01/DataflowEndpoint_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "DataflowEndpointResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsInstanceResource created on azure
            // for more information of creating IotOperationsInstanceResource, please refer to the document of IotOperationsInstanceResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            ResourceIdentifier iotOperationsInstanceResourceId = IotOperationsInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName);
            IotOperationsInstanceResource iotOperationsInstance = client.GetIotOperationsInstanceResource(iotOperationsInstanceResourceId);

            // get the collection of this IotOperationsDataflowEndpointResource
            IotOperationsDataflowEndpointCollection collection = iotOperationsInstance.GetIotOperationsDataflowEndpoints();

            // invoke the operation
            string dataflowEndpointName = "resource-name123";
            NullableResponse<IotOperationsDataflowEndpointResource> response = await collection.GetIfExistsAsync(dataflowEndpointName);
            IotOperationsDataflowEndpointResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                IotOperationsDataflowEndpointData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
