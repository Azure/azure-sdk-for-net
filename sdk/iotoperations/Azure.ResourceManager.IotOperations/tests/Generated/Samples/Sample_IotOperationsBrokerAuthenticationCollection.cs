// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.IotOperations.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.IotOperations.Samples
{
    public partial class Sample_IotOperationsBrokerAuthenticationCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_BrokerAuthenticationCreateOrUpdateComplex()
        {
            // Generated from example definition: 2024-11-01/BrokerAuthentication_CreateOrUpdate_Complex.json
            // this example is just showing the usage of "BrokerAuthenticationResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsBrokerResource created on azure
            // for more information of creating IotOperationsBrokerResource, please refer to the document of IotOperationsBrokerResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            string brokerName = "resource-name123";
            ResourceIdentifier iotOperationsBrokerResourceId = IotOperationsBrokerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName, brokerName);
            IotOperationsBrokerResource iotOperationsBroker = client.GetIotOperationsBrokerResource(iotOperationsBrokerResourceId);

            // get the collection of this IotOperationsBrokerAuthenticationResource
            IotOperationsBrokerAuthenticationCollection collection = iotOperationsBroker.GetIotOperationsBrokerAuthentications();

            // invoke the operation
            string authenticationName = "resource-name123";
            IotOperationsBrokerAuthenticationData data = new IotOperationsBrokerAuthenticationData(new IotOperationsExtendedLocation("qmbrfwcpwwhggszhrdjv", IotOperationsExtendedLocationType.CustomLocation))
            {
                Properties = new IotOperationsBrokerAuthenticationProperties(new BrokerAuthenticatorMethods[]
            {
new BrokerAuthenticatorMethods(BrokerAuthenticationMethod.ServiceAccountToken)
{
ServiceAccountTokenAudiences = {"aio-internal"},
},
new BrokerAuthenticatorMethods(BrokerAuthenticationMethod.X509)
{
X509Settings = new BrokerAuthenticatorMethodX509
{
AuthorizationAttributes =
{
["root"] = new BrokerAuthenticatorMethodX509Attributes(new Dictionary<string, string>
{
["organization"] = "contoso"
}, "CN = Contoso Root CA Cert, OU = Engineering, C = US"),
["intermediate"] = new BrokerAuthenticatorMethodX509Attributes(new Dictionary<string, string>
{
["city"] = "seattle",
["foo"] = "bar"
}, "CN = Contoso Intermediate CA"),
["smart-fan"] = new BrokerAuthenticatorMethodX509Attributes(new Dictionary<string, string>
{
["building"] = "17"
}, "CN = smart-fan")
},
TrustedClientCaCert = "my-ca",
},
}
            }),
            };
            ArmOperation<IotOperationsBrokerAuthenticationResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, authenticationName, data);
            IotOperationsBrokerAuthenticationResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            IotOperationsBrokerAuthenticationData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_BrokerAuthenticationCreateOrUpdate()
        {
            // Generated from example definition: 2024-11-01/BrokerAuthentication_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "BrokerAuthenticationResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsBrokerResource created on azure
            // for more information of creating IotOperationsBrokerResource, please refer to the document of IotOperationsBrokerResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            string brokerName = "resource-name123";
            ResourceIdentifier iotOperationsBrokerResourceId = IotOperationsBrokerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName, brokerName);
            IotOperationsBrokerResource iotOperationsBroker = client.GetIotOperationsBrokerResource(iotOperationsBrokerResourceId);

            // get the collection of this IotOperationsBrokerAuthenticationResource
            IotOperationsBrokerAuthenticationCollection collection = iotOperationsBroker.GetIotOperationsBrokerAuthentications();

            // invoke the operation
            string authenticationName = "resource-name123";
            IotOperationsBrokerAuthenticationData data = new IotOperationsBrokerAuthenticationData(new IotOperationsExtendedLocation("qmbrfwcpwwhggszhrdjv", IotOperationsExtendedLocationType.CustomLocation))
            {
                Properties = new IotOperationsBrokerAuthenticationProperties(new BrokerAuthenticatorMethods[]
            {
new BrokerAuthenticatorMethods(BrokerAuthenticationMethod.Custom)
{
CustomSettings = new BrokerAuthenticatorMethodCustom(new Uri("https://www.example.com"))
{
X509SecretRef = "secret-name",
CaCertConfigMap = "pdecudefqyolvncbus",
Headers =
{
["key8518"] = "bwityjy"
},
},
ServiceAccountTokenAudiences = {"jqyhyqatuydg"},
X509Settings = new BrokerAuthenticatorMethodX509
{
AuthorizationAttributes =
{
["key3384"] = new BrokerAuthenticatorMethodX509Attributes(new Dictionary<string, string>
{
["key186"] = "ucpajramsz"
}, "jpgwctfeixitptfgfnqhua")
},
TrustedClientCaCert = "vlctsqddl",
},
}
            }),
            };
            ArmOperation<IotOperationsBrokerAuthenticationResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, authenticationName, data);
            IotOperationsBrokerAuthenticationResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            IotOperationsBrokerAuthenticationData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_BrokerAuthenticationGet()
        {
            // Generated from example definition: 2024-11-01/BrokerAuthentication_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "BrokerAuthenticationResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsBrokerResource created on azure
            // for more information of creating IotOperationsBrokerResource, please refer to the document of IotOperationsBrokerResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            string brokerName = "resource-name123";
            ResourceIdentifier iotOperationsBrokerResourceId = IotOperationsBrokerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName, brokerName);
            IotOperationsBrokerResource iotOperationsBroker = client.GetIotOperationsBrokerResource(iotOperationsBrokerResourceId);

            // get the collection of this IotOperationsBrokerAuthenticationResource
            IotOperationsBrokerAuthenticationCollection collection = iotOperationsBroker.GetIotOperationsBrokerAuthentications();

            // invoke the operation
            string authenticationName = "resource-name123";
            IotOperationsBrokerAuthenticationResource result = await collection.GetAsync(authenticationName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            IotOperationsBrokerAuthenticationData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_BrokerAuthenticationListByResourceGroup()
        {
            // Generated from example definition: 2024-11-01/BrokerAuthentication_ListByResourceGroup_MaximumSet_Gen.json
            // this example is just showing the usage of "BrokerAuthenticationResource_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsBrokerResource created on azure
            // for more information of creating IotOperationsBrokerResource, please refer to the document of IotOperationsBrokerResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            string brokerName = "resource-name123";
            ResourceIdentifier iotOperationsBrokerResourceId = IotOperationsBrokerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName, brokerName);
            IotOperationsBrokerResource iotOperationsBroker = client.GetIotOperationsBrokerResource(iotOperationsBrokerResourceId);

            // get the collection of this IotOperationsBrokerAuthenticationResource
            IotOperationsBrokerAuthenticationCollection collection = iotOperationsBroker.GetIotOperationsBrokerAuthentications();

            // invoke the operation and iterate over the result
            await foreach (IotOperationsBrokerAuthenticationResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                IotOperationsBrokerAuthenticationData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_BrokerAuthenticationGet()
        {
            // Generated from example definition: 2024-11-01/BrokerAuthentication_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "BrokerAuthenticationResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsBrokerResource created on azure
            // for more information of creating IotOperationsBrokerResource, please refer to the document of IotOperationsBrokerResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            string brokerName = "resource-name123";
            ResourceIdentifier iotOperationsBrokerResourceId = IotOperationsBrokerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName, brokerName);
            IotOperationsBrokerResource iotOperationsBroker = client.GetIotOperationsBrokerResource(iotOperationsBrokerResourceId);

            // get the collection of this IotOperationsBrokerAuthenticationResource
            IotOperationsBrokerAuthenticationCollection collection = iotOperationsBroker.GetIotOperationsBrokerAuthentications();

            // invoke the operation
            string authenticationName = "resource-name123";
            bool result = await collection.ExistsAsync(authenticationName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_BrokerAuthenticationGet()
        {
            // Generated from example definition: 2024-11-01/BrokerAuthentication_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "BrokerAuthenticationResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsBrokerResource created on azure
            // for more information of creating IotOperationsBrokerResource, please refer to the document of IotOperationsBrokerResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            string brokerName = "resource-name123";
            ResourceIdentifier iotOperationsBrokerResourceId = IotOperationsBrokerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName, brokerName);
            IotOperationsBrokerResource iotOperationsBroker = client.GetIotOperationsBrokerResource(iotOperationsBrokerResourceId);

            // get the collection of this IotOperationsBrokerAuthenticationResource
            IotOperationsBrokerAuthenticationCollection collection = iotOperationsBroker.GetIotOperationsBrokerAuthentications();

            // invoke the operation
            string authenticationName = "resource-name123";
            NullableResponse<IotOperationsBrokerAuthenticationResource> response = await collection.GetIfExistsAsync(authenticationName);
            IotOperationsBrokerAuthenticationResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                IotOperationsBrokerAuthenticationData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
