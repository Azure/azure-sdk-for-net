// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.IotOperations.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.IotOperations.Samples
{
    public partial class Sample_IotOperationsDataflowGraphResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_DataflowGraphGetMaximumSet()
        {
            // Generated from example definition: 2025-07-01-preview/DataflowGraph_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "DataflowGraphResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsDataflowGraphResource created on azure
            // for more information of creating IotOperationsDataflowGraphResource, please refer to the document of IotOperationsDataflowGraphResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-123";
            string dataflowProfileName = "resource-123";
            string dataflowGraphName = "resource-123";
            ResourceIdentifier iotOperationsDataflowGraphResourceId = IotOperationsDataflowGraphResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName, dataflowProfileName, dataflowGraphName);
            IotOperationsDataflowGraphResource iotOperationsDataflowGraph = client.GetIotOperationsDataflowGraphResource(iotOperationsDataflowGraphResourceId);

            // invoke the operation
            IotOperationsDataflowGraphResource result = await iotOperationsDataflowGraph.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            IotOperationsDataflowGraphData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_DataflowGraphDeleteMaximumSet()
        {
            // Generated from example definition: 2025-07-01-preview/DataflowGraph_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "DataflowGraphResource_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsDataflowGraphResource created on azure
            // for more information of creating IotOperationsDataflowGraphResource, please refer to the document of IotOperationsDataflowGraphResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-123";
            string dataflowProfileName = "resource-123";
            string dataflowGraphName = "resource-123";
            ResourceIdentifier iotOperationsDataflowGraphResourceId = IotOperationsDataflowGraphResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName, dataflowProfileName, dataflowGraphName);
            IotOperationsDataflowGraphResource iotOperationsDataflowGraph = client.GetIotOperationsDataflowGraphResource(iotOperationsDataflowGraphResourceId);

            // invoke the operation
            await iotOperationsDataflowGraph.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_DataflowGraphCreateOrUpdateMaximumSet()
        {
            // Generated from example definition: 2025-07-01-preview/DataflowGraph_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "DataflowGraphResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsDataflowGraphResource created on azure
            // for more information of creating IotOperationsDataflowGraphResource, please refer to the document of IotOperationsDataflowGraphResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-123";
            string dataflowProfileName = "resource-123";
            string dataflowGraphName = "resource-123";
            ResourceIdentifier iotOperationsDataflowGraphResourceId = IotOperationsDataflowGraphResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName, dataflowProfileName, dataflowGraphName);
            IotOperationsDataflowGraphResource iotOperationsDataflowGraph = client.GetIotOperationsDataflowGraphResource(iotOperationsDataflowGraphResourceId);

            // invoke the operation
            IotOperationsDataflowGraphData data = new IotOperationsDataflowGraphData
            {
                Properties = new IotOperationsDataflowGraphProperties(new DataflowGraphNode[]
            {
new DataflowGraphSourceNode("temperature", new DataflowGraphSourceSettings("default", new string[]{"telemetry/temperature"})),
new DataflowGraphGraphNode("my-graph", new DataflowGraphNodeGraphSettings("my-registry-endpoint", "my-wasm-module:1.4.3")
{
Configuration = {new DataflowGraphGraphNodeConfiguration("key1", "value1"), new DataflowGraphGraphNodeConfiguration("key2", "value2")},
}),
new DataflowGraphDestinationNode("alert", new DataflowGraphDestinationNodeSettings("default", "telemetry/temperature/alert")),
new DataflowGraphDestinationNode("fabric", new DataflowGraphDestinationNodeSettings("fabric", "my-table")
{
OutputSchemaSettings = new DataflowGraphDestinationSchemaSettings(DataflowGraphDestinationSchemaSerializationFormat.Parquet)
{
SchemaRef = "aio-sr://namespace/alert-parquet:1",
},
})
            }, new DataflowGraphNodeConnection[]
            {
new DataflowGraphNodeConnection(new DataflowGraphConnectionInput("temperature")
{
Schema = new DataflowGraphConnectionSchemaSettings
{
SerializationFormat = DataflowGraphConnectionSchemaSerializationFormat.Avro,
SchemaRef = "aio-sr://namespace/temperature:1",
},
}, new DataflowGraphConnectionOutput("my-graph")),
new DataflowGraphNodeConnection(new DataflowGraphConnectionInput("my-graph.alert-output")
{
Schema = new DataflowGraphConnectionSchemaSettings
{
SerializationFormat = DataflowGraphConnectionSchemaSerializationFormat.Avro,
SchemaRef = "aio-sr://namespace/alert:1",
},
}, new DataflowGraphConnectionOutput("fabric")),
new DataflowGraphNodeConnection(new DataflowGraphConnectionInput("my-graph.normal-output")
{
Schema = new DataflowGraphConnectionSchemaSettings
{
SerializationFormat = DataflowGraphConnectionSchemaSerializationFormat.Avro,
SchemaRef = "aio-sr://namespace/alert:1",
},
}, new DataflowGraphConnectionOutput("fabric"))
            })
                {
                    Mode = IotOperationsOperationalMode.Enabled,
                    RequestDiskPersistence = IotOperationsOperationalMode.Enabled,
                },
                ExtendedLocation = new IotOperationsExtendedLocation("/subscriptions/F8C729F9-DF9C-4743-848F-96EE433D8E53/resourceGroups/rgiotoperations/providers/Microsoft.ExtendedLocation/customLocations/resource-123", IotOperationsExtendedLocationType.CustomLocation),
            };
            ArmOperation<IotOperationsDataflowGraphResource> lro = await iotOperationsDataflowGraph.UpdateAsync(WaitUntil.Completed, data);
            IotOperationsDataflowGraphResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            IotOperationsDataflowGraphData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
