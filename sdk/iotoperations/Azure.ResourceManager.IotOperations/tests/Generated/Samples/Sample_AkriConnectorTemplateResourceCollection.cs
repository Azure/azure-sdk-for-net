// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.IotOperations.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.IotOperations.Samples
{
    public partial class Sample_AkriConnectorTemplateResourceCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_AkriConnectorTemplateCreateOrUpdateMaximumSet()
        {
            // Generated from example definition: 2025-07-01-preview/AkriConnectorTemplate_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "AkriConnectorTemplateResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsInstanceResource created on azure
            // for more information of creating IotOperationsInstanceResource, please refer to the document of IotOperationsInstanceResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            ResourceIdentifier iotOperationsInstanceResourceId = IotOperationsInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName);
            IotOperationsInstanceResource iotOperationsInstance = client.GetIotOperationsInstanceResource(iotOperationsInstanceResourceId);

            // get the collection of this AkriConnectorTemplateResource
            AkriConnectorTemplateResourceCollection collection = iotOperationsInstance.GetAkriConnectorTemplateResources();

            // invoke the operation
            string akriConnectorTemplateName = "resource-name123";
            AkriConnectorTemplateResourceData data = new AkriConnectorTemplateResourceData
            {
                Properties = new AkriConnectorTemplateProperties(new AkriConnectorTemplateHelmConfiguration(new AkriConnectorTemplateHelmConfigurationSettings("my-install", "my-repo", "1.0.0")), new AkriConnectorTemplateDeviceInboundEndpointType[]
            {
new AkriConnectorTemplateDeviceInboundEndpointType("Microsoft.Rest")
{
Version = "0.0.1",
}
            })
                {
                    AioMetadata = new AkriConnectorTemplateAioMetadata
                    {
                        AioMinVersion = "1.2.0",
                        AioMaxVersion = "1.4.0",
                    },
                    MqttConnectionConfiguration = new AkriConnectorsMqttConnectionConfiguration
                    {
                        Authentication = new AkriConnectorsServiceAccountAuthentication(new AkriConnectorsServiceAccountTokenSettings("MQ-SAT")),
                        Host = "aio-broker:18883",
                        Protocol = AkriConnectorsMqttProtocolType.Mqtt,
                        KeepAliveSeconds = 10,
                        MaxInflightMessages = 10,
                        SessionExpirySeconds = 60,
                        Tls = new IotOperationsTlsProperties
                        {
                            Mode = IotOperationsOperationalMode.Enabled,
                            TrustedCaCertificateConfigMapRef = "azure-iot-operations-aio-ca-trust-bundle",
                        },
                    },
                },
                ExtendedLocation = new IotOperationsExtendedLocation("/subscriptions/F8C729F9-DF9C-4743-848F-96EE433D8E53/resourceGroups/rgiotoperations/providers/Microsoft.ExtendedLocation/customLocations/resource-123", IotOperationsExtendedLocationType.CustomLocation),
            };
            ArmOperation<AkriConnectorTemplateResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, akriConnectorTemplateName, data);
            AkriConnectorTemplateResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AkriConnectorTemplateResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_AkriConnectorTemplateGetManagedRest()
        {
            // Generated from example definition: 2025-07-01-preview/AkriConnectorTemplate_Get_Managed_Rest.json
            // this example is just showing the usage of "AkriConnectorTemplateResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsInstanceResource created on azure
            // for more information of creating IotOperationsInstanceResource, please refer to the document of IotOperationsInstanceResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            ResourceIdentifier iotOperationsInstanceResourceId = IotOperationsInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName);
            IotOperationsInstanceResource iotOperationsInstance = client.GetIotOperationsInstanceResource(iotOperationsInstanceResourceId);

            // get the collection of this AkriConnectorTemplateResource
            AkriConnectorTemplateResourceCollection collection = iotOperationsInstance.GetAkriConnectorTemplateResources();

            // invoke the operation
            string akriConnectorTemplateName = "resource-name123";
            AkriConnectorTemplateResource result = await collection.GetAsync(akriConnectorTemplateName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AkriConnectorTemplateResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_AkriConnectorTemplateGetMaximumSet()
        {
            // Generated from example definition: 2025-07-01-preview/AkriConnectorTemplate_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "AkriConnectorTemplateResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsInstanceResource created on azure
            // for more information of creating IotOperationsInstanceResource, please refer to the document of IotOperationsInstanceResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            ResourceIdentifier iotOperationsInstanceResourceId = IotOperationsInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName);
            IotOperationsInstanceResource iotOperationsInstance = client.GetIotOperationsInstanceResource(iotOperationsInstanceResourceId);

            // get the collection of this AkriConnectorTemplateResource
            AkriConnectorTemplateResourceCollection collection = iotOperationsInstance.GetAkriConnectorTemplateResources();

            // invoke the operation
            string akriConnectorTemplateName = "resource-name123";
            AkriConnectorTemplateResource result = await collection.GetAsync(akriConnectorTemplateName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AkriConnectorTemplateResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_AkriConnectorTemplateListByInstanceResourceMaximumSet()
        {
            // Generated from example definition: 2025-07-01-preview/AkriConnectorTemplate_ListByInstanceResource_MaximumSet_Gen.json
            // this example is just showing the usage of "AkriConnectorTemplateResource_ListByInstanceResource" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsInstanceResource created on azure
            // for more information of creating IotOperationsInstanceResource, please refer to the document of IotOperationsInstanceResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            ResourceIdentifier iotOperationsInstanceResourceId = IotOperationsInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName);
            IotOperationsInstanceResource iotOperationsInstance = client.GetIotOperationsInstanceResource(iotOperationsInstanceResourceId);

            // get the collection of this AkriConnectorTemplateResource
            AkriConnectorTemplateResourceCollection collection = iotOperationsInstance.GetAkriConnectorTemplateResources();

            // invoke the operation and iterate over the result
            await foreach (AkriConnectorTemplateResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                AkriConnectorTemplateResourceData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_AkriConnectorTemplateGetManagedRest()
        {
            // Generated from example definition: 2025-07-01-preview/AkriConnectorTemplate_Get_Managed_Rest.json
            // this example is just showing the usage of "AkriConnectorTemplateResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsInstanceResource created on azure
            // for more information of creating IotOperationsInstanceResource, please refer to the document of IotOperationsInstanceResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            ResourceIdentifier iotOperationsInstanceResourceId = IotOperationsInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName);
            IotOperationsInstanceResource iotOperationsInstance = client.GetIotOperationsInstanceResource(iotOperationsInstanceResourceId);

            // get the collection of this AkriConnectorTemplateResource
            AkriConnectorTemplateResourceCollection collection = iotOperationsInstance.GetAkriConnectorTemplateResources();

            // invoke the operation
            string akriConnectorTemplateName = "resource-name123";
            bool result = await collection.ExistsAsync(akriConnectorTemplateName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_AkriConnectorTemplateGetMaximumSet()
        {
            // Generated from example definition: 2025-07-01-preview/AkriConnectorTemplate_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "AkriConnectorTemplateResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsInstanceResource created on azure
            // for more information of creating IotOperationsInstanceResource, please refer to the document of IotOperationsInstanceResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            ResourceIdentifier iotOperationsInstanceResourceId = IotOperationsInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName);
            IotOperationsInstanceResource iotOperationsInstance = client.GetIotOperationsInstanceResource(iotOperationsInstanceResourceId);

            // get the collection of this AkriConnectorTemplateResource
            AkriConnectorTemplateResourceCollection collection = iotOperationsInstance.GetAkriConnectorTemplateResources();

            // invoke the operation
            string akriConnectorTemplateName = "resource-name123";
            bool result = await collection.ExistsAsync(akriConnectorTemplateName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_AkriConnectorTemplateGetManagedRest()
        {
            // Generated from example definition: 2025-07-01-preview/AkriConnectorTemplate_Get_Managed_Rest.json
            // this example is just showing the usage of "AkriConnectorTemplateResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsInstanceResource created on azure
            // for more information of creating IotOperationsInstanceResource, please refer to the document of IotOperationsInstanceResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            ResourceIdentifier iotOperationsInstanceResourceId = IotOperationsInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName);
            IotOperationsInstanceResource iotOperationsInstance = client.GetIotOperationsInstanceResource(iotOperationsInstanceResourceId);

            // get the collection of this AkriConnectorTemplateResource
            AkriConnectorTemplateResourceCollection collection = iotOperationsInstance.GetAkriConnectorTemplateResources();

            // invoke the operation
            string akriConnectorTemplateName = "resource-name123";
            NullableResponse<AkriConnectorTemplateResource> response = await collection.GetIfExistsAsync(akriConnectorTemplateName);
            AkriConnectorTemplateResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                AkriConnectorTemplateResourceData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_AkriConnectorTemplateGetMaximumSet()
        {
            // Generated from example definition: 2025-07-01-preview/AkriConnectorTemplate_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "AkriConnectorTemplateResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this IotOperationsInstanceResource created on azure
            // for more information of creating IotOperationsInstanceResource, please refer to the document of IotOperationsInstanceResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            ResourceIdentifier iotOperationsInstanceResourceId = IotOperationsInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName);
            IotOperationsInstanceResource iotOperationsInstance = client.GetIotOperationsInstanceResource(iotOperationsInstanceResourceId);

            // get the collection of this AkriConnectorTemplateResource
            AkriConnectorTemplateResourceCollection collection = iotOperationsInstance.GetAkriConnectorTemplateResources();

            // invoke the operation
            string akriConnectorTemplateName = "resource-name123";
            NullableResponse<AkriConnectorTemplateResource> response = await collection.GetIfExistsAsync(akriConnectorTemplateName);
            AkriConnectorTemplateResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                AkriConnectorTemplateResourceData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
