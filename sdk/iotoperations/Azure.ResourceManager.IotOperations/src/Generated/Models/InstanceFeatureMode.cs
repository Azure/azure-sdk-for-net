// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.IotOperations.Models
{
    /// <summary> The enum defining mode of a feature. </summary>
    public readonly partial struct InstanceFeatureMode : IEquatable<InstanceFeatureMode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="InstanceFeatureMode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public InstanceFeatureMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string StableValue = "Stable";
        private const string PreviewValue = "Preview";
        private const string DisabledValue = "Disabled";

        /// <summary> Opt in to enable a stable feature. </summary>
        public static InstanceFeatureMode Stable { get; } = new InstanceFeatureMode(StableValue);
        /// <summary> Opt in to enable a preview feature. </summary>
        public static InstanceFeatureMode Preview { get; } = new InstanceFeatureMode(PreviewValue);
        /// <summary> Opt out of a feature. </summary>
        public static InstanceFeatureMode Disabled { get; } = new InstanceFeatureMode(DisabledValue);
        /// <summary> Determines if two <see cref="InstanceFeatureMode"/> values are the same. </summary>
        public static bool operator ==(InstanceFeatureMode left, InstanceFeatureMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="InstanceFeatureMode"/> values are not the same. </summary>
        public static bool operator !=(InstanceFeatureMode left, InstanceFeatureMode right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="InstanceFeatureMode"/>. </summary>
        public static implicit operator InstanceFeatureMode(string value) => new InstanceFeatureMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InstanceFeatureMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(InstanceFeatureMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
