// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.IotOperations.Models
{
    /// <summary> AkriConnectorsDigest properties. </summary>
    public partial class AkriConnectorsDigest : AkriConnectorsTagDigestSettings
    {
        /// <summary> Initializes a new instance of <see cref="AkriConnectorsDigest"/>. </summary>
        /// <param name="digest"> The digest of the image. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="digest"/> is null. </exception>
        public AkriConnectorsDigest(string digest)
        {
            Argument.AssertNotNull(digest, nameof(digest));

            Digest = digest;
            TagDigestType = AkriConnectorsTagDigestType.Digest;
        }

        /// <summary> Initializes a new instance of <see cref="AkriConnectorsDigest"/>. </summary>
        /// <param name="tagDigestType"> The tag or digest type. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="digest"> The digest of the image. </param>
        internal AkriConnectorsDigest(AkriConnectorsTagDigestType tagDigestType, IDictionary<string, BinaryData> serializedAdditionalRawData, string digest) : base(tagDigestType, serializedAdditionalRawData)
        {
            Digest = digest;
            TagDigestType = tagDigestType;
        }

        /// <summary> Initializes a new instance of <see cref="AkriConnectorsDigest"/> for deserialization. </summary>
        internal AkriConnectorsDigest()
        {
        }

        /// <summary> The digest of the image. </summary>
        public string Digest { get; set; }
    }
}
