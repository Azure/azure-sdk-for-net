// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.IotOperations.Models
{
    /// <summary> AkriConnectorTemplate properties. </summary>
    public partial class AkriConnectorTemplateProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AkriConnectorTemplateProperties"/>. </summary>
        /// <param name="runtimeConfiguration">
        /// The runtime configuration for the Connector template.
        /// Please note <see cref="AkriConnectorTemplateRuntimeConfiguration"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AkriConnectorTemplateHelmConfiguration"/> and <see cref="AkriConnectorTemplateManagedConfiguration"/>.
        /// </param>
        /// <param name="deviceInboundEndpointTypes"> Device inbound endpoint types. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="runtimeConfiguration"/> or <paramref name="deviceInboundEndpointTypes"/> is null. </exception>
        public AkriConnectorTemplateProperties(AkriConnectorTemplateRuntimeConfiguration runtimeConfiguration, IEnumerable<AkriConnectorTemplateDeviceInboundEndpointType> deviceInboundEndpointTypes)
        {
            Argument.AssertNotNull(runtimeConfiguration, nameof(runtimeConfiguration));
            Argument.AssertNotNull(deviceInboundEndpointTypes, nameof(deviceInboundEndpointTypes));

            RuntimeConfiguration = runtimeConfiguration;
            DeviceInboundEndpointTypes = deviceInboundEndpointTypes.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="AkriConnectorTemplateProperties"/>. </summary>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="aioMetadata"> Metadata about AIO. </param>
        /// <param name="runtimeConfiguration">
        /// The runtime configuration for the Connector template.
        /// Please note <see cref="AkriConnectorTemplateRuntimeConfiguration"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AkriConnectorTemplateHelmConfiguration"/> and <see cref="AkriConnectorTemplateManagedConfiguration"/>.
        /// </param>
        /// <param name="diagnostics"> Diagnostics settings for the Connector template. </param>
        /// <param name="deviceInboundEndpointTypes"> Device inbound endpoint types. </param>
        /// <param name="mqttConnectionConfiguration"> Mqtt connection configuration settings. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AkriConnectorTemplateProperties(IotOperationsProvisioningState? provisioningState, AkriConnectorTemplateAioMetadata aioMetadata, AkriConnectorTemplateRuntimeConfiguration runtimeConfiguration, AkriConnectorTemplateDiagnostics diagnostics, IList<AkriConnectorTemplateDeviceInboundEndpointType> deviceInboundEndpointTypes, AkriConnectorsMqttConnectionConfiguration mqttConnectionConfiguration, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ProvisioningState = provisioningState;
            AioMetadata = aioMetadata;
            RuntimeConfiguration = runtimeConfiguration;
            Diagnostics = diagnostics;
            DeviceInboundEndpointTypes = deviceInboundEndpointTypes;
            MqttConnectionConfiguration = mqttConnectionConfiguration;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="AkriConnectorTemplateProperties"/> for deserialization. </summary>
        internal AkriConnectorTemplateProperties()
        {
        }

        /// <summary> The status of the last operation. </summary>
        public IotOperationsProvisioningState? ProvisioningState { get; }
        /// <summary> Metadata about AIO. </summary>
        public AkriConnectorTemplateAioMetadata AioMetadata { get; set; }
        /// <summary>
        /// The runtime configuration for the Connector template.
        /// Please note <see cref="AkriConnectorTemplateRuntimeConfiguration"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AkriConnectorTemplateHelmConfiguration"/> and <see cref="AkriConnectorTemplateManagedConfiguration"/>.
        /// </summary>
        public AkriConnectorTemplateRuntimeConfiguration RuntimeConfiguration { get; set; }
        /// <summary> Diagnostics settings for the Connector template. </summary>
        internal AkriConnectorTemplateDiagnostics Diagnostics { get; set; }
        /// <summary> The log level. Examples - 'debug', 'info', 'warn', 'error', 'trace'. </summary>
        public string LogsLevel
        {
            get => Diagnostics is null ? default : Diagnostics.LogsLevel;
            set => Diagnostics = new AkriConnectorTemplateDiagnostics(value);
        }

        /// <summary> Device inbound endpoint types. </summary>
        public IList<AkriConnectorTemplateDeviceInboundEndpointType> DeviceInboundEndpointTypes { get; }
        /// <summary> Mqtt connection configuration settings. </summary>
        public AkriConnectorsMqttConnectionConfiguration MqttConnectionConfiguration { get; set; }
    }
}
