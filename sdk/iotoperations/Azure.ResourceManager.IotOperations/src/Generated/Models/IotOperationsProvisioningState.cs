// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.IotOperations.Models
{
    /// <summary> The enum defining status of resource. </summary>
    public readonly partial struct IotOperationsProvisioningState : IEquatable<IotOperationsProvisioningState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="IotOperationsProvisioningState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public IotOperationsProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";
        private const string CanceledValue = "Canceled";
        private const string ProvisioningValue = "Provisioning";
        private const string UpdatingValue = "Updating";
        private const string DeletingValue = "Deleting";
        private const string AcceptedValue = "Accepted";

        /// <summary> Resource has been created. </summary>
        public static IotOperationsProvisioningState Succeeded { get; } = new IotOperationsProvisioningState(SucceededValue);
        /// <summary> Resource creation failed. </summary>
        public static IotOperationsProvisioningState Failed { get; } = new IotOperationsProvisioningState(FailedValue);
        /// <summary> Resource creation was canceled. </summary>
        public static IotOperationsProvisioningState Canceled { get; } = new IotOperationsProvisioningState(CanceledValue);
        /// <summary> Resource is getting provisioned. </summary>
        public static IotOperationsProvisioningState Provisioning { get; } = new IotOperationsProvisioningState(ProvisioningValue);
        /// <summary> Resource is Updating. </summary>
        public static IotOperationsProvisioningState Updating { get; } = new IotOperationsProvisioningState(UpdatingValue);
        /// <summary> Resource is Deleting. </summary>
        public static IotOperationsProvisioningState Deleting { get; } = new IotOperationsProvisioningState(DeletingValue);
        /// <summary> Resource has been Accepted. </summary>
        public static IotOperationsProvisioningState Accepted { get; } = new IotOperationsProvisioningState(AcceptedValue);
        /// <summary> Determines if two <see cref="IotOperationsProvisioningState"/> values are the same. </summary>
        public static bool operator ==(IotOperationsProvisioningState left, IotOperationsProvisioningState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="IotOperationsProvisioningState"/> values are not the same. </summary>
        public static bool operator !=(IotOperationsProvisioningState left, IotOperationsProvisioningState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="IotOperationsProvisioningState"/>. </summary>
        public static implicit operator IotOperationsProvisioningState(string value) => new IotOperationsProvisioningState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is IotOperationsProvisioningState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(IotOperationsProvisioningState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
