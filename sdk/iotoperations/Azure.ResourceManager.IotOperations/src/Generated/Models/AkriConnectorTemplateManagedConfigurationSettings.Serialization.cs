// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.IotOperations.Models
{
    [PersistableModelProxy(typeof(UnknownAkriConnectorTemplateManagedConfigurationSettings))]
    public partial class AkriConnectorTemplateManagedConfigurationSettings : IUtf8JsonSerializable, IJsonModel<AkriConnectorTemplateManagedConfigurationSettings>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<AkriConnectorTemplateManagedConfigurationSettings>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<AkriConnectorTemplateManagedConfigurationSettings>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AkriConnectorTemplateManagedConfigurationSettings>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AkriConnectorTemplateManagedConfigurationSettings)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("managedConfigurationType"u8);
            writer.WriteStringValue(ManagedConfigurationType.ToString());
            if (Optional.IsDefined(Allocation))
            {
                writer.WritePropertyName("allocation"u8);
                writer.WriteObjectValue(Allocation, options);
            }
            if (Optional.IsCollectionDefined(PersistentVolumeClaims))
            {
                writer.WritePropertyName("persistentVolumeClaims"u8);
                writer.WriteStartArray();
                foreach (var item in PersistentVolumeClaims)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(AdditionalConfiguration))
            {
                writer.WritePropertyName("additionalConfiguration"u8);
                writer.WriteStartObject();
                foreach (var item in AdditionalConfiguration)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(PersistentVolumeClaimTemplates))
            {
                writer.WritePropertyName("persistentVolumeClaimTemplates"u8);
                writer.WriteStartArray();
                foreach (var item in PersistentVolumeClaimTemplates)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStartObject();
                    foreach (var item0 in item)
                    {
                        writer.WritePropertyName(item0.Key);
                        if (item0.Value == null)
                        {
                            writer.WriteNullValue();
                            continue;
                        }
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item0.Value);
#else
                        using (JsonDocument document = JsonDocument.Parse(item0.Value, ModelSerializationExtensions.JsonDocumentOptions))
                        {
                            JsonSerializer.Serialize(writer, document.RootElement);
                        }
#endif
                    }
                    writer.WriteEndObject();
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Secrets))
            {
                writer.WritePropertyName("secrets"u8);
                writer.WriteStartArray();
                foreach (var item in Secrets)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(TrustSettings))
            {
                writer.WritePropertyName("trustSettings"u8);
                writer.WriteObjectValue(TrustSettings, options);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        AkriConnectorTemplateManagedConfigurationSettings IJsonModel<AkriConnectorTemplateManagedConfigurationSettings>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AkriConnectorTemplateManagedConfigurationSettings>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AkriConnectorTemplateManagedConfigurationSettings)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAkriConnectorTemplateManagedConfigurationSettings(document.RootElement, options);
        }

        internal static AkriConnectorTemplateManagedConfigurationSettings DeserializeAkriConnectorTemplateManagedConfigurationSettings(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            if (element.TryGetProperty("managedConfigurationType", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "ImageConfiguration": return AkriConnectorTemplateRuntimeImageConfiguration.DeserializeAkriConnectorTemplateRuntimeImageConfiguration(element, options);
                    case "StatefulSetConfiguration": return AkriConnectorTemplateRuntimeStatefulSetConfiguration.DeserializeAkriConnectorTemplateRuntimeStatefulSetConfiguration(element, options);
                }
            }
            return UnknownAkriConnectorTemplateManagedConfigurationSettings.DeserializeUnknownAkriConnectorTemplateManagedConfigurationSettings(element, options);
        }

        BinaryData IPersistableModel<AkriConnectorTemplateManagedConfigurationSettings>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AkriConnectorTemplateManagedConfigurationSettings>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerIotOperationsContext.Default);
                default:
                    throw new FormatException($"The model {nameof(AkriConnectorTemplateManagedConfigurationSettings)} does not support writing '{options.Format}' format.");
            }
        }

        AkriConnectorTemplateManagedConfigurationSettings IPersistableModel<AkriConnectorTemplateManagedConfigurationSettings>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AkriConnectorTemplateManagedConfigurationSettings>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeAkriConnectorTemplateManagedConfigurationSettings(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(AkriConnectorTemplateManagedConfigurationSettings)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<AkriConnectorTemplateManagedConfigurationSettings>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
