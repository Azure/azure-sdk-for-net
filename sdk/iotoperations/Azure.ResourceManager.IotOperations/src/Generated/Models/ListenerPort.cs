// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.IoTOperations.Models
{
    /// <summary> Defines a TCP port on which a `BrokerListener` listens. </summary>
    public partial class ListenerPort
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ListenerPort"/>. </summary>
        /// <param name="port"> TCP port for accepting client connections. </param>
        public ListenerPort(int port)
        {
            Port = port;
        }

        /// <summary> Initializes a new instance of <see cref="ListenerPort"/>. </summary>
        /// <param name="authenticationRef"> Reference to client authentication settings. Omit to disable authentication. </param>
        /// <param name="authorizationRef"> Reference to client authorization settings. Omit to disable authorization. </param>
        /// <param name="nodePort"> Kubernetes node port. Only relevant when this port is associated with a `NodePort` listener. </param>
        /// <param name="port"> TCP port for accepting client connections. </param>
        /// <param name="protocol"> Protocol to use for client connections. </param>
        /// <param name="tls"> TLS server certificate settings for this port. Omit to disable TLS. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ListenerPort(string authenticationRef, string authorizationRef, int? nodePort, int port, BrokerProtocolType? protocol, TlsCertMethod tls, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            AuthenticationRef = authenticationRef;
            AuthorizationRef = authorizationRef;
            NodePort = nodePort;
            Port = port;
            Protocol = protocol;
            Tls = tls;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ListenerPort"/> for deserialization. </summary>
        internal ListenerPort()
        {
        }

        /// <summary> Reference to client authentication settings. Omit to disable authentication. </summary>
        public string AuthenticationRef { get; set; }
        /// <summary> Reference to client authorization settings. Omit to disable authorization. </summary>
        public string AuthorizationRef { get; set; }
        /// <summary> Kubernetes node port. Only relevant when this port is associated with a `NodePort` listener. </summary>
        public int? NodePort { get; set; }
        /// <summary> TCP port for accepting client connections. </summary>
        public int Port { get; set; }
        /// <summary> Protocol to use for client connections. </summary>
        public BrokerProtocolType? Protocol { get; set; }
        /// <summary> TLS server certificate settings for this port. Omit to disable TLS. </summary>
        public TlsCertMethod Tls { get; set; }
    }
}
