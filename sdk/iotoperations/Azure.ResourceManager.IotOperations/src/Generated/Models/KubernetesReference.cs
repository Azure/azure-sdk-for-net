// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.IoTOperations.Models
{
    /// <summary> Kubernetes reference. </summary>
    public partial class KubernetesReference
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="KubernetesReference"/>. </summary>
        /// <param name="kind"> Kind is the type of resource being referenced. </param>
        /// <param name="name"> Name is the name of resource being referenced. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="kind"/> or <paramref name="name"/> is null. </exception>
        public KubernetesReference(string kind, string name)
        {
            Argument.AssertNotNull(kind, nameof(kind));
            Argument.AssertNotNull(name, nameof(name));

            Kind = kind;
            Name = name;
        }

        /// <summary> Initializes a new instance of <see cref="KubernetesReference"/>. </summary>
        /// <param name="apiGroup"> APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required. </param>
        /// <param name="kind"> Kind is the type of resource being referenced. </param>
        /// <param name="name"> Name is the name of resource being referenced. </param>
        /// <param name="namespace"> Namespace is the namespace of the resource being referenced. This field is required when the resource has a namespace. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal KubernetesReference(string apiGroup, string kind, string name, string @namespace, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ApiGroup = apiGroup;
            Kind = kind;
            Name = name;
            Namespace = @namespace;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="KubernetesReference"/> for deserialization. </summary>
        internal KubernetesReference()
        {
        }

        /// <summary> APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required. </summary>
        public string ApiGroup { get; set; }
        /// <summary> Kind is the type of resource being referenced. </summary>
        public string Kind { get; set; }
        /// <summary> Name is the name of resource being referenced. </summary>
        public string Name { get; set; }
        /// <summary> Namespace is the namespace of the resource being referenced. This field is required when the resource has a namespace. </summary>
        public string Namespace { get; set; }
    }
}
