// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.IotOperations.Models
{
    /// <summary> Broker State Store Key Type properties. </summary>
    public readonly partial struct BrokerStateStoreKeyType : IEquatable<BrokerStateStoreKeyType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="BrokerStateStoreKeyType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public BrokerStateStoreKeyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PatternValue = "Pattern";
        private const string StringValue = "String";
        private const string BinaryValue = "Binary";

        /// <summary> Used for glob-style pattern matching. </summary>
        public static BrokerStateStoreKeyType Pattern { get; } = new BrokerStateStoreKeyType(PatternValue);
        /// <summary> Used to do exact match, for example, when a key contains characters that might be otherwise matched as a pattern (*, ?, [0-9]). </summary>
        public static BrokerStateStoreKeyType String { get; } = new BrokerStateStoreKeyType(StringValue);
        /// <summary> Used to match a binary key. </summary>
        public static BrokerStateStoreKeyType Binary { get; } = new BrokerStateStoreKeyType(BinaryValue);
        /// <summary> Determines if two <see cref="BrokerStateStoreKeyType"/> values are the same. </summary>
        public static bool operator ==(BrokerStateStoreKeyType left, BrokerStateStoreKeyType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="BrokerStateStoreKeyType"/> values are not the same. </summary>
        public static bool operator !=(BrokerStateStoreKeyType left, BrokerStateStoreKeyType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="BrokerStateStoreKeyType"/>. </summary>
        public static implicit operator BrokerStateStoreKeyType(string value) => new BrokerStateStoreKeyType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is BrokerStateStoreKeyType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(BrokerStateStoreKeyType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
