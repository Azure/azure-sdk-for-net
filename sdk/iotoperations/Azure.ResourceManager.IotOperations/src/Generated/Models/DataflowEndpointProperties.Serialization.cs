// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.IoTOperations.Models
{
    public partial class DataflowEndpointProperties : IUtf8JsonSerializable, IJsonModel<DataflowEndpointProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<DataflowEndpointProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<DataflowEndpointProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DataflowEndpointProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DataflowEndpointProperties)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            writer.WritePropertyName("endpointType"u8);
            writer.WriteStringValue(EndpointType.ToString());
            if (Optional.IsDefined(DataExplorerSettings))
            {
                writer.WritePropertyName("dataExplorerSettings"u8);
                writer.WriteObjectValue(DataExplorerSettings, options);
            }
            if (Optional.IsDefined(DataLakeStorageSettings))
            {
                writer.WritePropertyName("dataLakeStorageSettings"u8);
                writer.WriteObjectValue(DataLakeStorageSettings, options);
            }
            if (Optional.IsDefined(FabricOneLakeSettings))
            {
                writer.WritePropertyName("fabricOneLakeSettings"u8);
                writer.WriteObjectValue(FabricOneLakeSettings, options);
            }
            if (Optional.IsDefined(KafkaSettings))
            {
                writer.WritePropertyName("kafkaSettings"u8);
                writer.WriteObjectValue(KafkaSettings, options);
            }
            if (Optional.IsDefined(LocalStorageSettings))
            {
                writer.WritePropertyName("localStorageSettings"u8);
                writer.WriteObjectValue(LocalStorageSettings, options);
            }
            if (Optional.IsDefined(MqttSettings))
            {
                writer.WritePropertyName("mqttSettings"u8);
                writer.WriteObjectValue(MqttSettings, options);
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        DataflowEndpointProperties IJsonModel<DataflowEndpointProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DataflowEndpointProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DataflowEndpointProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeDataflowEndpointProperties(document.RootElement, options);
        }

        internal static DataflowEndpointProperties DeserializeDataflowEndpointProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            EndpointType endpointType = default;
            DataflowEndpointDataExplorer dataExplorerSettings = default;
            DataflowEndpointDataLakeStorage dataLakeStorageSettings = default;
            DataflowEndpointFabricOneLake fabricOneLakeSettings = default;
            DataflowEndpointKafka kafkaSettings = default;
            DataflowEndpointLocalStorage localStorageSettings = default;
            DataflowEndpointMqtt mqttSettings = default;
            ProvisioningState? provisioningState = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("endpointType"u8))
                {
                    endpointType = new EndpointType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("dataExplorerSettings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dataExplorerSettings = DataflowEndpointDataExplorer.DeserializeDataflowEndpointDataExplorer(property.Value, options);
                    continue;
                }
                if (property.NameEquals("dataLakeStorageSettings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dataLakeStorageSettings = DataflowEndpointDataLakeStorage.DeserializeDataflowEndpointDataLakeStorage(property.Value, options);
                    continue;
                }
                if (property.NameEquals("fabricOneLakeSettings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    fabricOneLakeSettings = DataflowEndpointFabricOneLake.DeserializeDataflowEndpointFabricOneLake(property.Value, options);
                    continue;
                }
                if (property.NameEquals("kafkaSettings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    kafkaSettings = DataflowEndpointKafka.DeserializeDataflowEndpointKafka(property.Value, options);
                    continue;
                }
                if (property.NameEquals("localStorageSettings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    localStorageSettings = DataflowEndpointLocalStorage.DeserializeDataflowEndpointLocalStorage(property.Value, options);
                    continue;
                }
                if (property.NameEquals("mqttSettings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    mqttSettings = DataflowEndpointMqtt.DeserializeDataflowEndpointMqtt(property.Value, options);
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new ProvisioningState(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new DataflowEndpointProperties(
                endpointType,
                dataExplorerSettings,
                dataLakeStorageSettings,
                fabricOneLakeSettings,
                kafkaSettings,
                localStorageSettings,
                mqttSettings,
                provisioningState,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<DataflowEndpointProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DataflowEndpointProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(DataflowEndpointProperties)} does not support writing '{options.Format}' format.");
            }
        }

        DataflowEndpointProperties IPersistableModel<DataflowEndpointProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DataflowEndpointProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeDataflowEndpointProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(DataflowEndpointProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<DataflowEndpointProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
