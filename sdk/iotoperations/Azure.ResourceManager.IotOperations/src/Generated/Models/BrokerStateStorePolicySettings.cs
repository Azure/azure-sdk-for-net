// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.IotOperations.Models
{
    /// <summary> Broker State Store Custom Policy Settings. </summary>
    public partial class BrokerStateStorePolicySettings
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="BrokerStateStorePolicySettings"/>. </summary>
        public BrokerStateStorePolicySettings()
        {
            StateStoreResources = new ChangeTrackingList<BrokerStateStorePolicyResources>();
        }

        /// <summary> Initializes a new instance of <see cref="BrokerStateStorePolicySettings"/>. </summary>
        /// <param name="stateStoreResources"> List of key and key type to persist to disk. </param>
        /// <param name="dynamic"> Controls if MQTT clients can request for disk persistence via `MQTTv5` user property. Works in addition to other groups (logical OR). </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal BrokerStateStorePolicySettings(IList<BrokerStateStorePolicyResources> stateStoreResources, BrokerStateStoreDynamic @dynamic, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            StateStoreResources = stateStoreResources;
            Dynamic = @dynamic;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> List of key and key type to persist to disk. </summary>
        public IList<BrokerStateStorePolicyResources> StateStoreResources { get; }
        /// <summary> Controls if MQTT clients can request for disk persistence via `MQTTv5` user property. Works in addition to other groups (logical OR). </summary>
        internal BrokerStateStoreDynamic Dynamic { get; set; }
        /// <summary> Mode of the BrokerStateStoreCustomPolicy. </summary>
        public IotOperationsOperationalMode? DynamicMode
        {
            get => Dynamic is null ? default(IotOperationsOperationalMode?) : Dynamic.Mode;
            set
            {
                Dynamic = value.HasValue ? new BrokerStateStoreDynamic(value.Value) : null;
            }
        }
    }
}
