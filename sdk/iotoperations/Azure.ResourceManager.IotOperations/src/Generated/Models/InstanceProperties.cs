// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.IoTOperations.Models
{
    /// <summary> The properties of the Instance resource. </summary>
    public partial class InstanceProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="InstanceProperties"/>. </summary>
        /// <param name="schemaRegistryNamespace"> The reference to the Schema Registry for this AIO Instance. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaRegistryNamespace"/> is null. </exception>
        public InstanceProperties(string schemaRegistryNamespace)
        {
            Argument.AssertNotNull(schemaRegistryNamespace, nameof(schemaRegistryNamespace));

            SchemaRegistryNamespace = schemaRegistryNamespace;
        }

        /// <summary> Initializes a new instance of <see cref="InstanceProperties"/>. </summary>
        /// <param name="description"> Detailed description of the Instance. </param>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="version"> The Azure IoT Operations version. </param>
        /// <param name="schemaRegistryNamespace"> The reference to the Schema Registry for this AIO Instance. </param>
        /// <param name="components"> The configuration for components of the AIO Instance. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal InstanceProperties(string description, ProvisioningState? provisioningState, string version, string schemaRegistryNamespace, Components components, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Description = description;
            ProvisioningState = provisioningState;
            Version = version;
            SchemaRegistryNamespace = schemaRegistryNamespace;
            Components = components;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="InstanceProperties"/> for deserialization. </summary>
        internal InstanceProperties()
        {
        }

        /// <summary> Detailed description of the Instance. </summary>
        public string Description { get; set; }
        /// <summary> The status of the last operation. </summary>
        public ProvisioningState? ProvisioningState { get; }
        /// <summary> The Azure IoT Operations version. </summary>
        public string Version { get; }
        /// <summary> The reference to the Schema Registry for this AIO Instance. </summary>
        public string SchemaRegistryNamespace { get; set; }
        /// <summary> The configuration for components of the AIO Instance. </summary>
        public Components Components { get; set; }
    }
}
