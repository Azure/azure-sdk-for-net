// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.IoTOperations.Models
{
    /// <summary> StateStoreResourceKeyTypes properties. </summary>
    public readonly partial struct StateStoreResourceKeyType : IEquatable<StateStoreResourceKeyType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="StateStoreResourceKeyType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public StateStoreResourceKeyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PatternValue = "Pattern";
        private const string StringValue = "String";
        private const string BinaryValue = "Binary";

        /// <summary> Key type - pattern. </summary>
        public static StateStoreResourceKeyType Pattern { get; } = new StateStoreResourceKeyType(PatternValue);
        /// <summary> Key type - string. </summary>
        public static StateStoreResourceKeyType String { get; } = new StateStoreResourceKeyType(StringValue);
        /// <summary> Key type - binary. </summary>
        public static StateStoreResourceKeyType Binary { get; } = new StateStoreResourceKeyType(BinaryValue);
        /// <summary> Determines if two <see cref="StateStoreResourceKeyType"/> values are the same. </summary>
        public static bool operator ==(StateStoreResourceKeyType left, StateStoreResourceKeyType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="StateStoreResourceKeyType"/> values are not the same. </summary>
        public static bool operator !=(StateStoreResourceKeyType left, StateStoreResourceKeyType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="StateStoreResourceKeyType"/>. </summary>
        public static implicit operator StateStoreResourceKeyType(string value) => new StateStoreResourceKeyType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is StateStoreResourceKeyType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(StateStoreResourceKeyType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
