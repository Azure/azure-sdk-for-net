// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.IotOperations.Models
{
    internal partial class UnknownAkriConnectorTemplateManagedConfigurationSettings : IUtf8JsonSerializable, IJsonModel<AkriConnectorTemplateManagedConfigurationSettings>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<AkriConnectorTemplateManagedConfigurationSettings>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<AkriConnectorTemplateManagedConfigurationSettings>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AkriConnectorTemplateManagedConfigurationSettings>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AkriConnectorTemplateManagedConfigurationSettings)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
        }

        AkriConnectorTemplateManagedConfigurationSettings IJsonModel<AkriConnectorTemplateManagedConfigurationSettings>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AkriConnectorTemplateManagedConfigurationSettings>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AkriConnectorTemplateManagedConfigurationSettings)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAkriConnectorTemplateManagedConfigurationSettings(document.RootElement, options);
        }

        internal static UnknownAkriConnectorTemplateManagedConfigurationSettings DeserializeUnknownAkriConnectorTemplateManagedConfigurationSettings(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            AkriConnectorTemplateManagedConfigurationType managedConfigurationType = "Unknown";
            AkriConnectorTemplateAllocation allocation = default;
            IList<AkriConnectorTemplatePersistentVolumeClaim> persistentVolumeClaims = default;
            IDictionary<string, string> additionalConfiguration = default;
            IList<IDictionary<string, BinaryData>> persistentVolumeClaimTemplates = default;
            IList<AkriConnectorsSecret> secrets = default;
            AkriConnectorTemplateTrustList trustSettings = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("managedConfigurationType"u8))
                {
                    managedConfigurationType = new AkriConnectorTemplateManagedConfigurationType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("allocation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    allocation = AkriConnectorTemplateAllocation.DeserializeAkriConnectorTemplateAllocation(property.Value, options);
                    continue;
                }
                if (property.NameEquals("persistentVolumeClaims"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AkriConnectorTemplatePersistentVolumeClaim> array = new List<AkriConnectorTemplatePersistentVolumeClaim>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AkriConnectorTemplatePersistentVolumeClaim.DeserializeAkriConnectorTemplatePersistentVolumeClaim(item, options));
                    }
                    persistentVolumeClaims = array;
                    continue;
                }
                if (property.NameEquals("additionalConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    additionalConfiguration = dictionary;
                    continue;
                }
                if (property.NameEquals("persistentVolumeClaimTemplates"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<IDictionary<string, BinaryData>> array = new List<IDictionary<string, BinaryData>>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            Dictionary<string, BinaryData> dictionary = new Dictionary<string, BinaryData>();
                            foreach (var property0 in item.EnumerateObject())
                            {
                                if (property0.Value.ValueKind == JsonValueKind.Null)
                                {
                                    dictionary.Add(property0.Name, null);
                                }
                                else
                                {
                                    dictionary.Add(property0.Name, BinaryData.FromString(property0.Value.GetRawText()));
                                }
                            }
                            array.Add(dictionary);
                        }
                    }
                    persistentVolumeClaimTemplates = array;
                    continue;
                }
                if (property.NameEquals("secrets"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AkriConnectorsSecret> array = new List<AkriConnectorsSecret>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AkriConnectorsSecret.DeserializeAkriConnectorsSecret(item, options));
                    }
                    secrets = array;
                    continue;
                }
                if (property.NameEquals("trustSettings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    trustSettings = AkriConnectorTemplateTrustList.DeserializeAkriConnectorTemplateTrustList(property.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new UnknownAkriConnectorTemplateManagedConfigurationSettings(
                managedConfigurationType,
                allocation,
                persistentVolumeClaims ?? new ChangeTrackingList<AkriConnectorTemplatePersistentVolumeClaim>(),
                additionalConfiguration ?? new ChangeTrackingDictionary<string, string>(),
                persistentVolumeClaimTemplates ?? new ChangeTrackingList<IDictionary<string, BinaryData>>(),
                secrets ?? new ChangeTrackingList<AkriConnectorsSecret>(),
                trustSettings,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<AkriConnectorTemplateManagedConfigurationSettings>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AkriConnectorTemplateManagedConfigurationSettings>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerIotOperationsContext.Default);
                default:
                    throw new FormatException($"The model {nameof(AkriConnectorTemplateManagedConfigurationSettings)} does not support writing '{options.Format}' format.");
            }
        }

        AkriConnectorTemplateManagedConfigurationSettings IPersistableModel<AkriConnectorTemplateManagedConfigurationSettings>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AkriConnectorTemplateManagedConfigurationSettings>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeAkriConnectorTemplateManagedConfigurationSettings(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(AkriConnectorTemplateManagedConfigurationSettings)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<AkriConnectorTemplateManagedConfigurationSettings>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
