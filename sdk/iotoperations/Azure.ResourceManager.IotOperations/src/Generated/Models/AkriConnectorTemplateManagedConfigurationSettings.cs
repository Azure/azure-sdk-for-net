// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.IotOperations.Models
{
    /// <summary>
    /// AkriConnectorTemplateManagedConfiguration properties.
    /// Please note <see cref="AkriConnectorTemplateManagedConfigurationSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
    /// The available derived classes include <see cref="AkriConnectorTemplateRuntimeImageConfiguration"/> and <see cref="AkriConnectorTemplateRuntimeStatefulSetConfiguration"/>.
    /// </summary>
    public abstract partial class AkriConnectorTemplateManagedConfigurationSettings
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private protected IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AkriConnectorTemplateManagedConfigurationSettings"/>. </summary>
        protected AkriConnectorTemplateManagedConfigurationSettings()
        {
            PersistentVolumeClaims = new ChangeTrackingList<AkriConnectorTemplatePersistentVolumeClaim>();
            AdditionalConfiguration = new ChangeTrackingDictionary<string, string>();
            PersistentVolumeClaimTemplates = new ChangeTrackingList<IDictionary<string, BinaryData>>();
            Secrets = new ChangeTrackingList<AkriConnectorsSecret>();
        }

        /// <summary> Initializes a new instance of <see cref="AkriConnectorTemplateManagedConfigurationSettings"/>. </summary>
        /// <param name="managedConfigurationType"> The type of the managed configuration. </param>
        /// <param name="allocation">
        /// Allocation settings for the managed configuration.
        /// Please note <see cref="AkriConnectorTemplateAllocation"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AkriConnectorTemplateBucketizedAllocation"/>.
        /// </param>
        /// <param name="persistentVolumeClaims"> The persistent volume claims for the managed configuration. </param>
        /// <param name="additionalConfiguration"> Additional configuration for the image of the managed configuration. </param>
        /// <param name="persistentVolumeClaimTemplates">
        /// The persistent volume claim templates for the managed configuration.
        /// See https://raw.githubusercontent.com/kubernetes/kubernetes/refs/heads/master/api/openapi-spec/v3/apis__apps__v1_openapi.json.
        /// </param>
        /// <param name="secrets"> Connector secrets that will be mounted onto all connector instances. </param>
        /// <param name="trustSettings"> Trust list for the connector. This is used to specify the certificates that all connector instances should trust. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AkriConnectorTemplateManagedConfigurationSettings(AkriConnectorTemplateManagedConfigurationType managedConfigurationType, AkriConnectorTemplateAllocation allocation, IList<AkriConnectorTemplatePersistentVolumeClaim> persistentVolumeClaims, IDictionary<string, string> additionalConfiguration, IList<IDictionary<string, BinaryData>> persistentVolumeClaimTemplates, IList<AkriConnectorsSecret> secrets, AkriConnectorTemplateTrustList trustSettings, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ManagedConfigurationType = managedConfigurationType;
            Allocation = allocation;
            PersistentVolumeClaims = persistentVolumeClaims;
            AdditionalConfiguration = additionalConfiguration;
            PersistentVolumeClaimTemplates = persistentVolumeClaimTemplates;
            Secrets = secrets;
            TrustSettings = trustSettings;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The type of the managed configuration. </summary>
        internal AkriConnectorTemplateManagedConfigurationType ManagedConfigurationType { get; set; }
        /// <summary>
        /// Allocation settings for the managed configuration.
        /// Please note <see cref="AkriConnectorTemplateAllocation"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AkriConnectorTemplateBucketizedAllocation"/>.
        /// </summary>
        public AkriConnectorTemplateAllocation Allocation { get; set; }
        /// <summary> The persistent volume claims for the managed configuration. </summary>
        public IList<AkriConnectorTemplatePersistentVolumeClaim> PersistentVolumeClaims { get; }
        /// <summary> Additional configuration for the image of the managed configuration. </summary>
        public IDictionary<string, string> AdditionalConfiguration { get; }
        /// <summary>
        /// The persistent volume claim templates for the managed configuration.
        /// See https://raw.githubusercontent.com/kubernetes/kubernetes/refs/heads/master/api/openapi-spec/v3/apis__apps__v1_openapi.json.
        /// <para>
        /// To assign an object to the element of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IList<IDictionary<string, BinaryData>> PersistentVolumeClaimTemplates { get; }
        /// <summary> Connector secrets that will be mounted onto all connector instances. </summary>
        public IList<AkriConnectorsSecret> Secrets { get; }
        /// <summary> Trust list for the connector. This is used to specify the certificates that all connector instances should trust. </summary>
        internal AkriConnectorTemplateTrustList TrustSettings { get; set; }
        /// <summary> The secret reference for certificates to trust. </summary>
        public string TrustListSecretRef
        {
            get => TrustSettings is null ? default : TrustSettings.TrustListSecretRef;
            set => TrustSettings = new AkriConnectorTemplateTrustList(value);
        }
    }
}
