// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.IotOperations.Models
{
    /// <summary> The enum defining type of ExtendedLocation accepted. </summary>
    public readonly partial struct IotOperationsExtendedLocationType : IEquatable<IotOperationsExtendedLocationType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="IotOperationsExtendedLocationType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public IotOperationsExtendedLocationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CustomLocationValue = "CustomLocation";

        /// <summary> CustomLocation type. </summary>
        public static IotOperationsExtendedLocationType CustomLocation { get; } = new IotOperationsExtendedLocationType(CustomLocationValue);
        /// <summary> Determines if two <see cref="IotOperationsExtendedLocationType"/> values are the same. </summary>
        public static bool operator ==(IotOperationsExtendedLocationType left, IotOperationsExtendedLocationType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="IotOperationsExtendedLocationType"/> values are not the same. </summary>
        public static bool operator !=(IotOperationsExtendedLocationType left, IotOperationsExtendedLocationType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="IotOperationsExtendedLocationType"/>. </summary>
        public static implicit operator IotOperationsExtendedLocationType(string value) => new IotOperationsExtendedLocationType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is IotOperationsExtendedLocationType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(IotOperationsExtendedLocationType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
