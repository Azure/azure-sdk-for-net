// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.IotOperations.Models
{
    /// <summary> Dataflow Operation Type properties. </summary>
    public readonly partial struct DataflowOperationType : IEquatable<DataflowOperationType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DataflowOperationType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DataflowOperationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SourceValue = "Source";
        private const string DestinationValue = "Destination";
        private const string BuiltInTransformationValue = "BuiltInTransformation";

        /// <summary> Dataflow Source Operation. </summary>
        public static DataflowOperationType Source { get; } = new DataflowOperationType(SourceValue);
        /// <summary> Dataflow Destination Operation. </summary>
        public static DataflowOperationType Destination { get; } = new DataflowOperationType(DestinationValue);
        /// <summary> Dataflow BuiltIn Transformation Operation. </summary>
        public static DataflowOperationType BuiltInTransformation { get; } = new DataflowOperationType(BuiltInTransformationValue);
        /// <summary> Determines if two <see cref="DataflowOperationType"/> values are the same. </summary>
        public static bool operator ==(DataflowOperationType left, DataflowOperationType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DataflowOperationType"/> values are not the same. </summary>
        public static bool operator !=(DataflowOperationType left, DataflowOperationType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="DataflowOperationType"/>. </summary>
        public static implicit operator DataflowOperationType(string value) => new DataflowOperationType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DataflowOperationType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DataflowOperationType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
