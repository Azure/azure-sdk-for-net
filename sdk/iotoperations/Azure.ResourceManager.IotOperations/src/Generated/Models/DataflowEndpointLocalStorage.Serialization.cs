// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

<<<<<<<< HEAD:sdk/avs/Azure.ResourceManager.Avs/src/Generated/Models/ElasticSanVolume.Serialization.cs
namespace Azure.ResourceManager.Avs.Models
{
    internal partial class ElasticSanVolume : IUtf8JsonSerializable, IJsonModel<ElasticSanVolume>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ElasticSanVolume>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ElasticSanVolume>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
========
namespace Azure.ResourceManager.IotOperations.Models
{
    internal partial class DataflowEndpointLocalStorage : IUtf8JsonSerializable, IJsonModel<DataflowEndpointLocalStorage>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<DataflowEndpointLocalStorage>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<DataflowEndpointLocalStorage>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
>>>>>>>> main:sdk/iotoperations/Azure.ResourceManager.IotOperations/src/Generated/Models/DataflowEndpointLocalStorage.Serialization.cs
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
<<<<<<<< HEAD:sdk/avs/Azure.ResourceManager.Avs/src/Generated/Models/ElasticSanVolume.Serialization.cs
            var format = options.Format == "W" ? ((IPersistableModel<ElasticSanVolume>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ElasticSanVolume)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("targetId"u8);
            writer.WriteStringValue(TargetId);
========
            var format = options.Format == "W" ? ((IPersistableModel<DataflowEndpointLocalStorage>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DataflowEndpointLocalStorage)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("persistentVolumeClaimRef"u8);
            writer.WriteStringValue(PersistentVolumeClaimRef);
>>>>>>>> main:sdk/iotoperations/Azure.ResourceManager.IotOperations/src/Generated/Models/DataflowEndpointLocalStorage.Serialization.cs
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

<<<<<<<< HEAD:sdk/avs/Azure.ResourceManager.Avs/src/Generated/Models/ElasticSanVolume.Serialization.cs
        ElasticSanVolume IJsonModel<ElasticSanVolume>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ElasticSanVolume>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ElasticSanVolume)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeElasticSanVolume(document.RootElement, options);
        }

        internal static ElasticSanVolume DeserializeElasticSanVolume(JsonElement element, ModelReaderWriterOptions options = null)
========
        DataflowEndpointLocalStorage IJsonModel<DataflowEndpointLocalStorage>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DataflowEndpointLocalStorage>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DataflowEndpointLocalStorage)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeDataflowEndpointLocalStorage(document.RootElement, options);
        }

        internal static DataflowEndpointLocalStorage DeserializeDataflowEndpointLocalStorage(JsonElement element, ModelReaderWriterOptions options = null)
>>>>>>>> main:sdk/iotoperations/Azure.ResourceManager.IotOperations/src/Generated/Models/DataflowEndpointLocalStorage.Serialization.cs
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
<<<<<<<< HEAD:sdk/avs/Azure.ResourceManager.Avs/src/Generated/Models/ElasticSanVolume.Serialization.cs
            ResourceIdentifier targetId = default;
========
            string persistentVolumeClaimRef = default;
>>>>>>>> main:sdk/iotoperations/Azure.ResourceManager.IotOperations/src/Generated/Models/DataflowEndpointLocalStorage.Serialization.cs
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
<<<<<<<< HEAD:sdk/avs/Azure.ResourceManager.Avs/src/Generated/Models/ElasticSanVolume.Serialization.cs
                if (property.NameEquals("targetId"u8))
                {
                    targetId = new ResourceIdentifier(property.Value.GetString());
========
                if (property.NameEquals("persistentVolumeClaimRef"u8))
                {
                    persistentVolumeClaimRef = property.Value.GetString();
>>>>>>>> main:sdk/iotoperations/Azure.ResourceManager.IotOperations/src/Generated/Models/DataflowEndpointLocalStorage.Serialization.cs
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
<<<<<<<< HEAD:sdk/avs/Azure.ResourceManager.Avs/src/Generated/Models/ElasticSanVolume.Serialization.cs
            return new ElasticSanVolume(targetId, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ElasticSanVolume>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ElasticSanVolume>)this).GetFormatFromOptions(options) : options.Format;
========
            return new DataflowEndpointLocalStorage(persistentVolumeClaimRef, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<DataflowEndpointLocalStorage>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DataflowEndpointLocalStorage>)this).GetFormatFromOptions(options) : options.Format;
>>>>>>>> main:sdk/iotoperations/Azure.ResourceManager.IotOperations/src/Generated/Models/DataflowEndpointLocalStorage.Serialization.cs

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
<<<<<<<< HEAD:sdk/avs/Azure.ResourceManager.Avs/src/Generated/Models/ElasticSanVolume.Serialization.cs
                    throw new FormatException($"The model {nameof(ElasticSanVolume)} does not support writing '{options.Format}' format.");
            }
        }

        ElasticSanVolume IPersistableModel<ElasticSanVolume>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ElasticSanVolume>)this).GetFormatFromOptions(options) : options.Format;
========
                    throw new FormatException($"The model {nameof(DataflowEndpointLocalStorage)} does not support writing '{options.Format}' format.");
            }
        }

        DataflowEndpointLocalStorage IPersistableModel<DataflowEndpointLocalStorage>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DataflowEndpointLocalStorage>)this).GetFormatFromOptions(options) : options.Format;
>>>>>>>> main:sdk/iotoperations/Azure.ResourceManager.IotOperations/src/Generated/Models/DataflowEndpointLocalStorage.Serialization.cs

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
<<<<<<<< HEAD:sdk/avs/Azure.ResourceManager.Avs/src/Generated/Models/ElasticSanVolume.Serialization.cs
                        return DeserializeElasticSanVolume(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ElasticSanVolume)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ElasticSanVolume>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
========
                        return DeserializeDataflowEndpointLocalStorage(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(DataflowEndpointLocalStorage)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<DataflowEndpointLocalStorage>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
>>>>>>>> main:sdk/iotoperations/Azure.ResourceManager.IotOperations/src/Generated/Models/DataflowEndpointLocalStorage.Serialization.cs
    }
}
