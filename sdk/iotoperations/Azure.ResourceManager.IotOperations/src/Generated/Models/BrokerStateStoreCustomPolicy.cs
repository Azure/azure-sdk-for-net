// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.IotOperations.Models
{
    /// <summary> Broker State Store Custom Policy. </summary>
    public partial class BrokerStateStoreCustomPolicy : BrokerStateStorePolicy
    {
        /// <summary> Initializes a new instance of <see cref="BrokerStateStoreCustomPolicy"/>. </summary>
        /// <param name="stateStoreSettings"> Settings for the policy. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="stateStoreSettings"/> is null. </exception>
        public BrokerStateStoreCustomPolicy(BrokerStateStorePolicySettings stateStoreSettings)
        {
            Argument.AssertNotNull(stateStoreSettings, nameof(stateStoreSettings));

            StateStoreSettings = stateStoreSettings;
            Mode = BrokerPersistencePolicyMode.Custom;
        }

        /// <summary> Initializes a new instance of <see cref="BrokerStateStoreCustomPolicy"/>. </summary>
        /// <param name="mode"> 'All' to persist all keys, 'None' to not persist any, 'Custom' to persist only the specified keys. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="stateStoreSettings"> Settings for the policy. </param>
        internal BrokerStateStoreCustomPolicy(BrokerPersistencePolicyMode mode, IDictionary<string, BinaryData> serializedAdditionalRawData, BrokerStateStorePolicySettings stateStoreSettings) : base(mode, serializedAdditionalRawData)
        {
            StateStoreSettings = stateStoreSettings;
            Mode = mode;
        }

        /// <summary> Initializes a new instance of <see cref="BrokerStateStoreCustomPolicy"/> for deserialization. </summary>
        internal BrokerStateStoreCustomPolicy()
        {
        }

        /// <summary> Settings for the policy. </summary>
        public BrokerStateStorePolicySettings StateStoreSettings { get; set; }
    }
}
