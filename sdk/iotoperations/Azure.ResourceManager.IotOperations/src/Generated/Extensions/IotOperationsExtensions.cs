// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.ResourceManager.IotOperations.Mocking;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.IotOperations
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.IotOperations. </summary>
    public static partial class IotOperationsExtensions
    {
        private static MockableIotOperationsArmClient GetMockableIotOperationsArmClient(ArmClient client)
        {
            return client.GetCachedClient(client0 => new MockableIotOperationsArmClient(client0));
        }

        private static MockableIotOperationsResourceGroupResource GetMockableIotOperationsResourceGroupResource(ArmResource resource)
        {
            return resource.GetCachedClient(client => new MockableIotOperationsResourceGroupResource(client, resource.Id));
        }

        private static MockableIotOperationsSubscriptionResource GetMockableIotOperationsSubscriptionResource(ArmResource resource)
        {
            return resource.GetCachedClient(client => new MockableIotOperationsSubscriptionResource(client, resource.Id));
        }

        /// <summary>
        /// Gets an object representing an <see cref="IotOperationsInstanceResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="IotOperationsInstanceResource.CreateResourceIdentifier" /> to create an <see cref="IotOperationsInstanceResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableIotOperationsArmClient.GetIotOperationsInstanceResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="IotOperationsInstanceResource"/> object. </returns>
        public static IotOperationsInstanceResource GetIotOperationsInstanceResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableIotOperationsArmClient(client).GetIotOperationsInstanceResource(id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="IotOperationsBrokerResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="IotOperationsBrokerResource.CreateResourceIdentifier" /> to create an <see cref="IotOperationsBrokerResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableIotOperationsArmClient.GetIotOperationsBrokerResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="IotOperationsBrokerResource"/> object. </returns>
        public static IotOperationsBrokerResource GetIotOperationsBrokerResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableIotOperationsArmClient(client).GetIotOperationsBrokerResource(id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="IotOperationsBrokerListenerResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="IotOperationsBrokerListenerResource.CreateResourceIdentifier" /> to create an <see cref="IotOperationsBrokerListenerResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableIotOperationsArmClient.GetIotOperationsBrokerListenerResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="IotOperationsBrokerListenerResource"/> object. </returns>
        public static IotOperationsBrokerListenerResource GetIotOperationsBrokerListenerResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableIotOperationsArmClient(client).GetIotOperationsBrokerListenerResource(id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="IotOperationsBrokerAuthenticationResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="IotOperationsBrokerAuthenticationResource.CreateResourceIdentifier" /> to create an <see cref="IotOperationsBrokerAuthenticationResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableIotOperationsArmClient.GetIotOperationsBrokerAuthenticationResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="IotOperationsBrokerAuthenticationResource"/> object. </returns>
        public static IotOperationsBrokerAuthenticationResource GetIotOperationsBrokerAuthenticationResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableIotOperationsArmClient(client).GetIotOperationsBrokerAuthenticationResource(id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="IotOperationsBrokerAuthorizationResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="IotOperationsBrokerAuthorizationResource.CreateResourceIdentifier" /> to create an <see cref="IotOperationsBrokerAuthorizationResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableIotOperationsArmClient.GetIotOperationsBrokerAuthorizationResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="IotOperationsBrokerAuthorizationResource"/> object. </returns>
        public static IotOperationsBrokerAuthorizationResource GetIotOperationsBrokerAuthorizationResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableIotOperationsArmClient(client).GetIotOperationsBrokerAuthorizationResource(id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="IotOperationsDataflowProfileResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="IotOperationsDataflowProfileResource.CreateResourceIdentifier" /> to create an <see cref="IotOperationsDataflowProfileResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableIotOperationsArmClient.GetIotOperationsDataflowProfileResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="IotOperationsDataflowProfileResource"/> object. </returns>
        public static IotOperationsDataflowProfileResource GetIotOperationsDataflowProfileResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableIotOperationsArmClient(client).GetIotOperationsDataflowProfileResource(id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="IotOperationsDataflowResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="IotOperationsDataflowResource.CreateResourceIdentifier" /> to create an <see cref="IotOperationsDataflowResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableIotOperationsArmClient.GetIotOperationsDataflowResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="IotOperationsDataflowResource"/> object. </returns>
        public static IotOperationsDataflowResource GetIotOperationsDataflowResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableIotOperationsArmClient(client).GetIotOperationsDataflowResource(id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="IotOperationsDataflowEndpointResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="IotOperationsDataflowEndpointResource.CreateResourceIdentifier" /> to create an <see cref="IotOperationsDataflowEndpointResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableIotOperationsArmClient.GetIotOperationsDataflowEndpointResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="IotOperationsDataflowEndpointResource"/> object. </returns>
        public static IotOperationsDataflowEndpointResource GetIotOperationsDataflowEndpointResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableIotOperationsArmClient(client).GetIotOperationsDataflowEndpointResource(id);
        }

        /// <summary>
        /// Gets a collection of IotOperationsInstanceResources in the ResourceGroupResource.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableIotOperationsResourceGroupResource.GetIotOperationsInstances()"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        /// <returns> An object representing collection of IotOperationsInstanceResources and their operations over a IotOperationsInstanceResource. </returns>
        public static IotOperationsInstanceCollection GetIotOperationsInstances(this ResourceGroupResource resourceGroupResource)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableIotOperationsResourceGroupResource(resourceGroupResource).GetIotOperationsInstances();
        }

        /// <summary>
        /// Get a InstanceResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperations/instances/{instanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InstanceResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-11-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="IotOperationsInstanceResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableIotOperationsResourceGroupResource.GetIotOperationsInstanceAsync(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="instanceName"> Name of instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="instanceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="instanceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<IotOperationsInstanceResource>> GetIotOperationsInstanceAsync(this ResourceGroupResource resourceGroupResource, string instanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return await GetMockableIotOperationsResourceGroupResource(resourceGroupResource).GetIotOperationsInstanceAsync(instanceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a InstanceResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperations/instances/{instanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InstanceResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-11-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="IotOperationsInstanceResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableIotOperationsResourceGroupResource.GetIotOperationsInstance(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="instanceName"> Name of instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="instanceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="instanceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static Response<IotOperationsInstanceResource> GetIotOperationsInstance(this ResourceGroupResource resourceGroupResource, string instanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableIotOperationsResourceGroupResource(resourceGroupResource).GetIotOperationsInstance(instanceName, cancellationToken);
        }

        /// <summary>
        /// List InstanceResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.IoTOperations/instances</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InstanceResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-11-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="IotOperationsInstanceResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableIotOperationsSubscriptionResource.GetIotOperationsInstances(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> An async collection of <see cref="IotOperationsInstanceResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<IotOperationsInstanceResource> GetIotOperationsInstancesAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableIotOperationsSubscriptionResource(subscriptionResource).GetIotOperationsInstancesAsync(cancellationToken);
        }

        /// <summary>
        /// List InstanceResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.IoTOperations/instances</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InstanceResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-11-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="IotOperationsInstanceResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableIotOperationsSubscriptionResource.GetIotOperationsInstances(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="IotOperationsInstanceResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<IotOperationsInstanceResource> GetIotOperationsInstances(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableIotOperationsSubscriptionResource(subscriptionResource).GetIotOperationsInstances(cancellationToken);
        }
    }
}
