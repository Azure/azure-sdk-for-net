// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.Analytics.Purview.DataMap
{
    public partial class AtlasRelationshipAttributeDef : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Cardinality))
            {
                writer.WritePropertyName("cardinality"u8);
                writer.WriteStringValue(Cardinality.Value.ToString());
            }
            if (Optional.IsCollectionDefined(Constraints))
            {
                writer.WritePropertyName("constraints"u8);
                writer.WriteStartArray();
                foreach (var item in Constraints)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(DefaultValue))
            {
                writer.WritePropertyName("defaultValue"u8);
                writer.WriteStringValue(DefaultValue);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(IncludeInNotification))
            {
                writer.WritePropertyName("includeInNotification"u8);
                writer.WriteBooleanValue(IncludeInNotification.Value);
            }
            if (Optional.IsDefined(IsIndexable))
            {
                writer.WritePropertyName("isIndexable"u8);
                writer.WriteBooleanValue(IsIndexable.Value);
            }
            if (Optional.IsDefined(IsOptional))
            {
                writer.WritePropertyName("isOptional"u8);
                writer.WriteBooleanValue(IsOptional.Value);
            }
            if (Optional.IsDefined(IsUnique))
            {
                writer.WritePropertyName("isUnique"u8);
                writer.WriteBooleanValue(IsUnique.Value);
            }
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (Optional.IsCollectionDefined(Options))
            {
                writer.WritePropertyName("options"u8);
                writer.WriteStartObject();
                foreach (var item in Options)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(TypeName))
            {
                writer.WritePropertyName("typeName"u8);
                writer.WriteStringValue(TypeName);
            }
            if (Optional.IsDefined(ValuesMaxCount))
            {
                writer.WritePropertyName("valuesMaxCount"u8);
                writer.WriteNumberValue(ValuesMaxCount.Value);
            }
            if (Optional.IsDefined(ValuesMinCount))
            {
                writer.WritePropertyName("valuesMinCount"u8);
                writer.WriteNumberValue(ValuesMinCount.Value);
            }
            if (Optional.IsDefined(IsLegacyAttribute))
            {
                writer.WritePropertyName("isLegacyAttribute"u8);
                writer.WriteBooleanValue(IsLegacyAttribute.Value);
            }
            if (Optional.IsDefined(RelationshipTypeName))
            {
                writer.WritePropertyName("relationshipTypeName"u8);
                writer.WriteStringValue(RelationshipTypeName);
            }
            writer.WriteEndObject();
        }

        internal static AtlasRelationshipAttributeDef DeserializeAtlasRelationshipAttributeDef(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<Cardinality> cardinality = default;
            Optional<IList<AtlasConstraintDef>> constraints = default;
            Optional<string> defaultValue = default;
            Optional<string> description = default;
            Optional<bool> includeInNotification = default;
            Optional<bool> isIndexable = default;
            Optional<bool> isOptional = default;
            Optional<bool> isUnique = default;
            Optional<string> name = default;
            Optional<IDictionary<string, string>> options = default;
            Optional<string> typeName = default;
            Optional<int> valuesMaxCount = default;
            Optional<int> valuesMinCount = default;
            Optional<bool> isLegacyAttribute = default;
            Optional<string> relationshipTypeName = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("cardinality"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cardinality = new Cardinality(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("constraints"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AtlasConstraintDef> array = new List<AtlasConstraintDef>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AtlasConstraintDef.DeserializeAtlasConstraintDef(item));
                    }
                    constraints = array;
                    continue;
                }
                if (property.NameEquals("defaultValue"u8))
                {
                    defaultValue = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("includeInNotification"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    includeInNotification = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isIndexable"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isIndexable = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isOptional"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isOptional = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isUnique"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isUnique = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("options"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    options = dictionary;
                    continue;
                }
                if (property.NameEquals("typeName"u8))
                {
                    typeName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("valuesMaxCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    valuesMaxCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("valuesMinCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    valuesMinCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("isLegacyAttribute"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isLegacyAttribute = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("relationshipTypeName"u8))
                {
                    relationshipTypeName = property.Value.GetString();
                    continue;
                }
            }
            return new AtlasRelationshipAttributeDef(Optional.ToNullable(cardinality), Optional.ToList(constraints), defaultValue.Value, description.Value, Optional.ToNullable(includeInNotification), Optional.ToNullable(isIndexable), Optional.ToNullable(isOptional), Optional.ToNullable(isUnique), name.Value, Optional.ToDictionary(options), typeName.Value, Optional.ToNullable(valuesMaxCount), Optional.ToNullable(valuesMinCount), Optional.ToNullable(isLegacyAttribute), relationshipTypeName.Value);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static AtlasRelationshipAttributeDef FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeAtlasRelationshipAttributeDef(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
