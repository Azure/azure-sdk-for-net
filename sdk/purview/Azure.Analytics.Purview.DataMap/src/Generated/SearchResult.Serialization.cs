// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.Analytics.Purview.DataMap
{
    public partial class SearchResult
    {
        internal static SearchResult DeserializeSearchResult(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<int> searchCount = default;
            Optional<bool> searchCountApproximate = default;
            Optional<string> continuationToken = default;
            Optional<SearchFacetResultValue> searchFacets = default;
            Optional<IReadOnlyList<SearchResultValue>> value = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("@search.count"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    searchCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("@search.count.approximate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    searchCountApproximate = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("continuationToken"u8))
                {
                    continuationToken = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("@search.facets"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    searchFacets = SearchFacetResultValue.DeserializeSearchFacetResultValue(property.Value);
                    continue;
                }
                if (property.NameEquals("value"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SearchResultValue> array = new List<SearchResultValue>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SearchResultValue.DeserializeSearchResultValue(item));
                    }
                    value = array;
                    continue;
                }
            }
            return new SearchResult(Optional.ToNullable(searchCount), Optional.ToNullable(searchCountApproximate), continuationToken.Value, searchFacets.Value, Optional.ToList(value));
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static SearchResult FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeSearchResult(document.RootElement);
        }
    }
}
