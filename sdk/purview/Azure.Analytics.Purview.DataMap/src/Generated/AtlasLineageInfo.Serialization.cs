// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.Analytics.Purview.DataMap
{
    public partial class AtlasLineageInfo
    {
        internal static AtlasLineageInfo DeserializeAtlasLineageInfo(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> baseEntityGuid = default;
            Optional<IReadOnlyDictionary<string, AtlasEntityHeader>> guidEntityMap = default;
            Optional<IReadOnlyDictionary<string, IDictionary<string, BinaryData>>> widthCounts = default;
            Optional<int> lineageDepth = default;
            Optional<int> lineageWidth = default;
            Optional<int> childrenCount = default;
            Optional<LineageDirection> lineageDirection = default;
            Optional<IReadOnlyList<ParentRelation>> parentRelations = default;
            Optional<IReadOnlyList<LineageRelation>> relations = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("baseEntityGuid"u8))
                {
                    baseEntityGuid = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("guidEntityMap"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, AtlasEntityHeader> dictionary = new Dictionary<string, AtlasEntityHeader>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, AtlasEntityHeader.DeserializeAtlasEntityHeader(property0.Value));
                    }
                    guidEntityMap = dictionary;
                    continue;
                }
                if (property.NameEquals("widthCounts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, IDictionary<string, BinaryData>> dictionary = new Dictionary<string, IDictionary<string, BinaryData>>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(property0.Name, null);
                        }
                        else
                        {
                            Dictionary<string, BinaryData> dictionary0 = new Dictionary<string, BinaryData>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                if (property1.Value.ValueKind == JsonValueKind.Null)
                                {
                                    dictionary0.Add(property1.Name, null);
                                }
                                else
                                {
                                    dictionary0.Add(property1.Name, BinaryData.FromString(property1.Value.GetRawText()));
                                }
                            }
                            dictionary.Add(property0.Name, dictionary0);
                        }
                    }
                    widthCounts = dictionary;
                    continue;
                }
                if (property.NameEquals("lineageDepth"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lineageDepth = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("lineageWidth"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lineageWidth = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("childrenCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    childrenCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("lineageDirection"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lineageDirection = new LineageDirection(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("parentRelations"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ParentRelation> array = new List<ParentRelation>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ParentRelation.DeserializeParentRelation(item));
                    }
                    parentRelations = array;
                    continue;
                }
                if (property.NameEquals("relations"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<LineageRelation> array = new List<LineageRelation>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(LineageRelation.DeserializeLineageRelation(item));
                    }
                    relations = array;
                    continue;
                }
            }
            return new AtlasLineageInfo(baseEntityGuid.Value, Optional.ToDictionary(guidEntityMap), Optional.ToDictionary(widthCounts), Optional.ToNullable(lineageDepth), Optional.ToNullable(lineageWidth), Optional.ToNullable(childrenCount), Optional.ToNullable(lineageDirection), Optional.ToList(parentRelations), Optional.ToList(relations));
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static AtlasLineageInfo FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeAtlasLineageInfo(document.RootElement);
        }
    }
}
