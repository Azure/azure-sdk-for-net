// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.Analytics.Purview.DataMap
{
    public partial class SearchFacetResultValue
    {
        internal static SearchFacetResultValue DeserializeSearchFacetResultValue(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<IReadOnlyList<SearchFacetItemValue>> entityType = default;
            Optional<IReadOnlyList<SearchFacetItemValue>> assetType = default;
            Optional<IReadOnlyList<SearchFacetItemValue>> classification = default;
            Optional<IReadOnlyList<SearchFacetItemValue>> term = default;
            Optional<IReadOnlyList<SearchFacetItemValue>> contactId = default;
            Optional<IReadOnlyList<SearchFacetItemValue>> contactType = default;
            Optional<IReadOnlyList<SearchFacetItemValue>> label = default;
            Optional<IReadOnlyList<SearchFacetItemValue>> glossaryType = default;
            Optional<IReadOnlyList<SearchFacetItemValue>> termStatus = default;
            Optional<IReadOnlyList<SearchFacetItemValue>> termTemplate = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("entityType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SearchFacetItemValue> array = new List<SearchFacetItemValue>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SearchFacetItemValue.DeserializeSearchFacetItemValue(item));
                    }
                    entityType = array;
                    continue;
                }
                if (property.NameEquals("assetType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SearchFacetItemValue> array = new List<SearchFacetItemValue>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SearchFacetItemValue.DeserializeSearchFacetItemValue(item));
                    }
                    assetType = array;
                    continue;
                }
                if (property.NameEquals("classification"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SearchFacetItemValue> array = new List<SearchFacetItemValue>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SearchFacetItemValue.DeserializeSearchFacetItemValue(item));
                    }
                    classification = array;
                    continue;
                }
                if (property.NameEquals("term"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SearchFacetItemValue> array = new List<SearchFacetItemValue>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SearchFacetItemValue.DeserializeSearchFacetItemValue(item));
                    }
                    term = array;
                    continue;
                }
                if (property.NameEquals("contactId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SearchFacetItemValue> array = new List<SearchFacetItemValue>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SearchFacetItemValue.DeserializeSearchFacetItemValue(item));
                    }
                    contactId = array;
                    continue;
                }
                if (property.NameEquals("contactType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SearchFacetItemValue> array = new List<SearchFacetItemValue>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SearchFacetItemValue.DeserializeSearchFacetItemValue(item));
                    }
                    contactType = array;
                    continue;
                }
                if (property.NameEquals("label"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SearchFacetItemValue> array = new List<SearchFacetItemValue>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SearchFacetItemValue.DeserializeSearchFacetItemValue(item));
                    }
                    label = array;
                    continue;
                }
                if (property.NameEquals("glossaryType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SearchFacetItemValue> array = new List<SearchFacetItemValue>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SearchFacetItemValue.DeserializeSearchFacetItemValue(item));
                    }
                    glossaryType = array;
                    continue;
                }
                if (property.NameEquals("termStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SearchFacetItemValue> array = new List<SearchFacetItemValue>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SearchFacetItemValue.DeserializeSearchFacetItemValue(item));
                    }
                    termStatus = array;
                    continue;
                }
                if (property.NameEquals("termTemplate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SearchFacetItemValue> array = new List<SearchFacetItemValue>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SearchFacetItemValue.DeserializeSearchFacetItemValue(item));
                    }
                    termTemplate = array;
                    continue;
                }
            }
            return new SearchFacetResultValue(Optional.ToList(entityType), Optional.ToList(assetType), Optional.ToList(classification), Optional.ToList(term), Optional.ToList(contactId), Optional.ToList(contactType), Optional.ToList(label), Optional.ToList(glossaryType), Optional.ToList(termStatus), Optional.ToList(termTemplate));
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static SearchFacetResultValue FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeSearchFacetResultValue(document.RootElement);
        }
    }
}
