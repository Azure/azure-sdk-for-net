<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="QueryAsync(QueryConfig,CancellationToken)">
      <example>
This sample shows how to call QueryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Keywords = "exampledata",
    Limit = 10,
    Orderby = {BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "6215",
        ["name"] = "ASC"
    }), BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "6217",
        ["updateTime"] = "DESC"
    })},
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "6209",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6210",
                ["objectType"] = "Files"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6211",
                ["entityType"] = "azure_blob_path"
            }
        }
    }),
    Facets = {new SearchFacetItem
    {
        Count = 0,
        Facet = "assetType",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "classification",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "contactId",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "label",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "term",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }},
};
Response<QueryResult> response = await client.QueryAsync(body);
]]></code>
This sample shows how to call QueryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Limit = 10,
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "6294",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6295",
                ["entityType"] = "azure_blob_path"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6296",
                ["attributeName"] = "qualifiedName",
                ["operator"] = "contains",
                ["attributeValue"] = ".csv"
            }
        }
    }),
};
Response<QueryResult> response = await client.QueryAsync(body);
]]></code>
This sample shows how to call QueryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Limit = 10,
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "6347",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6348",
                ["entityType"] = "azure_blob_path"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6349",
                ["attributeName"] = "qualifiedName",
                ["operator"] = "contains",
                ["attributeValue"] = ".csv"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6350",
                ["or"] = new object[]
                {
                    new Dictionary<string, object>
                    {
                        ["$id"] = "6351",
                        ["attributeName"] = "name",
                        ["operator"] = "eq",
                        ["attributeValue"] = "exampledata.csv"
                    },
                    new Dictionary<string, object>
                    {
                        ["$id"] = "6352",
                        ["attributeName"] = "qualifiedName",
                        ["operator"] = "prefix",
                        ["attributeValue"] = "https://"
                    }
                }
            }
        }
    }),
};
Response<QueryResult> response = await client.QueryAsync(body);
]]></code>
This sample shows how to call QueryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Limit = 10,
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "6405",
        ["or"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6406",
                ["assetType"] = "SQL Server"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6407",
                ["assetType"] = "Azure SQL Server"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6408",
                ["assetType"] = "Azure SQL Database"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6409",
                ["assetType"] = "Azure SQL Data Warehouse"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6410",
                ["assetType"] = "Azure SQL Managed Instance"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6411",
                ["assetType"] = "Azure Storage Account"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6412",
                ["assetType"] = "Azure Blob Storage"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6413",
                ["assetType"] = "Azure Files"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6414",
                ["assetType"] = "Azure Table Storage"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6415",
                ["assetType"] = "Azure Data Lake Storage Gen1"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6416",
                ["assetType"] = "Azure Data Lake Storage Gen2"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6417",
                ["assetType"] = "Azure Cosmos DB"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6418",
                ["assetType"] = "Azure Data Factory"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6419",
                ["assetType"] = "Azure Cognitive Search"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6420",
                ["assetType"] = "Power BI"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6421",
                ["assetType"] = "Azure Data Explorer"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6422",
                ["assetType"] = "Amazon S3"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6423",
                ["assetType"] = "Azure Data Share"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6424",
                ["assetType"] = "Teradata"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6425",
                ["assetType"] = "SAP S4HANA"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6426",
                ["assetType"] = "SAP ECC"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6427",
                ["assetType"] = "SQL Server Integration Services"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6428",
                ["assetType"] = "hive"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6429",
                ["assetType"] = "Azure Database for MySQL"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6430",
                ["assetType"] = "Azure Database for MariaDB"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6431",
                ["assetType"] = "Azure Database for PostgreSQL"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6432",
                ["assetType"] = "Azure Synapse Analytics"
            }
        }
    }),
};
Response<QueryResult> response = await client.QueryAsync(body);
]]></code>
This sample shows how to call QueryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Limit = 10,
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "6474",
        ["or"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6475",
                ["attributeName"] = "name",
                ["operator"] = "eq",
                ["attributeValue"] = "exampledata.csv"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6476",
                ["attributeName"] = "createTime",
                ["operator"] = "ge",
                ["attributeValue"] = 1545580800000L
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6477",
                ["attributeName"] = "modifiedTime",
                ["operator"] = "timerange",
                ["attributeValue"] = "LAST_24H|LAST_7D|LAST_30D|LAST_365D|MORE_THAN_365D"
            }
        }
    }),
};
Response<QueryResult> response = await client.QueryAsync(body);
]]></code>
This sample shows how to call QueryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Limit = 10,
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "6539",
        ["or"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6540",
                ["attributeName"] = "<BusinessMetadataName>.<StringAttributeName>",
                ["operator"] = "eq|ne|contains|prefix",
                ["attributeValue"] = "string value"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6541",
                ["attributeName"] = "<BusinessMetadataName>.<NumberAttributeName>",
                ["operator"] = "eq|ne|gt|ge|lt|le",
                ["attributeValue"] = 123
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6542",
                ["attributeName"] = "<BusinessMetadataName>.<BooleanAttributeName>",
                ["operator"] = "eq|ne",
                ["attributeValue"] = true
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6543",
                ["attributeName"] = "<BusinessMetadataName>.<DateAttributeName>",
                ["operator"] = "timerange",
                ["attributeValue"] = "LAST_24H|LAST_7D|LAST_30D|LAST_365D|MORE_THAN_365D"
            }
        }
    }),
};
Response<QueryResult> response = await client.QueryAsync(body);
]]></code>
This sample shows how to call QueryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Limit = 10,
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "6566",
        ["classification"] = "MICROSOFT.PERSONAL.EMAIL",
        ["includeSubClassifications"] = true
    }),
};
Response<QueryResult> response = await client.QueryAsync(body);
]]></code>
This sample shows how to call QueryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Limit = 10,
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "6616",
        ["collectionId"] = "collectionName"
    }),
};
Response<QueryResult> response = await client.QueryAsync(body);
]]></code>
This sample shows how to call QueryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Limit = 10,
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "6665",
        ["objectType"] = "Tables"
    }),
    Facets = {new SearchFacetItem
    {
        Count = 10,
        Facet = "assetType",
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "classification",
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "term",
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "label",
    }},
};
Response<QueryResult> response = await client.QueryAsync(body);
]]></code>
This sample shows how to call QueryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Limit = 10,
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "6795",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6796",
                ["fileExtension"] = "txt"
            }
        }
    }),
};
Response<QueryResult> response = await client.QueryAsync(body);
]]></code>
This sample shows how to call QueryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Keywords = "<term name>",
    Limit = 10,
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "6839",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6840",
                ["objectType"] = "Glossary terms"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6841",
                ["or"] = new object[]
                {
                    new Dictionary<string, object>
                    {
                        ["$id"] = "6842",
                        ["glossaryType"] = "AtlasGlossary"
                    },
                    new Dictionary<string, object>
                    {
                        ["$id"] = "6843",
                        ["glossaryType"] = "AtlasGlossaryTerm"
                    }
                }
            }
        }
    }),
    Facets = {new SearchFacetItem
    {
        Count = 10,
        Facet = "termStatus",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "termTemplate",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }},
};
Response<QueryResult> response = await client.QueryAsync(body);
]]></code>
This sample shows how to call QueryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Limit = 10,
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "6911",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6912",
                ["id"] = "bfecbcc3-1838-45fe-96d6-112de8a170f9"
            }
        }
    }),
};
Response<QueryResult> response = await client.QueryAsync(body);
]]></code>
This sample shows how to call QueryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Limit = 10,
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "6940",
        ["not"] = new Dictionary<string, object>
        {
            ["$id"] = "6941",
            ["classification"] = "MICROSOFT.SYSTEM.TEMP_FILE"
        }
    }),
};
Response<QueryResult> response = await client.QueryAsync(body);
]]></code>
This sample shows how to call QueryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Limit = 10,
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "6983",
        ["or"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6984",
                ["objectType"] = "Dashboards"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6985",
                ["objectType"] = "Data pipelines"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6986",
                ["objectType"] = "Files"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6987",
                ["objectType"] = "Folders"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6988",
                ["objectType"] = "Glossary terms"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6989",
                ["objectType"] = "Reports"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6990",
                ["objectType"] = "Stored procedures"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6991",
                ["objectType"] = "Tables"
            }
        }
    }),
};
Response<QueryResult> response = await client.QueryAsync(body);
]]></code>
This sample shows how to call QueryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Keywords = "exampledata",
    Limit = 2,
    ContinuationToken = "<token>",
    Orderby = {BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "7036",
        ["name"] = "ASC"
    }), BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "7038",
        ["updateTime"] = "DESC"
    })},
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "7029",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "7030",
                ["objectType"] = "Files"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "7031",
                ["entityType"] = "azure_blob_path"
            }
        }
    }),
    Facets = {new SearchFacetItem
    {
        Count = 0,
        Facet = "assetType",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "classification",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "contactId",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "label",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "term",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }},
};
Response<QueryResult> response = await client.QueryAsync(body);
]]></code>
This sample shows how to call QueryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Keywords = "exampledata",
    Limit = 2,
    Orderby = {BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "7122",
        ["name"] = "ASC"
    }), BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "7124",
        ["updateTime"] = "DESC"
    })},
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "7116",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "7117",
                ["objectType"] = "Files"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "7118",
                ["entityType"] = "azure_blob_path"
            }
        }
    }),
    Facets = {new SearchFacetItem
    {
        Count = 0,
        Facet = "assetType",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "classification",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "contactId",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "label",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "term",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }},
};
Response<QueryResult> response = await client.QueryAsync(body);
]]></code>
This sample shows how to call QueryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Keywords = "exampledata",
    Limit = 2,
    ContinuationToken = "<token>",
    Orderby = {BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "7209",
        ["name"] = "ASC"
    }), BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "7211",
        ["updateTime"] = "DESC"
    })},
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "7202",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "7203",
                ["objectType"] = "Files"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "7204",
                ["entityType"] = "azure_blob_path"
            }
        }
    }),
    Facets = {new SearchFacetItem
    {
        Count = 0,
        Facet = "assetType",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "classification",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "contactId",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "label",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "term",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }},
};
Response<QueryResult> response = await client.QueryAsync(body);
]]></code>
This sample shows how to call QueryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Limit = 10,
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "7288",
        ["or"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "7289",
                ["createTime"] = new Dictionary<string, object>
                {
                    ["$id"] = "7290",
                    ["operator"] = "lt",
                    ["timeThreshold"] = 1545580800000L
                }
            },
            new Dictionary<string, object>
            {
                ["$id"] = "7291",
                ["updateTime"] = "LAST_24H|LAST_7D|LAST_30D|LAST_365D|MORE_THAN_365D"
            }
        }
    }),
};
Response<QueryResult> response = await client.QueryAsync(body);
]]></code>
This sample shows how to call QueryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Keywords = "exampledata",
    Limit = 10,
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "7324",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "7325",
                ["objectType"] = "Files"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "7326",
                ["not"] = new Dictionary<string, object>
                {
                    ["$id"] = "7327",
                    ["or"] = new object[]
                    {
                        new Dictionary<string, object>
                        {
                            ["$id"] = "7328",
                            ["attributeName"] = "size",
                            ["operator"] = "eq",
                            ["attributeValue"] = 0
                        },
                        new Dictionary<string, object>
                        {
                            ["$id"] = "7329",
                            ["attributeName"] = "fileSize",
                            ["operator"] = "eq",
                            ["attributeValue"] = 0
                        }
                    }
                }
            },
            new Dictionary<string, object>
            {
                ["$id"] = "7330",
                ["not"] = new Dictionary<string, object>
                {
                    ["$id"] = "7331",
                    ["classification"] = "MICROSOFT.SYSTEM.TEMP_FILE"
                }
            }
        }
    }),
    TaxonomySetting = new SearchTaxonomySetting
    {
        AssetTypes = { "Azure Blob Storage" },
        Facet = new SearchFacetItem
        {
            Count = 10,
            Sort = new SearchFacetSort
            {
                Count = SearchSortOrder.Descend,
            },
        },
    },
};
Response<QueryResult> response = await client.QueryAsync(body);
]]></code>
This sample shows how to call QueryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Keywords = "<asset name>",
    Limit = 3,
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "7385",
        ["or"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "7386",
                ["term"] = "ExampleTerm"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "7387",
                ["term"] = "ExampleTerm",
                ["glossary"] = "GlossaryName"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "7388",
                ["termGuid"] = "<term guid>"
            }
        }
    }),
};
Response<QueryResult> response = await client.QueryAsync(body);
]]></code>
This sample shows how to call QueryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Limit = 10,
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "7421",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "7422",
                ["entityType"] = "azure_blob_path",
                ["includeSubTypes"] = false
            }
        }
    }),
};
Response<QueryResult> response = await client.QueryAsync(body);
]]></code></example>
    </member>
    <member name="Query(QueryConfig,CancellationToken)">
      <example>
This sample shows how to call Query.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Keywords = "exampledata",
    Limit = 10,
    Orderby = {BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "6215",
        ["name"] = "ASC"
    }), BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "6217",
        ["updateTime"] = "DESC"
    })},
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "6209",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6210",
                ["objectType"] = "Files"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6211",
                ["entityType"] = "azure_blob_path"
            }
        }
    }),
    Facets = {new SearchFacetItem
    {
        Count = 0,
        Facet = "assetType",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "classification",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "contactId",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "label",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "term",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }},
};
Response<QueryResult> response = client.Query(body);
]]></code>
This sample shows how to call Query.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Limit = 10,
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "6294",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6295",
                ["entityType"] = "azure_blob_path"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6296",
                ["attributeName"] = "qualifiedName",
                ["operator"] = "contains",
                ["attributeValue"] = ".csv"
            }
        }
    }),
};
Response<QueryResult> response = client.Query(body);
]]></code>
This sample shows how to call Query.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Limit = 10,
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "6347",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6348",
                ["entityType"] = "azure_blob_path"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6349",
                ["attributeName"] = "qualifiedName",
                ["operator"] = "contains",
                ["attributeValue"] = ".csv"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6350",
                ["or"] = new object[]
                {
                    new Dictionary<string, object>
                    {
                        ["$id"] = "6351",
                        ["attributeName"] = "name",
                        ["operator"] = "eq",
                        ["attributeValue"] = "exampledata.csv"
                    },
                    new Dictionary<string, object>
                    {
                        ["$id"] = "6352",
                        ["attributeName"] = "qualifiedName",
                        ["operator"] = "prefix",
                        ["attributeValue"] = "https://"
                    }
                }
            }
        }
    }),
};
Response<QueryResult> response = client.Query(body);
]]></code>
This sample shows how to call Query.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Limit = 10,
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "6405",
        ["or"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6406",
                ["assetType"] = "SQL Server"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6407",
                ["assetType"] = "Azure SQL Server"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6408",
                ["assetType"] = "Azure SQL Database"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6409",
                ["assetType"] = "Azure SQL Data Warehouse"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6410",
                ["assetType"] = "Azure SQL Managed Instance"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6411",
                ["assetType"] = "Azure Storage Account"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6412",
                ["assetType"] = "Azure Blob Storage"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6413",
                ["assetType"] = "Azure Files"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6414",
                ["assetType"] = "Azure Table Storage"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6415",
                ["assetType"] = "Azure Data Lake Storage Gen1"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6416",
                ["assetType"] = "Azure Data Lake Storage Gen2"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6417",
                ["assetType"] = "Azure Cosmos DB"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6418",
                ["assetType"] = "Azure Data Factory"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6419",
                ["assetType"] = "Azure Cognitive Search"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6420",
                ["assetType"] = "Power BI"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6421",
                ["assetType"] = "Azure Data Explorer"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6422",
                ["assetType"] = "Amazon S3"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6423",
                ["assetType"] = "Azure Data Share"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6424",
                ["assetType"] = "Teradata"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6425",
                ["assetType"] = "SAP S4HANA"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6426",
                ["assetType"] = "SAP ECC"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6427",
                ["assetType"] = "SQL Server Integration Services"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6428",
                ["assetType"] = "hive"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6429",
                ["assetType"] = "Azure Database for MySQL"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6430",
                ["assetType"] = "Azure Database for MariaDB"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6431",
                ["assetType"] = "Azure Database for PostgreSQL"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6432",
                ["assetType"] = "Azure Synapse Analytics"
            }
        }
    }),
};
Response<QueryResult> response = client.Query(body);
]]></code>
This sample shows how to call Query.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Limit = 10,
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "6474",
        ["or"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6475",
                ["attributeName"] = "name",
                ["operator"] = "eq",
                ["attributeValue"] = "exampledata.csv"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6476",
                ["attributeName"] = "createTime",
                ["operator"] = "ge",
                ["attributeValue"] = 1545580800000L
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6477",
                ["attributeName"] = "modifiedTime",
                ["operator"] = "timerange",
                ["attributeValue"] = "LAST_24H|LAST_7D|LAST_30D|LAST_365D|MORE_THAN_365D"
            }
        }
    }),
};
Response<QueryResult> response = client.Query(body);
]]></code>
This sample shows how to call Query.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Limit = 10,
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "6539",
        ["or"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6540",
                ["attributeName"] = "<BusinessMetadataName>.<StringAttributeName>",
                ["operator"] = "eq|ne|contains|prefix",
                ["attributeValue"] = "string value"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6541",
                ["attributeName"] = "<BusinessMetadataName>.<NumberAttributeName>",
                ["operator"] = "eq|ne|gt|ge|lt|le",
                ["attributeValue"] = 123
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6542",
                ["attributeName"] = "<BusinessMetadataName>.<BooleanAttributeName>",
                ["operator"] = "eq|ne",
                ["attributeValue"] = true
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6543",
                ["attributeName"] = "<BusinessMetadataName>.<DateAttributeName>",
                ["operator"] = "timerange",
                ["attributeValue"] = "LAST_24H|LAST_7D|LAST_30D|LAST_365D|MORE_THAN_365D"
            }
        }
    }),
};
Response<QueryResult> response = client.Query(body);
]]></code>
This sample shows how to call Query.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Limit = 10,
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "6566",
        ["classification"] = "MICROSOFT.PERSONAL.EMAIL",
        ["includeSubClassifications"] = true
    }),
};
Response<QueryResult> response = client.Query(body);
]]></code>
This sample shows how to call Query.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Limit = 10,
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "6616",
        ["collectionId"] = "collectionName"
    }),
};
Response<QueryResult> response = client.Query(body);
]]></code>
This sample shows how to call Query.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Limit = 10,
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "6665",
        ["objectType"] = "Tables"
    }),
    Facets = {new SearchFacetItem
    {
        Count = 10,
        Facet = "assetType",
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "classification",
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "term",
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "label",
    }},
};
Response<QueryResult> response = client.Query(body);
]]></code>
This sample shows how to call Query.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Limit = 10,
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "6795",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6796",
                ["fileExtension"] = "txt"
            }
        }
    }),
};
Response<QueryResult> response = client.Query(body);
]]></code>
This sample shows how to call Query.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Keywords = "<term name>",
    Limit = 10,
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "6839",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6840",
                ["objectType"] = "Glossary terms"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6841",
                ["or"] = new object[]
                {
                    new Dictionary<string, object>
                    {
                        ["$id"] = "6842",
                        ["glossaryType"] = "AtlasGlossary"
                    },
                    new Dictionary<string, object>
                    {
                        ["$id"] = "6843",
                        ["glossaryType"] = "AtlasGlossaryTerm"
                    }
                }
            }
        }
    }),
    Facets = {new SearchFacetItem
    {
        Count = 10,
        Facet = "termStatus",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "termTemplate",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }},
};
Response<QueryResult> response = client.Query(body);
]]></code>
This sample shows how to call Query.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Limit = 10,
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "6911",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6912",
                ["id"] = "bfecbcc3-1838-45fe-96d6-112de8a170f9"
            }
        }
    }),
};
Response<QueryResult> response = client.Query(body);
]]></code>
This sample shows how to call Query.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Limit = 10,
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "6940",
        ["not"] = new Dictionary<string, object>
        {
            ["$id"] = "6941",
            ["classification"] = "MICROSOFT.SYSTEM.TEMP_FILE"
        }
    }),
};
Response<QueryResult> response = client.Query(body);
]]></code>
This sample shows how to call Query.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Limit = 10,
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "6983",
        ["or"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6984",
                ["objectType"] = "Dashboards"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6985",
                ["objectType"] = "Data pipelines"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6986",
                ["objectType"] = "Files"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6987",
                ["objectType"] = "Folders"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6988",
                ["objectType"] = "Glossary terms"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6989",
                ["objectType"] = "Reports"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6990",
                ["objectType"] = "Stored procedures"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6991",
                ["objectType"] = "Tables"
            }
        }
    }),
};
Response<QueryResult> response = client.Query(body);
]]></code>
This sample shows how to call Query.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Keywords = "exampledata",
    Limit = 2,
    ContinuationToken = "<token>",
    Orderby = {BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "7036",
        ["name"] = "ASC"
    }), BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "7038",
        ["updateTime"] = "DESC"
    })},
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "7029",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "7030",
                ["objectType"] = "Files"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "7031",
                ["entityType"] = "azure_blob_path"
            }
        }
    }),
    Facets = {new SearchFacetItem
    {
        Count = 0,
        Facet = "assetType",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "classification",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "contactId",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "label",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "term",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }},
};
Response<QueryResult> response = client.Query(body);
]]></code>
This sample shows how to call Query.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Keywords = "exampledata",
    Limit = 2,
    Orderby = {BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "7122",
        ["name"] = "ASC"
    }), BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "7124",
        ["updateTime"] = "DESC"
    })},
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "7116",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "7117",
                ["objectType"] = "Files"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "7118",
                ["entityType"] = "azure_blob_path"
            }
        }
    }),
    Facets = {new SearchFacetItem
    {
        Count = 0,
        Facet = "assetType",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "classification",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "contactId",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "label",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "term",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }},
};
Response<QueryResult> response = client.Query(body);
]]></code>
This sample shows how to call Query.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Keywords = "exampledata",
    Limit = 2,
    ContinuationToken = "<token>",
    Orderby = {BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "7209",
        ["name"] = "ASC"
    }), BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "7211",
        ["updateTime"] = "DESC"
    })},
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "7202",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "7203",
                ["objectType"] = "Files"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "7204",
                ["entityType"] = "azure_blob_path"
            }
        }
    }),
    Facets = {new SearchFacetItem
    {
        Count = 0,
        Facet = "assetType",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "classification",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "contactId",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "label",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }, new SearchFacetItem
    {
        Count = 10,
        Facet = "term",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Descend,
        },
    }},
};
Response<QueryResult> response = client.Query(body);
]]></code>
This sample shows how to call Query.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Limit = 10,
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "7288",
        ["or"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "7289",
                ["createTime"] = new Dictionary<string, object>
                {
                    ["$id"] = "7290",
                    ["operator"] = "lt",
                    ["timeThreshold"] = 1545580800000L
                }
            },
            new Dictionary<string, object>
            {
                ["$id"] = "7291",
                ["updateTime"] = "LAST_24H|LAST_7D|LAST_30D|LAST_365D|MORE_THAN_365D"
            }
        }
    }),
};
Response<QueryResult> response = client.Query(body);
]]></code>
This sample shows how to call Query.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Keywords = "exampledata",
    Limit = 10,
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "7324",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "7325",
                ["objectType"] = "Files"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "7326",
                ["not"] = new Dictionary<string, object>
                {
                    ["$id"] = "7327",
                    ["or"] = new object[]
                    {
                        new Dictionary<string, object>
                        {
                            ["$id"] = "7328",
                            ["attributeName"] = "size",
                            ["operator"] = "eq",
                            ["attributeValue"] = 0
                        },
                        new Dictionary<string, object>
                        {
                            ["$id"] = "7329",
                            ["attributeName"] = "fileSize",
                            ["operator"] = "eq",
                            ["attributeValue"] = 0
                        }
                    }
                }
            },
            new Dictionary<string, object>
            {
                ["$id"] = "7330",
                ["not"] = new Dictionary<string, object>
                {
                    ["$id"] = "7331",
                    ["classification"] = "MICROSOFT.SYSTEM.TEMP_FILE"
                }
            }
        }
    }),
    TaxonomySetting = new SearchTaxonomySetting
    {
        AssetTypes = { "Azure Blob Storage" },
        Facet = new SearchFacetItem
        {
            Count = 10,
            Sort = new SearchFacetSort
            {
                Count = SearchSortOrder.Descend,
            },
        },
    },
};
Response<QueryResult> response = client.Query(body);
]]></code>
This sample shows how to call Query.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Keywords = "<asset name>",
    Limit = 3,
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "7385",
        ["or"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "7386",
                ["term"] = "ExampleTerm"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "7387",
                ["term"] = "ExampleTerm",
                ["glossary"] = "GlossaryName"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "7388",
                ["termGuid"] = "<term guid>"
            }
        }
    }),
};
Response<QueryResult> response = client.Query(body);
]]></code>
This sample shows how to call Query.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig body = new QueryConfig
{
    Limit = 10,
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "7421",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "7422",
                ["entityType"] = "azure_blob_path",
                ["includeSubTypes"] = false
            }
        }
    }),
};
Response<QueryResult> response = client.Query(body);
]]></code></example>
    </member>
    <member name="QueryAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call QueryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    keywords = "exampledata",
    filter = new Dictionary<string, object>
    {
        ["$id"] = "6209",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6210",
                ["objectType"] = "Files"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6211",
                ["entityType"] = "azure_blob_path"
            }
        }
    },
    limit = 10,
    orderby = new object[]
    {
        new Dictionary<string, object>
        {
            ["$id"] = "6215",
            ["name"] = "ASC"
        },
        new Dictionary<string, object>
        {
            ["$id"] = "6217",
            ["updateTime"] = "DESC"
        }
    },
    facets = new object[]
    {
        new
        {
            facet = "assetType",
            count = 0,
            sort = new
            {
                count = "desc",
            },
        },
        new
        {
            facet = "classification",
            count = 10,
            sort = new
            {
                count = "desc",
            },
        },
        new
        {
            facet = "contactId",
            count = 10,
            sort = new
            {
                count = "desc",
            },
        },
        new
        {
            facet = "label",
            count = 10,
            sort = new
            {
                count = "desc",
            },
        },
        new
        {
            facet = "term",
            count = 10,
            sort = new
            {
                count = "desc",
            },
        }
    },
});
Response response = await client.QueryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call QueryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    limit = 10,
    filter = new Dictionary<string, object>
    {
        ["$id"] = "6294",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6295",
                ["entityType"] = "azure_blob_path"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6296",
                ["attributeName"] = "qualifiedName",
                ["operator"] = "contains",
                ["attributeValue"] = ".csv"
            }
        }
    },
});
Response response = await client.QueryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call QueryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    limit = 10,
    filter = new Dictionary<string, object>
    {
        ["$id"] = "6347",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6348",
                ["entityType"] = "azure_blob_path"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6349",
                ["attributeName"] = "qualifiedName",
                ["operator"] = "contains",
                ["attributeValue"] = ".csv"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6350",
                ["or"] = new object[]
                {
                    new Dictionary<string, object>
                    {
                        ["$id"] = "6351",
                        ["attributeName"] = "name",
                        ["operator"] = "eq",
                        ["attributeValue"] = "exampledata.csv"
                    },
                    new Dictionary<string, object>
                    {
                        ["$id"] = "6352",
                        ["attributeName"] = "qualifiedName",
                        ["operator"] = "prefix",
                        ["attributeValue"] = "https://"
                    }
                }
            }
        }
    },
});
Response response = await client.QueryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call QueryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    limit = 10,
    filter = new Dictionary<string, object>
    {
        ["$id"] = "6405",
        ["or"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6406",
                ["assetType"] = "SQL Server"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6407",
                ["assetType"] = "Azure SQL Server"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6408",
                ["assetType"] = "Azure SQL Database"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6409",
                ["assetType"] = "Azure SQL Data Warehouse"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6410",
                ["assetType"] = "Azure SQL Managed Instance"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6411",
                ["assetType"] = "Azure Storage Account"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6412",
                ["assetType"] = "Azure Blob Storage"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6413",
                ["assetType"] = "Azure Files"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6414",
                ["assetType"] = "Azure Table Storage"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6415",
                ["assetType"] = "Azure Data Lake Storage Gen1"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6416",
                ["assetType"] = "Azure Data Lake Storage Gen2"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6417",
                ["assetType"] = "Azure Cosmos DB"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6418",
                ["assetType"] = "Azure Data Factory"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6419",
                ["assetType"] = "Azure Cognitive Search"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6420",
                ["assetType"] = "Power BI"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6421",
                ["assetType"] = "Azure Data Explorer"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6422",
                ["assetType"] = "Amazon S3"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6423",
                ["assetType"] = "Azure Data Share"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6424",
                ["assetType"] = "Teradata"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6425",
                ["assetType"] = "SAP S4HANA"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6426",
                ["assetType"] = "SAP ECC"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6427",
                ["assetType"] = "SQL Server Integration Services"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6428",
                ["assetType"] = "hive"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6429",
                ["assetType"] = "Azure Database for MySQL"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6430",
                ["assetType"] = "Azure Database for MariaDB"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6431",
                ["assetType"] = "Azure Database for PostgreSQL"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6432",
                ["assetType"] = "Azure Synapse Analytics"
            }
        }
    },
});
Response response = await client.QueryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call QueryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    limit = 10,
    filter = new Dictionary<string, object>
    {
        ["$id"] = "6474",
        ["or"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6475",
                ["attributeName"] = "name",
                ["operator"] = "eq",
                ["attributeValue"] = "exampledata.csv"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6476",
                ["attributeName"] = "createTime",
                ["operator"] = "ge",
                ["attributeValue"] = 1545580800000L
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6477",
                ["attributeName"] = "modifiedTime",
                ["operator"] = "timerange",
                ["attributeValue"] = "LAST_24H|LAST_7D|LAST_30D|LAST_365D|MORE_THAN_365D"
            }
        }
    },
});
Response response = await client.QueryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call QueryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    limit = 10,
    filter = new Dictionary<string, object>
    {
        ["$id"] = "6539",
        ["or"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6540",
                ["attributeName"] = "<BusinessMetadataName>.<StringAttributeName>",
                ["operator"] = "eq|ne|contains|prefix",
                ["attributeValue"] = "string value"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6541",
                ["attributeName"] = "<BusinessMetadataName>.<NumberAttributeName>",
                ["operator"] = "eq|ne|gt|ge|lt|le",
                ["attributeValue"] = 123
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6542",
                ["attributeName"] = "<BusinessMetadataName>.<BooleanAttributeName>",
                ["operator"] = "eq|ne",
                ["attributeValue"] = true
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6543",
                ["attributeName"] = "<BusinessMetadataName>.<DateAttributeName>",
                ["operator"] = "timerange",
                ["attributeValue"] = "LAST_24H|LAST_7D|LAST_30D|LAST_365D|MORE_THAN_365D"
            }
        }
    },
});
Response response = await client.QueryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call QueryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    limit = 10,
    filter = new Dictionary<string, object>
    {
        ["$id"] = "6566",
        ["classification"] = "MICROSOFT.PERSONAL.EMAIL",
        ["includeSubClassifications"] = true
    },
});
Response response = await client.QueryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call QueryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    limit = 10,
    filter = new Dictionary<string, object>
    {
        ["$id"] = "6616",
        ["collectionId"] = "collectionName"
    },
});
Response response = await client.QueryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call QueryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    filter = new Dictionary<string, object>
    {
        ["$id"] = "6665",
        ["objectType"] = "Tables"
    },
    limit = 10,
    facets = new object[]
    {
        new
        {
            facet = "assetType",
            count = 10,
        },
        new
        {
            facet = "classification",
            count = 10,
        },
        new
        {
            facet = "term",
            count = 10,
        },
        new
        {
            facet = "label",
            count = 10,
        }
    },
});
Response response = await client.QueryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call QueryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    limit = 10,
    filter = new Dictionary<string, object>
    {
        ["$id"] = "6795",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6796",
                ["fileExtension"] = "txt"
            }
        }
    },
});
Response response = await client.QueryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call QueryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    keywords = "<term name>",
    limit = 10,
    filter = new Dictionary<string, object>
    {
        ["$id"] = "6839",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6840",
                ["objectType"] = "Glossary terms"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6841",
                ["or"] = new object[]
                {
                    new Dictionary<string, object>
                    {
                        ["$id"] = "6842",
                        ["glossaryType"] = "AtlasGlossary"
                    },
                    new Dictionary<string, object>
                    {
                        ["$id"] = "6843",
                        ["glossaryType"] = "AtlasGlossaryTerm"
                    }
                }
            }
        }
    },
    facets = new object[]
    {
        new
        {
            facet = "termStatus",
            count = 10,
            sort = new
            {
                count = "desc",
            },
        },
        new
        {
            facet = "termTemplate",
            count = 10,
            sort = new
            {
                count = "desc",
            },
        }
    },
});
Response response = await client.QueryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call QueryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    limit = 10,
    filter = new Dictionary<string, object>
    {
        ["$id"] = "6911",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6912",
                ["id"] = "bfecbcc3-1838-45fe-96d6-112de8a170f9"
            }
        }
    },
});
Response response = await client.QueryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call QueryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    limit = 10,
    filter = new Dictionary<string, object>
    {
        ["$id"] = "6940",
        ["not"] = new Dictionary<string, object>
        {
            ["$id"] = "6941",
            ["classification"] = "MICROSOFT.SYSTEM.TEMP_FILE"
        }
    },
});
Response response = await client.QueryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call QueryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    limit = 10,
    filter = new Dictionary<string, object>
    {
        ["$id"] = "6983",
        ["or"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6984",
                ["objectType"] = "Dashboards"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6985",
                ["objectType"] = "Data pipelines"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6986",
                ["objectType"] = "Files"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6987",
                ["objectType"] = "Folders"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6988",
                ["objectType"] = "Glossary terms"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6989",
                ["objectType"] = "Reports"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6990",
                ["objectType"] = "Stored procedures"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6991",
                ["objectType"] = "Tables"
            }
        }
    },
});
Response response = await client.QueryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call QueryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    keywords = "exampledata",
    filter = new Dictionary<string, object>
    {
        ["$id"] = "7029",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "7030",
                ["objectType"] = "Files"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "7031",
                ["entityType"] = "azure_blob_path"
            }
        }
    },
    limit = 2,
    continuationToken = "<token>",
    orderby = new object[]
    {
        new Dictionary<string, object>
        {
            ["$id"] = "7036",
            ["name"] = "ASC"
        },
        new Dictionary<string, object>
        {
            ["$id"] = "7038",
            ["updateTime"] = "DESC"
        }
    },
    facets = new object[]
    {
        new
        {
            facet = "assetType",
            count = 0,
            sort = new
            {
                count = "desc",
            },
        },
        new
        {
            facet = "classification",
            count = 10,
            sort = new
            {
                count = "desc",
            },
        },
        new
        {
            facet = "contactId",
            count = 10,
            sort = new
            {
                count = "desc",
            },
        },
        new
        {
            facet = "label",
            count = 10,
            sort = new
            {
                count = "desc",
            },
        },
        new
        {
            facet = "term",
            count = 10,
            sort = new
            {
                count = "desc",
            },
        }
    },
});
Response response = await client.QueryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call QueryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    keywords = "exampledata",
    filter = new Dictionary<string, object>
    {
        ["$id"] = "7116",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "7117",
                ["objectType"] = "Files"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "7118",
                ["entityType"] = "azure_blob_path"
            }
        }
    },
    limit = 2,
    orderby = new object[]
    {
        new Dictionary<string, object>
        {
            ["$id"] = "7122",
            ["name"] = "ASC"
        },
        new Dictionary<string, object>
        {
            ["$id"] = "7124",
            ["updateTime"] = "DESC"
        }
    },
    facets = new object[]
    {
        new
        {
            facet = "assetType",
            count = 0,
            sort = new
            {
                count = "desc",
            },
        },
        new
        {
            facet = "classification",
            count = 10,
            sort = new
            {
                count = "desc",
            },
        },
        new
        {
            facet = "contactId",
            count = 10,
            sort = new
            {
                count = "desc",
            },
        },
        new
        {
            facet = "label",
            count = 10,
            sort = new
            {
                count = "desc",
            },
        },
        new
        {
            facet = "term",
            count = 10,
            sort = new
            {
                count = "desc",
            },
        }
    },
});
Response response = await client.QueryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call QueryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    keywords = "exampledata",
    filter = new Dictionary<string, object>
    {
        ["$id"] = "7202",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "7203",
                ["objectType"] = "Files"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "7204",
                ["entityType"] = "azure_blob_path"
            }
        }
    },
    limit = 2,
    continuationToken = "<token>",
    orderby = new object[]
    {
        new Dictionary<string, object>
        {
            ["$id"] = "7209",
            ["name"] = "ASC"
        },
        new Dictionary<string, object>
        {
            ["$id"] = "7211",
            ["updateTime"] = "DESC"
        }
    },
    facets = new object[]
    {
        new
        {
            facet = "assetType",
            count = 0,
            sort = new
            {
                count = "desc",
            },
        },
        new
        {
            facet = "classification",
            count = 10,
            sort = new
            {
                count = "desc",
            },
        },
        new
        {
            facet = "contactId",
            count = 10,
            sort = new
            {
                count = "desc",
            },
        },
        new
        {
            facet = "label",
            count = 10,
            sort = new
            {
                count = "desc",
            },
        },
        new
        {
            facet = "term",
            count = 10,
            sort = new
            {
                count = "desc",
            },
        }
    },
});
Response response = await client.QueryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call QueryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    limit = 10,
    filter = new Dictionary<string, object>
    {
        ["$id"] = "7288",
        ["or"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "7289",
                ["createTime"] = new Dictionary<string, object>
                {
                    ["$id"] = "7290",
                    ["operator"] = "lt",
                    ["timeThreshold"] = 1545580800000L
                }
            },
            new Dictionary<string, object>
            {
                ["$id"] = "7291",
                ["updateTime"] = "LAST_24H|LAST_7D|LAST_30D|LAST_365D|MORE_THAN_365D"
            }
        }
    },
});
Response response = await client.QueryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call QueryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    keywords = "exampledata",
    filter = new Dictionary<string, object>
    {
        ["$id"] = "7324",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "7325",
                ["objectType"] = "Files"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "7326",
                ["not"] = new Dictionary<string, object>
                {
                    ["$id"] = "7327",
                    ["or"] = new object[]
                    {
                        new Dictionary<string, object>
                        {
                            ["$id"] = "7328",
                            ["attributeName"] = "size",
                            ["operator"] = "eq",
                            ["attributeValue"] = 0
                        },
                        new Dictionary<string, object>
                        {
                            ["$id"] = "7329",
                            ["attributeName"] = "fileSize",
                            ["operator"] = "eq",
                            ["attributeValue"] = 0
                        }
                    }
                }
            },
            new Dictionary<string, object>
            {
                ["$id"] = "7330",
                ["not"] = new Dictionary<string, object>
                {
                    ["$id"] = "7331",
                    ["classification"] = "MICROSOFT.SYSTEM.TEMP_FILE"
                }
            }
        }
    },
    limit = 10,
    taxonomySetting = new
    {
        assetTypes = new object[]
        {
            "Azure Blob Storage"
        },
        facet = new
        {
            count = 10,
            sort = new
            {
                count = "desc",
            },
        },
    },
});
Response response = await client.QueryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call QueryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    keywords = "<asset name>",
    limit = 3,
    filter = new Dictionary<string, object>
    {
        ["$id"] = "7385",
        ["or"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "7386",
                ["term"] = "ExampleTerm"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "7387",
                ["term"] = "ExampleTerm",
                ["glossary"] = "GlossaryName"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "7388",
                ["termGuid"] = "<term guid>"
            }
        }
    },
});
Response response = await client.QueryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call QueryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    limit = 10,
    filter = new Dictionary<string, object>
    {
        ["$id"] = "7421",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "7422",
                ["entityType"] = "azure_blob_path",
                ["includeSubTypes"] = false
            }
        }
    },
});
Response response = await client.QueryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="Query(RequestContent,RequestContext)">
      <example>
This sample shows how to call Query and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    keywords = "exampledata",
    filter = new Dictionary<string, object>
    {
        ["$id"] = "6209",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6210",
                ["objectType"] = "Files"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6211",
                ["entityType"] = "azure_blob_path"
            }
        }
    },
    limit = 10,
    orderby = new object[]
    {
        new Dictionary<string, object>
        {
            ["$id"] = "6215",
            ["name"] = "ASC"
        },
        new Dictionary<string, object>
        {
            ["$id"] = "6217",
            ["updateTime"] = "DESC"
        }
    },
    facets = new object[]
    {
        new
        {
            facet = "assetType",
            count = 0,
            sort = new
            {
                count = "desc",
            },
        },
        new
        {
            facet = "classification",
            count = 10,
            sort = new
            {
                count = "desc",
            },
        },
        new
        {
            facet = "contactId",
            count = 10,
            sort = new
            {
                count = "desc",
            },
        },
        new
        {
            facet = "label",
            count = 10,
            sort = new
            {
                count = "desc",
            },
        },
        new
        {
            facet = "term",
            count = 10,
            sort = new
            {
                count = "desc",
            },
        }
    },
});
Response response = client.Query(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Query and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    limit = 10,
    filter = new Dictionary<string, object>
    {
        ["$id"] = "6294",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6295",
                ["entityType"] = "azure_blob_path"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6296",
                ["attributeName"] = "qualifiedName",
                ["operator"] = "contains",
                ["attributeValue"] = ".csv"
            }
        }
    },
});
Response response = client.Query(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Query and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    limit = 10,
    filter = new Dictionary<string, object>
    {
        ["$id"] = "6347",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6348",
                ["entityType"] = "azure_blob_path"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6349",
                ["attributeName"] = "qualifiedName",
                ["operator"] = "contains",
                ["attributeValue"] = ".csv"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6350",
                ["or"] = new object[]
                {
                    new Dictionary<string, object>
                    {
                        ["$id"] = "6351",
                        ["attributeName"] = "name",
                        ["operator"] = "eq",
                        ["attributeValue"] = "exampledata.csv"
                    },
                    new Dictionary<string, object>
                    {
                        ["$id"] = "6352",
                        ["attributeName"] = "qualifiedName",
                        ["operator"] = "prefix",
                        ["attributeValue"] = "https://"
                    }
                }
            }
        }
    },
});
Response response = client.Query(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Query and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    limit = 10,
    filter = new Dictionary<string, object>
    {
        ["$id"] = "6405",
        ["or"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6406",
                ["assetType"] = "SQL Server"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6407",
                ["assetType"] = "Azure SQL Server"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6408",
                ["assetType"] = "Azure SQL Database"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6409",
                ["assetType"] = "Azure SQL Data Warehouse"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6410",
                ["assetType"] = "Azure SQL Managed Instance"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6411",
                ["assetType"] = "Azure Storage Account"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6412",
                ["assetType"] = "Azure Blob Storage"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6413",
                ["assetType"] = "Azure Files"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6414",
                ["assetType"] = "Azure Table Storage"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6415",
                ["assetType"] = "Azure Data Lake Storage Gen1"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6416",
                ["assetType"] = "Azure Data Lake Storage Gen2"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6417",
                ["assetType"] = "Azure Cosmos DB"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6418",
                ["assetType"] = "Azure Data Factory"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6419",
                ["assetType"] = "Azure Cognitive Search"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6420",
                ["assetType"] = "Power BI"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6421",
                ["assetType"] = "Azure Data Explorer"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6422",
                ["assetType"] = "Amazon S3"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6423",
                ["assetType"] = "Azure Data Share"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6424",
                ["assetType"] = "Teradata"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6425",
                ["assetType"] = "SAP S4HANA"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6426",
                ["assetType"] = "SAP ECC"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6427",
                ["assetType"] = "SQL Server Integration Services"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6428",
                ["assetType"] = "hive"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6429",
                ["assetType"] = "Azure Database for MySQL"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6430",
                ["assetType"] = "Azure Database for MariaDB"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6431",
                ["assetType"] = "Azure Database for PostgreSQL"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6432",
                ["assetType"] = "Azure Synapse Analytics"
            }
        }
    },
});
Response response = client.Query(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Query and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    limit = 10,
    filter = new Dictionary<string, object>
    {
        ["$id"] = "6474",
        ["or"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6475",
                ["attributeName"] = "name",
                ["operator"] = "eq",
                ["attributeValue"] = "exampledata.csv"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6476",
                ["attributeName"] = "createTime",
                ["operator"] = "ge",
                ["attributeValue"] = 1545580800000L
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6477",
                ["attributeName"] = "modifiedTime",
                ["operator"] = "timerange",
                ["attributeValue"] = "LAST_24H|LAST_7D|LAST_30D|LAST_365D|MORE_THAN_365D"
            }
        }
    },
});
Response response = client.Query(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Query and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    limit = 10,
    filter = new Dictionary<string, object>
    {
        ["$id"] = "6539",
        ["or"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6540",
                ["attributeName"] = "<BusinessMetadataName>.<StringAttributeName>",
                ["operator"] = "eq|ne|contains|prefix",
                ["attributeValue"] = "string value"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6541",
                ["attributeName"] = "<BusinessMetadataName>.<NumberAttributeName>",
                ["operator"] = "eq|ne|gt|ge|lt|le",
                ["attributeValue"] = 123
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6542",
                ["attributeName"] = "<BusinessMetadataName>.<BooleanAttributeName>",
                ["operator"] = "eq|ne",
                ["attributeValue"] = true
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6543",
                ["attributeName"] = "<BusinessMetadataName>.<DateAttributeName>",
                ["operator"] = "timerange",
                ["attributeValue"] = "LAST_24H|LAST_7D|LAST_30D|LAST_365D|MORE_THAN_365D"
            }
        }
    },
});
Response response = client.Query(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Query and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    limit = 10,
    filter = new Dictionary<string, object>
    {
        ["$id"] = "6566",
        ["classification"] = "MICROSOFT.PERSONAL.EMAIL",
        ["includeSubClassifications"] = true
    },
});
Response response = client.Query(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Query and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    limit = 10,
    filter = new Dictionary<string, object>
    {
        ["$id"] = "6616",
        ["collectionId"] = "collectionName"
    },
});
Response response = client.Query(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Query and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    filter = new Dictionary<string, object>
    {
        ["$id"] = "6665",
        ["objectType"] = "Tables"
    },
    limit = 10,
    facets = new object[]
    {
        new
        {
            facet = "assetType",
            count = 10,
        },
        new
        {
            facet = "classification",
            count = 10,
        },
        new
        {
            facet = "term",
            count = 10,
        },
        new
        {
            facet = "label",
            count = 10,
        }
    },
});
Response response = client.Query(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Query and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    limit = 10,
    filter = new Dictionary<string, object>
    {
        ["$id"] = "6795",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6796",
                ["fileExtension"] = "txt"
            }
        }
    },
});
Response response = client.Query(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Query and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    keywords = "<term name>",
    limit = 10,
    filter = new Dictionary<string, object>
    {
        ["$id"] = "6839",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6840",
                ["objectType"] = "Glossary terms"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6841",
                ["or"] = new object[]
                {
                    new Dictionary<string, object>
                    {
                        ["$id"] = "6842",
                        ["glossaryType"] = "AtlasGlossary"
                    },
                    new Dictionary<string, object>
                    {
                        ["$id"] = "6843",
                        ["glossaryType"] = "AtlasGlossaryTerm"
                    }
                }
            }
        }
    },
    facets = new object[]
    {
        new
        {
            facet = "termStatus",
            count = 10,
            sort = new
            {
                count = "desc",
            },
        },
        new
        {
            facet = "termTemplate",
            count = 10,
            sort = new
            {
                count = "desc",
            },
        }
    },
});
Response response = client.Query(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Query and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    limit = 10,
    filter = new Dictionary<string, object>
    {
        ["$id"] = "6911",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6912",
                ["id"] = "bfecbcc3-1838-45fe-96d6-112de8a170f9"
            }
        }
    },
});
Response response = client.Query(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Query and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    limit = 10,
    filter = new Dictionary<string, object>
    {
        ["$id"] = "6940",
        ["not"] = new Dictionary<string, object>
        {
            ["$id"] = "6941",
            ["classification"] = "MICROSOFT.SYSTEM.TEMP_FILE"
        }
    },
});
Response response = client.Query(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Query and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    limit = 10,
    filter = new Dictionary<string, object>
    {
        ["$id"] = "6983",
        ["or"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "6984",
                ["objectType"] = "Dashboards"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6985",
                ["objectType"] = "Data pipelines"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6986",
                ["objectType"] = "Files"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6987",
                ["objectType"] = "Folders"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6988",
                ["objectType"] = "Glossary terms"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6989",
                ["objectType"] = "Reports"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6990",
                ["objectType"] = "Stored procedures"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "6991",
                ["objectType"] = "Tables"
            }
        }
    },
});
Response response = client.Query(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Query and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    keywords = "exampledata",
    filter = new Dictionary<string, object>
    {
        ["$id"] = "7029",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "7030",
                ["objectType"] = "Files"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "7031",
                ["entityType"] = "azure_blob_path"
            }
        }
    },
    limit = 2,
    continuationToken = "<token>",
    orderby = new object[]
    {
        new Dictionary<string, object>
        {
            ["$id"] = "7036",
            ["name"] = "ASC"
        },
        new Dictionary<string, object>
        {
            ["$id"] = "7038",
            ["updateTime"] = "DESC"
        }
    },
    facets = new object[]
    {
        new
        {
            facet = "assetType",
            count = 0,
            sort = new
            {
                count = "desc",
            },
        },
        new
        {
            facet = "classification",
            count = 10,
            sort = new
            {
                count = "desc",
            },
        },
        new
        {
            facet = "contactId",
            count = 10,
            sort = new
            {
                count = "desc",
            },
        },
        new
        {
            facet = "label",
            count = 10,
            sort = new
            {
                count = "desc",
            },
        },
        new
        {
            facet = "term",
            count = 10,
            sort = new
            {
                count = "desc",
            },
        }
    },
});
Response response = client.Query(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Query and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    keywords = "exampledata",
    filter = new Dictionary<string, object>
    {
        ["$id"] = "7116",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "7117",
                ["objectType"] = "Files"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "7118",
                ["entityType"] = "azure_blob_path"
            }
        }
    },
    limit = 2,
    orderby = new object[]
    {
        new Dictionary<string, object>
        {
            ["$id"] = "7122",
            ["name"] = "ASC"
        },
        new Dictionary<string, object>
        {
            ["$id"] = "7124",
            ["updateTime"] = "DESC"
        }
    },
    facets = new object[]
    {
        new
        {
            facet = "assetType",
            count = 0,
            sort = new
            {
                count = "desc",
            },
        },
        new
        {
            facet = "classification",
            count = 10,
            sort = new
            {
                count = "desc",
            },
        },
        new
        {
            facet = "contactId",
            count = 10,
            sort = new
            {
                count = "desc",
            },
        },
        new
        {
            facet = "label",
            count = 10,
            sort = new
            {
                count = "desc",
            },
        },
        new
        {
            facet = "term",
            count = 10,
            sort = new
            {
                count = "desc",
            },
        }
    },
});
Response response = client.Query(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Query and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    keywords = "exampledata",
    filter = new Dictionary<string, object>
    {
        ["$id"] = "7202",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "7203",
                ["objectType"] = "Files"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "7204",
                ["entityType"] = "azure_blob_path"
            }
        }
    },
    limit = 2,
    continuationToken = "<token>",
    orderby = new object[]
    {
        new Dictionary<string, object>
        {
            ["$id"] = "7209",
            ["name"] = "ASC"
        },
        new Dictionary<string, object>
        {
            ["$id"] = "7211",
            ["updateTime"] = "DESC"
        }
    },
    facets = new object[]
    {
        new
        {
            facet = "assetType",
            count = 0,
            sort = new
            {
                count = "desc",
            },
        },
        new
        {
            facet = "classification",
            count = 10,
            sort = new
            {
                count = "desc",
            },
        },
        new
        {
            facet = "contactId",
            count = 10,
            sort = new
            {
                count = "desc",
            },
        },
        new
        {
            facet = "label",
            count = 10,
            sort = new
            {
                count = "desc",
            },
        },
        new
        {
            facet = "term",
            count = 10,
            sort = new
            {
                count = "desc",
            },
        }
    },
});
Response response = client.Query(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Query and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    limit = 10,
    filter = new Dictionary<string, object>
    {
        ["$id"] = "7288",
        ["or"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "7289",
                ["createTime"] = new Dictionary<string, object>
                {
                    ["$id"] = "7290",
                    ["operator"] = "lt",
                    ["timeThreshold"] = 1545580800000L
                }
            },
            new Dictionary<string, object>
            {
                ["$id"] = "7291",
                ["updateTime"] = "LAST_24H|LAST_7D|LAST_30D|LAST_365D|MORE_THAN_365D"
            }
        }
    },
});
Response response = client.Query(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Query and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    keywords = "exampledata",
    filter = new Dictionary<string, object>
    {
        ["$id"] = "7324",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "7325",
                ["objectType"] = "Files"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "7326",
                ["not"] = new Dictionary<string, object>
                {
                    ["$id"] = "7327",
                    ["or"] = new object[]
                    {
                        new Dictionary<string, object>
                        {
                            ["$id"] = "7328",
                            ["attributeName"] = "size",
                            ["operator"] = "eq",
                            ["attributeValue"] = 0
                        },
                        new Dictionary<string, object>
                        {
                            ["$id"] = "7329",
                            ["attributeName"] = "fileSize",
                            ["operator"] = "eq",
                            ["attributeValue"] = 0
                        }
                    }
                }
            },
            new Dictionary<string, object>
            {
                ["$id"] = "7330",
                ["not"] = new Dictionary<string, object>
                {
                    ["$id"] = "7331",
                    ["classification"] = "MICROSOFT.SYSTEM.TEMP_FILE"
                }
            }
        }
    },
    limit = 10,
    taxonomySetting = new
    {
        assetTypes = new object[]
        {
            "Azure Blob Storage"
        },
        facet = new
        {
            count = 10,
            sort = new
            {
                count = "desc",
            },
        },
    },
});
Response response = client.Query(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Query and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    keywords = "<asset name>",
    limit = 3,
    filter = new Dictionary<string, object>
    {
        ["$id"] = "7385",
        ["or"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "7386",
                ["term"] = "ExampleTerm"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "7387",
                ["term"] = "ExampleTerm",
                ["glossary"] = "GlossaryName"
            },
            new Dictionary<string, object>
            {
                ["$id"] = "7388",
                ["termGuid"] = "<term guid>"
            }
        }
    },
});
Response response = client.Query(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Query and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    limit = 10,
    filter = new Dictionary<string, object>
    {
        ["$id"] = "7421",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "7422",
                ["entityType"] = "azure_blob_path",
                ["includeSubTypes"] = false
            }
        }
    },
});
Response response = client.Query(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="SuggestAsync(SuggestConfig,CancellationToken)">
      <example>
This sample shows how to call SuggestAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

SuggestConfig body = new SuggestConfig
{
    Keywords = "exampledata",
    Limit = 10,
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "7483",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "7484",
                ["entityType"] = "azure_blob_path",
                ["includeSubTypes"] = false
            }
        }
    }),
};
Response<SuggestResult> response = await client.SuggestAsync(body);
]]></code></example>
    </member>
    <member name="Suggest(SuggestConfig,CancellationToken)">
      <example>
This sample shows how to call Suggest.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

SuggestConfig body = new SuggestConfig
{
    Keywords = "exampledata",
    Limit = 10,
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "7483",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "7484",
                ["entityType"] = "azure_blob_path",
                ["includeSubTypes"] = false
            }
        }
    }),
};
Response<SuggestResult> response = client.Suggest(body);
]]></code></example>
    </member>
    <member name="SuggestAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call SuggestAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    keywords = "exampledata",
    filter = new Dictionary<string, object>
    {
        ["$id"] = "7483",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "7484",
                ["entityType"] = "azure_blob_path",
                ["includeSubTypes"] = false
            }
        }
    },
    limit = 10,
});
Response response = await client.SuggestAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="Suggest(RequestContent,RequestContext)">
      <example>
This sample shows how to call Suggest and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    keywords = "exampledata",
    filter = new Dictionary<string, object>
    {
        ["$id"] = "7483",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "7484",
                ["entityType"] = "azure_blob_path",
                ["includeSubTypes"] = false
            }
        }
    },
    limit = 10,
});
Response response = client.Suggest(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="AutoCompleteAsync(AutoCompleteConfig,CancellationToken)">
      <example>
This sample shows how to call AutoCompleteAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

AutoCompleteConfig body = new AutoCompleteConfig
{
    Keywords = "exa",
    Limit = 10,
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "7543",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "7544",
                ["entityType"] = "azure_blob_path",
                ["includeSubTypes"] = false
            }
        }
    }),
};
Response<AutoCompleteResult> response = await client.AutoCompleteAsync(body);
]]></code></example>
    </member>
    <member name="AutoComplete(AutoCompleteConfig,CancellationToken)">
      <example>
This sample shows how to call AutoComplete.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

AutoCompleteConfig body = new AutoCompleteConfig
{
    Keywords = "exa",
    Limit = 10,
    Filter = BinaryData.FromObjectAsJson(new Dictionary<string, object>
    {
        ["$id"] = "7543",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "7544",
                ["entityType"] = "azure_blob_path",
                ["includeSubTypes"] = false
            }
        }
    }),
};
Response<AutoCompleteResult> response = client.AutoComplete(body);
]]></code></example>
    </member>
    <member name="AutoCompleteAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call AutoCompleteAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    keywords = "exa",
    filter = new Dictionary<string, object>
    {
        ["$id"] = "7543",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "7544",
                ["entityType"] = "azure_blob_path",
                ["includeSubTypes"] = false
            }
        }
    },
    limit = 10,
});
Response response = await client.AutoCompleteAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="AutoComplete(RequestContent,RequestContext)">
      <example>
This sample shows how to call AutoComplete and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    keywords = "exa",
    filter = new Dictionary<string, object>
    {
        ["$id"] = "7543",
        ["and"] = new object[]
        {
            new Dictionary<string, object>
            {
                ["$id"] = "7544",
                ["entityType"] = "azure_blob_path",
                ["includeSubTypes"] = false
            }
        }
    },
    limit = 10,
});
Response response = client.AutoComplete(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
  </members>
</doc>