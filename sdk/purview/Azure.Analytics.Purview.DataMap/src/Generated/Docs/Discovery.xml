<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="QueryAsync(SearchRequest,CancellationToken)">
      <example>
This sample shows how to call QueryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new PurviewDataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

SearchRequest searchRequest = new SearchRequest();
Response<SearchResult> response = await client.QueryAsync(searchRequest);
]]></code>
This sample shows how to call QueryAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new PurviewDataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

SearchRequest searchRequest = new SearchRequest
{
    Keywords = "<keywords>",
    Limit = 1234,
    ContinuationToken = "<continuationToken>",
    Orderby = { BinaryData.FromObjectAsJson(new object()) },
    Filter = BinaryData.FromObjectAsJson(new object()),
    Facets = {new SearchFacetItem
    {
        Count = 1234,
        Facet = "<facet>",
        Sort = BinaryData.FromObjectAsJson(new object()),
    }},
    TaxonomySetting = new SearchRequestTaxonomySetting
    {
        AssetTypes = { "<assetTypes>" },
        Facet = default,
    },
};
Response<SearchResult> response = await client.QueryAsync(searchRequest);
]]></code></example>
    </member>
    <member name="Query(SearchRequest,CancellationToken)">
      <example>
This sample shows how to call Query.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new PurviewDataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

SearchRequest searchRequest = new SearchRequest();
Response<SearchResult> response = client.Query(searchRequest);
]]></code>
This sample shows how to call Query with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new PurviewDataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

SearchRequest searchRequest = new SearchRequest
{
    Keywords = "<keywords>",
    Limit = 1234,
    ContinuationToken = "<continuationToken>",
    Orderby = { BinaryData.FromObjectAsJson(new object()) },
    Filter = BinaryData.FromObjectAsJson(new object()),
    Facets = {new SearchFacetItem
    {
        Count = 1234,
        Facet = "<facet>",
        Sort = BinaryData.FromObjectAsJson(new object()),
    }},
    TaxonomySetting = new SearchRequestTaxonomySetting
    {
        AssetTypes = { "<assetTypes>" },
        Facet = default,
    },
};
Response<SearchResult> response = client.Query(searchRequest);
]]></code></example>
    </member>
    <member name="QueryAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call QueryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new PurviewDataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new object());
Response response = await client.QueryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call QueryAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new PurviewDataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    keywords = "<keywords>",
    limit = 1234,
    continuationToken = "<continuationToken>",
    orderby = new object[]
    {
        new object()
    },
    filter = new object(),
    facets = new object[]
    {
        new
        {
            count = 1234,
            facet = "<facet>",
            sort = new object(),
        }
    },
    taxonomySetting = new
    {
        assetTypes = new object[]
        {
            "<assetTypes>"
        },
    },
});
Response response = await client.QueryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("@search.count").ToString());
Console.WriteLine(result.GetProperty("@search.count.approximate").ToString());
Console.WriteLine(result.GetProperty("continuationToken").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("entityType")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("entityType")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("assetType")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("assetType")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("classification")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("classification")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("term")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("term")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("contactId")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("contactId")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("contactType")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("contactType")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("label")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("label")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("glossaryType")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("glossaryType")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("termStatus")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("termStatus")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("termTemplate")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("termTemplate")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.score").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.highlights").GetProperty("id")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.highlights").GetProperty("qualifiedName")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.highlights").GetProperty("name")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.highlights").GetProperty("description")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.highlights").GetProperty("entityType")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("objectType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("entityType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("endorsement").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("owner").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("classification")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("label")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("term")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("term")[0].GetProperty("glossaryName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("term")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("contact")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("contact")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("contact")[0].GetProperty("contactType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("assetType")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("glossaryType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("glossary").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("termStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("termTemplate")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("longDescription").ToString());
]]></code></example>
    </member>
    <member name="Query(RequestContent,RequestContext)">
      <example>
This sample shows how to call Query and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new PurviewDataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new object());
Response response = client.Query(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Query with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new PurviewDataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    keywords = "<keywords>",
    limit = 1234,
    continuationToken = "<continuationToken>",
    orderby = new object[]
    {
        new object()
    },
    filter = new object(),
    facets = new object[]
    {
        new
        {
            count = 1234,
            facet = "<facet>",
            sort = new object(),
        }
    },
    taxonomySetting = new
    {
        assetTypes = new object[]
        {
            "<assetTypes>"
        },
    },
});
Response response = client.Query(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("@search.count").ToString());
Console.WriteLine(result.GetProperty("@search.count.approximate").ToString());
Console.WriteLine(result.GetProperty("continuationToken").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("entityType")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("entityType")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("assetType")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("assetType")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("classification")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("classification")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("term")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("term")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("contactId")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("contactId")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("contactType")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("contactType")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("label")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("label")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("glossaryType")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("glossaryType")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("termStatus")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("termStatus")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("termTemplate")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("termTemplate")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.score").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.highlights").GetProperty("id")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.highlights").GetProperty("qualifiedName")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.highlights").GetProperty("name")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.highlights").GetProperty("description")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.highlights").GetProperty("entityType")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("objectType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("entityType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("endorsement").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("owner").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("classification")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("label")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("term")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("term")[0].GetProperty("glossaryName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("term")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("contact")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("contact")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("contact")[0].GetProperty("contactType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("assetType")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("glossaryType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("glossary").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("termStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("termTemplate")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("longDescription").ToString());
]]></code></example>
    </member>
    <member name="SuggestAsync(SuggestRequest,CancellationToken)">
      <example>
This sample shows how to call SuggestAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new PurviewDataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

SuggestRequest suggestRequest = new SuggestRequest();
Response<SuggestResult> response = await client.SuggestAsync(suggestRequest);
]]></code>
This sample shows how to call SuggestAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new PurviewDataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

SuggestRequest suggestRequest = new SuggestRequest
{
    Keywords = "<keywords>",
    Limit = 1234,
    Filter = BinaryData.FromObjectAsJson(new object()),
};
Response<SuggestResult> response = await client.SuggestAsync(suggestRequest);
]]></code></example>
    </member>
    <member name="Suggest(SuggestRequest,CancellationToken)">
      <example>
This sample shows how to call Suggest.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new PurviewDataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

SuggestRequest suggestRequest = new SuggestRequest();
Response<SuggestResult> response = client.Suggest(suggestRequest);
]]></code>
This sample shows how to call Suggest with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new PurviewDataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

SuggestRequest suggestRequest = new SuggestRequest
{
    Keywords = "<keywords>",
    Limit = 1234,
    Filter = BinaryData.FromObjectAsJson(new object()),
};
Response<SuggestResult> response = client.Suggest(suggestRequest);
]]></code></example>
    </member>
    <member name="SuggestAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call SuggestAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new PurviewDataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new object());
Response response = await client.SuggestAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call SuggestAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new PurviewDataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    keywords = "<keywords>",
    limit = 1234,
    filter = new object(),
});
Response response = await client.SuggestAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.score").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.text").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("objectType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("entityType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("endorsement").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("owner").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("classification")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("label")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("term")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("term")[0].GetProperty("glossaryName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("term")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("contact")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("contact")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("contact")[0].GetProperty("contactType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("assetType")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("glossaryType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("glossary").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("termStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("termTemplate")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("longDescription").ToString());
]]></code></example>
    </member>
    <member name="Suggest(RequestContent,RequestContext)">
      <example>
This sample shows how to call Suggest and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new PurviewDataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new object());
Response response = client.Suggest(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Suggest with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new PurviewDataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    keywords = "<keywords>",
    limit = 1234,
    filter = new object(),
});
Response response = client.Suggest(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.score").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.text").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("objectType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("entityType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("endorsement").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("owner").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("classification")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("label")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("term")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("term")[0].GetProperty("glossaryName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("term")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("contact")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("contact")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("contact")[0].GetProperty("contactType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("assetType")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("glossaryType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("glossary").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("termStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("termTemplate")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("longDescription").ToString());
]]></code></example>
    </member>
    <member name="AutoCompleteAsync(AutoCompleteRequest,CancellationToken)">
      <example>
This sample shows how to call AutoCompleteAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new PurviewDataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

AutoCompleteRequest autoCompleteRequest = new AutoCompleteRequest();
Response<AutoCompleteResult> response = await client.AutoCompleteAsync(autoCompleteRequest);
]]></code>
This sample shows how to call AutoCompleteAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new PurviewDataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

AutoCompleteRequest autoCompleteRequest = new AutoCompleteRequest
{
    Keywords = "<keywords>",
    Limit = 1234,
    Filter = BinaryData.FromObjectAsJson(new object()),
};
Response<AutoCompleteResult> response = await client.AutoCompleteAsync(autoCompleteRequest);
]]></code></example>
    </member>
    <member name="AutoComplete(AutoCompleteRequest,CancellationToken)">
      <example>
This sample shows how to call AutoComplete.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new PurviewDataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

AutoCompleteRequest autoCompleteRequest = new AutoCompleteRequest();
Response<AutoCompleteResult> response = client.AutoComplete(autoCompleteRequest);
]]></code>
This sample shows how to call AutoComplete with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new PurviewDataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

AutoCompleteRequest autoCompleteRequest = new AutoCompleteRequest
{
    Keywords = "<keywords>",
    Limit = 1234,
    Filter = BinaryData.FromObjectAsJson(new object()),
};
Response<AutoCompleteResult> response = client.AutoComplete(autoCompleteRequest);
]]></code></example>
    </member>
    <member name="AutoCompleteAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call AutoCompleteAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new PurviewDataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new object());
Response response = await client.AutoCompleteAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call AutoCompleteAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new PurviewDataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    keywords = "<keywords>",
    limit = 1234,
    filter = new object(),
});
Response response = await client.AutoCompleteAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("text").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("queryPlusText").ToString());
]]></code></example>
    </member>
    <member name="AutoComplete(RequestContent,RequestContext)">
      <example>
This sample shows how to call AutoComplete and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new PurviewDataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new object());
Response response = client.AutoComplete(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call AutoComplete with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new PurviewDataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    keywords = "<keywords>",
    limit = 1234,
    filter = new object(),
});
Response response = client.AutoComplete(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("text").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("queryPlusText").ToString());
]]></code></example>
    </member>
  </members>
</doc>