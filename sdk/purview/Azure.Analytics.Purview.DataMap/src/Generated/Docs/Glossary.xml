<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="BatchGetAsync(int?,int?,string,bool?,CancellationToken)">
      <example>
This sample shows how to call BatchGetAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasGlossary>> response = await client.BatchGetAsync();
]]></code>
This sample shows how to call BatchGetAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

Response<IReadOnlyList<AtlasGlossary>> response = await client.BatchGetAsync(limit: 1234, offset: 1234, sort: "<sort>", ignoreTermsAndCategories: true);
]]></code></example>
    </member>
    <member name="BatchGet(int?,int?,string,bool?,CancellationToken)">
      <example>
This sample shows how to call BatchGet.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasGlossary>> response = client.BatchGet();
]]></code>
This sample shows how to call BatchGet with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

Response<IReadOnlyList<AtlasGlossary>> response = client.BatchGet(limit: 1234, offset: 1234, sort: "<sort>", ignoreTermsAndCategories: true);
]]></code></example>
    </member>
    <member name="BatchGetAsync(int?,int?,string,bool?,RequestContext)">
      <example>
This sample shows how to call BatchGetAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.BatchGetAsync(null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call BatchGetAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

Response response = await client.BatchGetAsync(1234, 1234, "<sort>", true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("createTime").ToString());
Console.WriteLine(result[0].GetProperty("createdBy").ToString());
Console.WriteLine(result[0].GetProperty("updateTime").ToString());
Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("language").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("usage").ToString());
]]></code></example>
    </member>
    <member name="BatchGet(int?,int?,string,bool?,RequestContext)">
      <example>
This sample shows how to call BatchGet and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.BatchGet(null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call BatchGet with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

Response response = client.BatchGet(1234, 1234, "<sort>", true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("createTime").ToString());
Console.WriteLine(result[0].GetProperty("createdBy").ToString());
Console.WriteLine(result[0].GetProperty("updateTime").ToString());
Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("language").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("usage").ToString());
]]></code></example>
    </member>
    <member name="CreateAsync(AtlasGlossary,CancellationToken)">
      <example>
This sample shows how to call CreateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

AtlasGlossary atlasGlossary = new AtlasGlossary();
Response<AtlasGlossary> response = await client.CreateAsync(atlasGlossary);
]]></code>
This sample shows how to call CreateAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

AtlasGlossary atlasGlossary = new AtlasGlossary
{
    Guid = "<guid>",
    Classifications = {new AtlasClassification
    {
        Attributes =
        {
            ["key"] = BinaryData.FromObjectAsJson(new object())
        },
        TypeName = "<typeName>",
        LastModifiedTS = "<lastModifiedTS>",
        EntityGuid = "<entityGuid>",
        EntityStatus = EntityStatus.Active,
        RemovePropagationsOnEntityDelete = true,
        ValidityPeriods = {new TimeBoundary
        {
            EndTime = "<endTime>",
            StartTime = "<startTime>",
            TimeZone = "<timeZone>",
        }},
    }},
    LongDescription = "<longDescription>",
    Name = "<name>",
    QualifiedName = "<qualifiedName>",
    ShortDescription = "<shortDescription>",
    LastModifiedTS = "<lastModifiedTS>",
    CreateTime = 1234L,
    CreatedBy = "<createdBy>",
    UpdateTime = 1234L,
    UpdatedBy = "<updatedBy>",
    Categories = {new AtlasRelatedCategoryHeader
    {
        CategoryGuid = "<categoryGuid>",
        Description = "<description>",
        DisplayText = "<displayText>",
        ParentCategoryGuid = "<parentCategoryGuid>",
        RelationGuid = "<relationGuid>",
    }},
    Language = "<language>",
    Terms = {new AtlasRelatedTermHeader
    {
        Description = "<description>",
        DisplayText = "<displayText>",
        Expression = "<expression>",
        RelationGuid = "<relationGuid>",
        Status = AtlasTermRelationshipStatus.Draft,
        Steward = "<steward>",
        TermGuid = "<termGuid>",
    }},
    Usage = "<usage>",
};
Response<AtlasGlossary> response = await client.CreateAsync(atlasGlossary);
]]></code></example>
    </member>
    <member name="Create(AtlasGlossary,CancellationToken)">
      <example>
This sample shows how to call Create.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

AtlasGlossary atlasGlossary = new AtlasGlossary();
Response<AtlasGlossary> response = client.Create(atlasGlossary);
]]></code>
This sample shows how to call Create with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

AtlasGlossary atlasGlossary = new AtlasGlossary
{
    Guid = "<guid>",
    Classifications = {new AtlasClassification
    {
        Attributes =
        {
            ["key"] = BinaryData.FromObjectAsJson(new object())
        },
        TypeName = "<typeName>",
        LastModifiedTS = "<lastModifiedTS>",
        EntityGuid = "<entityGuid>",
        EntityStatus = EntityStatus.Active,
        RemovePropagationsOnEntityDelete = true,
        ValidityPeriods = {new TimeBoundary
        {
            EndTime = "<endTime>",
            StartTime = "<startTime>",
            TimeZone = "<timeZone>",
        }},
    }},
    LongDescription = "<longDescription>",
    Name = "<name>",
    QualifiedName = "<qualifiedName>",
    ShortDescription = "<shortDescription>",
    LastModifiedTS = "<lastModifiedTS>",
    CreateTime = 1234L,
    CreatedBy = "<createdBy>",
    UpdateTime = 1234L,
    UpdatedBy = "<updatedBy>",
    Categories = {new AtlasRelatedCategoryHeader
    {
        CategoryGuid = "<categoryGuid>",
        Description = "<description>",
        DisplayText = "<displayText>",
        ParentCategoryGuid = "<parentCategoryGuid>",
        RelationGuid = "<relationGuid>",
    }},
    Language = "<language>",
    Terms = {new AtlasRelatedTermHeader
    {
        Description = "<description>",
        DisplayText = "<displayText>",
        Expression = "<expression>",
        RelationGuid = "<relationGuid>",
        Status = AtlasTermRelationshipStatus.Draft,
        Steward = "<steward>",
        TermGuid = "<termGuid>",
    }},
    Usage = "<usage>",
};
Response<AtlasGlossary> response = client.Create(atlasGlossary);
]]></code></example>
    </member>
    <member name="CreateAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new object());
Response response = await client.CreateAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new
{
    guid = "<guid>",
    classifications = new object[]
    {
        new
        {
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new object[]
            {
                new
                {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    createTime = 1234L,
    createdBy = "<createdBy>",
    updateTime = 1234L,
    updatedBy = "<updatedBy>",
    categories = new object[]
    {
        new
        {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
    language = "<language>",
    terms = new object[]
    {
        new
        {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    usage = "<usage>",
});
Response response = await client.CreateAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
]]></code></example>
    </member>
    <member name="Create(RequestContent,RequestContext)">
      <example>
This sample shows how to call Create and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new object());
Response response = client.Create(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Create with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new
{
    guid = "<guid>",
    classifications = new object[]
    {
        new
        {
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new object[]
            {
                new
                {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    createTime = 1234L,
    createdBy = "<createdBy>",
    updateTime = 1234L,
    updatedBy = "<updatedBy>",
    categories = new object[]
    {
        new
        {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
    language = "<language>",
    terms = new object[]
    {
        new
        {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    usage = "<usage>",
});
Response response = client.Create(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
]]></code></example>
    </member>
    <member name="CreateCategoriesAsync(IEnumerable{AtlasGlossaryCategory},CancellationToken)">
      <example>
This sample shows how to call CreateCategoriesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasGlossaryCategory>> response = await client.CreateCategoriesAsync(new AtlasGlossaryCategory[]
{
    new AtlasGlossaryCategory()
});
]]></code>
This sample shows how to call CreateCategoriesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasGlossaryCategory>> response = await client.CreateCategoriesAsync(new AtlasGlossaryCategory[]
{
    new AtlasGlossaryCategory
    {
        Guid = "<guid>",
        Classifications = {new AtlasClassification
        {
            Attributes =
            {
                ["key"] = BinaryData.FromObjectAsJson(new object())
            },
            TypeName = "<typeName>",
            LastModifiedTS = "<lastModifiedTS>",
            EntityGuid = "<entityGuid>",
            EntityStatus = EntityStatus.Active,
            RemovePropagationsOnEntityDelete = true,
            ValidityPeriods = {new TimeBoundary
            {
                EndTime = "<endTime>",
                StartTime = "<startTime>",
                TimeZone = "<timeZone>",
            }},
        }},
        LongDescription = "<longDescription>",
        Name = "<name>",
        QualifiedName = "<qualifiedName>",
        ShortDescription = "<shortDescription>",
        LastModifiedTS = "<lastModifiedTS>",
        CreateTime = 1234L,
        CreatedBy = "<createdBy>",
        UpdateTime = 1234L,
        UpdatedBy = "<updatedBy>",
        Anchor = new AtlasGlossaryHeader
        {
            DisplayText = "<displayText>",
            GlossaryGuid = "<glossaryGuid>",
            RelationGuid = "<relationGuid>",
        },
        ChildrenCategories = {new AtlasRelatedCategoryHeader
        {
            CategoryGuid = "<categoryGuid>",
            Description = "<description>",
            DisplayText = "<displayText>",
            ParentCategoryGuid = "<parentCategoryGuid>",
            RelationGuid = "<relationGuid>",
        }},
        ParentCategory = default,
        Terms = {new AtlasRelatedTermHeader
        {
            Description = "<description>",
            DisplayText = "<displayText>",
            Expression = "<expression>",
            RelationGuid = "<relationGuid>",
            Status = AtlasTermRelationshipStatus.Draft,
            Steward = "<steward>",
            TermGuid = "<termGuid>",
        }},
    }
});
]]></code></example>
    </member>
    <member name="CreateCategories(IEnumerable{AtlasGlossaryCategory},CancellationToken)">
      <example>
This sample shows how to call CreateCategories.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasGlossaryCategory>> response = client.CreateCategories(new AtlasGlossaryCategory[]
{
    new AtlasGlossaryCategory()
});
]]></code>
This sample shows how to call CreateCategories with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasGlossaryCategory>> response = client.CreateCategories(new AtlasGlossaryCategory[]
{
    new AtlasGlossaryCategory
    {
        Guid = "<guid>",
        Classifications = {new AtlasClassification
        {
            Attributes =
            {
                ["key"] = BinaryData.FromObjectAsJson(new object())
            },
            TypeName = "<typeName>",
            LastModifiedTS = "<lastModifiedTS>",
            EntityGuid = "<entityGuid>",
            EntityStatus = EntityStatus.Active,
            RemovePropagationsOnEntityDelete = true,
            ValidityPeriods = {new TimeBoundary
            {
                EndTime = "<endTime>",
                StartTime = "<startTime>",
                TimeZone = "<timeZone>",
            }},
        }},
        LongDescription = "<longDescription>",
        Name = "<name>",
        QualifiedName = "<qualifiedName>",
        ShortDescription = "<shortDescription>",
        LastModifiedTS = "<lastModifiedTS>",
        CreateTime = 1234L,
        CreatedBy = "<createdBy>",
        UpdateTime = 1234L,
        UpdatedBy = "<updatedBy>",
        Anchor = new AtlasGlossaryHeader
        {
            DisplayText = "<displayText>",
            GlossaryGuid = "<glossaryGuid>",
            RelationGuid = "<relationGuid>",
        },
        ChildrenCategories = {new AtlasRelatedCategoryHeader
        {
            CategoryGuid = "<categoryGuid>",
            Description = "<description>",
            DisplayText = "<displayText>",
            ParentCategoryGuid = "<parentCategoryGuid>",
            RelationGuid = "<relationGuid>",
        }},
        ParentCategory = default,
        Terms = {new AtlasRelatedTermHeader
        {
            Description = "<description>",
            DisplayText = "<displayText>",
            Expression = "<expression>",
            RelationGuid = "<relationGuid>",
            Status = AtlasTermRelationshipStatus.Draft,
            Steward = "<steward>",
            TermGuid = "<termGuid>",
        }},
    }
});
]]></code></example>
    </member>
    <member name="CreateCategoriesAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateCategoriesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new object()
});
Response response = await client.CreateCategoriesAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call CreateCategoriesAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        guid = "<guid>",
        classifications = new object[]
        {
            new
            {
                attributes = new
                {
                    key = new object(),
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
                entityGuid = "<entityGuid>",
                entityStatus = "ACTIVE",
                removePropagationsOnEntityDelete = true,
                validityPeriods = new object[]
                {
                    new
                    {
                        endTime = "<endTime>",
                        startTime = "<startTime>",
                        timeZone = "<timeZone>",
                    }
                },
            }
        },
        longDescription = "<longDescription>",
        name = "<name>",
        qualifiedName = "<qualifiedName>",
        shortDescription = "<shortDescription>",
        lastModifiedTS = "<lastModifiedTS>",
        createTime = 1234L,
        createdBy = "<createdBy>",
        updateTime = 1234L,
        updatedBy = "<updatedBy>",
        anchor = new
        {
            displayText = "<displayText>",
            glossaryGuid = "<glossaryGuid>",
            relationGuid = "<relationGuid>",
        },
        childrenCategories = new object[]
        {
            new
            {
                categoryGuid = "<categoryGuid>",
                description = "<description>",
                displayText = "<displayText>",
                parentCategoryGuid = "<parentCategoryGuid>",
                relationGuid = "<relationGuid>",
            }
        },
        terms = new object[]
        {
            new
            {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
    }
});
Response response = await client.CreateCategoriesAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("createTime").ToString());
Console.WriteLine(result[0].GetProperty("createdBy").ToString());
Console.WriteLine(result[0].GetProperty("updateTime").ToString());
Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
]]></code></example>
    </member>
    <member name="CreateCategories(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateCategories and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new object()
});
Response response = client.CreateCategories(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call CreateCategories with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        guid = "<guid>",
        classifications = new object[]
        {
            new
            {
                attributes = new
                {
                    key = new object(),
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
                entityGuid = "<entityGuid>",
                entityStatus = "ACTIVE",
                removePropagationsOnEntityDelete = true,
                validityPeriods = new object[]
                {
                    new
                    {
                        endTime = "<endTime>",
                        startTime = "<startTime>",
                        timeZone = "<timeZone>",
                    }
                },
            }
        },
        longDescription = "<longDescription>",
        name = "<name>",
        qualifiedName = "<qualifiedName>",
        shortDescription = "<shortDescription>",
        lastModifiedTS = "<lastModifiedTS>",
        createTime = 1234L,
        createdBy = "<createdBy>",
        updateTime = 1234L,
        updatedBy = "<updatedBy>",
        anchor = new
        {
            displayText = "<displayText>",
            glossaryGuid = "<glossaryGuid>",
            relationGuid = "<relationGuid>",
        },
        childrenCategories = new object[]
        {
            new
            {
                categoryGuid = "<categoryGuid>",
                description = "<description>",
                displayText = "<displayText>",
                parentCategoryGuid = "<parentCategoryGuid>",
                relationGuid = "<relationGuid>",
            }
        },
        terms = new object[]
        {
            new
            {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
    }
});
Response response = client.CreateCategories(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("createTime").ToString());
Console.WriteLine(result[0].GetProperty("createdBy").ToString());
Console.WriteLine(result[0].GetProperty("updateTime").ToString());
Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
]]></code></example>
    </member>
    <member name="CreateCategoryAsync(AtlasGlossaryCategory,CancellationToken)">
      <example>
This sample shows how to call CreateCategoryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

AtlasGlossaryCategory atlasGlossaryCategory = new AtlasGlossaryCategory();
Response<AtlasGlossaryCategory> response = await client.CreateCategoryAsync(atlasGlossaryCategory);
]]></code>
This sample shows how to call CreateCategoryAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

AtlasGlossaryCategory atlasGlossaryCategory = new AtlasGlossaryCategory
{
    Guid = "<guid>",
    Classifications = {new AtlasClassification
    {
        Attributes =
        {
            ["key"] = BinaryData.FromObjectAsJson(new object())
        },
        TypeName = "<typeName>",
        LastModifiedTS = "<lastModifiedTS>",
        EntityGuid = "<entityGuid>",
        EntityStatus = EntityStatus.Active,
        RemovePropagationsOnEntityDelete = true,
        ValidityPeriods = {new TimeBoundary
        {
            EndTime = "<endTime>",
            StartTime = "<startTime>",
            TimeZone = "<timeZone>",
        }},
    }},
    LongDescription = "<longDescription>",
    Name = "<name>",
    QualifiedName = "<qualifiedName>",
    ShortDescription = "<shortDescription>",
    LastModifiedTS = "<lastModifiedTS>",
    CreateTime = 1234L,
    CreatedBy = "<createdBy>",
    UpdateTime = 1234L,
    UpdatedBy = "<updatedBy>",
    Anchor = new AtlasGlossaryHeader
    {
        DisplayText = "<displayText>",
        GlossaryGuid = "<glossaryGuid>",
        RelationGuid = "<relationGuid>",
    },
    ChildrenCategories = {new AtlasRelatedCategoryHeader
    {
        CategoryGuid = "<categoryGuid>",
        Description = "<description>",
        DisplayText = "<displayText>",
        ParentCategoryGuid = "<parentCategoryGuid>",
        RelationGuid = "<relationGuid>",
    }},
    ParentCategory = default,
    Terms = {new AtlasRelatedTermHeader
    {
        Description = "<description>",
        DisplayText = "<displayText>",
        Expression = "<expression>",
        RelationGuid = "<relationGuid>",
        Status = AtlasTermRelationshipStatus.Draft,
        Steward = "<steward>",
        TermGuid = "<termGuid>",
    }},
};
Response<AtlasGlossaryCategory> response = await client.CreateCategoryAsync(atlasGlossaryCategory);
]]></code></example>
    </member>
    <member name="CreateCategory(AtlasGlossaryCategory,CancellationToken)">
      <example>
This sample shows how to call CreateCategory.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

AtlasGlossaryCategory atlasGlossaryCategory = new AtlasGlossaryCategory();
Response<AtlasGlossaryCategory> response = client.CreateCategory(atlasGlossaryCategory);
]]></code>
This sample shows how to call CreateCategory with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

AtlasGlossaryCategory atlasGlossaryCategory = new AtlasGlossaryCategory
{
    Guid = "<guid>",
    Classifications = {new AtlasClassification
    {
        Attributes =
        {
            ["key"] = BinaryData.FromObjectAsJson(new object())
        },
        TypeName = "<typeName>",
        LastModifiedTS = "<lastModifiedTS>",
        EntityGuid = "<entityGuid>",
        EntityStatus = EntityStatus.Active,
        RemovePropagationsOnEntityDelete = true,
        ValidityPeriods = {new TimeBoundary
        {
            EndTime = "<endTime>",
            StartTime = "<startTime>",
            TimeZone = "<timeZone>",
        }},
    }},
    LongDescription = "<longDescription>",
    Name = "<name>",
    QualifiedName = "<qualifiedName>",
    ShortDescription = "<shortDescription>",
    LastModifiedTS = "<lastModifiedTS>",
    CreateTime = 1234L,
    CreatedBy = "<createdBy>",
    UpdateTime = 1234L,
    UpdatedBy = "<updatedBy>",
    Anchor = new AtlasGlossaryHeader
    {
        DisplayText = "<displayText>",
        GlossaryGuid = "<glossaryGuid>",
        RelationGuid = "<relationGuid>",
    },
    ChildrenCategories = {new AtlasRelatedCategoryHeader
    {
        CategoryGuid = "<categoryGuid>",
        Description = "<description>",
        DisplayText = "<displayText>",
        ParentCategoryGuid = "<parentCategoryGuid>",
        RelationGuid = "<relationGuid>",
    }},
    ParentCategory = default,
    Terms = {new AtlasRelatedTermHeader
    {
        Description = "<description>",
        DisplayText = "<displayText>",
        Expression = "<expression>",
        RelationGuid = "<relationGuid>",
        Status = AtlasTermRelationshipStatus.Draft,
        Steward = "<steward>",
        TermGuid = "<termGuid>",
    }},
};
Response<AtlasGlossaryCategory> response = client.CreateCategory(atlasGlossaryCategory);
]]></code></example>
    </member>
    <member name="CreateCategoryAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateCategoryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new object());
Response response = await client.CreateCategoryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateCategoryAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new
{
    guid = "<guid>",
    classifications = new object[]
    {
        new
        {
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new object[]
            {
                new
                {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    createTime = 1234L,
    createdBy = "<createdBy>",
    updateTime = 1234L,
    updatedBy = "<updatedBy>",
    anchor = new
    {
        displayText = "<displayText>",
        glossaryGuid = "<glossaryGuid>",
        relationGuid = "<relationGuid>",
    },
    childrenCategories = new object[]
    {
        new
        {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
    terms = new object[]
    {
        new
        {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
});
Response response = await client.CreateCategoryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
]]></code></example>
    </member>
    <member name="CreateCategory(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateCategory and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new object());
Response response = client.CreateCategory(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateCategory with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new
{
    guid = "<guid>",
    classifications = new object[]
    {
        new
        {
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new object[]
            {
                new
                {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    createTime = 1234L,
    createdBy = "<createdBy>",
    updateTime = 1234L,
    updatedBy = "<updatedBy>",
    anchor = new
    {
        displayText = "<displayText>",
        glossaryGuid = "<glossaryGuid>",
        relationGuid = "<relationGuid>",
    },
    childrenCategories = new object[]
    {
        new
        {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
    terms = new object[]
    {
        new
        {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
});
Response response = client.CreateCategory(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
]]></code></example>
    </member>
    <member name="GetCategoryAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetCategoryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<AtlasGlossaryCategory> response = await client.GetCategoryAsync("<categoryId>");
]]></code>
This sample shows how to call GetCategoryAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<AtlasGlossaryCategory> response = await client.GetCategoryAsync("<categoryId>");
]]></code></example>
    </member>
    <member name="GetCategory(string,CancellationToken)">
      <example>
This sample shows how to call GetCategory.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<AtlasGlossaryCategory> response = client.GetCategory("<categoryId>");
]]></code>
This sample shows how to call GetCategory with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<AtlasGlossaryCategory> response = client.GetCategory("<categoryId>");
]]></code></example>
    </member>
    <member name="GetCategoryAsync(string,RequestContext)">
      <example>
This sample shows how to call GetCategoryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.GetCategoryAsync("<categoryId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetCategoryAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.GetCategoryAsync("<categoryId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
]]></code></example>
    </member>
    <member name="GetCategory(string,RequestContext)">
      <example>
This sample shows how to call GetCategory and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.GetCategory("<categoryId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetCategory with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.GetCategory("<categoryId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
]]></code></example>
    </member>
    <member name="UpdateCategoryAsync(string,AtlasGlossaryCategory,CancellationToken)">
      <example>
This sample shows how to call UpdateCategoryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

AtlasGlossaryCategory atlasGlossaryCategory = new AtlasGlossaryCategory();
Response<AtlasGlossaryCategory> response = await client.UpdateCategoryAsync("<categoryId>", atlasGlossaryCategory);
]]></code>
This sample shows how to call UpdateCategoryAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

AtlasGlossaryCategory atlasGlossaryCategory = new AtlasGlossaryCategory
{
    Guid = "<guid>",
    Classifications = {new AtlasClassification
    {
        Attributes =
        {
            ["key"] = BinaryData.FromObjectAsJson(new object())
        },
        TypeName = "<typeName>",
        LastModifiedTS = "<lastModifiedTS>",
        EntityGuid = "<entityGuid>",
        EntityStatus = EntityStatus.Active,
        RemovePropagationsOnEntityDelete = true,
        ValidityPeriods = {new TimeBoundary
        {
            EndTime = "<endTime>",
            StartTime = "<startTime>",
            TimeZone = "<timeZone>",
        }},
    }},
    LongDescription = "<longDescription>",
    Name = "<name>",
    QualifiedName = "<qualifiedName>",
    ShortDescription = "<shortDescription>",
    LastModifiedTS = "<lastModifiedTS>",
    CreateTime = 1234L,
    CreatedBy = "<createdBy>",
    UpdateTime = 1234L,
    UpdatedBy = "<updatedBy>",
    Anchor = new AtlasGlossaryHeader
    {
        DisplayText = "<displayText>",
        GlossaryGuid = "<glossaryGuid>",
        RelationGuid = "<relationGuid>",
    },
    ChildrenCategories = {new AtlasRelatedCategoryHeader
    {
        CategoryGuid = "<categoryGuid>",
        Description = "<description>",
        DisplayText = "<displayText>",
        ParentCategoryGuid = "<parentCategoryGuid>",
        RelationGuid = "<relationGuid>",
    }},
    ParentCategory = default,
    Terms = {new AtlasRelatedTermHeader
    {
        Description = "<description>",
        DisplayText = "<displayText>",
        Expression = "<expression>",
        RelationGuid = "<relationGuid>",
        Status = AtlasTermRelationshipStatus.Draft,
        Steward = "<steward>",
        TermGuid = "<termGuid>",
    }},
};
Response<AtlasGlossaryCategory> response = await client.UpdateCategoryAsync("<categoryId>", atlasGlossaryCategory);
]]></code></example>
    </member>
    <member name="UpdateCategory(string,AtlasGlossaryCategory,CancellationToken)">
      <example>
This sample shows how to call UpdateCategory.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

AtlasGlossaryCategory atlasGlossaryCategory = new AtlasGlossaryCategory();
Response<AtlasGlossaryCategory> response = client.UpdateCategory("<categoryId>", atlasGlossaryCategory);
]]></code>
This sample shows how to call UpdateCategory with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

AtlasGlossaryCategory atlasGlossaryCategory = new AtlasGlossaryCategory
{
    Guid = "<guid>",
    Classifications = {new AtlasClassification
    {
        Attributes =
        {
            ["key"] = BinaryData.FromObjectAsJson(new object())
        },
        TypeName = "<typeName>",
        LastModifiedTS = "<lastModifiedTS>",
        EntityGuid = "<entityGuid>",
        EntityStatus = EntityStatus.Active,
        RemovePropagationsOnEntityDelete = true,
        ValidityPeriods = {new TimeBoundary
        {
            EndTime = "<endTime>",
            StartTime = "<startTime>",
            TimeZone = "<timeZone>",
        }},
    }},
    LongDescription = "<longDescription>",
    Name = "<name>",
    QualifiedName = "<qualifiedName>",
    ShortDescription = "<shortDescription>",
    LastModifiedTS = "<lastModifiedTS>",
    CreateTime = 1234L,
    CreatedBy = "<createdBy>",
    UpdateTime = 1234L,
    UpdatedBy = "<updatedBy>",
    Anchor = new AtlasGlossaryHeader
    {
        DisplayText = "<displayText>",
        GlossaryGuid = "<glossaryGuid>",
        RelationGuid = "<relationGuid>",
    },
    ChildrenCategories = {new AtlasRelatedCategoryHeader
    {
        CategoryGuid = "<categoryGuid>",
        Description = "<description>",
        DisplayText = "<displayText>",
        ParentCategoryGuid = "<parentCategoryGuid>",
        RelationGuid = "<relationGuid>",
    }},
    ParentCategory = default,
    Terms = {new AtlasRelatedTermHeader
    {
        Description = "<description>",
        DisplayText = "<displayText>",
        Expression = "<expression>",
        RelationGuid = "<relationGuid>",
        Status = AtlasTermRelationshipStatus.Draft,
        Steward = "<steward>",
        TermGuid = "<termGuid>",
    }},
};
Response<AtlasGlossaryCategory> response = client.UpdateCategory("<categoryId>", atlasGlossaryCategory);
]]></code></example>
    </member>
    <member name="UpdateCategoryAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateCategoryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new object());
Response response = await client.UpdateCategoryAsync("<categoryId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call UpdateCategoryAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new
{
    guid = "<guid>",
    classifications = new object[]
    {
        new
        {
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new object[]
            {
                new
                {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    createTime = 1234L,
    createdBy = "<createdBy>",
    updateTime = 1234L,
    updatedBy = "<updatedBy>",
    anchor = new
    {
        displayText = "<displayText>",
        glossaryGuid = "<glossaryGuid>",
        relationGuid = "<relationGuid>",
    },
    childrenCategories = new object[]
    {
        new
        {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
    terms = new object[]
    {
        new
        {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
});
Response response = await client.UpdateCategoryAsync("<categoryId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
]]></code></example>
    </member>
    <member name="UpdateCategory(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateCategory and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new object());
Response response = client.UpdateCategory("<categoryId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call UpdateCategory with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new
{
    guid = "<guid>",
    classifications = new object[]
    {
        new
        {
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new object[]
            {
                new
                {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    createTime = 1234L,
    createdBy = "<createdBy>",
    updateTime = 1234L,
    updatedBy = "<updatedBy>",
    anchor = new
    {
        displayText = "<displayText>",
        glossaryGuid = "<glossaryGuid>",
        relationGuid = "<relationGuid>",
    },
    childrenCategories = new object[]
    {
        new
        {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
    terms = new object[]
    {
        new
        {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
});
Response response = client.UpdateCategory("<categoryId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
]]></code></example>
    </member>
    <member name="DeleteCategoryAsync(string,RequestContext)">
      <example>
This sample shows how to call DeleteCategoryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.DeleteCategoryAsync("<categoryId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteCategoryAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.DeleteCategoryAsync("<categoryId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteCategory(string,RequestContext)">
      <example>
This sample shows how to call DeleteCategory.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.DeleteCategory("<categoryId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteCategory with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.DeleteCategory("<categoryId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="PartialUpdateCategoryAsync(string,IDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call PartialUpdateCategoryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<AtlasGlossaryCategory> response = await client.PartialUpdateCategoryAsync("<categoryId>", new Dictionary<string, string>
{
    ["key"] = "<body>"
});
]]></code>
This sample shows how to call PartialUpdateCategoryAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<AtlasGlossaryCategory> response = await client.PartialUpdateCategoryAsync("<categoryId>", new Dictionary<string, string>
{
    ["key"] = "<body>"
});
]]></code></example>
    </member>
    <member name="PartialUpdateCategory(string,IDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call PartialUpdateCategory.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<AtlasGlossaryCategory> response = client.PartialUpdateCategory("<categoryId>", new Dictionary<string, string>
{
    ["key"] = "<body>"
});
]]></code>
This sample shows how to call PartialUpdateCategory with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<AtlasGlossaryCategory> response = client.PartialUpdateCategory("<categoryId>", new Dictionary<string, string>
{
    ["key"] = "<body>"
});
]]></code></example>
    </member>
    <member name="PartialUpdateCategoryAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call PartialUpdateCategoryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new
{
    key = "<body>",
});
Response response = await client.PartialUpdateCategoryAsync("<categoryId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PartialUpdateCategoryAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new
{
    key = "<body>",
});
Response response = await client.PartialUpdateCategoryAsync("<categoryId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
]]></code></example>
    </member>
    <member name="PartialUpdateCategory(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call PartialUpdateCategory and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new
{
    key = "<body>",
});
Response response = client.PartialUpdateCategory("<categoryId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PartialUpdateCategory with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new
{
    key = "<body>",
});
Response response = client.PartialUpdateCategory("<categoryId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
]]></code></example>
    </member>
    <member name="GetRelatedCategoriesAsync(string,int?,int?,string,CancellationToken)">
      <example>
This sample shows how to call GetRelatedCategoriesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyDictionary<string, IList<AtlasRelatedCategoryHeader>>> response = await client.GetRelatedCategoriesAsync("<categoryId>");
]]></code>
This sample shows how to call GetRelatedCategoriesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyDictionary<string, IList<AtlasRelatedCategoryHeader>>> response = await client.GetRelatedCategoriesAsync("<categoryId>", limit: 1234, offset: 1234, sort: "<sort>");
]]></code></example>
    </member>
    <member name="GetRelatedCategories(string,int?,int?,string,CancellationToken)">
      <example>
This sample shows how to call GetRelatedCategories.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyDictionary<string, IList<AtlasRelatedCategoryHeader>>> response = client.GetRelatedCategories("<categoryId>");
]]></code>
This sample shows how to call GetRelatedCategories with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyDictionary<string, IList<AtlasRelatedCategoryHeader>>> response = client.GetRelatedCategories("<categoryId>", limit: 1234, offset: 1234, sort: "<sort>");
]]></code></example>
    </member>
    <member name="GetRelatedCategoriesAsync(string,int?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetRelatedCategoriesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.GetRelatedCategoriesAsync("<categoryId>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<key>")[0].ToString());
]]></code>
This sample shows how to call GetRelatedCategoriesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.GetRelatedCategoriesAsync("<categoryId>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("relationGuid").ToString());
]]></code></example>
    </member>
    <member name="GetRelatedCategories(string,int?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetRelatedCategories and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.GetRelatedCategories("<categoryId>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<key>")[0].ToString());
]]></code>
This sample shows how to call GetRelatedCategories with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.GetRelatedCategories("<categoryId>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("relationGuid").ToString());
]]></code></example>
    </member>
    <member name="GetCategoryTermsAsync(string,int?,int?,string,CancellationToken)">
      <example>
This sample shows how to call GetCategoryTermsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasRelatedTermHeader>> response = await client.GetCategoryTermsAsync("<categoryId>");
]]></code>
This sample shows how to call GetCategoryTermsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasRelatedTermHeader>> response = await client.GetCategoryTermsAsync("<categoryId>", limit: 1234, offset: 1234, sort: "<sort>");
]]></code></example>
    </member>
    <member name="GetCategoryTerms(string,int?,int?,string,CancellationToken)">
      <example>
This sample shows how to call GetCategoryTerms.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasRelatedTermHeader>> response = client.GetCategoryTerms("<categoryId>");
]]></code>
This sample shows how to call GetCategoryTerms with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasRelatedTermHeader>> response = client.GetCategoryTerms("<categoryId>", limit: 1234, offset: 1234, sort: "<sort>");
]]></code></example>
    </member>
    <member name="GetCategoryTermsAsync(string,int?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetCategoryTermsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.GetCategoryTermsAsync("<categoryId>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetCategoryTermsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.GetCategoryTermsAsync("<categoryId>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("termGuid").ToString());
]]></code></example>
    </member>
    <member name="GetCategoryTerms(string,int?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetCategoryTerms and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.GetCategoryTerms("<categoryId>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetCategoryTerms with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.GetCategoryTerms("<categoryId>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("termGuid").ToString());
]]></code></example>
    </member>
    <member name="CreateTermAsync(AtlasGlossaryTerm,bool?,CancellationToken)">
      <example>
This sample shows how to call CreateTermAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

AtlasGlossaryTerm atlasGlossaryTerm = new AtlasGlossaryTerm();
Response<AtlasGlossaryTerm> response = await client.CreateTermAsync(atlasGlossaryTerm);
]]></code>
This sample shows how to call CreateTermAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

AtlasGlossaryTerm atlasGlossaryTerm = new AtlasGlossaryTerm
{
    Guid = "<guid>",
    Classifications = {new AtlasClassification
    {
        Attributes =
        {
            ["key"] = BinaryData.FromObjectAsJson(new object())
        },
        TypeName = "<typeName>",
        LastModifiedTS = "<lastModifiedTS>",
        EntityGuid = "<entityGuid>",
        EntityStatus = EntityStatus.Active,
        RemovePropagationsOnEntityDelete = true,
        ValidityPeriods = {new TimeBoundary
        {
            EndTime = "<endTime>",
            StartTime = "<startTime>",
            TimeZone = "<timeZone>",
        }},
    }},
    LongDescription = "<longDescription>",
    Name = "<name>",
    QualifiedName = "<qualifiedName>",
    ShortDescription = "<shortDescription>",
    LastModifiedTS = "<lastModifiedTS>",
    CreateTime = 1234L,
    CreatedBy = "<createdBy>",
    UpdateTime = 1234L,
    UpdatedBy = "<updatedBy>",
    Abbreviation = "<abbreviation>",
    TemplateName = { BinaryData.FromObjectAsJson(new object()) },
    Anchor = new AtlasGlossaryHeader
    {
        DisplayText = "<displayText>",
        GlossaryGuid = "<glossaryGuid>",
        RelationGuid = "<relationGuid>",
    },
    Antonyms = {new AtlasRelatedTermHeader
    {
        Description = "<description>",
        DisplayText = "<displayText>",
        Expression = "<expression>",
        RelationGuid = "<relationGuid>",
        Status = AtlasTermRelationshipStatus.Draft,
        Steward = "<steward>",
        TermGuid = "<termGuid>",
    }},
    Status = TermStatus.Draft,
    NickName = "<nickName>",
    HierarchyInfo = {new PurviewObjectId
    {
        Guid = "<guid>",
        TypeName = "<typeName>",
        UniqueAttributes =
        {
            ["key"] = BinaryData.FromObjectAsJson(new object())
        },
        Name = "<name>",
        DisplayText = "<displayText>",
        ItemPath = "<itemPath>",
        ResourceId = "<resourceId>",
        Properties =
        {
            ["key"] = BinaryData.FromObjectAsJson(new object())
        },
    }},
    Resources = {new ResourceLink
    {
        DisplayName = "<displayName>",
        Url = "<url>",
    }},
    Contacts =
    {
        ["key"] = {new ContactInfo
        {
            Id = "<id>",
            Info = "<info>",
        }}
    },
    Attributes =
    {
        ["key"] =
        {
            ["key"] = BinaryData.FromObjectAsJson(new object())
        }
    },
    AssignedEntities = {new AtlasRelatedObjectId
    {
        Guid = "<guid>",
        TypeName = "<typeName>",
        UniqueAttributes =
        {
            ["key"] = BinaryData.FromObjectAsJson(new object())
        },
        DisplayText = "<displayText>",
        EntityStatus = EntityStatus.Active,
        RelationshipType = "<relationshipType>",
        RelationshipAttributes = new AtlasStruct
        {
            Attributes =
            {
                ["key"] = BinaryData.FromObjectAsJson(new object())
            },
            TypeName = "<typeName>",
            LastModifiedTS = "<lastModifiedTS>",
        },
        RelationshipGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
        RelationshipStatus = StatusAtlasRelationship.Active,
    }},
    Categories = {new AtlasTermCategorizationHeader
    {
        CategoryGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
        Description = "<description>",
        DisplayText = "<displayText>",
        RelationGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
        Status = AtlasTermRelationshipStatus.Draft,
    }},
    Classifies = { default },
    Examples = { "<examples>" },
    IsA = { default },
    PreferredTerms = { default },
    PreferredToTerms = { default },
    ReplacedBy = { default },
    ReplacementTerms = { default },
    SeeAlso = { default },
    Synonyms = { default },
    TranslatedTerms = { default },
    TranslationTerms = { default },
    Usage = "<usage>",
    ValidValues = { default },
    ValidValuesFor = { default },
};
Response<AtlasGlossaryTerm> response = await client.CreateTermAsync(atlasGlossaryTerm, includeTermHierarchy: true);
]]></code></example>
    </member>
    <member name="CreateTerm(AtlasGlossaryTerm,bool?,CancellationToken)">
      <example>
This sample shows how to call CreateTerm.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

AtlasGlossaryTerm atlasGlossaryTerm = new AtlasGlossaryTerm();
Response<AtlasGlossaryTerm> response = client.CreateTerm(atlasGlossaryTerm);
]]></code>
This sample shows how to call CreateTerm with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

AtlasGlossaryTerm atlasGlossaryTerm = new AtlasGlossaryTerm
{
    Guid = "<guid>",
    Classifications = {new AtlasClassification
    {
        Attributes =
        {
            ["key"] = BinaryData.FromObjectAsJson(new object())
        },
        TypeName = "<typeName>",
        LastModifiedTS = "<lastModifiedTS>",
        EntityGuid = "<entityGuid>",
        EntityStatus = EntityStatus.Active,
        RemovePropagationsOnEntityDelete = true,
        ValidityPeriods = {new TimeBoundary
        {
            EndTime = "<endTime>",
            StartTime = "<startTime>",
            TimeZone = "<timeZone>",
        }},
    }},
    LongDescription = "<longDescription>",
    Name = "<name>",
    QualifiedName = "<qualifiedName>",
    ShortDescription = "<shortDescription>",
    LastModifiedTS = "<lastModifiedTS>",
    CreateTime = 1234L,
    CreatedBy = "<createdBy>",
    UpdateTime = 1234L,
    UpdatedBy = "<updatedBy>",
    Abbreviation = "<abbreviation>",
    TemplateName = { BinaryData.FromObjectAsJson(new object()) },
    Anchor = new AtlasGlossaryHeader
    {
        DisplayText = "<displayText>",
        GlossaryGuid = "<glossaryGuid>",
        RelationGuid = "<relationGuid>",
    },
    Antonyms = {new AtlasRelatedTermHeader
    {
        Description = "<description>",
        DisplayText = "<displayText>",
        Expression = "<expression>",
        RelationGuid = "<relationGuid>",
        Status = AtlasTermRelationshipStatus.Draft,
        Steward = "<steward>",
        TermGuid = "<termGuid>",
    }},
    Status = TermStatus.Draft,
    NickName = "<nickName>",
    HierarchyInfo = {new PurviewObjectId
    {
        Guid = "<guid>",
        TypeName = "<typeName>",
        UniqueAttributes =
        {
            ["key"] = BinaryData.FromObjectAsJson(new object())
        },
        Name = "<name>",
        DisplayText = "<displayText>",
        ItemPath = "<itemPath>",
        ResourceId = "<resourceId>",
        Properties =
        {
            ["key"] = BinaryData.FromObjectAsJson(new object())
        },
    }},
    Resources = {new ResourceLink
    {
        DisplayName = "<displayName>",
        Url = "<url>",
    }},
    Contacts =
    {
        ["key"] = {new ContactInfo
        {
            Id = "<id>",
            Info = "<info>",
        }}
    },
    Attributes =
    {
        ["key"] =
        {
            ["key"] = BinaryData.FromObjectAsJson(new object())
        }
    },
    AssignedEntities = {new AtlasRelatedObjectId
    {
        Guid = "<guid>",
        TypeName = "<typeName>",
        UniqueAttributes =
        {
            ["key"] = BinaryData.FromObjectAsJson(new object())
        },
        DisplayText = "<displayText>",
        EntityStatus = EntityStatus.Active,
        RelationshipType = "<relationshipType>",
        RelationshipAttributes = new AtlasStruct
        {
            Attributes =
            {
                ["key"] = BinaryData.FromObjectAsJson(new object())
            },
            TypeName = "<typeName>",
            LastModifiedTS = "<lastModifiedTS>",
        },
        RelationshipGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
        RelationshipStatus = StatusAtlasRelationship.Active,
    }},
    Categories = {new AtlasTermCategorizationHeader
    {
        CategoryGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
        Description = "<description>",
        DisplayText = "<displayText>",
        RelationGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
        Status = AtlasTermRelationshipStatus.Draft,
    }},
    Classifies = { default },
    Examples = { "<examples>" },
    IsA = { default },
    PreferredTerms = { default },
    PreferredToTerms = { default },
    ReplacedBy = { default },
    ReplacementTerms = { default },
    SeeAlso = { default },
    Synonyms = { default },
    TranslatedTerms = { default },
    TranslationTerms = { default },
    Usage = "<usage>",
    ValidValues = { default },
    ValidValuesFor = { default },
};
Response<AtlasGlossaryTerm> response = client.CreateTerm(atlasGlossaryTerm, includeTermHierarchy: true);
]]></code></example>
    </member>
    <member name="CreateTermAsync(RequestContent,bool?,RequestContext)">
      <example>
This sample shows how to call CreateTermAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new object());
Response response = await client.CreateTermAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateTermAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new
{
    guid = "<guid>",
    classifications = new object[]
    {
        new
        {
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new object[]
            {
                new
                {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    createTime = 1234L,
    createdBy = "<createdBy>",
    updateTime = 1234L,
    updatedBy = "<updatedBy>",
    abbreviation = "<abbreviation>",
    templateName = new object[]
    {
        new object()
    },
    anchor = new
    {
        displayText = "<displayText>",
        glossaryGuid = "<glossaryGuid>",
        relationGuid = "<relationGuid>",
    },
    antonyms = new object[]
    {
        new
        {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    status = "Draft",
    nickName = "<nickName>",
    hierarchyInfo = new object[]
    {
        new
        {
            guid = "<guid>",
            typeName = "<typeName>",
            uniqueAttributes = new
            {
                key = new object(),
            },
            name = "<name>",
            displayText = "<displayText>",
            itemPath = "<itemPath>",
            resourceId = "<resourceId>",
            properties = new
            {
                key = new object(),
            },
        }
    },
    resources = new object[]
    {
        new
        {
            displayName = "<displayName>",
            url = "<url>",
        }
    },
    contacts = new
    {
        key = new object[]
        {
            new
            {
                id = "<id>",
                info = "<info>",
            }
        },
    },
    attributes = new
    {
        key = new
        {
            key = new object(),
        },
    },
    assignedEntities = new object[]
    {
        new
        {
            guid = "<guid>",
            typeName = "<typeName>",
            uniqueAttributes = new
            {
                key = new object(),
            },
            displayText = "<displayText>",
            entityStatus = "ACTIVE",
            relationshipType = "<relationshipType>",
            relationshipAttributes = new
            {
                attributes = new
                {
                    key = new object(),
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            },
            relationshipGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            relationshipStatus = "ACTIVE",
        }
    },
    categories = new object[]
    {
        new
        {
            categoryGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            description = "<description>",
            displayText = "<displayText>",
            relationGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            status = "DRAFT",
        }
    },
    classifies = new object[]
    {
        null
    },
    examples = new object[]
    {
        "<examples>"
    },
    isA = new object[]
    {
        null
    },
    preferredTerms = new object[]
    {
        null
    },
    preferredToTerms = new object[]
    {
        null
    },
    replacedBy = new object[]
    {
        null
    },
    replacementTerms = new object[]
    {
        null
    },
    seeAlso = new object[]
    {
        null
    },
    synonyms = new object[]
    {
        null
    },
    translatedTerms = new object[]
    {
        null
    },
    translationTerms = new object[]
    {
        null
    },
    usage = "<usage>",
    validValues = new object[]
    {
        null
    },
    validValuesFor = new object[]
    {
        null
    },
});
Response response = await client.CreateTermAsync(content, includeTermHierarchy: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("nickName").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("itemPath").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("properties").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
]]></code></example>
    </member>
    <member name="CreateTerm(RequestContent,bool?,RequestContext)">
      <example>
This sample shows how to call CreateTerm and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new object());
Response response = client.CreateTerm(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateTerm with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new
{
    guid = "<guid>",
    classifications = new object[]
    {
        new
        {
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new object[]
            {
                new
                {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    createTime = 1234L,
    createdBy = "<createdBy>",
    updateTime = 1234L,
    updatedBy = "<updatedBy>",
    abbreviation = "<abbreviation>",
    templateName = new object[]
    {
        new object()
    },
    anchor = new
    {
        displayText = "<displayText>",
        glossaryGuid = "<glossaryGuid>",
        relationGuid = "<relationGuid>",
    },
    antonyms = new object[]
    {
        new
        {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    status = "Draft",
    nickName = "<nickName>",
    hierarchyInfo = new object[]
    {
        new
        {
            guid = "<guid>",
            typeName = "<typeName>",
            uniqueAttributes = new
            {
                key = new object(),
            },
            name = "<name>",
            displayText = "<displayText>",
            itemPath = "<itemPath>",
            resourceId = "<resourceId>",
            properties = new
            {
                key = new object(),
            },
        }
    },
    resources = new object[]
    {
        new
        {
            displayName = "<displayName>",
            url = "<url>",
        }
    },
    contacts = new
    {
        key = new object[]
        {
            new
            {
                id = "<id>",
                info = "<info>",
            }
        },
    },
    attributes = new
    {
        key = new
        {
            key = new object(),
        },
    },
    assignedEntities = new object[]
    {
        new
        {
            guid = "<guid>",
            typeName = "<typeName>",
            uniqueAttributes = new
            {
                key = new object(),
            },
            displayText = "<displayText>",
            entityStatus = "ACTIVE",
            relationshipType = "<relationshipType>",
            relationshipAttributes = new
            {
                attributes = new
                {
                    key = new object(),
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            },
            relationshipGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            relationshipStatus = "ACTIVE",
        }
    },
    categories = new object[]
    {
        new
        {
            categoryGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            description = "<description>",
            displayText = "<displayText>",
            relationGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            status = "DRAFT",
        }
    },
    classifies = new object[]
    {
        null
    },
    examples = new object[]
    {
        "<examples>"
    },
    isA = new object[]
    {
        null
    },
    preferredTerms = new object[]
    {
        null
    },
    preferredToTerms = new object[]
    {
        null
    },
    replacedBy = new object[]
    {
        null
    },
    replacementTerms = new object[]
    {
        null
    },
    seeAlso = new object[]
    {
        null
    },
    synonyms = new object[]
    {
        null
    },
    translatedTerms = new object[]
    {
        null
    },
    translationTerms = new object[]
    {
        null
    },
    usage = "<usage>",
    validValues = new object[]
    {
        null
    },
    validValuesFor = new object[]
    {
        null
    },
});
Response response = client.CreateTerm(content, includeTermHierarchy: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("nickName").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("itemPath").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("properties").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
]]></code></example>
    </member>
    <member name="GetTermAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetTermAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<AtlasGlossaryTerm> response = await client.GetTermAsync("<termId>");
]]></code>
This sample shows how to call GetTermAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

Response<AtlasGlossaryTerm> response = await client.GetTermAsync("<termId>");
]]></code></example>
    </member>
    <member name="GetTerm(string,CancellationToken)">
      <example>
This sample shows how to call GetTerm.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<AtlasGlossaryTerm> response = client.GetTerm("<termId>");
]]></code>
This sample shows how to call GetTerm with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

Response<AtlasGlossaryTerm> response = client.GetTerm("<termId>");
]]></code></example>
    </member>
    <member name="GetTermAsync(string,RequestContext)">
      <example>
This sample shows how to call GetTermAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.GetTermAsync("<termId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetTermAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

Response response = await client.GetTermAsync("<termId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("nickName").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("itemPath").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("properties").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
]]></code></example>
    </member>
    <member name="GetTerm(string,RequestContext)">
      <example>
This sample shows how to call GetTerm and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.GetTerm("<termId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetTerm with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

Response response = client.GetTerm("<termId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("nickName").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("itemPath").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("properties").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
]]></code></example>
    </member>
    <member name="UpdateTermAsync(string,AtlasGlossaryTerm,bool?,CancellationToken)">
      <example>
This sample shows how to call UpdateTermAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

AtlasGlossaryTerm atlasGlossaryTerm = new AtlasGlossaryTerm();
Response<AtlasGlossaryTerm> response = await client.UpdateTermAsync("<termId>", atlasGlossaryTerm);
]]></code>
This sample shows how to call UpdateTermAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

AtlasGlossaryTerm atlasGlossaryTerm = new AtlasGlossaryTerm
{
    Guid = "<guid>",
    Classifications = {new AtlasClassification
    {
        Attributes =
        {
            ["key"] = BinaryData.FromObjectAsJson(new object())
        },
        TypeName = "<typeName>",
        LastModifiedTS = "<lastModifiedTS>",
        EntityGuid = "<entityGuid>",
        EntityStatus = EntityStatus.Active,
        RemovePropagationsOnEntityDelete = true,
        ValidityPeriods = {new TimeBoundary
        {
            EndTime = "<endTime>",
            StartTime = "<startTime>",
            TimeZone = "<timeZone>",
        }},
    }},
    LongDescription = "<longDescription>",
    Name = "<name>",
    QualifiedName = "<qualifiedName>",
    ShortDescription = "<shortDescription>",
    LastModifiedTS = "<lastModifiedTS>",
    CreateTime = 1234L,
    CreatedBy = "<createdBy>",
    UpdateTime = 1234L,
    UpdatedBy = "<updatedBy>",
    Abbreviation = "<abbreviation>",
    TemplateName = { BinaryData.FromObjectAsJson(new object()) },
    Anchor = new AtlasGlossaryHeader
    {
        DisplayText = "<displayText>",
        GlossaryGuid = "<glossaryGuid>",
        RelationGuid = "<relationGuid>",
    },
    Antonyms = {new AtlasRelatedTermHeader
    {
        Description = "<description>",
        DisplayText = "<displayText>",
        Expression = "<expression>",
        RelationGuid = "<relationGuid>",
        Status = AtlasTermRelationshipStatus.Draft,
        Steward = "<steward>",
        TermGuid = "<termGuid>",
    }},
    Status = TermStatus.Draft,
    NickName = "<nickName>",
    HierarchyInfo = {new PurviewObjectId
    {
        Guid = "<guid>",
        TypeName = "<typeName>",
        UniqueAttributes =
        {
            ["key"] = BinaryData.FromObjectAsJson(new object())
        },
        Name = "<name>",
        DisplayText = "<displayText>",
        ItemPath = "<itemPath>",
        ResourceId = "<resourceId>",
        Properties =
        {
            ["key"] = BinaryData.FromObjectAsJson(new object())
        },
    }},
    Resources = {new ResourceLink
    {
        DisplayName = "<displayName>",
        Url = "<url>",
    }},
    Contacts =
    {
        ["key"] = {new ContactInfo
        {
            Id = "<id>",
            Info = "<info>",
        }}
    },
    Attributes =
    {
        ["key"] =
        {
            ["key"] = BinaryData.FromObjectAsJson(new object())
        }
    },
    AssignedEntities = {new AtlasRelatedObjectId
    {
        Guid = "<guid>",
        TypeName = "<typeName>",
        UniqueAttributes =
        {
            ["key"] = BinaryData.FromObjectAsJson(new object())
        },
        DisplayText = "<displayText>",
        EntityStatus = EntityStatus.Active,
        RelationshipType = "<relationshipType>",
        RelationshipAttributes = new AtlasStruct
        {
            Attributes =
            {
                ["key"] = BinaryData.FromObjectAsJson(new object())
            },
            TypeName = "<typeName>",
            LastModifiedTS = "<lastModifiedTS>",
        },
        RelationshipGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
        RelationshipStatus = StatusAtlasRelationship.Active,
    }},
    Categories = {new AtlasTermCategorizationHeader
    {
        CategoryGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
        Description = "<description>",
        DisplayText = "<displayText>",
        RelationGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
        Status = AtlasTermRelationshipStatus.Draft,
    }},
    Classifies = { default },
    Examples = { "<examples>" },
    IsA = { default },
    PreferredTerms = { default },
    PreferredToTerms = { default },
    ReplacedBy = { default },
    ReplacementTerms = { default },
    SeeAlso = { default },
    Synonyms = { default },
    TranslatedTerms = { default },
    TranslationTerms = { default },
    Usage = "<usage>",
    ValidValues = { default },
    ValidValuesFor = { default },
};
Response<AtlasGlossaryTerm> response = await client.UpdateTermAsync("<termId>", atlasGlossaryTerm, includeTermHierarchy: true);
]]></code></example>
    </member>
    <member name="UpdateTerm(string,AtlasGlossaryTerm,bool?,CancellationToken)">
      <example>
This sample shows how to call UpdateTerm.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

AtlasGlossaryTerm atlasGlossaryTerm = new AtlasGlossaryTerm();
Response<AtlasGlossaryTerm> response = client.UpdateTerm("<termId>", atlasGlossaryTerm);
]]></code>
This sample shows how to call UpdateTerm with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

AtlasGlossaryTerm atlasGlossaryTerm = new AtlasGlossaryTerm
{
    Guid = "<guid>",
    Classifications = {new AtlasClassification
    {
        Attributes =
        {
            ["key"] = BinaryData.FromObjectAsJson(new object())
        },
        TypeName = "<typeName>",
        LastModifiedTS = "<lastModifiedTS>",
        EntityGuid = "<entityGuid>",
        EntityStatus = EntityStatus.Active,
        RemovePropagationsOnEntityDelete = true,
        ValidityPeriods = {new TimeBoundary
        {
            EndTime = "<endTime>",
            StartTime = "<startTime>",
            TimeZone = "<timeZone>",
        }},
    }},
    LongDescription = "<longDescription>",
    Name = "<name>",
    QualifiedName = "<qualifiedName>",
    ShortDescription = "<shortDescription>",
    LastModifiedTS = "<lastModifiedTS>",
    CreateTime = 1234L,
    CreatedBy = "<createdBy>",
    UpdateTime = 1234L,
    UpdatedBy = "<updatedBy>",
    Abbreviation = "<abbreviation>",
    TemplateName = { BinaryData.FromObjectAsJson(new object()) },
    Anchor = new AtlasGlossaryHeader
    {
        DisplayText = "<displayText>",
        GlossaryGuid = "<glossaryGuid>",
        RelationGuid = "<relationGuid>",
    },
    Antonyms = {new AtlasRelatedTermHeader
    {
        Description = "<description>",
        DisplayText = "<displayText>",
        Expression = "<expression>",
        RelationGuid = "<relationGuid>",
        Status = AtlasTermRelationshipStatus.Draft,
        Steward = "<steward>",
        TermGuid = "<termGuid>",
    }},
    Status = TermStatus.Draft,
    NickName = "<nickName>",
    HierarchyInfo = {new PurviewObjectId
    {
        Guid = "<guid>",
        TypeName = "<typeName>",
        UniqueAttributes =
        {
            ["key"] = BinaryData.FromObjectAsJson(new object())
        },
        Name = "<name>",
        DisplayText = "<displayText>",
        ItemPath = "<itemPath>",
        ResourceId = "<resourceId>",
        Properties =
        {
            ["key"] = BinaryData.FromObjectAsJson(new object())
        },
    }},
    Resources = {new ResourceLink
    {
        DisplayName = "<displayName>",
        Url = "<url>",
    }},
    Contacts =
    {
        ["key"] = {new ContactInfo
        {
            Id = "<id>",
            Info = "<info>",
        }}
    },
    Attributes =
    {
        ["key"] =
        {
            ["key"] = BinaryData.FromObjectAsJson(new object())
        }
    },
    AssignedEntities = {new AtlasRelatedObjectId
    {
        Guid = "<guid>",
        TypeName = "<typeName>",
        UniqueAttributes =
        {
            ["key"] = BinaryData.FromObjectAsJson(new object())
        },
        DisplayText = "<displayText>",
        EntityStatus = EntityStatus.Active,
        RelationshipType = "<relationshipType>",
        RelationshipAttributes = new AtlasStruct
        {
            Attributes =
            {
                ["key"] = BinaryData.FromObjectAsJson(new object())
            },
            TypeName = "<typeName>",
            LastModifiedTS = "<lastModifiedTS>",
        },
        RelationshipGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
        RelationshipStatus = StatusAtlasRelationship.Active,
    }},
    Categories = {new AtlasTermCategorizationHeader
    {
        CategoryGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
        Description = "<description>",
        DisplayText = "<displayText>",
        RelationGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
        Status = AtlasTermRelationshipStatus.Draft,
    }},
    Classifies = { default },
    Examples = { "<examples>" },
    IsA = { default },
    PreferredTerms = { default },
    PreferredToTerms = { default },
    ReplacedBy = { default },
    ReplacementTerms = { default },
    SeeAlso = { default },
    Synonyms = { default },
    TranslatedTerms = { default },
    TranslationTerms = { default },
    Usage = "<usage>",
    ValidValues = { default },
    ValidValuesFor = { default },
};
Response<AtlasGlossaryTerm> response = client.UpdateTerm("<termId>", atlasGlossaryTerm, includeTermHierarchy: true);
]]></code></example>
    </member>
    <member name="UpdateTermAsync(string,RequestContent,bool?,RequestContext)">
      <example>
This sample shows how to call UpdateTermAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new object());
Response response = await client.UpdateTermAsync("<termId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call UpdateTermAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    guid = "<guid>",
    classifications = new object[]
    {
        new
        {
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new object[]
            {
                new
                {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    createTime = 1234L,
    createdBy = "<createdBy>",
    updateTime = 1234L,
    updatedBy = "<updatedBy>",
    abbreviation = "<abbreviation>",
    templateName = new object[]
    {
        new object()
    },
    anchor = new
    {
        displayText = "<displayText>",
        glossaryGuid = "<glossaryGuid>",
        relationGuid = "<relationGuid>",
    },
    antonyms = new object[]
    {
        new
        {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    status = "Draft",
    nickName = "<nickName>",
    hierarchyInfo = new object[]
    {
        new
        {
            guid = "<guid>",
            typeName = "<typeName>",
            uniqueAttributes = new
            {
                key = new object(),
            },
            name = "<name>",
            displayText = "<displayText>",
            itemPath = "<itemPath>",
            resourceId = "<resourceId>",
            properties = new
            {
                key = new object(),
            },
        }
    },
    resources = new object[]
    {
        new
        {
            displayName = "<displayName>",
            url = "<url>",
        }
    },
    contacts = new
    {
        key = new object[]
        {
            new
            {
                id = "<id>",
                info = "<info>",
            }
        },
    },
    attributes = new
    {
        key = new
        {
            key = new object(),
        },
    },
    assignedEntities = new object[]
    {
        new
        {
            guid = "<guid>",
            typeName = "<typeName>",
            uniqueAttributes = new
            {
                key = new object(),
            },
            displayText = "<displayText>",
            entityStatus = "ACTIVE",
            relationshipType = "<relationshipType>",
            relationshipAttributes = new
            {
                attributes = new
                {
                    key = new object(),
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            },
            relationshipGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            relationshipStatus = "ACTIVE",
        }
    },
    categories = new object[]
    {
        new
        {
            categoryGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            description = "<description>",
            displayText = "<displayText>",
            relationGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            status = "DRAFT",
        }
    },
    classifies = new object[]
    {
        null
    },
    examples = new object[]
    {
        "<examples>"
    },
    isA = new object[]
    {
        null
    },
    preferredTerms = new object[]
    {
        null
    },
    preferredToTerms = new object[]
    {
        null
    },
    replacedBy = new object[]
    {
        null
    },
    replacementTerms = new object[]
    {
        null
    },
    seeAlso = new object[]
    {
        null
    },
    synonyms = new object[]
    {
        null
    },
    translatedTerms = new object[]
    {
        null
    },
    translationTerms = new object[]
    {
        null
    },
    usage = "<usage>",
    validValues = new object[]
    {
        null
    },
    validValuesFor = new object[]
    {
        null
    },
});
Response response = await client.UpdateTermAsync("<termId>", content, includeTermHierarchy: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("nickName").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("itemPath").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("properties").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
]]></code></example>
    </member>
    <member name="UpdateTerm(string,RequestContent,bool?,RequestContext)">
      <example>
This sample shows how to call UpdateTerm and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new object());
Response response = client.UpdateTerm("<termId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call UpdateTerm with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    guid = "<guid>",
    classifications = new object[]
    {
        new
        {
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new object[]
            {
                new
                {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    createTime = 1234L,
    createdBy = "<createdBy>",
    updateTime = 1234L,
    updatedBy = "<updatedBy>",
    abbreviation = "<abbreviation>",
    templateName = new object[]
    {
        new object()
    },
    anchor = new
    {
        displayText = "<displayText>",
        glossaryGuid = "<glossaryGuid>",
        relationGuid = "<relationGuid>",
    },
    antonyms = new object[]
    {
        new
        {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    status = "Draft",
    nickName = "<nickName>",
    hierarchyInfo = new object[]
    {
        new
        {
            guid = "<guid>",
            typeName = "<typeName>",
            uniqueAttributes = new
            {
                key = new object(),
            },
            name = "<name>",
            displayText = "<displayText>",
            itemPath = "<itemPath>",
            resourceId = "<resourceId>",
            properties = new
            {
                key = new object(),
            },
        }
    },
    resources = new object[]
    {
        new
        {
            displayName = "<displayName>",
            url = "<url>",
        }
    },
    contacts = new
    {
        key = new object[]
        {
            new
            {
                id = "<id>",
                info = "<info>",
            }
        },
    },
    attributes = new
    {
        key = new
        {
            key = new object(),
        },
    },
    assignedEntities = new object[]
    {
        new
        {
            guid = "<guid>",
            typeName = "<typeName>",
            uniqueAttributes = new
            {
                key = new object(),
            },
            displayText = "<displayText>",
            entityStatus = "ACTIVE",
            relationshipType = "<relationshipType>",
            relationshipAttributes = new
            {
                attributes = new
                {
                    key = new object(),
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            },
            relationshipGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            relationshipStatus = "ACTIVE",
        }
    },
    categories = new object[]
    {
        new
        {
            categoryGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            description = "<description>",
            displayText = "<displayText>",
            relationGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            status = "DRAFT",
        }
    },
    classifies = new object[]
    {
        null
    },
    examples = new object[]
    {
        "<examples>"
    },
    isA = new object[]
    {
        null
    },
    preferredTerms = new object[]
    {
        null
    },
    preferredToTerms = new object[]
    {
        null
    },
    replacedBy = new object[]
    {
        null
    },
    replacementTerms = new object[]
    {
        null
    },
    seeAlso = new object[]
    {
        null
    },
    synonyms = new object[]
    {
        null
    },
    translatedTerms = new object[]
    {
        null
    },
    translationTerms = new object[]
    {
        null
    },
    usage = "<usage>",
    validValues = new object[]
    {
        null
    },
    validValuesFor = new object[]
    {
        null
    },
});
Response response = client.UpdateTerm("<termId>", content, includeTermHierarchy: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("nickName").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("itemPath").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("properties").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
]]></code></example>
    </member>
    <member name="DeleteTermAsync(string,RequestContext)">
      <example>
This sample shows how to call DeleteTermAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.DeleteTermAsync("<termId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteTermAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.DeleteTermAsync("<termId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteTerm(string,RequestContext)">
      <example>
This sample shows how to call DeleteTerm.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.DeleteTerm("<termId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteTerm with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.DeleteTerm("<termId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="PartialUpdateTermAsync(string,IDictionary{string,string},bool?,CancellationToken)">
      <example>
This sample shows how to call PartialUpdateTermAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<AtlasGlossaryTerm> response = await client.PartialUpdateTermAsync("<termId>", new Dictionary<string, string>
{
    ["key"] = "<body>"
});
]]></code>
This sample shows how to call PartialUpdateTermAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

Response<AtlasGlossaryTerm> response = await client.PartialUpdateTermAsync("<termId>", new Dictionary<string, string>
{
    ["key"] = "<body>"
}, includeTermHierarchy: true);
]]></code></example>
    </member>
    <member name="PartialUpdateTerm(string,IDictionary{string,string},bool?,CancellationToken)">
      <example>
This sample shows how to call PartialUpdateTerm.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<AtlasGlossaryTerm> response = client.PartialUpdateTerm("<termId>", new Dictionary<string, string>
{
    ["key"] = "<body>"
});
]]></code>
This sample shows how to call PartialUpdateTerm with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

Response<AtlasGlossaryTerm> response = client.PartialUpdateTerm("<termId>", new Dictionary<string, string>
{
    ["key"] = "<body>"
}, includeTermHierarchy: true);
]]></code></example>
    </member>
    <member name="PartialUpdateTermAsync(string,RequestContent,bool?,RequestContext)">
      <example>
This sample shows how to call PartialUpdateTermAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new
{
    key = "<body>",
});
Response response = await client.PartialUpdateTermAsync("<termId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PartialUpdateTermAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    key = "<body>",
});
Response response = await client.PartialUpdateTermAsync("<termId>", content, includeTermHierarchy: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("nickName").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("itemPath").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("properties").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
]]></code></example>
    </member>
    <member name="PartialUpdateTerm(string,RequestContent,bool?,RequestContext)">
      <example>
This sample shows how to call PartialUpdateTerm and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new
{
    key = "<body>",
});
Response response = client.PartialUpdateTerm("<termId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PartialUpdateTerm with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    key = "<body>",
});
Response response = client.PartialUpdateTerm("<termId>", content, includeTermHierarchy: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("nickName").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("itemPath").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("properties").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
]]></code></example>
    </member>
    <member name="CreateTermsAsync(IEnumerable{AtlasGlossaryTerm},bool?,CancellationToken)">
      <example>
This sample shows how to call CreateTermsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasGlossaryTerm>> response = await client.CreateTermsAsync(new AtlasGlossaryTerm[]
{
    new AtlasGlossaryTerm()
});
]]></code>
This sample shows how to call CreateTermsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

Response<IReadOnlyList<AtlasGlossaryTerm>> response = await client.CreateTermsAsync(new AtlasGlossaryTerm[]
{
    new AtlasGlossaryTerm
    {
        Guid = "<guid>",
        Classifications = {new AtlasClassification
        {
            Attributes =
            {
                ["key"] = BinaryData.FromObjectAsJson(new object())
            },
            TypeName = "<typeName>",
            LastModifiedTS = "<lastModifiedTS>",
            EntityGuid = "<entityGuid>",
            EntityStatus = EntityStatus.Active,
            RemovePropagationsOnEntityDelete = true,
            ValidityPeriods = {new TimeBoundary
            {
                EndTime = "<endTime>",
                StartTime = "<startTime>",
                TimeZone = "<timeZone>",
            }},
        }},
        LongDescription = "<longDescription>",
        Name = "<name>",
        QualifiedName = "<qualifiedName>",
        ShortDescription = "<shortDescription>",
        LastModifiedTS = "<lastModifiedTS>",
        CreateTime = 1234L,
        CreatedBy = "<createdBy>",
        UpdateTime = 1234L,
        UpdatedBy = "<updatedBy>",
        Abbreviation = "<abbreviation>",
        TemplateName = {BinaryData.FromObjectAsJson(new object())},
        Anchor = new AtlasGlossaryHeader
        {
            DisplayText = "<displayText>",
            GlossaryGuid = "<glossaryGuid>",
            RelationGuid = "<relationGuid>",
        },
        Antonyms = {new AtlasRelatedTermHeader
        {
            Description = "<description>",
            DisplayText = "<displayText>",
            Expression = "<expression>",
            RelationGuid = "<relationGuid>",
            Status = AtlasTermRelationshipStatus.Draft,
            Steward = "<steward>",
            TermGuid = "<termGuid>",
        }},
        Status = TermStatus.Draft,
        NickName = "<nickName>",
        HierarchyInfo = {new PurviewObjectId
        {
            Guid = "<guid>",
            TypeName = "<typeName>",
            UniqueAttributes =
            {
                ["key"] = BinaryData.FromObjectAsJson(new object())
            },
            Name = "<name>",
            DisplayText = "<displayText>",
            ItemPath = "<itemPath>",
            ResourceId = "<resourceId>",
            Properties =
            {
                ["key"] = BinaryData.FromObjectAsJson(new object())
            },
        }},
        Resources = {new ResourceLink
        {
            DisplayName = "<displayName>",
            Url = "<url>",
        }},
        Contacts =
        {
            ["key"] = {new ContactInfo
            {
                Id = "<id>",
                Info = "<info>",
            }}
        },
        Attributes =
        {
            ["key"] =
            {
                ["key"] = BinaryData.FromObjectAsJson(new object())
            }
        },
        AssignedEntities = {new AtlasRelatedObjectId
        {
            Guid = "<guid>",
            TypeName = "<typeName>",
            UniqueAttributes =
            {
                ["key"] = BinaryData.FromObjectAsJson(new object())
            },
            DisplayText = "<displayText>",
            EntityStatus = EntityStatus.Active,
            RelationshipType = "<relationshipType>",
            RelationshipAttributes = new AtlasStruct
            {
                Attributes =
                {
                    ["key"] = BinaryData.FromObjectAsJson(new object())
                },
                TypeName = "<typeName>",
                LastModifiedTS = "<lastModifiedTS>",
            },
            RelationshipGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
            RelationshipStatus = StatusAtlasRelationship.Active,
        }},
        Categories = {new AtlasTermCategorizationHeader
        {
            CategoryGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
            Description = "<description>",
            DisplayText = "<displayText>",
            RelationGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
            Status = AtlasTermRelationshipStatus.Draft,
        }},
        Classifies = {default},
        Examples = {"<examples>"},
        IsA = {default},
        PreferredTerms = {default},
        PreferredToTerms = {default},
        ReplacedBy = {default},
        ReplacementTerms = {default},
        SeeAlso = {default},
        Synonyms = {default},
        TranslatedTerms = {default},
        TranslationTerms = {default},
        Usage = "<usage>",
        ValidValues = {default},
        ValidValuesFor = {default},
    }
}, includeTermHierarchy: true);
]]></code></example>
    </member>
    <member name="CreateTerms(IEnumerable{AtlasGlossaryTerm},bool?,CancellationToken)">
      <example>
This sample shows how to call CreateTerms.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasGlossaryTerm>> response = client.CreateTerms(new AtlasGlossaryTerm[]
{
    new AtlasGlossaryTerm()
});
]]></code>
This sample shows how to call CreateTerms with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

Response<IReadOnlyList<AtlasGlossaryTerm>> response = client.CreateTerms(new AtlasGlossaryTerm[]
{
    new AtlasGlossaryTerm
    {
        Guid = "<guid>",
        Classifications = {new AtlasClassification
        {
            Attributes =
            {
                ["key"] = BinaryData.FromObjectAsJson(new object())
            },
            TypeName = "<typeName>",
            LastModifiedTS = "<lastModifiedTS>",
            EntityGuid = "<entityGuid>",
            EntityStatus = EntityStatus.Active,
            RemovePropagationsOnEntityDelete = true,
            ValidityPeriods = {new TimeBoundary
            {
                EndTime = "<endTime>",
                StartTime = "<startTime>",
                TimeZone = "<timeZone>",
            }},
        }},
        LongDescription = "<longDescription>",
        Name = "<name>",
        QualifiedName = "<qualifiedName>",
        ShortDescription = "<shortDescription>",
        LastModifiedTS = "<lastModifiedTS>",
        CreateTime = 1234L,
        CreatedBy = "<createdBy>",
        UpdateTime = 1234L,
        UpdatedBy = "<updatedBy>",
        Abbreviation = "<abbreviation>",
        TemplateName = {BinaryData.FromObjectAsJson(new object())},
        Anchor = new AtlasGlossaryHeader
        {
            DisplayText = "<displayText>",
            GlossaryGuid = "<glossaryGuid>",
            RelationGuid = "<relationGuid>",
        },
        Antonyms = {new AtlasRelatedTermHeader
        {
            Description = "<description>",
            DisplayText = "<displayText>",
            Expression = "<expression>",
            RelationGuid = "<relationGuid>",
            Status = AtlasTermRelationshipStatus.Draft,
            Steward = "<steward>",
            TermGuid = "<termGuid>",
        }},
        Status = TermStatus.Draft,
        NickName = "<nickName>",
        HierarchyInfo = {new PurviewObjectId
        {
            Guid = "<guid>",
            TypeName = "<typeName>",
            UniqueAttributes =
            {
                ["key"] = BinaryData.FromObjectAsJson(new object())
            },
            Name = "<name>",
            DisplayText = "<displayText>",
            ItemPath = "<itemPath>",
            ResourceId = "<resourceId>",
            Properties =
            {
                ["key"] = BinaryData.FromObjectAsJson(new object())
            },
        }},
        Resources = {new ResourceLink
        {
            DisplayName = "<displayName>",
            Url = "<url>",
        }},
        Contacts =
        {
            ["key"] = {new ContactInfo
            {
                Id = "<id>",
                Info = "<info>",
            }}
        },
        Attributes =
        {
            ["key"] =
            {
                ["key"] = BinaryData.FromObjectAsJson(new object())
            }
        },
        AssignedEntities = {new AtlasRelatedObjectId
        {
            Guid = "<guid>",
            TypeName = "<typeName>",
            UniqueAttributes =
            {
                ["key"] = BinaryData.FromObjectAsJson(new object())
            },
            DisplayText = "<displayText>",
            EntityStatus = EntityStatus.Active,
            RelationshipType = "<relationshipType>",
            RelationshipAttributes = new AtlasStruct
            {
                Attributes =
                {
                    ["key"] = BinaryData.FromObjectAsJson(new object())
                },
                TypeName = "<typeName>",
                LastModifiedTS = "<lastModifiedTS>",
            },
            RelationshipGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
            RelationshipStatus = StatusAtlasRelationship.Active,
        }},
        Categories = {new AtlasTermCategorizationHeader
        {
            CategoryGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
            Description = "<description>",
            DisplayText = "<displayText>",
            RelationGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
            Status = AtlasTermRelationshipStatus.Draft,
        }},
        Classifies = {default},
        Examples = {"<examples>"},
        IsA = {default},
        PreferredTerms = {default},
        PreferredToTerms = {default},
        ReplacedBy = {default},
        ReplacementTerms = {default},
        SeeAlso = {default},
        Synonyms = {default},
        TranslatedTerms = {default},
        TranslationTerms = {default},
        Usage = "<usage>",
        ValidValues = {default},
        ValidValuesFor = {default},
    }
}, includeTermHierarchy: true);
]]></code></example>
    </member>
    <member name="CreateTermsAsync(RequestContent,bool?,RequestContext)">
      <example>
This sample shows how to call CreateTermsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new object()
});
Response response = await client.CreateTermsAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call CreateTermsAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        guid = "<guid>",
        classifications = new object[]
        {
            new
            {
                attributes = new
                {
                    key = new object(),
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
                entityGuid = "<entityGuid>",
                entityStatus = "ACTIVE",
                removePropagationsOnEntityDelete = true,
                validityPeriods = new object[]
                {
                    new
                    {
                        endTime = "<endTime>",
                        startTime = "<startTime>",
                        timeZone = "<timeZone>",
                    }
                },
            }
        },
        longDescription = "<longDescription>",
        name = "<name>",
        qualifiedName = "<qualifiedName>",
        shortDescription = "<shortDescription>",
        lastModifiedTS = "<lastModifiedTS>",
        createTime = 1234L,
        createdBy = "<createdBy>",
        updateTime = 1234L,
        updatedBy = "<updatedBy>",
        abbreviation = "<abbreviation>",
        templateName = new object[]
        {
            new object()
        },
        anchor = new
        {
            displayText = "<displayText>",
            glossaryGuid = "<glossaryGuid>",
            relationGuid = "<relationGuid>",
        },
        antonyms = new object[]
        {
            new
            {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        status = "Draft",
        nickName = "<nickName>",
        hierarchyInfo = new object[]
        {
            new
            {
                guid = "<guid>",
                typeName = "<typeName>",
                uniqueAttributes = new
                {
                    key = new object(),
                },
                name = "<name>",
                displayText = "<displayText>",
                itemPath = "<itemPath>",
                resourceId = "<resourceId>",
                properties = new
                {
                    key = new object(),
                },
            }
        },
        resources = new object[]
        {
            new
            {
                displayName = "<displayName>",
                url = "<url>",
            }
        },
        contacts = new
        {
            key = new object[]
            {
                new
                {
                    id = "<id>",
                    info = "<info>",
                }
            },
        },
        attributes = new
        {
            key = new
            {
                key = new object(),
            },
        },
        assignedEntities = new object[]
        {
            new
            {
                guid = "<guid>",
                typeName = "<typeName>",
                uniqueAttributes = new
                {
                    key = new object(),
                },
                displayText = "<displayText>",
                entityStatus = "ACTIVE",
                relationshipType = "<relationshipType>",
                relationshipAttributes = new
                {
                    attributes = new
                    {
                        key = new object(),
                    },
                    typeName = "<typeName>",
                    lastModifiedTS = "<lastModifiedTS>",
                },
                relationshipGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                relationshipStatus = "ACTIVE",
            }
        },
        categories = new object[]
        {
            new
            {
                categoryGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                description = "<description>",
                displayText = "<displayText>",
                relationGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                status = "DRAFT",
            }
        },
        classifies = new object[]
        {
            null
        },
        examples = new object[]
        {
            "<examples>"
        },
        isA = new object[]
        {
            null
        },
        preferredTerms = new object[]
        {
            null
        },
        preferredToTerms = new object[]
        {
            null
        },
        replacedBy = new object[]
        {
            null
        },
        replacementTerms = new object[]
        {
            null
        },
        seeAlso = new object[]
        {
            null
        },
        synonyms = new object[]
        {
            null
        },
        translatedTerms = new object[]
        {
            null
        },
        translationTerms = new object[]
        {
            null
        },
        usage = "<usage>",
        validValues = new object[]
        {
            null
        },
        validValuesFor = new object[]
        {
            null
        },
    }
});
Response response = await client.CreateTermsAsync(content, includeTermHierarchy: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("createTime").ToString());
Console.WriteLine(result[0].GetProperty("createdBy").ToString());
Console.WriteLine(result[0].GetProperty("updateTime").ToString());
Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
Console.WriteLine(result[0].GetProperty("abbreviation").ToString());
Console.WriteLine(result[0].GetProperty("templateName")[0].ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("nickName").ToString());
Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("itemPath").ToString());
Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("resourceId").ToString());
Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("properties").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result[0].GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("examples")[0].ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("usage").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
]]></code></example>
    </member>
    <member name="CreateTerms(RequestContent,bool?,RequestContext)">
      <example>
This sample shows how to call CreateTerms and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new object()
});
Response response = client.CreateTerms(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call CreateTerms with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        guid = "<guid>",
        classifications = new object[]
        {
            new
            {
                attributes = new
                {
                    key = new object(),
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
                entityGuid = "<entityGuid>",
                entityStatus = "ACTIVE",
                removePropagationsOnEntityDelete = true,
                validityPeriods = new object[]
                {
                    new
                    {
                        endTime = "<endTime>",
                        startTime = "<startTime>",
                        timeZone = "<timeZone>",
                    }
                },
            }
        },
        longDescription = "<longDescription>",
        name = "<name>",
        qualifiedName = "<qualifiedName>",
        shortDescription = "<shortDescription>",
        lastModifiedTS = "<lastModifiedTS>",
        createTime = 1234L,
        createdBy = "<createdBy>",
        updateTime = 1234L,
        updatedBy = "<updatedBy>",
        abbreviation = "<abbreviation>",
        templateName = new object[]
        {
            new object()
        },
        anchor = new
        {
            displayText = "<displayText>",
            glossaryGuid = "<glossaryGuid>",
            relationGuid = "<relationGuid>",
        },
        antonyms = new object[]
        {
            new
            {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        status = "Draft",
        nickName = "<nickName>",
        hierarchyInfo = new object[]
        {
            new
            {
                guid = "<guid>",
                typeName = "<typeName>",
                uniqueAttributes = new
                {
                    key = new object(),
                },
                name = "<name>",
                displayText = "<displayText>",
                itemPath = "<itemPath>",
                resourceId = "<resourceId>",
                properties = new
                {
                    key = new object(),
                },
            }
        },
        resources = new object[]
        {
            new
            {
                displayName = "<displayName>",
                url = "<url>",
            }
        },
        contacts = new
        {
            key = new object[]
            {
                new
                {
                    id = "<id>",
                    info = "<info>",
                }
            },
        },
        attributes = new
        {
            key = new
            {
                key = new object(),
            },
        },
        assignedEntities = new object[]
        {
            new
            {
                guid = "<guid>",
                typeName = "<typeName>",
                uniqueAttributes = new
                {
                    key = new object(),
                },
                displayText = "<displayText>",
                entityStatus = "ACTIVE",
                relationshipType = "<relationshipType>",
                relationshipAttributes = new
                {
                    attributes = new
                    {
                        key = new object(),
                    },
                    typeName = "<typeName>",
                    lastModifiedTS = "<lastModifiedTS>",
                },
                relationshipGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                relationshipStatus = "ACTIVE",
            }
        },
        categories = new object[]
        {
            new
            {
                categoryGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                description = "<description>",
                displayText = "<displayText>",
                relationGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                status = "DRAFT",
            }
        },
        classifies = new object[]
        {
            null
        },
        examples = new object[]
        {
            "<examples>"
        },
        isA = new object[]
        {
            null
        },
        preferredTerms = new object[]
        {
            null
        },
        preferredToTerms = new object[]
        {
            null
        },
        replacedBy = new object[]
        {
            null
        },
        replacementTerms = new object[]
        {
            null
        },
        seeAlso = new object[]
        {
            null
        },
        synonyms = new object[]
        {
            null
        },
        translatedTerms = new object[]
        {
            null
        },
        translationTerms = new object[]
        {
            null
        },
        usage = "<usage>",
        validValues = new object[]
        {
            null
        },
        validValuesFor = new object[]
        {
            null
        },
    }
});
Response response = client.CreateTerms(content, includeTermHierarchy: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("createTime").ToString());
Console.WriteLine(result[0].GetProperty("createdBy").ToString());
Console.WriteLine(result[0].GetProperty("updateTime").ToString());
Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
Console.WriteLine(result[0].GetProperty("abbreviation").ToString());
Console.WriteLine(result[0].GetProperty("templateName")[0].ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("nickName").ToString());
Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("itemPath").ToString());
Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("resourceId").ToString());
Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("properties").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result[0].GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("examples")[0].ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("usage").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
]]></code></example>
    </member>
    <member name="GetEntitiesAssignedWithTermAsync(string,int?,int?,string,CancellationToken)">
      <example>
This sample shows how to call GetEntitiesAssignedWithTermAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasRelatedObjectId>> response = await client.GetEntitiesAssignedWithTermAsync("<termId>");
]]></code>
This sample shows how to call GetEntitiesAssignedWithTermAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasRelatedObjectId>> response = await client.GetEntitiesAssignedWithTermAsync("<termId>", limit: 1234, offset: 1234, sort: "<sort>");
]]></code></example>
    </member>
    <member name="GetEntitiesAssignedWithTerm(string,int?,int?,string,CancellationToken)">
      <example>
This sample shows how to call GetEntitiesAssignedWithTerm.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasRelatedObjectId>> response = client.GetEntitiesAssignedWithTerm("<termId>");
]]></code>
This sample shows how to call GetEntitiesAssignedWithTerm with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasRelatedObjectId>> response = client.GetEntitiesAssignedWithTerm("<termId>", limit: 1234, offset: 1234, sort: "<sort>");
]]></code></example>
    </member>
    <member name="GetEntitiesAssignedWithTermAsync(string,int?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetEntitiesAssignedWithTermAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.GetEntitiesAssignedWithTermAsync("<termId>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetEntitiesAssignedWithTermAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.GetEntitiesAssignedWithTermAsync("<termId>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result[0].GetProperty("relationshipStatus").ToString());
]]></code></example>
    </member>
    <member name="GetEntitiesAssignedWithTerm(string,int?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetEntitiesAssignedWithTerm and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.GetEntitiesAssignedWithTerm("<termId>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetEntitiesAssignedWithTerm with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.GetEntitiesAssignedWithTerm("<termId>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result[0].GetProperty("relationshipStatus").ToString());
]]></code></example>
    </member>
    <member name="AssignTermToEntitiesAsync(string,IEnumerable{AtlasRelatedObjectId},CancellationToken)">
      <example>
This sample shows how to call AssignTermToEntitiesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.AssignTermToEntitiesAsync("<termId>", new AtlasRelatedObjectId[]
{
    new AtlasRelatedObjectId()
});
]]></code>
This sample shows how to call AssignTermToEntitiesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.AssignTermToEntitiesAsync("<termId>", new AtlasRelatedObjectId[]
{
    new AtlasRelatedObjectId
    {
        Guid = "<guid>",
        TypeName = "<typeName>",
        UniqueAttributes =
        {
            ["key"] = BinaryData.FromObjectAsJson(new object())
        },
        DisplayText = "<displayText>",
        EntityStatus = EntityStatus.Active,
        RelationshipType = "<relationshipType>",
        RelationshipAttributes = new AtlasStruct
        {
            Attributes =
            {
                ["key"] = BinaryData.FromObjectAsJson(new object())
            },
            TypeName = "<typeName>",
            LastModifiedTS = "<lastModifiedTS>",
        },
        RelationshipGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
        RelationshipStatus = StatusAtlasRelationship.Active,
    }
});
]]></code></example>
    </member>
    <member name="AssignTermToEntities(string,IEnumerable{AtlasRelatedObjectId},CancellationToken)">
      <example>
This sample shows how to call AssignTermToEntities.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.AssignTermToEntities("<termId>", new AtlasRelatedObjectId[]
{
    new AtlasRelatedObjectId()
});
]]></code>
This sample shows how to call AssignTermToEntities with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.AssignTermToEntities("<termId>", new AtlasRelatedObjectId[]
{
    new AtlasRelatedObjectId
    {
        Guid = "<guid>",
        TypeName = "<typeName>",
        UniqueAttributes =
        {
            ["key"] = BinaryData.FromObjectAsJson(new object())
        },
        DisplayText = "<displayText>",
        EntityStatus = EntityStatus.Active,
        RelationshipType = "<relationshipType>",
        RelationshipAttributes = new AtlasStruct
        {
            Attributes =
            {
                ["key"] = BinaryData.FromObjectAsJson(new object())
            },
            TypeName = "<typeName>",
            LastModifiedTS = "<lastModifiedTS>",
        },
        RelationshipGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
        RelationshipStatus = StatusAtlasRelationship.Active,
    }
});
]]></code></example>
    </member>
    <member name="AssignTermToEntitiesAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call AssignTermToEntitiesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new object()
});
Response response = await client.AssignTermToEntitiesAsync("<termId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call AssignTermToEntitiesAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        guid = "<guid>",
        typeName = "<typeName>",
        uniqueAttributes = new
        {
            key = new object(),
        },
        displayText = "<displayText>",
        entityStatus = "ACTIVE",
        relationshipType = "<relationshipType>",
        relationshipAttributes = new
        {
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        },
        relationshipGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
        relationshipStatus = "ACTIVE",
    }
});
Response response = await client.AssignTermToEntitiesAsync("<termId>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="AssignTermToEntities(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call AssignTermToEntities.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new object()
});
Response response = client.AssignTermToEntities("<termId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call AssignTermToEntities with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        guid = "<guid>",
        typeName = "<typeName>",
        uniqueAttributes = new
        {
            key = new object(),
        },
        displayText = "<displayText>",
        entityStatus = "ACTIVE",
        relationshipType = "<relationshipType>",
        relationshipAttributes = new
        {
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        },
        relationshipGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
        relationshipStatus = "ACTIVE",
    }
});
Response response = client.AssignTermToEntities("<termId>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteTermAssignmentFromEntitiesAsync(string,IEnumerable{AtlasRelatedObjectId},CancellationToken)">
      <example>
This sample shows how to call DeleteTermAssignmentFromEntitiesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.DeleteTermAssignmentFromEntitiesAsync("<termId>", new AtlasRelatedObjectId[]
{
    new AtlasRelatedObjectId()
});
]]></code>
This sample shows how to call DeleteTermAssignmentFromEntitiesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.DeleteTermAssignmentFromEntitiesAsync("<termId>", new AtlasRelatedObjectId[]
{
    new AtlasRelatedObjectId
    {
        Guid = "<guid>",
        TypeName = "<typeName>",
        UniqueAttributes =
        {
            ["key"] = BinaryData.FromObjectAsJson(new object())
        },
        DisplayText = "<displayText>",
        EntityStatus = EntityStatus.Active,
        RelationshipType = "<relationshipType>",
        RelationshipAttributes = new AtlasStruct
        {
            Attributes =
            {
                ["key"] = BinaryData.FromObjectAsJson(new object())
            },
            TypeName = "<typeName>",
            LastModifiedTS = "<lastModifiedTS>",
        },
        RelationshipGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
        RelationshipStatus = StatusAtlasRelationship.Active,
    }
});
]]></code></example>
    </member>
    <member name="DeleteTermAssignmentFromEntities(string,IEnumerable{AtlasRelatedObjectId},CancellationToken)">
      <example>
This sample shows how to call DeleteTermAssignmentFromEntities.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.DeleteTermAssignmentFromEntities("<termId>", new AtlasRelatedObjectId[]
{
    new AtlasRelatedObjectId()
});
]]></code>
This sample shows how to call DeleteTermAssignmentFromEntities with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.DeleteTermAssignmentFromEntities("<termId>", new AtlasRelatedObjectId[]
{
    new AtlasRelatedObjectId
    {
        Guid = "<guid>",
        TypeName = "<typeName>",
        UniqueAttributes =
        {
            ["key"] = BinaryData.FromObjectAsJson(new object())
        },
        DisplayText = "<displayText>",
        EntityStatus = EntityStatus.Active,
        RelationshipType = "<relationshipType>",
        RelationshipAttributes = new AtlasStruct
        {
            Attributes =
            {
                ["key"] = BinaryData.FromObjectAsJson(new object())
            },
            TypeName = "<typeName>",
            LastModifiedTS = "<lastModifiedTS>",
        },
        RelationshipGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
        RelationshipStatus = StatusAtlasRelationship.Active,
    }
});
]]></code></example>
    </member>
    <member name="DeleteTermAssignmentFromEntitiesAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call DeleteTermAssignmentFromEntitiesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new object()
});
Response response = await client.DeleteTermAssignmentFromEntitiesAsync("<termId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteTermAssignmentFromEntitiesAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        guid = "<guid>",
        typeName = "<typeName>",
        uniqueAttributes = new
        {
            key = new object(),
        },
        displayText = "<displayText>",
        entityStatus = "ACTIVE",
        relationshipType = "<relationshipType>",
        relationshipAttributes = new
        {
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        },
        relationshipGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
        relationshipStatus = "ACTIVE",
    }
});
Response response = await client.DeleteTermAssignmentFromEntitiesAsync("<termId>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteTermAssignmentFromEntities(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call DeleteTermAssignmentFromEntities.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new object()
});
Response response = client.DeleteTermAssignmentFromEntities("<termId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteTermAssignmentFromEntities with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        guid = "<guid>",
        typeName = "<typeName>",
        uniqueAttributes = new
        {
            key = new object(),
        },
        displayText = "<displayText>",
        entityStatus = "ACTIVE",
        relationshipType = "<relationshipType>",
        relationshipAttributes = new
        {
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        },
        relationshipGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
        relationshipStatus = "ACTIVE",
    }
});
Response response = client.DeleteTermAssignmentFromEntities("<termId>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetRelatedTermsAsync(string,int?,int?,string,CancellationToken)">
      <example>
This sample shows how to call GetRelatedTermsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyDictionary<string, IList<AtlasRelatedTermHeader>>> response = await client.GetRelatedTermsAsync("<termId>");
]]></code>
This sample shows how to call GetRelatedTermsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

Response<IReadOnlyDictionary<string, IList<AtlasRelatedTermHeader>>> response = await client.GetRelatedTermsAsync("<termId>", limit: 1234, offset: 1234, sort: "<sort>");
]]></code></example>
    </member>
    <member name="GetRelatedTerms(string,int?,int?,string,CancellationToken)">
      <example>
This sample shows how to call GetRelatedTerms.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyDictionary<string, IList<AtlasRelatedTermHeader>>> response = client.GetRelatedTerms("<termId>");
]]></code>
This sample shows how to call GetRelatedTerms with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

Response<IReadOnlyDictionary<string, IList<AtlasRelatedTermHeader>>> response = client.GetRelatedTerms("<termId>", limit: 1234, offset: 1234, sort: "<sort>");
]]></code></example>
    </member>
    <member name="GetRelatedTermsAsync(string,int?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetRelatedTermsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.GetRelatedTermsAsync("<termId>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<key>")[0].ToString());
]]></code>
This sample shows how to call GetRelatedTermsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

Response response = await client.GetRelatedTermsAsync("<termId>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("termGuid").ToString());
]]></code></example>
    </member>
    <member name="GetRelatedTerms(string,int?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetRelatedTerms and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.GetRelatedTerms("<termId>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<key>")[0].ToString());
]]></code>
This sample shows how to call GetRelatedTerms with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

Response response = client.GetRelatedTerms("<termId>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("termGuid").ToString());
]]></code></example>
    </member>
    <member name="GetGlossaryAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetGlossaryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<AtlasGlossary> response = await client.GetGlossaryAsync("<glossaryId>");
]]></code>
This sample shows how to call GetGlossaryAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<AtlasGlossary> response = await client.GetGlossaryAsync("<glossaryId>");
]]></code></example>
    </member>
    <member name="GetGlossary(string,CancellationToken)">
      <example>
This sample shows how to call GetGlossary.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<AtlasGlossary> response = client.GetGlossary("<glossaryId>");
]]></code>
This sample shows how to call GetGlossary with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<AtlasGlossary> response = client.GetGlossary("<glossaryId>");
]]></code></example>
    </member>
    <member name="GetGlossaryAsync(string,RequestContext)">
      <example>
This sample shows how to call GetGlossaryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.GetGlossaryAsync("<glossaryId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetGlossaryAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.GetGlossaryAsync("<glossaryId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
]]></code></example>
    </member>
    <member name="GetGlossary(string,RequestContext)">
      <example>
This sample shows how to call GetGlossary and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.GetGlossary("<glossaryId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetGlossary with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.GetGlossary("<glossaryId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
]]></code></example>
    </member>
    <member name="UpdateAsync(string,AtlasGlossary,bool?,CancellationToken)">
      <example>
This sample shows how to call UpdateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

AtlasGlossary atlasGlossary = new AtlasGlossary();
Response<AtlasGlossary> response = await client.UpdateAsync("<glossaryId>", atlasGlossary);
]]></code>
This sample shows how to call UpdateAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

AtlasGlossary atlasGlossary = new AtlasGlossary
{
    Guid = "<guid>",
    Classifications = {new AtlasClassification
    {
        Attributes =
        {
            ["key"] = BinaryData.FromObjectAsJson(new object())
        },
        TypeName = "<typeName>",
        LastModifiedTS = "<lastModifiedTS>",
        EntityGuid = "<entityGuid>",
        EntityStatus = EntityStatus.Active,
        RemovePropagationsOnEntityDelete = true,
        ValidityPeriods = {new TimeBoundary
        {
            EndTime = "<endTime>",
            StartTime = "<startTime>",
            TimeZone = "<timeZone>",
        }},
    }},
    LongDescription = "<longDescription>",
    Name = "<name>",
    QualifiedName = "<qualifiedName>",
    ShortDescription = "<shortDescription>",
    LastModifiedTS = "<lastModifiedTS>",
    CreateTime = 1234L,
    CreatedBy = "<createdBy>",
    UpdateTime = 1234L,
    UpdatedBy = "<updatedBy>",
    Categories = {new AtlasRelatedCategoryHeader
    {
        CategoryGuid = "<categoryGuid>",
        Description = "<description>",
        DisplayText = "<displayText>",
        ParentCategoryGuid = "<parentCategoryGuid>",
        RelationGuid = "<relationGuid>",
    }},
    Language = "<language>",
    Terms = {new AtlasRelatedTermHeader
    {
        Description = "<description>",
        DisplayText = "<displayText>",
        Expression = "<expression>",
        RelationGuid = "<relationGuid>",
        Status = AtlasTermRelationshipStatus.Draft,
        Steward = "<steward>",
        TermGuid = "<termGuid>",
    }},
    Usage = "<usage>",
};
Response<AtlasGlossary> response = await client.UpdateAsync("<glossaryId>", atlasGlossary, ignoreTermsAndCategories: true);
]]></code></example>
    </member>
    <member name="Update(string,AtlasGlossary,bool?,CancellationToken)">
      <example>
This sample shows how to call Update.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

AtlasGlossary atlasGlossary = new AtlasGlossary();
Response<AtlasGlossary> response = client.Update("<glossaryId>", atlasGlossary);
]]></code>
This sample shows how to call Update with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

AtlasGlossary atlasGlossary = new AtlasGlossary
{
    Guid = "<guid>",
    Classifications = {new AtlasClassification
    {
        Attributes =
        {
            ["key"] = BinaryData.FromObjectAsJson(new object())
        },
        TypeName = "<typeName>",
        LastModifiedTS = "<lastModifiedTS>",
        EntityGuid = "<entityGuid>",
        EntityStatus = EntityStatus.Active,
        RemovePropagationsOnEntityDelete = true,
        ValidityPeriods = {new TimeBoundary
        {
            EndTime = "<endTime>",
            StartTime = "<startTime>",
            TimeZone = "<timeZone>",
        }},
    }},
    LongDescription = "<longDescription>",
    Name = "<name>",
    QualifiedName = "<qualifiedName>",
    ShortDescription = "<shortDescription>",
    LastModifiedTS = "<lastModifiedTS>",
    CreateTime = 1234L,
    CreatedBy = "<createdBy>",
    UpdateTime = 1234L,
    UpdatedBy = "<updatedBy>",
    Categories = {new AtlasRelatedCategoryHeader
    {
        CategoryGuid = "<categoryGuid>",
        Description = "<description>",
        DisplayText = "<displayText>",
        ParentCategoryGuid = "<parentCategoryGuid>",
        RelationGuid = "<relationGuid>",
    }},
    Language = "<language>",
    Terms = {new AtlasRelatedTermHeader
    {
        Description = "<description>",
        DisplayText = "<displayText>",
        Expression = "<expression>",
        RelationGuid = "<relationGuid>",
        Status = AtlasTermRelationshipStatus.Draft,
        Steward = "<steward>",
        TermGuid = "<termGuid>",
    }},
    Usage = "<usage>",
};
Response<AtlasGlossary> response = client.Update("<glossaryId>", atlasGlossary, ignoreTermsAndCategories: true);
]]></code></example>
    </member>
    <member name="UpdateAsync(string,RequestContent,bool?,RequestContext)">
      <example>
This sample shows how to call UpdateAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new object());
Response response = await client.UpdateAsync("<glossaryId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call UpdateAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    guid = "<guid>",
    classifications = new object[]
    {
        new
        {
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new object[]
            {
                new
                {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    createTime = 1234L,
    createdBy = "<createdBy>",
    updateTime = 1234L,
    updatedBy = "<updatedBy>",
    categories = new object[]
    {
        new
        {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
    language = "<language>",
    terms = new object[]
    {
        new
        {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    usage = "<usage>",
});
Response response = await client.UpdateAsync("<glossaryId>", content, ignoreTermsAndCategories: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
]]></code></example>
    </member>
    <member name="Update(string,RequestContent,bool?,RequestContext)">
      <example>
This sample shows how to call Update and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new object());
Response response = client.Update("<glossaryId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Update with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    guid = "<guid>",
    classifications = new object[]
    {
        new
        {
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new object[]
            {
                new
                {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    createTime = 1234L,
    createdBy = "<createdBy>",
    updateTime = 1234L,
    updatedBy = "<updatedBy>",
    categories = new object[]
    {
        new
        {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
    language = "<language>",
    terms = new object[]
    {
        new
        {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    usage = "<usage>",
});
Response response = client.Update("<glossaryId>", content, ignoreTermsAndCategories: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
]]></code></example>
    </member>
    <member name="DeleteAsync(string,RequestContext)">
      <example>
This sample shows how to call DeleteAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.DeleteAsync("<glossaryId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.DeleteAsync("<glossaryId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="Delete(string,RequestContext)">
      <example>
This sample shows how to call Delete.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.Delete("<glossaryId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call Delete with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.Delete("<glossaryId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetCategoriesAsync(string,int?,int?,string,CancellationToken)">
      <example>
This sample shows how to call GetCategoriesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasGlossaryCategory>> response = await client.GetCategoriesAsync("<glossaryId>");
]]></code>
This sample shows how to call GetCategoriesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasGlossaryCategory>> response = await client.GetCategoriesAsync("<glossaryId>", limit: 1234, offset: 1234, sort: "<sort>");
]]></code></example>
    </member>
    <member name="GetCategories(string,int?,int?,string,CancellationToken)">
      <example>
This sample shows how to call GetCategories.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasGlossaryCategory>> response = client.GetCategories("<glossaryId>");
]]></code>
This sample shows how to call GetCategories with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasGlossaryCategory>> response = client.GetCategories("<glossaryId>", limit: 1234, offset: 1234, sort: "<sort>");
]]></code></example>
    </member>
    <member name="GetCategoriesAsync(string,int?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetCategoriesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.GetCategoriesAsync("<glossaryId>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetCategoriesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.GetCategoriesAsync("<glossaryId>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("createTime").ToString());
Console.WriteLine(result[0].GetProperty("createdBy").ToString());
Console.WriteLine(result[0].GetProperty("updateTime").ToString());
Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
]]></code></example>
    </member>
    <member name="GetCategories(string,int?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetCategories and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.GetCategories("<glossaryId>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetCategories with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.GetCategories("<glossaryId>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("createTime").ToString());
Console.WriteLine(result[0].GetProperty("createdBy").ToString());
Console.WriteLine(result[0].GetProperty("updateTime").ToString());
Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
]]></code></example>
    </member>
    <member name="GetCategoriesHeadersAsync(string,int?,int?,string,CancellationToken)">
      <example>
This sample shows how to call GetCategoriesHeadersAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasRelatedCategoryHeader>> response = await client.GetCategoriesHeadersAsync("<glossaryId>");
]]></code>
This sample shows how to call GetCategoriesHeadersAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasRelatedCategoryHeader>> response = await client.GetCategoriesHeadersAsync("<glossaryId>", limit: 1234, offset: 1234, sort: "<sort>");
]]></code></example>
    </member>
    <member name="GetCategoriesHeaders(string,int?,int?,string,CancellationToken)">
      <example>
This sample shows how to call GetCategoriesHeaders.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasRelatedCategoryHeader>> response = client.GetCategoriesHeaders("<glossaryId>");
]]></code>
This sample shows how to call GetCategoriesHeaders with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasRelatedCategoryHeader>> response = client.GetCategoriesHeaders("<glossaryId>", limit: 1234, offset: 1234, sort: "<sort>");
]]></code></example>
    </member>
    <member name="GetCategoriesHeadersAsync(string,int?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetCategoriesHeadersAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.GetCategoriesHeadersAsync("<glossaryId>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetCategoriesHeadersAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.GetCategoriesHeadersAsync("<glossaryId>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
]]></code></example>
    </member>
    <member name="GetCategoriesHeaders(string,int?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetCategoriesHeaders and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.GetCategoriesHeaders("<glossaryId>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetCategoriesHeaders with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.GetCategoriesHeaders("<glossaryId>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
]]></code></example>
    </member>
    <member name="GetDetailedAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetDetailedAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<AtlasGlossaryExtInfo> response = await client.GetDetailedAsync("<glossaryId>");
]]></code>
This sample shows how to call GetDetailedAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

Response<AtlasGlossaryExtInfo> response = await client.GetDetailedAsync("<glossaryId>");
]]></code></example>
    </member>
    <member name="GetDetailed(string,CancellationToken)">
      <example>
This sample shows how to call GetDetailed.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<AtlasGlossaryExtInfo> response = client.GetDetailed("<glossaryId>");
]]></code>
This sample shows how to call GetDetailed with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

Response<AtlasGlossaryExtInfo> response = client.GetDetailed("<glossaryId>");
]]></code></example>
    </member>
    <member name="GetDetailedAsync(string,RequestContext)">
      <example>
This sample shows how to call GetDetailedAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.GetDetailedAsync("<glossaryId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetDetailedAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

Response response = await client.GetDetailedAsync("<glossaryId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("nickName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("hierarchyInfo")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("hierarchyInfo")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("hierarchyInfo")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("hierarchyInfo")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("hierarchyInfo")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("hierarchyInfo")[0].GetProperty("itemPath").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("hierarchyInfo")[0].GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("hierarchyInfo")[0].GetProperty("properties").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
]]></code></example>
    </member>
    <member name="GetDetailed(string,RequestContext)">
      <example>
This sample shows how to call GetDetailed and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.GetDetailed("<glossaryId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetDetailed with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

Response response = client.GetDetailed("<glossaryId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("nickName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("hierarchyInfo")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("hierarchyInfo")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("hierarchyInfo")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("hierarchyInfo")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("hierarchyInfo")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("hierarchyInfo")[0].GetProperty("itemPath").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("hierarchyInfo")[0].GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("hierarchyInfo")[0].GetProperty("properties").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
]]></code></example>
    </member>
    <member name="PartialUpdateAsync(string,IDictionary{string,string},bool?,CancellationToken)">
      <example>
This sample shows how to call PartialUpdateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<AtlasGlossary> response = await client.PartialUpdateAsync("<glossaryId>", new Dictionary<string, string>
{
    ["key"] = "<body>"
});
]]></code>
This sample shows how to call PartialUpdateAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

Response<AtlasGlossary> response = await client.PartialUpdateAsync("<glossaryId>", new Dictionary<string, string>
{
    ["key"] = "<body>"
}, ignoreTermsAndCategories: true);
]]></code></example>
    </member>
    <member name="PartialUpdate(string,IDictionary{string,string},bool?,CancellationToken)">
      <example>
This sample shows how to call PartialUpdate.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<AtlasGlossary> response = client.PartialUpdate("<glossaryId>", new Dictionary<string, string>
{
    ["key"] = "<body>"
});
]]></code>
This sample shows how to call PartialUpdate with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

Response<AtlasGlossary> response = client.PartialUpdate("<glossaryId>", new Dictionary<string, string>
{
    ["key"] = "<body>"
}, ignoreTermsAndCategories: true);
]]></code></example>
    </member>
    <member name="PartialUpdateAsync(string,RequestContent,bool?,RequestContext)">
      <example>
This sample shows how to call PartialUpdateAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new
{
    key = "<body>",
});
Response response = await client.PartialUpdateAsync("<glossaryId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PartialUpdateAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    key = "<body>",
});
Response response = await client.PartialUpdateAsync("<glossaryId>", content, ignoreTermsAndCategories: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
]]></code></example>
    </member>
    <member name="PartialUpdate(string,RequestContent,bool?,RequestContext)">
      <example>
This sample shows how to call PartialUpdate and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new
{
    key = "<body>",
});
Response response = client.PartialUpdate("<glossaryId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PartialUpdate with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    key = "<body>",
});
Response response = client.PartialUpdate("<glossaryId>", content, ignoreTermsAndCategories: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
]]></code></example>
    </member>
    <member name="GetTermsAsync(string,int?,int?,string,CancellationToken)">
      <example>
This sample shows how to call GetTermsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasGlossaryTerm>> response = await client.GetTermsAsync("<glossaryId>");
]]></code>
This sample shows how to call GetTermsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

Response<IReadOnlyList<AtlasGlossaryTerm>> response = await client.GetTermsAsync("<glossaryId>", limit: 1234, offset: 1234, sort: "<sort>");
]]></code></example>
    </member>
    <member name="GetTerms(string,int?,int?,string,CancellationToken)">
      <example>
This sample shows how to call GetTerms.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasGlossaryTerm>> response = client.GetTerms("<glossaryId>");
]]></code>
This sample shows how to call GetTerms with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

Response<IReadOnlyList<AtlasGlossaryTerm>> response = client.GetTerms("<glossaryId>", limit: 1234, offset: 1234, sort: "<sort>");
]]></code></example>
    </member>
    <member name="GetTermsAsync(string,int?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetTermsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.GetTermsAsync("<glossaryId>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetTermsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

Response response = await client.GetTermsAsync("<glossaryId>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("createTime").ToString());
Console.WriteLine(result[0].GetProperty("createdBy").ToString());
Console.WriteLine(result[0].GetProperty("updateTime").ToString());
Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
Console.WriteLine(result[0].GetProperty("abbreviation").ToString());
Console.WriteLine(result[0].GetProperty("templateName")[0].ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("nickName").ToString());
Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("itemPath").ToString());
Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("resourceId").ToString());
Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("properties").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result[0].GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("examples")[0].ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("usage").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
]]></code></example>
    </member>
    <member name="GetTerms(string,int?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetTerms and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.GetTerms("<glossaryId>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetTerms with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

Response response = client.GetTerms("<glossaryId>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("createTime").ToString());
Console.WriteLine(result[0].GetProperty("createdBy").ToString());
Console.WriteLine(result[0].GetProperty("updateTime").ToString());
Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
Console.WriteLine(result[0].GetProperty("abbreviation").ToString());
Console.WriteLine(result[0].GetProperty("templateName")[0].ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("nickName").ToString());
Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("itemPath").ToString());
Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("resourceId").ToString());
Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("properties").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result[0].GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("examples")[0].ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("usage").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
]]></code></example>
    </member>
    <member name="GetTermHeadersAsync(string,int?,int?,string,CancellationToken)">
      <example>
This sample shows how to call GetTermHeadersAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasRelatedTermHeader>> response = await client.GetTermHeadersAsync("<glossaryId>");
]]></code>
This sample shows how to call GetTermHeadersAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasRelatedTermHeader>> response = await client.GetTermHeadersAsync("<glossaryId>", limit: 1234, offset: 1234, sort: "<sort>");
]]></code></example>
    </member>
    <member name="GetTermHeaders(string,int?,int?,string,CancellationToken)">
      <example>
This sample shows how to call GetTermHeaders.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasRelatedTermHeader>> response = client.GetTermHeaders("<glossaryId>");
]]></code>
This sample shows how to call GetTermHeaders with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasRelatedTermHeader>> response = client.GetTermHeaders("<glossaryId>", limit: 1234, offset: 1234, sort: "<sort>");
]]></code></example>
    </member>
    <member name="GetTermHeadersAsync(string,int?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetTermHeadersAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.GetTermHeadersAsync("<glossaryId>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetTermHeadersAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.GetTermHeadersAsync("<glossaryId>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("termGuid").ToString());
]]></code></example>
    </member>
    <member name="GetTermHeaders(string,int?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetTermHeaders and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.GetTermHeaders("<glossaryId>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetTermHeaders with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.GetTermHeaders("<glossaryId>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("termGuid").ToString());
]]></code></example>
    </member>
  </members>
</doc>