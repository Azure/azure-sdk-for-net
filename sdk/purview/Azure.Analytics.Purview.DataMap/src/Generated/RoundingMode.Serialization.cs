// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.Analytics.Purview.DataMap
{
    internal static partial class RoundingModeExtensions
    {
        public static string ToSerialString(this RoundingMode value) => value switch
        {
            RoundingMode.Up => "UP",
            RoundingMode.Down => "DOWN",
            RoundingMode.Ceiling => "CEILING",
            RoundingMode.Floor => "FLOOR",
            RoundingMode.HalfUp => "HALF_UP",
            RoundingMode.HalfDown => "HALF_DOWN",
            RoundingMode.HalfEven => "HALF_EVEN",
            RoundingMode.Unnecessary => "UNNECESSARY",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown RoundingMode value.")
        };

        public static RoundingMode ToRoundingMode(this string value)
        {
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "UP")) return RoundingMode.Up;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "DOWN")) return RoundingMode.Down;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "CEILING")) return RoundingMode.Ceiling;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "FLOOR")) return RoundingMode.Floor;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "HALF_UP")) return RoundingMode.HalfUp;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "HALF_DOWN")) return RoundingMode.HalfDown;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "HALF_EVEN")) return RoundingMode.HalfEven;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "UNNECESSARY")) return RoundingMode.Unnecessary;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown RoundingMode value.");
        }
    }
}
