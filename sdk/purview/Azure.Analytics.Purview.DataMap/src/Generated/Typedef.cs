// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Analytics.Purview.DataMap
{
    /// <summary> Type. </summary>
    public readonly partial struct Typedef : IEquatable<Typedef>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Typedef"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Typedef(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string EnumValue = "enum";
        private const string EntityValue = "entity";
        private const string ClassificationValue = "classification";
        private const string RelationshipValue = "relationship";
        private const string StructValue = "struct";
        private const string TermTemplateValue = "term_template";

        /// <summary> enum. </summary>
        public static Typedef Enum { get; } = new Typedef(EnumValue);
        /// <summary> entity. </summary>
        public static Typedef Entity { get; } = new Typedef(EntityValue);
        /// <summary> classification. </summary>
        public static Typedef Classification { get; } = new Typedef(ClassificationValue);
        /// <summary> relationship. </summary>
        public static Typedef Relationship { get; } = new Typedef(RelationshipValue);
        /// <summary> struct. </summary>
        public static Typedef Struct { get; } = new Typedef(StructValue);
        /// <summary> term template. </summary>
        public static Typedef TermTemplate { get; } = new Typedef(TermTemplateValue);
        /// <summary> Determines if two <see cref="Typedef"/> values are the same. </summary>
        public static bool operator ==(Typedef left, Typedef right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Typedef"/> values are not the same. </summary>
        public static bool operator !=(Typedef left, Typedef right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Typedef"/>. </summary>
        public static implicit operator Typedef(string value) => new Typedef(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Typedef other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Typedef other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
