// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.Analytics.Purview.DataMap
{
    public partial class NumberFormat : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(AvailableLocales))
            {
                writer.WritePropertyName("availableLocales"u8);
                writer.WriteStartArray();
                foreach (var item in AvailableLocales)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Currency))
            {
                writer.WritePropertyName("currency"u8);
                writer.WriteStringValue(Currency);
            }
            if (Optional.IsDefined(CurrencyInstance))
            {
                writer.WritePropertyName("currencyInstance"u8);
                writer.WriteObjectValue(CurrencyInstance);
            }
            if (Optional.IsDefined(GroupingUsed))
            {
                writer.WritePropertyName("groupingUsed"u8);
                writer.WriteBooleanValue(GroupingUsed.Value);
            }
            if (Optional.IsDefined(Instance))
            {
                writer.WritePropertyName("instance"u8);
                writer.WriteObjectValue(Instance);
            }
            if (Optional.IsDefined(IntegerInstance))
            {
                writer.WritePropertyName("integerInstance"u8);
                writer.WriteObjectValue(IntegerInstance);
            }
            if (Optional.IsDefined(MaximumFractionDigits))
            {
                writer.WritePropertyName("maximumFractionDigits"u8);
                writer.WriteNumberValue(MaximumFractionDigits.Value);
            }
            if (Optional.IsDefined(MaximumIntegerDigits))
            {
                writer.WritePropertyName("maximumIntegerDigits"u8);
                writer.WriteNumberValue(MaximumIntegerDigits.Value);
            }
            if (Optional.IsDefined(MinimumFractionDigits))
            {
                writer.WritePropertyName("minimumFractionDigits"u8);
                writer.WriteNumberValue(MinimumFractionDigits.Value);
            }
            if (Optional.IsDefined(MinimumIntegerDigits))
            {
                writer.WritePropertyName("minimumIntegerDigits"u8);
                writer.WriteNumberValue(MinimumIntegerDigits.Value);
            }
            if (Optional.IsDefined(NumberInstance))
            {
                writer.WritePropertyName("numberInstance"u8);
                writer.WriteObjectValue(NumberInstance);
            }
            if (Optional.IsDefined(ParseIntegerOnly))
            {
                writer.WritePropertyName("parseIntegerOnly"u8);
                writer.WriteBooleanValue(ParseIntegerOnly.Value);
            }
            if (Optional.IsDefined(PercentInstance))
            {
                writer.WritePropertyName("percentInstance"u8);
                writer.WriteObjectValue(PercentInstance);
            }
            if (Optional.IsDefined(RoundingMode))
            {
                writer.WritePropertyName("roundingMode"u8);
                writer.WriteStringValue(RoundingMode.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static NumberFormat DeserializeNumberFormat(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<IList<string>> availableLocales = default;
            Optional<string> currency = default;
            Optional<NumberFormat> currencyInstance = default;
            Optional<bool> groupingUsed = default;
            Optional<NumberFormat> instance = default;
            Optional<NumberFormat> integerInstance = default;
            Optional<int> maximumFractionDigits = default;
            Optional<int> maximumIntegerDigits = default;
            Optional<int> minimumFractionDigits = default;
            Optional<int> minimumIntegerDigits = default;
            Optional<NumberFormat> numberInstance = default;
            Optional<bool> parseIntegerOnly = default;
            Optional<NumberFormat> percentInstance = default;
            Optional<RoundingMode> roundingMode = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("availableLocales"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    availableLocales = array;
                    continue;
                }
                if (property.NameEquals("currency"u8))
                {
                    currency = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("currencyInstance"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    currencyInstance = DeserializeNumberFormat(property.Value);
                    continue;
                }
                if (property.NameEquals("groupingUsed"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    groupingUsed = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("instance"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    instance = DeserializeNumberFormat(property.Value);
                    continue;
                }
                if (property.NameEquals("integerInstance"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    integerInstance = DeserializeNumberFormat(property.Value);
                    continue;
                }
                if (property.NameEquals("maximumFractionDigits"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maximumFractionDigits = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("maximumIntegerDigits"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maximumIntegerDigits = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("minimumFractionDigits"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    minimumFractionDigits = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("minimumIntegerDigits"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    minimumIntegerDigits = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("numberInstance"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    numberInstance = DeserializeNumberFormat(property.Value);
                    continue;
                }
                if (property.NameEquals("parseIntegerOnly"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    parseIntegerOnly = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("percentInstance"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    percentInstance = DeserializeNumberFormat(property.Value);
                    continue;
                }
                if (property.NameEquals("roundingMode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    roundingMode = new RoundingMode(property.Value.GetString());
                    continue;
                }
            }
            return new NumberFormat(Optional.ToList(availableLocales), currency.Value, currencyInstance.Value, Optional.ToNullable(groupingUsed), instance.Value, integerInstance.Value, Optional.ToNullable(maximumFractionDigits), Optional.ToNullable(maximumIntegerDigits), Optional.ToNullable(minimumFractionDigits), Optional.ToNullable(minimumIntegerDigits), numberInstance.Value, Optional.ToNullable(parseIntegerOnly), percentInstance.Value, Optional.ToNullable(roundingMode));
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static NumberFormat FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeNumberFormat(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
