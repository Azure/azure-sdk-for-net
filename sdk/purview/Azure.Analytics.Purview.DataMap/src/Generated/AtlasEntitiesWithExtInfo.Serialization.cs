// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.Analytics.Purview.DataMap
{
    public partial class AtlasEntitiesWithExtInfo : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(ReferredEntities))
            {
                writer.WritePropertyName("referredEntities"u8);
                writer.WriteStartObject();
                foreach (var item in ReferredEntities)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(Entities))
            {
                writer.WritePropertyName("entities"u8);
                writer.WriteStartArray();
                foreach (var item in Entities)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static AtlasEntitiesWithExtInfo DeserializeAtlasEntitiesWithExtInfo(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<IDictionary<string, AtlasEntity>> referredEntities = default;
            Optional<IList<AtlasEntity>> entities = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("referredEntities"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, AtlasEntity> dictionary = new Dictionary<string, AtlasEntity>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, AtlasEntity.DeserializeAtlasEntity(property0.Value));
                    }
                    referredEntities = dictionary;
                    continue;
                }
                if (property.NameEquals("entities"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AtlasEntity> array = new List<AtlasEntity>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AtlasEntity.DeserializeAtlasEntity(item));
                    }
                    entities = array;
                    continue;
                }
            }
            return new AtlasEntitiesWithExtInfo(Optional.ToDictionary(referredEntities), Optional.ToList(entities));
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static AtlasEntitiesWithExtInfo FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeAtlasEntitiesWithExtInfo(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
