// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.Analytics.Purview.DataMap
{
    public partial class AtlasRelatedObjectId : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Guid))
            {
                writer.WritePropertyName("guid"u8);
                writer.WriteStringValue(Guid);
            }
            if (Optional.IsDefined(TypeName))
            {
                writer.WritePropertyName("typeName"u8);
                writer.WriteStringValue(TypeName);
            }
            if (Optional.IsCollectionDefined(UniqueAttributes))
            {
                writer.WritePropertyName("uniqueAttributes"u8);
                writer.WriteStartObject();
                foreach (var item in UniqueAttributes)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(DisplayText))
            {
                writer.WritePropertyName("displayText"u8);
                writer.WriteStringValue(DisplayText);
            }
            if (Optional.IsDefined(EntityStatus))
            {
                writer.WritePropertyName("entityStatus"u8);
                writer.WriteStringValue(EntityStatus.Value.ToString());
            }
            if (Optional.IsDefined(RelationshipType))
            {
                writer.WritePropertyName("relationshipType"u8);
                writer.WriteStringValue(RelationshipType);
            }
            if (Optional.IsDefined(RelationshipAttributes))
            {
                writer.WritePropertyName("relationshipAttributes"u8);
                writer.WriteObjectValue(RelationshipAttributes);
            }
            if (Optional.IsDefined(RelationshipGuid))
            {
                writer.WritePropertyName("relationshipGuid"u8);
                writer.WriteStringValue(RelationshipGuid);
            }
            if (Optional.IsDefined(RelationshipStatus))
            {
                writer.WritePropertyName("relationshipStatus"u8);
                writer.WriteStringValue(RelationshipStatus.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static AtlasRelatedObjectId DeserializeAtlasRelatedObjectId(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> guid = default;
            Optional<string> typeName = default;
            Optional<IDictionary<string, BinaryData>> uniqueAttributes = default;
            Optional<string> displayText = default;
            Optional<Status> entityStatus = default;
            Optional<string> relationshipType = default;
            Optional<AtlasStruct> relationshipAttributes = default;
            Optional<string> relationshipGuid = default;
            Optional<StatusAtlasRelationship> relationshipStatus = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("guid"u8))
                {
                    guid = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("typeName"u8))
                {
                    typeName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("uniqueAttributes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, BinaryData> dictionary = new Dictionary<string, BinaryData>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(property0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(property0.Name, BinaryData.FromString(property0.Value.GetRawText()));
                        }
                    }
                    uniqueAttributes = dictionary;
                    continue;
                }
                if (property.NameEquals("displayText"u8))
                {
                    displayText = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("entityStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    entityStatus = new Status(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("relationshipType"u8))
                {
                    relationshipType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("relationshipAttributes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    relationshipAttributes = AtlasStruct.DeserializeAtlasStruct(property.Value);
                    continue;
                }
                if (property.NameEquals("relationshipGuid"u8))
                {
                    relationshipGuid = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("relationshipStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    relationshipStatus = new StatusAtlasRelationship(property.Value.GetString());
                    continue;
                }
            }
            return new AtlasRelatedObjectId(guid.Value, typeName.Value, Optional.ToDictionary(uniqueAttributes), displayText.Value, Optional.ToNullable(entityStatus), relationshipType.Value, relationshipAttributes.Value, relationshipGuid.Value, Optional.ToNullable(relationshipStatus));
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static AtlasRelatedObjectId FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeAtlasRelatedObjectId(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
