// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Analytics.Purview.DataMap.Tests
{
    public partial class RelationshipTests : AnalyticsPurviewDataMapTestBase
    {
        public RelationshipTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Relationship_Create_RelationshipCreate()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Relationship client = CreateDataMapClient(endpoint, credential).GetRelationshipClient();

            using RequestContent content = RequestContent.Create(new
            {
                typeName = "AtlasGlossarySynonym",
                attributes = new
                {
                    expression = "Example Expression",
                    steward = "Example Steward",
                    description = "Example Description",
                },
                end1 = new
                {
                    guid = "856d31e6-e342-a1ce-6273-22ddb77029c6",
                    typeName = "AtlasGlossaryTerm",
                },
                end2 = new
                {
                    guid = "77481037-2874-9bdc-9b9e-76bb94ee71aa",
                    typeName = "AtlasGlossaryTerm",
                },
                label = "r:AtlasGlossarySynonym",
                status = "ACTIVE",
                createdBy = "ExampleCreator",
                updatedBy = "ExampleUpdator",
                version = 0L,
            });
            Response response = await client.CreateAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Relationship_Create_RelationshipCreate_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Relationship client = CreateDataMapClient(endpoint, credential).GetRelationshipClient();

            AtlasRelationship body = new AtlasRelationship
            {
                Attributes =
{
["expression"] = BinaryData.FromObjectAsJson("Example Expression"),
["steward"] = BinaryData.FromObjectAsJson("Example Steward"),
["description"] = BinaryData.FromObjectAsJson("Example Description"),
["source"] = null,
["status"] = null
},
                TypeName = "AtlasGlossarySynonym",
                CreatedBy = "ExampleCreator",
                End1 = new AtlasObjectId
                {
                    Guid = "856d31e6-e342-a1ce-6273-22ddb77029c6",
                    TypeName = "AtlasGlossaryTerm",
                },
                End2 = new AtlasObjectId
                {
                    Guid = "77481037-2874-9bdc-9b9e-76bb94ee71aa",
                    TypeName = "AtlasGlossaryTerm",
                },
                Label = "r:AtlasGlossarySynonym",
                Status = StatusAtlasRelationship.Active,
                UpdatedBy = "ExampleUpdator",
                Version = 0L,
            };
            Response<AtlasRelationship> response = await client.CreateAsync(body);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Relationship_Update_RelationshipUpdate()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Relationship client = CreateDataMapClient(endpoint, credential).GetRelationshipClient();

            using RequestContent content = RequestContent.Create(new
            {
                typeName = "AtlasGlossarySynonym",
                attributes = new
                {
                    expression = "Example Expression",
                    steward = "Example Steward",
                    description = "Example Description",
                },
                guid = "b2810301-293f-493f-88f1-7ac8784fb1fd",
                end1 = new
                {
                    guid = "77481037-2874-9bdc-9b9e-76bb94ee71aa",
                    typeName = "AtlasGlossaryTerm",
                },
                end2 = new
                {
                    guid = "b0942506-2d7d-1f45-d286-c29ca9e7f2ef",
                    typeName = "AtlasGlossaryTerm",
                },
                label = "r:AtlasGlossarySynonym",
                status = "ACTIVE",
                createdBy = "ExampleCreator",
                updatedBy = "ExampleUpdator",
                version = 0L,
            });
            Response response = await client.UpdateAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Relationship_Update_RelationshipUpdate_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Relationship client = CreateDataMapClient(endpoint, credential).GetRelationshipClient();

            AtlasRelationship body = new AtlasRelationship
            {
                Attributes =
{
["expression"] = BinaryData.FromObjectAsJson("Example Expression"),
["steward"] = BinaryData.FromObjectAsJson("Example Steward"),
["description"] = BinaryData.FromObjectAsJson("Example Description"),
["source"] = null,
["status"] = null
},
                TypeName = "AtlasGlossarySynonym",
                CreatedBy = "ExampleCreator",
                End1 = new AtlasObjectId
                {
                    Guid = "77481037-2874-9bdc-9b9e-76bb94ee71aa",
                    TypeName = "AtlasGlossaryTerm",
                },
                End2 = new AtlasObjectId
                {
                    Guid = "b0942506-2d7d-1f45-d286-c29ca9e7f2ef",
                    TypeName = "AtlasGlossaryTerm",
                },
                Guid = "b2810301-293f-493f-88f1-7ac8784fb1fd",
                Label = "r:AtlasGlossarySynonym",
                Status = StatusAtlasRelationship.Active,
                UpdatedBy = "ExampleUpdator",
                Version = 0L,
            };
            Response<AtlasRelationship> response = await client.UpdateAsync(body);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Relationship_GetRelationship_RelationshipGet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Relationship client = CreateDataMapClient(endpoint, credential).GetRelationshipClient();

            Response response = await client.GetRelationshipAsync("5cf8a9e5-c9fd-abe0-2e8c-d40024263dcb", null, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Relationship_GetRelationship_RelationshipGet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Relationship client = CreateDataMapClient(endpoint, credential).GetRelationshipClient();

            Response<AtlasRelationshipWithExtInfo> response = await client.GetRelationshipAsync("5cf8a9e5-c9fd-abe0-2e8c-d40024263dcb");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Relationship_Delete_RelationshipDelete()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Relationship client = CreateDataMapClient(endpoint, credential).GetRelationshipClient();

            Response response = await client.DeleteAsync("5cf8a9e5-c9fd-abe0-2e8c-d40024263dcb");
        }
    }
}
