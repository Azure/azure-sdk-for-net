// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Analytics.Purview.DataMap;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Analytics.Purview.DataMap.Samples
{
    public partial class Samples_Type
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetBusinessMetadataDefByGuid_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = client.GetBusinessMetadataDefByGuid("<guid>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetBusinessMetadataDefByGuid_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = await client.GetBusinessMetadataDefByGuidAsync("<guid>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetBusinessMetadataDefByGuid_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasBusinessMetadataDef> response = client.GetBusinessMetadataDefByGuid("<guid>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetBusinessMetadataDefByGuid_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasBusinessMetadataDef> response = await client.GetBusinessMetadataDefByGuidAsync("<guid>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetBusinessMetadataDefByGuid_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = client.GetBusinessMetadataDefByGuid("<guid>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetBusinessMetadataDefByGuid_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = await client.GetBusinessMetadataDefByGuidAsync("<guid>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetBusinessMetadataDefByGuid_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasBusinessMetadataDef> response = client.GetBusinessMetadataDefByGuid("<guid>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetBusinessMetadataDefByGuid_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasBusinessMetadataDef> response = await client.GetBusinessMetadataDefByGuidAsync("<guid>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetBusinessMetadataDefByName_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = client.GetBusinessMetadataDefByName("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetBusinessMetadataDefByName_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = await client.GetBusinessMetadataDefByNameAsync("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetBusinessMetadataDefByName_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasBusinessMetadataDef> response = client.GetBusinessMetadataDefByName("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetBusinessMetadataDefByName_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasBusinessMetadataDef> response = await client.GetBusinessMetadataDefByNameAsync("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetBusinessMetadataDefByName_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = client.GetBusinessMetadataDefByName("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetBusinessMetadataDefByName_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = await client.GetBusinessMetadataDefByNameAsync("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetBusinessMetadataDefByName_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasBusinessMetadataDef> response = client.GetBusinessMetadataDefByName("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetBusinessMetadataDefByName_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasBusinessMetadataDef> response = await client.GetBusinessMetadataDefByNameAsync("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetClassificationDefByGuid_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = client.GetClassificationDefByGuid("<guid>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetClassificationDefByGuid_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = await client.GetClassificationDefByGuidAsync("<guid>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetClassificationDefByGuid_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasClassificationDef> response = client.GetClassificationDefByGuid("<guid>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetClassificationDefByGuid_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasClassificationDef> response = await client.GetClassificationDefByGuidAsync("<guid>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetClassificationDefByGuid_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = client.GetClassificationDefByGuid("<guid>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("entityTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("subTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("superTypes")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetClassificationDefByGuid_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = await client.GetClassificationDefByGuidAsync("<guid>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("entityTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("subTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("superTypes")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetClassificationDefByGuid_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasClassificationDef> response = client.GetClassificationDefByGuid("<guid>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetClassificationDefByGuid_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasClassificationDef> response = await client.GetClassificationDefByGuidAsync("<guid>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetClassificationDefByName_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = client.GetClassificationDefByName("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetClassificationDefByName_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = await client.GetClassificationDefByNameAsync("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetClassificationDefByName_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasClassificationDef> response = client.GetClassificationDefByName("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetClassificationDefByName_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasClassificationDef> response = await client.GetClassificationDefByNameAsync("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetClassificationDefByName_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = client.GetClassificationDefByName("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("entityTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("subTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("superTypes")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetClassificationDefByName_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = await client.GetClassificationDefByNameAsync("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("entityTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("subTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("superTypes")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetClassificationDefByName_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasClassificationDef> response = client.GetClassificationDefByName("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetClassificationDefByName_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasClassificationDef> response = await client.GetClassificationDefByNameAsync("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetEntityDefByGuid_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = client.GetEntityDefByGuid("<guid>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetEntityDefByGuid_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = await client.GetEntityDefByGuidAsync("<guid>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetEntityDefByGuid_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasEntityDef> response = client.GetEntityDefByGuid("<guid>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetEntityDefByGuid_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasEntityDef> response = await client.GetEntityDefByGuidAsync("<guid>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetEntityDefByGuid_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = client.GetEntityDefByGuid("<guid>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("subTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("superTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("relationshipTypeName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetEntityDefByGuid_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = await client.GetEntityDefByGuidAsync("<guid>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("subTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("superTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("relationshipTypeName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetEntityDefByGuid_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasEntityDef> response = client.GetEntityDefByGuid("<guid>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetEntityDefByGuid_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasEntityDef> response = await client.GetEntityDefByGuidAsync("<guid>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetEntityDefByName_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = client.GetEntityDefByName("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetEntityDefByName_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = await client.GetEntityDefByNameAsync("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetEntityDefByName_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasEntityDef> response = client.GetEntityDefByName("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetEntityDefByName_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasEntityDef> response = await client.GetEntityDefByNameAsync("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetEntityDefByName_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = client.GetEntityDefByName("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("subTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("superTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("relationshipTypeName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetEntityDefByName_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = await client.GetEntityDefByNameAsync("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("subTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("superTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("relationshipTypeName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetEntityDefByName_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasEntityDef> response = client.GetEntityDefByName("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetEntityDefByName_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasEntityDef> response = await client.GetEntityDefByNameAsync("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetEnumDefByGuid_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = client.GetEnumDefByGuid("<guid>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetEnumDefByGuid_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = await client.GetEnumDefByGuidAsync("<guid>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetEnumDefByGuid_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasEnumDef> response = client.GetEnumDefByGuid("<guid>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetEnumDefByGuid_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasEnumDef> response = await client.GetEnumDefByGuidAsync("<guid>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetEnumDefByGuid_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = client.GetEnumDefByGuid("<guid>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("elementDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("elementDefs")[0].GetProperty("ordinal").ToString());
            Console.WriteLine(result.GetProperty("elementDefs")[0].GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetEnumDefByGuid_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = await client.GetEnumDefByGuidAsync("<guid>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("elementDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("elementDefs")[0].GetProperty("ordinal").ToString());
            Console.WriteLine(result.GetProperty("elementDefs")[0].GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetEnumDefByGuid_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasEnumDef> response = client.GetEnumDefByGuid("<guid>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetEnumDefByGuid_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasEnumDef> response = await client.GetEnumDefByGuidAsync("<guid>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetEnumDefByName_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = client.GetEnumDefByName("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetEnumDefByName_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = await client.GetEnumDefByNameAsync("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetEnumDefByName_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasEnumDef> response = client.GetEnumDefByName("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetEnumDefByName_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasEnumDef> response = await client.GetEnumDefByNameAsync("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetEnumDefByName_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = client.GetEnumDefByName("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("elementDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("elementDefs")[0].GetProperty("ordinal").ToString());
            Console.WriteLine(result.GetProperty("elementDefs")[0].GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetEnumDefByName_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = await client.GetEnumDefByNameAsync("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("elementDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("elementDefs")[0].GetProperty("ordinal").ToString());
            Console.WriteLine(result.GetProperty("elementDefs")[0].GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetEnumDefByName_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasEnumDef> response = client.GetEnumDefByName("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetEnumDefByName_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasEnumDef> response = await client.GetEnumDefByNameAsync("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetRelationshipDefByGuid_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = client.GetRelationshipDefByGuid("<guid>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetRelationshipDefByGuid_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = await client.GetRelationshipDefByGuidAsync("<guid>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetRelationshipDefByGuid_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasRelationshipDef> response = client.GetRelationshipDefByGuid("<guid>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetRelationshipDefByGuid_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasRelationshipDef> response = await client.GetRelationshipDefByGuidAsync("<guid>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetRelationshipDefByGuid_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = client.GetRelationshipDefByGuid("<guid>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("isContainer").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("isContainer").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("relationshipCategory").ToString());
            Console.WriteLine(result.GetProperty("relationshipLabel").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetRelationshipDefByGuid_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = await client.GetRelationshipDefByGuidAsync("<guid>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("isContainer").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("isContainer").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("relationshipCategory").ToString());
            Console.WriteLine(result.GetProperty("relationshipLabel").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetRelationshipDefByGuid_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasRelationshipDef> response = client.GetRelationshipDefByGuid("<guid>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetRelationshipDefByGuid_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasRelationshipDef> response = await client.GetRelationshipDefByGuidAsync("<guid>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetRelationshipDefByName_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = client.GetRelationshipDefByName("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetRelationshipDefByName_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = await client.GetRelationshipDefByNameAsync("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetRelationshipDefByName_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasRelationshipDef> response = client.GetRelationshipDefByName("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetRelationshipDefByName_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasRelationshipDef> response = await client.GetRelationshipDefByNameAsync("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetRelationshipDefByName_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = client.GetRelationshipDefByName("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("isContainer").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("isContainer").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("relationshipCategory").ToString());
            Console.WriteLine(result.GetProperty("relationshipLabel").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetRelationshipDefByName_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = await client.GetRelationshipDefByNameAsync("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("isContainer").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("isContainer").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("relationshipCategory").ToString());
            Console.WriteLine(result.GetProperty("relationshipLabel").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetRelationshipDefByName_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasRelationshipDef> response = client.GetRelationshipDefByName("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetRelationshipDefByName_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasRelationshipDef> response = await client.GetRelationshipDefByNameAsync("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetStructDefByGuid_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = client.GetStructDefByGuid("<guid>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetStructDefByGuid_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = await client.GetStructDefByGuidAsync("<guid>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetStructDefByGuid_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasStructDef> response = client.GetStructDefByGuid("<guid>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetStructDefByGuid_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasStructDef> response = await client.GetStructDefByGuidAsync("<guid>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetStructDefByGuid_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = client.GetStructDefByGuid("<guid>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetStructDefByGuid_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = await client.GetStructDefByGuidAsync("<guid>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetStructDefByGuid_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasStructDef> response = client.GetStructDefByGuid("<guid>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetStructDefByGuid_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasStructDef> response = await client.GetStructDefByGuidAsync("<guid>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetStructDefByName_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = client.GetStructDefByName("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetStructDefByName_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = await client.GetStructDefByNameAsync("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetStructDefByName_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasStructDef> response = client.GetStructDefByName("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetStructDefByName_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasStructDef> response = await client.GetStructDefByNameAsync("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetStructDefByName_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = client.GetStructDefByName("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetStructDefByName_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = await client.GetStructDefByNameAsync("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetStructDefByName_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasStructDef> response = client.GetStructDefByName("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetStructDefByName_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasStructDef> response = await client.GetStructDefByNameAsync("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetByGuid_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = client.GetByGuid("<guid>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetByGuid_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = await client.GetByGuidAsync("<guid>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetByGuid_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasTypeDef> response = client.GetByGuid("<guid>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetByGuid_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasTypeDef> response = await client.GetByGuidAsync("<guid>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetByGuid_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = client.GetByGuid("<guid>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("entityTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("subTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("superTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("relationshipTypeName").ToString());
            Console.WriteLine(result.GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("elementDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("elementDefs")[0].GetProperty("ordinal").ToString());
            Console.WriteLine(result.GetProperty("elementDefs")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("isContainer").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("isContainer").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("relationshipCategory").ToString());
            Console.WriteLine(result.GetProperty("relationshipLabel").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetByGuid_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = await client.GetByGuidAsync("<guid>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("entityTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("subTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("superTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("relationshipTypeName").ToString());
            Console.WriteLine(result.GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("elementDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("elementDefs")[0].GetProperty("ordinal").ToString());
            Console.WriteLine(result.GetProperty("elementDefs")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("isContainer").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("isContainer").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("relationshipCategory").ToString());
            Console.WriteLine(result.GetProperty("relationshipLabel").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetByGuid_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasTypeDef> response = client.GetByGuid("<guid>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetByGuid_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasTypeDef> response = await client.GetByGuidAsync("<guid>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetByName_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = client.GetByName("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetByName_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = await client.GetByNameAsync("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetByName_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasTypeDef> response = client.GetByName("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetByName_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasTypeDef> response = await client.GetByNameAsync("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetByName_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = client.GetByName("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("entityTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("subTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("superTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("relationshipTypeName").ToString());
            Console.WriteLine(result.GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("elementDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("elementDefs")[0].GetProperty("ordinal").ToString());
            Console.WriteLine(result.GetProperty("elementDefs")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("isContainer").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("isContainer").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("relationshipCategory").ToString());
            Console.WriteLine(result.GetProperty("relationshipLabel").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetByName_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = await client.GetByNameAsync("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("entityTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("subTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("superTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("relationshipAttributeDefs")[0].GetProperty("relationshipTypeName").ToString());
            Console.WriteLine(result.GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("elementDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("elementDefs")[0].GetProperty("ordinal").ToString());
            Console.WriteLine(result.GetProperty("elementDefs")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("isContainer").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("endDef1").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("isContainer").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("endDef2").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("relationshipCategory").ToString());
            Console.WriteLine(result.GetProperty("relationshipLabel").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetByName_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasTypeDef> response = client.GetByName("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetByName_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasTypeDef> response = await client.GetByNameAsync("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_Delete_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = client.Delete("<name>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_Delete_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = await client.DeleteAsync("<name>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_Delete_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = client.Delete("<name>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_Delete_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = await client.DeleteAsync("<name>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetTypes_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = client.GetTypes(null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetTypes_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = await client.GetTypesAsync(null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetTypes_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasTypesDef> response = client.GetTypes();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetTypes_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasTypesDef> response = await client.GetTypesAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetTypes_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = client.GetTypes(true, "enum", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("entityTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("subTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("superTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("subTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("superTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("relationshipTypeName").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("elementDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("elementDefs")[0].GetProperty("ordinal").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("elementDefs")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef1").GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef1").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef1").GetProperty("isContainer").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef1").GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef1").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef1").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef2").GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef2").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef2").GetProperty("isContainer").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef2").GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef2").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef2").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("relationshipCategory").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("relationshipLabel").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetTypes_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = await client.GetTypesAsync(true, "enum", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("entityTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("subTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("superTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("subTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("superTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("relationshipTypeName").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("elementDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("elementDefs")[0].GetProperty("ordinal").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("elementDefs")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef1").GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef1").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef1").GetProperty("isContainer").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef1").GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef1").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef1").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef2").GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef2").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef2").GetProperty("isContainer").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef2").GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef2").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef2").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("relationshipCategory").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("relationshipLabel").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetTypes_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasTypesDef> response = client.GetTypes(includeTermTemplate: true, type: Typedef.Enum);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetTypes_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<AtlasTypesDef> response = await client.GetTypesAsync(includeTermTemplate: true, type: Typedef.Enum);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_BulkCreate_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.BulkCreate(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_BulkCreate_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.BulkCreateAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_BulkCreate_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            AtlasTypesDef typesDef = new AtlasTypesDef();
            Response<AtlasTypesDef> response = client.BulkCreate(typesDef);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_BulkCreate_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            AtlasTypesDef typesDef = new AtlasTypesDef();
            Response<AtlasTypesDef> response = await client.BulkCreateAsync(typesDef);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_BulkCreate_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            using RequestContent content = RequestContent.Create(new
            {
                businessMetadataDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
dateFormatter = new
{
availableLocales = new object[]
{
"<availableLocales>"
},
calendar = 123.45F,
lenient = true,
numberFormat = new
{
availableLocales = new object[]
{
"<availableLocales>"
},
currency = "<currency>",
groupingUsed = true,
maximumFractionDigits = 1234,
maximumIntegerDigits = 1234,
minimumFractionDigits = 1234,
minimumIntegerDigits = 1234,
parseIntegerOnly = true,
roundingMode = "UP",
},
timeZone = new Dictionary<string, object>
{
["dstSavings"] = 1234,
["id"] = "<id>",
["availableIds"] = new object[]
{
"<availableIds>"
},
["default"] = null,
["displayName"] = "<displayName>",
["rawOffset"] = 1234
},
},
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
attributeDefs = new object[]
{
new
{
cardinality = "SINGLE",
constraints = new object[]
{
new Dictionary<string, object>
{
["params"] = new
{
key = new object(),
},
["type"] = "<type>"
}
},
defaultValue = "<defaultValue>",
description = "<description>",
includeInNotification = true,
isIndexable = true,
isOptional = true,
isUnique = true,
name = "<name>",
options = new
{
key = "<options>",
},
typeName = "<typeName>",
valuesMaxCount = 1234,
valuesMinCount = 1234,
}
},
}
            },
                classificationDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
attributeDefs = new object[]
{
null
},
entityTypes = new object[]
{
"<entityTypes>"
},
subTypes = new object[]
{
"<subTypes>"
},
superTypes = new object[]
{
"<superTypes>"
},
}
            },
                entityDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
attributeDefs = new object[]
{
null
},
subTypes = new object[]
{
"<subTypes>"
},
superTypes = new object[]
{
"<superTypes>"
},
relationshipAttributeDefs = new object[]
{
new
{
cardinality = "SINGLE",
constraints = new object[]
{
null
},
defaultValue = "<defaultValue>",
description = "<description>",
includeInNotification = true,
isIndexable = true,
isOptional = true,
isUnique = true,
name = "<name>",
options = new
{
key = "<options>",
},
typeName = "<typeName>",
valuesMaxCount = 1234,
valuesMinCount = 1234,
isLegacyAttribute = true,
relationshipTypeName = "<relationshipTypeName>",
}
},
}
            },
                enumDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
defaultValue = "<defaultValue>",
elementDefs = new object[]
{
new
{
description = "<description>",
ordinal = 1234,
value = "<value>",
}
},
}
            },
                relationshipDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
attributeDefs = new object[]
{
null
},
endDef1 = new
{
cardinality = "SINGLE",
description = "<description>",
isContainer = true,
isLegacyAttribute = true,
name = "<name>",
type = "<type>",
},
relationshipCategory = "ASSOCIATION",
relationshipLabel = "<relationshipLabel>",
}
            },
                structDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
attributeDefs = new object[]
{
null
},
}
            },
                termTemplateDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
attributeDefs = new object[]
{
null
},
}
            },
            });
            Response response = client.BulkCreate(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("entityTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("subTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("superTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("subTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("superTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("relationshipTypeName").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("elementDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("elementDefs")[0].GetProperty("ordinal").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("elementDefs")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef1").GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef1").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef1").GetProperty("isContainer").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef1").GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef1").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef1").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef2").GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef2").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef2").GetProperty("isContainer").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef2").GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef2").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef2").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("relationshipCategory").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("relationshipLabel").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_BulkCreate_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            using RequestContent content = RequestContent.Create(new
            {
                businessMetadataDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
dateFormatter = new
{
availableLocales = new object[]
{
"<availableLocales>"
},
calendar = 123.45F,
lenient = true,
numberFormat = new
{
availableLocales = new object[]
{
"<availableLocales>"
},
currency = "<currency>",
groupingUsed = true,
maximumFractionDigits = 1234,
maximumIntegerDigits = 1234,
minimumFractionDigits = 1234,
minimumIntegerDigits = 1234,
parseIntegerOnly = true,
roundingMode = "UP",
},
timeZone = new Dictionary<string, object>
{
["dstSavings"] = 1234,
["id"] = "<id>",
["availableIds"] = new object[]
{
"<availableIds>"
},
["default"] = null,
["displayName"] = "<displayName>",
["rawOffset"] = 1234
},
},
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
attributeDefs = new object[]
{
new
{
cardinality = "SINGLE",
constraints = new object[]
{
new Dictionary<string, object>
{
["params"] = new
{
key = new object(),
},
["type"] = "<type>"
}
},
defaultValue = "<defaultValue>",
description = "<description>",
includeInNotification = true,
isIndexable = true,
isOptional = true,
isUnique = true,
name = "<name>",
options = new
{
key = "<options>",
},
typeName = "<typeName>",
valuesMaxCount = 1234,
valuesMinCount = 1234,
}
},
}
            },
                classificationDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
attributeDefs = new object[]
{
null
},
entityTypes = new object[]
{
"<entityTypes>"
},
subTypes = new object[]
{
"<subTypes>"
},
superTypes = new object[]
{
"<superTypes>"
},
}
            },
                entityDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
attributeDefs = new object[]
{
null
},
subTypes = new object[]
{
"<subTypes>"
},
superTypes = new object[]
{
"<superTypes>"
},
relationshipAttributeDefs = new object[]
{
new
{
cardinality = "SINGLE",
constraints = new object[]
{
null
},
defaultValue = "<defaultValue>",
description = "<description>",
includeInNotification = true,
isIndexable = true,
isOptional = true,
isUnique = true,
name = "<name>",
options = new
{
key = "<options>",
},
typeName = "<typeName>",
valuesMaxCount = 1234,
valuesMinCount = 1234,
isLegacyAttribute = true,
relationshipTypeName = "<relationshipTypeName>",
}
},
}
            },
                enumDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
defaultValue = "<defaultValue>",
elementDefs = new object[]
{
new
{
description = "<description>",
ordinal = 1234,
value = "<value>",
}
},
}
            },
                relationshipDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
attributeDefs = new object[]
{
null
},
endDef1 = new
{
cardinality = "SINGLE",
description = "<description>",
isContainer = true,
isLegacyAttribute = true,
name = "<name>",
type = "<type>",
},
relationshipCategory = "ASSOCIATION",
relationshipLabel = "<relationshipLabel>",
}
            },
                structDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
attributeDefs = new object[]
{
null
},
}
            },
                termTemplateDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
attributeDefs = new object[]
{
null
},
}
            },
            });
            Response response = await client.BulkCreateAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("entityTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("subTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("superTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("subTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("superTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("relationshipTypeName").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("elementDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("elementDefs")[0].GetProperty("ordinal").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("elementDefs")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef1").GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef1").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef1").GetProperty("isContainer").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef1").GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef1").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef1").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef2").GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef2").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef2").GetProperty("isContainer").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef2").GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef2").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef2").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("relationshipCategory").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("relationshipLabel").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_BulkCreate_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            AtlasTypesDef typesDef = new AtlasTypesDef
            {
                BusinessMetadataDefs = {new AtlasBusinessMetadataDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = new DateFormat
{
AvailableLocales = {"<availableLocales>"},
Calendar = 123.45F,
DateInstance = default,
DateTimeInstance = default,
Instance = default,
Lenient = true,
NumberFormat = new NumberFormat
{
AvailableLocales = {"<availableLocales>"},
Currency = "<currency>",
CurrencyInstance = default,
GroupingUsed = true,
Instance = default,
IntegerInstance = default,
MaximumFractionDigits = 1234,
MaximumIntegerDigits = 1234,
MinimumFractionDigits = 1234,
MinimumIntegerDigits = 1234,
NumberInstance = default,
ParseIntegerOnly = true,
PercentInstance = default,
RoundingMode = RoundingMode.UP,
},
TimeInstance = default,
TimeZone = new TimeZone
{
DstSavings = 1234,
Id = "<id>",
AvailableIds = {"<availableIds>"},
Default = default,
DisplayName = "<displayName>",
RawOffset = 1234,
},
},
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
AttributeDefs = {new AtlasAttributeDef
{
Cardinality = Cardinality.SINGLE,
Constraints = {new AtlasConstraintDef
{
Params =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
Type = "<type>",
}},
DefaultValue = "<defaultValue>",
Description = "<description>",
IncludeInNotification = true,
IsIndexable = true,
IsOptional = true,
IsUnique = true,
Name = "<name>",
Options =
{
["key"] = "<options>"
},
TypeName = "<typeName>",
ValuesMaxCount = 1234,
ValuesMinCount = 1234,
}},
}},
                ClassificationDefs = {new AtlasClassificationDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = default,
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
AttributeDefs = {default},
EntityTypes = {"<entityTypes>"},
SubTypes = {"<subTypes>"},
SuperTypes = {"<superTypes>"},
}},
                EntityDefs = {new AtlasEntityDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = default,
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
AttributeDefs = {default},
SubTypes = {"<subTypes>"},
SuperTypes = {"<superTypes>"},
RelationshipAttributeDefs = {new AtlasRelationshipAttributeDef
{
Cardinality = Cardinality.SINGLE,
Constraints = {default},
DefaultValue = "<defaultValue>",
Description = "<description>",
IncludeInNotification = true,
IsIndexable = true,
IsOptional = true,
IsUnique = true,
Name = "<name>",
Options =
{
["key"] = "<options>"
},
TypeName = "<typeName>",
ValuesMaxCount = 1234,
ValuesMinCount = 1234,
IsLegacyAttribute = true,
RelationshipTypeName = "<relationshipTypeName>",
}},
}},
                EnumDefs = {new AtlasEnumDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = default,
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
DefaultValue = "<defaultValue>",
ElementDefs = {new AtlasEnumElementDef
{
Description = "<description>",
Ordinal = 1234,
Value = "<value>",
}},
}},
                RelationshipDefs = {new AtlasRelationshipDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = default,
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
AttributeDefs = {default},
EndDef1 = new AtlasRelationshipEndDef
{
Cardinality = Cardinality.SINGLE,
Description = "<description>",
IsContainer = true,
IsLegacyAttribute = true,
Name = "<name>",
Type = "<type>",
},
EndDef2 = default,
RelationshipCategory = RelationshipCategory.ASSOCIATION,
RelationshipLabel = "<relationshipLabel>",
}},
                StructDefs = {new AtlasStructDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = default,
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
AttributeDefs = {default},
}},
                TermTemplateDefs = {new TermTemplateDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = default,
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
AttributeDefs = {default},
}},
            };
            Response<AtlasTypesDef> response = client.BulkCreate(typesDef);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_BulkCreate_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            AtlasTypesDef typesDef = new AtlasTypesDef
            {
                BusinessMetadataDefs = {new AtlasBusinessMetadataDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = new DateFormat
{
AvailableLocales = {"<availableLocales>"},
Calendar = 123.45F,
DateInstance = default,
DateTimeInstance = default,
Instance = default,
Lenient = true,
NumberFormat = new NumberFormat
{
AvailableLocales = {"<availableLocales>"},
Currency = "<currency>",
CurrencyInstance = default,
GroupingUsed = true,
Instance = default,
IntegerInstance = default,
MaximumFractionDigits = 1234,
MaximumIntegerDigits = 1234,
MinimumFractionDigits = 1234,
MinimumIntegerDigits = 1234,
NumberInstance = default,
ParseIntegerOnly = true,
PercentInstance = default,
RoundingMode = RoundingMode.UP,
},
TimeInstance = default,
TimeZone = new TimeZone
{
DstSavings = 1234,
Id = "<id>",
AvailableIds = {"<availableIds>"},
Default = default,
DisplayName = "<displayName>",
RawOffset = 1234,
},
},
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
AttributeDefs = {new AtlasAttributeDef
{
Cardinality = Cardinality.SINGLE,
Constraints = {new AtlasConstraintDef
{
Params =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
Type = "<type>",
}},
DefaultValue = "<defaultValue>",
Description = "<description>",
IncludeInNotification = true,
IsIndexable = true,
IsOptional = true,
IsUnique = true,
Name = "<name>",
Options =
{
["key"] = "<options>"
},
TypeName = "<typeName>",
ValuesMaxCount = 1234,
ValuesMinCount = 1234,
}},
}},
                ClassificationDefs = {new AtlasClassificationDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = default,
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
AttributeDefs = {default},
EntityTypes = {"<entityTypes>"},
SubTypes = {"<subTypes>"},
SuperTypes = {"<superTypes>"},
}},
                EntityDefs = {new AtlasEntityDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = default,
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
AttributeDefs = {default},
SubTypes = {"<subTypes>"},
SuperTypes = {"<superTypes>"},
RelationshipAttributeDefs = {new AtlasRelationshipAttributeDef
{
Cardinality = Cardinality.SINGLE,
Constraints = {default},
DefaultValue = "<defaultValue>",
Description = "<description>",
IncludeInNotification = true,
IsIndexable = true,
IsOptional = true,
IsUnique = true,
Name = "<name>",
Options =
{
["key"] = "<options>"
},
TypeName = "<typeName>",
ValuesMaxCount = 1234,
ValuesMinCount = 1234,
IsLegacyAttribute = true,
RelationshipTypeName = "<relationshipTypeName>",
}},
}},
                EnumDefs = {new AtlasEnumDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = default,
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
DefaultValue = "<defaultValue>",
ElementDefs = {new AtlasEnumElementDef
{
Description = "<description>",
Ordinal = 1234,
Value = "<value>",
}},
}},
                RelationshipDefs = {new AtlasRelationshipDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = default,
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
AttributeDefs = {default},
EndDef1 = new AtlasRelationshipEndDef
{
Cardinality = Cardinality.SINGLE,
Description = "<description>",
IsContainer = true,
IsLegacyAttribute = true,
Name = "<name>",
Type = "<type>",
},
EndDef2 = default,
RelationshipCategory = RelationshipCategory.ASSOCIATION,
RelationshipLabel = "<relationshipLabel>",
}},
                StructDefs = {new AtlasStructDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = default,
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
AttributeDefs = {default},
}},
                TermTemplateDefs = {new TermTemplateDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = default,
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
AttributeDefs = {default},
}},
            };
            Response<AtlasTypesDef> response = await client.BulkCreateAsync(typesDef);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_BulkUpdate_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.BulkUpdate(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_BulkUpdate_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.BulkUpdateAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_BulkUpdate_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            AtlasTypesDef typesDef = new AtlasTypesDef();
            Response<AtlasTypesDef> response = client.BulkUpdate(typesDef);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_BulkUpdate_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            AtlasTypesDef typesDef = new AtlasTypesDef();
            Response<AtlasTypesDef> response = await client.BulkUpdateAsync(typesDef);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_BulkUpdate_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            using RequestContent content = RequestContent.Create(new
            {
                businessMetadataDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
dateFormatter = new
{
availableLocales = new object[]
{
"<availableLocales>"
},
calendar = 123.45F,
lenient = true,
numberFormat = new
{
availableLocales = new object[]
{
"<availableLocales>"
},
currency = "<currency>",
groupingUsed = true,
maximumFractionDigits = 1234,
maximumIntegerDigits = 1234,
minimumFractionDigits = 1234,
minimumIntegerDigits = 1234,
parseIntegerOnly = true,
roundingMode = "UP",
},
timeZone = new Dictionary<string, object>
{
["dstSavings"] = 1234,
["id"] = "<id>",
["availableIds"] = new object[]
{
"<availableIds>"
},
["default"] = null,
["displayName"] = "<displayName>",
["rawOffset"] = 1234
},
},
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
attributeDefs = new object[]
{
new
{
cardinality = "SINGLE",
constraints = new object[]
{
new Dictionary<string, object>
{
["params"] = new
{
key = new object(),
},
["type"] = "<type>"
}
},
defaultValue = "<defaultValue>",
description = "<description>",
includeInNotification = true,
isIndexable = true,
isOptional = true,
isUnique = true,
name = "<name>",
options = new
{
key = "<options>",
},
typeName = "<typeName>",
valuesMaxCount = 1234,
valuesMinCount = 1234,
}
},
}
            },
                classificationDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
attributeDefs = new object[]
{
null
},
entityTypes = new object[]
{
"<entityTypes>"
},
subTypes = new object[]
{
"<subTypes>"
},
superTypes = new object[]
{
"<superTypes>"
},
}
            },
                entityDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
attributeDefs = new object[]
{
null
},
subTypes = new object[]
{
"<subTypes>"
},
superTypes = new object[]
{
"<superTypes>"
},
relationshipAttributeDefs = new object[]
{
new
{
cardinality = "SINGLE",
constraints = new object[]
{
null
},
defaultValue = "<defaultValue>",
description = "<description>",
includeInNotification = true,
isIndexable = true,
isOptional = true,
isUnique = true,
name = "<name>",
options = new
{
key = "<options>",
},
typeName = "<typeName>",
valuesMaxCount = 1234,
valuesMinCount = 1234,
isLegacyAttribute = true,
relationshipTypeName = "<relationshipTypeName>",
}
},
}
            },
                enumDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
defaultValue = "<defaultValue>",
elementDefs = new object[]
{
new
{
description = "<description>",
ordinal = 1234,
value = "<value>",
}
},
}
            },
                relationshipDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
attributeDefs = new object[]
{
null
},
endDef1 = new
{
cardinality = "SINGLE",
description = "<description>",
isContainer = true,
isLegacyAttribute = true,
name = "<name>",
type = "<type>",
},
relationshipCategory = "ASSOCIATION",
relationshipLabel = "<relationshipLabel>",
}
            },
                structDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
attributeDefs = new object[]
{
null
},
}
            },
                termTemplateDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
attributeDefs = new object[]
{
null
},
}
            },
            });
            Response response = client.BulkUpdate(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("entityTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("subTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("superTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("subTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("superTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("relationshipTypeName").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("elementDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("elementDefs")[0].GetProperty("ordinal").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("elementDefs")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef1").GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef1").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef1").GetProperty("isContainer").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef1").GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef1").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef1").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef2").GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef2").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef2").GetProperty("isContainer").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef2").GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef2").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef2").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("relationshipCategory").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("relationshipLabel").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_BulkUpdate_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            using RequestContent content = RequestContent.Create(new
            {
                businessMetadataDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
dateFormatter = new
{
availableLocales = new object[]
{
"<availableLocales>"
},
calendar = 123.45F,
lenient = true,
numberFormat = new
{
availableLocales = new object[]
{
"<availableLocales>"
},
currency = "<currency>",
groupingUsed = true,
maximumFractionDigits = 1234,
maximumIntegerDigits = 1234,
minimumFractionDigits = 1234,
minimumIntegerDigits = 1234,
parseIntegerOnly = true,
roundingMode = "UP",
},
timeZone = new Dictionary<string, object>
{
["dstSavings"] = 1234,
["id"] = "<id>",
["availableIds"] = new object[]
{
"<availableIds>"
},
["default"] = null,
["displayName"] = "<displayName>",
["rawOffset"] = 1234
},
},
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
attributeDefs = new object[]
{
new
{
cardinality = "SINGLE",
constraints = new object[]
{
new Dictionary<string, object>
{
["params"] = new
{
key = new object(),
},
["type"] = "<type>"
}
},
defaultValue = "<defaultValue>",
description = "<description>",
includeInNotification = true,
isIndexable = true,
isOptional = true,
isUnique = true,
name = "<name>",
options = new
{
key = "<options>",
},
typeName = "<typeName>",
valuesMaxCount = 1234,
valuesMinCount = 1234,
}
},
}
            },
                classificationDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
attributeDefs = new object[]
{
null
},
entityTypes = new object[]
{
"<entityTypes>"
},
subTypes = new object[]
{
"<subTypes>"
},
superTypes = new object[]
{
"<superTypes>"
},
}
            },
                entityDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
attributeDefs = new object[]
{
null
},
subTypes = new object[]
{
"<subTypes>"
},
superTypes = new object[]
{
"<superTypes>"
},
relationshipAttributeDefs = new object[]
{
new
{
cardinality = "SINGLE",
constraints = new object[]
{
null
},
defaultValue = "<defaultValue>",
description = "<description>",
includeInNotification = true,
isIndexable = true,
isOptional = true,
isUnique = true,
name = "<name>",
options = new
{
key = "<options>",
},
typeName = "<typeName>",
valuesMaxCount = 1234,
valuesMinCount = 1234,
isLegacyAttribute = true,
relationshipTypeName = "<relationshipTypeName>",
}
},
}
            },
                enumDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
defaultValue = "<defaultValue>",
elementDefs = new object[]
{
new
{
description = "<description>",
ordinal = 1234,
value = "<value>",
}
},
}
            },
                relationshipDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
attributeDefs = new object[]
{
null
},
endDef1 = new
{
cardinality = "SINGLE",
description = "<description>",
isContainer = true,
isLegacyAttribute = true,
name = "<name>",
type = "<type>",
},
relationshipCategory = "ASSOCIATION",
relationshipLabel = "<relationshipLabel>",
}
            },
                structDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
attributeDefs = new object[]
{
null
},
}
            },
                termTemplateDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
attributeDefs = new object[]
{
null
},
}
            },
            });
            Response response = await client.BulkUpdateAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("businessMetadataDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("entityTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("subTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("classificationDefs")[0].GetProperty("superTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("subTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("superTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("entityDefs")[0].GetProperty("relationshipAttributeDefs")[0].GetProperty("relationshipTypeName").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("elementDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("elementDefs")[0].GetProperty("ordinal").ToString());
            Console.WriteLine(result.GetProperty("enumDefs")[0].GetProperty("elementDefs")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef1").GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef1").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef1").GetProperty("isContainer").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef1").GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef1").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef1").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef2").GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef2").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef2").GetProperty("isContainer").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef2").GetProperty("isLegacyAttribute").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef2").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("endDef2").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("relationshipCategory").ToString());
            Console.WriteLine(result.GetProperty("relationshipDefs")[0].GetProperty("relationshipLabel").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("structDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("termTemplateDefs")[0].GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_BulkUpdate_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            AtlasTypesDef typesDef = new AtlasTypesDef
            {
                BusinessMetadataDefs = {new AtlasBusinessMetadataDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = new DateFormat
{
AvailableLocales = {"<availableLocales>"},
Calendar = 123.45F,
DateInstance = default,
DateTimeInstance = default,
Instance = default,
Lenient = true,
NumberFormat = new NumberFormat
{
AvailableLocales = {"<availableLocales>"},
Currency = "<currency>",
CurrencyInstance = default,
GroupingUsed = true,
Instance = default,
IntegerInstance = default,
MaximumFractionDigits = 1234,
MaximumIntegerDigits = 1234,
MinimumFractionDigits = 1234,
MinimumIntegerDigits = 1234,
NumberInstance = default,
ParseIntegerOnly = true,
PercentInstance = default,
RoundingMode = RoundingMode.UP,
},
TimeInstance = default,
TimeZone = new TimeZone
{
DstSavings = 1234,
Id = "<id>",
AvailableIds = {"<availableIds>"},
Default = default,
DisplayName = "<displayName>",
RawOffset = 1234,
},
},
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
AttributeDefs = {new AtlasAttributeDef
{
Cardinality = Cardinality.SINGLE,
Constraints = {new AtlasConstraintDef
{
Params =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
Type = "<type>",
}},
DefaultValue = "<defaultValue>",
Description = "<description>",
IncludeInNotification = true,
IsIndexable = true,
IsOptional = true,
IsUnique = true,
Name = "<name>",
Options =
{
["key"] = "<options>"
},
TypeName = "<typeName>",
ValuesMaxCount = 1234,
ValuesMinCount = 1234,
}},
}},
                ClassificationDefs = {new AtlasClassificationDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = default,
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
AttributeDefs = {default},
EntityTypes = {"<entityTypes>"},
SubTypes = {"<subTypes>"},
SuperTypes = {"<superTypes>"},
}},
                EntityDefs = {new AtlasEntityDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = default,
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
AttributeDefs = {default},
SubTypes = {"<subTypes>"},
SuperTypes = {"<superTypes>"},
RelationshipAttributeDefs = {new AtlasRelationshipAttributeDef
{
Cardinality = Cardinality.SINGLE,
Constraints = {default},
DefaultValue = "<defaultValue>",
Description = "<description>",
IncludeInNotification = true,
IsIndexable = true,
IsOptional = true,
IsUnique = true,
Name = "<name>",
Options =
{
["key"] = "<options>"
},
TypeName = "<typeName>",
ValuesMaxCount = 1234,
ValuesMinCount = 1234,
IsLegacyAttribute = true,
RelationshipTypeName = "<relationshipTypeName>",
}},
}},
                EnumDefs = {new AtlasEnumDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = default,
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
DefaultValue = "<defaultValue>",
ElementDefs = {new AtlasEnumElementDef
{
Description = "<description>",
Ordinal = 1234,
Value = "<value>",
}},
}},
                RelationshipDefs = {new AtlasRelationshipDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = default,
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
AttributeDefs = {default},
EndDef1 = new AtlasRelationshipEndDef
{
Cardinality = Cardinality.SINGLE,
Description = "<description>",
IsContainer = true,
IsLegacyAttribute = true,
Name = "<name>",
Type = "<type>",
},
EndDef2 = default,
RelationshipCategory = RelationshipCategory.ASSOCIATION,
RelationshipLabel = "<relationshipLabel>",
}},
                StructDefs = {new AtlasStructDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = default,
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
AttributeDefs = {default},
}},
                TermTemplateDefs = {new TermTemplateDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = default,
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
AttributeDefs = {default},
}},
            };
            Response<AtlasTypesDef> response = client.BulkUpdate(typesDef);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_BulkUpdate_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            AtlasTypesDef typesDef = new AtlasTypesDef
            {
                BusinessMetadataDefs = {new AtlasBusinessMetadataDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = new DateFormat
{
AvailableLocales = {"<availableLocales>"},
Calendar = 123.45F,
DateInstance = default,
DateTimeInstance = default,
Instance = default,
Lenient = true,
NumberFormat = new NumberFormat
{
AvailableLocales = {"<availableLocales>"},
Currency = "<currency>",
CurrencyInstance = default,
GroupingUsed = true,
Instance = default,
IntegerInstance = default,
MaximumFractionDigits = 1234,
MaximumIntegerDigits = 1234,
MinimumFractionDigits = 1234,
MinimumIntegerDigits = 1234,
NumberInstance = default,
ParseIntegerOnly = true,
PercentInstance = default,
RoundingMode = RoundingMode.UP,
},
TimeInstance = default,
TimeZone = new TimeZone
{
DstSavings = 1234,
Id = "<id>",
AvailableIds = {"<availableIds>"},
Default = default,
DisplayName = "<displayName>",
RawOffset = 1234,
},
},
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
AttributeDefs = {new AtlasAttributeDef
{
Cardinality = Cardinality.SINGLE,
Constraints = {new AtlasConstraintDef
{
Params =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
Type = "<type>",
}},
DefaultValue = "<defaultValue>",
Description = "<description>",
IncludeInNotification = true,
IsIndexable = true,
IsOptional = true,
IsUnique = true,
Name = "<name>",
Options =
{
["key"] = "<options>"
},
TypeName = "<typeName>",
ValuesMaxCount = 1234,
ValuesMinCount = 1234,
}},
}},
                ClassificationDefs = {new AtlasClassificationDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = default,
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
AttributeDefs = {default},
EntityTypes = {"<entityTypes>"},
SubTypes = {"<subTypes>"},
SuperTypes = {"<superTypes>"},
}},
                EntityDefs = {new AtlasEntityDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = default,
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
AttributeDefs = {default},
SubTypes = {"<subTypes>"},
SuperTypes = {"<superTypes>"},
RelationshipAttributeDefs = {new AtlasRelationshipAttributeDef
{
Cardinality = Cardinality.SINGLE,
Constraints = {default},
DefaultValue = "<defaultValue>",
Description = "<description>",
IncludeInNotification = true,
IsIndexable = true,
IsOptional = true,
IsUnique = true,
Name = "<name>",
Options =
{
["key"] = "<options>"
},
TypeName = "<typeName>",
ValuesMaxCount = 1234,
ValuesMinCount = 1234,
IsLegacyAttribute = true,
RelationshipTypeName = "<relationshipTypeName>",
}},
}},
                EnumDefs = {new AtlasEnumDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = default,
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
DefaultValue = "<defaultValue>",
ElementDefs = {new AtlasEnumElementDef
{
Description = "<description>",
Ordinal = 1234,
Value = "<value>",
}},
}},
                RelationshipDefs = {new AtlasRelationshipDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = default,
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
AttributeDefs = {default},
EndDef1 = new AtlasRelationshipEndDef
{
Cardinality = Cardinality.SINGLE,
Description = "<description>",
IsContainer = true,
IsLegacyAttribute = true,
Name = "<name>",
Type = "<type>",
},
EndDef2 = default,
RelationshipCategory = RelationshipCategory.ASSOCIATION,
RelationshipLabel = "<relationshipLabel>",
}},
                StructDefs = {new AtlasStructDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = default,
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
AttributeDefs = {default},
}},
                TermTemplateDefs = {new TermTemplateDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = default,
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
AttributeDefs = {default},
}},
            };
            Response<AtlasTypesDef> response = await client.BulkUpdateAsync(typesDef);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_BulkDelete_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.BulkDelete(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_BulkDelete_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.BulkDeleteAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_BulkDelete_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            AtlasTypesDef typesDef = new AtlasTypesDef();
            Response response = client.BulkDelete(typesDef);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_BulkDelete_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            AtlasTypesDef typesDef = new AtlasTypesDef();
            Response response = await client.BulkDeleteAsync(typesDef);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_BulkDelete_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            using RequestContent content = RequestContent.Create(new
            {
                businessMetadataDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
dateFormatter = new
{
availableLocales = new object[]
{
"<availableLocales>"
},
calendar = 123.45F,
lenient = true,
numberFormat = new
{
availableLocales = new object[]
{
"<availableLocales>"
},
currency = "<currency>",
groupingUsed = true,
maximumFractionDigits = 1234,
maximumIntegerDigits = 1234,
minimumFractionDigits = 1234,
minimumIntegerDigits = 1234,
parseIntegerOnly = true,
roundingMode = "UP",
},
timeZone = new Dictionary<string, object>
{
["dstSavings"] = 1234,
["id"] = "<id>",
["availableIds"] = new object[]
{
"<availableIds>"
},
["default"] = null,
["displayName"] = "<displayName>",
["rawOffset"] = 1234
},
},
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
attributeDefs = new object[]
{
new
{
cardinality = "SINGLE",
constraints = new object[]
{
new Dictionary<string, object>
{
["params"] = new
{
key = new object(),
},
["type"] = "<type>"
}
},
defaultValue = "<defaultValue>",
description = "<description>",
includeInNotification = true,
isIndexable = true,
isOptional = true,
isUnique = true,
name = "<name>",
options = new
{
key = "<options>",
},
typeName = "<typeName>",
valuesMaxCount = 1234,
valuesMinCount = 1234,
}
},
}
            },
                classificationDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
attributeDefs = new object[]
{
null
},
entityTypes = new object[]
{
"<entityTypes>"
},
subTypes = new object[]
{
"<subTypes>"
},
superTypes = new object[]
{
"<superTypes>"
},
}
            },
                entityDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
attributeDefs = new object[]
{
null
},
subTypes = new object[]
{
"<subTypes>"
},
superTypes = new object[]
{
"<superTypes>"
},
relationshipAttributeDefs = new object[]
{
new
{
cardinality = "SINGLE",
constraints = new object[]
{
null
},
defaultValue = "<defaultValue>",
description = "<description>",
includeInNotification = true,
isIndexable = true,
isOptional = true,
isUnique = true,
name = "<name>",
options = new
{
key = "<options>",
},
typeName = "<typeName>",
valuesMaxCount = 1234,
valuesMinCount = 1234,
isLegacyAttribute = true,
relationshipTypeName = "<relationshipTypeName>",
}
},
}
            },
                enumDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
defaultValue = "<defaultValue>",
elementDefs = new object[]
{
new
{
description = "<description>",
ordinal = 1234,
value = "<value>",
}
},
}
            },
                relationshipDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
attributeDefs = new object[]
{
null
},
endDef1 = new
{
cardinality = "SINGLE",
description = "<description>",
isContainer = true,
isLegacyAttribute = true,
name = "<name>",
type = "<type>",
},
relationshipCategory = "ASSOCIATION",
relationshipLabel = "<relationshipLabel>",
}
            },
                structDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
attributeDefs = new object[]
{
null
},
}
            },
                termTemplateDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
attributeDefs = new object[]
{
null
},
}
            },
            });
            Response response = client.BulkDelete(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_BulkDelete_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            using RequestContent content = RequestContent.Create(new
            {
                businessMetadataDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
dateFormatter = new
{
availableLocales = new object[]
{
"<availableLocales>"
},
calendar = 123.45F,
lenient = true,
numberFormat = new
{
availableLocales = new object[]
{
"<availableLocales>"
},
currency = "<currency>",
groupingUsed = true,
maximumFractionDigits = 1234,
maximumIntegerDigits = 1234,
minimumFractionDigits = 1234,
minimumIntegerDigits = 1234,
parseIntegerOnly = true,
roundingMode = "UP",
},
timeZone = new Dictionary<string, object>
{
["dstSavings"] = 1234,
["id"] = "<id>",
["availableIds"] = new object[]
{
"<availableIds>"
},
["default"] = null,
["displayName"] = "<displayName>",
["rawOffset"] = 1234
},
},
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
attributeDefs = new object[]
{
new
{
cardinality = "SINGLE",
constraints = new object[]
{
new Dictionary<string, object>
{
["params"] = new
{
key = new object(),
},
["type"] = "<type>"
}
},
defaultValue = "<defaultValue>",
description = "<description>",
includeInNotification = true,
isIndexable = true,
isOptional = true,
isUnique = true,
name = "<name>",
options = new
{
key = "<options>",
},
typeName = "<typeName>",
valuesMaxCount = 1234,
valuesMinCount = 1234,
}
},
}
            },
                classificationDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
attributeDefs = new object[]
{
null
},
entityTypes = new object[]
{
"<entityTypes>"
},
subTypes = new object[]
{
"<subTypes>"
},
superTypes = new object[]
{
"<superTypes>"
},
}
            },
                entityDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
attributeDefs = new object[]
{
null
},
subTypes = new object[]
{
"<subTypes>"
},
superTypes = new object[]
{
"<superTypes>"
},
relationshipAttributeDefs = new object[]
{
new
{
cardinality = "SINGLE",
constraints = new object[]
{
null
},
defaultValue = "<defaultValue>",
description = "<description>",
includeInNotification = true,
isIndexable = true,
isOptional = true,
isUnique = true,
name = "<name>",
options = new
{
key = "<options>",
},
typeName = "<typeName>",
valuesMaxCount = 1234,
valuesMinCount = 1234,
isLegacyAttribute = true,
relationshipTypeName = "<relationshipTypeName>",
}
},
}
            },
                enumDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
defaultValue = "<defaultValue>",
elementDefs = new object[]
{
new
{
description = "<description>",
ordinal = 1234,
value = "<value>",
}
},
}
            },
                relationshipDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
attributeDefs = new object[]
{
null
},
endDef1 = new
{
cardinality = "SINGLE",
description = "<description>",
isContainer = true,
isLegacyAttribute = true,
name = "<name>",
type = "<type>",
},
relationshipCategory = "ASSOCIATION",
relationshipLabel = "<relationshipLabel>",
}
            },
                structDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
attributeDefs = new object[]
{
null
},
}
            },
                termTemplateDefs = new object[]
            {
new
{
category = "PRIMITIVE",
createTime = 1234L,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
version = 1234L,
lastModifiedTS = "<lastModifiedTS>",
attributeDefs = new object[]
{
null
},
}
            },
            });
            Response response = await client.BulkDeleteAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_BulkDelete_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            AtlasTypesDef typesDef = new AtlasTypesDef
            {
                BusinessMetadataDefs = {new AtlasBusinessMetadataDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = new DateFormat
{
AvailableLocales = {"<availableLocales>"},
Calendar = 123.45F,
DateInstance = default,
DateTimeInstance = default,
Instance = default,
Lenient = true,
NumberFormat = new NumberFormat
{
AvailableLocales = {"<availableLocales>"},
Currency = "<currency>",
CurrencyInstance = default,
GroupingUsed = true,
Instance = default,
IntegerInstance = default,
MaximumFractionDigits = 1234,
MaximumIntegerDigits = 1234,
MinimumFractionDigits = 1234,
MinimumIntegerDigits = 1234,
NumberInstance = default,
ParseIntegerOnly = true,
PercentInstance = default,
RoundingMode = RoundingMode.UP,
},
TimeInstance = default,
TimeZone = new TimeZone
{
DstSavings = 1234,
Id = "<id>",
AvailableIds = {"<availableIds>"},
Default = default,
DisplayName = "<displayName>",
RawOffset = 1234,
},
},
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
AttributeDefs = {new AtlasAttributeDef
{
Cardinality = Cardinality.SINGLE,
Constraints = {new AtlasConstraintDef
{
Params =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
Type = "<type>",
}},
DefaultValue = "<defaultValue>",
Description = "<description>",
IncludeInNotification = true,
IsIndexable = true,
IsOptional = true,
IsUnique = true,
Name = "<name>",
Options =
{
["key"] = "<options>"
},
TypeName = "<typeName>",
ValuesMaxCount = 1234,
ValuesMinCount = 1234,
}},
}},
                ClassificationDefs = {new AtlasClassificationDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = default,
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
AttributeDefs = {default},
EntityTypes = {"<entityTypes>"},
SubTypes = {"<subTypes>"},
SuperTypes = {"<superTypes>"},
}},
                EntityDefs = {new AtlasEntityDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = default,
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
AttributeDefs = {default},
SubTypes = {"<subTypes>"},
SuperTypes = {"<superTypes>"},
RelationshipAttributeDefs = {new AtlasRelationshipAttributeDef
{
Cardinality = Cardinality.SINGLE,
Constraints = {default},
DefaultValue = "<defaultValue>",
Description = "<description>",
IncludeInNotification = true,
IsIndexable = true,
IsOptional = true,
IsUnique = true,
Name = "<name>",
Options =
{
["key"] = "<options>"
},
TypeName = "<typeName>",
ValuesMaxCount = 1234,
ValuesMinCount = 1234,
IsLegacyAttribute = true,
RelationshipTypeName = "<relationshipTypeName>",
}},
}},
                EnumDefs = {new AtlasEnumDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = default,
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
DefaultValue = "<defaultValue>",
ElementDefs = {new AtlasEnumElementDef
{
Description = "<description>",
Ordinal = 1234,
Value = "<value>",
}},
}},
                RelationshipDefs = {new AtlasRelationshipDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = default,
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
AttributeDefs = {default},
EndDef1 = new AtlasRelationshipEndDef
{
Cardinality = Cardinality.SINGLE,
Description = "<description>",
IsContainer = true,
IsLegacyAttribute = true,
Name = "<name>",
Type = "<type>",
},
EndDef2 = default,
RelationshipCategory = RelationshipCategory.ASSOCIATION,
RelationshipLabel = "<relationshipLabel>",
}},
                StructDefs = {new AtlasStructDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = default,
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
AttributeDefs = {default},
}},
                TermTemplateDefs = {new TermTemplateDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = default,
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
AttributeDefs = {default},
}},
            };
            Response response = client.BulkDelete(typesDef);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_BulkDelete_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            AtlasTypesDef typesDef = new AtlasTypesDef
            {
                BusinessMetadataDefs = {new AtlasBusinessMetadataDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = new DateFormat
{
AvailableLocales = {"<availableLocales>"},
Calendar = 123.45F,
DateInstance = default,
DateTimeInstance = default,
Instance = default,
Lenient = true,
NumberFormat = new NumberFormat
{
AvailableLocales = {"<availableLocales>"},
Currency = "<currency>",
CurrencyInstance = default,
GroupingUsed = true,
Instance = default,
IntegerInstance = default,
MaximumFractionDigits = 1234,
MaximumIntegerDigits = 1234,
MinimumFractionDigits = 1234,
MinimumIntegerDigits = 1234,
NumberInstance = default,
ParseIntegerOnly = true,
PercentInstance = default,
RoundingMode = RoundingMode.UP,
},
TimeInstance = default,
TimeZone = new TimeZone
{
DstSavings = 1234,
Id = "<id>",
AvailableIds = {"<availableIds>"},
Default = default,
DisplayName = "<displayName>",
RawOffset = 1234,
},
},
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
AttributeDefs = {new AtlasAttributeDef
{
Cardinality = Cardinality.SINGLE,
Constraints = {new AtlasConstraintDef
{
Params =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
Type = "<type>",
}},
DefaultValue = "<defaultValue>",
Description = "<description>",
IncludeInNotification = true,
IsIndexable = true,
IsOptional = true,
IsUnique = true,
Name = "<name>",
Options =
{
["key"] = "<options>"
},
TypeName = "<typeName>",
ValuesMaxCount = 1234,
ValuesMinCount = 1234,
}},
}},
                ClassificationDefs = {new AtlasClassificationDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = default,
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
AttributeDefs = {default},
EntityTypes = {"<entityTypes>"},
SubTypes = {"<subTypes>"},
SuperTypes = {"<superTypes>"},
}},
                EntityDefs = {new AtlasEntityDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = default,
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
AttributeDefs = {default},
SubTypes = {"<subTypes>"},
SuperTypes = {"<superTypes>"},
RelationshipAttributeDefs = {new AtlasRelationshipAttributeDef
{
Cardinality = Cardinality.SINGLE,
Constraints = {default},
DefaultValue = "<defaultValue>",
Description = "<description>",
IncludeInNotification = true,
IsIndexable = true,
IsOptional = true,
IsUnique = true,
Name = "<name>",
Options =
{
["key"] = "<options>"
},
TypeName = "<typeName>",
ValuesMaxCount = 1234,
ValuesMinCount = 1234,
IsLegacyAttribute = true,
RelationshipTypeName = "<relationshipTypeName>",
}},
}},
                EnumDefs = {new AtlasEnumDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = default,
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
DefaultValue = "<defaultValue>",
ElementDefs = {new AtlasEnumElementDef
{
Description = "<description>",
Ordinal = 1234,
Value = "<value>",
}},
}},
                RelationshipDefs = {new AtlasRelationshipDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = default,
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
AttributeDefs = {default},
EndDef1 = new AtlasRelationshipEndDef
{
Cardinality = Cardinality.SINGLE,
Description = "<description>",
IsContainer = true,
IsLegacyAttribute = true,
Name = "<name>",
Type = "<type>",
},
EndDef2 = default,
RelationshipCategory = RelationshipCategory.ASSOCIATION,
RelationshipLabel = "<relationshipLabel>",
}},
                StructDefs = {new AtlasStructDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = default,
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
AttributeDefs = {default},
}},
                TermTemplateDefs = {new TermTemplateDef
{
Category = TypeCategory.PRIMITIVE,
CreateTime = 1234L,
CreatedBy = "<createdBy>",
DateFormatter = default,
Description = "<description>",
Guid = "<guid>",
Name = "<name>",
Options =
{
["key"] = "<options>"
},
ServiceType = "<serviceType>",
TypeVersion = "<typeVersion>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Version = 1234L,
LastModifiedTS = "<lastModifiedTS>",
AttributeDefs = {default},
}},
            };
            Response response = await client.BulkDeleteAsync(typesDef);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetHeaders_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = client.GetHeaders(null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetHeaders_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = await client.GetHeadersAsync(null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetHeaders_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<IReadOnlyList<AtlasTypeDefHeader>> response = client.GetHeaders();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetHeaders_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<IReadOnlyList<AtlasTypeDefHeader>> response = await client.GetHeadersAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetHeaders_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = client.GetHeaders(true, "enum", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("category").ToString());
            Console.WriteLine(result[0].GetProperty("guid").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetHeaders_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = await client.GetHeadersAsync(true, "enum", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("category").ToString());
            Console.WriteLine(result[0].GetProperty("guid").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetHeaders_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<IReadOnlyList<AtlasTypeDefHeader>> response = client.GetHeaders(includeTermTemplate: true, type: Typedef.Enum);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetHeaders_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<IReadOnlyList<AtlasTypeDefHeader>> response = await client.GetHeadersAsync(includeTermTemplate: true, type: Typedef.Enum);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetTermTemplateDefByGuid_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = client.GetTermTemplateDefByGuid("<guid>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetTermTemplateDefByGuid_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = await client.GetTermTemplateDefByGuidAsync("<guid>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetTermTemplateDefByGuid_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<TermTemplateDef> response = client.GetTermTemplateDefByGuid("<guid>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetTermTemplateDefByGuid_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<TermTemplateDef> response = await client.GetTermTemplateDefByGuidAsync("<guid>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetTermTemplateDefByGuid_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = client.GetTermTemplateDefByGuid("<guid>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetTermTemplateDefByGuid_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = await client.GetTermTemplateDefByGuidAsync("<guid>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetTermTemplateDefByGuid_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<TermTemplateDef> response = client.GetTermTemplateDefByGuid("<guid>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetTermTemplateDefByGuid_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<TermTemplateDef> response = await client.GetTermTemplateDefByGuidAsync("<guid>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetTermTemplateDefByName_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = client.GetTermTemplateDefByName("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetTermTemplateDefByName_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = await client.GetTermTemplateDefByNameAsync("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetTermTemplateDefByName_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<TermTemplateDef> response = client.GetTermTemplateDefByName("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetTermTemplateDefByName_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<TermTemplateDef> response = await client.GetTermTemplateDefByNameAsync("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetTermTemplateDefByName_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = client.GetTermTemplateDefByName("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetTermTemplateDefByName_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response response = await client.GetTermTemplateDefByNameAsync("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("calendar").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("lenient").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("availableLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("currency").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("groupingUsed").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("maximumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumFractionDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("minimumIntegerDigits").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("parseIntegerOnly").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("numberFormat").GetProperty("roundingMode").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("dstSavings").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("availableIds")[0].ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("dateFormatter").GetProperty("timeZone").GetProperty("rawOffset").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("serviceType").ToString());
            Console.WriteLine(result.GetProperty("typeVersion").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("cardinality").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("params").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("constraints")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("includeInNotification").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isIndexable").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isOptional").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("isUnique").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("options").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMaxCount").ToString());
            Console.WriteLine(result.GetProperty("attributeDefs")[0].GetProperty("valuesMinCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Type_GetTermTemplateDefByName_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<TermTemplateDef> response = client.GetTermTemplateDefByName("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Type_GetTermTemplateDefByName_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Type client = new PurviewDataMapClient(endpoint, credential).GetTypeClient(apiVersion: "2023-09-01");

            Response<TermTemplateDef> response = await client.GetTermTemplateDefByNameAsync("<name>");
        }
    }
}
