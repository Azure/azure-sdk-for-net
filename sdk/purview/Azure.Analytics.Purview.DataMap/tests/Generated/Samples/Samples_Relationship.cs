// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Analytics.Purview.DataMap.Samples
{
    public partial class Samples_Relationship
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Relationship_Create_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Relationship client = new DataMapClient(endpoint, credential).GetRelationshipClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.Create(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Relationship_Create_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Relationship client = new DataMapClient(endpoint, credential).GetRelationshipClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Relationship_Create_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Relationship client = new DataMapClient(endpoint, credential).GetRelationshipClient();

            AtlasRelationship atlasRelationship = new AtlasRelationship();
            Response<AtlasRelationship> response = client.Create(atlasRelationship);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Relationship_Create_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Relationship client = new DataMapClient(endpoint, credential).GetRelationshipClient();

            AtlasRelationship atlasRelationship = new AtlasRelationship();
            Response<AtlasRelationship> response = await client.CreateAsync(atlasRelationship);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Relationship_Create_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Relationship client = new DataMapClient(endpoint, credential).GetRelationshipClient();

            using RequestContent content = RequestContent.Create(new
            {
                attributes = new
                {
                    key = new object(),
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
                createTime = 1234L,
                createdBy = "<createdBy>",
                end1 = new
                {
                    guid = "<guid>",
                    typeName = "<typeName>",
                    uniqueAttributes = new
                    {
                        key = new object(),
                    },
                },
                guid = "<guid>",
                homeId = "<homeId>",
                label = "<label>",
                provenanceType = 1234,
                status = "ACTIVE",
                updateTime = 1234L,
                updatedBy = "<updatedBy>",
                version = 1234L,
            });
            Response response = client.Create(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("end1").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("end1").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("end1").GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("end2").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("end2").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("end2").GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("homeId").ToString());
            Console.WriteLine(result.GetProperty("label").ToString());
            Console.WriteLine(result.GetProperty("provenanceType").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Relationship_Create_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Relationship client = new DataMapClient(endpoint, credential).GetRelationshipClient();

            using RequestContent content = RequestContent.Create(new
            {
                attributes = new
                {
                    key = new object(),
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
                createTime = 1234L,
                createdBy = "<createdBy>",
                end1 = new
                {
                    guid = "<guid>",
                    typeName = "<typeName>",
                    uniqueAttributes = new
                    {
                        key = new object(),
                    },
                },
                guid = "<guid>",
                homeId = "<homeId>",
                label = "<label>",
                provenanceType = 1234,
                status = "ACTIVE",
                updateTime = 1234L,
                updatedBy = "<updatedBy>",
                version = 1234L,
            });
            Response response = await client.CreateAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("end1").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("end1").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("end1").GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("end2").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("end2").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("end2").GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("homeId").ToString());
            Console.WriteLine(result.GetProperty("label").ToString());
            Console.WriteLine(result.GetProperty("provenanceType").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Relationship_Create_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Relationship client = new DataMapClient(endpoint, credential).GetRelationshipClient();

            AtlasRelationship atlasRelationship = new AtlasRelationship
            {
                Attributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
                TypeName = "<typeName>",
                LastModifiedTS = "<lastModifiedTS>",
                CreateTime = 1234L,
                CreatedBy = "<createdBy>",
                End1 = new AtlasObjectId
                {
                    Guid = "<guid>",
                    TypeName = "<typeName>",
                    UniqueAttributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
                },
                End2 = default,
                Guid = "<guid>",
                HomeId = "<homeId>",
                Label = "<label>",
                ProvenanceType = 1234,
                Status = StatusAtlasRelationship.Active,
                UpdateTime = 1234L,
                UpdatedBy = "<updatedBy>",
                Version = 1234L,
            };
            Response<AtlasRelationship> response = client.Create(atlasRelationship);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Relationship_Create_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Relationship client = new DataMapClient(endpoint, credential).GetRelationshipClient();

            AtlasRelationship atlasRelationship = new AtlasRelationship
            {
                Attributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
                TypeName = "<typeName>",
                LastModifiedTS = "<lastModifiedTS>",
                CreateTime = 1234L,
                CreatedBy = "<createdBy>",
                End1 = new AtlasObjectId
                {
                    Guid = "<guid>",
                    TypeName = "<typeName>",
                    UniqueAttributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
                },
                End2 = default,
                Guid = "<guid>",
                HomeId = "<homeId>",
                Label = "<label>",
                ProvenanceType = 1234,
                Status = StatusAtlasRelationship.Active,
                UpdateTime = 1234L,
                UpdatedBy = "<updatedBy>",
                Version = 1234L,
            };
            Response<AtlasRelationship> response = await client.CreateAsync(atlasRelationship);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Relationship_Update_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Relationship client = new DataMapClient(endpoint, credential).GetRelationshipClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.Update(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Relationship_Update_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Relationship client = new DataMapClient(endpoint, credential).GetRelationshipClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Relationship_Update_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Relationship client = new DataMapClient(endpoint, credential).GetRelationshipClient();

            AtlasRelationship atlasRelationship = new AtlasRelationship();
            Response<AtlasRelationship> response = client.Update(atlasRelationship);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Relationship_Update_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Relationship client = new DataMapClient(endpoint, credential).GetRelationshipClient();

            AtlasRelationship atlasRelationship = new AtlasRelationship();
            Response<AtlasRelationship> response = await client.UpdateAsync(atlasRelationship);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Relationship_Update_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Relationship client = new DataMapClient(endpoint, credential).GetRelationshipClient();

            using RequestContent content = RequestContent.Create(new
            {
                attributes = new
                {
                    key = new object(),
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
                createTime = 1234L,
                createdBy = "<createdBy>",
                end1 = new
                {
                    guid = "<guid>",
                    typeName = "<typeName>",
                    uniqueAttributes = new
                    {
                        key = new object(),
                    },
                },
                guid = "<guid>",
                homeId = "<homeId>",
                label = "<label>",
                provenanceType = 1234,
                status = "ACTIVE",
                updateTime = 1234L,
                updatedBy = "<updatedBy>",
                version = 1234L,
            });
            Response response = client.Update(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("end1").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("end1").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("end1").GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("end2").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("end2").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("end2").GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("homeId").ToString());
            Console.WriteLine(result.GetProperty("label").ToString());
            Console.WriteLine(result.GetProperty("provenanceType").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Relationship_Update_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Relationship client = new DataMapClient(endpoint, credential).GetRelationshipClient();

            using RequestContent content = RequestContent.Create(new
            {
                attributes = new
                {
                    key = new object(),
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
                createTime = 1234L,
                createdBy = "<createdBy>",
                end1 = new
                {
                    guid = "<guid>",
                    typeName = "<typeName>",
                    uniqueAttributes = new
                    {
                        key = new object(),
                    },
                },
                guid = "<guid>",
                homeId = "<homeId>",
                label = "<label>",
                provenanceType = 1234,
                status = "ACTIVE",
                updateTime = 1234L,
                updatedBy = "<updatedBy>",
                version = 1234L,
            });
            Response response = await client.UpdateAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("end1").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("end1").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("end1").GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("end2").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("end2").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("end2").GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("homeId").ToString());
            Console.WriteLine(result.GetProperty("label").ToString());
            Console.WriteLine(result.GetProperty("provenanceType").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Relationship_Update_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Relationship client = new DataMapClient(endpoint, credential).GetRelationshipClient();

            AtlasRelationship atlasRelationship = new AtlasRelationship
            {
                Attributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
                TypeName = "<typeName>",
                LastModifiedTS = "<lastModifiedTS>",
                CreateTime = 1234L,
                CreatedBy = "<createdBy>",
                End1 = new AtlasObjectId
                {
                    Guid = "<guid>",
                    TypeName = "<typeName>",
                    UniqueAttributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
                },
                End2 = default,
                Guid = "<guid>",
                HomeId = "<homeId>",
                Label = "<label>",
                ProvenanceType = 1234,
                Status = StatusAtlasRelationship.Active,
                UpdateTime = 1234L,
                UpdatedBy = "<updatedBy>",
                Version = 1234L,
            };
            Response<AtlasRelationship> response = client.Update(atlasRelationship);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Relationship_Update_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Relationship client = new DataMapClient(endpoint, credential).GetRelationshipClient();

            AtlasRelationship atlasRelationship = new AtlasRelationship
            {
                Attributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
                TypeName = "<typeName>",
                LastModifiedTS = "<lastModifiedTS>",
                CreateTime = 1234L,
                CreatedBy = "<createdBy>",
                End1 = new AtlasObjectId
                {
                    Guid = "<guid>",
                    TypeName = "<typeName>",
                    UniqueAttributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
                },
                End2 = default,
                Guid = "<guid>",
                HomeId = "<homeId>",
                Label = "<label>",
                ProvenanceType = 1234,
                Status = StatusAtlasRelationship.Active,
                UpdateTime = 1234L,
                UpdatedBy = "<updatedBy>",
                Version = 1234L,
            };
            Response<AtlasRelationship> response = await client.UpdateAsync(atlasRelationship);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Relationship_GetRelationship_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Relationship client = new DataMapClient(endpoint, credential).GetRelationshipClient();

            Response response = client.GetRelationship("<guid>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Relationship_GetRelationship_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Relationship client = new DataMapClient(endpoint, credential).GetRelationshipClient();

            Response response = await client.GetRelationshipAsync("<guid>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Relationship_GetRelationship_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Relationship client = new DataMapClient(endpoint, credential).GetRelationshipClient();

            Response<AtlasRelationshipWithExtInfo> response = client.GetRelationship("<guid>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Relationship_GetRelationship_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Relationship client = new DataMapClient(endpoint, credential).GetRelationshipClient();

            Response<AtlasRelationshipWithExtInfo> response = await client.GetRelationshipAsync("<guid>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Relationship_GetRelationship_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Relationship client = new DataMapClient(endpoint, credential).GetRelationshipClient();

            Response response = client.GetRelationship("<guid>", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("classificationNames")[0].ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("isIncomplete").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("labels")[0].ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("meaningNames")[0].ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("meanings")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("meanings")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("meanings")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("meanings")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("meanings")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("meanings")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("meanings")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("meanings")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("end1").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("end1").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("end1").GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("end2").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("end2").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("end2").GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("homeId").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("label").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("provenanceType").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("version").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Relationship_GetRelationship_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Relationship client = new DataMapClient(endpoint, credential).GetRelationshipClient();

            Response response = await client.GetRelationshipAsync("<guid>", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("classificationNames")[0].ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("isIncomplete").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("labels")[0].ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("meaningNames")[0].ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("meanings")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("meanings")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("meanings")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("meanings")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("meanings")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("meanings")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("meanings")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("meanings")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<key>").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("end1").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("end1").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("end1").GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("end2").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("end2").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("end2").GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("homeId").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("label").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("provenanceType").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("version").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Relationship_GetRelationship_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Relationship client = new DataMapClient(endpoint, credential).GetRelationshipClient();

            Response<AtlasRelationshipWithExtInfo> response = client.GetRelationship("<guid>", extendedInfo: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Relationship_GetRelationship_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Relationship client = new DataMapClient(endpoint, credential).GetRelationshipClient();

            Response<AtlasRelationshipWithExtInfo> response = await client.GetRelationshipAsync("<guid>", extendedInfo: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Relationship_Delete_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Relationship client = new DataMapClient(endpoint, credential).GetRelationshipClient();

            Response response = client.Delete("<guid>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Relationship_Delete_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Relationship client = new DataMapClient(endpoint, credential).GetRelationshipClient();

            Response response = await client.DeleteAsync("<guid>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Relationship_Delete_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Relationship client = new DataMapClient(endpoint, credential).GetRelationshipClient();

            Response response = client.Delete("<guid>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Relationship_Delete_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Relationship client = new DataMapClient(endpoint, credential).GetRelationshipClient();

            Response response = await client.DeleteAsync("<guid>");

            Console.WriteLine(response.Status);
        }
    }
}
