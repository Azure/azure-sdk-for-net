// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Analytics.Purview.DataMap.Samples
{
    public partial class Samples_Glossary
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_BatchGet_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = client.BatchGet(null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_BatchGet_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = await client.BatchGetAsync(null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_BatchGet_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<IReadOnlyList<AtlasGlossary>> response = client.BatchGet();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_BatchGet_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<IReadOnlyList<AtlasGlossary>> response = await client.BatchGetAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_BatchGet_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            Response response = client.BatchGet(1234, 1234, "<sort>", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("guid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result[0].GetProperty("longDescription").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
            Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
            Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("createTime").ToString());
            Console.WriteLine(result[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("language").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("usage").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_BatchGet_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            Response response = await client.BatchGetAsync(1234, 1234, "<sort>", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("guid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result[0].GetProperty("longDescription").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
            Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
            Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("createTime").ToString());
            Console.WriteLine(result[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("language").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("usage").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_BatchGet_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            Response<IReadOnlyList<AtlasGlossary>> response = client.BatchGet(limit: 1234, offset: 1234, sort: "<sort>", ignoreTermsAndCategories: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_BatchGet_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            Response<IReadOnlyList<AtlasGlossary>> response = await client.BatchGetAsync(limit: 1234, offset: 1234, sort: "<sort>", ignoreTermsAndCategories: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_Create_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.Create(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_Create_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_Create_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            AtlasGlossary atlasGlossary = new AtlasGlossary();
            Response<AtlasGlossary> response = client.Create(atlasGlossary);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_Create_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            AtlasGlossary atlasGlossary = new AtlasGlossary();
            Response<AtlasGlossary> response = await client.CreateAsync(atlasGlossary);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_Create_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new
            {
                guid = "<guid>",
                classifications = new object[]
            {
new
{
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
entityGuid = "<entityGuid>",
entityStatus = "ACTIVE",
removePropagationsOnEntityDelete = true,
validityPeriods = new object[]
{
new
{
endTime = "<endTime>",
startTime = "<startTime>",
timeZone = "<timeZone>",
}
},
}
            },
                longDescription = "<longDescription>",
                name = "<name>",
                qualifiedName = "<qualifiedName>",
                shortDescription = "<shortDescription>",
                lastModifiedTS = "<lastModifiedTS>",
                createTime = 1234L,
                createdBy = "<createdBy>",
                updateTime = 1234L,
                updatedBy = "<updatedBy>",
                categories = new object[]
            {
new
{
categoryGuid = "<categoryGuid>",
description = "<description>",
displayText = "<displayText>",
parentCategoryGuid = "<parentCategoryGuid>",
relationGuid = "<relationGuid>",
}
            },
                language = "<language>",
                terms = new object[]
            {
new
{
description = "<description>",
displayText = "<displayText>",
expression = "<expression>",
relationGuid = "<relationGuid>",
status = "DRAFT",
steward = "<steward>",
termGuid = "<termGuid>",
}
            },
                usage = "<usage>",
            });
            Response response = client.Create(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("usage").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_Create_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new
            {
                guid = "<guid>",
                classifications = new object[]
            {
new
{
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
entityGuid = "<entityGuid>",
entityStatus = "ACTIVE",
removePropagationsOnEntityDelete = true,
validityPeriods = new object[]
{
new
{
endTime = "<endTime>",
startTime = "<startTime>",
timeZone = "<timeZone>",
}
},
}
            },
                longDescription = "<longDescription>",
                name = "<name>",
                qualifiedName = "<qualifiedName>",
                shortDescription = "<shortDescription>",
                lastModifiedTS = "<lastModifiedTS>",
                createTime = 1234L,
                createdBy = "<createdBy>",
                updateTime = 1234L,
                updatedBy = "<updatedBy>",
                categories = new object[]
            {
new
{
categoryGuid = "<categoryGuid>",
description = "<description>",
displayText = "<displayText>",
parentCategoryGuid = "<parentCategoryGuid>",
relationGuid = "<relationGuid>",
}
            },
                language = "<language>",
                terms = new object[]
            {
new
{
description = "<description>",
displayText = "<displayText>",
expression = "<expression>",
relationGuid = "<relationGuid>",
status = "DRAFT",
steward = "<steward>",
termGuid = "<termGuid>",
}
            },
                usage = "<usage>",
            });
            Response response = await client.CreateAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("usage").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_Create_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            AtlasGlossary atlasGlossary = new AtlasGlossary
            {
                Guid = "<guid>",
                Classifications = {new AtlasClassification
{
Attributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
TypeName = "<typeName>",
LastModifiedTS = "<lastModifiedTS>",
EntityGuid = "<entityGuid>",
EntityStatus = EntityStatus.Active,
RemovePropagationsOnEntityDelete = true,
ValidityPeriods = {new TimeBoundary
{
EndTime = "<endTime>",
StartTime = "<startTime>",
TimeZone = "<timeZone>",
}},
}},
                LongDescription = "<longDescription>",
                Name = "<name>",
                QualifiedName = "<qualifiedName>",
                ShortDescription = "<shortDescription>",
                LastModifiedTS = "<lastModifiedTS>",
                CreateTime = 1234L,
                CreatedBy = "<createdBy>",
                UpdateTime = 1234L,
                UpdatedBy = "<updatedBy>",
                Categories = {new AtlasRelatedCategoryHeader
{
CategoryGuid = "<categoryGuid>",
Description = "<description>",
DisplayText = "<displayText>",
ParentCategoryGuid = "<parentCategoryGuid>",
RelationGuid = "<relationGuid>",
}},
                Language = "<language>",
                Terms = {new AtlasRelatedTermHeader
{
Description = "<description>",
DisplayText = "<displayText>",
Expression = "<expression>",
RelationGuid = "<relationGuid>",
Status = AtlasTermRelationshipStatus.Draft,
Steward = "<steward>",
TermGuid = "<termGuid>",
}},
                Usage = "<usage>",
            };
            Response<AtlasGlossary> response = client.Create(atlasGlossary);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_Create_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            AtlasGlossary atlasGlossary = new AtlasGlossary
            {
                Guid = "<guid>",
                Classifications = {new AtlasClassification
{
Attributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
TypeName = "<typeName>",
LastModifiedTS = "<lastModifiedTS>",
EntityGuid = "<entityGuid>",
EntityStatus = EntityStatus.Active,
RemovePropagationsOnEntityDelete = true,
ValidityPeriods = {new TimeBoundary
{
EndTime = "<endTime>",
StartTime = "<startTime>",
TimeZone = "<timeZone>",
}},
}},
                LongDescription = "<longDescription>",
                Name = "<name>",
                QualifiedName = "<qualifiedName>",
                ShortDescription = "<shortDescription>",
                LastModifiedTS = "<lastModifiedTS>",
                CreateTime = 1234L,
                CreatedBy = "<createdBy>",
                UpdateTime = 1234L,
                UpdatedBy = "<updatedBy>",
                Categories = {new AtlasRelatedCategoryHeader
{
CategoryGuid = "<categoryGuid>",
Description = "<description>",
DisplayText = "<displayText>",
ParentCategoryGuid = "<parentCategoryGuid>",
RelationGuid = "<relationGuid>",
}},
                Language = "<language>",
                Terms = {new AtlasRelatedTermHeader
{
Description = "<description>",
DisplayText = "<displayText>",
Expression = "<expression>",
RelationGuid = "<relationGuid>",
Status = AtlasTermRelationshipStatus.Draft,
Steward = "<steward>",
TermGuid = "<termGuid>",
}},
                Usage = "<usage>",
            };
            Response<AtlasGlossary> response = await client.CreateAsync(atlasGlossary);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_CreateCategories_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
new object()
            });
            Response response = client.CreateCategories(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_CreateCategories_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
new object()
            });
            Response response = await client.CreateCategoriesAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_CreateCategories_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<IReadOnlyList<AtlasGlossaryCategory>> response = client.CreateCategories(new AtlasGlossaryCategory[]
            {
new AtlasGlossaryCategory()
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_CreateCategories_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<IReadOnlyList<AtlasGlossaryCategory>> response = await client.CreateCategoriesAsync(new AtlasGlossaryCategory[]
            {
new AtlasGlossaryCategory()
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_CreateCategories_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
new
{
guid = "<guid>",
classifications = new object[]
{
new
{
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
entityGuid = "<entityGuid>",
entityStatus = "ACTIVE",
removePropagationsOnEntityDelete = true,
validityPeriods = new object[]
{
new
{
endTime = "<endTime>",
startTime = "<startTime>",
timeZone = "<timeZone>",
}
},
}
},
longDescription = "<longDescription>",
name = "<name>",
qualifiedName = "<qualifiedName>",
shortDescription = "<shortDescription>",
lastModifiedTS = "<lastModifiedTS>",
createTime = 1234L,
createdBy = "<createdBy>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
anchor = new
{
displayText = "<displayText>",
glossaryGuid = "<glossaryGuid>",
relationGuid = "<relationGuid>",
},
childrenCategories = new object[]
{
new
{
categoryGuid = "<categoryGuid>",
description = "<description>",
displayText = "<displayText>",
parentCategoryGuid = "<parentCategoryGuid>",
relationGuid = "<relationGuid>",
}
},
terms = new object[]
{
new
{
description = "<description>",
displayText = "<displayText>",
expression = "<expression>",
relationGuid = "<relationGuid>",
status = "DRAFT",
steward = "<steward>",
termGuid = "<termGuid>",
}
},
}
            });
            Response response = client.CreateCategories(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("guid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result[0].GetProperty("longDescription").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
            Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
            Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("createTime").ToString());
            Console.WriteLine(result[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_CreateCategories_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
new
{
guid = "<guid>",
classifications = new object[]
{
new
{
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
entityGuid = "<entityGuid>",
entityStatus = "ACTIVE",
removePropagationsOnEntityDelete = true,
validityPeriods = new object[]
{
new
{
endTime = "<endTime>",
startTime = "<startTime>",
timeZone = "<timeZone>",
}
},
}
},
longDescription = "<longDescription>",
name = "<name>",
qualifiedName = "<qualifiedName>",
shortDescription = "<shortDescription>",
lastModifiedTS = "<lastModifiedTS>",
createTime = 1234L,
createdBy = "<createdBy>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
anchor = new
{
displayText = "<displayText>",
glossaryGuid = "<glossaryGuid>",
relationGuid = "<relationGuid>",
},
childrenCategories = new object[]
{
new
{
categoryGuid = "<categoryGuid>",
description = "<description>",
displayText = "<displayText>",
parentCategoryGuid = "<parentCategoryGuid>",
relationGuid = "<relationGuid>",
}
},
terms = new object[]
{
new
{
description = "<description>",
displayText = "<displayText>",
expression = "<expression>",
relationGuid = "<relationGuid>",
status = "DRAFT",
steward = "<steward>",
termGuid = "<termGuid>",
}
},
}
            });
            Response response = await client.CreateCategoriesAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("guid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result[0].GetProperty("longDescription").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
            Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
            Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("createTime").ToString());
            Console.WriteLine(result[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_CreateCategories_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<IReadOnlyList<AtlasGlossaryCategory>> response = client.CreateCategories(new AtlasGlossaryCategory[]
            {
new AtlasGlossaryCategory
{
Guid = "<guid>",
Classifications = {new AtlasClassification
{
Attributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
TypeName = "<typeName>",
LastModifiedTS = "<lastModifiedTS>",
EntityGuid = "<entityGuid>",
EntityStatus = EntityStatus.Active,
RemovePropagationsOnEntityDelete = true,
ValidityPeriods = {new TimeBoundary
{
EndTime = "<endTime>",
StartTime = "<startTime>",
TimeZone = "<timeZone>",
}},
}},
LongDescription = "<longDescription>",
Name = "<name>",
QualifiedName = "<qualifiedName>",
ShortDescription = "<shortDescription>",
LastModifiedTS = "<lastModifiedTS>",
CreateTime = 1234L,
CreatedBy = "<createdBy>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Anchor = new AtlasGlossaryHeader
{
DisplayText = "<displayText>",
GlossaryGuid = "<glossaryGuid>",
RelationGuid = "<relationGuid>",
},
ChildrenCategories = {new AtlasRelatedCategoryHeader
{
CategoryGuid = "<categoryGuid>",
Description = "<description>",
DisplayText = "<displayText>",
ParentCategoryGuid = "<parentCategoryGuid>",
RelationGuid = "<relationGuid>",
}},
ParentCategory = default,
Terms = {new AtlasRelatedTermHeader
{
Description = "<description>",
DisplayText = "<displayText>",
Expression = "<expression>",
RelationGuid = "<relationGuid>",
Status = AtlasTermRelationshipStatus.Draft,
Steward = "<steward>",
TermGuid = "<termGuid>",
}},
}
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_CreateCategories_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<IReadOnlyList<AtlasGlossaryCategory>> response = await client.CreateCategoriesAsync(new AtlasGlossaryCategory[]
            {
new AtlasGlossaryCategory
{
Guid = "<guid>",
Classifications = {new AtlasClassification
{
Attributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
TypeName = "<typeName>",
LastModifiedTS = "<lastModifiedTS>",
EntityGuid = "<entityGuid>",
EntityStatus = EntityStatus.Active,
RemovePropagationsOnEntityDelete = true,
ValidityPeriods = {new TimeBoundary
{
EndTime = "<endTime>",
StartTime = "<startTime>",
TimeZone = "<timeZone>",
}},
}},
LongDescription = "<longDescription>",
Name = "<name>",
QualifiedName = "<qualifiedName>",
ShortDescription = "<shortDescription>",
LastModifiedTS = "<lastModifiedTS>",
CreateTime = 1234L,
CreatedBy = "<createdBy>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Anchor = new AtlasGlossaryHeader
{
DisplayText = "<displayText>",
GlossaryGuid = "<glossaryGuid>",
RelationGuid = "<relationGuid>",
},
ChildrenCategories = {new AtlasRelatedCategoryHeader
{
CategoryGuid = "<categoryGuid>",
Description = "<description>",
DisplayText = "<displayText>",
ParentCategoryGuid = "<parentCategoryGuid>",
RelationGuid = "<relationGuid>",
}},
ParentCategory = default,
Terms = {new AtlasRelatedTermHeader
{
Description = "<description>",
DisplayText = "<displayText>",
Expression = "<expression>",
RelationGuid = "<relationGuid>",
Status = AtlasTermRelationshipStatus.Draft,
Steward = "<steward>",
TermGuid = "<termGuid>",
}},
}
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_CreateCategory_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.CreateCategory(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_CreateCategory_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateCategoryAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_CreateCategory_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            AtlasGlossaryCategory atlasGlossaryCategory = new AtlasGlossaryCategory();
            Response<AtlasGlossaryCategory> response = client.CreateCategory(atlasGlossaryCategory);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_CreateCategory_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            AtlasGlossaryCategory atlasGlossaryCategory = new AtlasGlossaryCategory();
            Response<AtlasGlossaryCategory> response = await client.CreateCategoryAsync(atlasGlossaryCategory);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_CreateCategory_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new
            {
                guid = "<guid>",
                classifications = new object[]
            {
new
{
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
entityGuid = "<entityGuid>",
entityStatus = "ACTIVE",
removePropagationsOnEntityDelete = true,
validityPeriods = new object[]
{
new
{
endTime = "<endTime>",
startTime = "<startTime>",
timeZone = "<timeZone>",
}
},
}
            },
                longDescription = "<longDescription>",
                name = "<name>",
                qualifiedName = "<qualifiedName>",
                shortDescription = "<shortDescription>",
                lastModifiedTS = "<lastModifiedTS>",
                createTime = 1234L,
                createdBy = "<createdBy>",
                updateTime = 1234L,
                updatedBy = "<updatedBy>",
                anchor = new
                {
                    displayText = "<displayText>",
                    glossaryGuid = "<glossaryGuid>",
                    relationGuid = "<relationGuid>",
                },
                childrenCategories = new object[]
            {
new
{
categoryGuid = "<categoryGuid>",
description = "<description>",
displayText = "<displayText>",
parentCategoryGuid = "<parentCategoryGuid>",
relationGuid = "<relationGuid>",
}
            },
                terms = new object[]
            {
new
{
description = "<description>",
displayText = "<displayText>",
expression = "<expression>",
relationGuid = "<relationGuid>",
status = "DRAFT",
steward = "<steward>",
termGuid = "<termGuid>",
}
            },
            });
            Response response = client.CreateCategory(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_CreateCategory_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new
            {
                guid = "<guid>",
                classifications = new object[]
            {
new
{
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
entityGuid = "<entityGuid>",
entityStatus = "ACTIVE",
removePropagationsOnEntityDelete = true,
validityPeriods = new object[]
{
new
{
endTime = "<endTime>",
startTime = "<startTime>",
timeZone = "<timeZone>",
}
},
}
            },
                longDescription = "<longDescription>",
                name = "<name>",
                qualifiedName = "<qualifiedName>",
                shortDescription = "<shortDescription>",
                lastModifiedTS = "<lastModifiedTS>",
                createTime = 1234L,
                createdBy = "<createdBy>",
                updateTime = 1234L,
                updatedBy = "<updatedBy>",
                anchor = new
                {
                    displayText = "<displayText>",
                    glossaryGuid = "<glossaryGuid>",
                    relationGuid = "<relationGuid>",
                },
                childrenCategories = new object[]
            {
new
{
categoryGuid = "<categoryGuid>",
description = "<description>",
displayText = "<displayText>",
parentCategoryGuid = "<parentCategoryGuid>",
relationGuid = "<relationGuid>",
}
            },
                terms = new object[]
            {
new
{
description = "<description>",
displayText = "<displayText>",
expression = "<expression>",
relationGuid = "<relationGuid>",
status = "DRAFT",
steward = "<steward>",
termGuid = "<termGuid>",
}
            },
            });
            Response response = await client.CreateCategoryAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_CreateCategory_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            AtlasGlossaryCategory atlasGlossaryCategory = new AtlasGlossaryCategory
            {
                Guid = "<guid>",
                Classifications = {new AtlasClassification
{
Attributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
TypeName = "<typeName>",
LastModifiedTS = "<lastModifiedTS>",
EntityGuid = "<entityGuid>",
EntityStatus = EntityStatus.Active,
RemovePropagationsOnEntityDelete = true,
ValidityPeriods = {new TimeBoundary
{
EndTime = "<endTime>",
StartTime = "<startTime>",
TimeZone = "<timeZone>",
}},
}},
                LongDescription = "<longDescription>",
                Name = "<name>",
                QualifiedName = "<qualifiedName>",
                ShortDescription = "<shortDescription>",
                LastModifiedTS = "<lastModifiedTS>",
                CreateTime = 1234L,
                CreatedBy = "<createdBy>",
                UpdateTime = 1234L,
                UpdatedBy = "<updatedBy>",
                Anchor = new AtlasGlossaryHeader
                {
                    DisplayText = "<displayText>",
                    GlossaryGuid = "<glossaryGuid>",
                    RelationGuid = "<relationGuid>",
                },
                ChildrenCategories = {new AtlasRelatedCategoryHeader
{
CategoryGuid = "<categoryGuid>",
Description = "<description>",
DisplayText = "<displayText>",
ParentCategoryGuid = "<parentCategoryGuid>",
RelationGuid = "<relationGuid>",
}},
                ParentCategory = default,
                Terms = {new AtlasRelatedTermHeader
{
Description = "<description>",
DisplayText = "<displayText>",
Expression = "<expression>",
RelationGuid = "<relationGuid>",
Status = AtlasTermRelationshipStatus.Draft,
Steward = "<steward>",
TermGuid = "<termGuid>",
}},
            };
            Response<AtlasGlossaryCategory> response = client.CreateCategory(atlasGlossaryCategory);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_CreateCategory_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            AtlasGlossaryCategory atlasGlossaryCategory = new AtlasGlossaryCategory
            {
                Guid = "<guid>",
                Classifications = {new AtlasClassification
{
Attributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
TypeName = "<typeName>",
LastModifiedTS = "<lastModifiedTS>",
EntityGuid = "<entityGuid>",
EntityStatus = EntityStatus.Active,
RemovePropagationsOnEntityDelete = true,
ValidityPeriods = {new TimeBoundary
{
EndTime = "<endTime>",
StartTime = "<startTime>",
TimeZone = "<timeZone>",
}},
}},
                LongDescription = "<longDescription>",
                Name = "<name>",
                QualifiedName = "<qualifiedName>",
                ShortDescription = "<shortDescription>",
                LastModifiedTS = "<lastModifiedTS>",
                CreateTime = 1234L,
                CreatedBy = "<createdBy>",
                UpdateTime = 1234L,
                UpdatedBy = "<updatedBy>",
                Anchor = new AtlasGlossaryHeader
                {
                    DisplayText = "<displayText>",
                    GlossaryGuid = "<glossaryGuid>",
                    RelationGuid = "<relationGuid>",
                },
                ChildrenCategories = {new AtlasRelatedCategoryHeader
{
CategoryGuid = "<categoryGuid>",
Description = "<description>",
DisplayText = "<displayText>",
ParentCategoryGuid = "<parentCategoryGuid>",
RelationGuid = "<relationGuid>",
}},
                ParentCategory = default,
                Terms = {new AtlasRelatedTermHeader
{
Description = "<description>",
DisplayText = "<displayText>",
Expression = "<expression>",
RelationGuid = "<relationGuid>",
Status = AtlasTermRelationshipStatus.Draft,
Steward = "<steward>",
TermGuid = "<termGuid>",
}},
            };
            Response<AtlasGlossaryCategory> response = await client.CreateCategoryAsync(atlasGlossaryCategory);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetCategory_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = client.GetCategory("<categoryId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetCategory_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = await client.GetCategoryAsync("<categoryId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetCategory_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<AtlasGlossaryCategory> response = client.GetCategory("<categoryId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetCategory_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<AtlasGlossaryCategory> response = await client.GetCategoryAsync("<categoryId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetCategory_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = client.GetCategory("<categoryId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetCategory_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = await client.GetCategoryAsync("<categoryId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetCategory_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<AtlasGlossaryCategory> response = client.GetCategory("<categoryId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetCategory_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<AtlasGlossaryCategory> response = await client.GetCategoryAsync("<categoryId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_UpdateCategory_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdateCategory("<categoryId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_UpdateCategory_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateCategoryAsync("<categoryId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_UpdateCategory_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            AtlasGlossaryCategory atlasGlossaryCategory = new AtlasGlossaryCategory();
            Response<AtlasGlossaryCategory> response = client.UpdateCategory("<categoryId>", atlasGlossaryCategory);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_UpdateCategory_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            AtlasGlossaryCategory atlasGlossaryCategory = new AtlasGlossaryCategory();
            Response<AtlasGlossaryCategory> response = await client.UpdateCategoryAsync("<categoryId>", atlasGlossaryCategory);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_UpdateCategory_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new
            {
                guid = "<guid>",
                classifications = new object[]
            {
new
{
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
entityGuid = "<entityGuid>",
entityStatus = "ACTIVE",
removePropagationsOnEntityDelete = true,
validityPeriods = new object[]
{
new
{
endTime = "<endTime>",
startTime = "<startTime>",
timeZone = "<timeZone>",
}
},
}
            },
                longDescription = "<longDescription>",
                name = "<name>",
                qualifiedName = "<qualifiedName>",
                shortDescription = "<shortDescription>",
                lastModifiedTS = "<lastModifiedTS>",
                createTime = 1234L,
                createdBy = "<createdBy>",
                updateTime = 1234L,
                updatedBy = "<updatedBy>",
                anchor = new
                {
                    displayText = "<displayText>",
                    glossaryGuid = "<glossaryGuid>",
                    relationGuid = "<relationGuid>",
                },
                childrenCategories = new object[]
            {
new
{
categoryGuid = "<categoryGuid>",
description = "<description>",
displayText = "<displayText>",
parentCategoryGuid = "<parentCategoryGuid>",
relationGuid = "<relationGuid>",
}
            },
                terms = new object[]
            {
new
{
description = "<description>",
displayText = "<displayText>",
expression = "<expression>",
relationGuid = "<relationGuid>",
status = "DRAFT",
steward = "<steward>",
termGuid = "<termGuid>",
}
            },
            });
            Response response = client.UpdateCategory("<categoryId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_UpdateCategory_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new
            {
                guid = "<guid>",
                classifications = new object[]
            {
new
{
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
entityGuid = "<entityGuid>",
entityStatus = "ACTIVE",
removePropagationsOnEntityDelete = true,
validityPeriods = new object[]
{
new
{
endTime = "<endTime>",
startTime = "<startTime>",
timeZone = "<timeZone>",
}
},
}
            },
                longDescription = "<longDescription>",
                name = "<name>",
                qualifiedName = "<qualifiedName>",
                shortDescription = "<shortDescription>",
                lastModifiedTS = "<lastModifiedTS>",
                createTime = 1234L,
                createdBy = "<createdBy>",
                updateTime = 1234L,
                updatedBy = "<updatedBy>",
                anchor = new
                {
                    displayText = "<displayText>",
                    glossaryGuid = "<glossaryGuid>",
                    relationGuid = "<relationGuid>",
                },
                childrenCategories = new object[]
            {
new
{
categoryGuid = "<categoryGuid>",
description = "<description>",
displayText = "<displayText>",
parentCategoryGuid = "<parentCategoryGuid>",
relationGuid = "<relationGuid>",
}
            },
                terms = new object[]
            {
new
{
description = "<description>",
displayText = "<displayText>",
expression = "<expression>",
relationGuid = "<relationGuid>",
status = "DRAFT",
steward = "<steward>",
termGuid = "<termGuid>",
}
            },
            });
            Response response = await client.UpdateCategoryAsync("<categoryId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_UpdateCategory_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            AtlasGlossaryCategory atlasGlossaryCategory = new AtlasGlossaryCategory
            {
                Guid = "<guid>",
                Classifications = {new AtlasClassification
{
Attributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
TypeName = "<typeName>",
LastModifiedTS = "<lastModifiedTS>",
EntityGuid = "<entityGuid>",
EntityStatus = EntityStatus.Active,
RemovePropagationsOnEntityDelete = true,
ValidityPeriods = {new TimeBoundary
{
EndTime = "<endTime>",
StartTime = "<startTime>",
TimeZone = "<timeZone>",
}},
}},
                LongDescription = "<longDescription>",
                Name = "<name>",
                QualifiedName = "<qualifiedName>",
                ShortDescription = "<shortDescription>",
                LastModifiedTS = "<lastModifiedTS>",
                CreateTime = 1234L,
                CreatedBy = "<createdBy>",
                UpdateTime = 1234L,
                UpdatedBy = "<updatedBy>",
                Anchor = new AtlasGlossaryHeader
                {
                    DisplayText = "<displayText>",
                    GlossaryGuid = "<glossaryGuid>",
                    RelationGuid = "<relationGuid>",
                },
                ChildrenCategories = {new AtlasRelatedCategoryHeader
{
CategoryGuid = "<categoryGuid>",
Description = "<description>",
DisplayText = "<displayText>",
ParentCategoryGuid = "<parentCategoryGuid>",
RelationGuid = "<relationGuid>",
}},
                ParentCategory = default,
                Terms = {new AtlasRelatedTermHeader
{
Description = "<description>",
DisplayText = "<displayText>",
Expression = "<expression>",
RelationGuid = "<relationGuid>",
Status = AtlasTermRelationshipStatus.Draft,
Steward = "<steward>",
TermGuid = "<termGuid>",
}},
            };
            Response<AtlasGlossaryCategory> response = client.UpdateCategory("<categoryId>", atlasGlossaryCategory);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_UpdateCategory_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            AtlasGlossaryCategory atlasGlossaryCategory = new AtlasGlossaryCategory
            {
                Guid = "<guid>",
                Classifications = {new AtlasClassification
{
Attributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
TypeName = "<typeName>",
LastModifiedTS = "<lastModifiedTS>",
EntityGuid = "<entityGuid>",
EntityStatus = EntityStatus.Active,
RemovePropagationsOnEntityDelete = true,
ValidityPeriods = {new TimeBoundary
{
EndTime = "<endTime>",
StartTime = "<startTime>",
TimeZone = "<timeZone>",
}},
}},
                LongDescription = "<longDescription>",
                Name = "<name>",
                QualifiedName = "<qualifiedName>",
                ShortDescription = "<shortDescription>",
                LastModifiedTS = "<lastModifiedTS>",
                CreateTime = 1234L,
                CreatedBy = "<createdBy>",
                UpdateTime = 1234L,
                UpdatedBy = "<updatedBy>",
                Anchor = new AtlasGlossaryHeader
                {
                    DisplayText = "<displayText>",
                    GlossaryGuid = "<glossaryGuid>",
                    RelationGuid = "<relationGuid>",
                },
                ChildrenCategories = {new AtlasRelatedCategoryHeader
{
CategoryGuid = "<categoryGuid>",
Description = "<description>",
DisplayText = "<displayText>",
ParentCategoryGuid = "<parentCategoryGuid>",
RelationGuid = "<relationGuid>",
}},
                ParentCategory = default,
                Terms = {new AtlasRelatedTermHeader
{
Description = "<description>",
DisplayText = "<displayText>",
Expression = "<expression>",
RelationGuid = "<relationGuid>",
Status = AtlasTermRelationshipStatus.Draft,
Steward = "<steward>",
TermGuid = "<termGuid>",
}},
            };
            Response<AtlasGlossaryCategory> response = await client.UpdateCategoryAsync("<categoryId>", atlasGlossaryCategory);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_DeleteCategory_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = client.DeleteCategory("<categoryId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_DeleteCategory_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = await client.DeleteCategoryAsync("<categoryId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_DeleteCategory_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = client.DeleteCategory("<categoryId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_DeleteCategory_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = await client.DeleteCategoryAsync("<categoryId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_PartialUpdateCategory_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new
            {
                key = "<body>",
            });
            Response response = client.PartialUpdateCategory("<categoryId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_PartialUpdateCategory_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new
            {
                key = "<body>",
            });
            Response response = await client.PartialUpdateCategoryAsync("<categoryId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_PartialUpdateCategory_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<AtlasGlossaryCategory> response = client.PartialUpdateCategory("<categoryId>", new Dictionary<string, string>
            {
                ["key"] = "<body>"
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_PartialUpdateCategory_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<AtlasGlossaryCategory> response = await client.PartialUpdateCategoryAsync("<categoryId>", new Dictionary<string, string>
            {
                ["key"] = "<body>"
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_PartialUpdateCategory_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new
            {
                key = "<body>",
            });
            Response response = client.PartialUpdateCategory("<categoryId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_PartialUpdateCategory_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new
            {
                key = "<body>",
            });
            Response response = await client.PartialUpdateCategoryAsync("<categoryId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_PartialUpdateCategory_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<AtlasGlossaryCategory> response = client.PartialUpdateCategory("<categoryId>", new Dictionary<string, string>
            {
                ["key"] = "<body>"
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_PartialUpdateCategory_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<AtlasGlossaryCategory> response = await client.PartialUpdateCategoryAsync("<categoryId>", new Dictionary<string, string>
            {
                ["key"] = "<body>"
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetRelatedCategories_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = client.GetRelatedCategories("<categoryId>", null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("<key>")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetRelatedCategories_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = await client.GetRelatedCategoriesAsync("<categoryId>", null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("<key>")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetRelatedCategories_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<IReadOnlyDictionary<string, IList<AtlasRelatedCategoryHeader>>> response = client.GetRelatedCategories("<categoryId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetRelatedCategories_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<IReadOnlyDictionary<string, IList<AtlasRelatedCategoryHeader>>> response = await client.GetRelatedCategoriesAsync("<categoryId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetRelatedCategories_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = client.GetRelatedCategories("<categoryId>", 1234, 1234, "<sort>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("relationGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetRelatedCategories_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = await client.GetRelatedCategoriesAsync("<categoryId>", 1234, 1234, "<sort>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("relationGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetRelatedCategories_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<IReadOnlyDictionary<string, IList<AtlasRelatedCategoryHeader>>> response = client.GetRelatedCategories("<categoryId>", limit: 1234, offset: 1234, sort: "<sort>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetRelatedCategories_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<IReadOnlyDictionary<string, IList<AtlasRelatedCategoryHeader>>> response = await client.GetRelatedCategoriesAsync("<categoryId>", limit: 1234, offset: 1234, sort: "<sort>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetCategoryTerms_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = client.GetCategoryTerms("<categoryId>", null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetCategoryTerms_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = await client.GetCategoryTermsAsync("<categoryId>", null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetCategoryTerms_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<IReadOnlyList<AtlasRelatedTermHeader>> response = client.GetCategoryTerms("<categoryId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetCategoryTerms_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<IReadOnlyList<AtlasRelatedTermHeader>> response = await client.GetCategoryTermsAsync("<categoryId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetCategoryTerms_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = client.GetCategoryTerms("<categoryId>", 1234, 1234, "<sort>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("termGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetCategoryTerms_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = await client.GetCategoryTermsAsync("<categoryId>", 1234, 1234, "<sort>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("termGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetCategoryTerms_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<IReadOnlyList<AtlasRelatedTermHeader>> response = client.GetCategoryTerms("<categoryId>", limit: 1234, offset: 1234, sort: "<sort>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetCategoryTerms_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<IReadOnlyList<AtlasRelatedTermHeader>> response = await client.GetCategoryTermsAsync("<categoryId>", limit: 1234, offset: 1234, sort: "<sort>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_CreateTerm_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.CreateTerm(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_CreateTerm_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateTermAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_CreateTerm_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            AtlasGlossaryTerm atlasGlossaryTerm = new AtlasGlossaryTerm();
            Response<AtlasGlossaryTerm> response = client.CreateTerm(atlasGlossaryTerm);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_CreateTerm_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            AtlasGlossaryTerm atlasGlossaryTerm = new AtlasGlossaryTerm();
            Response<AtlasGlossaryTerm> response = await client.CreateTermAsync(atlasGlossaryTerm);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_CreateTerm_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new
            {
                guid = "<guid>",
                classifications = new object[]
            {
new
{
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
entityGuid = "<entityGuid>",
entityStatus = "ACTIVE",
removePropagationsOnEntityDelete = true,
validityPeriods = new object[]
{
new
{
endTime = "<endTime>",
startTime = "<startTime>",
timeZone = "<timeZone>",
}
},
}
            },
                longDescription = "<longDescription>",
                name = "<name>",
                qualifiedName = "<qualifiedName>",
                shortDescription = "<shortDescription>",
                lastModifiedTS = "<lastModifiedTS>",
                createTime = 1234L,
                createdBy = "<createdBy>",
                updateTime = 1234L,
                updatedBy = "<updatedBy>",
                abbreviation = "<abbreviation>",
                templateName = new object[]
            {
new object()
            },
                anchor = new
                {
                    displayText = "<displayText>",
                    glossaryGuid = "<glossaryGuid>",
                    relationGuid = "<relationGuid>",
                },
                antonyms = new object[]
            {
new
{
description = "<description>",
displayText = "<displayText>",
expression = "<expression>",
relationGuid = "<relationGuid>",
status = "DRAFT",
steward = "<steward>",
termGuid = "<termGuid>",
}
            },
                status = "Draft",
                nickName = "<nickName>",
                hierarchyInfo = new object[]
            {
new
{
guid = "<guid>",
typeName = "<typeName>",
uniqueAttributes = new
{
key = new object(),
},
name = "<name>",
displayText = "<displayText>",
itemPath = "<itemPath>",
resourceId = "<resourceId>",
properties = new
{
key = new object(),
},
}
            },
                resources = new object[]
            {
new
{
displayName = "<displayName>",
url = "<url>",
}
            },
                contacts = new
                {
                    key = new object[]
            {
new
{
id = "<id>",
info = "<info>",
}
            },
                },
                attributes = new
                {
                    key = new
                    {
                        key = new object(),
                    },
                },
                assignedEntities = new object[]
            {
new
{
guid = "<guid>",
typeName = "<typeName>",
uniqueAttributes = new
{
key = new object(),
},
displayText = "<displayText>",
entityStatus = "ACTIVE",
relationshipType = "<relationshipType>",
relationshipAttributes = new
{
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
},
relationshipGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
relationshipStatus = "ACTIVE",
}
            },
                categories = new object[]
            {
new
{
categoryGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
description = "<description>",
displayText = "<displayText>",
relationGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
status = "DRAFT",
}
            },
                classifies = new object[]
            {
null
            },
                examples = new object[]
            {
"<examples>"
            },
                isA = new object[]
            {
null
            },
                preferredTerms = new object[]
            {
null
            },
                preferredToTerms = new object[]
            {
null
            },
                replacedBy = new object[]
            {
null
            },
                replacementTerms = new object[]
            {
null
            },
                seeAlso = new object[]
            {
null
            },
                synonyms = new object[]
            {
null
            },
                translatedTerms = new object[]
            {
null
            },
                translationTerms = new object[]
            {
null
            },
                usage = "<usage>",
                validValues = new object[]
            {
null
            },
                validValuesFor = new object[]
            {
null
            },
            });
            Response response = client.CreateTerm(content, includeTermHierarchy: true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("abbreviation").ToString());
            Console.WriteLine(result.GetProperty("templateName")[0].ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("nickName").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("itemPath").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
            Console.WriteLine(result.GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("examples")[0].ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_CreateTerm_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new
            {
                guid = "<guid>",
                classifications = new object[]
            {
new
{
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
entityGuid = "<entityGuid>",
entityStatus = "ACTIVE",
removePropagationsOnEntityDelete = true,
validityPeriods = new object[]
{
new
{
endTime = "<endTime>",
startTime = "<startTime>",
timeZone = "<timeZone>",
}
},
}
            },
                longDescription = "<longDescription>",
                name = "<name>",
                qualifiedName = "<qualifiedName>",
                shortDescription = "<shortDescription>",
                lastModifiedTS = "<lastModifiedTS>",
                createTime = 1234L,
                createdBy = "<createdBy>",
                updateTime = 1234L,
                updatedBy = "<updatedBy>",
                abbreviation = "<abbreviation>",
                templateName = new object[]
            {
new object()
            },
                anchor = new
                {
                    displayText = "<displayText>",
                    glossaryGuid = "<glossaryGuid>",
                    relationGuid = "<relationGuid>",
                },
                antonyms = new object[]
            {
new
{
description = "<description>",
displayText = "<displayText>",
expression = "<expression>",
relationGuid = "<relationGuid>",
status = "DRAFT",
steward = "<steward>",
termGuid = "<termGuid>",
}
            },
                status = "Draft",
                nickName = "<nickName>",
                hierarchyInfo = new object[]
            {
new
{
guid = "<guid>",
typeName = "<typeName>",
uniqueAttributes = new
{
key = new object(),
},
name = "<name>",
displayText = "<displayText>",
itemPath = "<itemPath>",
resourceId = "<resourceId>",
properties = new
{
key = new object(),
},
}
            },
                resources = new object[]
            {
new
{
displayName = "<displayName>",
url = "<url>",
}
            },
                contacts = new
                {
                    key = new object[]
            {
new
{
id = "<id>",
info = "<info>",
}
            },
                },
                attributes = new
                {
                    key = new
                    {
                        key = new object(),
                    },
                },
                assignedEntities = new object[]
            {
new
{
guid = "<guid>",
typeName = "<typeName>",
uniqueAttributes = new
{
key = new object(),
},
displayText = "<displayText>",
entityStatus = "ACTIVE",
relationshipType = "<relationshipType>",
relationshipAttributes = new
{
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
},
relationshipGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
relationshipStatus = "ACTIVE",
}
            },
                categories = new object[]
            {
new
{
categoryGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
description = "<description>",
displayText = "<displayText>",
relationGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
status = "DRAFT",
}
            },
                classifies = new object[]
            {
null
            },
                examples = new object[]
            {
"<examples>"
            },
                isA = new object[]
            {
null
            },
                preferredTerms = new object[]
            {
null
            },
                preferredToTerms = new object[]
            {
null
            },
                replacedBy = new object[]
            {
null
            },
                replacementTerms = new object[]
            {
null
            },
                seeAlso = new object[]
            {
null
            },
                synonyms = new object[]
            {
null
            },
                translatedTerms = new object[]
            {
null
            },
                translationTerms = new object[]
            {
null
            },
                usage = "<usage>",
                validValues = new object[]
            {
null
            },
                validValuesFor = new object[]
            {
null
            },
            });
            Response response = await client.CreateTermAsync(content, includeTermHierarchy: true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("abbreviation").ToString());
            Console.WriteLine(result.GetProperty("templateName")[0].ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("nickName").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("itemPath").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
            Console.WriteLine(result.GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("examples")[0].ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_CreateTerm_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            AtlasGlossaryTerm atlasGlossaryTerm = new AtlasGlossaryTerm
            {
                Guid = "<guid>",
                Classifications = {new AtlasClassification
{
Attributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
TypeName = "<typeName>",
LastModifiedTS = "<lastModifiedTS>",
EntityGuid = "<entityGuid>",
EntityStatus = EntityStatus.Active,
RemovePropagationsOnEntityDelete = true,
ValidityPeriods = {new TimeBoundary
{
EndTime = "<endTime>",
StartTime = "<startTime>",
TimeZone = "<timeZone>",
}},
}},
                LongDescription = "<longDescription>",
                Name = "<name>",
                QualifiedName = "<qualifiedName>",
                ShortDescription = "<shortDescription>",
                LastModifiedTS = "<lastModifiedTS>",
                CreateTime = 1234L,
                CreatedBy = "<createdBy>",
                UpdateTime = 1234L,
                UpdatedBy = "<updatedBy>",
                Abbreviation = "<abbreviation>",
                TemplateName = { BinaryData.FromObjectAsJson(new object()) },
                Anchor = new AtlasGlossaryHeader
                {
                    DisplayText = "<displayText>",
                    GlossaryGuid = "<glossaryGuid>",
                    RelationGuid = "<relationGuid>",
                },
                Antonyms = {new AtlasRelatedTermHeader
{
Description = "<description>",
DisplayText = "<displayText>",
Expression = "<expression>",
RelationGuid = "<relationGuid>",
Status = AtlasTermRelationshipStatus.Draft,
Steward = "<steward>",
TermGuid = "<termGuid>",
}},
                Status = TermStatus.Draft,
                NickName = "<nickName>",
                HierarchyInfo = {new PurviewObjectId
{
Guid = "<guid>",
TypeName = "<typeName>",
UniqueAttributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
Name = "<name>",
DisplayText = "<displayText>",
ItemPath = "<itemPath>",
ResourceId = "<resourceId>",
Properties =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
}},
                Resources = {new ResourceLink
{
DisplayName = "<displayName>",
Url = "<url>",
}},
                Contacts =
{
["key"] = {new ContactInfo
{
Id = "<id>",
Info = "<info>",
}}
},
                Attributes =
{
["key"] =
{
["key"] = BinaryData.FromObjectAsJson(new object())
}
},
                AssignedEntities = {new AtlasRelatedObjectId
{
Guid = "<guid>",
TypeName = "<typeName>",
UniqueAttributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
DisplayText = "<displayText>",
EntityStatus = EntityStatus.Active,
RelationshipType = "<relationshipType>",
RelationshipAttributes = new AtlasStruct
{
Attributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
TypeName = "<typeName>",
LastModifiedTS = "<lastModifiedTS>",
},
RelationshipGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
RelationshipStatus = StatusAtlasRelationship.Active,
}},
                Categories = {new AtlasTermCategorizationHeader
{
CategoryGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
Description = "<description>",
DisplayText = "<displayText>",
RelationGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
Status = AtlasTermRelationshipStatus.Draft,
}},
                Classifies = { default },
                Examples = { "<examples>" },
                IsA = { default },
                PreferredTerms = { default },
                PreferredToTerms = { default },
                ReplacedBy = { default },
                ReplacementTerms = { default },
                SeeAlso = { default },
                Synonyms = { default },
                TranslatedTerms = { default },
                TranslationTerms = { default },
                Usage = "<usage>",
                ValidValues = { default },
                ValidValuesFor = { default },
            };
            Response<AtlasGlossaryTerm> response = client.CreateTerm(atlasGlossaryTerm, includeTermHierarchy: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_CreateTerm_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            AtlasGlossaryTerm atlasGlossaryTerm = new AtlasGlossaryTerm
            {
                Guid = "<guid>",
                Classifications = {new AtlasClassification
{
Attributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
TypeName = "<typeName>",
LastModifiedTS = "<lastModifiedTS>",
EntityGuid = "<entityGuid>",
EntityStatus = EntityStatus.Active,
RemovePropagationsOnEntityDelete = true,
ValidityPeriods = {new TimeBoundary
{
EndTime = "<endTime>",
StartTime = "<startTime>",
TimeZone = "<timeZone>",
}},
}},
                LongDescription = "<longDescription>",
                Name = "<name>",
                QualifiedName = "<qualifiedName>",
                ShortDescription = "<shortDescription>",
                LastModifiedTS = "<lastModifiedTS>",
                CreateTime = 1234L,
                CreatedBy = "<createdBy>",
                UpdateTime = 1234L,
                UpdatedBy = "<updatedBy>",
                Abbreviation = "<abbreviation>",
                TemplateName = { BinaryData.FromObjectAsJson(new object()) },
                Anchor = new AtlasGlossaryHeader
                {
                    DisplayText = "<displayText>",
                    GlossaryGuid = "<glossaryGuid>",
                    RelationGuid = "<relationGuid>",
                },
                Antonyms = {new AtlasRelatedTermHeader
{
Description = "<description>",
DisplayText = "<displayText>",
Expression = "<expression>",
RelationGuid = "<relationGuid>",
Status = AtlasTermRelationshipStatus.Draft,
Steward = "<steward>",
TermGuid = "<termGuid>",
}},
                Status = TermStatus.Draft,
                NickName = "<nickName>",
                HierarchyInfo = {new PurviewObjectId
{
Guid = "<guid>",
TypeName = "<typeName>",
UniqueAttributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
Name = "<name>",
DisplayText = "<displayText>",
ItemPath = "<itemPath>",
ResourceId = "<resourceId>",
Properties =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
}},
                Resources = {new ResourceLink
{
DisplayName = "<displayName>",
Url = "<url>",
}},
                Contacts =
{
["key"] = {new ContactInfo
{
Id = "<id>",
Info = "<info>",
}}
},
                Attributes =
{
["key"] =
{
["key"] = BinaryData.FromObjectAsJson(new object())
}
},
                AssignedEntities = {new AtlasRelatedObjectId
{
Guid = "<guid>",
TypeName = "<typeName>",
UniqueAttributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
DisplayText = "<displayText>",
EntityStatus = EntityStatus.Active,
RelationshipType = "<relationshipType>",
RelationshipAttributes = new AtlasStruct
{
Attributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
TypeName = "<typeName>",
LastModifiedTS = "<lastModifiedTS>",
},
RelationshipGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
RelationshipStatus = StatusAtlasRelationship.Active,
}},
                Categories = {new AtlasTermCategorizationHeader
{
CategoryGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
Description = "<description>",
DisplayText = "<displayText>",
RelationGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
Status = AtlasTermRelationshipStatus.Draft,
}},
                Classifies = { default },
                Examples = { "<examples>" },
                IsA = { default },
                PreferredTerms = { default },
                PreferredToTerms = { default },
                ReplacedBy = { default },
                ReplacementTerms = { default },
                SeeAlso = { default },
                Synonyms = { default },
                TranslatedTerms = { default },
                TranslationTerms = { default },
                Usage = "<usage>",
                ValidValues = { default },
                ValidValuesFor = { default },
            };
            Response<AtlasGlossaryTerm> response = await client.CreateTermAsync(atlasGlossaryTerm, includeTermHierarchy: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetTerm_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = client.GetTerm("<termId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetTerm_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = await client.GetTermAsync("<termId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetTerm_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<AtlasGlossaryTerm> response = client.GetTerm("<termId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetTerm_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<AtlasGlossaryTerm> response = await client.GetTermAsync("<termId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetTerm_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            Response response = client.GetTerm("<termId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("abbreviation").ToString());
            Console.WriteLine(result.GetProperty("templateName")[0].ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("nickName").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("itemPath").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
            Console.WriteLine(result.GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("examples")[0].ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetTerm_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            Response response = await client.GetTermAsync("<termId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("abbreviation").ToString());
            Console.WriteLine(result.GetProperty("templateName")[0].ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("nickName").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("itemPath").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
            Console.WriteLine(result.GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("examples")[0].ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetTerm_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            Response<AtlasGlossaryTerm> response = client.GetTerm("<termId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetTerm_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            Response<AtlasGlossaryTerm> response = await client.GetTermAsync("<termId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_UpdateTerm_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdateTerm("<termId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_UpdateTerm_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateTermAsync("<termId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_UpdateTerm_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            AtlasGlossaryTerm atlasGlossaryTerm = new AtlasGlossaryTerm();
            Response<AtlasGlossaryTerm> response = client.UpdateTerm("<termId>", atlasGlossaryTerm);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_UpdateTerm_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            AtlasGlossaryTerm atlasGlossaryTerm = new AtlasGlossaryTerm();
            Response<AtlasGlossaryTerm> response = await client.UpdateTermAsync("<termId>", atlasGlossaryTerm);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_UpdateTerm_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            using RequestContent content = RequestContent.Create(new
            {
                guid = "<guid>",
                classifications = new object[]
            {
new
{
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
entityGuid = "<entityGuid>",
entityStatus = "ACTIVE",
removePropagationsOnEntityDelete = true,
validityPeriods = new object[]
{
new
{
endTime = "<endTime>",
startTime = "<startTime>",
timeZone = "<timeZone>",
}
},
}
            },
                longDescription = "<longDescription>",
                name = "<name>",
                qualifiedName = "<qualifiedName>",
                shortDescription = "<shortDescription>",
                lastModifiedTS = "<lastModifiedTS>",
                createTime = 1234L,
                createdBy = "<createdBy>",
                updateTime = 1234L,
                updatedBy = "<updatedBy>",
                abbreviation = "<abbreviation>",
                templateName = new object[]
            {
new object()
            },
                anchor = new
                {
                    displayText = "<displayText>",
                    glossaryGuid = "<glossaryGuid>",
                    relationGuid = "<relationGuid>",
                },
                antonyms = new object[]
            {
new
{
description = "<description>",
displayText = "<displayText>",
expression = "<expression>",
relationGuid = "<relationGuid>",
status = "DRAFT",
steward = "<steward>",
termGuid = "<termGuid>",
}
            },
                status = "Draft",
                nickName = "<nickName>",
                hierarchyInfo = new object[]
            {
new
{
guid = "<guid>",
typeName = "<typeName>",
uniqueAttributes = new
{
key = new object(),
},
name = "<name>",
displayText = "<displayText>",
itemPath = "<itemPath>",
resourceId = "<resourceId>",
properties = new
{
key = new object(),
},
}
            },
                resources = new object[]
            {
new
{
displayName = "<displayName>",
url = "<url>",
}
            },
                contacts = new
                {
                    key = new object[]
            {
new
{
id = "<id>",
info = "<info>",
}
            },
                },
                attributes = new
                {
                    key = new
                    {
                        key = new object(),
                    },
                },
                assignedEntities = new object[]
            {
new
{
guid = "<guid>",
typeName = "<typeName>",
uniqueAttributes = new
{
key = new object(),
},
displayText = "<displayText>",
entityStatus = "ACTIVE",
relationshipType = "<relationshipType>",
relationshipAttributes = new
{
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
},
relationshipGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
relationshipStatus = "ACTIVE",
}
            },
                categories = new object[]
            {
new
{
categoryGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
description = "<description>",
displayText = "<displayText>",
relationGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
status = "DRAFT",
}
            },
                classifies = new object[]
            {
null
            },
                examples = new object[]
            {
"<examples>"
            },
                isA = new object[]
            {
null
            },
                preferredTerms = new object[]
            {
null
            },
                preferredToTerms = new object[]
            {
null
            },
                replacedBy = new object[]
            {
null
            },
                replacementTerms = new object[]
            {
null
            },
                seeAlso = new object[]
            {
null
            },
                synonyms = new object[]
            {
null
            },
                translatedTerms = new object[]
            {
null
            },
                translationTerms = new object[]
            {
null
            },
                usage = "<usage>",
                validValues = new object[]
            {
null
            },
                validValuesFor = new object[]
            {
null
            },
            });
            Response response = client.UpdateTerm("<termId>", content, includeTermHierarchy: true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("abbreviation").ToString());
            Console.WriteLine(result.GetProperty("templateName")[0].ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("nickName").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("itemPath").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
            Console.WriteLine(result.GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("examples")[0].ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_UpdateTerm_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            using RequestContent content = RequestContent.Create(new
            {
                guid = "<guid>",
                classifications = new object[]
            {
new
{
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
entityGuid = "<entityGuid>",
entityStatus = "ACTIVE",
removePropagationsOnEntityDelete = true,
validityPeriods = new object[]
{
new
{
endTime = "<endTime>",
startTime = "<startTime>",
timeZone = "<timeZone>",
}
},
}
            },
                longDescription = "<longDescription>",
                name = "<name>",
                qualifiedName = "<qualifiedName>",
                shortDescription = "<shortDescription>",
                lastModifiedTS = "<lastModifiedTS>",
                createTime = 1234L,
                createdBy = "<createdBy>",
                updateTime = 1234L,
                updatedBy = "<updatedBy>",
                abbreviation = "<abbreviation>",
                templateName = new object[]
            {
new object()
            },
                anchor = new
                {
                    displayText = "<displayText>",
                    glossaryGuid = "<glossaryGuid>",
                    relationGuid = "<relationGuid>",
                },
                antonyms = new object[]
            {
new
{
description = "<description>",
displayText = "<displayText>",
expression = "<expression>",
relationGuid = "<relationGuid>",
status = "DRAFT",
steward = "<steward>",
termGuid = "<termGuid>",
}
            },
                status = "Draft",
                nickName = "<nickName>",
                hierarchyInfo = new object[]
            {
new
{
guid = "<guid>",
typeName = "<typeName>",
uniqueAttributes = new
{
key = new object(),
},
name = "<name>",
displayText = "<displayText>",
itemPath = "<itemPath>",
resourceId = "<resourceId>",
properties = new
{
key = new object(),
},
}
            },
                resources = new object[]
            {
new
{
displayName = "<displayName>",
url = "<url>",
}
            },
                contacts = new
                {
                    key = new object[]
            {
new
{
id = "<id>",
info = "<info>",
}
            },
                },
                attributes = new
                {
                    key = new
                    {
                        key = new object(),
                    },
                },
                assignedEntities = new object[]
            {
new
{
guid = "<guid>",
typeName = "<typeName>",
uniqueAttributes = new
{
key = new object(),
},
displayText = "<displayText>",
entityStatus = "ACTIVE",
relationshipType = "<relationshipType>",
relationshipAttributes = new
{
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
},
relationshipGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
relationshipStatus = "ACTIVE",
}
            },
                categories = new object[]
            {
new
{
categoryGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
description = "<description>",
displayText = "<displayText>",
relationGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
status = "DRAFT",
}
            },
                classifies = new object[]
            {
null
            },
                examples = new object[]
            {
"<examples>"
            },
                isA = new object[]
            {
null
            },
                preferredTerms = new object[]
            {
null
            },
                preferredToTerms = new object[]
            {
null
            },
                replacedBy = new object[]
            {
null
            },
                replacementTerms = new object[]
            {
null
            },
                seeAlso = new object[]
            {
null
            },
                synonyms = new object[]
            {
null
            },
                translatedTerms = new object[]
            {
null
            },
                translationTerms = new object[]
            {
null
            },
                usage = "<usage>",
                validValues = new object[]
            {
null
            },
                validValuesFor = new object[]
            {
null
            },
            });
            Response response = await client.UpdateTermAsync("<termId>", content, includeTermHierarchy: true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("abbreviation").ToString());
            Console.WriteLine(result.GetProperty("templateName")[0].ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("nickName").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("itemPath").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
            Console.WriteLine(result.GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("examples")[0].ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_UpdateTerm_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            AtlasGlossaryTerm atlasGlossaryTerm = new AtlasGlossaryTerm
            {
                Guid = "<guid>",
                Classifications = {new AtlasClassification
{
Attributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
TypeName = "<typeName>",
LastModifiedTS = "<lastModifiedTS>",
EntityGuid = "<entityGuid>",
EntityStatus = EntityStatus.Active,
RemovePropagationsOnEntityDelete = true,
ValidityPeriods = {new TimeBoundary
{
EndTime = "<endTime>",
StartTime = "<startTime>",
TimeZone = "<timeZone>",
}},
}},
                LongDescription = "<longDescription>",
                Name = "<name>",
                QualifiedName = "<qualifiedName>",
                ShortDescription = "<shortDescription>",
                LastModifiedTS = "<lastModifiedTS>",
                CreateTime = 1234L,
                CreatedBy = "<createdBy>",
                UpdateTime = 1234L,
                UpdatedBy = "<updatedBy>",
                Abbreviation = "<abbreviation>",
                TemplateName = { BinaryData.FromObjectAsJson(new object()) },
                Anchor = new AtlasGlossaryHeader
                {
                    DisplayText = "<displayText>",
                    GlossaryGuid = "<glossaryGuid>",
                    RelationGuid = "<relationGuid>",
                },
                Antonyms = {new AtlasRelatedTermHeader
{
Description = "<description>",
DisplayText = "<displayText>",
Expression = "<expression>",
RelationGuid = "<relationGuid>",
Status = AtlasTermRelationshipStatus.Draft,
Steward = "<steward>",
TermGuid = "<termGuid>",
}},
                Status = TermStatus.Draft,
                NickName = "<nickName>",
                HierarchyInfo = {new PurviewObjectId
{
Guid = "<guid>",
TypeName = "<typeName>",
UniqueAttributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
Name = "<name>",
DisplayText = "<displayText>",
ItemPath = "<itemPath>",
ResourceId = "<resourceId>",
Properties =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
}},
                Resources = {new ResourceLink
{
DisplayName = "<displayName>",
Url = "<url>",
}},
                Contacts =
{
["key"] = {new ContactInfo
{
Id = "<id>",
Info = "<info>",
}}
},
                Attributes =
{
["key"] =
{
["key"] = BinaryData.FromObjectAsJson(new object())
}
},
                AssignedEntities = {new AtlasRelatedObjectId
{
Guid = "<guid>",
TypeName = "<typeName>",
UniqueAttributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
DisplayText = "<displayText>",
EntityStatus = EntityStatus.Active,
RelationshipType = "<relationshipType>",
RelationshipAttributes = new AtlasStruct
{
Attributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
TypeName = "<typeName>",
LastModifiedTS = "<lastModifiedTS>",
},
RelationshipGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
RelationshipStatus = StatusAtlasRelationship.Active,
}},
                Categories = {new AtlasTermCategorizationHeader
{
CategoryGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
Description = "<description>",
DisplayText = "<displayText>",
RelationGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
Status = AtlasTermRelationshipStatus.Draft,
}},
                Classifies = { default },
                Examples = { "<examples>" },
                IsA = { default },
                PreferredTerms = { default },
                PreferredToTerms = { default },
                ReplacedBy = { default },
                ReplacementTerms = { default },
                SeeAlso = { default },
                Synonyms = { default },
                TranslatedTerms = { default },
                TranslationTerms = { default },
                Usage = "<usage>",
                ValidValues = { default },
                ValidValuesFor = { default },
            };
            Response<AtlasGlossaryTerm> response = client.UpdateTerm("<termId>", atlasGlossaryTerm, includeTermHierarchy: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_UpdateTerm_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            AtlasGlossaryTerm atlasGlossaryTerm = new AtlasGlossaryTerm
            {
                Guid = "<guid>",
                Classifications = {new AtlasClassification
{
Attributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
TypeName = "<typeName>",
LastModifiedTS = "<lastModifiedTS>",
EntityGuid = "<entityGuid>",
EntityStatus = EntityStatus.Active,
RemovePropagationsOnEntityDelete = true,
ValidityPeriods = {new TimeBoundary
{
EndTime = "<endTime>",
StartTime = "<startTime>",
TimeZone = "<timeZone>",
}},
}},
                LongDescription = "<longDescription>",
                Name = "<name>",
                QualifiedName = "<qualifiedName>",
                ShortDescription = "<shortDescription>",
                LastModifiedTS = "<lastModifiedTS>",
                CreateTime = 1234L,
                CreatedBy = "<createdBy>",
                UpdateTime = 1234L,
                UpdatedBy = "<updatedBy>",
                Abbreviation = "<abbreviation>",
                TemplateName = { BinaryData.FromObjectAsJson(new object()) },
                Anchor = new AtlasGlossaryHeader
                {
                    DisplayText = "<displayText>",
                    GlossaryGuid = "<glossaryGuid>",
                    RelationGuid = "<relationGuid>",
                },
                Antonyms = {new AtlasRelatedTermHeader
{
Description = "<description>",
DisplayText = "<displayText>",
Expression = "<expression>",
RelationGuid = "<relationGuid>",
Status = AtlasTermRelationshipStatus.Draft,
Steward = "<steward>",
TermGuid = "<termGuid>",
}},
                Status = TermStatus.Draft,
                NickName = "<nickName>",
                HierarchyInfo = {new PurviewObjectId
{
Guid = "<guid>",
TypeName = "<typeName>",
UniqueAttributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
Name = "<name>",
DisplayText = "<displayText>",
ItemPath = "<itemPath>",
ResourceId = "<resourceId>",
Properties =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
}},
                Resources = {new ResourceLink
{
DisplayName = "<displayName>",
Url = "<url>",
}},
                Contacts =
{
["key"] = {new ContactInfo
{
Id = "<id>",
Info = "<info>",
}}
},
                Attributes =
{
["key"] =
{
["key"] = BinaryData.FromObjectAsJson(new object())
}
},
                AssignedEntities = {new AtlasRelatedObjectId
{
Guid = "<guid>",
TypeName = "<typeName>",
UniqueAttributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
DisplayText = "<displayText>",
EntityStatus = EntityStatus.Active,
RelationshipType = "<relationshipType>",
RelationshipAttributes = new AtlasStruct
{
Attributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
TypeName = "<typeName>",
LastModifiedTS = "<lastModifiedTS>",
},
RelationshipGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
RelationshipStatus = StatusAtlasRelationship.Active,
}},
                Categories = {new AtlasTermCategorizationHeader
{
CategoryGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
Description = "<description>",
DisplayText = "<displayText>",
RelationGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
Status = AtlasTermRelationshipStatus.Draft,
}},
                Classifies = { default },
                Examples = { "<examples>" },
                IsA = { default },
                PreferredTerms = { default },
                PreferredToTerms = { default },
                ReplacedBy = { default },
                ReplacementTerms = { default },
                SeeAlso = { default },
                Synonyms = { default },
                TranslatedTerms = { default },
                TranslationTerms = { default },
                Usage = "<usage>",
                ValidValues = { default },
                ValidValuesFor = { default },
            };
            Response<AtlasGlossaryTerm> response = await client.UpdateTermAsync("<termId>", atlasGlossaryTerm, includeTermHierarchy: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_DeleteTerm_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = client.DeleteTerm("<termId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_DeleteTerm_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = await client.DeleteTermAsync("<termId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_DeleteTerm_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = client.DeleteTerm("<termId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_DeleteTerm_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = await client.DeleteTermAsync("<termId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_PartialUpdateTerm_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new
            {
                key = "<body>",
            });
            Response response = client.PartialUpdateTerm("<termId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_PartialUpdateTerm_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new
            {
                key = "<body>",
            });
            Response response = await client.PartialUpdateTermAsync("<termId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_PartialUpdateTerm_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<AtlasGlossaryTerm> response = client.PartialUpdateTerm("<termId>", new Dictionary<string, string>
            {
                ["key"] = "<body>"
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_PartialUpdateTerm_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<AtlasGlossaryTerm> response = await client.PartialUpdateTermAsync("<termId>", new Dictionary<string, string>
            {
                ["key"] = "<body>"
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_PartialUpdateTerm_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            using RequestContent content = RequestContent.Create(new
            {
                key = "<body>",
            });
            Response response = client.PartialUpdateTerm("<termId>", content, includeTermHierarchy: true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("abbreviation").ToString());
            Console.WriteLine(result.GetProperty("templateName")[0].ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("nickName").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("itemPath").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
            Console.WriteLine(result.GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("examples")[0].ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_PartialUpdateTerm_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            using RequestContent content = RequestContent.Create(new
            {
                key = "<body>",
            });
            Response response = await client.PartialUpdateTermAsync("<termId>", content, includeTermHierarchy: true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("abbreviation").ToString());
            Console.WriteLine(result.GetProperty("templateName")[0].ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("nickName").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("itemPath").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("hierarchyInfo")[0].GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
            Console.WriteLine(result.GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("examples")[0].ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_PartialUpdateTerm_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            Response<AtlasGlossaryTerm> response = client.PartialUpdateTerm("<termId>", new Dictionary<string, string>
            {
                ["key"] = "<body>"
            }, includeTermHierarchy: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_PartialUpdateTerm_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            Response<AtlasGlossaryTerm> response = await client.PartialUpdateTermAsync("<termId>", new Dictionary<string, string>
            {
                ["key"] = "<body>"
            }, includeTermHierarchy: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_CreateTerms_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
new object()
            });
            Response response = client.CreateTerms(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_CreateTerms_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
new object()
            });
            Response response = await client.CreateTermsAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_CreateTerms_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<IReadOnlyList<AtlasGlossaryTerm>> response = client.CreateTerms(new AtlasGlossaryTerm[]
            {
new AtlasGlossaryTerm()
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_CreateTerms_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<IReadOnlyList<AtlasGlossaryTerm>> response = await client.CreateTermsAsync(new AtlasGlossaryTerm[]
            {
new AtlasGlossaryTerm()
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_CreateTerms_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            using RequestContent content = RequestContent.Create(new object[]
            {
new
{
guid = "<guid>",
classifications = new object[]
{
new
{
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
entityGuid = "<entityGuid>",
entityStatus = "ACTIVE",
removePropagationsOnEntityDelete = true,
validityPeriods = new object[]
{
new
{
endTime = "<endTime>",
startTime = "<startTime>",
timeZone = "<timeZone>",
}
},
}
},
longDescription = "<longDescription>",
name = "<name>",
qualifiedName = "<qualifiedName>",
shortDescription = "<shortDescription>",
lastModifiedTS = "<lastModifiedTS>",
createTime = 1234L,
createdBy = "<createdBy>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
abbreviation = "<abbreviation>",
templateName = new object[]
{
new object()
},
anchor = new
{
displayText = "<displayText>",
glossaryGuid = "<glossaryGuid>",
relationGuid = "<relationGuid>",
},
antonyms = new object[]
{
new
{
description = "<description>",
displayText = "<displayText>",
expression = "<expression>",
relationGuid = "<relationGuid>",
status = "DRAFT",
steward = "<steward>",
termGuid = "<termGuid>",
}
},
status = "Draft",
nickName = "<nickName>",
hierarchyInfo = new object[]
{
new
{
guid = "<guid>",
typeName = "<typeName>",
uniqueAttributes = new
{
key = new object(),
},
name = "<name>",
displayText = "<displayText>",
itemPath = "<itemPath>",
resourceId = "<resourceId>",
properties = new
{
key = new object(),
},
}
},
resources = new object[]
{
new
{
displayName = "<displayName>",
url = "<url>",
}
},
contacts = new
{
key = new object[]
{
new
{
id = "<id>",
info = "<info>",
}
},
},
attributes = new
{
key = new
{
key = new object(),
},
},
assignedEntities = new object[]
{
new
{
guid = "<guid>",
typeName = "<typeName>",
uniqueAttributes = new
{
key = new object(),
},
displayText = "<displayText>",
entityStatus = "ACTIVE",
relationshipType = "<relationshipType>",
relationshipAttributes = new
{
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
},
relationshipGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
relationshipStatus = "ACTIVE",
}
},
categories = new object[]
{
new
{
categoryGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
description = "<description>",
displayText = "<displayText>",
relationGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
status = "DRAFT",
}
},
classifies = new object[]
{
null
},
examples = new object[]
{
"<examples>"
},
isA = new object[]
{
null
},
preferredTerms = new object[]
{
null
},
preferredToTerms = new object[]
{
null
},
replacedBy = new object[]
{
null
},
replacementTerms = new object[]
{
null
},
seeAlso = new object[]
{
null
},
synonyms = new object[]
{
null
},
translatedTerms = new object[]
{
null
},
translationTerms = new object[]
{
null
},
usage = "<usage>",
validValues = new object[]
{
null
},
validValuesFor = new object[]
{
null
},
}
            });
            Response response = client.CreateTerms(content, includeTermHierarchy: true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("guid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result[0].GetProperty("longDescription").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
            Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
            Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("createTime").ToString());
            Console.WriteLine(result[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result[0].GetProperty("abbreviation").ToString());
            Console.WriteLine(result[0].GetProperty("templateName")[0].ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("nickName").ToString());
            Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("guid").ToString());
            Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("itemPath").ToString());
            Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("resourceId").ToString());
            Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("url").ToString());
            Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
            Console.WriteLine(result[0].GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("examples")[0].ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("usage").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_CreateTerms_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            using RequestContent content = RequestContent.Create(new object[]
            {
new
{
guid = "<guid>",
classifications = new object[]
{
new
{
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
entityGuid = "<entityGuid>",
entityStatus = "ACTIVE",
removePropagationsOnEntityDelete = true,
validityPeriods = new object[]
{
new
{
endTime = "<endTime>",
startTime = "<startTime>",
timeZone = "<timeZone>",
}
},
}
},
longDescription = "<longDescription>",
name = "<name>",
qualifiedName = "<qualifiedName>",
shortDescription = "<shortDescription>",
lastModifiedTS = "<lastModifiedTS>",
createTime = 1234L,
createdBy = "<createdBy>",
updateTime = 1234L,
updatedBy = "<updatedBy>",
abbreviation = "<abbreviation>",
templateName = new object[]
{
new object()
},
anchor = new
{
displayText = "<displayText>",
glossaryGuid = "<glossaryGuid>",
relationGuid = "<relationGuid>",
},
antonyms = new object[]
{
new
{
description = "<description>",
displayText = "<displayText>",
expression = "<expression>",
relationGuid = "<relationGuid>",
status = "DRAFT",
steward = "<steward>",
termGuid = "<termGuid>",
}
},
status = "Draft",
nickName = "<nickName>",
hierarchyInfo = new object[]
{
new
{
guid = "<guid>",
typeName = "<typeName>",
uniqueAttributes = new
{
key = new object(),
},
name = "<name>",
displayText = "<displayText>",
itemPath = "<itemPath>",
resourceId = "<resourceId>",
properties = new
{
key = new object(),
},
}
},
resources = new object[]
{
new
{
displayName = "<displayName>",
url = "<url>",
}
},
contacts = new
{
key = new object[]
{
new
{
id = "<id>",
info = "<info>",
}
},
},
attributes = new
{
key = new
{
key = new object(),
},
},
assignedEntities = new object[]
{
new
{
guid = "<guid>",
typeName = "<typeName>",
uniqueAttributes = new
{
key = new object(),
},
displayText = "<displayText>",
entityStatus = "ACTIVE",
relationshipType = "<relationshipType>",
relationshipAttributes = new
{
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
},
relationshipGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
relationshipStatus = "ACTIVE",
}
},
categories = new object[]
{
new
{
categoryGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
description = "<description>",
displayText = "<displayText>",
relationGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
status = "DRAFT",
}
},
classifies = new object[]
{
null
},
examples = new object[]
{
"<examples>"
},
isA = new object[]
{
null
},
preferredTerms = new object[]
{
null
},
preferredToTerms = new object[]
{
null
},
replacedBy = new object[]
{
null
},
replacementTerms = new object[]
{
null
},
seeAlso = new object[]
{
null
},
synonyms = new object[]
{
null
},
translatedTerms = new object[]
{
null
},
translationTerms = new object[]
{
null
},
usage = "<usage>",
validValues = new object[]
{
null
},
validValuesFor = new object[]
{
null
},
}
            });
            Response response = await client.CreateTermsAsync(content, includeTermHierarchy: true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("guid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result[0].GetProperty("longDescription").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
            Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
            Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("createTime").ToString());
            Console.WriteLine(result[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result[0].GetProperty("abbreviation").ToString());
            Console.WriteLine(result[0].GetProperty("templateName")[0].ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("nickName").ToString());
            Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("guid").ToString());
            Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("itemPath").ToString());
            Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("resourceId").ToString());
            Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("url").ToString());
            Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
            Console.WriteLine(result[0].GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("examples")[0].ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("usage").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_CreateTerms_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            Response<IReadOnlyList<AtlasGlossaryTerm>> response = client.CreateTerms(new AtlasGlossaryTerm[]
            {
new AtlasGlossaryTerm
{
Guid = "<guid>",
Classifications = {new AtlasClassification
{
Attributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
TypeName = "<typeName>",
LastModifiedTS = "<lastModifiedTS>",
EntityGuid = "<entityGuid>",
EntityStatus = EntityStatus.Active,
RemovePropagationsOnEntityDelete = true,
ValidityPeriods = {new TimeBoundary
{
EndTime = "<endTime>",
StartTime = "<startTime>",
TimeZone = "<timeZone>",
}},
}},
LongDescription = "<longDescription>",
Name = "<name>",
QualifiedName = "<qualifiedName>",
ShortDescription = "<shortDescription>",
LastModifiedTS = "<lastModifiedTS>",
CreateTime = 1234L,
CreatedBy = "<createdBy>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Abbreviation = "<abbreviation>",
TemplateName = {BinaryData.FromObjectAsJson(new object())},
Anchor = new AtlasGlossaryHeader
{
DisplayText = "<displayText>",
GlossaryGuid = "<glossaryGuid>",
RelationGuid = "<relationGuid>",
},
Antonyms = {new AtlasRelatedTermHeader
{
Description = "<description>",
DisplayText = "<displayText>",
Expression = "<expression>",
RelationGuid = "<relationGuid>",
Status = AtlasTermRelationshipStatus.Draft,
Steward = "<steward>",
TermGuid = "<termGuid>",
}},
Status = TermStatus.Draft,
NickName = "<nickName>",
HierarchyInfo = {new PurviewObjectId
{
Guid = "<guid>",
TypeName = "<typeName>",
UniqueAttributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
Name = "<name>",
DisplayText = "<displayText>",
ItemPath = "<itemPath>",
ResourceId = "<resourceId>",
Properties =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
}},
Resources = {new ResourceLink
{
DisplayName = "<displayName>",
Url = "<url>",
}},
Contacts =
{
["key"] = {new ContactInfo
{
Id = "<id>",
Info = "<info>",
}}
},
Attributes =
{
["key"] =
{
["key"] = BinaryData.FromObjectAsJson(new object())
}
},
AssignedEntities = {new AtlasRelatedObjectId
{
Guid = "<guid>",
TypeName = "<typeName>",
UniqueAttributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
DisplayText = "<displayText>",
EntityStatus = EntityStatus.Active,
RelationshipType = "<relationshipType>",
RelationshipAttributes = new AtlasStruct
{
Attributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
TypeName = "<typeName>",
LastModifiedTS = "<lastModifiedTS>",
},
RelationshipGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
RelationshipStatus = StatusAtlasRelationship.Active,
}},
Categories = {new AtlasTermCategorizationHeader
{
CategoryGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
Description = "<description>",
DisplayText = "<displayText>",
RelationGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
Status = AtlasTermRelationshipStatus.Draft,
}},
Classifies = {default},
Examples = {"<examples>"},
IsA = {default},
PreferredTerms = {default},
PreferredToTerms = {default},
ReplacedBy = {default},
ReplacementTerms = {default},
SeeAlso = {default},
Synonyms = {default},
TranslatedTerms = {default},
TranslationTerms = {default},
Usage = "<usage>",
ValidValues = {default},
ValidValuesFor = {default},
}
            }, includeTermHierarchy: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_CreateTerms_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            Response<IReadOnlyList<AtlasGlossaryTerm>> response = await client.CreateTermsAsync(new AtlasGlossaryTerm[]
            {
new AtlasGlossaryTerm
{
Guid = "<guid>",
Classifications = {new AtlasClassification
{
Attributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
TypeName = "<typeName>",
LastModifiedTS = "<lastModifiedTS>",
EntityGuid = "<entityGuid>",
EntityStatus = EntityStatus.Active,
RemovePropagationsOnEntityDelete = true,
ValidityPeriods = {new TimeBoundary
{
EndTime = "<endTime>",
StartTime = "<startTime>",
TimeZone = "<timeZone>",
}},
}},
LongDescription = "<longDescription>",
Name = "<name>",
QualifiedName = "<qualifiedName>",
ShortDescription = "<shortDescription>",
LastModifiedTS = "<lastModifiedTS>",
CreateTime = 1234L,
CreatedBy = "<createdBy>",
UpdateTime = 1234L,
UpdatedBy = "<updatedBy>",
Abbreviation = "<abbreviation>",
TemplateName = {BinaryData.FromObjectAsJson(new object())},
Anchor = new AtlasGlossaryHeader
{
DisplayText = "<displayText>",
GlossaryGuid = "<glossaryGuid>",
RelationGuid = "<relationGuid>",
},
Antonyms = {new AtlasRelatedTermHeader
{
Description = "<description>",
DisplayText = "<displayText>",
Expression = "<expression>",
RelationGuid = "<relationGuid>",
Status = AtlasTermRelationshipStatus.Draft,
Steward = "<steward>",
TermGuid = "<termGuid>",
}},
Status = TermStatus.Draft,
NickName = "<nickName>",
HierarchyInfo = {new PurviewObjectId
{
Guid = "<guid>",
TypeName = "<typeName>",
UniqueAttributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
Name = "<name>",
DisplayText = "<displayText>",
ItemPath = "<itemPath>",
ResourceId = "<resourceId>",
Properties =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
}},
Resources = {new ResourceLink
{
DisplayName = "<displayName>",
Url = "<url>",
}},
Contacts =
{
["key"] = {new ContactInfo
{
Id = "<id>",
Info = "<info>",
}}
},
Attributes =
{
["key"] =
{
["key"] = BinaryData.FromObjectAsJson(new object())
}
},
AssignedEntities = {new AtlasRelatedObjectId
{
Guid = "<guid>",
TypeName = "<typeName>",
UniqueAttributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
DisplayText = "<displayText>",
EntityStatus = EntityStatus.Active,
RelationshipType = "<relationshipType>",
RelationshipAttributes = new AtlasStruct
{
Attributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
TypeName = "<typeName>",
LastModifiedTS = "<lastModifiedTS>",
},
RelationshipGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
RelationshipStatus = StatusAtlasRelationship.Active,
}},
Categories = {new AtlasTermCategorizationHeader
{
CategoryGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
Description = "<description>",
DisplayText = "<displayText>",
RelationGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
Status = AtlasTermRelationshipStatus.Draft,
}},
Classifies = {default},
Examples = {"<examples>"},
IsA = {default},
PreferredTerms = {default},
PreferredToTerms = {default},
ReplacedBy = {default},
ReplacementTerms = {default},
SeeAlso = {default},
Synonyms = {default},
TranslatedTerms = {default},
TranslationTerms = {default},
Usage = "<usage>",
ValidValues = {default},
ValidValuesFor = {default},
}
            }, includeTermHierarchy: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetEntitiesAssignedWithTerm_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = client.GetEntitiesAssignedWithTerm("<termId>", null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetEntitiesAssignedWithTerm_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = await client.GetEntitiesAssignedWithTermAsync("<termId>", null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetEntitiesAssignedWithTerm_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<IReadOnlyList<AtlasRelatedObjectId>> response = client.GetEntitiesAssignedWithTerm("<termId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetEntitiesAssignedWithTerm_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<IReadOnlyList<AtlasRelatedObjectId>> response = await client.GetEntitiesAssignedWithTermAsync("<termId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetEntitiesAssignedWithTerm_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = client.GetEntitiesAssignedWithTerm("<termId>", 1234, 1234, "<sort>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("guid").ToString());
            Console.WriteLine(result[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result[0].GetProperty("relationshipType").ToString());
            Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("relationshipGuid").ToString());
            Console.WriteLine(result[0].GetProperty("relationshipStatus").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetEntitiesAssignedWithTerm_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = await client.GetEntitiesAssignedWithTermAsync("<termId>", 1234, 1234, "<sort>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("guid").ToString());
            Console.WriteLine(result[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result[0].GetProperty("relationshipType").ToString());
            Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("relationshipGuid").ToString());
            Console.WriteLine(result[0].GetProperty("relationshipStatus").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetEntitiesAssignedWithTerm_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<IReadOnlyList<AtlasRelatedObjectId>> response = client.GetEntitiesAssignedWithTerm("<termId>", limit: 1234, offset: 1234, sort: "<sort>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetEntitiesAssignedWithTerm_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<IReadOnlyList<AtlasRelatedObjectId>> response = await client.GetEntitiesAssignedWithTermAsync("<termId>", limit: 1234, offset: 1234, sort: "<sort>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_AssignTermToEntities_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
new object()
            });
            Response response = client.AssignTermToEntities("<termId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_AssignTermToEntities_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
new object()
            });
            Response response = await client.AssignTermToEntitiesAsync("<termId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_AssignTermToEntities_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = client.AssignTermToEntities("<termId>", new AtlasRelatedObjectId[]
            {
new AtlasRelatedObjectId()
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_AssignTermToEntities_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = await client.AssignTermToEntitiesAsync("<termId>", new AtlasRelatedObjectId[]
            {
new AtlasRelatedObjectId()
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_AssignTermToEntities_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
new
{
guid = "<guid>",
typeName = "<typeName>",
uniqueAttributes = new
{
key = new object(),
},
displayText = "<displayText>",
entityStatus = "ACTIVE",
relationshipType = "<relationshipType>",
relationshipAttributes = new
{
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
},
relationshipGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
relationshipStatus = "ACTIVE",
}
            });
            Response response = client.AssignTermToEntities("<termId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_AssignTermToEntities_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
new
{
guid = "<guid>",
typeName = "<typeName>",
uniqueAttributes = new
{
key = new object(),
},
displayText = "<displayText>",
entityStatus = "ACTIVE",
relationshipType = "<relationshipType>",
relationshipAttributes = new
{
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
},
relationshipGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
relationshipStatus = "ACTIVE",
}
            });
            Response response = await client.AssignTermToEntitiesAsync("<termId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_AssignTermToEntities_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = client.AssignTermToEntities("<termId>", new AtlasRelatedObjectId[]
            {
new AtlasRelatedObjectId
{
Guid = "<guid>",
TypeName = "<typeName>",
UniqueAttributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
DisplayText = "<displayText>",
EntityStatus = EntityStatus.Active,
RelationshipType = "<relationshipType>",
RelationshipAttributes = new AtlasStruct
{
Attributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
TypeName = "<typeName>",
LastModifiedTS = "<lastModifiedTS>",
},
RelationshipGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
RelationshipStatus = StatusAtlasRelationship.Active,
}
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_AssignTermToEntities_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = await client.AssignTermToEntitiesAsync("<termId>", new AtlasRelatedObjectId[]
            {
new AtlasRelatedObjectId
{
Guid = "<guid>",
TypeName = "<typeName>",
UniqueAttributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
DisplayText = "<displayText>",
EntityStatus = EntityStatus.Active,
RelationshipType = "<relationshipType>",
RelationshipAttributes = new AtlasStruct
{
Attributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
TypeName = "<typeName>",
LastModifiedTS = "<lastModifiedTS>",
},
RelationshipGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
RelationshipStatus = StatusAtlasRelationship.Active,
}
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_DeleteTermAssignmentFromEntities_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
new object()
            });
            Response response = client.DeleteTermAssignmentFromEntities("<termId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_DeleteTermAssignmentFromEntities_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
new object()
            });
            Response response = await client.DeleteTermAssignmentFromEntitiesAsync("<termId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_DeleteTermAssignmentFromEntities_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = client.DeleteTermAssignmentFromEntities("<termId>", new AtlasRelatedObjectId[]
            {
new AtlasRelatedObjectId()
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_DeleteTermAssignmentFromEntities_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = await client.DeleteTermAssignmentFromEntitiesAsync("<termId>", new AtlasRelatedObjectId[]
            {
new AtlasRelatedObjectId()
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_DeleteTermAssignmentFromEntities_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
new
{
guid = "<guid>",
typeName = "<typeName>",
uniqueAttributes = new
{
key = new object(),
},
displayText = "<displayText>",
entityStatus = "ACTIVE",
relationshipType = "<relationshipType>",
relationshipAttributes = new
{
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
},
relationshipGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
relationshipStatus = "ACTIVE",
}
            });
            Response response = client.DeleteTermAssignmentFromEntities("<termId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_DeleteTermAssignmentFromEntities_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
new
{
guid = "<guid>",
typeName = "<typeName>",
uniqueAttributes = new
{
key = new object(),
},
displayText = "<displayText>",
entityStatus = "ACTIVE",
relationshipType = "<relationshipType>",
relationshipAttributes = new
{
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
},
relationshipGuid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
relationshipStatus = "ACTIVE",
}
            });
            Response response = await client.DeleteTermAssignmentFromEntitiesAsync("<termId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_DeleteTermAssignmentFromEntities_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = client.DeleteTermAssignmentFromEntities("<termId>", new AtlasRelatedObjectId[]
            {
new AtlasRelatedObjectId
{
Guid = "<guid>",
TypeName = "<typeName>",
UniqueAttributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
DisplayText = "<displayText>",
EntityStatus = EntityStatus.Active,
RelationshipType = "<relationshipType>",
RelationshipAttributes = new AtlasStruct
{
Attributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
TypeName = "<typeName>",
LastModifiedTS = "<lastModifiedTS>",
},
RelationshipGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
RelationshipStatus = StatusAtlasRelationship.Active,
}
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_DeleteTermAssignmentFromEntities_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = await client.DeleteTermAssignmentFromEntitiesAsync("<termId>", new AtlasRelatedObjectId[]
            {
new AtlasRelatedObjectId
{
Guid = "<guid>",
TypeName = "<typeName>",
UniqueAttributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
DisplayText = "<displayText>",
EntityStatus = EntityStatus.Active,
RelationshipType = "<relationshipType>",
RelationshipAttributes = new AtlasStruct
{
Attributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
TypeName = "<typeName>",
LastModifiedTS = "<lastModifiedTS>",
},
RelationshipGuid = Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"),
RelationshipStatus = StatusAtlasRelationship.Active,
}
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetRelatedTerms_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = client.GetRelatedTerms("<termId>", null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("<key>")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetRelatedTerms_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = await client.GetRelatedTermsAsync("<termId>", null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("<key>")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetRelatedTerms_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<IReadOnlyDictionary<string, IList<AtlasRelatedTermHeader>>> response = client.GetRelatedTerms("<termId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetRelatedTerms_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<IReadOnlyDictionary<string, IList<AtlasRelatedTermHeader>>> response = await client.GetRelatedTermsAsync("<termId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetRelatedTerms_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            Response response = client.GetRelatedTerms("<termId>", 1234, 1234, "<sort>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("termGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetRelatedTerms_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            Response response = await client.GetRelatedTermsAsync("<termId>", 1234, 1234, "<sort>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("termGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetRelatedTerms_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            Response<IReadOnlyDictionary<string, IList<AtlasRelatedTermHeader>>> response = client.GetRelatedTerms("<termId>", limit: 1234, offset: 1234, sort: "<sort>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetRelatedTerms_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            Response<IReadOnlyDictionary<string, IList<AtlasRelatedTermHeader>>> response = await client.GetRelatedTermsAsync("<termId>", limit: 1234, offset: 1234, sort: "<sort>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetGlossary_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = client.GetGlossary("<glossaryId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetGlossary_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = await client.GetGlossaryAsync("<glossaryId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetGlossary_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<AtlasGlossary> response = client.GetGlossary("<glossaryId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetGlossary_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<AtlasGlossary> response = await client.GetGlossaryAsync("<glossaryId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetGlossary_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = client.GetGlossary("<glossaryId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("usage").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetGlossary_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = await client.GetGlossaryAsync("<glossaryId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("usage").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetGlossary_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<AtlasGlossary> response = client.GetGlossary("<glossaryId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetGlossary_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<AtlasGlossary> response = await client.GetGlossaryAsync("<glossaryId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_Update_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.Update("<glossaryId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_Update_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateAsync("<glossaryId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_Update_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            AtlasGlossary atlasGlossary = new AtlasGlossary();
            Response<AtlasGlossary> response = client.Update("<glossaryId>", atlasGlossary);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_Update_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            AtlasGlossary atlasGlossary = new AtlasGlossary();
            Response<AtlasGlossary> response = await client.UpdateAsync("<glossaryId>", atlasGlossary);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_Update_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            using RequestContent content = RequestContent.Create(new
            {
                guid = "<guid>",
                classifications = new object[]
            {
new
{
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
entityGuid = "<entityGuid>",
entityStatus = "ACTIVE",
removePropagationsOnEntityDelete = true,
validityPeriods = new object[]
{
new
{
endTime = "<endTime>",
startTime = "<startTime>",
timeZone = "<timeZone>",
}
},
}
            },
                longDescription = "<longDescription>",
                name = "<name>",
                qualifiedName = "<qualifiedName>",
                shortDescription = "<shortDescription>",
                lastModifiedTS = "<lastModifiedTS>",
                createTime = 1234L,
                createdBy = "<createdBy>",
                updateTime = 1234L,
                updatedBy = "<updatedBy>",
                categories = new object[]
            {
new
{
categoryGuid = "<categoryGuid>",
description = "<description>",
displayText = "<displayText>",
parentCategoryGuid = "<parentCategoryGuid>",
relationGuid = "<relationGuid>",
}
            },
                language = "<language>",
                terms = new object[]
            {
new
{
description = "<description>",
displayText = "<displayText>",
expression = "<expression>",
relationGuid = "<relationGuid>",
status = "DRAFT",
steward = "<steward>",
termGuid = "<termGuid>",
}
            },
                usage = "<usage>",
            });
            Response response = client.Update("<glossaryId>", content, ignoreTermsAndCategories: true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("usage").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_Update_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            using RequestContent content = RequestContent.Create(new
            {
                guid = "<guid>",
                classifications = new object[]
            {
new
{
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
entityGuid = "<entityGuid>",
entityStatus = "ACTIVE",
removePropagationsOnEntityDelete = true,
validityPeriods = new object[]
{
new
{
endTime = "<endTime>",
startTime = "<startTime>",
timeZone = "<timeZone>",
}
},
}
            },
                longDescription = "<longDescription>",
                name = "<name>",
                qualifiedName = "<qualifiedName>",
                shortDescription = "<shortDescription>",
                lastModifiedTS = "<lastModifiedTS>",
                createTime = 1234L,
                createdBy = "<createdBy>",
                updateTime = 1234L,
                updatedBy = "<updatedBy>",
                categories = new object[]
            {
new
{
categoryGuid = "<categoryGuid>",
description = "<description>",
displayText = "<displayText>",
parentCategoryGuid = "<parentCategoryGuid>",
relationGuid = "<relationGuid>",
}
            },
                language = "<language>",
                terms = new object[]
            {
new
{
description = "<description>",
displayText = "<displayText>",
expression = "<expression>",
relationGuid = "<relationGuid>",
status = "DRAFT",
steward = "<steward>",
termGuid = "<termGuid>",
}
            },
                usage = "<usage>",
            });
            Response response = await client.UpdateAsync("<glossaryId>", content, ignoreTermsAndCategories: true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("usage").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_Update_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            AtlasGlossary atlasGlossary = new AtlasGlossary
            {
                Guid = "<guid>",
                Classifications = {new AtlasClassification
{
Attributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
TypeName = "<typeName>",
LastModifiedTS = "<lastModifiedTS>",
EntityGuid = "<entityGuid>",
EntityStatus = EntityStatus.Active,
RemovePropagationsOnEntityDelete = true,
ValidityPeriods = {new TimeBoundary
{
EndTime = "<endTime>",
StartTime = "<startTime>",
TimeZone = "<timeZone>",
}},
}},
                LongDescription = "<longDescription>",
                Name = "<name>",
                QualifiedName = "<qualifiedName>",
                ShortDescription = "<shortDescription>",
                LastModifiedTS = "<lastModifiedTS>",
                CreateTime = 1234L,
                CreatedBy = "<createdBy>",
                UpdateTime = 1234L,
                UpdatedBy = "<updatedBy>",
                Categories = {new AtlasRelatedCategoryHeader
{
CategoryGuid = "<categoryGuid>",
Description = "<description>",
DisplayText = "<displayText>",
ParentCategoryGuid = "<parentCategoryGuid>",
RelationGuid = "<relationGuid>",
}},
                Language = "<language>",
                Terms = {new AtlasRelatedTermHeader
{
Description = "<description>",
DisplayText = "<displayText>",
Expression = "<expression>",
RelationGuid = "<relationGuid>",
Status = AtlasTermRelationshipStatus.Draft,
Steward = "<steward>",
TermGuid = "<termGuid>",
}},
                Usage = "<usage>",
            };
            Response<AtlasGlossary> response = client.Update("<glossaryId>", atlasGlossary, ignoreTermsAndCategories: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_Update_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            AtlasGlossary atlasGlossary = new AtlasGlossary
            {
                Guid = "<guid>",
                Classifications = {new AtlasClassification
{
Attributes =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
TypeName = "<typeName>",
LastModifiedTS = "<lastModifiedTS>",
EntityGuid = "<entityGuid>",
EntityStatus = EntityStatus.Active,
RemovePropagationsOnEntityDelete = true,
ValidityPeriods = {new TimeBoundary
{
EndTime = "<endTime>",
StartTime = "<startTime>",
TimeZone = "<timeZone>",
}},
}},
                LongDescription = "<longDescription>",
                Name = "<name>",
                QualifiedName = "<qualifiedName>",
                ShortDescription = "<shortDescription>",
                LastModifiedTS = "<lastModifiedTS>",
                CreateTime = 1234L,
                CreatedBy = "<createdBy>",
                UpdateTime = 1234L,
                UpdatedBy = "<updatedBy>",
                Categories = {new AtlasRelatedCategoryHeader
{
CategoryGuid = "<categoryGuid>",
Description = "<description>",
DisplayText = "<displayText>",
ParentCategoryGuid = "<parentCategoryGuid>",
RelationGuid = "<relationGuid>",
}},
                Language = "<language>",
                Terms = {new AtlasRelatedTermHeader
{
Description = "<description>",
DisplayText = "<displayText>",
Expression = "<expression>",
RelationGuid = "<relationGuid>",
Status = AtlasTermRelationshipStatus.Draft,
Steward = "<steward>",
TermGuid = "<termGuid>",
}},
                Usage = "<usage>",
            };
            Response<AtlasGlossary> response = await client.UpdateAsync("<glossaryId>", atlasGlossary, ignoreTermsAndCategories: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_Delete_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = client.Delete("<glossaryId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_Delete_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = await client.DeleteAsync("<glossaryId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_Delete_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = client.Delete("<glossaryId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_Delete_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = await client.DeleteAsync("<glossaryId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetCategories_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = client.GetCategories("<glossaryId>", null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetCategories_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = await client.GetCategoriesAsync("<glossaryId>", null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetCategories_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<IReadOnlyList<AtlasGlossaryCategory>> response = client.GetCategories("<glossaryId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetCategories_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<IReadOnlyList<AtlasGlossaryCategory>> response = await client.GetCategoriesAsync("<glossaryId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetCategories_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = client.GetCategories("<glossaryId>", 1234, 1234, "<sort>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("guid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result[0].GetProperty("longDescription").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
            Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
            Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("createTime").ToString());
            Console.WriteLine(result[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetCategories_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = await client.GetCategoriesAsync("<glossaryId>", 1234, 1234, "<sort>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("guid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result[0].GetProperty("longDescription").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
            Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
            Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("createTime").ToString());
            Console.WriteLine(result[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetCategories_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<IReadOnlyList<AtlasGlossaryCategory>> response = client.GetCategories("<glossaryId>", limit: 1234, offset: 1234, sort: "<sort>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetCategories_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<IReadOnlyList<AtlasGlossaryCategory>> response = await client.GetCategoriesAsync("<glossaryId>", limit: 1234, offset: 1234, sort: "<sort>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetCategoriesHeaders_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = client.GetCategoriesHeaders("<glossaryId>", null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetCategoriesHeaders_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = await client.GetCategoriesHeadersAsync("<glossaryId>", null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetCategoriesHeaders_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<IReadOnlyList<AtlasRelatedCategoryHeader>> response = client.GetCategoriesHeaders("<glossaryId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetCategoriesHeaders_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<IReadOnlyList<AtlasRelatedCategoryHeader>> response = await client.GetCategoriesHeadersAsync("<glossaryId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetCategoriesHeaders_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = client.GetCategoriesHeaders("<glossaryId>", 1234, 1234, "<sort>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetCategoriesHeaders_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = await client.GetCategoriesHeadersAsync("<glossaryId>", 1234, 1234, "<sort>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetCategoriesHeaders_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<IReadOnlyList<AtlasRelatedCategoryHeader>> response = client.GetCategoriesHeaders("<glossaryId>", limit: 1234, offset: 1234, sort: "<sort>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetCategoriesHeaders_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<IReadOnlyList<AtlasRelatedCategoryHeader>> response = await client.GetCategoriesHeadersAsync("<glossaryId>", limit: 1234, offset: 1234, sort: "<sort>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetDetailed_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = client.GetDetailed("<glossaryId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetDetailed_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = await client.GetDetailedAsync("<glossaryId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetDetailed_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<AtlasGlossaryExtInfo> response = client.GetDetailed("<glossaryId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetDetailed_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<AtlasGlossaryExtInfo> response = await client.GetDetailedAsync("<glossaryId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetDetailed_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            Response response = client.GetDetailed("<glossaryId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("abbreviation").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("templateName")[0].ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("nickName").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("hierarchyInfo")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("hierarchyInfo")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("hierarchyInfo")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("hierarchyInfo")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("hierarchyInfo")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("hierarchyInfo")[0].GetProperty("itemPath").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("hierarchyInfo")[0].GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("hierarchyInfo")[0].GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("resources")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("resources")[0].GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("examples")[0].ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetDetailed_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            Response response = await client.GetDetailedAsync("<glossaryId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("abbreviation").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("templateName")[0].ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("nickName").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("hierarchyInfo")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("hierarchyInfo")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("hierarchyInfo")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("hierarchyInfo")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("hierarchyInfo")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("hierarchyInfo")[0].GetProperty("itemPath").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("hierarchyInfo")[0].GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("hierarchyInfo")[0].GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("resources")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("resources")[0].GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("examples")[0].ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetDetailed_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            Response<AtlasGlossaryExtInfo> response = client.GetDetailed("<glossaryId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetDetailed_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            Response<AtlasGlossaryExtInfo> response = await client.GetDetailedAsync("<glossaryId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_PartialUpdate_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new
            {
                key = "<body>",
            });
            Response response = client.PartialUpdate("<glossaryId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_PartialUpdate_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            using RequestContent content = RequestContent.Create(new
            {
                key = "<body>",
            });
            Response response = await client.PartialUpdateAsync("<glossaryId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_PartialUpdate_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<AtlasGlossary> response = client.PartialUpdate("<glossaryId>", new Dictionary<string, string>
            {
                ["key"] = "<body>"
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_PartialUpdate_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<AtlasGlossary> response = await client.PartialUpdateAsync("<glossaryId>", new Dictionary<string, string>
            {
                ["key"] = "<body>"
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_PartialUpdate_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            using RequestContent content = RequestContent.Create(new
            {
                key = "<body>",
            });
            Response response = client.PartialUpdate("<glossaryId>", content, ignoreTermsAndCategories: true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("usage").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_PartialUpdate_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            using RequestContent content = RequestContent.Create(new
            {
                key = "<body>",
            });
            Response response = await client.PartialUpdateAsync("<glossaryId>", content, ignoreTermsAndCategories: true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("usage").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_PartialUpdate_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            Response<AtlasGlossary> response = client.PartialUpdate("<glossaryId>", new Dictionary<string, string>
            {
                ["key"] = "<body>"
            }, ignoreTermsAndCategories: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_PartialUpdate_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            Response<AtlasGlossary> response = await client.PartialUpdateAsync("<glossaryId>", new Dictionary<string, string>
            {
                ["key"] = "<body>"
            }, ignoreTermsAndCategories: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetTerms_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = client.GetTerms("<glossaryId>", null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetTerms_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = await client.GetTermsAsync("<glossaryId>", null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetTerms_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<IReadOnlyList<AtlasGlossaryTerm>> response = client.GetTerms("<glossaryId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetTerms_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<IReadOnlyList<AtlasGlossaryTerm>> response = await client.GetTermsAsync("<glossaryId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetTerms_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            Response response = client.GetTerms("<glossaryId>", 1234, 1234, "<sort>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("guid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result[0].GetProperty("longDescription").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
            Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
            Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("createTime").ToString());
            Console.WriteLine(result[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result[0].GetProperty("abbreviation").ToString());
            Console.WriteLine(result[0].GetProperty("templateName")[0].ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("nickName").ToString());
            Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("guid").ToString());
            Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("itemPath").ToString());
            Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("resourceId").ToString());
            Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("url").ToString());
            Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
            Console.WriteLine(result[0].GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("examples")[0].ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("usage").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetTerms_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            Response response = await client.GetTermsAsync("<glossaryId>", 1234, 1234, "<sort>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("guid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result[0].GetProperty("longDescription").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
            Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
            Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("createTime").ToString());
            Console.WriteLine(result[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result[0].GetProperty("abbreviation").ToString());
            Console.WriteLine(result[0].GetProperty("templateName")[0].ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("nickName").ToString());
            Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("guid").ToString());
            Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("itemPath").ToString());
            Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("resourceId").ToString());
            Console.WriteLine(result[0].GetProperty("hierarchyInfo")[0].GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("url").ToString());
            Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
            Console.WriteLine(result[0].GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("examples")[0].ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("usage").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetTerms_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            Response<IReadOnlyList<AtlasGlossaryTerm>> response = client.GetTerms("<glossaryId>", limit: 1234, offset: 1234, sort: "<sort>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetTerms_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient(apiVersion: "2023-09-01");

            Response<IReadOnlyList<AtlasGlossaryTerm>> response = await client.GetTermsAsync("<glossaryId>", limit: 1234, offset: 1234, sort: "<sort>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetTermHeaders_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = client.GetTermHeaders("<glossaryId>", null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetTermHeaders_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = await client.GetTermHeadersAsync("<glossaryId>", null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetTermHeaders_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<IReadOnlyList<AtlasRelatedTermHeader>> response = client.GetTermHeaders("<glossaryId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetTermHeaders_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<IReadOnlyList<AtlasRelatedTermHeader>> response = await client.GetTermHeadersAsync("<glossaryId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetTermHeaders_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = client.GetTermHeaders("<glossaryId>", 1234, 1234, "<sort>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("termGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetTermHeaders_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response response = await client.GetTermHeadersAsync("<glossaryId>", 1234, 1234, "<sort>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("termGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Glossary_GetTermHeaders_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<IReadOnlyList<AtlasRelatedTermHeader>> response = client.GetTermHeaders("<glossaryId>", limit: 1234, offset: 1234, sort: "<sort>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Glossary_GetTermHeaders_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

            Response<IReadOnlyList<AtlasRelatedTermHeader>> response = await client.GetTermHeadersAsync("<glossaryId>", limit: 1234, offset: 1234, sort: "<sort>");
        }
    }
}
