// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

#pragma warning disable AZC0007

namespace Azure.Data.Purview.Catalog
{
    /// <summary> The TypesRest service client. </summary>
    public partial class TypesRestClient
    {
        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get; }
        private readonly string[] AuthorizationScopes = { "https://purview.azure.net/.default" };
        private Uri endpoint;
        private readonly string apiVersion;

        /// <summary> Initializes a new instance of TypesRestClient for mocking. </summary>
        protected TypesRestClient()
        {
        }

        /// <summary> Initializes a new instance of TypesRestClient. </summary>
        /// <param name="endpoint"> The catalog endpoint of your Purview account. Example: https://{accountName}.catalog.purview.azure.com. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public TypesRestClient(Uri endpoint, TokenCredential credential, CatalogClientOptions options = null)
        {
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }

            options ??= new CatalogClientOptions();
            Pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, AuthorizationScopes));
            this.endpoint = endpoint;
            apiVersion = options.Version;
        }

        /// <summary> Get the classification definition for the given GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the classification. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetClassificationDefByGuidAsync(string guid, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetClassificationDefByGuidRequest(guid);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get the classification definition for the given GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the classification. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetClassificationDefByGuid(string guid, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetClassificationDefByGuidRequest(guid);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetClassificationDefByGuid"/> and <see cref="GetClassificationDefByGuidAsync"/> operations. </summary>
        /// <param name="guid"> The globally unique identifier of the classification. </param>
        private Request CreateGetClassificationDefByGuidRequest(string guid)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/types/classificationdef/guid/", false);
            uri.AppendPath(guid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return request;
        }

        /// <summary> Get the classification definition by its name (unique). </summary>
        /// <param name="name"> The name of the classification. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetClassificationDefByNameAsync(string name, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetClassificationDefByNameRequest(name);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get the classification definition by its name (unique). </summary>
        /// <param name="name"> The name of the classification. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetClassificationDefByName(string name, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetClassificationDefByNameRequest(name);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetClassificationDefByName"/> and <see cref="GetClassificationDefByNameAsync"/> operations. </summary>
        /// <param name="name"> The name of the classification. </param>
        private Request CreateGetClassificationDefByNameRequest(string name)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/types/classificationdef/name/", false);
            uri.AppendPath(name, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return request;
        }

        /// <summary> Get the Entity definition for the given GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetEntityDefByGuidAsync(string guid, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetEntityDefByGuidRequest(guid);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get the Entity definition for the given GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetEntityDefByGuid(string guid, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetEntityDefByGuidRequest(guid);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetEntityDefByGuid"/> and <see cref="GetEntityDefByGuidAsync"/> operations. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        private Request CreateGetEntityDefByGuidRequest(string guid)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/types/entitydef/guid/", false);
            uri.AppendPath(guid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return request;
        }

        /// <summary> Get the entity definition by its name (unique). </summary>
        /// <param name="name"> The name of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetEntityDefByNameAsync(string name, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetEntityDefByNameRequest(name);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get the entity definition by its name (unique). </summary>
        /// <param name="name"> The name of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetEntityDefByName(string name, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetEntityDefByNameRequest(name);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetEntityDefByName"/> and <see cref="GetEntityDefByNameAsync"/> operations. </summary>
        /// <param name="name"> The name of the entity. </param>
        private Request CreateGetEntityDefByNameRequest(string name)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/types/entitydef/name/", false);
            uri.AppendPath(name, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return request;
        }

        /// <summary> Get the enum definition for the given GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the enum. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetEnumDefByGuidAsync(string guid, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetEnumDefByGuidRequest(guid);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get the enum definition for the given GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the enum. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetEnumDefByGuid(string guid, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetEnumDefByGuidRequest(guid);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetEnumDefByGuid"/> and <see cref="GetEnumDefByGuidAsync"/> operations. </summary>
        /// <param name="guid"> The globally unique identifier of the enum. </param>
        private Request CreateGetEnumDefByGuidRequest(string guid)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/types/enumdef/guid/", false);
            uri.AppendPath(guid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return request;
        }

        /// <summary> Get the enum definition by its name (unique). </summary>
        /// <param name="name"> The name of the enum. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetEnumDefByNameAsync(string name, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetEnumDefByNameRequest(name);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get the enum definition by its name (unique). </summary>
        /// <param name="name"> The name of the enum. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetEnumDefByName(string name, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetEnumDefByNameRequest(name);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetEnumDefByName"/> and <see cref="GetEnumDefByNameAsync"/> operations. </summary>
        /// <param name="name"> The name of the enum. </param>
        private Request CreateGetEnumDefByNameRequest(string name)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/types/enumdef/name/", false);
            uri.AppendPath(name, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return request;
        }

        /// <summary> Get the relationship definition for the given GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the relationship. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetRelationshipDefByGuidAsync(string guid, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetRelationshipDefByGuidRequest(guid);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get the relationship definition for the given GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the relationship. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetRelationshipDefByGuid(string guid, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetRelationshipDefByGuidRequest(guid);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetRelationshipDefByGuid"/> and <see cref="GetRelationshipDefByGuidAsync"/> operations. </summary>
        /// <param name="guid"> The globally unique identifier of the relationship. </param>
        private Request CreateGetRelationshipDefByGuidRequest(string guid)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/types/relationshipdef/guid/", false);
            uri.AppendPath(guid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return request;
        }

        /// <summary> Get the relationship definition by its name (unique). </summary>
        /// <param name="name"> The name of the relationship. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetRelationshipDefByNameAsync(string name, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetRelationshipDefByNameRequest(name);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get the relationship definition by its name (unique). </summary>
        /// <param name="name"> The name of the relationship. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetRelationshipDefByName(string name, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetRelationshipDefByNameRequest(name);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetRelationshipDefByName"/> and <see cref="GetRelationshipDefByNameAsync"/> operations. </summary>
        /// <param name="name"> The name of the relationship. </param>
        private Request CreateGetRelationshipDefByNameRequest(string name)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/types/relationshipdef/name/", false);
            uri.AppendPath(name, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return request;
        }

        /// <summary> Get the struct definition for the given GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the struct. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetStructDefByGuidAsync(string guid, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetStructDefByGuidRequest(guid);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get the struct definition for the given GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the struct. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetStructDefByGuid(string guid, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetStructDefByGuidRequest(guid);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetStructDefByGuid"/> and <see cref="GetStructDefByGuidAsync"/> operations. </summary>
        /// <param name="guid"> The globally unique identifier of the struct. </param>
        private Request CreateGetStructDefByGuidRequest(string guid)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/types/structdef/guid/", false);
            uri.AppendPath(guid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return request;
        }

        /// <summary> Get the struct definition by its name (unique). </summary>
        /// <param name="name"> The name of the struct. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetStructDefByNameAsync(string name, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetStructDefByNameRequest(name);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get the struct definition by its name (unique). </summary>
        /// <param name="name"> The name of the struct. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetStructDefByName(string name, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetStructDefByNameRequest(name);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetStructDefByName"/> and <see cref="GetStructDefByNameAsync"/> operations. </summary>
        /// <param name="name"> The name of the struct. </param>
        private Request CreateGetStructDefByNameRequest(string name)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/types/structdef/name/", false);
            uri.AppendPath(name, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return request;
        }

        /// <summary> Get the type definition for the given GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetTypeDefByGuidAsync(string guid, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetTypeDefByGuidRequest(guid);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get the type definition for the given GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetTypeDefByGuid(string guid, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetTypeDefByGuidRequest(guid);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetTypeDefByGuid"/> and <see cref="GetTypeDefByGuidAsync"/> operations. </summary>
        /// <param name="guid"> The globally unique identifier of the type. </param>
        private Request CreateGetTypeDefByGuidRequest(string guid)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/types/typedef/guid/", false);
            uri.AppendPath(guid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return request;
        }

        /// <summary> Get the type definition by its name (unique). </summary>
        /// <param name="name"> The name of the type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetTypeDefByNameAsync(string name, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetTypeDefByNameRequest(name);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get the type definition by its name (unique). </summary>
        /// <param name="name"> The name of the type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetTypeDefByName(string name, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetTypeDefByNameRequest(name);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetTypeDefByName"/> and <see cref="GetTypeDefByNameAsync"/> operations. </summary>
        /// <param name="name"> The name of the type. </param>
        private Request CreateGetTypeDefByNameRequest(string name)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/types/typedef/name/", false);
            uri.AppendPath(name, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return request;
        }

        /// <summary> Delete API for type identified by its name. </summary>
        /// <param name="name"> The name of the type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteTypeByNameAsync(string name, CancellationToken cancellationToken = default)
        {
            Request req = CreateDeleteTypeByNameRequest(name);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Delete API for type identified by its name. </summary>
        /// <param name="name"> The name of the type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteTypeByName(string name, CancellationToken cancellationToken = default)
        {
            Request req = CreateDeleteTypeByNameRequest(name);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="DeleteTypeByName"/> and <see cref="DeleteTypeByNameAsync"/> operations. </summary>
        /// <param name="name"> The name of the type. </param>
        private Request CreateDeleteTypeByNameRequest(string name)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/types/typedef/name/", false);
            uri.AppendPath(name, true);
            request.Uri = uri;
            return request;
        }

        /// <summary> Get all type definitions in Atlas in bulk. </summary>
        /// <param name="includeTermTemplate">
        /// Whether include termtemplatedef when return all typedefs.
        /// This is always true when search filter type=term_template.
        /// </param>
        /// <param name="type"> Typedef name as search filter when get typedefs. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetAllTypeDefsAsync(bool? includeTermTemplate = null, string type = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetAllTypeDefsRequest(includeTermTemplate, type);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get all type definitions in Atlas in bulk. </summary>
        /// <param name="includeTermTemplate">
        /// Whether include termtemplatedef when return all typedefs.
        /// This is always true when search filter type=term_template.
        /// </param>
        /// <param name="type"> Typedef name as search filter when get typedefs. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetAllTypeDefs(bool? includeTermTemplate = null, string type = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetAllTypeDefsRequest(includeTermTemplate, type);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetAllTypeDefs"/> and <see cref="GetAllTypeDefsAsync"/> operations. </summary>
        /// <param name="includeTermTemplate">
        /// Whether include termtemplatedef when return all typedefs.
        /// This is always true when search filter type=term_template.
        /// </param>
        /// <param name="type"> Typedef name as search filter when get typedefs. </param>
        private Request CreateGetAllTypeDefsRequest(bool? includeTermTemplate = null, string type = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/types/typedefs", false);
            if (includeTermTemplate != null)
            {
                uri.AppendQuery("includeTermTemplate", includeTermTemplate.Value, true);
            }
            if (type != null)
            {
                uri.AppendQuery("type", type, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return request;
        }

        /// <summary>
        /// Create all atlas type definitions in bulk, only new definitions will be created.
        /// Any changes to the existing definitions will be discarded.
        /// </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CreateTypeDefsAsync(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateCreateTypeDefsRequest(requestBody);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create all atlas type definitions in bulk, only new definitions will be created.
        /// Any changes to the existing definitions will be discarded.
        /// </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CreateTypeDefs(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateCreateTypeDefsRequest(requestBody);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="CreateTypeDefs"/> and <see cref="CreateTypeDefsAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        private Request CreateCreateTypeDefsRequest(RequestContent requestBody)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/types/typedefs", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }

        /// <summary> Update all types in bulk, changes detected in the type definitions would be persisted. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> UpdateAtlasTypeDefsAsync(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateUpdateAtlasTypeDefsRequest(requestBody);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Update all types in bulk, changes detected in the type definitions would be persisted. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response UpdateAtlasTypeDefs(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateUpdateAtlasTypeDefsRequest(requestBody);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="UpdateAtlasTypeDefs"/> and <see cref="UpdateAtlasTypeDefsAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        private Request CreateUpdateAtlasTypeDefsRequest(RequestContent requestBody)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/types/typedefs", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }

        /// <summary> Delete API for all types in bulk. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteTypeDefsAsync(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateDeleteTypeDefsRequest(requestBody);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Delete API for all types in bulk. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteTypeDefs(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateDeleteTypeDefsRequest(requestBody);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="DeleteTypeDefs"/> and <see cref="DeleteTypeDefsAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        private Request CreateDeleteTypeDefsRequest(RequestContent requestBody)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/types/typedefs", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }

        /// <summary> List all type definitions returned as a list of minimal information header. </summary>
        /// <param name="includeTermTemplate">
        /// Whether include termtemplatedef when return all typedefs.
        /// This is always true when search filter type=term_template.
        /// </param>
        /// <param name="type"> Typedef name as search filter when get typedefs. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetTypeDefHeadersAsync(bool? includeTermTemplate = null, string type = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetTypeDefHeadersRequest(includeTermTemplate, type);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> List all type definitions returned as a list of minimal information header. </summary>
        /// <param name="includeTermTemplate">
        /// Whether include termtemplatedef when return all typedefs.
        /// This is always true when search filter type=term_template.
        /// </param>
        /// <param name="type"> Typedef name as search filter when get typedefs. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetTypeDefHeaders(bool? includeTermTemplate = null, string type = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetTypeDefHeadersRequest(includeTermTemplate, type);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetTypeDefHeaders"/> and <see cref="GetTypeDefHeadersAsync"/> operations. </summary>
        /// <param name="includeTermTemplate">
        /// Whether include termtemplatedef when return all typedefs.
        /// This is always true when search filter type=term_template.
        /// </param>
        /// <param name="type"> Typedef name as search filter when get typedefs. </param>
        private Request CreateGetTypeDefHeadersRequest(bool? includeTermTemplate = null, string type = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/types/typedefs/headers", false);
            if (includeTermTemplate != null)
            {
                uri.AppendQuery("includeTermTemplate", includeTermTemplate.Value, true);
            }
            if (type != null)
            {
                uri.AppendQuery("type", type, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return request;
        }

        /// <summary> Get the term template definition for the given GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the term template. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetTermTemplateDefByGuidAsync(string guid, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetTermTemplateDefByGuidRequest(guid);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get the term template definition for the given GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the term template. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetTermTemplateDefByGuid(string guid, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetTermTemplateDefByGuidRequest(guid);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetTermTemplateDefByGuid"/> and <see cref="GetTermTemplateDefByGuidAsync"/> operations. </summary>
        /// <param name="guid"> The globally unique identifier of the term template. </param>
        private Request CreateGetTermTemplateDefByGuidRequest(string guid)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/types/termtemplatedef/guid/", false);
            uri.AppendPath(guid, true);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return request;
        }

        /// <summary> Get the term template definition by its name (unique). </summary>
        /// <param name="name"> The name of the term template. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetTermTemplateDefByNameAsync(string name, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetTermTemplateDefByNameRequest(name);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get the term template definition by its name (unique). </summary>
        /// <param name="name"> The name of the term template. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetTermTemplateDefByName(string name, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetTermTemplateDefByNameRequest(name);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetTermTemplateDefByName"/> and <see cref="GetTermTemplateDefByNameAsync"/> operations. </summary>
        /// <param name="name"> The name of the term template. </param>
        private Request CreateGetTermTemplateDefByNameRequest(string name)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/types/termtemplatedef/name/", false);
            uri.AppendPath(name, true);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return request;
        }
    }
}
