// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Analytics.Purview.Administration.Models;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Purview.Administration
{
    internal partial class PurviewMetadataPolicyRestClient
    {
        private Uri endpoint;
        private string collectionName;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of PurviewMetadataPolicyRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> The endpoint of your Purview account. Example: https://{accountName}.purview.azure.com. </param>
        /// <param name="collectionName"> The String to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="collectionName"/> is null. </exception>
        public PurviewMetadataPolicyRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint, string collectionName)
        {
            this.endpoint = endpoint ?? throw new ArgumentNullException(nameof(endpoint));
            this.collectionName = collectionName ?? throw new ArgumentNullException(nameof(collectionName));
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateGetMetadataPoliciesRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/policyStore", false);
            uri.AppendPath("/metadataPolicies", false);
            uri.AppendQuery("api-version", "2021-07-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> List or Get metadata policies. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<MetadataPolicyList>> GetMetadataPoliciesAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetMetadataPoliciesRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MetadataPolicyList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = MetadataPolicyList.DeserializeMetadataPolicyList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> List or Get metadata policies. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<MetadataPolicyList> GetMetadataPolicies(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetMetadataPoliciesRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MetadataPolicyList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = MetadataPolicyList.DeserializeMetadataPolicyList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateMetadataPolicyRequest(string policyId, MetadataPolicy body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/policyStore", false);
            uri.AppendPath("/metadataPolicies/", false);
            uri.AppendPath(policyId, true);
            uri.AppendQuery("api-version", "2021-07-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (body != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Updates a metadata policy. </summary>
        /// <param name="policyId"> Unique policy id. </param>
        /// <param name="body"> Policy to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="policyId"/> is null. </exception>
        public async Task<Response<MetadataPolicy>> UpdateMetadataPolicyAsync(string policyId, MetadataPolicy body = null, CancellationToken cancellationToken = default)
        {
            if (policyId == null)
            {
                throw new ArgumentNullException(nameof(policyId));
            }

            using var message = CreateUpdateMetadataPolicyRequest(policyId, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MetadataPolicy value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = MetadataPolicy.DeserializeMetadataPolicy(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Updates a metadata policy. </summary>
        /// <param name="policyId"> Unique policy id. </param>
        /// <param name="body"> Policy to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="policyId"/> is null. </exception>
        public Response<MetadataPolicy> UpdateMetadataPolicy(string policyId, MetadataPolicy body = null, CancellationToken cancellationToken = default)
        {
            if (policyId == null)
            {
                throw new ArgumentNullException(nameof(policyId));
            }

            using var message = CreateUpdateMetadataPolicyRequest(policyId, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MetadataPolicy value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = MetadataPolicy.DeserializeMetadataPolicy(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetMetadataPolicyRequest(string policyId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/policyStore", false);
            uri.AppendPath("/metadataPolicies/", false);
            uri.AppendPath(policyId, true);
            uri.AppendQuery("api-version", "2021-07-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets a metadata policy. </summary>
        /// <param name="policyId"> Id of an existing policy that needs to be fetched. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="policyId"/> is null. </exception>
        public async Task<Response<MetadataPolicy>> GetMetadataPolicyAsync(string policyId, CancellationToken cancellationToken = default)
        {
            if (policyId == null)
            {
                throw new ArgumentNullException(nameof(policyId));
            }

            using var message = CreateGetMetadataPolicyRequest(policyId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MetadataPolicy value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = MetadataPolicy.DeserializeMetadataPolicy(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets a metadata policy. </summary>
        /// <param name="policyId"> Id of an existing policy that needs to be fetched. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="policyId"/> is null. </exception>
        public Response<MetadataPolicy> GetMetadataPolicy(string policyId, CancellationToken cancellationToken = default)
        {
            if (policyId == null)
            {
                throw new ArgumentNullException(nameof(policyId));
            }

            using var message = CreateGetMetadataPolicyRequest(policyId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MetadataPolicy value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = MetadataPolicy.DeserializeMetadataPolicy(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetMetadataPoliciesNextPageRequest(string nextLink)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/policyStore", false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> List or Get metadata policies. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public async Task<Response<MetadataPolicyList>> GetMetadataPoliciesNextPageAsync(string nextLink, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetMetadataPoliciesNextPageRequest(nextLink);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MetadataPolicyList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = MetadataPolicyList.DeserializeMetadataPolicyList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> List or Get metadata policies. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public Response<MetadataPolicyList> GetMetadataPoliciesNextPage(string nextLink, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetMetadataPoliciesNextPageRequest(nextLink);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MetadataPolicyList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = MetadataPolicyList.DeserializeMetadataPolicyList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
