// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Analytics.Purview.Administration.Models
{
    public partial class AttributeMatcher : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(AttributeName))
            {
                writer.WritePropertyName("attributeName");
                writer.WriteStringValue(AttributeName);
            }
            if (Optional.IsDefined(AttributeValueIncludes))
            {
                writer.WritePropertyName("attributeValueIncludes");
                writer.WriteStringValue(AttributeValueIncludes);
            }
            if (Optional.IsCollectionDefined(AttributeValueIncludedIn))
            {
                writer.WritePropertyName("attributeValueIncludedIn");
                writer.WriteStartArray();
                foreach (var item in AttributeValueIncludedIn)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(AttributeValueExcludes))
            {
                writer.WritePropertyName("attributeValueExcludes");
                writer.WriteStringValue(AttributeValueExcludes);
            }
            if (Optional.IsCollectionDefined(AttributeValueExcludedIn))
            {
                writer.WritePropertyName("attributeValueExcludedIn");
                writer.WriteStartArray();
                foreach (var item in AttributeValueExcludedIn)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static AttributeMatcher DeserializeAttributeMatcher(JsonElement element)
        {
            Optional<string> attributeName = default;
            Optional<string> attributeValueIncludes = default;
            Optional<IList<string>> attributeValueIncludedIn = default;
            Optional<string> attributeValueExcludes = default;
            Optional<IList<string>> attributeValueExcludedIn = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("attributeName"))
                {
                    attributeName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("attributeValueIncludes"))
                {
                    attributeValueIncludes = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("attributeValueIncludedIn"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    attributeValueIncludedIn = array;
                    continue;
                }
                if (property.NameEquals("attributeValueExcludes"))
                {
                    attributeValueExcludes = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("attributeValueExcludedIn"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    attributeValueExcludedIn = array;
                    continue;
                }
            }
            return new AttributeMatcher(attributeName.Value, attributeValueIncludes.Value, Optional.ToList(attributeValueIncludedIn), attributeValueExcludes.Value, Optional.ToList(attributeValueExcludedIn));
        }
    }
}
