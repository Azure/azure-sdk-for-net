// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Analytics.Purview.Administration.Models
{
    public partial class MetadataPolicyProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            if (Optional.IsCollectionDefined(DecisionRules))
            {
                writer.WritePropertyName("decisionRules");
                writer.WriteStartArray();
                foreach (var item in DecisionRules)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(AttributeRules))
            {
                writer.WritePropertyName("attributeRules");
                writer.WriteStartArray();
                foreach (var item in AttributeRules)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Collection))
            {
                writer.WritePropertyName("collection");
                writer.WriteObjectValue(Collection);
            }
            if (Optional.IsDefined(ParentCollectionName))
            {
                writer.WritePropertyName("parentCollectionName");
                writer.WriteStringValue(ParentCollectionName);
            }
            writer.WriteEndObject();
        }

        internal static MetadataPolicyProperties DeserializeMetadataPolicyProperties(JsonElement element)
        {
            Optional<string> description = default;
            Optional<IList<DecisionRule>> decisionRules = default;
            Optional<IList<AttributeRule>> attributeRules = default;
            Optional<CollectionReferenceAutoGenerated> collection = default;
            Optional<string> parentCollectionName = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("description"))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("decisionRules"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<DecisionRule> array = new List<DecisionRule>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DecisionRule.DeserializeDecisionRule(item));
                    }
                    decisionRules = array;
                    continue;
                }
                if (property.NameEquals("attributeRules"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<AttributeRule> array = new List<AttributeRule>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AttributeRule.DeserializeAttributeRule(item));
                    }
                    attributeRules = array;
                    continue;
                }
                if (property.NameEquals("collection"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    collection = CollectionReferenceAutoGenerated.DeserializeCollectionReferenceAutoGenerated(property.Value);
                    continue;
                }
                if (property.NameEquals("parentCollectionName"))
                {
                    parentCollectionName = property.Value.GetString();
                    continue;
                }
            }
            return new MetadataPolicyProperties(description.Value, Optional.ToList(decisionRules), Optional.ToList(attributeRules), collection.Value, parentCollectionName.Value);
        }
    }
}
