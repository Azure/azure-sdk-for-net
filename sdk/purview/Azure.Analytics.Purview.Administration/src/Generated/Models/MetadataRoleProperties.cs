// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace Azure.Analytics.Purview.Administration.Models
{
    /// <summary> The MetadataRoleProperties. </summary>
    internal partial class MetadataRoleProperties
    {
        /// <summary> Initializes a new instance of MetadataRoleProperties. </summary>
        internal MetadataRoleProperties()
        {
            CnfCondition = new ChangeTrackingList<IList<AttributeMatcher>>();
            DnfCondition = new ChangeTrackingList<IList<AttributeMatcher>>();
        }

        /// <summary> Initializes a new instance of MetadataRoleProperties. </summary>
        /// <param name="provisioningState"> The provisioningState of role. </param>
        /// <param name="roleType"> The type of role. </param>
        /// <param name="friendlyName"> The friendly name of role. </param>
        /// <param name="description"> The description of role. </param>
        /// <param name="cnfCondition"> The cnf Condition for a rule. </param>
        /// <param name="dnfCondition"> The dnf Condition for a rule. </param>
        /// <param name="version"> The version of role. </param>
        internal MetadataRoleProperties(string provisioningState, string roleType, string friendlyName, string description, IReadOnlyList<IList<AttributeMatcher>> cnfCondition, IReadOnlyList<IList<AttributeMatcher>> dnfCondition, long? version)
        {
            ProvisioningState = provisioningState;
            RoleType = roleType;
            FriendlyName = friendlyName;
            Description = description;
            CnfCondition = cnfCondition;
            DnfCondition = dnfCondition;
            Version = version;
        }

        /// <summary> The provisioningState of role. </summary>
        public string ProvisioningState { get; }
        /// <summary> The type of role. </summary>
        public string RoleType { get; }
        /// <summary> The friendly name of role. </summary>
        public string FriendlyName { get; }
        /// <summary> The description of role. </summary>
        public string Description { get; }
        /// <summary> The cnf Condition for a rule. </summary>
        public IReadOnlyList<IList<AttributeMatcher>> CnfCondition { get; }
        /// <summary> The dnf Condition for a rule. </summary>
        public IReadOnlyList<IList<AttributeMatcher>> DnfCondition { get; }
        /// <summary> The version of role. </summary>
        public long? Version { get; }
    }
}
