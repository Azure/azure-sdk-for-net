// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Analytics.Purview.Administration.Models
{
    internal partial class MetadataRoleProperties
    {
        internal static MetadataRoleProperties DeserializeMetadataRoleProperties(JsonElement element)
        {
            Optional<string> provisioningState = default;
            Optional<string> roleType = default;
            Optional<string> friendlyName = default;
            Optional<string> description = default;
            Optional<IReadOnlyList<IList<AttributeMatcher>>> cnfCondition = default;
            Optional<IReadOnlyList<IList<AttributeMatcher>>> dnfCondition = default;
            Optional<long> version = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("provisioningState"))
                {
                    provisioningState = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("roleType"))
                {
                    roleType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("friendlyName"))
                {
                    friendlyName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cnfCondition"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<IList<AttributeMatcher>> array = new List<IList<AttributeMatcher>>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        List<AttributeMatcher> array0 = new List<AttributeMatcher>();
                        foreach (var item0 in item.EnumerateArray())
                        {
                            array0.Add(AttributeMatcher.DeserializeAttributeMatcher(item0));
                        }
                        array.Add(array0);
                    }
                    cnfCondition = array;
                    continue;
                }
                if (property.NameEquals("dnfCondition"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<IList<AttributeMatcher>> array = new List<IList<AttributeMatcher>>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        List<AttributeMatcher> array0 = new List<AttributeMatcher>();
                        foreach (var item0 in item.EnumerateArray())
                        {
                            array0.Add(AttributeMatcher.DeserializeAttributeMatcher(item0));
                        }
                        array.Add(array0);
                    }
                    dnfCondition = array;
                    continue;
                }
                if (property.NameEquals("version"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    version = property.Value.GetInt64();
                    continue;
                }
            }
            return new MetadataRoleProperties(provisioningState.Value, roleType.Value, friendlyName.Value, description.Value, Optional.ToList(cnfCondition), Optional.ToList(dnfCondition), Optional.ToNullable(version));
        }
    }
}
