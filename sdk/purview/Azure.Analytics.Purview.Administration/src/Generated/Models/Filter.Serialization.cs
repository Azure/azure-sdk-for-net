// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.Analytics.Purview.Administration.Models
{
    public partial class Filter : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(CreatedBy))
            {
                writer.WritePropertyName("createdBy");
                writer.WriteStringValue(CreatedBy);
            }
            if (Optional.IsDefined(FilterType))
            {
                writer.WritePropertyName("filterType");
                writer.WriteStringValue(FilterType.Value.ToString());
            }
            if (Optional.IsDefined(LastUpdatedTimestamp))
            {
                writer.WritePropertyName("lastUpdatedTimestamp");
                writer.WriteNumberValue(LastUpdatedTimestamp.Value);
            }
            if (Optional.IsDefined(ModifiedBy))
            {
                writer.WritePropertyName("modifiedBy");
                writer.WriteStringValue(ModifiedBy);
            }
            writer.WritePropertyName("name");
            writer.WriteStringValue(Name);
            writer.WritePropertyName("path");
            writer.WriteStringValue(Path);
            writer.WriteEndObject();
        }

        internal static Filter DeserializeFilter(JsonElement element)
        {
            Optional<string> createdBy = default;
            Optional<FilterType> filterType = default;
            Optional<long> lastUpdatedTimestamp = default;
            Optional<string> modifiedBy = default;
            string name = default;
            string path = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("createdBy"))
                {
                    createdBy = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("filterType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    filterType = new FilterType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("lastUpdatedTimestamp"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lastUpdatedTimestamp = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("modifiedBy"))
                {
                    modifiedBy = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("path"))
                {
                    path = property.Value.GetString();
                    continue;
                }
            }
            return new Filter(createdBy.Value, Optional.ToNullable(filterType), Optional.ToNullable(lastUpdatedTimestamp), modifiedBy.Value, name, path);
        }
    }
}
