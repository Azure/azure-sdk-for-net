// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Purview.Administration
{
    /// <summary> The PurviewAccount service client. </summary>
    public partial class PurviewAccountClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://purview.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of PurviewAccountClient for mocking. </summary>
        protected PurviewAccountClient()
        {
        }

        /// <summary> Initializes a new instance of PurviewAccountClient. </summary>
        /// <param name="endpoint"> The account endpoint of your Purview account. Example: https://{accountName}.purview.azure.com/account/. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public PurviewAccountClient(Uri endpoint, TokenCredential credential) : this(endpoint, credential, new PurviewAccountClientOptions())
        {
        }

        /// <summary> Initializes a new instance of PurviewAccountClient. </summary>
        /// <param name="endpoint"> The account endpoint of your Purview account. Example: https://{accountName}.purview.azure.com/account/. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public PurviewAccountClient(Uri endpoint, TokenCredential credential, PurviewAccountClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new PurviewAccountClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _endpoint = endpoint;
        }

        /// <summary> Get an account. </summary>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <example>
        /// This sample shows how to call GetAccountPropertiesAsync and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-account-name.azure.com>");
        /// var client = new PurviewAccountClient(endpoint, credential);
        /// 
        /// Response response = await client.GetAccountPropertiesAsync();
        /// JsonElement result = JsonDocument.Parse(GetContentFromResponse(response)).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("identity").GetProperty("principalId").ToString());
        /// Console.WriteLine(result.GetProperty("identity").GetProperty("tenantId").ToString());
        /// Console.WriteLine(result.GetProperty("identity").GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("location").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("cloudConnectors").GetProperty("awsExternalId").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("createdAt").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("createdByObjectId").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("endpoints").GetProperty("catalog").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("endpoints").GetProperty("guardian").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("endpoints").GetProperty("scan").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("friendlyName").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("managedResourceGroupName").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("managedResources").GetProperty("eventHubNamespace").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("managedResources").GetProperty("resourceGroup").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("managedResources").GetProperty("storageAccount").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("privateEndpointConnections").Item[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("privateEndpointConnections").Item[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("privateEndpointConnections").Item[0].GetProperty("properties").GetProperty("privateEndpoint").GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("privateEndpointConnections").Item[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("actionsRequired").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("privateEndpointConnections").Item[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("privateEndpointConnections").Item[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("privateEndpointConnections").Item[0].GetProperty("properties").GetProperty("provisioningState").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("privateEndpointConnections").Item[0].GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("publicNetworkAccess").ToString());
        /// Console.WriteLine(result.GetProperty("sku").GetProperty("capacity").ToString());
        /// Console.WriteLine(result.GetProperty("sku").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
        /// Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
        /// Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
        /// Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
        /// Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
        /// Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("type").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   identity: {
        ///     principalId: string,
        ///     tenantId: string,
        ///     type: &quot;SystemAssigned&quot;
        ///   },
        ///   location: string,
        ///   name: string,
        ///   properties: {
        ///     cloudConnectors: {
        ///       awsExternalId: string
        ///     },
        ///     createdAt: string (ISO 8601 Format),
        ///     createdBy: string,
        ///     createdByObjectId: string,
        ///     endpoints: {
        ///       catalog: string,
        ///       guardian: string,
        ///       scan: string
        ///     },
        ///     friendlyName: string,
        ///     managedResourceGroupName: string,
        ///     managedResources: {
        ///       eventHubNamespace: string,
        ///       resourceGroup: string,
        ///       storageAccount: string
        ///     },
        ///     privateEndpointConnections: [
        ///       {
        ///         id: string,
        ///         name: string,
        ///         properties: {
        ///           privateEndpoint: {
        ///             id: string
        ///           },
        ///           privateLinkServiceConnectionState: {
        ///             actionsRequired: string,
        ///             description: string,
        ///             status: &quot;Unknown&quot; | &quot;Pending&quot; | &quot;Approved&quot; | &quot;Rejected&quot; | &quot;Disconnected&quot;
        ///           },
        ///           provisioningState: string
        ///         },
        ///         type: string
        ///       }
        ///     ],
        ///     provisioningState: &quot;Unknown&quot; | &quot;Creating&quot; | &quot;Moving&quot; | &quot;Deleting&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;Failed&quot; | &quot;Succeeded&quot; | &quot;Canceled&quot;,
        ///     publicNetworkAccess: &quot;NotSpecified&quot; | &quot;Enabled&quot; | &quot;Disabled&quot;
        ///   },
        ///   sku: {
        ///     capacity: number,
        ///     name: &quot;Standard&quot;
        ///   },
        ///   systemData: {
        ///     createdAt: string (ISO 8601 Format),
        ///     createdBy: string,
        ///     createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;,
        ///     lastModifiedAt: string (ISO 8601 Format),
        ///     lastModifiedBy: string,
        ///     lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;
        ///   },
        ///   tags: Dictionary&lt;string, string&gt;,
        ///   type: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         details: [ErrorModel],
        ///         message: string,
        ///         target: string
        ///       }
        ///     ],
        ///     message: string,
        ///     target: string
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetAccountPropertiesAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PurviewAccountClient.GetAccountProperties");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAccountPropertiesRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get an account. </summary>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <example>
        /// This sample shows how to call GetAccountProperties and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-account-name.azure.com>");
        /// var client = new PurviewAccountClient(endpoint, credential);
        /// 
        /// Response response = client.GetAccountProperties();
        /// JsonElement result = JsonDocument.Parse(GetContentFromResponse(response)).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("identity").GetProperty("principalId").ToString());
        /// Console.WriteLine(result.GetProperty("identity").GetProperty("tenantId").ToString());
        /// Console.WriteLine(result.GetProperty("identity").GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("location").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("cloudConnectors").GetProperty("awsExternalId").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("createdAt").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("createdByObjectId").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("endpoints").GetProperty("catalog").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("endpoints").GetProperty("guardian").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("endpoints").GetProperty("scan").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("friendlyName").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("managedResourceGroupName").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("managedResources").GetProperty("eventHubNamespace").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("managedResources").GetProperty("resourceGroup").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("managedResources").GetProperty("storageAccount").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("privateEndpointConnections").Item[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("privateEndpointConnections").Item[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("privateEndpointConnections").Item[0].GetProperty("properties").GetProperty("privateEndpoint").GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("privateEndpointConnections").Item[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("actionsRequired").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("privateEndpointConnections").Item[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("privateEndpointConnections").Item[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("privateEndpointConnections").Item[0].GetProperty("properties").GetProperty("provisioningState").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("privateEndpointConnections").Item[0].GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("publicNetworkAccess").ToString());
        /// Console.WriteLine(result.GetProperty("sku").GetProperty("capacity").ToString());
        /// Console.WriteLine(result.GetProperty("sku").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
        /// Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
        /// Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
        /// Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
        /// Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
        /// Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("type").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   identity: {
        ///     principalId: string,
        ///     tenantId: string,
        ///     type: &quot;SystemAssigned&quot;
        ///   },
        ///   location: string,
        ///   name: string,
        ///   properties: {
        ///     cloudConnectors: {
        ///       awsExternalId: string
        ///     },
        ///     createdAt: string (ISO 8601 Format),
        ///     createdBy: string,
        ///     createdByObjectId: string,
        ///     endpoints: {
        ///       catalog: string,
        ///       guardian: string,
        ///       scan: string
        ///     },
        ///     friendlyName: string,
        ///     managedResourceGroupName: string,
        ///     managedResources: {
        ///       eventHubNamespace: string,
        ///       resourceGroup: string,
        ///       storageAccount: string
        ///     },
        ///     privateEndpointConnections: [
        ///       {
        ///         id: string,
        ///         name: string,
        ///         properties: {
        ///           privateEndpoint: {
        ///             id: string
        ///           },
        ///           privateLinkServiceConnectionState: {
        ///             actionsRequired: string,
        ///             description: string,
        ///             status: &quot;Unknown&quot; | &quot;Pending&quot; | &quot;Approved&quot; | &quot;Rejected&quot; | &quot;Disconnected&quot;
        ///           },
        ///           provisioningState: string
        ///         },
        ///         type: string
        ///       }
        ///     ],
        ///     provisioningState: &quot;Unknown&quot; | &quot;Creating&quot; | &quot;Moving&quot; | &quot;Deleting&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;Failed&quot; | &quot;Succeeded&quot; | &quot;Canceled&quot;,
        ///     publicNetworkAccess: &quot;NotSpecified&quot; | &quot;Enabled&quot; | &quot;Disabled&quot;
        ///   },
        ///   sku: {
        ///     capacity: number,
        ///     name: &quot;Standard&quot;
        ///   },
        ///   systemData: {
        ///     createdAt: string (ISO 8601 Format),
        ///     createdBy: string,
        ///     createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;,
        ///     lastModifiedAt: string (ISO 8601 Format),
        ///     lastModifiedBy: string,
        ///     lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;
        ///   },
        ///   tags: Dictionary&lt;string, string&gt;,
        ///   type: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         details: [ErrorModel],
        ///         message: string,
        ///         target: string
        ///       }
        ///     ],
        ///     message: string,
        ///     target: string
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetAccountProperties(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PurviewAccountClient.GetAccountProperties");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAccountPropertiesRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates an account. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <example>
        /// This sample shows how to call UpdateAccountPropertiesAsync with all request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-account-name.azure.com>");
        /// var client = new PurviewAccountClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     friendlyName = "<DataPlaneAccountUpdateParametersFriendlyName>",
        /// };
        /// 
        /// Response response = await client.UpdateAccountPropertiesAsync(RequestContent.Create(data));
        /// JsonElement result = JsonDocument.Parse(GetContentFromResponse(response)).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("identity").GetProperty("principalId").ToString());
        /// Console.WriteLine(result.GetProperty("identity").GetProperty("tenantId").ToString());
        /// Console.WriteLine(result.GetProperty("identity").GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("location").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("cloudConnectors").GetProperty("awsExternalId").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("createdAt").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("createdByObjectId").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("endpoints").GetProperty("catalog").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("endpoints").GetProperty("guardian").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("endpoints").GetProperty("scan").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("friendlyName").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("managedResourceGroupName").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("managedResources").GetProperty("eventHubNamespace").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("managedResources").GetProperty("resourceGroup").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("managedResources").GetProperty("storageAccount").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("privateEndpointConnections").Item[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("privateEndpointConnections").Item[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("privateEndpointConnections").Item[0].GetProperty("properties").GetProperty("privateEndpoint").GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("privateEndpointConnections").Item[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("actionsRequired").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("privateEndpointConnections").Item[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("privateEndpointConnections").Item[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("privateEndpointConnections").Item[0].GetProperty("properties").GetProperty("provisioningState").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("privateEndpointConnections").Item[0].GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("publicNetworkAccess").ToString());
        /// Console.WriteLine(result.GetProperty("sku").GetProperty("capacity").ToString());
        /// Console.WriteLine(result.GetProperty("sku").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
        /// Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
        /// Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
        /// Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
        /// Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
        /// Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("type").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   friendlyName: string
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   identity: {
        ///     principalId: string,
        ///     tenantId: string,
        ///     type: &quot;SystemAssigned&quot;
        ///   },
        ///   location: string,
        ///   name: string,
        ///   properties: {
        ///     cloudConnectors: {
        ///       awsExternalId: string
        ///     },
        ///     createdAt: string (ISO 8601 Format),
        ///     createdBy: string,
        ///     createdByObjectId: string,
        ///     endpoints: {
        ///       catalog: string,
        ///       guardian: string,
        ///       scan: string
        ///     },
        ///     friendlyName: string,
        ///     managedResourceGroupName: string,
        ///     managedResources: {
        ///       eventHubNamespace: string,
        ///       resourceGroup: string,
        ///       storageAccount: string
        ///     },
        ///     privateEndpointConnections: [
        ///       {
        ///         id: string,
        ///         name: string,
        ///         properties: {
        ///           privateEndpoint: {
        ///             id: string
        ///           },
        ///           privateLinkServiceConnectionState: {
        ///             actionsRequired: string,
        ///             description: string,
        ///             status: &quot;Unknown&quot; | &quot;Pending&quot; | &quot;Approved&quot; | &quot;Rejected&quot; | &quot;Disconnected&quot;
        ///           },
        ///           provisioningState: string
        ///         },
        ///         type: string
        ///       }
        ///     ],
        ///     provisioningState: &quot;Unknown&quot; | &quot;Creating&quot; | &quot;Moving&quot; | &quot;Deleting&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;Failed&quot; | &quot;Succeeded&quot; | &quot;Canceled&quot;,
        ///     publicNetworkAccess: &quot;NotSpecified&quot; | &quot;Enabled&quot; | &quot;Disabled&quot;
        ///   },
        ///   sku: {
        ///     capacity: number,
        ///     name: &quot;Standard&quot;
        ///   },
        ///   systemData: {
        ///     createdAt: string (ISO 8601 Format),
        ///     createdBy: string,
        ///     createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;,
        ///     lastModifiedAt: string (ISO 8601 Format),
        ///     lastModifiedBy: string,
        ///     lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;
        ///   },
        ///   tags: Dictionary&lt;string, string&gt;,
        ///   type: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         details: [ErrorModel],
        ///         message: string,
        ///         target: string
        ///       }
        ///     ],
        ///     message: string,
        ///     target: string
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> UpdateAccountPropertiesAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewAccountClient.UpdateAccountProperties");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateAccountPropertiesRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates an account. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <example>
        /// This sample shows how to call UpdateAccountProperties with all request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-account-name.azure.com>");
        /// var client = new PurviewAccountClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     friendlyName = "<DataPlaneAccountUpdateParametersFriendlyName>",
        /// };
        /// 
        /// Response response = client.UpdateAccountProperties(RequestContent.Create(data));
        /// JsonElement result = JsonDocument.Parse(GetContentFromResponse(response)).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("identity").GetProperty("principalId").ToString());
        /// Console.WriteLine(result.GetProperty("identity").GetProperty("tenantId").ToString());
        /// Console.WriteLine(result.GetProperty("identity").GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("location").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("cloudConnectors").GetProperty("awsExternalId").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("createdAt").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("createdByObjectId").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("endpoints").GetProperty("catalog").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("endpoints").GetProperty("guardian").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("endpoints").GetProperty("scan").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("friendlyName").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("managedResourceGroupName").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("managedResources").GetProperty("eventHubNamespace").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("managedResources").GetProperty("resourceGroup").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("managedResources").GetProperty("storageAccount").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("privateEndpointConnections").Item[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("privateEndpointConnections").Item[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("privateEndpointConnections").Item[0].GetProperty("properties").GetProperty("privateEndpoint").GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("privateEndpointConnections").Item[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("actionsRequired").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("privateEndpointConnections").Item[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("privateEndpointConnections").Item[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("privateEndpointConnections").Item[0].GetProperty("properties").GetProperty("provisioningState").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("privateEndpointConnections").Item[0].GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("publicNetworkAccess").ToString());
        /// Console.WriteLine(result.GetProperty("sku").GetProperty("capacity").ToString());
        /// Console.WriteLine(result.GetProperty("sku").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
        /// Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
        /// Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
        /// Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
        /// Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
        /// Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("type").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   friendlyName: string
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   identity: {
        ///     principalId: string,
        ///     tenantId: string,
        ///     type: &quot;SystemAssigned&quot;
        ///   },
        ///   location: string,
        ///   name: string,
        ///   properties: {
        ///     cloudConnectors: {
        ///       awsExternalId: string
        ///     },
        ///     createdAt: string (ISO 8601 Format),
        ///     createdBy: string,
        ///     createdByObjectId: string,
        ///     endpoints: {
        ///       catalog: string,
        ///       guardian: string,
        ///       scan: string
        ///     },
        ///     friendlyName: string,
        ///     managedResourceGroupName: string,
        ///     managedResources: {
        ///       eventHubNamespace: string,
        ///       resourceGroup: string,
        ///       storageAccount: string
        ///     },
        ///     privateEndpointConnections: [
        ///       {
        ///         id: string,
        ///         name: string,
        ///         properties: {
        ///           privateEndpoint: {
        ///             id: string
        ///           },
        ///           privateLinkServiceConnectionState: {
        ///             actionsRequired: string,
        ///             description: string,
        ///             status: &quot;Unknown&quot; | &quot;Pending&quot; | &quot;Approved&quot; | &quot;Rejected&quot; | &quot;Disconnected&quot;
        ///           },
        ///           provisioningState: string
        ///         },
        ///         type: string
        ///       }
        ///     ],
        ///     provisioningState: &quot;Unknown&quot; | &quot;Creating&quot; | &quot;Moving&quot; | &quot;Deleting&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;Failed&quot; | &quot;Succeeded&quot; | &quot;Canceled&quot;,
        ///     publicNetworkAccess: &quot;NotSpecified&quot; | &quot;Enabled&quot; | &quot;Disabled&quot;
        ///   },
        ///   sku: {
        ///     capacity: number,
        ///     name: &quot;Standard&quot;
        ///   },
        ///   systemData: {
        ///     createdAt: string (ISO 8601 Format),
        ///     createdBy: string,
        ///     createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;,
        ///     lastModifiedAt: string (ISO 8601 Format),
        ///     lastModifiedBy: string,
        ///     lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;
        ///   },
        ///   tags: Dictionary&lt;string, string&gt;,
        ///   type: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         details: [ErrorModel],
        ///         message: string,
        ///         target: string
        ///       }
        ///     ],
        ///     message: string,
        ///     target: string
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response UpdateAccountProperties(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewAccountClient.UpdateAccountProperties");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateAccountPropertiesRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List the authorization keys associated with this account. </summary>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <example>
        /// This sample shows how to call GetAccessKeysAsync and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-account-name.azure.com>");
        /// var client = new PurviewAccountClient(endpoint, credential);
        /// 
        /// Response response = await client.GetAccessKeysAsync();
        /// JsonElement result = JsonDocument.Parse(GetContentFromResponse(response)).RootElement;
        /// Console.WriteLine(result.GetProperty("atlasKafkaPrimaryEndpoint").ToString());
        /// Console.WriteLine(result.GetProperty("atlasKafkaSecondaryEndpoint").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   atlasKafkaPrimaryEndpoint: string,
        ///   atlasKafkaSecondaryEndpoint: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         details: [ErrorModel],
        ///         message: string,
        ///         target: string
        ///       }
        ///     ],
        ///     message: string,
        ///     target: string
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetAccessKeysAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PurviewAccountClient.GetAccessKeys");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAccessKeysRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List the authorization keys associated with this account. </summary>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <example>
        /// This sample shows how to call GetAccessKeys and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-account-name.azure.com>");
        /// var client = new PurviewAccountClient(endpoint, credential);
        /// 
        /// Response response = client.GetAccessKeys();
        /// JsonElement result = JsonDocument.Parse(GetContentFromResponse(response)).RootElement;
        /// Console.WriteLine(result.GetProperty("atlasKafkaPrimaryEndpoint").ToString());
        /// Console.WriteLine(result.GetProperty("atlasKafkaSecondaryEndpoint").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   atlasKafkaPrimaryEndpoint: string,
        ///   atlasKafkaSecondaryEndpoint: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         details: [ErrorModel],
        ///         message: string,
        ///         target: string
        ///       }
        ///     ],
        ///     message: string,
        ///     target: string
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetAccessKeys(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PurviewAccountClient.GetAccessKeys");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAccessKeysRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Regenerate the authorization keys associated with this data catalog. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <example>
        /// This sample shows how to call RegenerateAccessKeyAsync with all request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-account-name.azure.com>");
        /// var client = new PurviewAccountClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     keyType = "<PrimaryAtlasKafkaKey>",
        /// };
        /// 
        /// Response response = await client.RegenerateAccessKeyAsync(RequestContent.Create(data));
        /// JsonElement result = JsonDocument.Parse(GetContentFromResponse(response)).RootElement;
        /// Console.WriteLine(result.GetProperty("atlasKafkaPrimaryEndpoint").ToString());
        /// Console.WriteLine(result.GetProperty("atlasKafkaSecondaryEndpoint").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   keyType: &quot;PrimaryAtlasKafkaKey&quot; | &quot;SecondaryAtlasKafkaKey&quot;
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   atlasKafkaPrimaryEndpoint: string,
        ///   atlasKafkaSecondaryEndpoint: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         details: [ErrorModel],
        ///         message: string,
        ///         target: string
        ///       }
        ///     ],
        ///     message: string,
        ///     target: string
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> RegenerateAccessKeyAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewAccountClient.RegenerateAccessKey");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRegenerateAccessKeyRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Regenerate the authorization keys associated with this data catalog. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <example>
        /// This sample shows how to call RegenerateAccessKey with all request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-account-name.azure.com>");
        /// var client = new PurviewAccountClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     keyType = "<PrimaryAtlasKafkaKey>",
        /// };
        /// 
        /// Response response = client.RegenerateAccessKey(RequestContent.Create(data));
        /// JsonElement result = JsonDocument.Parse(GetContentFromResponse(response)).RootElement;
        /// Console.WriteLine(result.GetProperty("atlasKafkaPrimaryEndpoint").ToString());
        /// Console.WriteLine(result.GetProperty("atlasKafkaSecondaryEndpoint").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   keyType: &quot;PrimaryAtlasKafkaKey&quot; | &quot;SecondaryAtlasKafkaKey&quot;
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   atlasKafkaPrimaryEndpoint: string,
        ///   atlasKafkaSecondaryEndpoint: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         details: [ErrorModel],
        ///         message: string,
        ///         target: string
        ///       }
        ///     ],
        ///     message: string,
        ///     target: string
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response RegenerateAccessKey(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewAccountClient.RegenerateAccessKey");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRegenerateAccessKeyRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List the collections in the account. </summary>
        /// <param name="skipToken"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <example>
        /// This sample shows how to call GetCollectionsAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-account-name.azure.com>");
        /// var client = new PurviewAccountClient(endpoint, credential);
        /// 
        /// Response response = await client.GetCollectionsAsync("<skipToken>");
        /// JsonElement result = JsonDocument.Parse(GetContentFromResponse(response)).RootElement;
        /// Console.WriteLine(result.GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("nextLink").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("collectionProvisioningState").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("friendlyName").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("parentCollection").GetProperty("referenceName").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("parentCollection").GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("systemData").GetProperty("createdAt").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("systemData").GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("systemData").GetProperty("createdByType").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   count: number,
        ///   nextLink: string,
        ///   value: [
        ///     {
        ///       collectionProvisioningState: &quot;Unknown&quot; | &quot;Creating&quot; | &quot;Moving&quot; | &quot;Deleting&quot; | &quot;Failed&quot; | &quot;Succeeded&quot;,
        ///       description: string,
        ///       friendlyName: string,
        ///       name: string,
        ///       parentCollection: {
        ///         referenceName: string,
        ///         type: string
        ///       },
        ///       systemData: {
        ///         createdAt: string (ISO 8601 Format),
        ///         createdBy: string,
        ///         createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;,
        ///         lastModifiedAt: string (ISO 8601 Format),
        ///         lastModifiedBy: string,
        ///         lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         details: [ErrorModel],
        ///         message: string,
        ///         target: string
        ///       }
        ///     ],
        ///     message: string,
        ///     target: string
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetCollectionsAsync(string skipToken = null, RequestContext context = null)
        {
            return GetCollectionsImplementationAsync("PurviewAccountClient.GetCollections", skipToken, context);
        }

        private AsyncPageable<BinaryData> GetCollectionsImplementationAsync(string diagnosticsScopeName, string skipToken, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetCollectionsRequest(skipToken, context)
                        : CreateGetCollectionsNextPageRequest(nextLink, skipToken, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> List the collections in the account. </summary>
        /// <param name="skipToken"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <example>
        /// This sample shows how to call GetCollections with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-account-name.azure.com>");
        /// var client = new PurviewAccountClient(endpoint, credential);
        /// 
        /// Response response = client.GetCollections("<skipToken>");
        /// JsonElement result = JsonDocument.Parse(GetContentFromResponse(response)).RootElement;
        /// Console.WriteLine(result.GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("nextLink").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("collectionProvisioningState").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("friendlyName").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("parentCollection").GetProperty("referenceName").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("parentCollection").GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("systemData").GetProperty("createdAt").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("systemData").GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("systemData").GetProperty("createdByType").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   count: number,
        ///   nextLink: string,
        ///   value: [
        ///     {
        ///       collectionProvisioningState: &quot;Unknown&quot; | &quot;Creating&quot; | &quot;Moving&quot; | &quot;Deleting&quot; | &quot;Failed&quot; | &quot;Succeeded&quot;,
        ///       description: string,
        ///       friendlyName: string,
        ///       name: string,
        ///       parentCollection: {
        ///         referenceName: string,
        ///         type: string
        ///       },
        ///       systemData: {
        ///         createdAt: string (ISO 8601 Format),
        ///         createdBy: string,
        ///         createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;,
        ///         lastModifiedAt: string (ISO 8601 Format),
        ///         lastModifiedBy: string,
        ///         lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         details: [ErrorModel],
        ///         message: string,
        ///         target: string
        ///       }
        ///     ],
        ///     message: string,
        ///     target: string
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetCollections(string skipToken = null, RequestContext context = null)
        {
            return GetCollectionsImplementation("PurviewAccountClient.GetCollections", skipToken, context);
        }

        private Pageable<BinaryData> GetCollectionsImplementation(string diagnosticsScopeName, string skipToken, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetCollectionsRequest(skipToken, context)
                        : CreateGetCollectionsNextPageRequest(nextLink, skipToken, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Get a resource set config service model. </summary>
        /// <param name="skipToken"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <example>
        /// This sample shows how to call GetResourceSetRulesAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-account-name.azure.com>");
        /// var client = new PurviewAccountClient(endpoint, credential);
        /// 
        /// Response response = await client.GetResourceSetRulesAsync("<skipToken>");
        /// JsonElement result = JsonDocument.Parse(GetContentFromResponse(response)).RootElement;
        /// Console.WriteLine(result.GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("nextLink").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("advancedResourceSet").GetProperty("modifiedAt").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("advancedResourceSet").GetProperty("resourceSetProcessing").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("acceptedPatterns").Item[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("acceptedPatterns").Item[0].GetProperty("filterType").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("acceptedPatterns").Item[0].GetProperty("lastUpdatedTimestamp").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("acceptedPatterns").Item[0].GetProperty("modifiedBy").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("acceptedPatterns").Item[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("acceptedPatterns").Item[0].GetProperty("path").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("complexReplacers").Item[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("complexReplacers").Item[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("complexReplacers").Item[0].GetProperty("disabled").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("complexReplacers").Item[0].GetProperty("disableRecursiveReplacerApplication").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("complexReplacers").Item[0].GetProperty("lastUpdatedTimestamp").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("complexReplacers").Item[0].GetProperty("modifiedBy").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("complexReplacers").Item[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("complexReplacers").Item[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("enableDefaultPatterns").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("lastUpdatedTimestamp").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("modifiedBy").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("normalizationRules").Item[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("normalizationRules").Item[0].GetProperty("disabled").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("normalizationRules").Item[0].GetProperty("dynamicReplacement").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("normalizationRules").Item[0].GetProperty("entityTypes").Item[0].ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("normalizationRules").Item[0].GetProperty("lastUpdatedTimestamp").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("normalizationRules").Item[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("normalizationRules").Item[0].GetProperty("regex").GetProperty("maxDigits").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("normalizationRules").Item[0].GetProperty("regex").GetProperty("maxLetters").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("normalizationRules").Item[0].GetProperty("regex").GetProperty("minDashes").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("normalizationRules").Item[0].GetProperty("regex").GetProperty("minDigits").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("normalizationRules").Item[0].GetProperty("regex").GetProperty("minDigitsOrLetters").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("normalizationRules").Item[0].GetProperty("regex").GetProperty("minDots").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("normalizationRules").Item[0].GetProperty("regex").GetProperty("minHex").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("normalizationRules").Item[0].GetProperty("regex").GetProperty("minLetters").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("normalizationRules").Item[0].GetProperty("regex").GetProperty("minUnderscores").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("normalizationRules").Item[0].GetProperty("regex").GetProperty("options").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("normalizationRules").Item[0].GetProperty("regex").GetProperty("regexStr").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("normalizationRules").Item[0].GetProperty("replaceWith").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("normalizationRules").Item[0].GetProperty("version").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("condition").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("disabled").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("disableRecursiveReplacerApplication").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("doNotReplaceRegex").GetProperty("maxDigits").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("doNotReplaceRegex").GetProperty("maxLetters").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("doNotReplaceRegex").GetProperty("minDashes").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("doNotReplaceRegex").GetProperty("minDigits").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("doNotReplaceRegex").GetProperty("minDigitsOrLetters").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("doNotReplaceRegex").GetProperty("minDots").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("doNotReplaceRegex").GetProperty("minHex").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("doNotReplaceRegex").GetProperty("minLetters").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("doNotReplaceRegex").GetProperty("minUnderscores").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("doNotReplaceRegex").GetProperty("options").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("doNotReplaceRegex").GetProperty("regexStr").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("lastUpdatedTimestamp").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("modifiedBy").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("regex").GetProperty("maxDigits").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("regex").GetProperty("maxLetters").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("regex").GetProperty("minDashes").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("regex").GetProperty("minDigits").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("regex").GetProperty("minDigitsOrLetters").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("regex").GetProperty("minDots").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("regex").GetProperty("minHex").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("regex").GetProperty("minLetters").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("regex").GetProperty("minUnderscores").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("regex").GetProperty("options").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("regex").GetProperty("regexStr").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("replaceWith").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("rejectedPatterns").Item[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("rejectedPatterns").Item[0].GetProperty("filterType").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("rejectedPatterns").Item[0].GetProperty("lastUpdatedTimestamp").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("rejectedPatterns").Item[0].GetProperty("modifiedBy").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("rejectedPatterns").Item[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("rejectedPatterns").Item[0].GetProperty("path").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("scopedRules").Item[0].GetProperty("bindingUrl").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("scopedRules").Item[0].GetProperty("rules").Item[0].GetProperty("displayName").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("scopedRules").Item[0].GetProperty("rules").Item[0].GetProperty("isResourceSet").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("scopedRules").Item[0].GetProperty("rules").Item[0].GetProperty("lastUpdatedTimestamp").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("scopedRules").Item[0].GetProperty("rules").Item[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("scopedRules").Item[0].GetProperty("rules").Item[0].GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("scopedRules").Item[0].GetProperty("storeType").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("version").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   count: number,
        ///   nextLink: string,
        ///   value: [
        ///     {
        ///       advancedResourceSet: {
        ///         modifiedAt: string (ISO 8601 Format),
        ///         resourceSetProcessing: &quot;Default&quot; | &quot;Advanced&quot;
        ///       },
        ///       name: string,
        ///       pathPatternConfig: {
        ///         acceptedPatterns: [
        ///           {
        ///             createdBy: string,
        ///             filterType: &quot;Pattern&quot; | &quot;Regex&quot;,
        ///             lastUpdatedTimestamp: number,
        ///             modifiedBy: string,
        ///             name: string,
        ///             path: string
        ///           }
        ///         ],
        ///         complexReplacers: [
        ///           {
        ///             createdBy: string,
        ///             description: string,
        ///             disabled: boolean,
        ///             disableRecursiveReplacerApplication: boolean,
        ///             lastUpdatedTimestamp: number,
        ///             modifiedBy: string,
        ///             name: string,
        ///             typeName: string
        ///           }
        ///         ],
        ///         createdBy: string,
        ///         enableDefaultPatterns: boolean,
        ///         lastUpdatedTimestamp: number,
        ///         modifiedBy: string,
        ///         normalizationRules: [
        ///           {
        ///             description: string,
        ///             disabled: boolean,
        ///             dynamicReplacement: boolean,
        ///             entityTypes: [string],
        ///             lastUpdatedTimestamp: number,
        ///             name: string,
        ///             regex: {
        ///               maxDigits: number,
        ///               maxLetters: number,
        ///               minDashes: number,
        ///               minDigits: number,
        ///               minDigitsOrLetters: number,
        ///               minDots: number,
        ///               minHex: number,
        ///               minLetters: number,
        ///               minUnderscores: number,
        ///               options: number,
        ///               regexStr: string
        ///             },
        ///             replaceWith: string,
        ///             version: number
        ///           }
        ///         ],
        ///         regexReplacers: [
        ///           {
        ///             condition: string,
        ///             createdBy: string,
        ///             description: string,
        ///             disabled: boolean,
        ///             disableRecursiveReplacerApplication: boolean,
        ///             doNotReplaceRegex: FastRegex,
        ///             lastUpdatedTimestamp: number,
        ///             modifiedBy: string,
        ///             name: string,
        ///             regex: FastRegex,
        ///             replaceWith: string
        ///           }
        ///         ],
        ///         rejectedPatterns: [Filter],
        ///         scopedRules: [
        ///           {
        ///             bindingUrl: string,
        ///             rules: [
        ///               {
        ///                 displayName: string,
        ///                 isResourceSet: boolean,
        ///                 lastUpdatedTimestamp: number,
        ///                 name: string,
        ///                 qualifiedName: string
        ///               }
        ///             ],
        ///             storeType: string
        ///           }
        ///         ],
        ///         version: number
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         details: [ErrorModel],
        ///         message: string,
        ///         target: string
        ///       }
        ///     ],
        ///     message: string,
        ///     target: string
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetResourceSetRulesAsync(string skipToken = null, RequestContext context = null)
        {
            return GetResourceSetRulesImplementationAsync("PurviewAccountClient.GetResourceSetRules", skipToken, context);
        }

        private AsyncPageable<BinaryData> GetResourceSetRulesImplementationAsync(string diagnosticsScopeName, string skipToken, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetResourceSetRulesRequest(skipToken, context)
                        : CreateGetResourceSetRulesNextPageRequest(nextLink, skipToken, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Get a resource set config service model. </summary>
        /// <param name="skipToken"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <example>
        /// This sample shows how to call GetResourceSetRules with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-account-name.azure.com>");
        /// var client = new PurviewAccountClient(endpoint, credential);
        /// 
        /// Response response = client.GetResourceSetRules("<skipToken>");
        /// JsonElement result = JsonDocument.Parse(GetContentFromResponse(response)).RootElement;
        /// Console.WriteLine(result.GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("nextLink").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("advancedResourceSet").GetProperty("modifiedAt").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("advancedResourceSet").GetProperty("resourceSetProcessing").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("acceptedPatterns").Item[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("acceptedPatterns").Item[0].GetProperty("filterType").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("acceptedPatterns").Item[0].GetProperty("lastUpdatedTimestamp").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("acceptedPatterns").Item[0].GetProperty("modifiedBy").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("acceptedPatterns").Item[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("acceptedPatterns").Item[0].GetProperty("path").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("complexReplacers").Item[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("complexReplacers").Item[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("complexReplacers").Item[0].GetProperty("disabled").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("complexReplacers").Item[0].GetProperty("disableRecursiveReplacerApplication").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("complexReplacers").Item[0].GetProperty("lastUpdatedTimestamp").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("complexReplacers").Item[0].GetProperty("modifiedBy").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("complexReplacers").Item[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("complexReplacers").Item[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("enableDefaultPatterns").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("lastUpdatedTimestamp").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("modifiedBy").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("normalizationRules").Item[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("normalizationRules").Item[0].GetProperty("disabled").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("normalizationRules").Item[0].GetProperty("dynamicReplacement").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("normalizationRules").Item[0].GetProperty("entityTypes").Item[0].ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("normalizationRules").Item[0].GetProperty("lastUpdatedTimestamp").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("normalizationRules").Item[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("normalizationRules").Item[0].GetProperty("regex").GetProperty("maxDigits").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("normalizationRules").Item[0].GetProperty("regex").GetProperty("maxLetters").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("normalizationRules").Item[0].GetProperty("regex").GetProperty("minDashes").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("normalizationRules").Item[0].GetProperty("regex").GetProperty("minDigits").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("normalizationRules").Item[0].GetProperty("regex").GetProperty("minDigitsOrLetters").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("normalizationRules").Item[0].GetProperty("regex").GetProperty("minDots").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("normalizationRules").Item[0].GetProperty("regex").GetProperty("minHex").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("normalizationRules").Item[0].GetProperty("regex").GetProperty("minLetters").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("normalizationRules").Item[0].GetProperty("regex").GetProperty("minUnderscores").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("normalizationRules").Item[0].GetProperty("regex").GetProperty("options").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("normalizationRules").Item[0].GetProperty("regex").GetProperty("regexStr").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("normalizationRules").Item[0].GetProperty("replaceWith").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("normalizationRules").Item[0].GetProperty("version").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("condition").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("disabled").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("disableRecursiveReplacerApplication").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("doNotReplaceRegex").GetProperty("maxDigits").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("doNotReplaceRegex").GetProperty("maxLetters").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("doNotReplaceRegex").GetProperty("minDashes").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("doNotReplaceRegex").GetProperty("minDigits").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("doNotReplaceRegex").GetProperty("minDigitsOrLetters").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("doNotReplaceRegex").GetProperty("minDots").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("doNotReplaceRegex").GetProperty("minHex").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("doNotReplaceRegex").GetProperty("minLetters").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("doNotReplaceRegex").GetProperty("minUnderscores").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("doNotReplaceRegex").GetProperty("options").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("doNotReplaceRegex").GetProperty("regexStr").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("lastUpdatedTimestamp").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("modifiedBy").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("regex").GetProperty("maxDigits").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("regex").GetProperty("maxLetters").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("regex").GetProperty("minDashes").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("regex").GetProperty("minDigits").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("regex").GetProperty("minDigitsOrLetters").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("regex").GetProperty("minDots").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("regex").GetProperty("minHex").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("regex").GetProperty("minLetters").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("regex").GetProperty("minUnderscores").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("regex").GetProperty("options").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("regex").GetProperty("regexStr").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("regexReplacers").Item[0].GetProperty("replaceWith").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("rejectedPatterns").Item[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("rejectedPatterns").Item[0].GetProperty("filterType").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("rejectedPatterns").Item[0].GetProperty("lastUpdatedTimestamp").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("rejectedPatterns").Item[0].GetProperty("modifiedBy").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("rejectedPatterns").Item[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("rejectedPatterns").Item[0].GetProperty("path").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("scopedRules").Item[0].GetProperty("bindingUrl").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("scopedRules").Item[0].GetProperty("rules").Item[0].GetProperty("displayName").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("scopedRules").Item[0].GetProperty("rules").Item[0].GetProperty("isResourceSet").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("scopedRules").Item[0].GetProperty("rules").Item[0].GetProperty("lastUpdatedTimestamp").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("scopedRules").Item[0].GetProperty("rules").Item[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("scopedRules").Item[0].GetProperty("rules").Item[0].GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("scopedRules").Item[0].GetProperty("storeType").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pathPatternConfig").GetProperty("version").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   count: number,
        ///   nextLink: string,
        ///   value: [
        ///     {
        ///       advancedResourceSet: {
        ///         modifiedAt: string (ISO 8601 Format),
        ///         resourceSetProcessing: &quot;Default&quot; | &quot;Advanced&quot;
        ///       },
        ///       name: string,
        ///       pathPatternConfig: {
        ///         acceptedPatterns: [
        ///           {
        ///             createdBy: string,
        ///             filterType: &quot;Pattern&quot; | &quot;Regex&quot;,
        ///             lastUpdatedTimestamp: number,
        ///             modifiedBy: string,
        ///             name: string,
        ///             path: string
        ///           }
        ///         ],
        ///         complexReplacers: [
        ///           {
        ///             createdBy: string,
        ///             description: string,
        ///             disabled: boolean,
        ///             disableRecursiveReplacerApplication: boolean,
        ///             lastUpdatedTimestamp: number,
        ///             modifiedBy: string,
        ///             name: string,
        ///             typeName: string
        ///           }
        ///         ],
        ///         createdBy: string,
        ///         enableDefaultPatterns: boolean,
        ///         lastUpdatedTimestamp: number,
        ///         modifiedBy: string,
        ///         normalizationRules: [
        ///           {
        ///             description: string,
        ///             disabled: boolean,
        ///             dynamicReplacement: boolean,
        ///             entityTypes: [string],
        ///             lastUpdatedTimestamp: number,
        ///             name: string,
        ///             regex: {
        ///               maxDigits: number,
        ///               maxLetters: number,
        ///               minDashes: number,
        ///               minDigits: number,
        ///               minDigitsOrLetters: number,
        ///               minDots: number,
        ///               minHex: number,
        ///               minLetters: number,
        ///               minUnderscores: number,
        ///               options: number,
        ///               regexStr: string
        ///             },
        ///             replaceWith: string,
        ///             version: number
        ///           }
        ///         ],
        ///         regexReplacers: [
        ///           {
        ///             condition: string,
        ///             createdBy: string,
        ///             description: string,
        ///             disabled: boolean,
        ///             disableRecursiveReplacerApplication: boolean,
        ///             doNotReplaceRegex: FastRegex,
        ///             lastUpdatedTimestamp: number,
        ///             modifiedBy: string,
        ///             name: string,
        ///             regex: FastRegex,
        ///             replaceWith: string
        ///           }
        ///         ],
        ///         rejectedPatterns: [Filter],
        ///         scopedRules: [
        ///           {
        ///             bindingUrl: string,
        ///             rules: [
        ///               {
        ///                 displayName: string,
        ///                 isResourceSet: boolean,
        ///                 lastUpdatedTimestamp: number,
        ///                 name: string,
        ///                 qualifiedName: string
        ///               }
        ///             ],
        ///             storeType: string
        ///           }
        ///         ],
        ///         version: number
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         details: [ErrorModel],
        ///         message: string,
        ///         target: string
        ///       }
        ///     ],
        ///     message: string,
        ///     target: string
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetResourceSetRules(string skipToken = null, RequestContext context = null)
        {
            return GetResourceSetRulesImplementation("PurviewAccountClient.GetResourceSetRules", skipToken, context);
        }

        private Pageable<BinaryData> GetResourceSetRulesImplementation(string diagnosticsScopeName, string skipToken, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetResourceSetRulesRequest(skipToken, context)
                        : CreateGetResourceSetRulesNextPageRequest(nextLink, skipToken, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        private PurviewResourceSetRule _cachedPurviewResourceSetRule;

        /// <summary> Initializes a new instance of PurviewCollection. </summary>
        /// <param name="collectionName"> The String to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual PurviewCollection GetPurviewCollectionClient(string collectionName)
        {
            Argument.AssertNotNullOrEmpty(collectionName, nameof(collectionName));

            return new PurviewCollection(ClientDiagnostics, _pipeline, _tokenCredential, _endpoint, collectionName);
        }

        /// <summary> Initializes a new instance of PurviewResourceSetRule. </summary>
        public virtual PurviewResourceSetRule GetPurviewResourceSetRuleClient()
        {
            return Volatile.Read(ref _cachedPurviewResourceSetRule) ?? Interlocked.CompareExchange(ref _cachedPurviewResourceSetRule, new PurviewResourceSetRule(ClientDiagnostics, _pipeline, _tokenCredential, _endpoint), null) ?? _cachedPurviewResourceSetRule;
        }

        internal HttpMessage CreateGetAccountPropertiesRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/", false);
            uri.AppendQuery("api-version", "2019-11-01-preview", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateUpdateAccountPropertiesRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/", false);
            uri.AppendQuery("api-version", "2019-11-01-preview", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetAccessKeysRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/listkeys", false);
            uri.AppendQuery("api-version", "2019-11-01-preview", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateRegenerateAccessKeyRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/regeneratekeys", false);
            uri.AppendQuery("api-version", "2019-11-01-preview", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetCollectionsRequest(string skipToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/collections", false);
            uri.AppendQuery("api-version", "2019-11-01-preview", true);
            if (skipToken != null)
            {
                uri.AppendQuery("$skipToken", skipToken, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetResourceSetRulesRequest(string skipToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/resourceSetRuleConfigs", false);
            uri.AppendQuery("api-version", "2019-11-01-preview", true);
            if (skipToken != null)
            {
                uri.AppendQuery("$skipToken", skipToken, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetCollectionsNextPageRequest(string nextLink, string skipToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetResourceSetRulesNextPageRequest(string nextLink, string skipToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
