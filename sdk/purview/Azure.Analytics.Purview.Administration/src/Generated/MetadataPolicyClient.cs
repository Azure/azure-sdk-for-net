// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Purview.Administration
{
    /// <summary> The MetadataPolicy service client. </summary>
    public partial class MetadataPolicyClient
    {
        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get => _pipeline; }
        private HttpPipeline _pipeline;
        private readonly string[] AuthorizationScopes = { "https://purview.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private string endpoint;
        private string collectionName;
        private readonly string apiVersion;
        private readonly ClientDiagnostics _clientDiagnostics;

        /// <summary> Initializes a new instance of MetadataPolicyClient for mocking. </summary>
        protected MetadataPolicyClient()
        {
        }

        /// <summary> Initializes a new instance of MetadataPolicyClient. </summary>
        /// <param name="endpoint"> The endpoint of your Purview account. Example: https://{accountName}.purview.azure.com. </param>
        /// <param name="collectionName"> The String to use. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public MetadataPolicyClient(string endpoint, string collectionName, TokenCredential credential, PurviewMetadataClientOptions options = null)
        {
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }
            if (collectionName == null)
            {
                throw new ArgumentNullException(nameof(collectionName));
            }
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }

            options ??= new PurviewMetadataClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _tokenCredential = credential;
            var authPolicy = new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes);
            _pipeline = HttpPipelineBuilder.Build(options, new HttpPipelinePolicy[] { new LowLevelCallbackPolicy() }, new HttpPipelinePolicy[] { authPolicy }, new ResponseClassifier());
            this.endpoint = endpoint;
            this.collectionName = collectionName;
            apiVersion = options.Version;
        }

        /// <summary> List or Get metadata policies. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       name: string,
        ///       id: string,
        ///       version: number,
        ///       properties: {
        ///         description: string,
        ///         decisionRules: [
        ///           {
        ///             kind: &quot;decisionrule&quot; | &quot;attributerule&quot;,
        ///             effect: &quot;Deny&quot; | &quot;Permit&quot;,
        ///             dnfCondition: [AttributeMatcher[]]
        ///           }
        ///         ],
        ///         attributeRules: [
        ///           {
        ///             kind: &quot;decisionrule&quot; | &quot;attributerule&quot;,
        ///             id: string,
        ///             name: string,
        ///             dnfCondition: [AttributeMatcher[]]
        ///           }
        ///         ],
        ///         collection: {
        ///           type: string,
        ///           referenceName: string
        ///         },
        ///         parentCollectionName: string
        ///       }
        ///     }
        ///   ],
        ///   nextLink: string
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [ErrorModel]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetMetadataPoliciesAsync(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetMetadataPoliciesRequest();
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("MetadataPolicyClient.GetMetadataPolicies");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List or Get metadata policies. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       name: string,
        ///       id: string,
        ///       version: number,
        ///       properties: {
        ///         description: string,
        ///         decisionRules: [
        ///           {
        ///             kind: &quot;decisionrule&quot; | &quot;attributerule&quot;,
        ///             effect: &quot;Deny&quot; | &quot;Permit&quot;,
        ///             dnfCondition: [AttributeMatcher[]]
        ///           }
        ///         ],
        ///         attributeRules: [
        ///           {
        ///             kind: &quot;decisionrule&quot; | &quot;attributerule&quot;,
        ///             id: string,
        ///             name: string,
        ///             dnfCondition: [AttributeMatcher[]]
        ///           }
        ///         ],
        ///         collection: {
        ///           type: string,
        ///           referenceName: string
        ///         },
        ///         parentCollectionName: string
        ///       }
        ///     }
        ///   ],
        ///   nextLink: string
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [ErrorModel]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetMetadataPolicies(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetMetadataPoliciesRequest();
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("MetadataPolicyClient.GetMetadataPolicies");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateGetMetadataPoliciesRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendRaw("/policyStore", false);
            uri.AppendPath("/metadataPolicies", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Updates a metadata policy. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   name: string,
        ///   id: string,
        ///   version: number,
        ///   properties: {
        ///     description: string,
        ///     decisionRules: [
        ///       {
        ///         kind: &quot;decisionrule&quot; | &quot;attributerule&quot;,
        ///         effect: &quot;Deny&quot; | &quot;Permit&quot;,
        ///         dnfCondition: [AttributeMatcher[]]
        ///       }
        ///     ],
        ///     attributeRules: [
        ///       {
        ///         kind: &quot;decisionrule&quot; | &quot;attributerule&quot;,
        ///         id: string,
        ///         name: string,
        ///         dnfCondition: [AttributeMatcher[]]
        ///       }
        ///     ],
        ///     collection: {
        ///       type: string,
        ///       referenceName: string
        ///     },
        ///     parentCollectionName: string
        ///   }
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   name: string,
        ///   id: string,
        ///   version: number,
        ///   properties: {
        ///     description: string,
        ///     decisionRules: [
        ///       {
        ///         kind: &quot;decisionrule&quot; | &quot;attributerule&quot;,
        ///         effect: &quot;Deny&quot; | &quot;Permit&quot;,
        ///         dnfCondition: [AttributeMatcher[]]
        ///       }
        ///     ],
        ///     attributeRules: [
        ///       {
        ///         kind: &quot;decisionrule&quot; | &quot;attributerule&quot;,
        ///         id: string,
        ///         name: string,
        ///         dnfCondition: [AttributeMatcher[]]
        ///       }
        ///     ],
        ///     collection: {
        ///       type: string,
        ///       referenceName: string
        ///     },
        ///     parentCollectionName: string
        ///   }
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [ErrorModel]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="policyId"> Unique policy id. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> UpdateAsync(string policyId, RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateUpdateRequest(policyId, content);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("MetadataPolicyClient.Update");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates a metadata policy. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   name: string,
        ///   id: string,
        ///   version: number,
        ///   properties: {
        ///     description: string,
        ///     decisionRules: [
        ///       {
        ///         kind: &quot;decisionrule&quot; | &quot;attributerule&quot;,
        ///         effect: &quot;Deny&quot; | &quot;Permit&quot;,
        ///         dnfCondition: [AttributeMatcher[]]
        ///       }
        ///     ],
        ///     attributeRules: [
        ///       {
        ///         kind: &quot;decisionrule&quot; | &quot;attributerule&quot;,
        ///         id: string,
        ///         name: string,
        ///         dnfCondition: [AttributeMatcher[]]
        ///       }
        ///     ],
        ///     collection: {
        ///       type: string,
        ///       referenceName: string
        ///     },
        ///     parentCollectionName: string
        ///   }
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   name: string,
        ///   id: string,
        ///   version: number,
        ///   properties: {
        ///     description: string,
        ///     decisionRules: [
        ///       {
        ///         kind: &quot;decisionrule&quot; | &quot;attributerule&quot;,
        ///         effect: &quot;Deny&quot; | &quot;Permit&quot;,
        ///         dnfCondition: [AttributeMatcher[]]
        ///       }
        ///     ],
        ///     attributeRules: [
        ///       {
        ///         kind: &quot;decisionrule&quot; | &quot;attributerule&quot;,
        ///         id: string,
        ///         name: string,
        ///         dnfCondition: [AttributeMatcher[]]
        ///       }
        ///     ],
        ///     collection: {
        ///       type: string,
        ///       referenceName: string
        ///     },
        ///     parentCollectionName: string
        ///   }
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [ErrorModel]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="policyId"> Unique policy id. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response Update(string policyId, RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateUpdateRequest(policyId, content);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("MetadataPolicyClient.Update");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateUpdateRequest(string policyId, RequestContent content)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendRaw("/policyStore", false);
            uri.AppendPath("/metadataPolicies/", false);
            uri.AppendPath(policyId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        /// <summary> Gets a metadata policy. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   name: string,
        ///   id: string,
        ///   version: number,
        ///   properties: {
        ///     description: string,
        ///     decisionRules: [
        ///       {
        ///         kind: &quot;decisionrule&quot; | &quot;attributerule&quot;,
        ///         effect: &quot;Deny&quot; | &quot;Permit&quot;,
        ///         dnfCondition: [AttributeMatcher[]]
        ///       }
        ///     ],
        ///     attributeRules: [
        ///       {
        ///         kind: &quot;decisionrule&quot; | &quot;attributerule&quot;,
        ///         id: string,
        ///         name: string,
        ///         dnfCondition: [AttributeMatcher[]]
        ///       }
        ///     ],
        ///     collection: {
        ///       type: string,
        ///       referenceName: string
        ///     },
        ///     parentCollectionName: string
        ///   }
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [ErrorModel]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="policyId"> Id of an existing policy that needs to be fetched. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetAsync(string policyId, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetRequest(policyId);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("MetadataPolicyClient.Get");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a metadata policy. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   name: string,
        ///   id: string,
        ///   version: number,
        ///   properties: {
        ///     description: string,
        ///     decisionRules: [
        ///       {
        ///         kind: &quot;decisionrule&quot; | &quot;attributerule&quot;,
        ///         effect: &quot;Deny&quot; | &quot;Permit&quot;,
        ///         dnfCondition: [AttributeMatcher[]]
        ///       }
        ///     ],
        ///     attributeRules: [
        ///       {
        ///         kind: &quot;decisionrule&quot; | &quot;attributerule&quot;,
        ///         id: string,
        ///         name: string,
        ///         dnfCondition: [AttributeMatcher[]]
        ///       }
        ///     ],
        ///     collection: {
        ///       type: string,
        ///       referenceName: string
        ///     },
        ///     parentCollectionName: string
        ///   }
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [ErrorModel]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="policyId"> Id of an existing policy that needs to be fetched. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response Get(string policyId, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetRequest(policyId);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("MetadataPolicyClient.Get");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateGetRequest(string policyId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendRaw("/policyStore", false);
            uri.AppendPath("/metadataPolicies/", false);
            uri.AppendPath(policyId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }
    }
}
