// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Analytics.Purview.Catalog.Models;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Purview.Catalog
{
    internal partial class PurviewGlossaryRestClient
    {
        private Uri endpoint;
        private string apiVersion;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of PurviewGlossaryRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> The catalog endpoint of your Purview account. Example: https://{accountName}.purview.azure.com. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="apiVersion"/> is null. </exception>
        public PurviewGlossaryRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint, string apiVersion = "2021-05-01-preview")
        {
            this.endpoint = endpoint ?? throw new ArgumentNullException(nameof(endpoint));
            this.apiVersion = apiVersion ?? throw new ArgumentNullException(nameof(apiVersion));
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateGetGlossariesRequest(int? limit, int? offset, string sort, bool? ignoreTermsAndCategories)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            if (ignoreTermsAndCategories != null)
            {
                uri.AppendQuery("ignoreTermsAndCategories", ignoreTermsAndCategories.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get all glossaries registered with Atlas. </summary>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="ignoreTermsAndCategories"> Whether ignore terms and categories. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<IReadOnlyList<AtlasGlossary>>> GetGlossariesAsync(int? limit = null, int? offset = null, string sort = null, bool? ignoreTermsAndCategories = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetGlossariesRequest(limit, offset, sort, ignoreTermsAndCategories);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<AtlasGlossary> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<AtlasGlossary> array = new List<AtlasGlossary>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(AtlasGlossary.DeserializeAtlasGlossary(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get all glossaries registered with Atlas. </summary>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="ignoreTermsAndCategories"> Whether ignore terms and categories. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<IReadOnlyList<AtlasGlossary>> GetGlossaries(int? limit = null, int? offset = null, string sort = null, bool? ignoreTermsAndCategories = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetGlossariesRequest(limit, offset, sort, ignoreTermsAndCategories);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<AtlasGlossary> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<AtlasGlossary> array = new List<AtlasGlossary>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(AtlasGlossary.DeserializeAtlasGlossary(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateGlossaryRequest(AtlasGlossary atlasGlossary)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(atlasGlossary);
            request.Content = content;
            return message;
        }

        /// <summary> Create a glossary. </summary>
        /// <param name="atlasGlossary">
        /// Glossary definition, terms &amp; categories can be anchored to a glossary.
        /// Using the anchor attribute when creating the Term/Category.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="atlasGlossary"/> is null. </exception>
        public async Task<Response<AtlasGlossary>> CreateGlossaryAsync(AtlasGlossary atlasGlossary, CancellationToken cancellationToken = default)
        {
            if (atlasGlossary == null)
            {
                throw new ArgumentNullException(nameof(atlasGlossary));
            }

            using var message = CreateCreateGlossaryRequest(atlasGlossary);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AtlasGlossary value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AtlasGlossary.DeserializeAtlasGlossary(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create a glossary. </summary>
        /// <param name="atlasGlossary">
        /// Glossary definition, terms &amp; categories can be anchored to a glossary.
        /// Using the anchor attribute when creating the Term/Category.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="atlasGlossary"/> is null. </exception>
        public Response<AtlasGlossary> CreateGlossary(AtlasGlossary atlasGlossary, CancellationToken cancellationToken = default)
        {
            if (atlasGlossary == null)
            {
                throw new ArgumentNullException(nameof(atlasGlossary));
            }

            using var message = CreateCreateGlossaryRequest(atlasGlossary);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AtlasGlossary value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AtlasGlossary.DeserializeAtlasGlossary(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateGlossaryCategoriesRequest(IEnumerable<AtlasGlossaryCategory> glossaryCategory)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/categories", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteStartArray();
            foreach (var item in glossaryCategory)
            {
                content.JsonWriter.WriteObjectValue(item);
            }
            content.JsonWriter.WriteEndArray();
            request.Content = content;
            return message;
        }

        /// <summary> Create glossary category in bulk. </summary>
        /// <param name="glossaryCategory"> An array of glossary category definitions to be created. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryCategory"/> is null. </exception>
        public async Task<Response<IReadOnlyList<AtlasGlossaryCategory>>> CreateGlossaryCategoriesAsync(IEnumerable<AtlasGlossaryCategory> glossaryCategory, CancellationToken cancellationToken = default)
        {
            if (glossaryCategory == null)
            {
                throw new ArgumentNullException(nameof(glossaryCategory));
            }

            using var message = CreateCreateGlossaryCategoriesRequest(glossaryCategory);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<AtlasGlossaryCategory> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<AtlasGlossaryCategory> array = new List<AtlasGlossaryCategory>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(AtlasGlossaryCategory.DeserializeAtlasGlossaryCategory(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create glossary category in bulk. </summary>
        /// <param name="glossaryCategory"> An array of glossary category definitions to be created. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryCategory"/> is null. </exception>
        public Response<IReadOnlyList<AtlasGlossaryCategory>> CreateGlossaryCategories(IEnumerable<AtlasGlossaryCategory> glossaryCategory, CancellationToken cancellationToken = default)
        {
            if (glossaryCategory == null)
            {
                throw new ArgumentNullException(nameof(glossaryCategory));
            }

            using var message = CreateCreateGlossaryCategoriesRequest(glossaryCategory);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<AtlasGlossaryCategory> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<AtlasGlossaryCategory> array = new List<AtlasGlossaryCategory>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(AtlasGlossaryCategory.DeserializeAtlasGlossaryCategory(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateGlossaryCategoryRequest(AtlasGlossaryCategory glossaryCategory)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/category", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(glossaryCategory);
            request.Content = content;
            return message;
        }

        /// <summary> Create a glossary category. </summary>
        /// <param name="glossaryCategory">
        /// The glossary category definition. A category must be anchored to a Glossary when creating.
        /// Optionally, terms belonging to the category and the hierarchy can also be defined during creation.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryCategory"/> is null. </exception>
        public async Task<Response<AtlasGlossaryCategory>> CreateGlossaryCategoryAsync(AtlasGlossaryCategory glossaryCategory, CancellationToken cancellationToken = default)
        {
            if (glossaryCategory == null)
            {
                throw new ArgumentNullException(nameof(glossaryCategory));
            }

            using var message = CreateCreateGlossaryCategoryRequest(glossaryCategory);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AtlasGlossaryCategory value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AtlasGlossaryCategory.DeserializeAtlasGlossaryCategory(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create a glossary category. </summary>
        /// <param name="glossaryCategory">
        /// The glossary category definition. A category must be anchored to a Glossary when creating.
        /// Optionally, terms belonging to the category and the hierarchy can also be defined during creation.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryCategory"/> is null. </exception>
        public Response<AtlasGlossaryCategory> CreateGlossaryCategory(AtlasGlossaryCategory glossaryCategory, CancellationToken cancellationToken = default)
        {
            if (glossaryCategory == null)
            {
                throw new ArgumentNullException(nameof(glossaryCategory));
            }

            using var message = CreateCreateGlossaryCategoryRequest(glossaryCategory);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AtlasGlossaryCategory value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AtlasGlossaryCategory.DeserializeAtlasGlossaryCategory(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetGlossaryCategoryRequest(string categoryGuid)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/category/", false);
            uri.AppendPath(categoryGuid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get specific glossary category by its GUID. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="categoryGuid"/> is null. </exception>
        public async Task<Response<AtlasGlossaryCategory>> GetGlossaryCategoryAsync(string categoryGuid, CancellationToken cancellationToken = default)
        {
            if (categoryGuid == null)
            {
                throw new ArgumentNullException(nameof(categoryGuid));
            }

            using var message = CreateGetGlossaryCategoryRequest(categoryGuid);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AtlasGlossaryCategory value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AtlasGlossaryCategory.DeserializeAtlasGlossaryCategory(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get specific glossary category by its GUID. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="categoryGuid"/> is null. </exception>
        public Response<AtlasGlossaryCategory> GetGlossaryCategory(string categoryGuid, CancellationToken cancellationToken = default)
        {
            if (categoryGuid == null)
            {
                throw new ArgumentNullException(nameof(categoryGuid));
            }

            using var message = CreateGetGlossaryCategoryRequest(categoryGuid);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AtlasGlossaryCategory value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AtlasGlossaryCategory.DeserializeAtlasGlossaryCategory(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateGlossaryCategoryRequest(string categoryGuid, AtlasGlossaryCategory glossaryCategory)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/category/", false);
            uri.AppendPath(categoryGuid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(glossaryCategory);
            request.Content = content;
            return message;
        }

        /// <summary> Update the given glossary category by its GUID. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="glossaryCategory"> The glossary category to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="categoryGuid"/> or <paramref name="glossaryCategory"/> is null. </exception>
        public async Task<Response<AtlasGlossaryCategory>> UpdateGlossaryCategoryAsync(string categoryGuid, AtlasGlossaryCategory glossaryCategory, CancellationToken cancellationToken = default)
        {
            if (categoryGuid == null)
            {
                throw new ArgumentNullException(nameof(categoryGuid));
            }
            if (glossaryCategory == null)
            {
                throw new ArgumentNullException(nameof(glossaryCategory));
            }

            using var message = CreateUpdateGlossaryCategoryRequest(categoryGuid, glossaryCategory);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AtlasGlossaryCategory value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AtlasGlossaryCategory.DeserializeAtlasGlossaryCategory(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update the given glossary category by its GUID. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="glossaryCategory"> The glossary category to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="categoryGuid"/> or <paramref name="glossaryCategory"/> is null. </exception>
        public Response<AtlasGlossaryCategory> UpdateGlossaryCategory(string categoryGuid, AtlasGlossaryCategory glossaryCategory, CancellationToken cancellationToken = default)
        {
            if (categoryGuid == null)
            {
                throw new ArgumentNullException(nameof(categoryGuid));
            }
            if (glossaryCategory == null)
            {
                throw new ArgumentNullException(nameof(glossaryCategory));
            }

            using var message = CreateUpdateGlossaryCategoryRequest(categoryGuid, glossaryCategory);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AtlasGlossaryCategory value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AtlasGlossaryCategory.DeserializeAtlasGlossaryCategory(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteGlossaryCategoryRequest(string categoryGuid)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/category/", false);
            uri.AppendPath(categoryGuid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete a glossary category. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="categoryGuid"/> is null. </exception>
        public async Task<Response> DeleteGlossaryCategoryAsync(string categoryGuid, CancellationToken cancellationToken = default)
        {
            if (categoryGuid == null)
            {
                throw new ArgumentNullException(nameof(categoryGuid));
            }

            using var message = CreateDeleteGlossaryCategoryRequest(categoryGuid);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete a glossary category. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="categoryGuid"/> is null. </exception>
        public Response DeleteGlossaryCategory(string categoryGuid, CancellationToken cancellationToken = default)
        {
            if (categoryGuid == null)
            {
                throw new ArgumentNullException(nameof(categoryGuid));
            }

            using var message = CreateDeleteGlossaryCategoryRequest(categoryGuid);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePartialUpdateGlossaryCategoryRequest(string categoryGuid, IDictionary<string, string> partialUpdates)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/category/", false);
            uri.AppendPath(categoryGuid, true);
            uri.AppendPath("/partial", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteStartObject();
            foreach (var item in partialUpdates)
            {
                content.JsonWriter.WritePropertyName(item.Key);
                content.JsonWriter.WriteStringValue(item.Value);
            }
            content.JsonWriter.WriteEndObject();
            request.Content = content;
            return message;
        }

        /// <summary> Update the glossary category partially. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="partialUpdates"> A map containing keys as attribute names and values as corresponding attribute values for partial update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="categoryGuid"/> or <paramref name="partialUpdates"/> is null. </exception>
        public async Task<Response<AtlasGlossaryCategory>> PartialUpdateGlossaryCategoryAsync(string categoryGuid, IDictionary<string, string> partialUpdates, CancellationToken cancellationToken = default)
        {
            if (categoryGuid == null)
            {
                throw new ArgumentNullException(nameof(categoryGuid));
            }
            if (partialUpdates == null)
            {
                throw new ArgumentNullException(nameof(partialUpdates));
            }

            using var message = CreatePartialUpdateGlossaryCategoryRequest(categoryGuid, partialUpdates);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AtlasGlossaryCategory value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AtlasGlossaryCategory.DeserializeAtlasGlossaryCategory(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update the glossary category partially. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="partialUpdates"> A map containing keys as attribute names and values as corresponding attribute values for partial update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="categoryGuid"/> or <paramref name="partialUpdates"/> is null. </exception>
        public Response<AtlasGlossaryCategory> PartialUpdateGlossaryCategory(string categoryGuid, IDictionary<string, string> partialUpdates, CancellationToken cancellationToken = default)
        {
            if (categoryGuid == null)
            {
                throw new ArgumentNullException(nameof(categoryGuid));
            }
            if (partialUpdates == null)
            {
                throw new ArgumentNullException(nameof(partialUpdates));
            }

            using var message = CreatePartialUpdateGlossaryCategoryRequest(categoryGuid, partialUpdates);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AtlasGlossaryCategory value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AtlasGlossaryCategory.DeserializeAtlasGlossaryCategory(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRelatedCategoriesRequest(string categoryGuid, int? limit, int? offset, string sort)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/category/", false);
            uri.AppendPath(categoryGuid, true);
            uri.AppendPath("/related", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get all related categories (parent and children). Limit, offset, and sort parameters are currently not being enabled and won&apos;t work even they are passed. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="categoryGuid"/> is null. </exception>
        public async Task<Response<IReadOnlyDictionary<string, IList<AtlasRelatedCategoryHeader>>>> GetRelatedCategoriesAsync(string categoryGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            if (categoryGuid == null)
            {
                throw new ArgumentNullException(nameof(categoryGuid));
            }

            using var message = CreateGetRelatedCategoriesRequest(categoryGuid, limit, offset, sort);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyDictionary<string, IList<AtlasRelatedCategoryHeader>> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        Dictionary<string, IList<AtlasRelatedCategoryHeader>> dictionary = new Dictionary<string, IList<AtlasRelatedCategoryHeader>>();
                        foreach (var property in document.RootElement.EnumerateObject())
                        {
                            List<AtlasRelatedCategoryHeader> array = new List<AtlasRelatedCategoryHeader>();
                            foreach (var item in property.Value.EnumerateArray())
                            {
                                array.Add(AtlasRelatedCategoryHeader.DeserializeAtlasRelatedCategoryHeader(item));
                            }
                            dictionary.Add(property.Name, array);
                        }
                        value = dictionary;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get all related categories (parent and children). Limit, offset, and sort parameters are currently not being enabled and won&apos;t work even they are passed. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="categoryGuid"/> is null. </exception>
        public Response<IReadOnlyDictionary<string, IList<AtlasRelatedCategoryHeader>>> GetRelatedCategories(string categoryGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            if (categoryGuid == null)
            {
                throw new ArgumentNullException(nameof(categoryGuid));
            }

            using var message = CreateGetRelatedCategoriesRequest(categoryGuid, limit, offset, sort);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyDictionary<string, IList<AtlasRelatedCategoryHeader>> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        Dictionary<string, IList<AtlasRelatedCategoryHeader>> dictionary = new Dictionary<string, IList<AtlasRelatedCategoryHeader>>();
                        foreach (var property in document.RootElement.EnumerateObject())
                        {
                            List<AtlasRelatedCategoryHeader> array = new List<AtlasRelatedCategoryHeader>();
                            foreach (var item in property.Value.EnumerateArray())
                            {
                                array.Add(AtlasRelatedCategoryHeader.DeserializeAtlasRelatedCategoryHeader(item));
                            }
                            dictionary.Add(property.Name, array);
                        }
                        value = dictionary;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetCategoryTermsRequest(string categoryGuid, int? limit, int? offset, string sort)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/category/", false);
            uri.AppendPath(categoryGuid, true);
            uri.AppendPath("/terms", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get all terms associated with the specific category. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="categoryGuid"/> is null. </exception>
        public async Task<Response<IReadOnlyList<AtlasRelatedTermHeader>>> GetCategoryTermsAsync(string categoryGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            if (categoryGuid == null)
            {
                throw new ArgumentNullException(nameof(categoryGuid));
            }

            using var message = CreateGetCategoryTermsRequest(categoryGuid, limit, offset, sort);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<AtlasRelatedTermHeader> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<AtlasRelatedTermHeader> array = new List<AtlasRelatedTermHeader>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(AtlasRelatedTermHeader.DeserializeAtlasRelatedTermHeader(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get all terms associated with the specific category. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="categoryGuid"/> is null. </exception>
        public Response<IReadOnlyList<AtlasRelatedTermHeader>> GetCategoryTerms(string categoryGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            if (categoryGuid == null)
            {
                throw new ArgumentNullException(nameof(categoryGuid));
            }

            using var message = CreateGetCategoryTermsRequest(categoryGuid, limit, offset, sort);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<AtlasRelatedTermHeader> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<AtlasRelatedTermHeader> array = new List<AtlasRelatedTermHeader>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(AtlasRelatedTermHeader.DeserializeAtlasRelatedTermHeader(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateGlossaryTermRequest(AtlasGlossaryTerm glossaryTerm, bool? includeTermHierarchy)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/term", false);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(glossaryTerm);
            request.Content = content;
            return message;
        }

        /// <summary> Create a glossary term. </summary>
        /// <param name="glossaryTerm">
        /// The glossary term definition. A term must be anchored to a Glossary at the time of creation.
        /// Optionally it can be categorized as well.
        /// </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryTerm"/> is null. </exception>
        public async Task<Response<AtlasGlossaryTerm>> CreateGlossaryTermAsync(AtlasGlossaryTerm glossaryTerm, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            if (glossaryTerm == null)
            {
                throw new ArgumentNullException(nameof(glossaryTerm));
            }

            using var message = CreateCreateGlossaryTermRequest(glossaryTerm, includeTermHierarchy);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AtlasGlossaryTerm value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AtlasGlossaryTerm.DeserializeAtlasGlossaryTerm(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create a glossary term. </summary>
        /// <param name="glossaryTerm">
        /// The glossary term definition. A term must be anchored to a Glossary at the time of creation.
        /// Optionally it can be categorized as well.
        /// </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryTerm"/> is null. </exception>
        public Response<AtlasGlossaryTerm> CreateGlossaryTerm(AtlasGlossaryTerm glossaryTerm, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            if (glossaryTerm == null)
            {
                throw new ArgumentNullException(nameof(glossaryTerm));
            }

            using var message = CreateCreateGlossaryTermRequest(glossaryTerm, includeTermHierarchy);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AtlasGlossaryTerm value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AtlasGlossaryTerm.DeserializeAtlasGlossaryTerm(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetGlossaryTermRequest(string termGuid, bool? includeTermHierarchy)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/term/", false);
            uri.AppendPath(termGuid, true);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get a specific glossary term by its GUID. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> is null. </exception>
        public async Task<Response<AtlasGlossaryTerm>> GetGlossaryTermAsync(string termGuid, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            if (termGuid == null)
            {
                throw new ArgumentNullException(nameof(termGuid));
            }

            using var message = CreateGetGlossaryTermRequest(termGuid, includeTermHierarchy);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AtlasGlossaryTerm value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AtlasGlossaryTerm.DeserializeAtlasGlossaryTerm(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get a specific glossary term by its GUID. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> is null. </exception>
        public Response<AtlasGlossaryTerm> GetGlossaryTerm(string termGuid, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            if (termGuid == null)
            {
                throw new ArgumentNullException(nameof(termGuid));
            }

            using var message = CreateGetGlossaryTermRequest(termGuid, includeTermHierarchy);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AtlasGlossaryTerm value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AtlasGlossaryTerm.DeserializeAtlasGlossaryTerm(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateGlossaryTermRequest(string termGuid, AtlasGlossaryTerm glossaryTerm)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/term/", false);
            uri.AppendPath(termGuid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(glossaryTerm);
            request.Content = content;
            return message;
        }

        /// <summary> Update the given glossary term by its GUID. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="glossaryTerm"> The glossary term to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> or <paramref name="glossaryTerm"/> is null. </exception>
        public async Task<Response<AtlasGlossaryTerm>> UpdateGlossaryTermAsync(string termGuid, AtlasGlossaryTerm glossaryTerm, CancellationToken cancellationToken = default)
        {
            if (termGuid == null)
            {
                throw new ArgumentNullException(nameof(termGuid));
            }
            if (glossaryTerm == null)
            {
                throw new ArgumentNullException(nameof(glossaryTerm));
            }

            using var message = CreateUpdateGlossaryTermRequest(termGuid, glossaryTerm);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AtlasGlossaryTerm value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AtlasGlossaryTerm.DeserializeAtlasGlossaryTerm(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update the given glossary term by its GUID. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="glossaryTerm"> The glossary term to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> or <paramref name="glossaryTerm"/> is null. </exception>
        public Response<AtlasGlossaryTerm> UpdateGlossaryTerm(string termGuid, AtlasGlossaryTerm glossaryTerm, CancellationToken cancellationToken = default)
        {
            if (termGuid == null)
            {
                throw new ArgumentNullException(nameof(termGuid));
            }
            if (glossaryTerm == null)
            {
                throw new ArgumentNullException(nameof(glossaryTerm));
            }

            using var message = CreateUpdateGlossaryTermRequest(termGuid, glossaryTerm);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AtlasGlossaryTerm value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AtlasGlossaryTerm.DeserializeAtlasGlossaryTerm(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteGlossaryTermRequest(string termGuid)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/term/", false);
            uri.AppendPath(termGuid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete a glossary term. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> is null. </exception>
        public async Task<Response> DeleteGlossaryTermAsync(string termGuid, CancellationToken cancellationToken = default)
        {
            if (termGuid == null)
            {
                throw new ArgumentNullException(nameof(termGuid));
            }

            using var message = CreateDeleteGlossaryTermRequest(termGuid);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete a glossary term. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> is null. </exception>
        public Response DeleteGlossaryTerm(string termGuid, CancellationToken cancellationToken = default)
        {
            if (termGuid == null)
            {
                throw new ArgumentNullException(nameof(termGuid));
            }

            using var message = CreateDeleteGlossaryTermRequest(termGuid);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePartialUpdateGlossaryTermRequest(string termGuid, IDictionary<string, string> partialUpdates, bool? includeTermHierarchy)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/term/", false);
            uri.AppendPath(termGuid, true);
            uri.AppendPath("/partial", false);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteStartObject();
            foreach (var item in partialUpdates)
            {
                content.JsonWriter.WritePropertyName(item.Key);
                content.JsonWriter.WriteStringValue(item.Value);
            }
            content.JsonWriter.WriteEndObject();
            request.Content = content;
            return message;
        }

        /// <summary> Update the glossary term partially. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="partialUpdates"> A map containing keys as attribute names and values as corresponding attribute values to be updated. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> or <paramref name="partialUpdates"/> is null. </exception>
        public async Task<Response<AtlasGlossaryTerm>> PartialUpdateGlossaryTermAsync(string termGuid, IDictionary<string, string> partialUpdates, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            if (termGuid == null)
            {
                throw new ArgumentNullException(nameof(termGuid));
            }
            if (partialUpdates == null)
            {
                throw new ArgumentNullException(nameof(partialUpdates));
            }

            using var message = CreatePartialUpdateGlossaryTermRequest(termGuid, partialUpdates, includeTermHierarchy);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AtlasGlossaryTerm value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AtlasGlossaryTerm.DeserializeAtlasGlossaryTerm(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update the glossary term partially. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="partialUpdates"> A map containing keys as attribute names and values as corresponding attribute values to be updated. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> or <paramref name="partialUpdates"/> is null. </exception>
        public Response<AtlasGlossaryTerm> PartialUpdateGlossaryTerm(string termGuid, IDictionary<string, string> partialUpdates, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            if (termGuid == null)
            {
                throw new ArgumentNullException(nameof(termGuid));
            }
            if (partialUpdates == null)
            {
                throw new ArgumentNullException(nameof(partialUpdates));
            }

            using var message = CreatePartialUpdateGlossaryTermRequest(termGuid, partialUpdates, includeTermHierarchy);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AtlasGlossaryTerm value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AtlasGlossaryTerm.DeserializeAtlasGlossaryTerm(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateGlossaryTermsRequest(IEnumerable<AtlasGlossaryTerm> glossaryTerm, bool? includeTermHierarchy)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/terms", false);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteStartArray();
            foreach (var item in glossaryTerm)
            {
                content.JsonWriter.WriteObjectValue(item);
            }
            content.JsonWriter.WriteEndArray();
            request.Content = content;
            return message;
        }

        /// <summary> Create glossary terms in bulk. </summary>
        /// <param name="glossaryTerm"> An array of glossary term definitions to be created in bulk. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryTerm"/> is null. </exception>
        public async Task<Response<IReadOnlyList<AtlasGlossaryTerm>>> CreateGlossaryTermsAsync(IEnumerable<AtlasGlossaryTerm> glossaryTerm, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            if (glossaryTerm == null)
            {
                throw new ArgumentNullException(nameof(glossaryTerm));
            }

            using var message = CreateCreateGlossaryTermsRequest(glossaryTerm, includeTermHierarchy);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<AtlasGlossaryTerm> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<AtlasGlossaryTerm> array = new List<AtlasGlossaryTerm>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(AtlasGlossaryTerm.DeserializeAtlasGlossaryTerm(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create glossary terms in bulk. </summary>
        /// <param name="glossaryTerm"> An array of glossary term definitions to be created in bulk. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryTerm"/> is null. </exception>
        public Response<IReadOnlyList<AtlasGlossaryTerm>> CreateGlossaryTerms(IEnumerable<AtlasGlossaryTerm> glossaryTerm, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            if (glossaryTerm == null)
            {
                throw new ArgumentNullException(nameof(glossaryTerm));
            }

            using var message = CreateCreateGlossaryTermsRequest(glossaryTerm, includeTermHierarchy);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<AtlasGlossaryTerm> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<AtlasGlossaryTerm> array = new List<AtlasGlossaryTerm>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(AtlasGlossaryTerm.DeserializeAtlasGlossaryTerm(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetEntitiesAssignedWithTermRequest(string termGuid, int? limit, int? offset, string sort)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/terms/", false);
            uri.AppendPath(termGuid, true);
            uri.AppendPath("/assignedEntities", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get all related objects assigned with the specified term. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> is null. </exception>
        public async Task<Response<IReadOnlyList<AtlasRelatedObjectId>>> GetEntitiesAssignedWithTermAsync(string termGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            if (termGuid == null)
            {
                throw new ArgumentNullException(nameof(termGuid));
            }

            using var message = CreateGetEntitiesAssignedWithTermRequest(termGuid, limit, offset, sort);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<AtlasRelatedObjectId> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<AtlasRelatedObjectId> array = new List<AtlasRelatedObjectId>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(AtlasRelatedObjectId.DeserializeAtlasRelatedObjectId(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get all related objects assigned with the specified term. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> is null. </exception>
        public Response<IReadOnlyList<AtlasRelatedObjectId>> GetEntitiesAssignedWithTerm(string termGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            if (termGuid == null)
            {
                throw new ArgumentNullException(nameof(termGuid));
            }

            using var message = CreateGetEntitiesAssignedWithTermRequest(termGuid, limit, offset, sort);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<AtlasRelatedObjectId> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<AtlasRelatedObjectId> array = new List<AtlasRelatedObjectId>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(AtlasRelatedObjectId.DeserializeAtlasRelatedObjectId(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateAssignTermToEntitiesRequest(string termGuid, IEnumerable<AtlasRelatedObjectId> relatedObjectIds)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/terms/", false);
            uri.AppendPath(termGuid, true);
            uri.AppendPath("/assignedEntities", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteStartArray();
            foreach (var item in relatedObjectIds)
            {
                content.JsonWriter.WriteObjectValue(item);
            }
            content.JsonWriter.WriteEndArray();
            request.Content = content;
            return message;
        }

        /// <summary> Assign the given term to the provided list of related objects. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="relatedObjectIds"> An array of related object IDs to which the term has to be associated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> or <paramref name="relatedObjectIds"/> is null. </exception>
        public async Task<Response> AssignTermToEntitiesAsync(string termGuid, IEnumerable<AtlasRelatedObjectId> relatedObjectIds, CancellationToken cancellationToken = default)
        {
            if (termGuid == null)
            {
                throw new ArgumentNullException(nameof(termGuid));
            }
            if (relatedObjectIds == null)
            {
                throw new ArgumentNullException(nameof(relatedObjectIds));
            }

            using var message = CreateAssignTermToEntitiesRequest(termGuid, relatedObjectIds);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Assign the given term to the provided list of related objects. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="relatedObjectIds"> An array of related object IDs to which the term has to be associated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> or <paramref name="relatedObjectIds"/> is null. </exception>
        public Response AssignTermToEntities(string termGuid, IEnumerable<AtlasRelatedObjectId> relatedObjectIds, CancellationToken cancellationToken = default)
        {
            if (termGuid == null)
            {
                throw new ArgumentNullException(nameof(termGuid));
            }
            if (relatedObjectIds == null)
            {
                throw new ArgumentNullException(nameof(relatedObjectIds));
            }

            using var message = CreateAssignTermToEntitiesRequest(termGuid, relatedObjectIds);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRemoveTermAssignmentFromEntitiesRequest(string termGuid, IEnumerable<AtlasRelatedObjectId> relatedObjectIds)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/terms/", false);
            uri.AppendPath(termGuid, true);
            uri.AppendPath("/assignedEntities", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteStartArray();
            foreach (var item in relatedObjectIds)
            {
                content.JsonWriter.WriteObjectValue(item);
            }
            content.JsonWriter.WriteEndArray();
            request.Content = content;
            return message;
        }

        /// <summary> Delete the term assignment for the given list of related objects. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="relatedObjectIds"> An array of related object IDs from which the term has to be dissociated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> or <paramref name="relatedObjectIds"/> is null. </exception>
        public async Task<Response> RemoveTermAssignmentFromEntitiesAsync(string termGuid, IEnumerable<AtlasRelatedObjectId> relatedObjectIds, CancellationToken cancellationToken = default)
        {
            if (termGuid == null)
            {
                throw new ArgumentNullException(nameof(termGuid));
            }
            if (relatedObjectIds == null)
            {
                throw new ArgumentNullException(nameof(relatedObjectIds));
            }

            using var message = CreateRemoveTermAssignmentFromEntitiesRequest(termGuid, relatedObjectIds);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete the term assignment for the given list of related objects. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="relatedObjectIds"> An array of related object IDs from which the term has to be dissociated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> or <paramref name="relatedObjectIds"/> is null. </exception>
        public Response RemoveTermAssignmentFromEntities(string termGuid, IEnumerable<AtlasRelatedObjectId> relatedObjectIds, CancellationToken cancellationToken = default)
        {
            if (termGuid == null)
            {
                throw new ArgumentNullException(nameof(termGuid));
            }
            if (relatedObjectIds == null)
            {
                throw new ArgumentNullException(nameof(relatedObjectIds));
            }

            using var message = CreateRemoveTermAssignmentFromEntitiesRequest(termGuid, relatedObjectIds);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteTermAssignmentFromEntitiesRequest(string termGuid, IEnumerable<AtlasRelatedObjectId> relatedObjectIds)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/terms/", false);
            uri.AppendPath(termGuid, true);
            uri.AppendPath("/assignedEntities", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteStartArray();
            foreach (var item in relatedObjectIds)
            {
                content.JsonWriter.WriteObjectValue(item);
            }
            content.JsonWriter.WriteEndArray();
            request.Content = content;
            return message;
        }

        /// <summary> Delete the term assignment for the given list of related objects. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="relatedObjectIds"> An array of related object IDs from which the term has to be dissociated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> or <paramref name="relatedObjectIds"/> is null. </exception>
        public async Task<Response> DeleteTermAssignmentFromEntitiesAsync(string termGuid, IEnumerable<AtlasRelatedObjectId> relatedObjectIds, CancellationToken cancellationToken = default)
        {
            if (termGuid == null)
            {
                throw new ArgumentNullException(nameof(termGuid));
            }
            if (relatedObjectIds == null)
            {
                throw new ArgumentNullException(nameof(relatedObjectIds));
            }

            using var message = CreateDeleteTermAssignmentFromEntitiesRequest(termGuid, relatedObjectIds);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete the term assignment for the given list of related objects. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="relatedObjectIds"> An array of related object IDs from which the term has to be dissociated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> or <paramref name="relatedObjectIds"/> is null. </exception>
        public Response DeleteTermAssignmentFromEntities(string termGuid, IEnumerable<AtlasRelatedObjectId> relatedObjectIds, CancellationToken cancellationToken = default)
        {
            if (termGuid == null)
            {
                throw new ArgumentNullException(nameof(termGuid));
            }
            if (relatedObjectIds == null)
            {
                throw new ArgumentNullException(nameof(relatedObjectIds));
            }

            using var message = CreateDeleteTermAssignmentFromEntitiesRequest(termGuid, relatedObjectIds);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRelatedTermsRequest(string termGuid, int? limit, int? offset, string sort)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/terms/", false);
            uri.AppendPath(termGuid, true);
            uri.AppendPath("/related", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get all related terms for a specific term by its GUID. Limit, offset, and sort parameters are currently not being enabled and won&apos;t work even they are passed. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> is null. </exception>
        public async Task<Response<IReadOnlyDictionary<string, IList<AtlasRelatedTermHeader>>>> GetRelatedTermsAsync(string termGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            if (termGuid == null)
            {
                throw new ArgumentNullException(nameof(termGuid));
            }

            using var message = CreateGetRelatedTermsRequest(termGuid, limit, offset, sort);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyDictionary<string, IList<AtlasRelatedTermHeader>> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        Dictionary<string, IList<AtlasRelatedTermHeader>> dictionary = new Dictionary<string, IList<AtlasRelatedTermHeader>>();
                        foreach (var property in document.RootElement.EnumerateObject())
                        {
                            List<AtlasRelatedTermHeader> array = new List<AtlasRelatedTermHeader>();
                            foreach (var item in property.Value.EnumerateArray())
                            {
                                array.Add(AtlasRelatedTermHeader.DeserializeAtlasRelatedTermHeader(item));
                            }
                            dictionary.Add(property.Name, array);
                        }
                        value = dictionary;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get all related terms for a specific term by its GUID. Limit, offset, and sort parameters are currently not being enabled and won&apos;t work even they are passed. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> is null. </exception>
        public Response<IReadOnlyDictionary<string, IList<AtlasRelatedTermHeader>>> GetRelatedTerms(string termGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            if (termGuid == null)
            {
                throw new ArgumentNullException(nameof(termGuid));
            }

            using var message = CreateGetRelatedTermsRequest(termGuid, limit, offset, sort);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyDictionary<string, IList<AtlasRelatedTermHeader>> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        Dictionary<string, IList<AtlasRelatedTermHeader>> dictionary = new Dictionary<string, IList<AtlasRelatedTermHeader>>();
                        foreach (var property in document.RootElement.EnumerateObject())
                        {
                            List<AtlasRelatedTermHeader> array = new List<AtlasRelatedTermHeader>();
                            foreach (var item in property.Value.EnumerateArray())
                            {
                                array.Add(AtlasRelatedTermHeader.DeserializeAtlasRelatedTermHeader(item));
                            }
                            dictionary.Add(property.Name, array);
                        }
                        value = dictionary;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetGlossaryRequest(string glossaryGuid)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get a specific Glossary by its GUID. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        public async Task<Response<AtlasGlossary>> GetGlossaryAsync(string glossaryGuid, CancellationToken cancellationToken = default)
        {
            if (glossaryGuid == null)
            {
                throw new ArgumentNullException(nameof(glossaryGuid));
            }

            using var message = CreateGetGlossaryRequest(glossaryGuid);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AtlasGlossary value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AtlasGlossary.DeserializeAtlasGlossary(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get a specific Glossary by its GUID. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        public Response<AtlasGlossary> GetGlossary(string glossaryGuid, CancellationToken cancellationToken = default)
        {
            if (glossaryGuid == null)
            {
                throw new ArgumentNullException(nameof(glossaryGuid));
            }

            using var message = CreateGetGlossaryRequest(glossaryGuid);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AtlasGlossary value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AtlasGlossary.DeserializeAtlasGlossary(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateGlossaryRequest(string glossaryGuid, AtlasGlossary updatedGlossary)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(updatedGlossary);
            request.Content = content;
            return message;
        }

        /// <summary> Update the given glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="updatedGlossary"> The glossary definition to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> or <paramref name="updatedGlossary"/> is null. </exception>
        public async Task<Response<AtlasGlossary>> UpdateGlossaryAsync(string glossaryGuid, AtlasGlossary updatedGlossary, CancellationToken cancellationToken = default)
        {
            if (glossaryGuid == null)
            {
                throw new ArgumentNullException(nameof(glossaryGuid));
            }
            if (updatedGlossary == null)
            {
                throw new ArgumentNullException(nameof(updatedGlossary));
            }

            using var message = CreateUpdateGlossaryRequest(glossaryGuid, updatedGlossary);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AtlasGlossary value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AtlasGlossary.DeserializeAtlasGlossary(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update the given glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="updatedGlossary"> The glossary definition to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> or <paramref name="updatedGlossary"/> is null. </exception>
        public Response<AtlasGlossary> UpdateGlossary(string glossaryGuid, AtlasGlossary updatedGlossary, CancellationToken cancellationToken = default)
        {
            if (glossaryGuid == null)
            {
                throw new ArgumentNullException(nameof(glossaryGuid));
            }
            if (updatedGlossary == null)
            {
                throw new ArgumentNullException(nameof(updatedGlossary));
            }

            using var message = CreateUpdateGlossaryRequest(glossaryGuid, updatedGlossary);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AtlasGlossary value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AtlasGlossary.DeserializeAtlasGlossary(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteGlossaryRequest(string glossaryGuid)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete a glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        public async Task<Response> DeleteGlossaryAsync(string glossaryGuid, CancellationToken cancellationToken = default)
        {
            if (glossaryGuid == null)
            {
                throw new ArgumentNullException(nameof(glossaryGuid));
            }

            using var message = CreateDeleteGlossaryRequest(glossaryGuid);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete a glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        public Response DeleteGlossary(string glossaryGuid, CancellationToken cancellationToken = default)
        {
            if (glossaryGuid == null)
            {
                throw new ArgumentNullException(nameof(glossaryGuid));
            }

            using var message = CreateDeleteGlossaryRequest(glossaryGuid);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetGlossaryCategoriesRequest(string glossaryGuid, int? limit, int? offset, string sort)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/categories", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get the categories belonging to a specific glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        public async Task<Response<IReadOnlyList<AtlasGlossaryCategory>>> GetGlossaryCategoriesAsync(string glossaryGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            if (glossaryGuid == null)
            {
                throw new ArgumentNullException(nameof(glossaryGuid));
            }

            using var message = CreateGetGlossaryCategoriesRequest(glossaryGuid, limit, offset, sort);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<AtlasGlossaryCategory> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<AtlasGlossaryCategory> array = new List<AtlasGlossaryCategory>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(AtlasGlossaryCategory.DeserializeAtlasGlossaryCategory(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get the categories belonging to a specific glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        public Response<IReadOnlyList<AtlasGlossaryCategory>> GetGlossaryCategories(string glossaryGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            if (glossaryGuid == null)
            {
                throw new ArgumentNullException(nameof(glossaryGuid));
            }

            using var message = CreateGetGlossaryCategoriesRequest(glossaryGuid, limit, offset, sort);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<AtlasGlossaryCategory> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<AtlasGlossaryCategory> array = new List<AtlasGlossaryCategory>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(AtlasGlossaryCategory.DeserializeAtlasGlossaryCategory(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetGlossaryCategoriesHeadersRequest(string glossaryGuid, int? limit, int? offset, string sort)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/categories/headers", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get the category headers belonging to a specific glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        public async Task<Response<IReadOnlyList<AtlasRelatedCategoryHeader>>> GetGlossaryCategoriesHeadersAsync(string glossaryGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            if (glossaryGuid == null)
            {
                throw new ArgumentNullException(nameof(glossaryGuid));
            }

            using var message = CreateGetGlossaryCategoriesHeadersRequest(glossaryGuid, limit, offset, sort);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<AtlasRelatedCategoryHeader> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<AtlasRelatedCategoryHeader> array = new List<AtlasRelatedCategoryHeader>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(AtlasRelatedCategoryHeader.DeserializeAtlasRelatedCategoryHeader(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get the category headers belonging to a specific glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        public Response<IReadOnlyList<AtlasRelatedCategoryHeader>> GetGlossaryCategoriesHeaders(string glossaryGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            if (glossaryGuid == null)
            {
                throw new ArgumentNullException(nameof(glossaryGuid));
            }

            using var message = CreateGetGlossaryCategoriesHeadersRequest(glossaryGuid, limit, offset, sort);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<AtlasRelatedCategoryHeader> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<AtlasRelatedCategoryHeader> array = new List<AtlasRelatedCategoryHeader>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(AtlasRelatedCategoryHeader.DeserializeAtlasRelatedCategoryHeader(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDetailedGlossaryRequest(string glossaryGuid, bool? includeTermHierarchy)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/detailed", false);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get a specific glossary with detailed information. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        public async Task<Response<AtlasGlossaryExtInfo>> GetDetailedGlossaryAsync(string glossaryGuid, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            if (glossaryGuid == null)
            {
                throw new ArgumentNullException(nameof(glossaryGuid));
            }

            using var message = CreateGetDetailedGlossaryRequest(glossaryGuid, includeTermHierarchy);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AtlasGlossaryExtInfo value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AtlasGlossaryExtInfo.DeserializeAtlasGlossaryExtInfo(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get a specific glossary with detailed information. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        public Response<AtlasGlossaryExtInfo> GetDetailedGlossary(string glossaryGuid, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            if (glossaryGuid == null)
            {
                throw new ArgumentNullException(nameof(glossaryGuid));
            }

            using var message = CreateGetDetailedGlossaryRequest(glossaryGuid, includeTermHierarchy);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AtlasGlossaryExtInfo value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AtlasGlossaryExtInfo.DeserializeAtlasGlossaryExtInfo(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePartialUpdateGlossaryRequest(string glossaryGuid, IDictionary<string, string> partialUpdates, bool? includeTermHierarchy)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/partial", false);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteStartObject();
            foreach (var item in partialUpdates)
            {
                content.JsonWriter.WritePropertyName(item.Key);
                content.JsonWriter.WriteStringValue(item.Value);
            }
            content.JsonWriter.WriteEndObject();
            request.Content = content;
            return message;
        }

        /// <summary> Update the glossary partially. Some properties such as qualifiedName are not allowed to be updated. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="partialUpdates"> A map containing keys as attribute names and values as corresponding attribute values. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> or <paramref name="partialUpdates"/> is null. </exception>
        public async Task<Response<AtlasGlossary>> PartialUpdateGlossaryAsync(string glossaryGuid, IDictionary<string, string> partialUpdates, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            if (glossaryGuid == null)
            {
                throw new ArgumentNullException(nameof(glossaryGuid));
            }
            if (partialUpdates == null)
            {
                throw new ArgumentNullException(nameof(partialUpdates));
            }

            using var message = CreatePartialUpdateGlossaryRequest(glossaryGuid, partialUpdates, includeTermHierarchy);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AtlasGlossary value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AtlasGlossary.DeserializeAtlasGlossary(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update the glossary partially. Some properties such as qualifiedName are not allowed to be updated. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="partialUpdates"> A map containing keys as attribute names and values as corresponding attribute values. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> or <paramref name="partialUpdates"/> is null. </exception>
        public Response<AtlasGlossary> PartialUpdateGlossary(string glossaryGuid, IDictionary<string, string> partialUpdates, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            if (glossaryGuid == null)
            {
                throw new ArgumentNullException(nameof(glossaryGuid));
            }
            if (partialUpdates == null)
            {
                throw new ArgumentNullException(nameof(partialUpdates));
            }

            using var message = CreatePartialUpdateGlossaryRequest(glossaryGuid, partialUpdates, includeTermHierarchy);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AtlasGlossary value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AtlasGlossary.DeserializeAtlasGlossary(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetGlossaryTermsRequest(string glossaryGuid, bool? includeTermHierarchy, int? limit, int? offset, string sort)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/terms", false);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get terms belonging to a specific glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        public async Task<Response<IReadOnlyList<AtlasGlossaryTerm>>> GetGlossaryTermsAsync(string glossaryGuid, bool? includeTermHierarchy = null, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            if (glossaryGuid == null)
            {
                throw new ArgumentNullException(nameof(glossaryGuid));
            }

            using var message = CreateGetGlossaryTermsRequest(glossaryGuid, includeTermHierarchy, limit, offset, sort);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<AtlasGlossaryTerm> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<AtlasGlossaryTerm> array = new List<AtlasGlossaryTerm>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(AtlasGlossaryTerm.DeserializeAtlasGlossaryTerm(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get terms belonging to a specific glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        public Response<IReadOnlyList<AtlasGlossaryTerm>> GetGlossaryTerms(string glossaryGuid, bool? includeTermHierarchy = null, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            if (glossaryGuid == null)
            {
                throw new ArgumentNullException(nameof(glossaryGuid));
            }

            using var message = CreateGetGlossaryTermsRequest(glossaryGuid, includeTermHierarchy, limit, offset, sort);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<AtlasGlossaryTerm> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<AtlasGlossaryTerm> array = new List<AtlasGlossaryTerm>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(AtlasGlossaryTerm.DeserializeAtlasGlossaryTerm(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetGlossaryTermHeadersRequest(string glossaryGuid, int? limit, int? offset, string sort)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/terms/headers", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get term headers belonging to a specific glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        public async Task<Response<IReadOnlyList<AtlasRelatedTermHeader>>> GetGlossaryTermHeadersAsync(string glossaryGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            if (glossaryGuid == null)
            {
                throw new ArgumentNullException(nameof(glossaryGuid));
            }

            using var message = CreateGetGlossaryTermHeadersRequest(glossaryGuid, limit, offset, sort);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<AtlasRelatedTermHeader> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<AtlasRelatedTermHeader> array = new List<AtlasRelatedTermHeader>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(AtlasRelatedTermHeader.DeserializeAtlasRelatedTermHeader(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get term headers belonging to a specific glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        public Response<IReadOnlyList<AtlasRelatedTermHeader>> GetGlossaryTermHeaders(string glossaryGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            if (glossaryGuid == null)
            {
                throw new ArgumentNullException(nameof(glossaryGuid));
            }

            using var message = CreateGetGlossaryTermHeadersRequest(glossaryGuid, limit, offset, sort);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<AtlasRelatedTermHeader> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<AtlasRelatedTermHeader> array = new List<AtlasRelatedTermHeader>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(AtlasRelatedTermHeader.DeserializeAtlasRelatedTermHeader(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateImportGlossaryTermsViaCsvRequest(string glossaryGuid, Stream file, bool? includeTermHierarchy)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/terms/import", false);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "multipart/form-data");
            var content = new MultipartFormDataContent();
            content.Add(RequestContent.Create(file), "file", null);
            content.ApplyToRequest(request);
            return message;
        }

        /// <summary> Import Glossary Terms from local csv file. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="file"> The csv file to import glossary terms from. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> or <paramref name="file"/> is null. </exception>
        public async Task<Response> ImportGlossaryTermsViaCsvAsync(string glossaryGuid, Stream file, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            if (glossaryGuid == null)
            {
                throw new ArgumentNullException(nameof(glossaryGuid));
            }
            if (file == null)
            {
                throw new ArgumentNullException(nameof(file));
            }

            using var message = CreateImportGlossaryTermsViaCsvRequest(glossaryGuid, file, includeTermHierarchy);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Import Glossary Terms from local csv file. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="file"> The csv file to import glossary terms from. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> or <paramref name="file"/> is null. </exception>
        public Response ImportGlossaryTermsViaCsv(string glossaryGuid, Stream file, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            if (glossaryGuid == null)
            {
                throw new ArgumentNullException(nameof(glossaryGuid));
            }
            if (file == null)
            {
                throw new ArgumentNullException(nameof(file));
            }

            using var message = CreateImportGlossaryTermsViaCsvRequest(glossaryGuid, file, includeTermHierarchy);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateImportGlossaryTermsViaCsvByGlossaryNameRequest(string glossaryName, Stream file, bool? includeTermHierarchy)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/glossary/name/", false);
            uri.AppendPath(glossaryName, true);
            uri.AppendPath("/terms/import", false);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "multipart/form-data");
            var content = new MultipartFormDataContent();
            content.Add(RequestContent.Create(file), "file", null);
            content.ApplyToRequest(request);
            return message;
        }

        /// <summary> Import Glossary Terms from local csv file by glossaryName. </summary>
        /// <param name="glossaryName"> The name of the glossary. </param>
        /// <param name="file"> The csv file to import glossary terms from. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryName"/> or <paramref name="file"/> is null. </exception>
        public async Task<Response> ImportGlossaryTermsViaCsvByGlossaryNameAsync(string glossaryName, Stream file, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            if (glossaryName == null)
            {
                throw new ArgumentNullException(nameof(glossaryName));
            }
            if (file == null)
            {
                throw new ArgumentNullException(nameof(file));
            }

            using var message = CreateImportGlossaryTermsViaCsvByGlossaryNameRequest(glossaryName, file, includeTermHierarchy);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Import Glossary Terms from local csv file by glossaryName. </summary>
        /// <param name="glossaryName"> The name of the glossary. </param>
        /// <param name="file"> The csv file to import glossary terms from. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryName"/> or <paramref name="file"/> is null. </exception>
        public Response ImportGlossaryTermsViaCsvByGlossaryName(string glossaryName, Stream file, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            if (glossaryName == null)
            {
                throw new ArgumentNullException(nameof(glossaryName));
            }
            if (file == null)
            {
                throw new ArgumentNullException(nameof(file));
            }

            using var message = CreateImportGlossaryTermsViaCsvByGlossaryNameRequest(glossaryName, file, includeTermHierarchy);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetImportCsvOperationStatusRequest(string operationGuid)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/glossary/terms/import/", false);
            uri.AppendPath(operationGuid, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get the status of import csv operation. </summary>
        /// <param name="operationGuid"> The globally unique identifier for async operation/job. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationGuid"/> is null. </exception>
        public async Task<Response<ImportCSVOperation>> GetImportCsvOperationStatusAsync(string operationGuid, CancellationToken cancellationToken = default)
        {
            if (operationGuid == null)
            {
                throw new ArgumentNullException(nameof(operationGuid));
            }

            using var message = CreateGetImportCsvOperationStatusRequest(operationGuid);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ImportCSVOperation value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ImportCSVOperation.DeserializeImportCSVOperation(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get the status of import csv operation. </summary>
        /// <param name="operationGuid"> The globally unique identifier for async operation/job. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationGuid"/> is null. </exception>
        public Response<ImportCSVOperation> GetImportCsvOperationStatus(string operationGuid, CancellationToken cancellationToken = default)
        {
            if (operationGuid == null)
            {
                throw new ArgumentNullException(nameof(operationGuid));
            }

            using var message = CreateGetImportCsvOperationStatusRequest(operationGuid);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ImportCSVOperation value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ImportCSVOperation.DeserializeImportCSVOperation(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateExportGlossaryTermsAsCsvRequest(string glossaryGuid, IEnumerable<string> termGuids, bool? includeTermHierarchy)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/terms/export", false);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "text/csv");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteStartArray();
            foreach (var item in termGuids)
            {
                content.JsonWriter.WriteStringValue(item);
            }
            content.JsonWriter.WriteEndArray();
            request.Content = content;
            return message;
        }

        /// <summary> Export Glossary Terms as csv file. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="termGuids"> An array of term guids. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> or <paramref name="termGuids"/> is null. </exception>
        public async Task<Response<string>> ExportGlossaryTermsAsCsvAsync(string glossaryGuid, IEnumerable<string> termGuids, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            if (glossaryGuid == null)
            {
                throw new ArgumentNullException(nameof(glossaryGuid));
            }
            if (termGuids == null)
            {
                throw new ArgumentNullException(nameof(termGuids));
            }

            using var message = CreateExportGlossaryTermsAsCsvRequest(glossaryGuid, termGuids, includeTermHierarchy);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        StreamReader streamReader = new StreamReader(message.Response.ContentStream);
                        string value = await streamReader.ReadToEndAsync().ConfigureAwait(false);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Export Glossary Terms as csv file. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="termGuids"> An array of term guids. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> or <paramref name="termGuids"/> is null. </exception>
        public Response<string> ExportGlossaryTermsAsCsv(string glossaryGuid, IEnumerable<string> termGuids, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            if (glossaryGuid == null)
            {
                throw new ArgumentNullException(nameof(glossaryGuid));
            }
            if (termGuids == null)
            {
                throw new ArgumentNullException(nameof(termGuids));
            }

            using var message = CreateExportGlossaryTermsAsCsvRequest(glossaryGuid, termGuids, includeTermHierarchy);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        StreamReader streamReader = new StreamReader(message.Response.ContentStream);
                        string value = streamReader.ReadToEnd();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetTermsByGlossaryNameRequest(string glossaryName, int? limit, int? offset, bool? includeTermHierarchy)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/glossary/name/", false);
            uri.AppendPath(glossaryName, true);
            uri.AppendPath("/terms", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get terms by glossary name. </summary>
        /// <param name="glossaryName"> The name of the glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryName"/> is null. </exception>
        public async Task<Response<IReadOnlyList<AtlasGlossaryTerm>>> GetTermsByGlossaryNameAsync(string glossaryName, int? limit = null, int? offset = null, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            if (glossaryName == null)
            {
                throw new ArgumentNullException(nameof(glossaryName));
            }

            using var message = CreateGetTermsByGlossaryNameRequest(glossaryName, limit, offset, includeTermHierarchy);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<AtlasGlossaryTerm> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<AtlasGlossaryTerm> array = new List<AtlasGlossaryTerm>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(AtlasGlossaryTerm.DeserializeAtlasGlossaryTerm(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get terms by glossary name. </summary>
        /// <param name="glossaryName"> The name of the glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryName"/> is null. </exception>
        public Response<IReadOnlyList<AtlasGlossaryTerm>> GetTermsByGlossaryName(string glossaryName, int? limit = null, int? offset = null, bool? includeTermHierarchy = null, CancellationToken cancellationToken = default)
        {
            if (glossaryName == null)
            {
                throw new ArgumentNullException(nameof(glossaryName));
            }

            using var message = CreateGetTermsByGlossaryNameRequest(glossaryName, limit, offset, includeTermHierarchy);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<AtlasGlossaryTerm> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<AtlasGlossaryTerm> array = new List<AtlasGlossaryTerm>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(AtlasGlossaryTerm.DeserializeAtlasGlossaryTerm(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
