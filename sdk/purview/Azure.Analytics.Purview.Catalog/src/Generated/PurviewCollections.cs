// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Purview.Catalog
{
    /// <summary> The PurviewCollections service client. </summary>
    public partial class PurviewCollections
    {
        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get; }
        private readonly string[] AuthorizationScopes = { "https://purview.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private Uri endpoint;
        private readonly string apiVersion;
        private readonly ClientDiagnostics _clientDiagnostics;

        /// <summary> Initializes a new instance of PurviewCollections for mocking. </summary>
        protected PurviewCollections()
        {
        }

        /// <summary>
        /// Creates or updates an entity to a collection.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>referredEntities</term>
        ///     <term>Dictionary&lt;string, AtlasEntity&gt;</term>
        ///     <term></term>
        ///     <term>The referred entities.</term>
        ///   </item>
        ///   <item>
        ///     <term>entity</term>
        ///     <term>AtlasEntity</term>
        ///     <term></term>
        ///     <term>An instance of an entity - like hive_table, hive_database.</term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasEntity</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term>The attributes of the struct.</term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The name of the type.</term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>ETag for concurrency control.</term>
        ///   </item>
        ///   <item>
        ///     <term>classifications</term>
        ///     <term>AtlasClassification[]</term>
        ///     <term></term>
        ///     <term>An array of classifications.</term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term>The created time of the record.</term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The user who created the record.</term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The GUID of the entity.</term>
        ///   </item>
        ///   <item>
        ///     <term>homeId</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The home ID of the entity.</term>
        ///   </item>
        ///   <item>
        ///     <term>meanings</term>
        ///     <term>AtlasTermAssignmentHeader[]</term>
        ///     <term></term>
        ///     <term>An array of term assignment headers indicating the meanings of the entity.</term>
        ///   </item>
        ///   <item>
        ///     <term>provenanceType</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term>Used to record the provenance of an instance of an entity or relationship.</term>
        ///   </item>
        ///   <item>
        ///     <term>proxy</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term>Determines if there&apos;s a proxy.</term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipAttributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term>The attributes of relationship.</term>
        ///   </item>
        ///   <item>
        ///     <term>status</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term>The update time of the record.</term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The user who updated the record.</term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term>The version of the entity.</term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>indicate the source who create the classification detail</term>
        ///   </item>
        ///   <item>
        ///     <term>sourceDetails</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term>more detail on source information</term>
        ///   </item>
        ///   <item>
        ///     <term>contacts</term>
        ///     <term>Dictionary&lt;string, ContactBasic[]&gt;</term>
        ///     <term></term>
        ///     <term>The dictionary of contacts for terms. Key could be Expert or Owner.</term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasClassification</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term>The attributes of the struct.</term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The name of the type.</term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>ETag for concurrency control.</term>
        ///   </item>
        ///   <item>
        ///     <term>entityGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The GUID of the entity.</term>
        ///   </item>
        ///   <item>
        ///     <term>entityStatus</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</term>
        ///   </item>
        ///   <item>
        ///     <term>removePropagationsOnEntityDelete</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term>Determines if propagations will be removed on entity deletion.</term>
        ///   </item>
        ///   <item>
        ///     <term>validityPeriods</term>
        ///     <term>TimeBoundary[]</term>
        ///     <term></term>
        ///     <term>An array of time boundaries indicating validity periods.</term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>indicate the source who create the classification detail</term>
        ///   </item>
        ///   <item>
        ///     <term>sourceDetails</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term>more detail on source information</term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasTermAssignmentHeader</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>confidence</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term>The confidence of the term assignment.</term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The user who created the record.</term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The description of the term assignment.</term>
        ///   </item>
        ///   <item>
        ///     <term>displayText</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The display text.</term>
        ///   </item>
        ///   <item>
        ///     <term>expression</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The expression of the term assignment.</term>
        ///   </item>
        ///   <item>
        ///     <term>relationGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The GUID of the relationship.</term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The source of the term.</term>
        ///   </item>
        ///   <item>
        ///     <term>status</term>
        ///     <term>&quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;</term>
        ///     <term></term>
        ///     <term>The status of terms assignment.</term>
        ///   </item>
        ///   <item>
        ///     <term>steward</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The steward of the term.</term>
        ///   </item>
        ///   <item>
        ///     <term>termGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The GUID of the term.</term>
        ///   </item>
        /// </list>
        /// Schema for <c>ContactBasic</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>id</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>Azure Active Directory object Id.</term>
        ///   </item>
        ///   <item>
        ///     <term>info</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>additional information to describe this contact.</term>
        ///   </item>
        /// </list>
        /// Schema for <c>TimeBoundary</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>endTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The end of the time boundary.</term>
        ///   </item>
        ///   <item>
        ///     <term>startTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The start of the time boundary.</term>
        ///   </item>
        ///   <item>
        ///     <term>timeZone</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The timezone of the time boundary.</term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="collection"> the collection unique name. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> CreateOrUpdateEntityAsync(string collection, RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateCreateOrUpdateEntityRequest(collection, content, options);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewCollections.CreateOrUpdateEntity");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates an entity to a collection.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>referredEntities</term>
        ///     <term>Dictionary&lt;string, AtlasEntity&gt;</term>
        ///     <term></term>
        ///     <term>The referred entities.</term>
        ///   </item>
        ///   <item>
        ///     <term>entity</term>
        ///     <term>AtlasEntity</term>
        ///     <term></term>
        ///     <term>An instance of an entity - like hive_table, hive_database.</term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasEntity</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term>The attributes of the struct.</term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The name of the type.</term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>ETag for concurrency control.</term>
        ///   </item>
        ///   <item>
        ///     <term>classifications</term>
        ///     <term>AtlasClassification[]</term>
        ///     <term></term>
        ///     <term>An array of classifications.</term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term>The created time of the record.</term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The user who created the record.</term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The GUID of the entity.</term>
        ///   </item>
        ///   <item>
        ///     <term>homeId</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The home ID of the entity.</term>
        ///   </item>
        ///   <item>
        ///     <term>meanings</term>
        ///     <term>AtlasTermAssignmentHeader[]</term>
        ///     <term></term>
        ///     <term>An array of term assignment headers indicating the meanings of the entity.</term>
        ///   </item>
        ///   <item>
        ///     <term>provenanceType</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term>Used to record the provenance of an instance of an entity or relationship.</term>
        ///   </item>
        ///   <item>
        ///     <term>proxy</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term>Determines if there&apos;s a proxy.</term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipAttributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term>The attributes of relationship.</term>
        ///   </item>
        ///   <item>
        ///     <term>status</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term>The update time of the record.</term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The user who updated the record.</term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term>The version of the entity.</term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>indicate the source who create the classification detail</term>
        ///   </item>
        ///   <item>
        ///     <term>sourceDetails</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term>more detail on source information</term>
        ///   </item>
        ///   <item>
        ///     <term>contacts</term>
        ///     <term>Dictionary&lt;string, ContactBasic[]&gt;</term>
        ///     <term></term>
        ///     <term>The dictionary of contacts for terms. Key could be Expert or Owner.</term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasClassification</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term>The attributes of the struct.</term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The name of the type.</term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>ETag for concurrency control.</term>
        ///   </item>
        ///   <item>
        ///     <term>entityGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The GUID of the entity.</term>
        ///   </item>
        ///   <item>
        ///     <term>entityStatus</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</term>
        ///   </item>
        ///   <item>
        ///     <term>removePropagationsOnEntityDelete</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term>Determines if propagations will be removed on entity deletion.</term>
        ///   </item>
        ///   <item>
        ///     <term>validityPeriods</term>
        ///     <term>TimeBoundary[]</term>
        ///     <term></term>
        ///     <term>An array of time boundaries indicating validity periods.</term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>indicate the source who create the classification detail</term>
        ///   </item>
        ///   <item>
        ///     <term>sourceDetails</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term>more detail on source information</term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasTermAssignmentHeader</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>confidence</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term>The confidence of the term assignment.</term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The user who created the record.</term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The description of the term assignment.</term>
        ///   </item>
        ///   <item>
        ///     <term>displayText</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The display text.</term>
        ///   </item>
        ///   <item>
        ///     <term>expression</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The expression of the term assignment.</term>
        ///   </item>
        ///   <item>
        ///     <term>relationGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The GUID of the relationship.</term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The source of the term.</term>
        ///   </item>
        ///   <item>
        ///     <term>status</term>
        ///     <term>&quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;</term>
        ///     <term></term>
        ///     <term>The status of terms assignment.</term>
        ///   </item>
        ///   <item>
        ///     <term>steward</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The steward of the term.</term>
        ///   </item>
        ///   <item>
        ///     <term>termGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The GUID of the term.</term>
        ///   </item>
        /// </list>
        /// Schema for <c>ContactBasic</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>id</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>Azure Active Directory object Id.</term>
        ///   </item>
        ///   <item>
        ///     <term>info</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>additional information to describe this contact.</term>
        ///   </item>
        /// </list>
        /// Schema for <c>TimeBoundary</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>endTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The end of the time boundary.</term>
        ///   </item>
        ///   <item>
        ///     <term>startTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The start of the time boundary.</term>
        ///   </item>
        ///   <item>
        ///     <term>timeZone</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The timezone of the time boundary.</term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="collection"> the collection unique name. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response CreateOrUpdateEntity(string collection, RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateCreateOrUpdateEntityRequest(collection, content, options);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewCollections.CreateOrUpdateEntity");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="CreateOrUpdateEntity"/> and <see cref="CreateOrUpdateEntityAsync"/> operations. </summary>
        /// <param name="collection"> the collection unique name. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
        private HttpMessage CreateCreateOrUpdateEntityRequest(string collection, RequestContent content, RequestOptions options = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/collections/", false);
            uri.AppendPath(collection, true);
            uri.AppendPath("/entity", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        /// <summary>
        /// Creates or updates entities in bulk to a collection.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>referredEntities</term>
        ///     <term>Dictionary&lt;string, AtlasEntity&gt;</term>
        ///     <term></term>
        ///     <term>The referred entities.</term>
        ///   </item>
        ///   <item>
        ///     <term>entities</term>
        ///     <term>AtlasEntity[]</term>
        ///     <term></term>
        ///     <term>An array of entities.</term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasEntity</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term>The attributes of the struct.</term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The name of the type.</term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>ETag for concurrency control.</term>
        ///   </item>
        ///   <item>
        ///     <term>classifications</term>
        ///     <term>AtlasClassification[]</term>
        ///     <term></term>
        ///     <term>An array of classifications.</term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term>The created time of the record.</term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The user who created the record.</term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The GUID of the entity.</term>
        ///   </item>
        ///   <item>
        ///     <term>homeId</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The home ID of the entity.</term>
        ///   </item>
        ///   <item>
        ///     <term>meanings</term>
        ///     <term>AtlasTermAssignmentHeader[]</term>
        ///     <term></term>
        ///     <term>An array of term assignment headers indicating the meanings of the entity.</term>
        ///   </item>
        ///   <item>
        ///     <term>provenanceType</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term>Used to record the provenance of an instance of an entity or relationship.</term>
        ///   </item>
        ///   <item>
        ///     <term>proxy</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term>Determines if there&apos;s a proxy.</term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipAttributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term>The attributes of relationship.</term>
        ///   </item>
        ///   <item>
        ///     <term>status</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term>The update time of the record.</term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The user who updated the record.</term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term>The version of the entity.</term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>indicate the source who create the classification detail</term>
        ///   </item>
        ///   <item>
        ///     <term>sourceDetails</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term>more detail on source information</term>
        ///   </item>
        ///   <item>
        ///     <term>contacts</term>
        ///     <term>Dictionary&lt;string, ContactBasic[]&gt;</term>
        ///     <term></term>
        ///     <term>The dictionary of contacts for terms. Key could be Expert or Owner.</term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasClassification</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term>The attributes of the struct.</term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The name of the type.</term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>ETag for concurrency control.</term>
        ///   </item>
        ///   <item>
        ///     <term>entityGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The GUID of the entity.</term>
        ///   </item>
        ///   <item>
        ///     <term>entityStatus</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</term>
        ///   </item>
        ///   <item>
        ///     <term>removePropagationsOnEntityDelete</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term>Determines if propagations will be removed on entity deletion.</term>
        ///   </item>
        ///   <item>
        ///     <term>validityPeriods</term>
        ///     <term>TimeBoundary[]</term>
        ///     <term></term>
        ///     <term>An array of time boundaries indicating validity periods.</term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>indicate the source who create the classification detail</term>
        ///   </item>
        ///   <item>
        ///     <term>sourceDetails</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term>more detail on source information</term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasTermAssignmentHeader</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>confidence</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term>The confidence of the term assignment.</term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The user who created the record.</term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The description of the term assignment.</term>
        ///   </item>
        ///   <item>
        ///     <term>displayText</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The display text.</term>
        ///   </item>
        ///   <item>
        ///     <term>expression</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The expression of the term assignment.</term>
        ///   </item>
        ///   <item>
        ///     <term>relationGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The GUID of the relationship.</term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The source of the term.</term>
        ///   </item>
        ///   <item>
        ///     <term>status</term>
        ///     <term>&quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;</term>
        ///     <term></term>
        ///     <term>The status of terms assignment.</term>
        ///   </item>
        ///   <item>
        ///     <term>steward</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The steward of the term.</term>
        ///   </item>
        ///   <item>
        ///     <term>termGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The GUID of the term.</term>
        ///   </item>
        /// </list>
        /// Schema for <c>ContactBasic</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>id</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>Azure Active Directory object Id.</term>
        ///   </item>
        ///   <item>
        ///     <term>info</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>additional information to describe this contact.</term>
        ///   </item>
        /// </list>
        /// Schema for <c>TimeBoundary</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>endTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The end of the time boundary.</term>
        ///   </item>
        ///   <item>
        ///     <term>startTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The start of the time boundary.</term>
        ///   </item>
        ///   <item>
        ///     <term>timeZone</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The timezone of the time boundary.</term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="collection"> the collection unique name. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> CreateOrUpdateEntityInBulkAsync(string collection, RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateCreateOrUpdateEntityInBulkRequest(collection, content, options);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewCollections.CreateOrUpdateEntityInBulk");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates entities in bulk to a collection.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>referredEntities</term>
        ///     <term>Dictionary&lt;string, AtlasEntity&gt;</term>
        ///     <term></term>
        ///     <term>The referred entities.</term>
        ///   </item>
        ///   <item>
        ///     <term>entities</term>
        ///     <term>AtlasEntity[]</term>
        ///     <term></term>
        ///     <term>An array of entities.</term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasEntity</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term>The attributes of the struct.</term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The name of the type.</term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>ETag for concurrency control.</term>
        ///   </item>
        ///   <item>
        ///     <term>classifications</term>
        ///     <term>AtlasClassification[]</term>
        ///     <term></term>
        ///     <term>An array of classifications.</term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term>The created time of the record.</term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The user who created the record.</term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The GUID of the entity.</term>
        ///   </item>
        ///   <item>
        ///     <term>homeId</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The home ID of the entity.</term>
        ///   </item>
        ///   <item>
        ///     <term>meanings</term>
        ///     <term>AtlasTermAssignmentHeader[]</term>
        ///     <term></term>
        ///     <term>An array of term assignment headers indicating the meanings of the entity.</term>
        ///   </item>
        ///   <item>
        ///     <term>provenanceType</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term>Used to record the provenance of an instance of an entity or relationship.</term>
        ///   </item>
        ///   <item>
        ///     <term>proxy</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term>Determines if there&apos;s a proxy.</term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipAttributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term>The attributes of relationship.</term>
        ///   </item>
        ///   <item>
        ///     <term>status</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term>The update time of the record.</term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The user who updated the record.</term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term>The version of the entity.</term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>indicate the source who create the classification detail</term>
        ///   </item>
        ///   <item>
        ///     <term>sourceDetails</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term>more detail on source information</term>
        ///   </item>
        ///   <item>
        ///     <term>contacts</term>
        ///     <term>Dictionary&lt;string, ContactBasic[]&gt;</term>
        ///     <term></term>
        ///     <term>The dictionary of contacts for terms. Key could be Expert or Owner.</term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasClassification</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term>The attributes of the struct.</term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The name of the type.</term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>ETag for concurrency control.</term>
        ///   </item>
        ///   <item>
        ///     <term>entityGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The GUID of the entity.</term>
        ///   </item>
        ///   <item>
        ///     <term>entityStatus</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</term>
        ///   </item>
        ///   <item>
        ///     <term>removePropagationsOnEntityDelete</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term>Determines if propagations will be removed on entity deletion.</term>
        ///   </item>
        ///   <item>
        ///     <term>validityPeriods</term>
        ///     <term>TimeBoundary[]</term>
        ///     <term></term>
        ///     <term>An array of time boundaries indicating validity periods.</term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>indicate the source who create the classification detail</term>
        ///   </item>
        ///   <item>
        ///     <term>sourceDetails</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term>more detail on source information</term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasTermAssignmentHeader</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>confidence</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term>The confidence of the term assignment.</term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The user who created the record.</term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The description of the term assignment.</term>
        ///   </item>
        ///   <item>
        ///     <term>displayText</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The display text.</term>
        ///   </item>
        ///   <item>
        ///     <term>expression</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The expression of the term assignment.</term>
        ///   </item>
        ///   <item>
        ///     <term>relationGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The GUID of the relationship.</term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The source of the term.</term>
        ///   </item>
        ///   <item>
        ///     <term>status</term>
        ///     <term>&quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;</term>
        ///     <term></term>
        ///     <term>The status of terms assignment.</term>
        ///   </item>
        ///   <item>
        ///     <term>steward</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The steward of the term.</term>
        ///   </item>
        ///   <item>
        ///     <term>termGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The GUID of the term.</term>
        ///   </item>
        /// </list>
        /// Schema for <c>ContactBasic</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>id</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>Azure Active Directory object Id.</term>
        ///   </item>
        ///   <item>
        ///     <term>info</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>additional information to describe this contact.</term>
        ///   </item>
        /// </list>
        /// Schema for <c>TimeBoundary</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>endTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The end of the time boundary.</term>
        ///   </item>
        ///   <item>
        ///     <term>startTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The start of the time boundary.</term>
        ///   </item>
        ///   <item>
        ///     <term>timeZone</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The timezone of the time boundary.</term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="collection"> the collection unique name. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response CreateOrUpdateEntityInBulk(string collection, RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateCreateOrUpdateEntityInBulkRequest(collection, content, options);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewCollections.CreateOrUpdateEntityInBulk");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="CreateOrUpdateEntityInBulk"/> and <see cref="CreateOrUpdateEntityInBulkAsync"/> operations. </summary>
        /// <param name="collection"> the collection unique name. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
        private HttpMessage CreateCreateOrUpdateEntityInBulkRequest(string collection, RequestContent content, RequestOptions options = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/collections/", false);
            uri.AppendPath(collection, true);
            uri.AppendPath("/entity/bulk", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        /// <summary> Move existing entities to the target collection. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>entityGuids</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term>An array of entity guids to be moved to target collection.</term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="collection"> the collection unique name. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> MoveEntitiesToCollectionAsync(string collection, RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateMoveEntitiesToCollectionRequest(collection, content, options);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewCollections.MoveEntitiesToCollection");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Move existing entities to the target collection. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>entityGuids</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term>An array of entity guids to be moved to target collection.</term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="collection"> the collection unique name. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response MoveEntitiesToCollection(string collection, RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateMoveEntitiesToCollectionRequest(collection, content, options);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewCollections.MoveEntitiesToCollection");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="MoveEntitiesToCollection"/> and <see cref="MoveEntitiesToCollectionAsync"/> operations. </summary>
        /// <param name="collection"> the collection unique name. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
        private HttpMessage CreateMoveEntitiesToCollectionRequest(string collection, RequestContent content, RequestOptions options = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/collections/", false);
            uri.AppendPath(collection, true);
            uri.AppendPath("/entity/moveHere", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }
    }
}
