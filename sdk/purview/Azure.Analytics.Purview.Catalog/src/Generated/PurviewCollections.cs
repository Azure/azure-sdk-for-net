// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Purview.Catalog
{
    /// <summary> The PurviewCollections service client. </summary>
    public partial class PurviewCollections
    {
        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get => _pipeline; }
        private HttpPipeline _pipeline;
        private readonly string[] AuthorizationScopes = { "https://purview.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private Uri endpoint;
        private readonly string apiVersion;
        private readonly ClientDiagnostics _clientDiagnostics;

        /// <summary> Initializes a new instance of PurviewCollections for mocking. </summary>
        protected PurviewCollections()
        {
        }

        /// <summary>
        /// Creates or updates an entity to a collection.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   referredEntities: Dictionary&lt;string, AtlasEntity&gt;,
        ///   entity: {
        ///     attributes: Dictionary&lt;string, AnyObject&gt;,
        ///     typeName: string,
        ///     lastModifiedTS: string,
        ///     classifications: [
        ///       {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;,
        ///         typeName: string,
        ///         lastModifiedTS: string,
        ///         entityGuid: string,
        ///         entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///         removePropagationsOnEntityDelete: boolean,
        ///         validityPeriods: [
        ///           {
        ///             endTime: string,
        ///             startTime: string,
        ///             timeZone: string
        ///           }
        ///         ],
        ///         source: string,
        ///         sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///       }
        ///     ],
        ///     createTime: number,
        ///     createdBy: string,
        ///     guid: string,
        ///     homeId: string,
        ///     meanings: [
        ///       {
        ///         confidence: number,
        ///         createdBy: string,
        ///         description: string,
        ///         displayText: string,
        ///         expression: string,
        ///         relationGuid: string,
        ///         source: string,
        ///         status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///         steward: string,
        ///         termGuid: string
        ///       }
        ///     ],
        ///     provenanceType: number,
        ///     proxy: boolean,
        ///     relationshipAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///     status: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///     updateTime: number,
        ///     updatedBy: string,
        ///     version: number,
        ///     source: string,
        ///     sourceDetails: Dictionary&lt;string, AnyObject&gt;,
        ///     contacts: Dictionary&lt;string, ContactBasic[]&gt;
        ///   }
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;,
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;,
        ///   partialUpdatedEntities: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       classificationNames: [string],
        ///       classifications: [
        ///         {
        ///           attributes: Dictionary&lt;string, AnyObject&gt;,
        ///           typeName: string,
        ///           lastModifiedTS: string,
        ///           entityGuid: string,
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///           removePropagationsOnEntityDelete: boolean,
        ///           validityPeriods: [
        ///             {
        ///               endTime: string,
        ///               startTime: string,
        ///               timeZone: string
        ///             }
        ///           ],
        ///           source: string,
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///         }
        ///       ],
        ///       displayText: string,
        ///       guid: string,
        ///       meaningNames: [string],
        ///       meanings: [
        ///         {
        ///           confidence: number,
        ///           createdBy: string,
        ///           description: string,
        ///           displayText: string,
        ///           expression: string,
        ///           relationGuid: string,
        ///           source: string,
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///           steward: string,
        ///           termGuid: string
        ///         }
        ///       ],
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="collection"> the collection unique name. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> CreateOrUpdateEntityAsync(string collection, RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateCreateOrUpdateEntityRequest(collection, content);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewCollections.CreateOrUpdateEntity");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates an entity to a collection.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   referredEntities: Dictionary&lt;string, AtlasEntity&gt;,
        ///   entity: {
        ///     attributes: Dictionary&lt;string, AnyObject&gt;,
        ///     typeName: string,
        ///     lastModifiedTS: string,
        ///     classifications: [
        ///       {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;,
        ///         typeName: string,
        ///         lastModifiedTS: string,
        ///         entityGuid: string,
        ///         entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///         removePropagationsOnEntityDelete: boolean,
        ///         validityPeriods: [
        ///           {
        ///             endTime: string,
        ///             startTime: string,
        ///             timeZone: string
        ///           }
        ///         ],
        ///         source: string,
        ///         sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///       }
        ///     ],
        ///     createTime: number,
        ///     createdBy: string,
        ///     guid: string,
        ///     homeId: string,
        ///     meanings: [
        ///       {
        ///         confidence: number,
        ///         createdBy: string,
        ///         description: string,
        ///         displayText: string,
        ///         expression: string,
        ///         relationGuid: string,
        ///         source: string,
        ///         status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///         steward: string,
        ///         termGuid: string
        ///       }
        ///     ],
        ///     provenanceType: number,
        ///     proxy: boolean,
        ///     relationshipAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///     status: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///     updateTime: number,
        ///     updatedBy: string,
        ///     version: number,
        ///     source: string,
        ///     sourceDetails: Dictionary&lt;string, AnyObject&gt;,
        ///     contacts: Dictionary&lt;string, ContactBasic[]&gt;
        ///   }
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;,
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;,
        ///   partialUpdatedEntities: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       classificationNames: [string],
        ///       classifications: [
        ///         {
        ///           attributes: Dictionary&lt;string, AnyObject&gt;,
        ///           typeName: string,
        ///           lastModifiedTS: string,
        ///           entityGuid: string,
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///           removePropagationsOnEntityDelete: boolean,
        ///           validityPeriods: [
        ///             {
        ///               endTime: string,
        ///               startTime: string,
        ///               timeZone: string
        ///             }
        ///           ],
        ///           source: string,
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///         }
        ///       ],
        ///       displayText: string,
        ///       guid: string,
        ///       meaningNames: [string],
        ///       meanings: [
        ///         {
        ///           confidence: number,
        ///           createdBy: string,
        ///           description: string,
        ///           displayText: string,
        ///           expression: string,
        ///           relationGuid: string,
        ///           source: string,
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///           steward: string,
        ///           termGuid: string
        ///         }
        ///       ],
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="collection"> the collection unique name. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response CreateOrUpdateEntity(string collection, RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateCreateOrUpdateEntityRequest(collection, content);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewCollections.CreateOrUpdateEntity");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateCreateOrUpdateEntityRequest(string collection, RequestContent content)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/collections/", false);
            uri.AppendPath(collection, true);
            uri.AppendPath("/entity", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        /// <summary>
        /// Creates or updates entities in bulk to a collection.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   referredEntities: Dictionary&lt;string, AtlasEntity&gt;,
        ///   entities: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       classifications: [
        ///         {
        ///           attributes: Dictionary&lt;string, AnyObject&gt;,
        ///           typeName: string,
        ///           lastModifiedTS: string,
        ///           entityGuid: string,
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///           removePropagationsOnEntityDelete: boolean,
        ///           validityPeriods: [
        ///             {
        ///               endTime: string,
        ///               startTime: string,
        ///               timeZone: string
        ///             }
        ///           ],
        ///           source: string,
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///         }
        ///       ],
        ///       createTime: number,
        ///       createdBy: string,
        ///       guid: string,
        ///       homeId: string,
        ///       meanings: [
        ///         {
        ///           confidence: number,
        ///           createdBy: string,
        ///           description: string,
        ///           displayText: string,
        ///           expression: string,
        ///           relationGuid: string,
        ///           source: string,
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///           steward: string,
        ///           termGuid: string
        ///         }
        ///       ],
        ///       provenanceType: number,
        ///       proxy: boolean,
        ///       relationshipAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       updateTime: number,
        ///       updatedBy: string,
        ///       version: number,
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;,
        ///       contacts: Dictionary&lt;string, ContactBasic[]&gt;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;,
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;,
        ///   partialUpdatedEntities: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       classificationNames: [string],
        ///       classifications: [
        ///         {
        ///           attributes: Dictionary&lt;string, AnyObject&gt;,
        ///           typeName: string,
        ///           lastModifiedTS: string,
        ///           entityGuid: string,
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///           removePropagationsOnEntityDelete: boolean,
        ///           validityPeriods: [
        ///             {
        ///               endTime: string,
        ///               startTime: string,
        ///               timeZone: string
        ///             }
        ///           ],
        ///           source: string,
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///         }
        ///       ],
        ///       displayText: string,
        ///       guid: string,
        ///       meaningNames: [string],
        ///       meanings: [
        ///         {
        ///           confidence: number,
        ///           createdBy: string,
        ///           description: string,
        ///           displayText: string,
        ///           expression: string,
        ///           relationGuid: string,
        ///           source: string,
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///           steward: string,
        ///           termGuid: string
        ///         }
        ///       ],
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="collection"> the collection unique name. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> CreateOrUpdateEntityInBulkAsync(string collection, RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateCreateOrUpdateEntityInBulkRequest(collection, content);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewCollections.CreateOrUpdateEntityInBulk");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates entities in bulk to a collection.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   referredEntities: Dictionary&lt;string, AtlasEntity&gt;,
        ///   entities: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       classifications: [
        ///         {
        ///           attributes: Dictionary&lt;string, AnyObject&gt;,
        ///           typeName: string,
        ///           lastModifiedTS: string,
        ///           entityGuid: string,
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///           removePropagationsOnEntityDelete: boolean,
        ///           validityPeriods: [
        ///             {
        ///               endTime: string,
        ///               startTime: string,
        ///               timeZone: string
        ///             }
        ///           ],
        ///           source: string,
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///         }
        ///       ],
        ///       createTime: number,
        ///       createdBy: string,
        ///       guid: string,
        ///       homeId: string,
        ///       meanings: [
        ///         {
        ///           confidence: number,
        ///           createdBy: string,
        ///           description: string,
        ///           displayText: string,
        ///           expression: string,
        ///           relationGuid: string,
        ///           source: string,
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///           steward: string,
        ///           termGuid: string
        ///         }
        ///       ],
        ///       provenanceType: number,
        ///       proxy: boolean,
        ///       relationshipAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       updateTime: number,
        ///       updatedBy: string,
        ///       version: number,
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;,
        ///       contacts: Dictionary&lt;string, ContactBasic[]&gt;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;,
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;,
        ///   partialUpdatedEntities: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       classificationNames: [string],
        ///       classifications: [
        ///         {
        ///           attributes: Dictionary&lt;string, AnyObject&gt;,
        ///           typeName: string,
        ///           lastModifiedTS: string,
        ///           entityGuid: string,
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///           removePropagationsOnEntityDelete: boolean,
        ///           validityPeriods: [
        ///             {
        ///               endTime: string,
        ///               startTime: string,
        ///               timeZone: string
        ///             }
        ///           ],
        ///           source: string,
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///         }
        ///       ],
        ///       displayText: string,
        ///       guid: string,
        ///       meaningNames: [string],
        ///       meanings: [
        ///         {
        ///           confidence: number,
        ///           createdBy: string,
        ///           description: string,
        ///           displayText: string,
        ///           expression: string,
        ///           relationGuid: string,
        ///           source: string,
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///           steward: string,
        ///           termGuid: string
        ///         }
        ///       ],
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="collection"> the collection unique name. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response CreateOrUpdateEntityInBulk(string collection, RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateCreateOrUpdateEntityInBulkRequest(collection, content);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewCollections.CreateOrUpdateEntityInBulk");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateCreateOrUpdateEntityInBulkRequest(string collection, RequestContent content)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/collections/", false);
            uri.AppendPath(collection, true);
            uri.AppendPath("/entity/bulk", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        /// <summary> Move existing entities to the target collection. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   entityGuids: [string]
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;,
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;,
        ///   partialUpdatedEntities: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       classificationNames: [string],
        ///       classifications: [
        ///         {
        ///           attributes: Dictionary&lt;string, AnyObject&gt;,
        ///           typeName: string,
        ///           lastModifiedTS: string,
        ///           entityGuid: string,
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///           removePropagationsOnEntityDelete: boolean,
        ///           validityPeriods: [
        ///             {
        ///               endTime: string,
        ///               startTime: string,
        ///               timeZone: string
        ///             }
        ///           ],
        ///           source: string,
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///         }
        ///       ],
        ///       displayText: string,
        ///       guid: string,
        ///       meaningNames: [string],
        ///       meanings: [
        ///         {
        ///           confidence: number,
        ///           createdBy: string,
        ///           description: string,
        ///           displayText: string,
        ///           expression: string,
        ///           relationGuid: string,
        ///           source: string,
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///           steward: string,
        ///           termGuid: string
        ///         }
        ///       ],
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="collection"> the collection unique name. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> MoveEntitiesToCollectionAsync(string collection, RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateMoveEntitiesToCollectionRequest(collection, content);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewCollections.MoveEntitiesToCollection");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Move existing entities to the target collection. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   entityGuids: [string]
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;,
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;,
        ///   partialUpdatedEntities: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       classificationNames: [string],
        ///       classifications: [
        ///         {
        ///           attributes: Dictionary&lt;string, AnyObject&gt;,
        ///           typeName: string,
        ///           lastModifiedTS: string,
        ///           entityGuid: string,
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///           removePropagationsOnEntityDelete: boolean,
        ///           validityPeriods: [
        ///             {
        ///               endTime: string,
        ///               startTime: string,
        ///               timeZone: string
        ///             }
        ///           ],
        ///           source: string,
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///         }
        ///       ],
        ///       displayText: string,
        ///       guid: string,
        ///       meaningNames: [string],
        ///       meanings: [
        ///         {
        ///           confidence: number,
        ///           createdBy: string,
        ///           description: string,
        ///           displayText: string,
        ///           expression: string,
        ///           relationGuid: string,
        ///           source: string,
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///           steward: string,
        ///           termGuid: string
        ///         }
        ///       ],
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="collection"> the collection unique name. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response MoveEntitiesToCollection(string collection, RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateMoveEntitiesToCollectionRequest(collection, content);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewCollections.MoveEntitiesToCollection");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateMoveEntitiesToCollectionRequest(string collection, RequestContent content)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/collections/", false);
            uri.AppendPath(collection, true);
            uri.AppendPath("/entity/moveHere", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }
    }
}
