// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Analytics.Purview.Catalog.Models
{
    public partial class DateFormat : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(AvailableLocales))
            {
                writer.WritePropertyName("availableLocales");
                writer.WriteStartArray();
                foreach (var item in AvailableLocales)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Calendar))
            {
                writer.WritePropertyName("calendar");
                writer.WriteNumberValue(Calendar.Value);
            }
            if (Optional.IsDefined(DateInstance))
            {
                writer.WritePropertyName("dateInstance");
                writer.WriteObjectValue(DateInstance);
            }
            if (Optional.IsDefined(DateTimeInstance))
            {
                writer.WritePropertyName("dateTimeInstance");
                writer.WriteObjectValue(DateTimeInstance);
            }
            if (Optional.IsDefined(Instance))
            {
                writer.WritePropertyName("instance");
                writer.WriteObjectValue(Instance);
            }
            if (Optional.IsDefined(Lenient))
            {
                writer.WritePropertyName("lenient");
                writer.WriteBooleanValue(Lenient.Value);
            }
            if (Optional.IsDefined(NumberFormat))
            {
                writer.WritePropertyName("numberFormat");
                writer.WriteObjectValue(NumberFormat);
            }
            if (Optional.IsDefined(TimeInstance))
            {
                writer.WritePropertyName("timeInstance");
                writer.WriteObjectValue(TimeInstance);
            }
            if (Optional.IsDefined(TimeZone))
            {
                writer.WritePropertyName("timeZone");
                writer.WriteObjectValue(TimeZone);
            }
            writer.WriteEndObject();
        }

        internal static DateFormat DeserializeDateFormat(JsonElement element)
        {
            Optional<IList<string>> availableLocales = default;
            Optional<float> calendar = default;
            Optional<DateFormat> dateInstance = default;
            Optional<DateFormat> dateTimeInstance = default;
            Optional<DateFormat> instance = default;
            Optional<bool> lenient = default;
            Optional<NumberFormat> numberFormat = default;
            Optional<DateFormat> timeInstance = default;
            Optional<TimeZone> timeZone = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("availableLocales"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    availableLocales = array;
                    continue;
                }
                if (property.NameEquals("calendar"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    calendar = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("dateInstance"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    dateInstance = DeserializeDateFormat(property.Value);
                    continue;
                }
                if (property.NameEquals("dateTimeInstance"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    dateTimeInstance = DeserializeDateFormat(property.Value);
                    continue;
                }
                if (property.NameEquals("instance"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    instance = DeserializeDateFormat(property.Value);
                    continue;
                }
                if (property.NameEquals("lenient"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lenient = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("numberFormat"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    numberFormat = NumberFormat.DeserializeNumberFormat(property.Value);
                    continue;
                }
                if (property.NameEquals("timeInstance"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    timeInstance = DeserializeDateFormat(property.Value);
                    continue;
                }
                if (property.NameEquals("timeZone"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    timeZone = TimeZone.DeserializeTimeZone(property.Value);
                    continue;
                }
            }
            return new DateFormat(Optional.ToList(availableLocales), Optional.ToNullable(calendar), dateInstance.Value, dateTimeInstance.Value, instance.Value, Optional.ToNullable(lenient), numberFormat.Value, timeInstance.Value, timeZone.Value);
        }
    }
}
