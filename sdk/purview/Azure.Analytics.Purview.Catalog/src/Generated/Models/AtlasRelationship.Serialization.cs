// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Analytics.Purview.Catalog.Models
{
    public partial class AtlasRelationship : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(CreateTime))
            {
                writer.WritePropertyName("createTime");
                writer.WriteNumberValue(CreateTime.Value);
            }
            if (Optional.IsDefined(CreatedBy))
            {
                writer.WritePropertyName("createdBy");
                writer.WriteStringValue(CreatedBy);
            }
            if (Optional.IsDefined(End1))
            {
                writer.WritePropertyName("end1");
                writer.WriteObjectValue(End1);
            }
            if (Optional.IsDefined(End2))
            {
                writer.WritePropertyName("end2");
                writer.WriteObjectValue(End2);
            }
            if (Optional.IsDefined(Guid))
            {
                writer.WritePropertyName("guid");
                writer.WriteStringValue(Guid);
            }
            if (Optional.IsDefined(HomeId))
            {
                writer.WritePropertyName("homeId");
                writer.WriteStringValue(HomeId);
            }
            if (Optional.IsDefined(Label))
            {
                writer.WritePropertyName("label");
                writer.WriteStringValue(Label);
            }
            if (Optional.IsDefined(ProvenanceType))
            {
                writer.WritePropertyName("provenanceType");
                writer.WriteNumberValue(ProvenanceType.Value);
            }
            if (Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status");
                writer.WriteStringValue(Status.Value.ToString());
            }
            if (Optional.IsDefined(UpdateTime))
            {
                writer.WritePropertyName("updateTime");
                writer.WriteNumberValue(UpdateTime.Value);
            }
            if (Optional.IsDefined(UpdatedBy))
            {
                writer.WritePropertyName("updatedBy");
                writer.WriteStringValue(UpdatedBy);
            }
            if (Optional.IsDefined(Version))
            {
                writer.WritePropertyName("version");
                writer.WriteNumberValue(Version.Value);
            }
            if (Optional.IsCollectionDefined(Attributes))
            {
                writer.WritePropertyName("attributes");
                writer.WriteStartObject();
                foreach (var item in Attributes)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(TypeName))
            {
                writer.WritePropertyName("typeName");
                writer.WriteStringValue(TypeName);
            }
            if (Optional.IsDefined(LastModifiedTS))
            {
                writer.WritePropertyName("lastModifiedTS");
                writer.WriteStringValue(LastModifiedTS);
            }
            writer.WriteEndObject();
        }

        internal static AtlasRelationship DeserializeAtlasRelationship(JsonElement element)
        {
            Optional<float> createTime = default;
            Optional<string> createdBy = default;
            Optional<AtlasObjectId> end1 = default;
            Optional<AtlasObjectId> end2 = default;
            Optional<string> guid = default;
            Optional<string> homeId = default;
            Optional<string> label = default;
            Optional<float> provenanceType = default;
            Optional<StatusAtlasRelationship> status = default;
            Optional<float> updateTime = default;
            Optional<string> updatedBy = default;
            Optional<float> version = default;
            Optional<IDictionary<string, object>> attributes = default;
            Optional<string> typeName = default;
            Optional<string> lastModifiedTS = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("createTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    createTime = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("createdBy"))
                {
                    createdBy = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("end1"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    end1 = AtlasObjectId.DeserializeAtlasObjectId(property.Value);
                    continue;
                }
                if (property.NameEquals("end2"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    end2 = AtlasObjectId.DeserializeAtlasObjectId(property.Value);
                    continue;
                }
                if (property.NameEquals("guid"))
                {
                    guid = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("homeId"))
                {
                    homeId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("label"))
                {
                    label = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("provenanceType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    provenanceType = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("status"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    status = new StatusAtlasRelationship(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("updateTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    updateTime = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("updatedBy"))
                {
                    updatedBy = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("version"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    version = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("attributes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, object> dictionary = new Dictionary<string, object>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetObject());
                    }
                    attributes = dictionary;
                    continue;
                }
                if (property.NameEquals("typeName"))
                {
                    typeName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastModifiedTS"))
                {
                    lastModifiedTS = property.Value.GetString();
                    continue;
                }
            }
            return new AtlasRelationship(Optional.ToDictionary(attributes), typeName.Value, lastModifiedTS.Value, Optional.ToNullable(createTime), createdBy.Value, end1.Value, end2.Value, guid.Value, homeId.Value, label.Value, Optional.ToNullable(provenanceType), Optional.ToNullable(status), Optional.ToNullable(updateTime), updatedBy.Value, Optional.ToNullable(version));
        }
    }
}
