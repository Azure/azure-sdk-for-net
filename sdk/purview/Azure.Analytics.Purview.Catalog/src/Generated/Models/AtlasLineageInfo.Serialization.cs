// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Analytics.Purview.Catalog.Models
{
    public partial class AtlasLineageInfo
    {
        internal static AtlasLineageInfo DeserializeAtlasLineageInfo(JsonElement element)
        {
            Optional<string> baseEntityGuid = default;
            Optional<IReadOnlyDictionary<string, AtlasEntityHeader>> guidEntityMap = default;
            Optional<IReadOnlyDictionary<string, IDictionary<string, object>>> widthCounts = default;
            Optional<int> lineageDepth = default;
            Optional<int> lineageWidth = default;
            Optional<bool> includeParent = default;
            Optional<int> childrenCount = default;
            Optional<LineageDirection> lineageDirection = default;
            Optional<IReadOnlyList<ParentRelation>> parentRelations = default;
            Optional<IReadOnlyList<LineageRelation>> relations = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("baseEntityGuid"))
                {
                    baseEntityGuid = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("guidEntityMap"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, AtlasEntityHeader> dictionary = new Dictionary<string, AtlasEntityHeader>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, AtlasEntityHeader.DeserializeAtlasEntityHeader(property0.Value));
                    }
                    guidEntityMap = dictionary;
                    continue;
                }
                if (property.NameEquals("widthCounts"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, IDictionary<string, object>> dictionary = new Dictionary<string, IDictionary<string, object>>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        Dictionary<string, object> dictionary0 = new Dictionary<string, object>();
                        foreach (var property1 in property0.Value.EnumerateObject())
                        {
                            dictionary0.Add(property1.Name, property1.Value.GetObject());
                        }
                        dictionary.Add(property0.Name, dictionary0);
                    }
                    widthCounts = dictionary;
                    continue;
                }
                if (property.NameEquals("lineageDepth"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lineageDepth = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("lineageWidth"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lineageWidth = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("includeParent"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    includeParent = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("childrenCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    childrenCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("lineageDirection"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lineageDirection = new LineageDirection(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("parentRelations"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ParentRelation> array = new List<ParentRelation>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ParentRelation.DeserializeParentRelation(item));
                    }
                    parentRelations = array;
                    continue;
                }
                if (property.NameEquals("relations"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<LineageRelation> array = new List<LineageRelation>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(LineageRelation.DeserializeLineageRelation(item));
                    }
                    relations = array;
                    continue;
                }
            }
            return new AtlasLineageInfo(baseEntityGuid.Value, Optional.ToDictionary(guidEntityMap), Optional.ToDictionary(widthCounts), Optional.ToNullable(lineageDepth), Optional.ToNullable(lineageWidth), Optional.ToNullable(includeParent), Optional.ToNullable(childrenCount), Optional.ToNullable(lineageDirection), Optional.ToList(parentRelations), Optional.ToList(relations));
        }
    }
}
