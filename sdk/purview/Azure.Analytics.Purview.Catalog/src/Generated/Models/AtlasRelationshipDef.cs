// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;

namespace Azure.Analytics.Purview.Catalog.Models
{
    /// <summary>
    /// AtlasRelationshipDef is a TypeDef that defines a relationship.
    /// &lt;p&gt;
    /// As with other typeDefs the AtlasRelationshipDef has a name. Once created the RelationshipDef has a guid.
    /// The name and the guid are the 2 ways that the RelationshipDef is identified.
    /// &lt;p&gt;
    /// RelationshipDefs have 2 ends, each of which specify cardinality, an EntityDef type name and name and optionally
    /// whether the end is a container.
    /// &lt;p&gt;
    /// RelationshipDefs can have AttributeDefs - though only primitive types are allowed. &lt;br&gt;
    /// RelationshipDefs have a relationshipCategory specifying the UML type of relationship required &lt;br&gt;
    /// The way EntityDefs and RelationshipDefs are intended to be used is that EntityDefs will define AttributeDefs these AttributeDefs
    /// will not specify an EntityDef type name as their types.
    /// &lt;p&gt;
    /// RelationshipDefs introduce new attributes to the entity instances. For example
    /// &lt;p&gt;
    /// EntityDef A might have attributes attr1,attr2,attr3 &lt;br&gt;
    /// EntityDef B might have attributes attr4,attr5,attr6 &lt;br&gt;
    /// RelationshipDef AtoB might define 2 ends &lt;br&gt;
    /// 
    /// &lt;pre&gt;
    ///    end1:  type A, name attr7
    ///    end2:  type B, name attr8  &lt;/pre&gt;
    /// 
    /// &lt;p&gt;
    /// When an instance of EntityDef A is created, it will have attributes attr1,attr2,attr3,attr7 &lt;br&gt;
    /// When an instance of EntityDef B is created, it will have attributes attr4,attr5,attr6,attr8
    /// &lt;p&gt;
    /// In this way relationshipDefs can be authored separately from entityDefs and can inject relationship attributes into
    /// the entity instances
    /// </summary>
    public partial class AtlasRelationshipDef : AtlasStructDef
    {
        /// <summary> Initializes a new instance of AtlasRelationshipDef. </summary>
        public AtlasRelationshipDef()
        {
        }

        /// <summary> Initializes a new instance of AtlasRelationshipDef. </summary>
        /// <param name="category"> The enum of type category. </param>
        /// <param name="createTime"> The created time of the record. </param>
        /// <param name="createdBy"> The user who created the record. </param>
        /// <param name="dateFormatter"> The date format. </param>
        /// <param name="description"> The description of the type definition. </param>
        /// <param name="guid"> The GUID of the type definition. </param>
        /// <param name="name"> The name of the type definition. </param>
        /// <param name="options"> The options for the type definition. </param>
        /// <param name="serviceType"> The service type. </param>
        /// <param name="typeVersion"> The version of the type. </param>
        /// <param name="updateTime"> The update time of the record. </param>
        /// <param name="updatedBy"> The user who updated the record. </param>
        /// <param name="version"> The version of the record. </param>
        /// <param name="lastModifiedTS"> ETag for concurrency control. </param>
        /// <param name="attributeDefs"> An array of attribute definitions. </param>
        /// <param name="endDef1">
        /// The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
        /// attribute name, cardinality and whether it  is the container end of the relationship.
        /// </param>
        /// <param name="endDef2">
        /// The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
        /// attribute name, cardinality and whether it  is the container end of the relationship.
        /// </param>
        /// <param name="relationshipCategory">
        /// The Relationship category determines the style of relationship around containment and lifecycle.
        /// UML terminology is used for the values.
        /// &lt;p&gt;
        /// ASSOCIATION is a relationship with no containment. &lt;br&gt;
        /// COMPOSITION and AGGREGATION are containment relationships.
        /// &lt;p&gt;
        /// The difference being in the lifecycles of the container and its children. In the COMPOSITION case,
        /// the children cannot exist without the container. For AGGREGATION, the life cycles
        /// of the container and children are totally independent.
        /// </param>
        /// <param name="relationshipLabel"> The label of the relationship. </param>
        internal AtlasRelationshipDef(TypeCategory? category, float? createTime, string createdBy, DateFormat dateFormatter, string description, string guid, string name, IDictionary<string, string> options, string serviceType, string typeVersion, float? updateTime, string updatedBy, float? version, string lastModifiedTS, IList<AtlasAttributeDef> attributeDefs, AtlasRelationshipEndDef endDef1, AtlasRelationshipEndDef endDef2, RelationshipCategory? relationshipCategory, string relationshipLabel) : base(category, createTime, createdBy, dateFormatter, description, guid, name, options, serviceType, typeVersion, updateTime, updatedBy, version, lastModifiedTS, attributeDefs)
        {
            EndDef1 = endDef1;
            EndDef2 = endDef2;
            RelationshipCategory = relationshipCategory;
            RelationshipLabel = relationshipLabel;
        }

        /// <summary>
        /// The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
        /// attribute name, cardinality and whether it  is the container end of the relationship.
        /// </summary>
        public AtlasRelationshipEndDef EndDef1 { get; set; }
        /// <summary>
        /// The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
        /// attribute name, cardinality and whether it  is the container end of the relationship.
        /// </summary>
        public AtlasRelationshipEndDef EndDef2 { get; set; }
        /// <summary>
        /// The Relationship category determines the style of relationship around containment and lifecycle.
        /// UML terminology is used for the values.
        /// &lt;p&gt;
        /// ASSOCIATION is a relationship with no containment. &lt;br&gt;
        /// COMPOSITION and AGGREGATION are containment relationships.
        /// &lt;p&gt;
        /// The difference being in the lifecycles of the container and its children. In the COMPOSITION case,
        /// the children cannot exist without the container. For AGGREGATION, the life cycles
        /// of the container and children are totally independent.
        /// </summary>
        public RelationshipCategory? RelationshipCategory { get; set; }
        /// <summary> The label of the relationship. </summary>
        public string RelationshipLabel { get; set; }
    }
}
