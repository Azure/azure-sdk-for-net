// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace Azure.Analytics.Purview.Catalog.Models
{
    /// <summary> The definitions of type. </summary>
    public partial class AtlasTypeDef : AtlasBaseTypeDef
    {
        /// <summary> Initializes a new instance of AtlasTypeDef. </summary>
        public AtlasTypeDef()
        {
            EntityTypes = new ChangeTrackingList<string>();
            SubTypes = new ChangeTrackingList<string>();
            SuperTypes = new ChangeTrackingList<string>();
            RelationshipAttributeDefs = new ChangeTrackingList<AtlasRelationshipAttributeDef>();
            ElementDefs = new ChangeTrackingList<AtlasEnumElementDef>();
            AttributeDefs = new ChangeTrackingList<AtlasAttributeDef>();
        }

        /// <summary> Initializes a new instance of AtlasTypeDef. </summary>
        /// <param name="category"> The enum of type category. </param>
        /// <param name="createTime"> The created time of the record. </param>
        /// <param name="createdBy"> The user who created the record. </param>
        /// <param name="dateFormatter"> The date format. </param>
        /// <param name="description"> The description of the type definition. </param>
        /// <param name="guid"> The GUID of the type definition. </param>
        /// <param name="name"> The name of the type definition. </param>
        /// <param name="options"> The options for the type definition. </param>
        /// <param name="serviceType"> The service type. </param>
        /// <param name="typeVersion"> The version of the type. </param>
        /// <param name="updateTime"> The update time of the record. </param>
        /// <param name="updatedBy"> The user who updated the record. </param>
        /// <param name="version"> The version of the record. </param>
        /// <param name="lastModifiedTS"> ETag for concurrency control. </param>
        /// <param name="entityTypes">
        /// Specifying a list of entityType names in the classificationDef, ensures that classifications can
        /// only be applied to those entityTypes.
        /// &lt;ul&gt;
        /// &lt;li&gt;Any subtypes of the entity types inherit the restriction&lt;/li&gt;
        /// &lt;li&gt;Any classificationDef subtypes inherit the parents entityTypes restrictions&lt;/li&gt;
        /// &lt;li&gt;Any classificationDef subtypes can further restrict the parents entityTypes restrictions by specifying a subset of the entityTypes&lt;/li&gt;
        /// &lt;li&gt;An empty entityTypes list when there are no parent restrictions means there are no restrictions&lt;/li&gt;
        /// &lt;li&gt;An empty entityTypes list when there are parent restrictions means that the subtype picks up the parents restrictions&lt;/li&gt;
        /// &lt;li&gt;If a list of entityTypes are supplied, where one inherits from another, this will be rejected. This should encourage cleaner classificationsDefs&lt;/li&gt;
        /// &lt;/ul&gt;
        /// </param>
        /// <param name="subTypes"> An array of sub types. </param>
        /// <param name="superTypes"> An array of super types. </param>
        /// <param name="relationshipAttributeDefs"> An array of relationship attributes. </param>
        /// <param name="defaultValue"> The default value. </param>
        /// <param name="elementDefs"> An array of enum element definitions. </param>
        /// <param name="endDef1">
        /// The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
        /// attribute name, cardinality and whether it  is the container end of the relationship.
        /// </param>
        /// <param name="endDef2">
        /// The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
        /// attribute name, cardinality and whether it  is the container end of the relationship.
        /// </param>
        /// <param name="relationshipCategory">
        /// The Relationship category determines the style of relationship around containment and lifecycle.
        /// UML terminology is used for the values.
        /// &lt;p&gt;
        /// ASSOCIATION is a relationship with no containment. &lt;br&gt;
        /// COMPOSITION and AGGREGATION are containment relationships.
        /// &lt;p&gt;
        /// The difference being in the lifecycles of the container and its children. In the COMPOSITION case,
        /// the children cannot exist without the container. For AGGREGATION, the life cycles
        /// of the container and children are totally independent.
        /// </param>
        /// <param name="relationshipLabel"> The label of the relationship. </param>
        /// <param name="attributeDefs"> An array of attribute definitions. </param>
        internal AtlasTypeDef(TypeCategory? category, float? createTime, string createdBy, DateFormat dateFormatter, string description, string guid, string name, IDictionary<string, string> options, string serviceType, string typeVersion, float? updateTime, string updatedBy, float? version, string lastModifiedTS, IList<string> entityTypes, IList<string> subTypes, IList<string> superTypes, IList<AtlasRelationshipAttributeDef> relationshipAttributeDefs, string defaultValue, IList<AtlasEnumElementDef> elementDefs, AtlasRelationshipEndDef endDef1, AtlasRelationshipEndDef endDef2, RelationshipCategory? relationshipCategory, string relationshipLabel, IList<AtlasAttributeDef> attributeDefs) : base(category, createTime, createdBy, dateFormatter, description, guid, name, options, serviceType, typeVersion, updateTime, updatedBy, version, lastModifiedTS)
        {
            EntityTypes = entityTypes;
            SubTypes = subTypes;
            SuperTypes = superTypes;
            RelationshipAttributeDefs = relationshipAttributeDefs;
            DefaultValue = defaultValue;
            ElementDefs = elementDefs;
            EndDef1 = endDef1;
            EndDef2 = endDef2;
            RelationshipCategory = relationshipCategory;
            RelationshipLabel = relationshipLabel;
            AttributeDefs = attributeDefs;
        }

        /// <summary>
        /// Specifying a list of entityType names in the classificationDef, ensures that classifications can
        /// only be applied to those entityTypes.
        /// &lt;ul&gt;
        /// &lt;li&gt;Any subtypes of the entity types inherit the restriction&lt;/li&gt;
        /// &lt;li&gt;Any classificationDef subtypes inherit the parents entityTypes restrictions&lt;/li&gt;
        /// &lt;li&gt;Any classificationDef subtypes can further restrict the parents entityTypes restrictions by specifying a subset of the entityTypes&lt;/li&gt;
        /// &lt;li&gt;An empty entityTypes list when there are no parent restrictions means there are no restrictions&lt;/li&gt;
        /// &lt;li&gt;An empty entityTypes list when there are parent restrictions means that the subtype picks up the parents restrictions&lt;/li&gt;
        /// &lt;li&gt;If a list of entityTypes are supplied, where one inherits from another, this will be rejected. This should encourage cleaner classificationsDefs&lt;/li&gt;
        /// &lt;/ul&gt;
        /// </summary>
        public IList<string> EntityTypes { get; }
        /// <summary> An array of sub types. </summary>
        public IList<string> SubTypes { get; }
        /// <summary> An array of super types. </summary>
        public IList<string> SuperTypes { get; }
        /// <summary> An array of relationship attributes. </summary>
        public IList<AtlasRelationshipAttributeDef> RelationshipAttributeDefs { get; }
        /// <summary> The default value. </summary>
        public string DefaultValue { get; set; }
        /// <summary> An array of enum element definitions. </summary>
        public IList<AtlasEnumElementDef> ElementDefs { get; }
        /// <summary>
        /// The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
        /// attribute name, cardinality and whether it  is the container end of the relationship.
        /// </summary>
        public AtlasRelationshipEndDef EndDef1 { get; set; }
        /// <summary>
        /// The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
        /// attribute name, cardinality and whether it  is the container end of the relationship.
        /// </summary>
        public AtlasRelationshipEndDef EndDef2 { get; set; }
        /// <summary>
        /// The Relationship category determines the style of relationship around containment and lifecycle.
        /// UML terminology is used for the values.
        /// &lt;p&gt;
        /// ASSOCIATION is a relationship with no containment. &lt;br&gt;
        /// COMPOSITION and AGGREGATION are containment relationships.
        /// &lt;p&gt;
        /// The difference being in the lifecycles of the container and its children. In the COMPOSITION case,
        /// the children cannot exist without the container. For AGGREGATION, the life cycles
        /// of the container and children are totally independent.
        /// </summary>
        public RelationshipCategory? RelationshipCategory { get; set; }
        /// <summary> The label of the relationship. </summary>
        public string RelationshipLabel { get; set; }
        /// <summary> An array of attribute definitions. </summary>
        public IList<AtlasAttributeDef> AttributeDefs { get; }
    }
}
