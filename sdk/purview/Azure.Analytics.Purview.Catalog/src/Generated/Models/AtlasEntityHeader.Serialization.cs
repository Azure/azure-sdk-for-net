// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Analytics.Purview.Catalog.Models
{
    public partial class AtlasEntityHeader : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(ClassificationNames))
            {
                writer.WritePropertyName("classificationNames");
                writer.WriteStartArray();
                foreach (var item in ClassificationNames)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Classifications))
            {
                writer.WritePropertyName("classifications");
                writer.WriteStartArray();
                foreach (var item in Classifications)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(DisplayText))
            {
                writer.WritePropertyName("displayText");
                writer.WriteStringValue(DisplayText);
            }
            if (Optional.IsDefined(Guid))
            {
                writer.WritePropertyName("guid");
                writer.WriteStringValue(Guid);
            }
            if (Optional.IsCollectionDefined(MeaningNames))
            {
                writer.WritePropertyName("meaningNames");
                writer.WriteStartArray();
                foreach (var item in MeaningNames)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Meanings))
            {
                writer.WritePropertyName("meanings");
                writer.WriteStartArray();
                foreach (var item in Meanings)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status");
                writer.WriteStringValue(Status.Value.ToString());
            }
            if (Optional.IsCollectionDefined(Attributes))
            {
                writer.WritePropertyName("attributes");
                writer.WriteStartObject();
                foreach (var item in Attributes)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(TypeName))
            {
                writer.WritePropertyName("typeName");
                writer.WriteStringValue(TypeName);
            }
            if (Optional.IsDefined(LastModifiedTS))
            {
                writer.WritePropertyName("lastModifiedTS");
                writer.WriteStringValue(LastModifiedTS);
            }
            writer.WriteEndObject();
        }

        internal static AtlasEntityHeader DeserializeAtlasEntityHeader(JsonElement element)
        {
            Optional<IList<string>> classificationNames = default;
            Optional<IList<AtlasClassification>> classifications = default;
            Optional<string> displayText = default;
            Optional<string> guid = default;
            Optional<IList<string>> meaningNames = default;
            Optional<IList<AtlasTermAssignmentHeader>> meanings = default;
            Optional<Status> status = default;
            Optional<IDictionary<string, object>> attributes = default;
            Optional<string> typeName = default;
            Optional<string> lastModifiedTS = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("classificationNames"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    classificationNames = array;
                    continue;
                }
                if (property.NameEquals("classifications"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<AtlasClassification> array = new List<AtlasClassification>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AtlasClassification.DeserializeAtlasClassification(item));
                    }
                    classifications = array;
                    continue;
                }
                if (property.NameEquals("displayText"))
                {
                    displayText = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("guid"))
                {
                    guid = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("meaningNames"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    meaningNames = array;
                    continue;
                }
                if (property.NameEquals("meanings"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<AtlasTermAssignmentHeader> array = new List<AtlasTermAssignmentHeader>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AtlasTermAssignmentHeader.DeserializeAtlasTermAssignmentHeader(item));
                    }
                    meanings = array;
                    continue;
                }
                if (property.NameEquals("status"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    status = new Status(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("attributes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, object> dictionary = new Dictionary<string, object>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetObject());
                    }
                    attributes = dictionary;
                    continue;
                }
                if (property.NameEquals("typeName"))
                {
                    typeName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastModifiedTS"))
                {
                    lastModifiedTS = property.Value.GetString();
                    continue;
                }
            }
            return new AtlasEntityHeader(Optional.ToDictionary(attributes), typeName.Value, lastModifiedTS.Value, Optional.ToList(classificationNames), Optional.ToList(classifications), displayText.Value, guid.Value, Optional.ToList(meaningNames), Optional.ToList(meanings), Optional.ToNullable(status));
        }
    }
}
