// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Analytics.Purview.Catalog.Models
{
    public partial class AtlasRelatedObjectId : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(DisplayText))
            {
                writer.WritePropertyName("displayText");
                writer.WriteStringValue(DisplayText);
            }
            if (Optional.IsDefined(EntityStatus))
            {
                writer.WritePropertyName("entityStatus");
                writer.WriteStringValue(EntityStatus.Value.ToString());
            }
            if (Optional.IsDefined(RelationshipType))
            {
                writer.WritePropertyName("relationshipType");
                writer.WriteStringValue(RelationshipType);
            }
            if (Optional.IsDefined(RelationshipAttributes))
            {
                writer.WritePropertyName("relationshipAttributes");
                writer.WriteObjectValue(RelationshipAttributes);
            }
            if (Optional.IsDefined(RelationshipGuid))
            {
                writer.WritePropertyName("relationshipGuid");
                writer.WriteStringValue(RelationshipGuid);
            }
            if (Optional.IsDefined(RelationshipStatus))
            {
                writer.WritePropertyName("relationshipStatus");
                writer.WriteStringValue(RelationshipStatus.Value.ToString());
            }
            if (Optional.IsDefined(Guid))
            {
                writer.WritePropertyName("guid");
                writer.WriteStringValue(Guid);
            }
            if (Optional.IsDefined(TypeName))
            {
                writer.WritePropertyName("typeName");
                writer.WriteStringValue(TypeName);
            }
            if (Optional.IsCollectionDefined(UniqueAttributes))
            {
                writer.WritePropertyName("uniqueAttributes");
                writer.WriteStartObject();
                foreach (var item in UniqueAttributes)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WriteEndObject();
        }

        internal static AtlasRelatedObjectId DeserializeAtlasRelatedObjectId(JsonElement element)
        {
            Optional<string> displayText = default;
            Optional<Status> entityStatus = default;
            Optional<string> relationshipType = default;
            Optional<AtlasStruct> relationshipAttributes = default;
            Optional<string> relationshipGuid = default;
            Optional<StatusAtlasRelationship> relationshipStatus = default;
            Optional<string> guid = default;
            Optional<string> typeName = default;
            Optional<IDictionary<string, object>> uniqueAttributes = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("displayText"))
                {
                    displayText = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("entityStatus"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    entityStatus = new Status(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("relationshipType"))
                {
                    relationshipType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("relationshipAttributes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    relationshipAttributes = AtlasStruct.DeserializeAtlasStruct(property.Value);
                    continue;
                }
                if (property.NameEquals("relationshipGuid"))
                {
                    relationshipGuid = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("relationshipStatus"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    relationshipStatus = new StatusAtlasRelationship(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("guid"))
                {
                    guid = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("typeName"))
                {
                    typeName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("uniqueAttributes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, object> dictionary = new Dictionary<string, object>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetObject());
                    }
                    uniqueAttributes = dictionary;
                    continue;
                }
            }
            return new AtlasRelatedObjectId(guid.Value, typeName.Value, Optional.ToDictionary(uniqueAttributes), displayText.Value, Optional.ToNullable(entityStatus), relationshipType.Value, relationshipAttributes.Value, relationshipGuid.Value, Optional.ToNullable(relationshipStatus));
        }
    }
}
