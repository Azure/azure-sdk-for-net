// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.Analytics.Purview.Catalog.Models
{
    public partial class ImportCSVOperation
    {
        internal static ImportCSVOperation DeserializeImportCSVOperation(JsonElement element)
        {
            Optional<string> id = default;
            Optional<ImportCSVOperationStatus> status = default;
            Optional<string> createTime = default;
            Optional<string> lastUpdateTime = default;
            Optional<int> errorCode = default;
            Optional<string> errorMessage = default;
            Optional<string> importedTerms = default;
            Optional<string> totalTermsDetected = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("status"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    status = new ImportCSVOperationStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("createTime"))
                {
                    createTime = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastUpdateTime"))
                {
                    lastUpdateTime = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("error"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("errorCode"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            errorCode = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("errorMessage"))
                        {
                            errorMessage = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("importedTerms"))
                        {
                            importedTerms = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("totalTermsDetected"))
                        {
                            totalTermsDetected = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new ImportCSVOperation(id.Value, Optional.ToNullable(status), createTime.Value, lastUpdateTime.Value, Optional.ToNullable(errorCode), errorMessage.Value, importedTerms.Value, totalTermsDetected.Value);
        }
    }
}
