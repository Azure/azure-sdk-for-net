// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Analytics.Purview.Catalog.Models
{
    public partial class AtlasGlossaryExtInfo : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(CategoryInfo))
            {
                writer.WritePropertyName("categoryInfo");
                writer.WriteStartObject();
                foreach (var item in CategoryInfo)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(TermInfo))
            {
                writer.WritePropertyName("termInfo");
                writer.WriteStartObject();
                foreach (var item in TermInfo)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(Categories))
            {
                writer.WritePropertyName("categories");
                writer.WriteStartArray();
                foreach (var item in Categories)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Language))
            {
                writer.WritePropertyName("language");
                writer.WriteStringValue(Language);
            }
            if (Optional.IsCollectionDefined(Terms))
            {
                writer.WritePropertyName("terms");
                writer.WriteStartArray();
                foreach (var item in Terms)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Usage))
            {
                writer.WritePropertyName("usage");
                writer.WriteStringValue(Usage);
            }
            if (Optional.IsCollectionDefined(Classifications))
            {
                writer.WritePropertyName("classifications");
                writer.WriteStartArray();
                foreach (var item in Classifications)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(LongDescription))
            {
                writer.WritePropertyName("longDescription");
                writer.WriteStringValue(LongDescription);
            }
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name");
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(QualifiedName))
            {
                writer.WritePropertyName("qualifiedName");
                writer.WriteStringValue(QualifiedName);
            }
            if (Optional.IsDefined(ShortDescription))
            {
                writer.WritePropertyName("shortDescription");
                writer.WriteStringValue(ShortDescription);
            }
            if (Optional.IsDefined(LastModifiedTS))
            {
                writer.WritePropertyName("lastModifiedTS");
                writer.WriteStringValue(LastModifiedTS);
            }
            if (Optional.IsDefined(Guid))
            {
                writer.WritePropertyName("guid");
                writer.WriteStringValue(Guid);
            }
            writer.WriteEndObject();
        }

        internal static AtlasGlossaryExtInfo DeserializeAtlasGlossaryExtInfo(JsonElement element)
        {
            Optional<IDictionary<string, AtlasGlossaryCategory>> categoryInfo = default;
            Optional<IDictionary<string, AtlasGlossaryTerm>> termInfo = default;
            Optional<IList<AtlasRelatedCategoryHeader>> categories = default;
            Optional<string> language = default;
            Optional<IList<AtlasRelatedTermHeader>> terms = default;
            Optional<string> usage = default;
            Optional<IList<AtlasClassification>> classifications = default;
            Optional<string> longDescription = default;
            Optional<string> name = default;
            Optional<string> qualifiedName = default;
            Optional<string> shortDescription = default;
            Optional<string> lastModifiedTS = default;
            Optional<string> guid = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("categoryInfo"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, AtlasGlossaryCategory> dictionary = new Dictionary<string, AtlasGlossaryCategory>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, AtlasGlossaryCategory.DeserializeAtlasGlossaryCategory(property0.Value));
                    }
                    categoryInfo = dictionary;
                    continue;
                }
                if (property.NameEquals("termInfo"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, AtlasGlossaryTerm> dictionary = new Dictionary<string, AtlasGlossaryTerm>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, AtlasGlossaryTerm.DeserializeAtlasGlossaryTerm(property0.Value));
                    }
                    termInfo = dictionary;
                    continue;
                }
                if (property.NameEquals("categories"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<AtlasRelatedCategoryHeader> array = new List<AtlasRelatedCategoryHeader>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AtlasRelatedCategoryHeader.DeserializeAtlasRelatedCategoryHeader(item));
                    }
                    categories = array;
                    continue;
                }
                if (property.NameEquals("language"))
                {
                    language = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("terms"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<AtlasRelatedTermHeader> array = new List<AtlasRelatedTermHeader>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AtlasRelatedTermHeader.DeserializeAtlasRelatedTermHeader(item));
                    }
                    terms = array;
                    continue;
                }
                if (property.NameEquals("usage"))
                {
                    usage = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("classifications"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<AtlasClassification> array = new List<AtlasClassification>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AtlasClassification.DeserializeAtlasClassification(item));
                    }
                    classifications = array;
                    continue;
                }
                if (property.NameEquals("longDescription"))
                {
                    longDescription = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("qualifiedName"))
                {
                    qualifiedName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("shortDescription"))
                {
                    shortDescription = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastModifiedTS"))
                {
                    lastModifiedTS = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("guid"))
                {
                    guid = property.Value.GetString();
                    continue;
                }
            }
            return new AtlasGlossaryExtInfo(guid.Value, Optional.ToList(classifications), longDescription.Value, name.Value, qualifiedName.Value, shortDescription.Value, lastModifiedTS.Value, Optional.ToList(categories), language.Value, Optional.ToList(terms), usage.Value, Optional.ToDictionary(categoryInfo), Optional.ToDictionary(termInfo));
        }
    }
}
