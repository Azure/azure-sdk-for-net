// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Analytics.Purview.Catalog.Models
{
    public partial class TimeZone : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(DstSavings))
            {
                writer.WritePropertyName("dstSavings");
                writer.WriteNumberValue(DstSavings.Value);
            }
            if (Optional.IsDefined(Id))
            {
                writer.WritePropertyName("id");
                writer.WriteStringValue(Id);
            }
            if (Optional.IsCollectionDefined(AvailableIds))
            {
                writer.WritePropertyName("availableIds");
                writer.WriteStartArray();
                foreach (var item in AvailableIds)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Default))
            {
                writer.WritePropertyName("default");
                writer.WriteObjectValue(Default);
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName");
                writer.WriteStringValue(DisplayName);
            }
            if (Optional.IsDefined(RawOffset))
            {
                writer.WritePropertyName("rawOffset");
                writer.WriteNumberValue(RawOffset.Value);
            }
            writer.WriteEndObject();
        }

        internal static TimeZone DeserializeTimeZone(JsonElement element)
        {
            Optional<int> dstSavings = default;
            Optional<string> id = default;
            Optional<IList<string>> availableIds = default;
            Optional<TimeZone> @default = default;
            Optional<string> displayName = default;
            Optional<int> rawOffset = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("dstSavings"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    dstSavings = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("availableIds"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    availableIds = array;
                    continue;
                }
                if (property.NameEquals("default"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @default = DeserializeTimeZone(property.Value);
                    continue;
                }
                if (property.NameEquals("displayName"))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("rawOffset"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    rawOffset = property.Value.GetInt32();
                    continue;
                }
            }
            return new TimeZone(Optional.ToNullable(dstSavings), id.Value, Optional.ToList(availableIds), @default.Value, displayName.Value, Optional.ToNullable(rawOffset));
        }
    }
}
