// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Analytics.Purview.Catalog.Models
{
    /// <summary> to specify whether the result should be sorted? If yes, whether asc or desc. </summary>
    public readonly partial struct SortType : IEquatable<SortType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SortType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SortType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "NONE";
        private const string ASCValue = "ASC";
        private const string DescValue = "DESC";

        /// <summary> NONE. </summary>
        public static SortType None { get; } = new SortType(NoneValue);
        /// <summary> ASC. </summary>
        public static SortType ASC { get; } = new SortType(ASCValue);
        /// <summary> DESC. </summary>
        public static SortType Desc { get; } = new SortType(DescValue);
        /// <summary> Determines if two <see cref="SortType"/> values are the same. </summary>
        public static bool operator ==(SortType left, SortType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SortType"/> values are not the same. </summary>
        public static bool operator !=(SortType left, SortType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SortType"/>. </summary>
        public static implicit operator SortType(string value) => new SortType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SortType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SortType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
