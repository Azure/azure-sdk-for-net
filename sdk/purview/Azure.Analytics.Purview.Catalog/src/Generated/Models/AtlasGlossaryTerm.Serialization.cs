// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Analytics.Purview.Catalog.Models
{
    public partial class AtlasGlossaryTerm : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Abbreviation))
            {
                writer.WritePropertyName("abbreviation");
                writer.WriteStringValue(Abbreviation);
            }
            if (Optional.IsCollectionDefined(TemplateName))
            {
                writer.WritePropertyName("templateName");
                writer.WriteStartArray();
                foreach (var item in TemplateName)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Anchor))
            {
                writer.WritePropertyName("anchor");
                writer.WriteObjectValue(Anchor);
            }
            if (Optional.IsCollectionDefined(Antonyms))
            {
                writer.WritePropertyName("antonyms");
                writer.WriteStartArray();
                foreach (var item in Antonyms)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(CreateTime))
            {
                writer.WritePropertyName("createTime");
                writer.WriteNumberValue(CreateTime.Value);
            }
            if (Optional.IsDefined(CreatedBy))
            {
                writer.WritePropertyName("createdBy");
                writer.WriteStringValue(CreatedBy);
            }
            if (Optional.IsDefined(UpdateTime))
            {
                writer.WritePropertyName("updateTime");
                writer.WriteNumberValue(UpdateTime.Value);
            }
            if (Optional.IsDefined(UpdatedBy))
            {
                writer.WritePropertyName("updatedBy");
                writer.WriteStringValue(UpdatedBy);
            }
            if (Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status");
                writer.WriteStringValue(Status.Value.ToString());
            }
            if (Optional.IsCollectionDefined(Resources))
            {
                writer.WritePropertyName("resources");
                writer.WriteStartArray();
                foreach (var item in Resources)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Contacts))
            {
                writer.WritePropertyName("contacts");
                writer.WriteStartObject();
                foreach (var item in Contacts)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStartArray();
                    foreach (var item0 in item.Value)
                    {
                        writer.WriteObjectValue(item0);
                    }
                    writer.WriteEndArray();
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(Attributes))
            {
                writer.WritePropertyName("attributes");
                writer.WriteStartObject();
                foreach (var item in Attributes)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStartObject();
                    foreach (var item0 in item.Value)
                    {
                        writer.WritePropertyName(item0.Key);
                        writer.WriteObjectValue(item0.Value);
                    }
                    writer.WriteEndObject();
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(AssignedEntities))
            {
                writer.WritePropertyName("assignedEntities");
                writer.WriteStartArray();
                foreach (var item in AssignedEntities)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Categories))
            {
                writer.WritePropertyName("categories");
                writer.WriteStartArray();
                foreach (var item in Categories)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Classifies))
            {
                writer.WritePropertyName("classifies");
                writer.WriteStartArray();
                foreach (var item in Classifies)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Examples))
            {
                writer.WritePropertyName("examples");
                writer.WriteStartArray();
                foreach (var item in Examples)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(IsA))
            {
                writer.WritePropertyName("isA");
                writer.WriteStartArray();
                foreach (var item in IsA)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(PreferredTerms))
            {
                writer.WritePropertyName("preferredTerms");
                writer.WriteStartArray();
                foreach (var item in PreferredTerms)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(PreferredToTerms))
            {
                writer.WritePropertyName("preferredToTerms");
                writer.WriteStartArray();
                foreach (var item in PreferredToTerms)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ReplacedBy))
            {
                writer.WritePropertyName("replacedBy");
                writer.WriteStartArray();
                foreach (var item in ReplacedBy)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ReplacementTerms))
            {
                writer.WritePropertyName("replacementTerms");
                writer.WriteStartArray();
                foreach (var item in ReplacementTerms)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(SeeAlso))
            {
                writer.WritePropertyName("seeAlso");
                writer.WriteStartArray();
                foreach (var item in SeeAlso)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Synonyms))
            {
                writer.WritePropertyName("synonyms");
                writer.WriteStartArray();
                foreach (var item in Synonyms)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(TranslatedTerms))
            {
                writer.WritePropertyName("translatedTerms");
                writer.WriteStartArray();
                foreach (var item in TranslatedTerms)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(TranslationTerms))
            {
                writer.WritePropertyName("translationTerms");
                writer.WriteStartArray();
                foreach (var item in TranslationTerms)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Usage))
            {
                writer.WritePropertyName("usage");
                writer.WriteStringValue(Usage);
            }
            if (Optional.IsCollectionDefined(ValidValues))
            {
                writer.WritePropertyName("validValues");
                writer.WriteStartArray();
                foreach (var item in ValidValues)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ValidValuesFor))
            {
                writer.WritePropertyName("validValuesFor");
                writer.WriteStartArray();
                foreach (var item in ValidValuesFor)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Classifications))
            {
                writer.WritePropertyName("classifications");
                writer.WriteStartArray();
                foreach (var item in Classifications)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(LongDescription))
            {
                writer.WritePropertyName("longDescription");
                writer.WriteStringValue(LongDescription);
            }
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name");
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(QualifiedName))
            {
                writer.WritePropertyName("qualifiedName");
                writer.WriteStringValue(QualifiedName);
            }
            if (Optional.IsDefined(ShortDescription))
            {
                writer.WritePropertyName("shortDescription");
                writer.WriteStringValue(ShortDescription);
            }
            if (Optional.IsDefined(LastModifiedTS))
            {
                writer.WritePropertyName("lastModifiedTS");
                writer.WriteStringValue(LastModifiedTS);
            }
            if (Optional.IsDefined(Guid))
            {
                writer.WritePropertyName("guid");
                writer.WriteStringValue(Guid);
            }
            writer.WriteEndObject();
        }

        internal static AtlasGlossaryTerm DeserializeAtlasGlossaryTerm(JsonElement element)
        {
            Optional<string> abbreviation = default;
            Optional<IList<object>> templateName = default;
            Optional<AtlasGlossaryHeader> anchor = default;
            Optional<IList<AtlasRelatedTermHeader>> antonyms = default;
            Optional<float> createTime = default;
            Optional<string> createdBy = default;
            Optional<float> updateTime = default;
            Optional<string> updatedBy = default;
            Optional<TermStatus> status = default;
            Optional<IList<ResourceLink>> resources = default;
            Optional<IDictionary<string, IList<ContactBasic>>> contacts = default;
            Optional<IDictionary<string, IDictionary<string, object>>> attributes = default;
            Optional<IList<AtlasRelatedObjectId>> assignedEntities = default;
            Optional<IList<AtlasTermCategorizationHeader>> categories = default;
            Optional<IList<AtlasRelatedTermHeader>> classifies = default;
            Optional<IList<string>> examples = default;
            Optional<IList<AtlasRelatedTermHeader>> isA = default;
            Optional<IList<AtlasRelatedTermHeader>> preferredTerms = default;
            Optional<IList<AtlasRelatedTermHeader>> preferredToTerms = default;
            Optional<IList<AtlasRelatedTermHeader>> replacedBy = default;
            Optional<IList<AtlasRelatedTermHeader>> replacementTerms = default;
            Optional<IList<AtlasRelatedTermHeader>> seeAlso = default;
            Optional<IList<AtlasRelatedTermHeader>> synonyms = default;
            Optional<IList<AtlasRelatedTermHeader>> translatedTerms = default;
            Optional<IList<AtlasRelatedTermHeader>> translationTerms = default;
            Optional<string> usage = default;
            Optional<IList<AtlasRelatedTermHeader>> validValues = default;
            Optional<IList<AtlasRelatedTermHeader>> validValuesFor = default;
            Optional<IList<AtlasClassification>> classifications = default;
            Optional<string> longDescription = default;
            Optional<string> name = default;
            Optional<string> qualifiedName = default;
            Optional<string> shortDescription = default;
            Optional<string> lastModifiedTS = default;
            Optional<string> guid = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("abbreviation"))
                {
                    abbreviation = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("templateName"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<object> array = new List<object>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetObject());
                    }
                    templateName = array;
                    continue;
                }
                if (property.NameEquals("anchor"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    anchor = AtlasGlossaryHeader.DeserializeAtlasGlossaryHeader(property.Value);
                    continue;
                }
                if (property.NameEquals("antonyms"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<AtlasRelatedTermHeader> array = new List<AtlasRelatedTermHeader>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AtlasRelatedTermHeader.DeserializeAtlasRelatedTermHeader(item));
                    }
                    antonyms = array;
                    continue;
                }
                if (property.NameEquals("createTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    createTime = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("createdBy"))
                {
                    createdBy = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("updateTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    updateTime = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("updatedBy"))
                {
                    updatedBy = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("status"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    status = new TermStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("resources"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ResourceLink> array = new List<ResourceLink>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ResourceLink.DeserializeResourceLink(item));
                    }
                    resources = array;
                    continue;
                }
                if (property.NameEquals("contacts"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, IList<ContactBasic>> dictionary = new Dictionary<string, IList<ContactBasic>>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        List<ContactBasic> array = new List<ContactBasic>();
                        foreach (var item in property0.Value.EnumerateArray())
                        {
                            array.Add(ContactBasic.DeserializeContactBasic(item));
                        }
                        dictionary.Add(property0.Name, array);
                    }
                    contacts = dictionary;
                    continue;
                }
                if (property.NameEquals("attributes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, IDictionary<string, object>> dictionary = new Dictionary<string, IDictionary<string, object>>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        Dictionary<string, object> dictionary0 = new Dictionary<string, object>();
                        foreach (var property1 in property0.Value.EnumerateObject())
                        {
                            dictionary0.Add(property1.Name, property1.Value.GetObject());
                        }
                        dictionary.Add(property0.Name, dictionary0);
                    }
                    attributes = dictionary;
                    continue;
                }
                if (property.NameEquals("assignedEntities"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<AtlasRelatedObjectId> array = new List<AtlasRelatedObjectId>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AtlasRelatedObjectId.DeserializeAtlasRelatedObjectId(item));
                    }
                    assignedEntities = array;
                    continue;
                }
                if (property.NameEquals("categories"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<AtlasTermCategorizationHeader> array = new List<AtlasTermCategorizationHeader>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AtlasTermCategorizationHeader.DeserializeAtlasTermCategorizationHeader(item));
                    }
                    categories = array;
                    continue;
                }
                if (property.NameEquals("classifies"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<AtlasRelatedTermHeader> array = new List<AtlasRelatedTermHeader>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AtlasRelatedTermHeader.DeserializeAtlasRelatedTermHeader(item));
                    }
                    classifies = array;
                    continue;
                }
                if (property.NameEquals("examples"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    examples = array;
                    continue;
                }
                if (property.NameEquals("isA"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<AtlasRelatedTermHeader> array = new List<AtlasRelatedTermHeader>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AtlasRelatedTermHeader.DeserializeAtlasRelatedTermHeader(item));
                    }
                    isA = array;
                    continue;
                }
                if (property.NameEquals("preferredTerms"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<AtlasRelatedTermHeader> array = new List<AtlasRelatedTermHeader>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AtlasRelatedTermHeader.DeserializeAtlasRelatedTermHeader(item));
                    }
                    preferredTerms = array;
                    continue;
                }
                if (property.NameEquals("preferredToTerms"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<AtlasRelatedTermHeader> array = new List<AtlasRelatedTermHeader>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AtlasRelatedTermHeader.DeserializeAtlasRelatedTermHeader(item));
                    }
                    preferredToTerms = array;
                    continue;
                }
                if (property.NameEquals("replacedBy"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<AtlasRelatedTermHeader> array = new List<AtlasRelatedTermHeader>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AtlasRelatedTermHeader.DeserializeAtlasRelatedTermHeader(item));
                    }
                    replacedBy = array;
                    continue;
                }
                if (property.NameEquals("replacementTerms"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<AtlasRelatedTermHeader> array = new List<AtlasRelatedTermHeader>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AtlasRelatedTermHeader.DeserializeAtlasRelatedTermHeader(item));
                    }
                    replacementTerms = array;
                    continue;
                }
                if (property.NameEquals("seeAlso"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<AtlasRelatedTermHeader> array = new List<AtlasRelatedTermHeader>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AtlasRelatedTermHeader.DeserializeAtlasRelatedTermHeader(item));
                    }
                    seeAlso = array;
                    continue;
                }
                if (property.NameEquals("synonyms"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<AtlasRelatedTermHeader> array = new List<AtlasRelatedTermHeader>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AtlasRelatedTermHeader.DeserializeAtlasRelatedTermHeader(item));
                    }
                    synonyms = array;
                    continue;
                }
                if (property.NameEquals("translatedTerms"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<AtlasRelatedTermHeader> array = new List<AtlasRelatedTermHeader>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AtlasRelatedTermHeader.DeserializeAtlasRelatedTermHeader(item));
                    }
                    translatedTerms = array;
                    continue;
                }
                if (property.NameEquals("translationTerms"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<AtlasRelatedTermHeader> array = new List<AtlasRelatedTermHeader>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AtlasRelatedTermHeader.DeserializeAtlasRelatedTermHeader(item));
                    }
                    translationTerms = array;
                    continue;
                }
                if (property.NameEquals("usage"))
                {
                    usage = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("validValues"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<AtlasRelatedTermHeader> array = new List<AtlasRelatedTermHeader>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AtlasRelatedTermHeader.DeserializeAtlasRelatedTermHeader(item));
                    }
                    validValues = array;
                    continue;
                }
                if (property.NameEquals("validValuesFor"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<AtlasRelatedTermHeader> array = new List<AtlasRelatedTermHeader>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AtlasRelatedTermHeader.DeserializeAtlasRelatedTermHeader(item));
                    }
                    validValuesFor = array;
                    continue;
                }
                if (property.NameEquals("classifications"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<AtlasClassification> array = new List<AtlasClassification>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AtlasClassification.DeserializeAtlasClassification(item));
                    }
                    classifications = array;
                    continue;
                }
                if (property.NameEquals("longDescription"))
                {
                    longDescription = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("qualifiedName"))
                {
                    qualifiedName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("shortDescription"))
                {
                    shortDescription = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastModifiedTS"))
                {
                    lastModifiedTS = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("guid"))
                {
                    guid = property.Value.GetString();
                    continue;
                }
            }
            return new AtlasGlossaryTerm(guid.Value, Optional.ToList(classifications), longDescription.Value, name.Value, qualifiedName.Value, shortDescription.Value, lastModifiedTS.Value, abbreviation.Value, Optional.ToList(templateName), anchor.Value, Optional.ToList(antonyms), Optional.ToNullable(createTime), createdBy.Value, Optional.ToNullable(updateTime), updatedBy.Value, Optional.ToNullable(status), Optional.ToList(resources), Optional.ToDictionary(contacts), Optional.ToDictionary(attributes), Optional.ToList(assignedEntities), Optional.ToList(categories), Optional.ToList(classifies), Optional.ToList(examples), Optional.ToList(isA), Optional.ToList(preferredTerms), Optional.ToList(preferredToTerms), Optional.ToList(replacedBy), Optional.ToList(replacementTerms), Optional.ToList(seeAlso), Optional.ToList(synonyms), Optional.ToList(translatedTerms), Optional.ToList(translationTerms), usage.Value, Optional.ToList(validValues), Optional.ToList(validValuesFor));
        }
    }
}
