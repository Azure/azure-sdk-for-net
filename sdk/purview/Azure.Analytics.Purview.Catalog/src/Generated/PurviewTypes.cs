// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Purview.Catalog
{
    /// <summary> The PurviewTypes service client. </summary>
    public partial class PurviewTypes
    {
        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get; }
        private readonly string[] AuthorizationScopes = { "https://purview.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private Uri endpoint;
        private readonly string apiVersion;
        private readonly ClientDiagnostics _clientDiagnostics;

        /// <summary> Initializes a new instance of PurviewTypes for mocking. </summary>
        protected PurviewTypes()
        {
        }

        /// <summary> Get the classification definition for the given GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the classification. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetClassificationDefByGuidAsync(string guid, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetClassificationDefByGuidRequest(guid, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.GetClassificationDefByGuid");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the classification definition for the given GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the classification. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetClassificationDefByGuid(string guid, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetClassificationDefByGuidRequest(guid, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.GetClassificationDefByGuid");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="GetClassificationDefByGuid"/> and <see cref="GetClassificationDefByGuidAsync"/> operations. </summary>
        /// <param name="guid"> The globally unique identifier of the classification. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateGetClassificationDefByGuidRequest(string guid, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/types/classificationdef/guid/", false);
            uri.AppendPath(guid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get the classification definition by its name (unique). </summary>
        /// <param name="name"> The name of the classification. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetClassificationDefByNameAsync(string name, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetClassificationDefByNameRequest(name, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.GetClassificationDefByName");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the classification definition by its name (unique). </summary>
        /// <param name="name"> The name of the classification. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetClassificationDefByName(string name, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetClassificationDefByNameRequest(name, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.GetClassificationDefByName");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="GetClassificationDefByName"/> and <see cref="GetClassificationDefByNameAsync"/> operations. </summary>
        /// <param name="name"> The name of the classification. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateGetClassificationDefByNameRequest(string name, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/types/classificationdef/name/", false);
            uri.AppendPath(name, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get the Entity definition for the given GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetEntityDefinitionByGuidAsync(string guid, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetEntityDefinitionByGuidRequest(guid, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.GetEntityDefinitionByGuid");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the Entity definition for the given GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetEntityDefinitionByGuid(string guid, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetEntityDefinitionByGuidRequest(guid, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.GetEntityDefinitionByGuid");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="GetEntityDefinitionByGuid"/> and <see cref="GetEntityDefinitionByGuidAsync"/> operations. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateGetEntityDefinitionByGuidRequest(string guid, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/types/entitydef/guid/", false);
            uri.AppendPath(guid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get the entity definition by its name (unique). </summary>
        /// <param name="name"> The name of the entity. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetEntityDefinitionByNameAsync(string name, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetEntityDefinitionByNameRequest(name, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.GetEntityDefinitionByName");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the entity definition by its name (unique). </summary>
        /// <param name="name"> The name of the entity. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetEntityDefinitionByName(string name, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetEntityDefinitionByNameRequest(name, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.GetEntityDefinitionByName");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="GetEntityDefinitionByName"/> and <see cref="GetEntityDefinitionByNameAsync"/> operations. </summary>
        /// <param name="name"> The name of the entity. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateGetEntityDefinitionByNameRequest(string name, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/types/entitydef/name/", false);
            uri.AppendPath(name, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get the enum definition for the given GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the enum. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetEnumDefByGuidAsync(string guid, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetEnumDefByGuidRequest(guid, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.GetEnumDefByGuid");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the enum definition for the given GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the enum. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetEnumDefByGuid(string guid, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetEnumDefByGuidRequest(guid, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.GetEnumDefByGuid");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="GetEnumDefByGuid"/> and <see cref="GetEnumDefByGuidAsync"/> operations. </summary>
        /// <param name="guid"> The globally unique identifier of the enum. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateGetEnumDefByGuidRequest(string guid, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/types/enumdef/guid/", false);
            uri.AppendPath(guid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get the enum definition by its name (unique). </summary>
        /// <param name="name"> The name of the enum. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetEnumDefByNameAsync(string name, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetEnumDefByNameRequest(name, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.GetEnumDefByName");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the enum definition by its name (unique). </summary>
        /// <param name="name"> The name of the enum. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetEnumDefByName(string name, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetEnumDefByNameRequest(name, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.GetEnumDefByName");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="GetEnumDefByName"/> and <see cref="GetEnumDefByNameAsync"/> operations. </summary>
        /// <param name="name"> The name of the enum. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateGetEnumDefByNameRequest(string name, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/types/enumdef/name/", false);
            uri.AppendPath(name, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get the relationship definition for the given GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the relationship. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetRelationshipDefByGuidAsync(string guid, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetRelationshipDefByGuidRequest(guid, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.GetRelationshipDefByGuid");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the relationship definition for the given GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the relationship. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetRelationshipDefByGuid(string guid, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetRelationshipDefByGuidRequest(guid, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.GetRelationshipDefByGuid");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="GetRelationshipDefByGuid"/> and <see cref="GetRelationshipDefByGuidAsync"/> operations. </summary>
        /// <param name="guid"> The globally unique identifier of the relationship. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateGetRelationshipDefByGuidRequest(string guid, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/types/relationshipdef/guid/", false);
            uri.AppendPath(guid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get the relationship definition by its name (unique). </summary>
        /// <param name="name"> The name of the relationship. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetRelationshipDefByNameAsync(string name, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetRelationshipDefByNameRequest(name, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.GetRelationshipDefByName");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the relationship definition by its name (unique). </summary>
        /// <param name="name"> The name of the relationship. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetRelationshipDefByName(string name, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetRelationshipDefByNameRequest(name, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.GetRelationshipDefByName");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="GetRelationshipDefByName"/> and <see cref="GetRelationshipDefByNameAsync"/> operations. </summary>
        /// <param name="name"> The name of the relationship. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateGetRelationshipDefByNameRequest(string name, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/types/relationshipdef/name/", false);
            uri.AppendPath(name, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get the struct definition for the given GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the struct. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetStructDefByGuidAsync(string guid, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetStructDefByGuidRequest(guid, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.GetStructDefByGuid");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the struct definition for the given GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the struct. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetStructDefByGuid(string guid, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetStructDefByGuidRequest(guid, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.GetStructDefByGuid");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="GetStructDefByGuid"/> and <see cref="GetStructDefByGuidAsync"/> operations. </summary>
        /// <param name="guid"> The globally unique identifier of the struct. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateGetStructDefByGuidRequest(string guid, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/types/structdef/guid/", false);
            uri.AppendPath(guid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get the struct definition by its name (unique). </summary>
        /// <param name="name"> The name of the struct. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetStructDefByNameAsync(string name, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetStructDefByNameRequest(name, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.GetStructDefByName");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the struct definition by its name (unique). </summary>
        /// <param name="name"> The name of the struct. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetStructDefByName(string name, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetStructDefByNameRequest(name, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.GetStructDefByName");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="GetStructDefByName"/> and <see cref="GetStructDefByNameAsync"/> operations. </summary>
        /// <param name="name"> The name of the struct. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateGetStructDefByNameRequest(string name, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/types/structdef/name/", false);
            uri.AppendPath(name, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get the type definition for the given GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the type. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetTypeDefinitionByGuidAsync(string guid, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetTypeDefinitionByGuidRequest(guid, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.GetTypeDefinitionByGuid");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the type definition for the given GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the type. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetTypeDefinitionByGuid(string guid, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetTypeDefinitionByGuidRequest(guid, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.GetTypeDefinitionByGuid");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="GetTypeDefinitionByGuid"/> and <see cref="GetTypeDefinitionByGuidAsync"/> operations. </summary>
        /// <param name="guid"> The globally unique identifier of the type. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateGetTypeDefinitionByGuidRequest(string guid, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/types/typedef/guid/", false);
            uri.AppendPath(guid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get the type definition by its name (unique). </summary>
        /// <param name="name"> The name of the type. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetTypeDefinitionByNameAsync(string name, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetTypeDefinitionByNameRequest(name, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.GetTypeDefinitionByName");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the type definition by its name (unique). </summary>
        /// <param name="name"> The name of the type. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetTypeDefinitionByName(string name, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetTypeDefinitionByNameRequest(name, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.GetTypeDefinitionByName");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="GetTypeDefinitionByName"/> and <see cref="GetTypeDefinitionByNameAsync"/> operations. </summary>
        /// <param name="name"> The name of the type. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateGetTypeDefinitionByNameRequest(string name, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/types/typedef/name/", false);
            uri.AppendPath(name, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete API for type identified by its name. </summary>
        /// <param name="name"> The name of the type. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> DeleteTypeByNameAsync(string name, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateDeleteTypeByNameRequest(name, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.DeleteTypeByName");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 204:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete API for type identified by its name. </summary>
        /// <param name="name"> The name of the type. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response DeleteTypeByName(string name, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateDeleteTypeByNameRequest(name, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.DeleteTypeByName");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 204:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="DeleteTypeByName"/> and <see cref="DeleteTypeByNameAsync"/> operations. </summary>
        /// <param name="name"> The name of the type. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateDeleteTypeByNameRequest(string name, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/types/typedef/name/", false);
            uri.AppendPath(name, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Get all type definitions in Atlas in bulk. </summary>
        /// <param name="includeTermTemplate">
        /// Whether include termtemplatedef when return all typedefs.
        /// This is always true when search filter type=term_template.
        /// </param>
        /// <param name="type"> Typedef name as search filter when get typedefs. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetAllTypeDefinitionsAsync(bool? includeTermTemplate = null, string type = null, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetAllTypeDefinitionsRequest(includeTermTemplate, type, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.GetAllTypeDefinitions");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all type definitions in Atlas in bulk. </summary>
        /// <param name="includeTermTemplate">
        /// Whether include termtemplatedef when return all typedefs.
        /// This is always true when search filter type=term_template.
        /// </param>
        /// <param name="type"> Typedef name as search filter when get typedefs. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetAllTypeDefinitions(bool? includeTermTemplate = null, string type = null, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetAllTypeDefinitionsRequest(includeTermTemplate, type, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.GetAllTypeDefinitions");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="GetAllTypeDefinitions"/> and <see cref="GetAllTypeDefinitionsAsync"/> operations. </summary>
        /// <param name="includeTermTemplate">
        /// Whether include termtemplatedef when return all typedefs.
        /// This is always true when search filter type=term_template.
        /// </param>
        /// <param name="type"> Typedef name as search filter when get typedefs. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateGetAllTypeDefinitionsRequest(bool? includeTermTemplate = null, string type = null, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/types/typedefs", false);
            if (includeTermTemplate != null)
            {
                uri.AppendQuery("includeTermTemplate", includeTermTemplate.Value, true);
            }
            if (type != null)
            {
                uri.AppendQuery("type", type, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// Create all atlas type definitions in bulk, only new definitions will be created.
        /// Any changes to the existing definitions will be discarded.
        /// </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>classificationDefs</term>
        ///     <term>AtlasClassificationDef[]</term>
        ///     <term></term>
        ///     <term> An array of classification definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityDefs</term>
        ///     <term>AtlasEntityDef[]</term>
        ///     <term></term>
        ///     <term> An array of entity definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>enumDefs</term>
        ///     <term>AtlasEnumDef[]</term>
        ///     <term></term>
        ///     <term> An array of enum definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipDefs</term>
        ///     <term>AtlasRelationshipDef[]</term>
        ///     <term></term>
        ///     <term> An array of relationship definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>structDefs</term>
        ///     <term>AtlasStructDef[]</term>
        ///     <term></term>
        ///     <term> An array of struct definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>termTemplateDefs</term>
        ///     <term>TermTemplateDef[]</term>
        ///     <term></term>
        ///     <term> An array of term template definitions. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasClassificationDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributeDefs</term>
        ///     <term>AtlasAttributeDef[]</term>
        ///     <term></term>
        ///     <term> An array of attribute definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>category</term>
        ///     <term>&quot;PRIMITIVE&quot; | &quot;OBJECT_ID_TYPE&quot; | &quot;ENUM&quot; | &quot;STRUCT&quot; | &quot;CLASSIFICATION&quot; | &quot;ENTITY&quot; | &quot;ARRAY&quot; | &quot;MAP&quot; | &quot;RELATIONSHIP&quot; | &quot;TERM_TEMPLATE&quot;</term>
        ///     <term></term>
        ///     <term> The enum of type category. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateFormatter</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>serviceType</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The service type. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeVersion</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The version of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityTypes</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term>
        /// Specifying a list of entityType names in the classificationDef, ensures that classifications can
        /// only be applied to those entityTypes.
        /// &lt;ul&gt;
        /// &lt;li&gt;Any subtypes of the entity types inherit the restriction&lt;/li&gt;
        /// &lt;li&gt;Any classificationDef subtypes inherit the parents entityTypes restrictions&lt;/li&gt;
        /// &lt;li&gt;Any classificationDef subtypes can further restrict the parents entityTypes restrictions by specifying a subset of the entityTypes&lt;/li&gt;
        /// &lt;li&gt;An empty entityTypes list when there are no parent restrictions means there are no restrictions&lt;/li&gt;
        /// &lt;li&gt;An empty entityTypes list when there are parent restrictions means that the subtype picks up the parents restrictions&lt;/li&gt;
        /// &lt;li&gt;If a list of entityTypes are supplied, where one inherits from another, this will be rejected. This should encourage cleaner classificationsDefs&lt;/li&gt;
        /// &lt;/ul&gt;.
        /// </term>
        ///   </item>
        ///   <item>
        ///     <term>subTypes</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of sub types. </term>
        ///   </item>
        ///   <item>
        ///     <term>superTypes</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of super types. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasEntityDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributeDefs</term>
        ///     <term>AtlasAttributeDef[]</term>
        ///     <term></term>
        ///     <term> An array of attribute definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>category</term>
        ///     <term>&quot;PRIMITIVE&quot; | &quot;OBJECT_ID_TYPE&quot; | &quot;ENUM&quot; | &quot;STRUCT&quot; | &quot;CLASSIFICATION&quot; | &quot;ENTITY&quot; | &quot;ARRAY&quot; | &quot;MAP&quot; | &quot;RELATIONSHIP&quot; | &quot;TERM_TEMPLATE&quot;</term>
        ///     <term></term>
        ///     <term> The enum of type category. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateFormatter</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>serviceType</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The service type. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeVersion</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The version of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>subTypes</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of sub types. </term>
        ///   </item>
        ///   <item>
        ///     <term>superTypes</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of super types. </term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipAttributeDefs</term>
        ///     <term>AtlasRelationshipAttributeDef[]</term>
        ///     <term></term>
        ///     <term> An array of relationship attributes. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasEnumDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>category</term>
        ///     <term>&quot;PRIMITIVE&quot; | &quot;OBJECT_ID_TYPE&quot; | &quot;ENUM&quot; | &quot;STRUCT&quot; | &quot;CLASSIFICATION&quot; | &quot;ENTITY&quot; | &quot;ARRAY&quot; | &quot;MAP&quot; | &quot;RELATIONSHIP&quot; | &quot;TERM_TEMPLATE&quot;</term>
        ///     <term></term>
        ///     <term> The enum of type category. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateFormatter</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>serviceType</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The service type. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeVersion</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The version of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>defaultValue</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The default value. </term>
        ///   </item>
        ///   <item>
        ///     <term>elementDefs</term>
        ///     <term>AtlasEnumElementDef[]</term>
        ///     <term></term>
        ///     <term> An array of enum element definitions. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasRelationshipDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributeDefs</term>
        ///     <term>AtlasAttributeDef[]</term>
        ///     <term></term>
        ///     <term> An array of attribute definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>category</term>
        ///     <term>&quot;PRIMITIVE&quot; | &quot;OBJECT_ID_TYPE&quot; | &quot;ENUM&quot; | &quot;STRUCT&quot; | &quot;CLASSIFICATION&quot; | &quot;ENTITY&quot; | &quot;ARRAY&quot; | &quot;MAP&quot; | &quot;RELATIONSHIP&quot; | &quot;TERM_TEMPLATE&quot;</term>
        ///     <term></term>
        ///     <term> The enum of type category. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateFormatter</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>serviceType</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The service type. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeVersion</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The version of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>endDef1</term>
        ///     <term>AtlasRelationshipEndDef</term>
        ///     <term></term>
        ///     <term>
        /// The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
        /// attribute name, cardinality and whether it  is the container end of the relationship.
        /// </term>
        ///   </item>
        ///   <item>
        ///     <term>endDef2</term>
        ///     <term>AtlasRelationshipEndDef</term>
        ///     <term></term>
        ///     <term>
        /// The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
        /// attribute name, cardinality and whether it  is the container end of the relationship.
        /// </term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipCategory</term>
        ///     <term>&quot;ASSOCIATION&quot; | &quot;AGGREGATION&quot; | &quot;COMPOSITION&quot;</term>
        ///     <term></term>
        ///     <term>
        /// The Relationship category determines the style of relationship around containment and lifecycle.
        /// UML terminology is used for the values.
        /// &lt;p&gt;
        /// ASSOCIATION is a relationship with no containment. &lt;br&gt;
        /// COMPOSITION and AGGREGATION are containment relationships.
        /// &lt;p&gt;
        /// The difference being in the lifecycles of the container and its children. In the COMPOSITION case,
        /// the children cannot exist without the container. For AGGREGATION, the life cycles
        /// of the container and children are totally independent.
        /// </term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipLabel</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The label of the relationship. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasStructDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>category</term>
        ///     <term>&quot;PRIMITIVE&quot; | &quot;OBJECT_ID_TYPE&quot; | &quot;ENUM&quot; | &quot;STRUCT&quot; | &quot;CLASSIFICATION&quot; | &quot;ENTITY&quot; | &quot;ARRAY&quot; | &quot;MAP&quot; | &quot;RELATIONSHIP&quot; | &quot;TERM_TEMPLATE&quot;</term>
        ///     <term></term>
        ///     <term> The enum of type category. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateFormatter</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>serviceType</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The service type. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeVersion</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The version of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>attributeDefs</term>
        ///     <term>AtlasAttributeDef[]</term>
        ///     <term></term>
        ///     <term> An array of attribute definitions. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>TermTemplateDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributeDefs</term>
        ///     <term>AtlasAttributeDef[]</term>
        ///     <term></term>
        ///     <term> An array of attribute definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>category</term>
        ///     <term>&quot;PRIMITIVE&quot; | &quot;OBJECT_ID_TYPE&quot; | &quot;ENUM&quot; | &quot;STRUCT&quot; | &quot;CLASSIFICATION&quot; | &quot;ENTITY&quot; | &quot;ARRAY&quot; | &quot;MAP&quot; | &quot;RELATIONSHIP&quot; | &quot;TERM_TEMPLATE&quot;</term>
        ///     <term></term>
        ///     <term> The enum of type category. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateFormatter</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>serviceType</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The service type. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeVersion</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The version of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>DateFormat</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>availableLocales</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of available locales. </term>
        ///   </item>
        ///   <item>
        ///     <term>calendar</term>
        ///     <term>number</term>
        ///     <term></term>
        ///    <term></term>
        ///   </item>
        ///   <item>
        ///     <term>dateInstance</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateTimeInstance</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>instance</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>lenient</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines the leniency of the date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>numberFormat</term>
        ///     <term>NumberFormat</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>timeInstance</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>timeZone</term>
        ///     <term>TimeZone</term>
        ///     <term></term>
        ///     <term> The timezone information. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasRelationshipEndDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>cardinality</term>
        ///     <term>&quot;SINGLE&quot; | &quot;LIST&quot; | &quot;SET&quot;</term>
        ///     <term></term>
        ///     <term> single-valued attribute or multi-valued attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the relationship end definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>isContainer</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is container. </term>
        ///   </item>
        ///   <item>
        ///     <term>isLegacyAttribute</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is a legacy attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the relationship end definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>type</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The type of the relationship end. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasAttributeDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>cardinality</term>
        ///     <term>&quot;SINGLE&quot; | &quot;LIST&quot; | &quot;SET&quot;</term>
        ///     <term></term>
        ///     <term> single-valued attribute or multi-valued attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>constraints</term>
        ///     <term>AtlasConstraintDef[]</term>
        ///     <term></term>
        ///     <term> An array of constraints. </term>
        ///   </item>
        ///   <item>
        ///     <term>defaultValue</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The default value of the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>includeInNotification</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is included in notification. </term>
        ///   </item>
        ///   <item>
        ///     <term>isIndexable</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is indexable. </term>
        ///   </item>
        ///   <item>
        ///     <term>isOptional</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is optional. </term>
        ///   </item>
        ///   <item>
        ///     <term>isUnique</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it unique. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>valuesMaxCount</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The maximum count of the values. </term>
        ///   </item>
        ///   <item>
        ///     <term>valuesMinCount</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The minimum count of the values. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>NumberFormat</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>availableLocales</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>currency</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The currency. </term>
        ///   </item>
        ///   <item>
        ///     <term>currencyInstance</term>
        ///     <term>NumberFormat</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>groupingUsed</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if grouping is used. </term>
        ///   </item>
        ///   <item>
        ///     <term>instance</term>
        ///     <term>NumberFormat</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>integerInstance</term>
        ///     <term>NumberFormat</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>maximumFractionDigits</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The maximum of fraction digits. </term>
        ///   </item>
        ///   <item>
        ///     <term>maximumIntegerDigits</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The maximum of integer digits. </term>
        ///   </item>
        ///   <item>
        ///     <term>minimumFractionDigits</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The minimum of fraction digits. </term>
        ///   </item>
        ///   <item>
        ///     <term>minimumIntegerDigits</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The minimum of integer digits. </term>
        ///   </item>
        ///   <item>
        ///     <term>numberInstance</term>
        ///     <term>NumberFormat</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>parseIntegerOnly</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if only integer is parsed. </term>
        ///   </item>
        ///   <item>
        ///     <term>percentInstance</term>
        ///     <term>NumberFormat</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>roundingMode</term>
        ///     <term>&quot;UP&quot; | &quot;DOWN&quot; | &quot;CEILING&quot; | &quot;FLOOR&quot; | &quot;HALF_UP&quot; | &quot;HALF_DOWN&quot; | &quot;HALF_EVEN&quot; | &quot;UNNECESSARY&quot;</term>
        ///     <term></term>
        ///     <term> The enum of rounding mode. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>TimeZone</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>dstSavings</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The value of the daylight saving time. </term>
        ///   </item>
        ///   <item>
        ///     <term>id</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The ID of the timezone. </term>
        ///   </item>
        ///   <item>
        ///     <term>availableIds</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of available IDs. </term>
        ///   </item>
        ///   <item>
        ///     <term>default</term>
        ///     <term>TimeZone</term>
        ///     <term></term>
        ///     <term> The timezone information. </term>
        ///   </item>
        ///   <item>
        ///     <term>displayName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The display name of the timezone. </term>
        ///   </item>
        ///   <item>
        ///     <term>rawOffset</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The raw offset of the timezone. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasRelationshipAttributeDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>cardinality</term>
        ///     <term>&quot;SINGLE&quot; | &quot;LIST&quot; | &quot;SET&quot;</term>
        ///     <term></term>
        ///     <term> single-valued attribute or multi-valued attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>constraints</term>
        ///     <term>AtlasConstraintDef[]</term>
        ///     <term></term>
        ///     <term> An array of constraints. </term>
        ///   </item>
        ///   <item>
        ///     <term>defaultValue</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The default value of the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>includeInNotification</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is included in notification. </term>
        ///   </item>
        ///   <item>
        ///     <term>isIndexable</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is indexable. </term>
        ///   </item>
        ///   <item>
        ///     <term>isOptional</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is optional. </term>
        ///   </item>
        ///   <item>
        ///     <term>isUnique</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it unique. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>valuesMaxCount</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The maximum count of the values. </term>
        ///   </item>
        ///   <item>
        ///     <term>valuesMinCount</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The minimum count of the values. </term>
        ///   </item>
        ///   <item>
        ///     <term>isLegacyAttribute</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is a legacy attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipTypeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the relationship type. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasEnumElementDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the enum element definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>ordinal</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The ordinal of the enum element definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>value</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The value of the enum element definition. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasConstraintDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>params</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The parameters of the constraint definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>type</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The type of the constraint. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> CreateTypeDefinitionsAsync(RequestContent requestBody, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateCreateTypeDefinitionsRequest(requestBody, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.CreateTypeDefinitions");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create all atlas type definitions in bulk, only new definitions will be created.
        /// Any changes to the existing definitions will be discarded.
        /// </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>classificationDefs</term>
        ///     <term>AtlasClassificationDef[]</term>
        ///     <term></term>
        ///     <term> An array of classification definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityDefs</term>
        ///     <term>AtlasEntityDef[]</term>
        ///     <term></term>
        ///     <term> An array of entity definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>enumDefs</term>
        ///     <term>AtlasEnumDef[]</term>
        ///     <term></term>
        ///     <term> An array of enum definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipDefs</term>
        ///     <term>AtlasRelationshipDef[]</term>
        ///     <term></term>
        ///     <term> An array of relationship definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>structDefs</term>
        ///     <term>AtlasStructDef[]</term>
        ///     <term></term>
        ///     <term> An array of struct definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>termTemplateDefs</term>
        ///     <term>TermTemplateDef[]</term>
        ///     <term></term>
        ///     <term> An array of term template definitions. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasClassificationDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributeDefs</term>
        ///     <term>AtlasAttributeDef[]</term>
        ///     <term></term>
        ///     <term> An array of attribute definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>category</term>
        ///     <term>&quot;PRIMITIVE&quot; | &quot;OBJECT_ID_TYPE&quot; | &quot;ENUM&quot; | &quot;STRUCT&quot; | &quot;CLASSIFICATION&quot; | &quot;ENTITY&quot; | &quot;ARRAY&quot; | &quot;MAP&quot; | &quot;RELATIONSHIP&quot; | &quot;TERM_TEMPLATE&quot;</term>
        ///     <term></term>
        ///     <term> The enum of type category. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateFormatter</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>serviceType</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The service type. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeVersion</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The version of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityTypes</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term>
        /// Specifying a list of entityType names in the classificationDef, ensures that classifications can
        /// only be applied to those entityTypes.
        /// &lt;ul&gt;
        /// &lt;li&gt;Any subtypes of the entity types inherit the restriction&lt;/li&gt;
        /// &lt;li&gt;Any classificationDef subtypes inherit the parents entityTypes restrictions&lt;/li&gt;
        /// &lt;li&gt;Any classificationDef subtypes can further restrict the parents entityTypes restrictions by specifying a subset of the entityTypes&lt;/li&gt;
        /// &lt;li&gt;An empty entityTypes list when there are no parent restrictions means there are no restrictions&lt;/li&gt;
        /// &lt;li&gt;An empty entityTypes list when there are parent restrictions means that the subtype picks up the parents restrictions&lt;/li&gt;
        /// &lt;li&gt;If a list of entityTypes are supplied, where one inherits from another, this will be rejected. This should encourage cleaner classificationsDefs&lt;/li&gt;
        /// &lt;/ul&gt;.
        /// </term>
        ///   </item>
        ///   <item>
        ///     <term>subTypes</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of sub types. </term>
        ///   </item>
        ///   <item>
        ///     <term>superTypes</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of super types. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasEntityDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributeDefs</term>
        ///     <term>AtlasAttributeDef[]</term>
        ///     <term></term>
        ///     <term> An array of attribute definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>category</term>
        ///     <term>&quot;PRIMITIVE&quot; | &quot;OBJECT_ID_TYPE&quot; | &quot;ENUM&quot; | &quot;STRUCT&quot; | &quot;CLASSIFICATION&quot; | &quot;ENTITY&quot; | &quot;ARRAY&quot; | &quot;MAP&quot; | &quot;RELATIONSHIP&quot; | &quot;TERM_TEMPLATE&quot;</term>
        ///     <term></term>
        ///     <term> The enum of type category. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateFormatter</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>serviceType</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The service type. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeVersion</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The version of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>subTypes</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of sub types. </term>
        ///   </item>
        ///   <item>
        ///     <term>superTypes</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of super types. </term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipAttributeDefs</term>
        ///     <term>AtlasRelationshipAttributeDef[]</term>
        ///     <term></term>
        ///     <term> An array of relationship attributes. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasEnumDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>category</term>
        ///     <term>&quot;PRIMITIVE&quot; | &quot;OBJECT_ID_TYPE&quot; | &quot;ENUM&quot; | &quot;STRUCT&quot; | &quot;CLASSIFICATION&quot; | &quot;ENTITY&quot; | &quot;ARRAY&quot; | &quot;MAP&quot; | &quot;RELATIONSHIP&quot; | &quot;TERM_TEMPLATE&quot;</term>
        ///     <term></term>
        ///     <term> The enum of type category. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateFormatter</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>serviceType</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The service type. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeVersion</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The version of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>defaultValue</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The default value. </term>
        ///   </item>
        ///   <item>
        ///     <term>elementDefs</term>
        ///     <term>AtlasEnumElementDef[]</term>
        ///     <term></term>
        ///     <term> An array of enum element definitions. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasRelationshipDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributeDefs</term>
        ///     <term>AtlasAttributeDef[]</term>
        ///     <term></term>
        ///     <term> An array of attribute definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>category</term>
        ///     <term>&quot;PRIMITIVE&quot; | &quot;OBJECT_ID_TYPE&quot; | &quot;ENUM&quot; | &quot;STRUCT&quot; | &quot;CLASSIFICATION&quot; | &quot;ENTITY&quot; | &quot;ARRAY&quot; | &quot;MAP&quot; | &quot;RELATIONSHIP&quot; | &quot;TERM_TEMPLATE&quot;</term>
        ///     <term></term>
        ///     <term> The enum of type category. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateFormatter</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>serviceType</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The service type. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeVersion</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The version of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>endDef1</term>
        ///     <term>AtlasRelationshipEndDef</term>
        ///     <term></term>
        ///     <term>
        /// The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
        /// attribute name, cardinality and whether it  is the container end of the relationship.
        /// </term>
        ///   </item>
        ///   <item>
        ///     <term>endDef2</term>
        ///     <term>AtlasRelationshipEndDef</term>
        ///     <term></term>
        ///     <term>
        /// The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
        /// attribute name, cardinality and whether it  is the container end of the relationship.
        /// </term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipCategory</term>
        ///     <term>&quot;ASSOCIATION&quot; | &quot;AGGREGATION&quot; | &quot;COMPOSITION&quot;</term>
        ///     <term></term>
        ///     <term>
        /// The Relationship category determines the style of relationship around containment and lifecycle.
        /// UML terminology is used for the values.
        /// &lt;p&gt;
        /// ASSOCIATION is a relationship with no containment. &lt;br&gt;
        /// COMPOSITION and AGGREGATION are containment relationships.
        /// &lt;p&gt;
        /// The difference being in the lifecycles of the container and its children. In the COMPOSITION case,
        /// the children cannot exist without the container. For AGGREGATION, the life cycles
        /// of the container and children are totally independent.
        /// </term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipLabel</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The label of the relationship. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasStructDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>category</term>
        ///     <term>&quot;PRIMITIVE&quot; | &quot;OBJECT_ID_TYPE&quot; | &quot;ENUM&quot; | &quot;STRUCT&quot; | &quot;CLASSIFICATION&quot; | &quot;ENTITY&quot; | &quot;ARRAY&quot; | &quot;MAP&quot; | &quot;RELATIONSHIP&quot; | &quot;TERM_TEMPLATE&quot;</term>
        ///     <term></term>
        ///     <term> The enum of type category. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateFormatter</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>serviceType</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The service type. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeVersion</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The version of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>attributeDefs</term>
        ///     <term>AtlasAttributeDef[]</term>
        ///     <term></term>
        ///     <term> An array of attribute definitions. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>TermTemplateDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributeDefs</term>
        ///     <term>AtlasAttributeDef[]</term>
        ///     <term></term>
        ///     <term> An array of attribute definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>category</term>
        ///     <term>&quot;PRIMITIVE&quot; | &quot;OBJECT_ID_TYPE&quot; | &quot;ENUM&quot; | &quot;STRUCT&quot; | &quot;CLASSIFICATION&quot; | &quot;ENTITY&quot; | &quot;ARRAY&quot; | &quot;MAP&quot; | &quot;RELATIONSHIP&quot; | &quot;TERM_TEMPLATE&quot;</term>
        ///     <term></term>
        ///     <term> The enum of type category. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateFormatter</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>serviceType</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The service type. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeVersion</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The version of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>DateFormat</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>availableLocales</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of available locales. </term>
        ///   </item>
        ///   <item>
        ///     <term>calendar</term>
        ///     <term>number</term>
        ///     <term></term>
        ///    <term></term>
        ///   </item>
        ///   <item>
        ///     <term>dateInstance</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateTimeInstance</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>instance</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>lenient</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines the leniency of the date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>numberFormat</term>
        ///     <term>NumberFormat</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>timeInstance</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>timeZone</term>
        ///     <term>TimeZone</term>
        ///     <term></term>
        ///     <term> The timezone information. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasRelationshipEndDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>cardinality</term>
        ///     <term>&quot;SINGLE&quot; | &quot;LIST&quot; | &quot;SET&quot;</term>
        ///     <term></term>
        ///     <term> single-valued attribute or multi-valued attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the relationship end definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>isContainer</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is container. </term>
        ///   </item>
        ///   <item>
        ///     <term>isLegacyAttribute</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is a legacy attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the relationship end definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>type</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The type of the relationship end. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasAttributeDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>cardinality</term>
        ///     <term>&quot;SINGLE&quot; | &quot;LIST&quot; | &quot;SET&quot;</term>
        ///     <term></term>
        ///     <term> single-valued attribute or multi-valued attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>constraints</term>
        ///     <term>AtlasConstraintDef[]</term>
        ///     <term></term>
        ///     <term> An array of constraints. </term>
        ///   </item>
        ///   <item>
        ///     <term>defaultValue</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The default value of the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>includeInNotification</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is included in notification. </term>
        ///   </item>
        ///   <item>
        ///     <term>isIndexable</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is indexable. </term>
        ///   </item>
        ///   <item>
        ///     <term>isOptional</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is optional. </term>
        ///   </item>
        ///   <item>
        ///     <term>isUnique</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it unique. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>valuesMaxCount</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The maximum count of the values. </term>
        ///   </item>
        ///   <item>
        ///     <term>valuesMinCount</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The minimum count of the values. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>NumberFormat</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>availableLocales</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>currency</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The currency. </term>
        ///   </item>
        ///   <item>
        ///     <term>currencyInstance</term>
        ///     <term>NumberFormat</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>groupingUsed</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if grouping is used. </term>
        ///   </item>
        ///   <item>
        ///     <term>instance</term>
        ///     <term>NumberFormat</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>integerInstance</term>
        ///     <term>NumberFormat</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>maximumFractionDigits</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The maximum of fraction digits. </term>
        ///   </item>
        ///   <item>
        ///     <term>maximumIntegerDigits</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The maximum of integer digits. </term>
        ///   </item>
        ///   <item>
        ///     <term>minimumFractionDigits</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The minimum of fraction digits. </term>
        ///   </item>
        ///   <item>
        ///     <term>minimumIntegerDigits</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The minimum of integer digits. </term>
        ///   </item>
        ///   <item>
        ///     <term>numberInstance</term>
        ///     <term>NumberFormat</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>parseIntegerOnly</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if only integer is parsed. </term>
        ///   </item>
        ///   <item>
        ///     <term>percentInstance</term>
        ///     <term>NumberFormat</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>roundingMode</term>
        ///     <term>&quot;UP&quot; | &quot;DOWN&quot; | &quot;CEILING&quot; | &quot;FLOOR&quot; | &quot;HALF_UP&quot; | &quot;HALF_DOWN&quot; | &quot;HALF_EVEN&quot; | &quot;UNNECESSARY&quot;</term>
        ///     <term></term>
        ///     <term> The enum of rounding mode. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>TimeZone</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>dstSavings</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The value of the daylight saving time. </term>
        ///   </item>
        ///   <item>
        ///     <term>id</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The ID of the timezone. </term>
        ///   </item>
        ///   <item>
        ///     <term>availableIds</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of available IDs. </term>
        ///   </item>
        ///   <item>
        ///     <term>default</term>
        ///     <term>TimeZone</term>
        ///     <term></term>
        ///     <term> The timezone information. </term>
        ///   </item>
        ///   <item>
        ///     <term>displayName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The display name of the timezone. </term>
        ///   </item>
        ///   <item>
        ///     <term>rawOffset</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The raw offset of the timezone. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasRelationshipAttributeDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>cardinality</term>
        ///     <term>&quot;SINGLE&quot; | &quot;LIST&quot; | &quot;SET&quot;</term>
        ///     <term></term>
        ///     <term> single-valued attribute or multi-valued attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>constraints</term>
        ///     <term>AtlasConstraintDef[]</term>
        ///     <term></term>
        ///     <term> An array of constraints. </term>
        ///   </item>
        ///   <item>
        ///     <term>defaultValue</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The default value of the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>includeInNotification</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is included in notification. </term>
        ///   </item>
        ///   <item>
        ///     <term>isIndexable</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is indexable. </term>
        ///   </item>
        ///   <item>
        ///     <term>isOptional</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is optional. </term>
        ///   </item>
        ///   <item>
        ///     <term>isUnique</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it unique. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>valuesMaxCount</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The maximum count of the values. </term>
        ///   </item>
        ///   <item>
        ///     <term>valuesMinCount</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The minimum count of the values. </term>
        ///   </item>
        ///   <item>
        ///     <term>isLegacyAttribute</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is a legacy attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipTypeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the relationship type. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasEnumElementDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the enum element definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>ordinal</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The ordinal of the enum element definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>value</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The value of the enum element definition. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasConstraintDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>params</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The parameters of the constraint definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>type</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The type of the constraint. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response CreateTypeDefinitions(RequestContent requestBody, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateCreateTypeDefinitionsRequest(requestBody, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.CreateTypeDefinitions");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="CreateTypeDefinitions"/> and <see cref="CreateTypeDefinitionsAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateCreateTypeDefinitionsRequest(RequestContent requestBody, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/types/typedefs", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return message;
        }

        /// <summary> Update all types in bulk, changes detected in the type definitions would be persisted. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>classificationDefs</term>
        ///     <term>AtlasClassificationDef[]</term>
        ///     <term></term>
        ///     <term> An array of classification definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityDefs</term>
        ///     <term>AtlasEntityDef[]</term>
        ///     <term></term>
        ///     <term> An array of entity definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>enumDefs</term>
        ///     <term>AtlasEnumDef[]</term>
        ///     <term></term>
        ///     <term> An array of enum definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipDefs</term>
        ///     <term>AtlasRelationshipDef[]</term>
        ///     <term></term>
        ///     <term> An array of relationship definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>structDefs</term>
        ///     <term>AtlasStructDef[]</term>
        ///     <term></term>
        ///     <term> An array of struct definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>termTemplateDefs</term>
        ///     <term>TermTemplateDef[]</term>
        ///     <term></term>
        ///     <term> An array of term template definitions. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasClassificationDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributeDefs</term>
        ///     <term>AtlasAttributeDef[]</term>
        ///     <term></term>
        ///     <term> An array of attribute definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>category</term>
        ///     <term>&quot;PRIMITIVE&quot; | &quot;OBJECT_ID_TYPE&quot; | &quot;ENUM&quot; | &quot;STRUCT&quot; | &quot;CLASSIFICATION&quot; | &quot;ENTITY&quot; | &quot;ARRAY&quot; | &quot;MAP&quot; | &quot;RELATIONSHIP&quot; | &quot;TERM_TEMPLATE&quot;</term>
        ///     <term></term>
        ///     <term> The enum of type category. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateFormatter</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>serviceType</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The service type. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeVersion</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The version of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityTypes</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term>
        /// Specifying a list of entityType names in the classificationDef, ensures that classifications can
        /// only be applied to those entityTypes.
        /// &lt;ul&gt;
        /// &lt;li&gt;Any subtypes of the entity types inherit the restriction&lt;/li&gt;
        /// &lt;li&gt;Any classificationDef subtypes inherit the parents entityTypes restrictions&lt;/li&gt;
        /// &lt;li&gt;Any classificationDef subtypes can further restrict the parents entityTypes restrictions by specifying a subset of the entityTypes&lt;/li&gt;
        /// &lt;li&gt;An empty entityTypes list when there are no parent restrictions means there are no restrictions&lt;/li&gt;
        /// &lt;li&gt;An empty entityTypes list when there are parent restrictions means that the subtype picks up the parents restrictions&lt;/li&gt;
        /// &lt;li&gt;If a list of entityTypes are supplied, where one inherits from another, this will be rejected. This should encourage cleaner classificationsDefs&lt;/li&gt;
        /// &lt;/ul&gt;.
        /// </term>
        ///   </item>
        ///   <item>
        ///     <term>subTypes</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of sub types. </term>
        ///   </item>
        ///   <item>
        ///     <term>superTypes</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of super types. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasEntityDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributeDefs</term>
        ///     <term>AtlasAttributeDef[]</term>
        ///     <term></term>
        ///     <term> An array of attribute definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>category</term>
        ///     <term>&quot;PRIMITIVE&quot; | &quot;OBJECT_ID_TYPE&quot; | &quot;ENUM&quot; | &quot;STRUCT&quot; | &quot;CLASSIFICATION&quot; | &quot;ENTITY&quot; | &quot;ARRAY&quot; | &quot;MAP&quot; | &quot;RELATIONSHIP&quot; | &quot;TERM_TEMPLATE&quot;</term>
        ///     <term></term>
        ///     <term> The enum of type category. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateFormatter</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>serviceType</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The service type. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeVersion</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The version of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>subTypes</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of sub types. </term>
        ///   </item>
        ///   <item>
        ///     <term>superTypes</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of super types. </term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipAttributeDefs</term>
        ///     <term>AtlasRelationshipAttributeDef[]</term>
        ///     <term></term>
        ///     <term> An array of relationship attributes. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasEnumDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>category</term>
        ///     <term>&quot;PRIMITIVE&quot; | &quot;OBJECT_ID_TYPE&quot; | &quot;ENUM&quot; | &quot;STRUCT&quot; | &quot;CLASSIFICATION&quot; | &quot;ENTITY&quot; | &quot;ARRAY&quot; | &quot;MAP&quot; | &quot;RELATIONSHIP&quot; | &quot;TERM_TEMPLATE&quot;</term>
        ///     <term></term>
        ///     <term> The enum of type category. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateFormatter</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>serviceType</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The service type. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeVersion</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The version of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>defaultValue</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The default value. </term>
        ///   </item>
        ///   <item>
        ///     <term>elementDefs</term>
        ///     <term>AtlasEnumElementDef[]</term>
        ///     <term></term>
        ///     <term> An array of enum element definitions. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasRelationshipDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributeDefs</term>
        ///     <term>AtlasAttributeDef[]</term>
        ///     <term></term>
        ///     <term> An array of attribute definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>category</term>
        ///     <term>&quot;PRIMITIVE&quot; | &quot;OBJECT_ID_TYPE&quot; | &quot;ENUM&quot; | &quot;STRUCT&quot; | &quot;CLASSIFICATION&quot; | &quot;ENTITY&quot; | &quot;ARRAY&quot; | &quot;MAP&quot; | &quot;RELATIONSHIP&quot; | &quot;TERM_TEMPLATE&quot;</term>
        ///     <term></term>
        ///     <term> The enum of type category. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateFormatter</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>serviceType</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The service type. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeVersion</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The version of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>endDef1</term>
        ///     <term>AtlasRelationshipEndDef</term>
        ///     <term></term>
        ///     <term>
        /// The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
        /// attribute name, cardinality and whether it  is the container end of the relationship.
        /// </term>
        ///   </item>
        ///   <item>
        ///     <term>endDef2</term>
        ///     <term>AtlasRelationshipEndDef</term>
        ///     <term></term>
        ///     <term>
        /// The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
        /// attribute name, cardinality and whether it  is the container end of the relationship.
        /// </term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipCategory</term>
        ///     <term>&quot;ASSOCIATION&quot; | &quot;AGGREGATION&quot; | &quot;COMPOSITION&quot;</term>
        ///     <term></term>
        ///     <term>
        /// The Relationship category determines the style of relationship around containment and lifecycle.
        /// UML terminology is used for the values.
        /// &lt;p&gt;
        /// ASSOCIATION is a relationship with no containment. &lt;br&gt;
        /// COMPOSITION and AGGREGATION are containment relationships.
        /// &lt;p&gt;
        /// The difference being in the lifecycles of the container and its children. In the COMPOSITION case,
        /// the children cannot exist without the container. For AGGREGATION, the life cycles
        /// of the container and children are totally independent.
        /// </term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipLabel</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The label of the relationship. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasStructDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>category</term>
        ///     <term>&quot;PRIMITIVE&quot; | &quot;OBJECT_ID_TYPE&quot; | &quot;ENUM&quot; | &quot;STRUCT&quot; | &quot;CLASSIFICATION&quot; | &quot;ENTITY&quot; | &quot;ARRAY&quot; | &quot;MAP&quot; | &quot;RELATIONSHIP&quot; | &quot;TERM_TEMPLATE&quot;</term>
        ///     <term></term>
        ///     <term> The enum of type category. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateFormatter</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>serviceType</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The service type. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeVersion</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The version of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>attributeDefs</term>
        ///     <term>AtlasAttributeDef[]</term>
        ///     <term></term>
        ///     <term> An array of attribute definitions. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>TermTemplateDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributeDefs</term>
        ///     <term>AtlasAttributeDef[]</term>
        ///     <term></term>
        ///     <term> An array of attribute definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>category</term>
        ///     <term>&quot;PRIMITIVE&quot; | &quot;OBJECT_ID_TYPE&quot; | &quot;ENUM&quot; | &quot;STRUCT&quot; | &quot;CLASSIFICATION&quot; | &quot;ENTITY&quot; | &quot;ARRAY&quot; | &quot;MAP&quot; | &quot;RELATIONSHIP&quot; | &quot;TERM_TEMPLATE&quot;</term>
        ///     <term></term>
        ///     <term> The enum of type category. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateFormatter</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>serviceType</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The service type. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeVersion</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The version of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>DateFormat</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>availableLocales</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of available locales. </term>
        ///   </item>
        ///   <item>
        ///     <term>calendar</term>
        ///     <term>number</term>
        ///     <term></term>
        ///    <term></term>
        ///   </item>
        ///   <item>
        ///     <term>dateInstance</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateTimeInstance</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>instance</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>lenient</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines the leniency of the date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>numberFormat</term>
        ///     <term>NumberFormat</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>timeInstance</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>timeZone</term>
        ///     <term>TimeZone</term>
        ///     <term></term>
        ///     <term> The timezone information. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasRelationshipEndDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>cardinality</term>
        ///     <term>&quot;SINGLE&quot; | &quot;LIST&quot; | &quot;SET&quot;</term>
        ///     <term></term>
        ///     <term> single-valued attribute or multi-valued attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the relationship end definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>isContainer</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is container. </term>
        ///   </item>
        ///   <item>
        ///     <term>isLegacyAttribute</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is a legacy attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the relationship end definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>type</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The type of the relationship end. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasAttributeDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>cardinality</term>
        ///     <term>&quot;SINGLE&quot; | &quot;LIST&quot; | &quot;SET&quot;</term>
        ///     <term></term>
        ///     <term> single-valued attribute or multi-valued attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>constraints</term>
        ///     <term>AtlasConstraintDef[]</term>
        ///     <term></term>
        ///     <term> An array of constraints. </term>
        ///   </item>
        ///   <item>
        ///     <term>defaultValue</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The default value of the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>includeInNotification</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is included in notification. </term>
        ///   </item>
        ///   <item>
        ///     <term>isIndexable</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is indexable. </term>
        ///   </item>
        ///   <item>
        ///     <term>isOptional</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is optional. </term>
        ///   </item>
        ///   <item>
        ///     <term>isUnique</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it unique. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>valuesMaxCount</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The maximum count of the values. </term>
        ///   </item>
        ///   <item>
        ///     <term>valuesMinCount</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The minimum count of the values. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>NumberFormat</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>availableLocales</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>currency</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The currency. </term>
        ///   </item>
        ///   <item>
        ///     <term>currencyInstance</term>
        ///     <term>NumberFormat</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>groupingUsed</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if grouping is used. </term>
        ///   </item>
        ///   <item>
        ///     <term>instance</term>
        ///     <term>NumberFormat</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>integerInstance</term>
        ///     <term>NumberFormat</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>maximumFractionDigits</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The maximum of fraction digits. </term>
        ///   </item>
        ///   <item>
        ///     <term>maximumIntegerDigits</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The maximum of integer digits. </term>
        ///   </item>
        ///   <item>
        ///     <term>minimumFractionDigits</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The minimum of fraction digits. </term>
        ///   </item>
        ///   <item>
        ///     <term>minimumIntegerDigits</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The minimum of integer digits. </term>
        ///   </item>
        ///   <item>
        ///     <term>numberInstance</term>
        ///     <term>NumberFormat</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>parseIntegerOnly</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if only integer is parsed. </term>
        ///   </item>
        ///   <item>
        ///     <term>percentInstance</term>
        ///     <term>NumberFormat</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>roundingMode</term>
        ///     <term>&quot;UP&quot; | &quot;DOWN&quot; | &quot;CEILING&quot; | &quot;FLOOR&quot; | &quot;HALF_UP&quot; | &quot;HALF_DOWN&quot; | &quot;HALF_EVEN&quot; | &quot;UNNECESSARY&quot;</term>
        ///     <term></term>
        ///     <term> The enum of rounding mode. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>TimeZone</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>dstSavings</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The value of the daylight saving time. </term>
        ///   </item>
        ///   <item>
        ///     <term>id</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The ID of the timezone. </term>
        ///   </item>
        ///   <item>
        ///     <term>availableIds</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of available IDs. </term>
        ///   </item>
        ///   <item>
        ///     <term>default</term>
        ///     <term>TimeZone</term>
        ///     <term></term>
        ///     <term> The timezone information. </term>
        ///   </item>
        ///   <item>
        ///     <term>displayName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The display name of the timezone. </term>
        ///   </item>
        ///   <item>
        ///     <term>rawOffset</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The raw offset of the timezone. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasRelationshipAttributeDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>cardinality</term>
        ///     <term>&quot;SINGLE&quot; | &quot;LIST&quot; | &quot;SET&quot;</term>
        ///     <term></term>
        ///     <term> single-valued attribute or multi-valued attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>constraints</term>
        ///     <term>AtlasConstraintDef[]</term>
        ///     <term></term>
        ///     <term> An array of constraints. </term>
        ///   </item>
        ///   <item>
        ///     <term>defaultValue</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The default value of the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>includeInNotification</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is included in notification. </term>
        ///   </item>
        ///   <item>
        ///     <term>isIndexable</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is indexable. </term>
        ///   </item>
        ///   <item>
        ///     <term>isOptional</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is optional. </term>
        ///   </item>
        ///   <item>
        ///     <term>isUnique</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it unique. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>valuesMaxCount</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The maximum count of the values. </term>
        ///   </item>
        ///   <item>
        ///     <term>valuesMinCount</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The minimum count of the values. </term>
        ///   </item>
        ///   <item>
        ///     <term>isLegacyAttribute</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is a legacy attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipTypeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the relationship type. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasEnumElementDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the enum element definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>ordinal</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The ordinal of the enum element definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>value</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The value of the enum element definition. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasConstraintDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>params</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The parameters of the constraint definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>type</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The type of the constraint. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> UpdateAtlasTypeDefinitionsAsync(RequestContent requestBody, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateUpdateAtlasTypeDefinitionsRequest(requestBody, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.UpdateAtlasTypeDefinitions");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update all types in bulk, changes detected in the type definitions would be persisted. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>classificationDefs</term>
        ///     <term>AtlasClassificationDef[]</term>
        ///     <term></term>
        ///     <term> An array of classification definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityDefs</term>
        ///     <term>AtlasEntityDef[]</term>
        ///     <term></term>
        ///     <term> An array of entity definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>enumDefs</term>
        ///     <term>AtlasEnumDef[]</term>
        ///     <term></term>
        ///     <term> An array of enum definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipDefs</term>
        ///     <term>AtlasRelationshipDef[]</term>
        ///     <term></term>
        ///     <term> An array of relationship definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>structDefs</term>
        ///     <term>AtlasStructDef[]</term>
        ///     <term></term>
        ///     <term> An array of struct definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>termTemplateDefs</term>
        ///     <term>TermTemplateDef[]</term>
        ///     <term></term>
        ///     <term> An array of term template definitions. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasClassificationDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributeDefs</term>
        ///     <term>AtlasAttributeDef[]</term>
        ///     <term></term>
        ///     <term> An array of attribute definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>category</term>
        ///     <term>&quot;PRIMITIVE&quot; | &quot;OBJECT_ID_TYPE&quot; | &quot;ENUM&quot; | &quot;STRUCT&quot; | &quot;CLASSIFICATION&quot; | &quot;ENTITY&quot; | &quot;ARRAY&quot; | &quot;MAP&quot; | &quot;RELATIONSHIP&quot; | &quot;TERM_TEMPLATE&quot;</term>
        ///     <term></term>
        ///     <term> The enum of type category. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateFormatter</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>serviceType</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The service type. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeVersion</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The version of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityTypes</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term>
        /// Specifying a list of entityType names in the classificationDef, ensures that classifications can
        /// only be applied to those entityTypes.
        /// &lt;ul&gt;
        /// &lt;li&gt;Any subtypes of the entity types inherit the restriction&lt;/li&gt;
        /// &lt;li&gt;Any classificationDef subtypes inherit the parents entityTypes restrictions&lt;/li&gt;
        /// &lt;li&gt;Any classificationDef subtypes can further restrict the parents entityTypes restrictions by specifying a subset of the entityTypes&lt;/li&gt;
        /// &lt;li&gt;An empty entityTypes list when there are no parent restrictions means there are no restrictions&lt;/li&gt;
        /// &lt;li&gt;An empty entityTypes list when there are parent restrictions means that the subtype picks up the parents restrictions&lt;/li&gt;
        /// &lt;li&gt;If a list of entityTypes are supplied, where one inherits from another, this will be rejected. This should encourage cleaner classificationsDefs&lt;/li&gt;
        /// &lt;/ul&gt;.
        /// </term>
        ///   </item>
        ///   <item>
        ///     <term>subTypes</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of sub types. </term>
        ///   </item>
        ///   <item>
        ///     <term>superTypes</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of super types. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasEntityDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributeDefs</term>
        ///     <term>AtlasAttributeDef[]</term>
        ///     <term></term>
        ///     <term> An array of attribute definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>category</term>
        ///     <term>&quot;PRIMITIVE&quot; | &quot;OBJECT_ID_TYPE&quot; | &quot;ENUM&quot; | &quot;STRUCT&quot; | &quot;CLASSIFICATION&quot; | &quot;ENTITY&quot; | &quot;ARRAY&quot; | &quot;MAP&quot; | &quot;RELATIONSHIP&quot; | &quot;TERM_TEMPLATE&quot;</term>
        ///     <term></term>
        ///     <term> The enum of type category. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateFormatter</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>serviceType</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The service type. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeVersion</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The version of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>subTypes</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of sub types. </term>
        ///   </item>
        ///   <item>
        ///     <term>superTypes</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of super types. </term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipAttributeDefs</term>
        ///     <term>AtlasRelationshipAttributeDef[]</term>
        ///     <term></term>
        ///     <term> An array of relationship attributes. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasEnumDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>category</term>
        ///     <term>&quot;PRIMITIVE&quot; | &quot;OBJECT_ID_TYPE&quot; | &quot;ENUM&quot; | &quot;STRUCT&quot; | &quot;CLASSIFICATION&quot; | &quot;ENTITY&quot; | &quot;ARRAY&quot; | &quot;MAP&quot; | &quot;RELATIONSHIP&quot; | &quot;TERM_TEMPLATE&quot;</term>
        ///     <term></term>
        ///     <term> The enum of type category. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateFormatter</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>serviceType</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The service type. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeVersion</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The version of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>defaultValue</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The default value. </term>
        ///   </item>
        ///   <item>
        ///     <term>elementDefs</term>
        ///     <term>AtlasEnumElementDef[]</term>
        ///     <term></term>
        ///     <term> An array of enum element definitions. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasRelationshipDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributeDefs</term>
        ///     <term>AtlasAttributeDef[]</term>
        ///     <term></term>
        ///     <term> An array of attribute definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>category</term>
        ///     <term>&quot;PRIMITIVE&quot; | &quot;OBJECT_ID_TYPE&quot; | &quot;ENUM&quot; | &quot;STRUCT&quot; | &quot;CLASSIFICATION&quot; | &quot;ENTITY&quot; | &quot;ARRAY&quot; | &quot;MAP&quot; | &quot;RELATIONSHIP&quot; | &quot;TERM_TEMPLATE&quot;</term>
        ///     <term></term>
        ///     <term> The enum of type category. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateFormatter</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>serviceType</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The service type. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeVersion</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The version of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>endDef1</term>
        ///     <term>AtlasRelationshipEndDef</term>
        ///     <term></term>
        ///     <term>
        /// The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
        /// attribute name, cardinality and whether it  is the container end of the relationship.
        /// </term>
        ///   </item>
        ///   <item>
        ///     <term>endDef2</term>
        ///     <term>AtlasRelationshipEndDef</term>
        ///     <term></term>
        ///     <term>
        /// The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
        /// attribute name, cardinality and whether it  is the container end of the relationship.
        /// </term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipCategory</term>
        ///     <term>&quot;ASSOCIATION&quot; | &quot;AGGREGATION&quot; | &quot;COMPOSITION&quot;</term>
        ///     <term></term>
        ///     <term>
        /// The Relationship category determines the style of relationship around containment and lifecycle.
        /// UML terminology is used for the values.
        /// &lt;p&gt;
        /// ASSOCIATION is a relationship with no containment. &lt;br&gt;
        /// COMPOSITION and AGGREGATION are containment relationships.
        /// &lt;p&gt;
        /// The difference being in the lifecycles of the container and its children. In the COMPOSITION case,
        /// the children cannot exist without the container. For AGGREGATION, the life cycles
        /// of the container and children are totally independent.
        /// </term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipLabel</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The label of the relationship. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasStructDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>category</term>
        ///     <term>&quot;PRIMITIVE&quot; | &quot;OBJECT_ID_TYPE&quot; | &quot;ENUM&quot; | &quot;STRUCT&quot; | &quot;CLASSIFICATION&quot; | &quot;ENTITY&quot; | &quot;ARRAY&quot; | &quot;MAP&quot; | &quot;RELATIONSHIP&quot; | &quot;TERM_TEMPLATE&quot;</term>
        ///     <term></term>
        ///     <term> The enum of type category. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateFormatter</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>serviceType</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The service type. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeVersion</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The version of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>attributeDefs</term>
        ///     <term>AtlasAttributeDef[]</term>
        ///     <term></term>
        ///     <term> An array of attribute definitions. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>TermTemplateDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributeDefs</term>
        ///     <term>AtlasAttributeDef[]</term>
        ///     <term></term>
        ///     <term> An array of attribute definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>category</term>
        ///     <term>&quot;PRIMITIVE&quot; | &quot;OBJECT_ID_TYPE&quot; | &quot;ENUM&quot; | &quot;STRUCT&quot; | &quot;CLASSIFICATION&quot; | &quot;ENTITY&quot; | &quot;ARRAY&quot; | &quot;MAP&quot; | &quot;RELATIONSHIP&quot; | &quot;TERM_TEMPLATE&quot;</term>
        ///     <term></term>
        ///     <term> The enum of type category. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateFormatter</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>serviceType</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The service type. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeVersion</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The version of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>DateFormat</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>availableLocales</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of available locales. </term>
        ///   </item>
        ///   <item>
        ///     <term>calendar</term>
        ///     <term>number</term>
        ///     <term></term>
        ///    <term></term>
        ///   </item>
        ///   <item>
        ///     <term>dateInstance</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateTimeInstance</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>instance</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>lenient</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines the leniency of the date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>numberFormat</term>
        ///     <term>NumberFormat</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>timeInstance</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>timeZone</term>
        ///     <term>TimeZone</term>
        ///     <term></term>
        ///     <term> The timezone information. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasRelationshipEndDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>cardinality</term>
        ///     <term>&quot;SINGLE&quot; | &quot;LIST&quot; | &quot;SET&quot;</term>
        ///     <term></term>
        ///     <term> single-valued attribute or multi-valued attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the relationship end definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>isContainer</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is container. </term>
        ///   </item>
        ///   <item>
        ///     <term>isLegacyAttribute</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is a legacy attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the relationship end definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>type</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The type of the relationship end. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasAttributeDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>cardinality</term>
        ///     <term>&quot;SINGLE&quot; | &quot;LIST&quot; | &quot;SET&quot;</term>
        ///     <term></term>
        ///     <term> single-valued attribute or multi-valued attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>constraints</term>
        ///     <term>AtlasConstraintDef[]</term>
        ///     <term></term>
        ///     <term> An array of constraints. </term>
        ///   </item>
        ///   <item>
        ///     <term>defaultValue</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The default value of the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>includeInNotification</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is included in notification. </term>
        ///   </item>
        ///   <item>
        ///     <term>isIndexable</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is indexable. </term>
        ///   </item>
        ///   <item>
        ///     <term>isOptional</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is optional. </term>
        ///   </item>
        ///   <item>
        ///     <term>isUnique</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it unique. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>valuesMaxCount</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The maximum count of the values. </term>
        ///   </item>
        ///   <item>
        ///     <term>valuesMinCount</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The minimum count of the values. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>NumberFormat</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>availableLocales</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>currency</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The currency. </term>
        ///   </item>
        ///   <item>
        ///     <term>currencyInstance</term>
        ///     <term>NumberFormat</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>groupingUsed</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if grouping is used. </term>
        ///   </item>
        ///   <item>
        ///     <term>instance</term>
        ///     <term>NumberFormat</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>integerInstance</term>
        ///     <term>NumberFormat</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>maximumFractionDigits</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The maximum of fraction digits. </term>
        ///   </item>
        ///   <item>
        ///     <term>maximumIntegerDigits</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The maximum of integer digits. </term>
        ///   </item>
        ///   <item>
        ///     <term>minimumFractionDigits</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The minimum of fraction digits. </term>
        ///   </item>
        ///   <item>
        ///     <term>minimumIntegerDigits</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The minimum of integer digits. </term>
        ///   </item>
        ///   <item>
        ///     <term>numberInstance</term>
        ///     <term>NumberFormat</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>parseIntegerOnly</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if only integer is parsed. </term>
        ///   </item>
        ///   <item>
        ///     <term>percentInstance</term>
        ///     <term>NumberFormat</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>roundingMode</term>
        ///     <term>&quot;UP&quot; | &quot;DOWN&quot; | &quot;CEILING&quot; | &quot;FLOOR&quot; | &quot;HALF_UP&quot; | &quot;HALF_DOWN&quot; | &quot;HALF_EVEN&quot; | &quot;UNNECESSARY&quot;</term>
        ///     <term></term>
        ///     <term> The enum of rounding mode. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>TimeZone</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>dstSavings</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The value of the daylight saving time. </term>
        ///   </item>
        ///   <item>
        ///     <term>id</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The ID of the timezone. </term>
        ///   </item>
        ///   <item>
        ///     <term>availableIds</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of available IDs. </term>
        ///   </item>
        ///   <item>
        ///     <term>default</term>
        ///     <term>TimeZone</term>
        ///     <term></term>
        ///     <term> The timezone information. </term>
        ///   </item>
        ///   <item>
        ///     <term>displayName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The display name of the timezone. </term>
        ///   </item>
        ///   <item>
        ///     <term>rawOffset</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The raw offset of the timezone. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasRelationshipAttributeDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>cardinality</term>
        ///     <term>&quot;SINGLE&quot; | &quot;LIST&quot; | &quot;SET&quot;</term>
        ///     <term></term>
        ///     <term> single-valued attribute or multi-valued attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>constraints</term>
        ///     <term>AtlasConstraintDef[]</term>
        ///     <term></term>
        ///     <term> An array of constraints. </term>
        ///   </item>
        ///   <item>
        ///     <term>defaultValue</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The default value of the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>includeInNotification</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is included in notification. </term>
        ///   </item>
        ///   <item>
        ///     <term>isIndexable</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is indexable. </term>
        ///   </item>
        ///   <item>
        ///     <term>isOptional</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is optional. </term>
        ///   </item>
        ///   <item>
        ///     <term>isUnique</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it unique. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>valuesMaxCount</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The maximum count of the values. </term>
        ///   </item>
        ///   <item>
        ///     <term>valuesMinCount</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The minimum count of the values. </term>
        ///   </item>
        ///   <item>
        ///     <term>isLegacyAttribute</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is a legacy attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipTypeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the relationship type. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasEnumElementDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the enum element definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>ordinal</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The ordinal of the enum element definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>value</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The value of the enum element definition. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasConstraintDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>params</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The parameters of the constraint definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>type</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The type of the constraint. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response UpdateAtlasTypeDefinitions(RequestContent requestBody, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateUpdateAtlasTypeDefinitionsRequest(requestBody, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.UpdateAtlasTypeDefinitions");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="UpdateAtlasTypeDefinitions"/> and <see cref="UpdateAtlasTypeDefinitionsAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateUpdateAtlasTypeDefinitionsRequest(RequestContent requestBody, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/types/typedefs", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return message;
        }

        /// <summary> Delete API for all types in bulk. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>classificationDefs</term>
        ///     <term>AtlasClassificationDef[]</term>
        ///     <term></term>
        ///     <term> An array of classification definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityDefs</term>
        ///     <term>AtlasEntityDef[]</term>
        ///     <term></term>
        ///     <term> An array of entity definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>enumDefs</term>
        ///     <term>AtlasEnumDef[]</term>
        ///     <term></term>
        ///     <term> An array of enum definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipDefs</term>
        ///     <term>AtlasRelationshipDef[]</term>
        ///     <term></term>
        ///     <term> An array of relationship definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>structDefs</term>
        ///     <term>AtlasStructDef[]</term>
        ///     <term></term>
        ///     <term> An array of struct definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>termTemplateDefs</term>
        ///     <term>TermTemplateDef[]</term>
        ///     <term></term>
        ///     <term> An array of term template definitions. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasClassificationDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributeDefs</term>
        ///     <term>AtlasAttributeDef[]</term>
        ///     <term></term>
        ///     <term> An array of attribute definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>category</term>
        ///     <term>&quot;PRIMITIVE&quot; | &quot;OBJECT_ID_TYPE&quot; | &quot;ENUM&quot; | &quot;STRUCT&quot; | &quot;CLASSIFICATION&quot; | &quot;ENTITY&quot; | &quot;ARRAY&quot; | &quot;MAP&quot; | &quot;RELATIONSHIP&quot; | &quot;TERM_TEMPLATE&quot;</term>
        ///     <term></term>
        ///     <term> The enum of type category. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateFormatter</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>serviceType</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The service type. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeVersion</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The version of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityTypes</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term>
        /// Specifying a list of entityType names in the classificationDef, ensures that classifications can
        /// only be applied to those entityTypes.
        /// &lt;ul&gt;
        /// &lt;li&gt;Any subtypes of the entity types inherit the restriction&lt;/li&gt;
        /// &lt;li&gt;Any classificationDef subtypes inherit the parents entityTypes restrictions&lt;/li&gt;
        /// &lt;li&gt;Any classificationDef subtypes can further restrict the parents entityTypes restrictions by specifying a subset of the entityTypes&lt;/li&gt;
        /// &lt;li&gt;An empty entityTypes list when there are no parent restrictions means there are no restrictions&lt;/li&gt;
        /// &lt;li&gt;An empty entityTypes list when there are parent restrictions means that the subtype picks up the parents restrictions&lt;/li&gt;
        /// &lt;li&gt;If a list of entityTypes are supplied, where one inherits from another, this will be rejected. This should encourage cleaner classificationsDefs&lt;/li&gt;
        /// &lt;/ul&gt;.
        /// </term>
        ///   </item>
        ///   <item>
        ///     <term>subTypes</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of sub types. </term>
        ///   </item>
        ///   <item>
        ///     <term>superTypes</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of super types. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasEntityDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributeDefs</term>
        ///     <term>AtlasAttributeDef[]</term>
        ///     <term></term>
        ///     <term> An array of attribute definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>category</term>
        ///     <term>&quot;PRIMITIVE&quot; | &quot;OBJECT_ID_TYPE&quot; | &quot;ENUM&quot; | &quot;STRUCT&quot; | &quot;CLASSIFICATION&quot; | &quot;ENTITY&quot; | &quot;ARRAY&quot; | &quot;MAP&quot; | &quot;RELATIONSHIP&quot; | &quot;TERM_TEMPLATE&quot;</term>
        ///     <term></term>
        ///     <term> The enum of type category. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateFormatter</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>serviceType</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The service type. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeVersion</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The version of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>subTypes</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of sub types. </term>
        ///   </item>
        ///   <item>
        ///     <term>superTypes</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of super types. </term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipAttributeDefs</term>
        ///     <term>AtlasRelationshipAttributeDef[]</term>
        ///     <term></term>
        ///     <term> An array of relationship attributes. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasEnumDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>category</term>
        ///     <term>&quot;PRIMITIVE&quot; | &quot;OBJECT_ID_TYPE&quot; | &quot;ENUM&quot; | &quot;STRUCT&quot; | &quot;CLASSIFICATION&quot; | &quot;ENTITY&quot; | &quot;ARRAY&quot; | &quot;MAP&quot; | &quot;RELATIONSHIP&quot; | &quot;TERM_TEMPLATE&quot;</term>
        ///     <term></term>
        ///     <term> The enum of type category. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateFormatter</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>serviceType</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The service type. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeVersion</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The version of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>defaultValue</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The default value. </term>
        ///   </item>
        ///   <item>
        ///     <term>elementDefs</term>
        ///     <term>AtlasEnumElementDef[]</term>
        ///     <term></term>
        ///     <term> An array of enum element definitions. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasRelationshipDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributeDefs</term>
        ///     <term>AtlasAttributeDef[]</term>
        ///     <term></term>
        ///     <term> An array of attribute definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>category</term>
        ///     <term>&quot;PRIMITIVE&quot; | &quot;OBJECT_ID_TYPE&quot; | &quot;ENUM&quot; | &quot;STRUCT&quot; | &quot;CLASSIFICATION&quot; | &quot;ENTITY&quot; | &quot;ARRAY&quot; | &quot;MAP&quot; | &quot;RELATIONSHIP&quot; | &quot;TERM_TEMPLATE&quot;</term>
        ///     <term></term>
        ///     <term> The enum of type category. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateFormatter</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>serviceType</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The service type. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeVersion</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The version of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>endDef1</term>
        ///     <term>AtlasRelationshipEndDef</term>
        ///     <term></term>
        ///     <term>
        /// The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
        /// attribute name, cardinality and whether it  is the container end of the relationship.
        /// </term>
        ///   </item>
        ///   <item>
        ///     <term>endDef2</term>
        ///     <term>AtlasRelationshipEndDef</term>
        ///     <term></term>
        ///     <term>
        /// The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
        /// attribute name, cardinality and whether it  is the container end of the relationship.
        /// </term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipCategory</term>
        ///     <term>&quot;ASSOCIATION&quot; | &quot;AGGREGATION&quot; | &quot;COMPOSITION&quot;</term>
        ///     <term></term>
        ///     <term>
        /// The Relationship category determines the style of relationship around containment and lifecycle.
        /// UML terminology is used for the values.
        /// &lt;p&gt;
        /// ASSOCIATION is a relationship with no containment. &lt;br&gt;
        /// COMPOSITION and AGGREGATION are containment relationships.
        /// &lt;p&gt;
        /// The difference being in the lifecycles of the container and its children. In the COMPOSITION case,
        /// the children cannot exist without the container. For AGGREGATION, the life cycles
        /// of the container and children are totally independent.
        /// </term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipLabel</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The label of the relationship. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasStructDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>category</term>
        ///     <term>&quot;PRIMITIVE&quot; | &quot;OBJECT_ID_TYPE&quot; | &quot;ENUM&quot; | &quot;STRUCT&quot; | &quot;CLASSIFICATION&quot; | &quot;ENTITY&quot; | &quot;ARRAY&quot; | &quot;MAP&quot; | &quot;RELATIONSHIP&quot; | &quot;TERM_TEMPLATE&quot;</term>
        ///     <term></term>
        ///     <term> The enum of type category. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateFormatter</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>serviceType</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The service type. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeVersion</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The version of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>attributeDefs</term>
        ///     <term>AtlasAttributeDef[]</term>
        ///     <term></term>
        ///     <term> An array of attribute definitions. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>TermTemplateDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributeDefs</term>
        ///     <term>AtlasAttributeDef[]</term>
        ///     <term></term>
        ///     <term> An array of attribute definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>category</term>
        ///     <term>&quot;PRIMITIVE&quot; | &quot;OBJECT_ID_TYPE&quot; | &quot;ENUM&quot; | &quot;STRUCT&quot; | &quot;CLASSIFICATION&quot; | &quot;ENTITY&quot; | &quot;ARRAY&quot; | &quot;MAP&quot; | &quot;RELATIONSHIP&quot; | &quot;TERM_TEMPLATE&quot;</term>
        ///     <term></term>
        ///     <term> The enum of type category. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateFormatter</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>serviceType</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The service type. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeVersion</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The version of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>DateFormat</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>availableLocales</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of available locales. </term>
        ///   </item>
        ///   <item>
        ///     <term>calendar</term>
        ///     <term>number</term>
        ///     <term></term>
        ///    <term></term>
        ///   </item>
        ///   <item>
        ///     <term>dateInstance</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateTimeInstance</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>instance</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>lenient</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines the leniency of the date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>numberFormat</term>
        ///     <term>NumberFormat</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>timeInstance</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>timeZone</term>
        ///     <term>TimeZone</term>
        ///     <term></term>
        ///     <term> The timezone information. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasRelationshipEndDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>cardinality</term>
        ///     <term>&quot;SINGLE&quot; | &quot;LIST&quot; | &quot;SET&quot;</term>
        ///     <term></term>
        ///     <term> single-valued attribute or multi-valued attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the relationship end definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>isContainer</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is container. </term>
        ///   </item>
        ///   <item>
        ///     <term>isLegacyAttribute</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is a legacy attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the relationship end definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>type</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The type of the relationship end. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasAttributeDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>cardinality</term>
        ///     <term>&quot;SINGLE&quot; | &quot;LIST&quot; | &quot;SET&quot;</term>
        ///     <term></term>
        ///     <term> single-valued attribute or multi-valued attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>constraints</term>
        ///     <term>AtlasConstraintDef[]</term>
        ///     <term></term>
        ///     <term> An array of constraints. </term>
        ///   </item>
        ///   <item>
        ///     <term>defaultValue</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The default value of the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>includeInNotification</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is included in notification. </term>
        ///   </item>
        ///   <item>
        ///     <term>isIndexable</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is indexable. </term>
        ///   </item>
        ///   <item>
        ///     <term>isOptional</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is optional. </term>
        ///   </item>
        ///   <item>
        ///     <term>isUnique</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it unique. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>valuesMaxCount</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The maximum count of the values. </term>
        ///   </item>
        ///   <item>
        ///     <term>valuesMinCount</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The minimum count of the values. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>NumberFormat</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>availableLocales</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>currency</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The currency. </term>
        ///   </item>
        ///   <item>
        ///     <term>currencyInstance</term>
        ///     <term>NumberFormat</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>groupingUsed</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if grouping is used. </term>
        ///   </item>
        ///   <item>
        ///     <term>instance</term>
        ///     <term>NumberFormat</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>integerInstance</term>
        ///     <term>NumberFormat</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>maximumFractionDigits</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The maximum of fraction digits. </term>
        ///   </item>
        ///   <item>
        ///     <term>maximumIntegerDigits</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The maximum of integer digits. </term>
        ///   </item>
        ///   <item>
        ///     <term>minimumFractionDigits</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The minimum of fraction digits. </term>
        ///   </item>
        ///   <item>
        ///     <term>minimumIntegerDigits</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The minimum of integer digits. </term>
        ///   </item>
        ///   <item>
        ///     <term>numberInstance</term>
        ///     <term>NumberFormat</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>parseIntegerOnly</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if only integer is parsed. </term>
        ///   </item>
        ///   <item>
        ///     <term>percentInstance</term>
        ///     <term>NumberFormat</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>roundingMode</term>
        ///     <term>&quot;UP&quot; | &quot;DOWN&quot; | &quot;CEILING&quot; | &quot;FLOOR&quot; | &quot;HALF_UP&quot; | &quot;HALF_DOWN&quot; | &quot;HALF_EVEN&quot; | &quot;UNNECESSARY&quot;</term>
        ///     <term></term>
        ///     <term> The enum of rounding mode. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>TimeZone</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>dstSavings</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The value of the daylight saving time. </term>
        ///   </item>
        ///   <item>
        ///     <term>id</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The ID of the timezone. </term>
        ///   </item>
        ///   <item>
        ///     <term>availableIds</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of available IDs. </term>
        ///   </item>
        ///   <item>
        ///     <term>default</term>
        ///     <term>TimeZone</term>
        ///     <term></term>
        ///     <term> The timezone information. </term>
        ///   </item>
        ///   <item>
        ///     <term>displayName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The display name of the timezone. </term>
        ///   </item>
        ///   <item>
        ///     <term>rawOffset</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The raw offset of the timezone. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasRelationshipAttributeDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>cardinality</term>
        ///     <term>&quot;SINGLE&quot; | &quot;LIST&quot; | &quot;SET&quot;</term>
        ///     <term></term>
        ///     <term> single-valued attribute or multi-valued attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>constraints</term>
        ///     <term>AtlasConstraintDef[]</term>
        ///     <term></term>
        ///     <term> An array of constraints. </term>
        ///   </item>
        ///   <item>
        ///     <term>defaultValue</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The default value of the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>includeInNotification</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is included in notification. </term>
        ///   </item>
        ///   <item>
        ///     <term>isIndexable</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is indexable. </term>
        ///   </item>
        ///   <item>
        ///     <term>isOptional</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is optional. </term>
        ///   </item>
        ///   <item>
        ///     <term>isUnique</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it unique. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>valuesMaxCount</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The maximum count of the values. </term>
        ///   </item>
        ///   <item>
        ///     <term>valuesMinCount</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The minimum count of the values. </term>
        ///   </item>
        ///   <item>
        ///     <term>isLegacyAttribute</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is a legacy attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipTypeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the relationship type. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasEnumElementDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the enum element definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>ordinal</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The ordinal of the enum element definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>value</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The value of the enum element definition. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasConstraintDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>params</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The parameters of the constraint definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>type</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The type of the constraint. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> DeleteTypeDefinitionsAsync(RequestContent requestBody, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateDeleteTypeDefinitionsRequest(requestBody, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.DeleteTypeDefinitions");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 204:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete API for all types in bulk. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>classificationDefs</term>
        ///     <term>AtlasClassificationDef[]</term>
        ///     <term></term>
        ///     <term> An array of classification definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityDefs</term>
        ///     <term>AtlasEntityDef[]</term>
        ///     <term></term>
        ///     <term> An array of entity definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>enumDefs</term>
        ///     <term>AtlasEnumDef[]</term>
        ///     <term></term>
        ///     <term> An array of enum definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipDefs</term>
        ///     <term>AtlasRelationshipDef[]</term>
        ///     <term></term>
        ///     <term> An array of relationship definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>structDefs</term>
        ///     <term>AtlasStructDef[]</term>
        ///     <term></term>
        ///     <term> An array of struct definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>termTemplateDefs</term>
        ///     <term>TermTemplateDef[]</term>
        ///     <term></term>
        ///     <term> An array of term template definitions. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasClassificationDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributeDefs</term>
        ///     <term>AtlasAttributeDef[]</term>
        ///     <term></term>
        ///     <term> An array of attribute definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>category</term>
        ///     <term>&quot;PRIMITIVE&quot; | &quot;OBJECT_ID_TYPE&quot; | &quot;ENUM&quot; | &quot;STRUCT&quot; | &quot;CLASSIFICATION&quot; | &quot;ENTITY&quot; | &quot;ARRAY&quot; | &quot;MAP&quot; | &quot;RELATIONSHIP&quot; | &quot;TERM_TEMPLATE&quot;</term>
        ///     <term></term>
        ///     <term> The enum of type category. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateFormatter</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>serviceType</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The service type. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeVersion</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The version of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityTypes</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term>
        /// Specifying a list of entityType names in the classificationDef, ensures that classifications can
        /// only be applied to those entityTypes.
        /// &lt;ul&gt;
        /// &lt;li&gt;Any subtypes of the entity types inherit the restriction&lt;/li&gt;
        /// &lt;li&gt;Any classificationDef subtypes inherit the parents entityTypes restrictions&lt;/li&gt;
        /// &lt;li&gt;Any classificationDef subtypes can further restrict the parents entityTypes restrictions by specifying a subset of the entityTypes&lt;/li&gt;
        /// &lt;li&gt;An empty entityTypes list when there are no parent restrictions means there are no restrictions&lt;/li&gt;
        /// &lt;li&gt;An empty entityTypes list when there are parent restrictions means that the subtype picks up the parents restrictions&lt;/li&gt;
        /// &lt;li&gt;If a list of entityTypes are supplied, where one inherits from another, this will be rejected. This should encourage cleaner classificationsDefs&lt;/li&gt;
        /// &lt;/ul&gt;.
        /// </term>
        ///   </item>
        ///   <item>
        ///     <term>subTypes</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of sub types. </term>
        ///   </item>
        ///   <item>
        ///     <term>superTypes</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of super types. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasEntityDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributeDefs</term>
        ///     <term>AtlasAttributeDef[]</term>
        ///     <term></term>
        ///     <term> An array of attribute definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>category</term>
        ///     <term>&quot;PRIMITIVE&quot; | &quot;OBJECT_ID_TYPE&quot; | &quot;ENUM&quot; | &quot;STRUCT&quot; | &quot;CLASSIFICATION&quot; | &quot;ENTITY&quot; | &quot;ARRAY&quot; | &quot;MAP&quot; | &quot;RELATIONSHIP&quot; | &quot;TERM_TEMPLATE&quot;</term>
        ///     <term></term>
        ///     <term> The enum of type category. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateFormatter</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>serviceType</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The service type. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeVersion</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The version of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>subTypes</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of sub types. </term>
        ///   </item>
        ///   <item>
        ///     <term>superTypes</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of super types. </term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipAttributeDefs</term>
        ///     <term>AtlasRelationshipAttributeDef[]</term>
        ///     <term></term>
        ///     <term> An array of relationship attributes. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasEnumDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>category</term>
        ///     <term>&quot;PRIMITIVE&quot; | &quot;OBJECT_ID_TYPE&quot; | &quot;ENUM&quot; | &quot;STRUCT&quot; | &quot;CLASSIFICATION&quot; | &quot;ENTITY&quot; | &quot;ARRAY&quot; | &quot;MAP&quot; | &quot;RELATIONSHIP&quot; | &quot;TERM_TEMPLATE&quot;</term>
        ///     <term></term>
        ///     <term> The enum of type category. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateFormatter</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>serviceType</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The service type. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeVersion</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The version of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>defaultValue</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The default value. </term>
        ///   </item>
        ///   <item>
        ///     <term>elementDefs</term>
        ///     <term>AtlasEnumElementDef[]</term>
        ///     <term></term>
        ///     <term> An array of enum element definitions. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasRelationshipDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributeDefs</term>
        ///     <term>AtlasAttributeDef[]</term>
        ///     <term></term>
        ///     <term> An array of attribute definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>category</term>
        ///     <term>&quot;PRIMITIVE&quot; | &quot;OBJECT_ID_TYPE&quot; | &quot;ENUM&quot; | &quot;STRUCT&quot; | &quot;CLASSIFICATION&quot; | &quot;ENTITY&quot; | &quot;ARRAY&quot; | &quot;MAP&quot; | &quot;RELATIONSHIP&quot; | &quot;TERM_TEMPLATE&quot;</term>
        ///     <term></term>
        ///     <term> The enum of type category. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateFormatter</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>serviceType</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The service type. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeVersion</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The version of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>endDef1</term>
        ///     <term>AtlasRelationshipEndDef</term>
        ///     <term></term>
        ///     <term>
        /// The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
        /// attribute name, cardinality and whether it  is the container end of the relationship.
        /// </term>
        ///   </item>
        ///   <item>
        ///     <term>endDef2</term>
        ///     <term>AtlasRelationshipEndDef</term>
        ///     <term></term>
        ///     <term>
        /// The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
        /// attribute name, cardinality and whether it  is the container end of the relationship.
        /// </term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipCategory</term>
        ///     <term>&quot;ASSOCIATION&quot; | &quot;AGGREGATION&quot; | &quot;COMPOSITION&quot;</term>
        ///     <term></term>
        ///     <term>
        /// The Relationship category determines the style of relationship around containment and lifecycle.
        /// UML terminology is used for the values.
        /// &lt;p&gt;
        /// ASSOCIATION is a relationship with no containment. &lt;br&gt;
        /// COMPOSITION and AGGREGATION are containment relationships.
        /// &lt;p&gt;
        /// The difference being in the lifecycles of the container and its children. In the COMPOSITION case,
        /// the children cannot exist without the container. For AGGREGATION, the life cycles
        /// of the container and children are totally independent.
        /// </term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipLabel</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The label of the relationship. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasStructDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>category</term>
        ///     <term>&quot;PRIMITIVE&quot; | &quot;OBJECT_ID_TYPE&quot; | &quot;ENUM&quot; | &quot;STRUCT&quot; | &quot;CLASSIFICATION&quot; | &quot;ENTITY&quot; | &quot;ARRAY&quot; | &quot;MAP&quot; | &quot;RELATIONSHIP&quot; | &quot;TERM_TEMPLATE&quot;</term>
        ///     <term></term>
        ///     <term> The enum of type category. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateFormatter</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>serviceType</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The service type. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeVersion</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The version of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>attributeDefs</term>
        ///     <term>AtlasAttributeDef[]</term>
        ///     <term></term>
        ///     <term> An array of attribute definitions. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>TermTemplateDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributeDefs</term>
        ///     <term>AtlasAttributeDef[]</term>
        ///     <term></term>
        ///     <term> An array of attribute definitions. </term>
        ///   </item>
        ///   <item>
        ///     <term>category</term>
        ///     <term>&quot;PRIMITIVE&quot; | &quot;OBJECT_ID_TYPE&quot; | &quot;ENUM&quot; | &quot;STRUCT&quot; | &quot;CLASSIFICATION&quot; | &quot;ENTITY&quot; | &quot;ARRAY&quot; | &quot;MAP&quot; | &quot;RELATIONSHIP&quot; | &quot;TERM_TEMPLATE&quot;</term>
        ///     <term></term>
        ///     <term> The enum of type category. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateFormatter</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the type definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>serviceType</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The service type. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeVersion</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The version of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>DateFormat</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>availableLocales</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of available locales. </term>
        ///   </item>
        ///   <item>
        ///     <term>calendar</term>
        ///     <term>number</term>
        ///     <term></term>
        ///    <term></term>
        ///   </item>
        ///   <item>
        ///     <term>dateInstance</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>dateTimeInstance</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>instance</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>lenient</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines the leniency of the date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>numberFormat</term>
        ///     <term>NumberFormat</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>timeInstance</term>
        ///     <term>DateFormat</term>
        ///     <term></term>
        ///     <term> The date format. </term>
        ///   </item>
        ///   <item>
        ///     <term>timeZone</term>
        ///     <term>TimeZone</term>
        ///     <term></term>
        ///     <term> The timezone information. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasRelationshipEndDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>cardinality</term>
        ///     <term>&quot;SINGLE&quot; | &quot;LIST&quot; | &quot;SET&quot;</term>
        ///     <term></term>
        ///     <term> single-valued attribute or multi-valued attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the relationship end definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>isContainer</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is container. </term>
        ///   </item>
        ///   <item>
        ///     <term>isLegacyAttribute</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is a legacy attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the relationship end definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>type</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The type of the relationship end. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasAttributeDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>cardinality</term>
        ///     <term>&quot;SINGLE&quot; | &quot;LIST&quot; | &quot;SET&quot;</term>
        ///     <term></term>
        ///     <term> single-valued attribute or multi-valued attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>constraints</term>
        ///     <term>AtlasConstraintDef[]</term>
        ///     <term></term>
        ///     <term> An array of constraints. </term>
        ///   </item>
        ///   <item>
        ///     <term>defaultValue</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The default value of the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>includeInNotification</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is included in notification. </term>
        ///   </item>
        ///   <item>
        ///     <term>isIndexable</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is indexable. </term>
        ///   </item>
        ///   <item>
        ///     <term>isOptional</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is optional. </term>
        ///   </item>
        ///   <item>
        ///     <term>isUnique</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it unique. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>valuesMaxCount</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The maximum count of the values. </term>
        ///   </item>
        ///   <item>
        ///     <term>valuesMinCount</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The minimum count of the values. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>NumberFormat</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>availableLocales</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>currency</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The currency. </term>
        ///   </item>
        ///   <item>
        ///     <term>currencyInstance</term>
        ///     <term>NumberFormat</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>groupingUsed</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if grouping is used. </term>
        ///   </item>
        ///   <item>
        ///     <term>instance</term>
        ///     <term>NumberFormat</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>integerInstance</term>
        ///     <term>NumberFormat</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>maximumFractionDigits</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The maximum of fraction digits. </term>
        ///   </item>
        ///   <item>
        ///     <term>maximumIntegerDigits</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The maximum of integer digits. </term>
        ///   </item>
        ///   <item>
        ///     <term>minimumFractionDigits</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The minimum of fraction digits. </term>
        ///   </item>
        ///   <item>
        ///     <term>minimumIntegerDigits</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The minimum of integer digits. </term>
        ///   </item>
        ///   <item>
        ///     <term>numberInstance</term>
        ///     <term>NumberFormat</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>parseIntegerOnly</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if only integer is parsed. </term>
        ///   </item>
        ///   <item>
        ///     <term>percentInstance</term>
        ///     <term>NumberFormat</term>
        ///     <term></term>
        ///     <term> The number format. </term>
        ///   </item>
        ///   <item>
        ///     <term>roundingMode</term>
        ///     <term>&quot;UP&quot; | &quot;DOWN&quot; | &quot;CEILING&quot; | &quot;FLOOR&quot; | &quot;HALF_UP&quot; | &quot;HALF_DOWN&quot; | &quot;HALF_EVEN&quot; | &quot;UNNECESSARY&quot;</term>
        ///     <term></term>
        ///     <term> The enum of rounding mode. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>TimeZone</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>dstSavings</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The value of the daylight saving time. </term>
        ///   </item>
        ///   <item>
        ///     <term>id</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The ID of the timezone. </term>
        ///   </item>
        ///   <item>
        ///     <term>availableIds</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of available IDs. </term>
        ///   </item>
        ///   <item>
        ///     <term>default</term>
        ///     <term>TimeZone</term>
        ///     <term></term>
        ///     <term> The timezone information. </term>
        ///   </item>
        ///   <item>
        ///     <term>displayName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The display name of the timezone. </term>
        ///   </item>
        ///   <item>
        ///     <term>rawOffset</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The raw offset of the timezone. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasRelationshipAttributeDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>cardinality</term>
        ///     <term>&quot;SINGLE&quot; | &quot;LIST&quot; | &quot;SET&quot;</term>
        ///     <term></term>
        ///     <term> single-valued attribute or multi-valued attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>constraints</term>
        ///     <term>AtlasConstraintDef[]</term>
        ///     <term></term>
        ///     <term> An array of constraints. </term>
        ///   </item>
        ///   <item>
        ///     <term>defaultValue</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The default value of the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>includeInNotification</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is included in notification. </term>
        ///   </item>
        ///   <item>
        ///     <term>isIndexable</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is indexable. </term>
        ///   </item>
        ///   <item>
        ///     <term>isOptional</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is optional. </term>
        ///   </item>
        ///   <item>
        ///     <term>isUnique</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it unique. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>Dictionary&lt;string, string&gt;</term>
        ///     <term></term>
        ///     <term> The options for the attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>valuesMaxCount</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The maximum count of the values. </term>
        ///   </item>
        ///   <item>
        ///     <term>valuesMinCount</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The minimum count of the values. </term>
        ///   </item>
        ///   <item>
        ///     <term>isLegacyAttribute</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if it is a legacy attribute. </term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipTypeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the relationship type. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasEnumElementDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the enum element definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>ordinal</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The ordinal of the enum element definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>value</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The value of the enum element definition. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasConstraintDef</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>params</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The parameters of the constraint definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>type</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The type of the constraint. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response DeleteTypeDefinitions(RequestContent requestBody, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateDeleteTypeDefinitionsRequest(requestBody, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.DeleteTypeDefinitions");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 204:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="DeleteTypeDefinitions"/> and <see cref="DeleteTypeDefinitionsAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateDeleteTypeDefinitionsRequest(RequestContent requestBody, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/types/typedefs", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return message;
        }

        /// <summary> List all type definitions returned as a list of minimal information header. </summary>
        /// <param name="includeTermTemplate">
        /// Whether include termtemplatedef when return all typedefs.
        /// This is always true when search filter type=term_template.
        /// </param>
        /// <param name="type"> Typedef name as search filter when get typedefs. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetTypeDefinitionHeadersAsync(bool? includeTermTemplate = null, string type = null, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetTypeDefinitionHeadersRequest(includeTermTemplate, type, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.GetTypeDefinitionHeaders");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List all type definitions returned as a list of minimal information header. </summary>
        /// <param name="includeTermTemplate">
        /// Whether include termtemplatedef when return all typedefs.
        /// This is always true when search filter type=term_template.
        /// </param>
        /// <param name="type"> Typedef name as search filter when get typedefs. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetTypeDefinitionHeaders(bool? includeTermTemplate = null, string type = null, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetTypeDefinitionHeadersRequest(includeTermTemplate, type, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.GetTypeDefinitionHeaders");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="GetTypeDefinitionHeaders"/> and <see cref="GetTypeDefinitionHeadersAsync"/> operations. </summary>
        /// <param name="includeTermTemplate">
        /// Whether include termtemplatedef when return all typedefs.
        /// This is always true when search filter type=term_template.
        /// </param>
        /// <param name="type"> Typedef name as search filter when get typedefs. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateGetTypeDefinitionHeadersRequest(bool? includeTermTemplate = null, string type = null, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/types/typedefs/headers", false);
            if (includeTermTemplate != null)
            {
                uri.AppendQuery("includeTermTemplate", includeTermTemplate.Value, true);
            }
            if (type != null)
            {
                uri.AppendQuery("type", type, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get the term template definition for the given GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the term template. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetTermTemplateDefByGuidAsync(string guid, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetTermTemplateDefByGuidRequest(guid, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.GetTermTemplateDefByGuid");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the term template definition for the given GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the term template. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetTermTemplateDefByGuid(string guid, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetTermTemplateDefByGuidRequest(guid, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.GetTermTemplateDefByGuid");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="GetTermTemplateDefByGuid"/> and <see cref="GetTermTemplateDefByGuidAsync"/> operations. </summary>
        /// <param name="guid"> The globally unique identifier of the term template. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateGetTermTemplateDefByGuidRequest(string guid, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/types/termtemplatedef/guid/", false);
            uri.AppendPath(guid, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get the term template definition by its name (unique). </summary>
        /// <param name="name"> The name of the term template. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetTermTemplateDefByNameAsync(string name, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetTermTemplateDefByNameRequest(name, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.GetTermTemplateDefByName");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the term template definition by its name (unique). </summary>
        /// <param name="name"> The name of the term template. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetTermTemplateDefByName(string name, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetTermTemplateDefByNameRequest(name, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PurviewTypes.GetTermTemplateDefByName");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="GetTermTemplateDefByName"/> and <see cref="GetTermTemplateDefByNameAsync"/> operations. </summary>
        /// <param name="name"> The name of the term template. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateGetTermTemplateDefByNameRequest(string name, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/types/termtemplatedef/name/", false);
            uri.AppendPath(name, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }
    }
}
