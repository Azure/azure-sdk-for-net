<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetGlossariesAsync(Int32,Int32,String,Boolean,RequestContext)">
<example>
This sample shows how to call GetGlossariesAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossariesAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetGlossariesAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossariesAsync(1234, 1234, "<sort>", true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("language").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("usage").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

<details><summary>AtlasGlossaryExtInfo</summary>Schema for <c>AtlasGlossaryExtInfo</c>:
<code>{
  categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. The glossary category information.
  termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. The glossary term information.
  categories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the category header.
      displayText: string, # Optional. The display text.
      parentCategoryGuid: string, # Optional. The GUID of the parent category.
      relationGuid: string, # Optional. The GUID of the relationship.
    }
  ], # Optional. An array of categories.
  language: string, # Optional. The language of the glossary.
  terms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers.
  usage: string, # Optional. The usage of the glossary.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>
</details>

</remarks>
    </member>
    <member name="GetGlossaries(Int32,Int32,String,Boolean,RequestContext)">
<example>
This sample shows how to call GetGlossaries and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaries();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetGlossaries with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaries(1234, 1234, "<sort>", true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("language").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("usage").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

<details><summary>AtlasGlossaryExtInfo</summary>Schema for <c>AtlasGlossaryExtInfo</c>:
<code>{
  categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. The glossary category information.
  termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. The glossary term information.
  categories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the category header.
      displayText: string, # Optional. The display text.
      parentCategoryGuid: string, # Optional. The GUID of the parent category.
      relationGuid: string, # Optional. The GUID of the relationship.
    }
  ], # Optional. An array of categories.
  language: string, # Optional. The language of the glossary.
  terms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers.
  usage: string, # Optional. The usage of the glossary.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>
</details>

</remarks>
    </member>
    <member name="CreateGlossaryAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call CreateGlossaryAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new {};

Response response = await client.CreateGlossaryAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateGlossaryAsync with all request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new {
    categoryInfo = new {
        key = new {
            anchor = new {
                displayText = "<displayText>",
                glossaryGuid = "<glossaryGuid>",
                relationGuid = "<relationGuid>",
            },
            childrenCategories = new[] {
                new {
                    categoryGuid = "<categoryGuid>",
                    description = "<description>",
                    displayText = "<displayText>",
                    parentCategoryGuid = "<parentCategoryGuid>",
                    relationGuid = "<relationGuid>",
                }
            },
            parentCategory = new {
                categoryGuid = "<categoryGuid>",
                description = "<description>",
                displayText = "<displayText>",
                parentCategoryGuid = "<parentCategoryGuid>",
                relationGuid = "<relationGuid>",
            },
            terms = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            classifications = new[] {
                new {
                    entityGuid = "<entityGuid>",
                    entityStatus = "ACTIVE",
                    removePropagationsOnEntityDelete = true,
                    validityPeriods = new[] {
                        new {
                            endTime = "<endTime>",
                            startTime = "<startTime>",
                            timeZone = "<timeZone>",
                        }
                    },
                    source = "<source>",
                    sourceDetails = new {
                        key = new {},
                    },
                    attributes = new {
                        key = new {},
                    },
                    typeName = "<typeName>",
                    lastModifiedTS = "<lastModifiedTS>",
                }
            },
            longDescription = "<longDescription>",
            name = "<name>",
            qualifiedName = "<qualifiedName>",
            shortDescription = "<shortDescription>",
            lastModifiedTS = "<lastModifiedTS>",
            guid = "<guid>",
        },
    },
    termInfo = new {
        key = new {
            abbreviation = "<abbreviation>",
            templateName = new[] {
                new {}
            },
            anchor = new {
                displayText = "<displayText>",
                glossaryGuid = "<glossaryGuid>",
                relationGuid = "<relationGuid>",
            },
            antonyms = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            createTime = 123.45f,
            createdBy = "<createdBy>",
            updateTime = 123.45f,
            updatedBy = "<updatedBy>",
            status = "Draft",
            resources = new[] {
                new {
                    displayName = "<displayName>",
                    url = "<url>",
                }
            },
            contacts = new {
                key = new[] {
                    new {
                        id = "<id>",
                        info = "<info>",
                    }
                },
            },
            attributes = new {
                key = new {
                    key = new {},
                },
            },
            assignedEntities = new[] {
                new {
                    displayText = "<displayText>",
                    entityStatus = "ACTIVE",
                    relationshipType = "<relationshipType>",
                    relationshipAttributes = new {
                        entityGuid = "<entityGuid>",
                        entityStatus = "ACTIVE",
                        removePropagationsOnEntityDelete = true,
                        validityPeriods = new[] {
                            new {
                                endTime = "<endTime>",
                                startTime = "<startTime>",
                                timeZone = "<timeZone>",
                            }
                        },
                        source = "<source>",
                        sourceDetails = new {
                            key = new {},
                        },
                        attributes = new {
                            key = new {},
                        },
                        typeName = "<typeName>",
                        lastModifiedTS = "<lastModifiedTS>",
                    },
                    relationshipGuid = "<relationshipGuid>",
                    relationshipStatus = "ACTIVE",
                    guid = "<guid>",
                    typeName = "<typeName>",
                    uniqueAttributes = new {
                        key = new {},
                    },
                }
            },
            categories = new[] {
                new {
                    categoryGuid = "<categoryGuid>",
                    description = "<description>",
                    displayText = "<displayText>",
                    relationGuid = "<relationGuid>",
                    status = "DRAFT",
                }
            },
            classifies = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            examples = new[] {
                "<String>"
            },
            isA = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            preferredTerms = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            preferredToTerms = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            replacedBy = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            replacementTerms = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            seeAlso = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            synonyms = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            translatedTerms = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            translationTerms = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            usage = "<usage>",
            validValues = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            validValuesFor = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            classifications = new[] {
                new {
                    entityGuid = "<entityGuid>",
                    entityStatus = "ACTIVE",
                    removePropagationsOnEntityDelete = true,
                    validityPeriods = new[] {
                        new {
                            endTime = "<endTime>",
                            startTime = "<startTime>",
                            timeZone = "<timeZone>",
                        }
                    },
                    source = "<source>",
                    sourceDetails = new {
                        key = new {},
                    },
                    attributes = new {
                        key = new {},
                    },
                    typeName = "<typeName>",
                    lastModifiedTS = "<lastModifiedTS>",
                }
            },
            longDescription = "<longDescription>",
            name = "<name>",
            qualifiedName = "<qualifiedName>",
            shortDescription = "<shortDescription>",
            lastModifiedTS = "<lastModifiedTS>",
            guid = "<guid>",
        },
    },
    categories = new[] {
        new {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
    language = "<language>",
    terms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    usage = "<usage>",
    classifications = new[] {
        new {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new[] {
                new {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    guid = "<guid>",
};

Response response = await client.CreateGlossaryAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

<details><summary>AtlasGlossaryExtInfo</summary>Schema for <c>AtlasGlossaryExtInfo</c>:
<code>{
  categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. The glossary category information.
  termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. The glossary term information.
  categories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the category header.
      displayText: string, # Optional. The display text.
      parentCategoryGuid: string, # Optional. The GUID of the parent category.
      relationGuid: string, # Optional. The GUID of the relationship.
    }
  ], # Optional. An array of categories.
  language: string, # Optional. The language of the glossary.
  terms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers.
  usage: string, # Optional. The usage of the glossary.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>
</details>

Response Body:

<details><summary>AtlasGlossaryExtInfo</summary>Schema for <c>AtlasGlossaryExtInfo</c>:
<code>{
  categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. The glossary category information.
  termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. The glossary term information.
  categories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the category header.
      displayText: string, # Optional. The display text.
      parentCategoryGuid: string, # Optional. The GUID of the parent category.
      relationGuid: string, # Optional. The GUID of the relationship.
    }
  ], # Optional. An array of categories.
  language: string, # Optional. The language of the glossary.
  terms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers.
  usage: string, # Optional. The usage of the glossary.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>
</details>

</remarks>
    </member>
    <member name="CreateGlossary(RequestContent,RequestContext)">
<example>
This sample shows how to call CreateGlossary and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new {};

Response response = client.CreateGlossary(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateGlossary with all request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new {
    categoryInfo = new {
        key = new {
            anchor = new {
                displayText = "<displayText>",
                glossaryGuid = "<glossaryGuid>",
                relationGuid = "<relationGuid>",
            },
            childrenCategories = new[] {
                new {
                    categoryGuid = "<categoryGuid>",
                    description = "<description>",
                    displayText = "<displayText>",
                    parentCategoryGuid = "<parentCategoryGuid>",
                    relationGuid = "<relationGuid>",
                }
            },
            parentCategory = new {
                categoryGuid = "<categoryGuid>",
                description = "<description>",
                displayText = "<displayText>",
                parentCategoryGuid = "<parentCategoryGuid>",
                relationGuid = "<relationGuid>",
            },
            terms = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            classifications = new[] {
                new {
                    entityGuid = "<entityGuid>",
                    entityStatus = "ACTIVE",
                    removePropagationsOnEntityDelete = true,
                    validityPeriods = new[] {
                        new {
                            endTime = "<endTime>",
                            startTime = "<startTime>",
                            timeZone = "<timeZone>",
                        }
                    },
                    source = "<source>",
                    sourceDetails = new {
                        key = new {},
                    },
                    attributes = new {
                        key = new {},
                    },
                    typeName = "<typeName>",
                    lastModifiedTS = "<lastModifiedTS>",
                }
            },
            longDescription = "<longDescription>",
            name = "<name>",
            qualifiedName = "<qualifiedName>",
            shortDescription = "<shortDescription>",
            lastModifiedTS = "<lastModifiedTS>",
            guid = "<guid>",
        },
    },
    termInfo = new {
        key = new {
            abbreviation = "<abbreviation>",
            templateName = new[] {
                new {}
            },
            anchor = new {
                displayText = "<displayText>",
                glossaryGuid = "<glossaryGuid>",
                relationGuid = "<relationGuid>",
            },
            antonyms = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            createTime = 123.45f,
            createdBy = "<createdBy>",
            updateTime = 123.45f,
            updatedBy = "<updatedBy>",
            status = "Draft",
            resources = new[] {
                new {
                    displayName = "<displayName>",
                    url = "<url>",
                }
            },
            contacts = new {
                key = new[] {
                    new {
                        id = "<id>",
                        info = "<info>",
                    }
                },
            },
            attributes = new {
                key = new {
                    key = new {},
                },
            },
            assignedEntities = new[] {
                new {
                    displayText = "<displayText>",
                    entityStatus = "ACTIVE",
                    relationshipType = "<relationshipType>",
                    relationshipAttributes = new {
                        entityGuid = "<entityGuid>",
                        entityStatus = "ACTIVE",
                        removePropagationsOnEntityDelete = true,
                        validityPeriods = new[] {
                            new {
                                endTime = "<endTime>",
                                startTime = "<startTime>",
                                timeZone = "<timeZone>",
                            }
                        },
                        source = "<source>",
                        sourceDetails = new {
                            key = new {},
                        },
                        attributes = new {
                            key = new {},
                        },
                        typeName = "<typeName>",
                        lastModifiedTS = "<lastModifiedTS>",
                    },
                    relationshipGuid = "<relationshipGuid>",
                    relationshipStatus = "ACTIVE",
                    guid = "<guid>",
                    typeName = "<typeName>",
                    uniqueAttributes = new {
                        key = new {},
                    },
                }
            },
            categories = new[] {
                new {
                    categoryGuid = "<categoryGuid>",
                    description = "<description>",
                    displayText = "<displayText>",
                    relationGuid = "<relationGuid>",
                    status = "DRAFT",
                }
            },
            classifies = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            examples = new[] {
                "<String>"
            },
            isA = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            preferredTerms = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            preferredToTerms = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            replacedBy = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            replacementTerms = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            seeAlso = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            synonyms = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            translatedTerms = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            translationTerms = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            usage = "<usage>",
            validValues = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            validValuesFor = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            classifications = new[] {
                new {
                    entityGuid = "<entityGuid>",
                    entityStatus = "ACTIVE",
                    removePropagationsOnEntityDelete = true,
                    validityPeriods = new[] {
                        new {
                            endTime = "<endTime>",
                            startTime = "<startTime>",
                            timeZone = "<timeZone>",
                        }
                    },
                    source = "<source>",
                    sourceDetails = new {
                        key = new {},
                    },
                    attributes = new {
                        key = new {},
                    },
                    typeName = "<typeName>",
                    lastModifiedTS = "<lastModifiedTS>",
                }
            },
            longDescription = "<longDescription>",
            name = "<name>",
            qualifiedName = "<qualifiedName>",
            shortDescription = "<shortDescription>",
            lastModifiedTS = "<lastModifiedTS>",
            guid = "<guid>",
        },
    },
    categories = new[] {
        new {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
    language = "<language>",
    terms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    usage = "<usage>",
    classifications = new[] {
        new {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new[] {
                new {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    guid = "<guid>",
};

Response response = client.CreateGlossary(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

<details><summary>AtlasGlossaryExtInfo</summary>Schema for <c>AtlasGlossaryExtInfo</c>:
<code>{
  categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. The glossary category information.
  termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. The glossary term information.
  categories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the category header.
      displayText: string, # Optional. The display text.
      parentCategoryGuid: string, # Optional. The GUID of the parent category.
      relationGuid: string, # Optional. The GUID of the relationship.
    }
  ], # Optional. An array of categories.
  language: string, # Optional. The language of the glossary.
  terms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers.
  usage: string, # Optional. The usage of the glossary.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>
</details>

Response Body:

<details><summary>AtlasGlossaryExtInfo</summary>Schema for <c>AtlasGlossaryExtInfo</c>:
<code>{
  categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. The glossary category information.
  termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. The glossary term information.
  categories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the category header.
      displayText: string, # Optional. The display text.
      parentCategoryGuid: string, # Optional. The GUID of the parent category.
      relationGuid: string, # Optional. The GUID of the relationship.
    }
  ], # Optional. An array of categories.
  language: string, # Optional. The language of the glossary.
  terms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers.
  usage: string, # Optional. The usage of the glossary.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>
</details>

</remarks>
    </member>
    <member name="CreateGlossaryCategoriesAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call CreateGlossaryCategoriesAsync with required request content and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new[] {
    new {
        anchor = new {
            displayText = "<displayText>",
            glossaryGuid = "<glossaryGuid>",
            relationGuid = "<relationGuid>",
        },
        childrenCategories = new[] {
            new {
                categoryGuid = "<categoryGuid>",
                description = "<description>",
                displayText = "<displayText>",
                parentCategoryGuid = "<parentCategoryGuid>",
                relationGuid = "<relationGuid>",
            }
        },
        parentCategory = new {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        },
        terms = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        classifications = new[] {
            new {
                entityGuid = "<entityGuid>",
                entityStatus = "ACTIVE",
                removePropagationsOnEntityDelete = true,
                validityPeriods = new[] {
                    new {
                        endTime = "<endTime>",
                        startTime = "<startTime>",
                        timeZone = "<timeZone>",
                    }
                },
                source = "<source>",
                sourceDetails = new {
                    key = new {},
                },
                attributes = new {
                    key = new {},
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            }
        },
        longDescription = "<longDescription>",
        name = "<name>",
        qualifiedName = "<qualifiedName>",
        shortDescription = "<shortDescription>",
        lastModifiedTS = "<lastModifiedTS>",
        guid = "<guid>",
    }
};

Response response = await client.CreateGlossaryCategoriesAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>AtlasGlossaryCategory</c>:
<code>{
  anchor: {
    displayText: string, # Optional. The display text.
    glossaryGuid: string, # Optional. The GUID of the glossary.
    relationGuid: string, # Optional. The GUID of the relationship.
  }, # Optional. The glossary header with basic information.
  childrenCategories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the category header.
      displayText: string, # Optional. The display text.
      parentCategoryGuid: string, # Optional. The GUID of the parent category.
      relationGuid: string, # Optional. The GUID of the relationship.
    }
  ], # Optional. An array of children categories.
  parentCategory: AtlasRelatedCategoryHeader, # Optional. The header of the related category.
  terms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

Response Body:

Schema for <c>AtlasGlossaryCategory</c>:
<code>{
  anchor: {
    displayText: string, # Optional. The display text.
    glossaryGuid: string, # Optional. The GUID of the glossary.
    relationGuid: string, # Optional. The GUID of the relationship.
  }, # Optional. The glossary header with basic information.
  childrenCategories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the category header.
      displayText: string, # Optional. The display text.
      parentCategoryGuid: string, # Optional. The GUID of the parent category.
      relationGuid: string, # Optional. The GUID of the relationship.
    }
  ], # Optional. An array of children categories.
  parentCategory: AtlasRelatedCategoryHeader, # Optional. The header of the related category.
  terms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

</remarks>
    </member>
    <member name="CreateGlossaryCategories(RequestContent,RequestContext)">
<example>
This sample shows how to call CreateGlossaryCategories with required request content and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new[] {
    new {
        anchor = new {
            displayText = "<displayText>",
            glossaryGuid = "<glossaryGuid>",
            relationGuid = "<relationGuid>",
        },
        childrenCategories = new[] {
            new {
                categoryGuid = "<categoryGuid>",
                description = "<description>",
                displayText = "<displayText>",
                parentCategoryGuid = "<parentCategoryGuid>",
                relationGuid = "<relationGuid>",
            }
        },
        parentCategory = new {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        },
        terms = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        classifications = new[] {
            new {
                entityGuid = "<entityGuid>",
                entityStatus = "ACTIVE",
                removePropagationsOnEntityDelete = true,
                validityPeriods = new[] {
                    new {
                        endTime = "<endTime>",
                        startTime = "<startTime>",
                        timeZone = "<timeZone>",
                    }
                },
                source = "<source>",
                sourceDetails = new {
                    key = new {},
                },
                attributes = new {
                    key = new {},
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            }
        },
        longDescription = "<longDescription>",
        name = "<name>",
        qualifiedName = "<qualifiedName>",
        shortDescription = "<shortDescription>",
        lastModifiedTS = "<lastModifiedTS>",
        guid = "<guid>",
    }
};

Response response = client.CreateGlossaryCategories(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>AtlasGlossaryCategory</c>:
<code>{
  anchor: {
    displayText: string, # Optional. The display text.
    glossaryGuid: string, # Optional. The GUID of the glossary.
    relationGuid: string, # Optional. The GUID of the relationship.
  }, # Optional. The glossary header with basic information.
  childrenCategories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the category header.
      displayText: string, # Optional. The display text.
      parentCategoryGuid: string, # Optional. The GUID of the parent category.
      relationGuid: string, # Optional. The GUID of the relationship.
    }
  ], # Optional. An array of children categories.
  parentCategory: AtlasRelatedCategoryHeader, # Optional. The header of the related category.
  terms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

Response Body:

Schema for <c>AtlasGlossaryCategory</c>:
<code>{
  anchor: {
    displayText: string, # Optional. The display text.
    glossaryGuid: string, # Optional. The GUID of the glossary.
    relationGuid: string, # Optional. The GUID of the relationship.
  }, # Optional. The glossary header with basic information.
  childrenCategories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the category header.
      displayText: string, # Optional. The display text.
      parentCategoryGuid: string, # Optional. The GUID of the parent category.
      relationGuid: string, # Optional. The GUID of the relationship.
    }
  ], # Optional. An array of children categories.
  parentCategory: AtlasRelatedCategoryHeader, # Optional. The header of the related category.
  terms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

</remarks>
    </member>
    <member name="CreateGlossaryCategoryAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call CreateGlossaryCategoryAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new {};

Response response = await client.CreateGlossaryCategoryAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateGlossaryCategoryAsync with all request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new {
    anchor = new {
        displayText = "<displayText>",
        glossaryGuid = "<glossaryGuid>",
        relationGuid = "<relationGuid>",
    },
    childrenCategories = new[] {
        new {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
    parentCategory = new {
        categoryGuid = "<categoryGuid>",
        description = "<description>",
        displayText = "<displayText>",
        parentCategoryGuid = "<parentCategoryGuid>",
        relationGuid = "<relationGuid>",
    },
    terms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    classifications = new[] {
        new {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new[] {
                new {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    guid = "<guid>",
};

Response response = await client.CreateGlossaryCategoryAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>AtlasGlossaryCategory</c>:
<code>{
  anchor: {
    displayText: string, # Optional. The display text.
    glossaryGuid: string, # Optional. The GUID of the glossary.
    relationGuid: string, # Optional. The GUID of the relationship.
  }, # Optional. The glossary header with basic information.
  childrenCategories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the category header.
      displayText: string, # Optional. The display text.
      parentCategoryGuid: string, # Optional. The GUID of the parent category.
      relationGuid: string, # Optional. The GUID of the relationship.
    }
  ], # Optional. An array of children categories.
  parentCategory: AtlasRelatedCategoryHeader, # Optional. The header of the related category.
  terms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

Response Body:

Schema for <c>AtlasGlossaryCategory</c>:
<code>{
  anchor: {
    displayText: string, # Optional. The display text.
    glossaryGuid: string, # Optional. The GUID of the glossary.
    relationGuid: string, # Optional. The GUID of the relationship.
  }, # Optional. The glossary header with basic information.
  childrenCategories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the category header.
      displayText: string, # Optional. The display text.
      parentCategoryGuid: string, # Optional. The GUID of the parent category.
      relationGuid: string, # Optional. The GUID of the relationship.
    }
  ], # Optional. An array of children categories.
  parentCategory: AtlasRelatedCategoryHeader, # Optional. The header of the related category.
  terms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

</remarks>
    </member>
    <member name="CreateGlossaryCategory(RequestContent,RequestContext)">
<example>
This sample shows how to call CreateGlossaryCategory and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new {};

Response response = client.CreateGlossaryCategory(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateGlossaryCategory with all request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new {
    anchor = new {
        displayText = "<displayText>",
        glossaryGuid = "<glossaryGuid>",
        relationGuid = "<relationGuid>",
    },
    childrenCategories = new[] {
        new {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
    parentCategory = new {
        categoryGuid = "<categoryGuid>",
        description = "<description>",
        displayText = "<displayText>",
        parentCategoryGuid = "<parentCategoryGuid>",
        relationGuid = "<relationGuid>",
    },
    terms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    classifications = new[] {
        new {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new[] {
                new {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    guid = "<guid>",
};

Response response = client.CreateGlossaryCategory(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>AtlasGlossaryCategory</c>:
<code>{
  anchor: {
    displayText: string, # Optional. The display text.
    glossaryGuid: string, # Optional. The GUID of the glossary.
    relationGuid: string, # Optional. The GUID of the relationship.
  }, # Optional. The glossary header with basic information.
  childrenCategories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the category header.
      displayText: string, # Optional. The display text.
      parentCategoryGuid: string, # Optional. The GUID of the parent category.
      relationGuid: string, # Optional. The GUID of the relationship.
    }
  ], # Optional. An array of children categories.
  parentCategory: AtlasRelatedCategoryHeader, # Optional. The header of the related category.
  terms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

Response Body:

Schema for <c>AtlasGlossaryCategory</c>:
<code>{
  anchor: {
    displayText: string, # Optional. The display text.
    glossaryGuid: string, # Optional. The GUID of the glossary.
    relationGuid: string, # Optional. The GUID of the relationship.
  }, # Optional. The glossary header with basic information.
  childrenCategories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the category header.
      displayText: string, # Optional. The display text.
      parentCategoryGuid: string, # Optional. The GUID of the parent category.
      relationGuid: string, # Optional. The GUID of the relationship.
    }
  ], # Optional. An array of children categories.
  parentCategory: AtlasRelatedCategoryHeader, # Optional. The header of the related category.
  terms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

</remarks>
    </member>
    <member name="GetGlossaryCategoryAsync(String,RequestContext)">
<example>
This sample shows how to call GetGlossaryCategoryAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryCategoryAsync("<categoryGuid>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasGlossaryCategory</c>:
<code>{
  anchor: {
    displayText: string, # Optional. The display text.
    glossaryGuid: string, # Optional. The GUID of the glossary.
    relationGuid: string, # Optional. The GUID of the relationship.
  }, # Optional. The glossary header with basic information.
  childrenCategories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the category header.
      displayText: string, # Optional. The display text.
      parentCategoryGuid: string, # Optional. The GUID of the parent category.
      relationGuid: string, # Optional. The GUID of the relationship.
    }
  ], # Optional. An array of children categories.
  parentCategory: AtlasRelatedCategoryHeader, # Optional. The header of the related category.
  terms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

</remarks>
    </member>
    <member name="GetGlossaryCategory(String,RequestContext)">
<example>
This sample shows how to call GetGlossaryCategory with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaryCategory("<categoryGuid>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasGlossaryCategory</c>:
<code>{
  anchor: {
    displayText: string, # Optional. The display text.
    glossaryGuid: string, # Optional. The GUID of the glossary.
    relationGuid: string, # Optional. The GUID of the relationship.
  }, # Optional. The glossary header with basic information.
  childrenCategories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the category header.
      displayText: string, # Optional. The display text.
      parentCategoryGuid: string, # Optional. The GUID of the parent category.
      relationGuid: string, # Optional. The GUID of the relationship.
    }
  ], # Optional. An array of children categories.
  parentCategory: AtlasRelatedCategoryHeader, # Optional. The header of the related category.
  terms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

</remarks>
    </member>
    <member name="UpdateGlossaryCategoryAsync(String,RequestContent,RequestContext)">
<example>
This sample shows how to call UpdateGlossaryCategoryAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new {};

Response response = await client.UpdateGlossaryCategoryAsync("<categoryGuid>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call UpdateGlossaryCategoryAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new {
    anchor = new {
        displayText = "<displayText>",
        glossaryGuid = "<glossaryGuid>",
        relationGuid = "<relationGuid>",
    },
    childrenCategories = new[] {
        new {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
    parentCategory = new {
        categoryGuid = "<categoryGuid>",
        description = "<description>",
        displayText = "<displayText>",
        parentCategoryGuid = "<parentCategoryGuid>",
        relationGuid = "<relationGuid>",
    },
    terms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    classifications = new[] {
        new {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new[] {
                new {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    guid = "<guid>",
};

Response response = await client.UpdateGlossaryCategoryAsync("<categoryGuid>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>AtlasGlossaryCategory</c>:
<code>{
  anchor: {
    displayText: string, # Optional. The display text.
    glossaryGuid: string, # Optional. The GUID of the glossary.
    relationGuid: string, # Optional. The GUID of the relationship.
  }, # Optional. The glossary header with basic information.
  childrenCategories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the category header.
      displayText: string, # Optional. The display text.
      parentCategoryGuid: string, # Optional. The GUID of the parent category.
      relationGuid: string, # Optional. The GUID of the relationship.
    }
  ], # Optional. An array of children categories.
  parentCategory: AtlasRelatedCategoryHeader, # Optional. The header of the related category.
  terms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

Response Body:

Schema for <c>AtlasGlossaryCategory</c>:
<code>{
  anchor: {
    displayText: string, # Optional. The display text.
    glossaryGuid: string, # Optional. The GUID of the glossary.
    relationGuid: string, # Optional. The GUID of the relationship.
  }, # Optional. The glossary header with basic information.
  childrenCategories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the category header.
      displayText: string, # Optional. The display text.
      parentCategoryGuid: string, # Optional. The GUID of the parent category.
      relationGuid: string, # Optional. The GUID of the relationship.
    }
  ], # Optional. An array of children categories.
  parentCategory: AtlasRelatedCategoryHeader, # Optional. The header of the related category.
  terms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

</remarks>
    </member>
    <member name="UpdateGlossaryCategory(String,RequestContent,RequestContext)">
<example>
This sample shows how to call UpdateGlossaryCategory with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new {};

Response response = client.UpdateGlossaryCategory("<categoryGuid>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call UpdateGlossaryCategory with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new {
    anchor = new {
        displayText = "<displayText>",
        glossaryGuid = "<glossaryGuid>",
        relationGuid = "<relationGuid>",
    },
    childrenCategories = new[] {
        new {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
    parentCategory = new {
        categoryGuid = "<categoryGuid>",
        description = "<description>",
        displayText = "<displayText>",
        parentCategoryGuid = "<parentCategoryGuid>",
        relationGuid = "<relationGuid>",
    },
    terms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    classifications = new[] {
        new {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new[] {
                new {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    guid = "<guid>",
};

Response response = client.UpdateGlossaryCategory("<categoryGuid>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>AtlasGlossaryCategory</c>:
<code>{
  anchor: {
    displayText: string, # Optional. The display text.
    glossaryGuid: string, # Optional. The GUID of the glossary.
    relationGuid: string, # Optional. The GUID of the relationship.
  }, # Optional. The glossary header with basic information.
  childrenCategories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the category header.
      displayText: string, # Optional. The display text.
      parentCategoryGuid: string, # Optional. The GUID of the parent category.
      relationGuid: string, # Optional. The GUID of the relationship.
    }
  ], # Optional. An array of children categories.
  parentCategory: AtlasRelatedCategoryHeader, # Optional. The header of the related category.
  terms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

Response Body:

Schema for <c>AtlasGlossaryCategory</c>:
<code>{
  anchor: {
    displayText: string, # Optional. The display text.
    glossaryGuid: string, # Optional. The GUID of the glossary.
    relationGuid: string, # Optional. The GUID of the relationship.
  }, # Optional. The glossary header with basic information.
  childrenCategories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the category header.
      displayText: string, # Optional. The display text.
      parentCategoryGuid: string, # Optional. The GUID of the parent category.
      relationGuid: string, # Optional. The GUID of the relationship.
    }
  ], # Optional. An array of children categories.
  parentCategory: AtlasRelatedCategoryHeader, # Optional. The header of the related category.
  terms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

</remarks>
    </member>
    <member name="DeleteGlossaryCategoryAsync(String,RequestContext)">
<example>
This sample shows how to call DeleteGlossaryCategoryAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.DeleteGlossaryCategoryAsync("<categoryGuid>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="DeleteGlossaryCategory(String,RequestContext)">
<example>
This sample shows how to call DeleteGlossaryCategory with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.DeleteGlossaryCategory("<categoryGuid>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="PartialUpdateGlossaryCategoryAsync(String,RequestContent,RequestContext)">
<example>
This sample shows how to call PartialUpdateGlossaryCategoryAsync with required parameters and request content and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new {
    key = "<String>",
};

Response response = await client.PartialUpdateGlossaryCategoryAsync("<categoryGuid>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasGlossaryCategory</c>:
<code>{
  anchor: {
    displayText: string, # Optional. The display text.
    glossaryGuid: string, # Optional. The GUID of the glossary.
    relationGuid: string, # Optional. The GUID of the relationship.
  }, # Optional. The glossary header with basic information.
  childrenCategories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the category header.
      displayText: string, # Optional. The display text.
      parentCategoryGuid: string, # Optional. The GUID of the parent category.
      relationGuid: string, # Optional. The GUID of the relationship.
    }
  ], # Optional. An array of children categories.
  parentCategory: AtlasRelatedCategoryHeader, # Optional. The header of the related category.
  terms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

</remarks>
    </member>
    <member name="PartialUpdateGlossaryCategory(String,RequestContent,RequestContext)">
<example>
This sample shows how to call PartialUpdateGlossaryCategory with required parameters and request content and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new {
    key = "<String>",
};

Response response = client.PartialUpdateGlossaryCategory("<categoryGuid>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasGlossaryCategory</c>:
<code>{
  anchor: {
    displayText: string, # Optional. The display text.
    glossaryGuid: string, # Optional. The GUID of the glossary.
    relationGuid: string, # Optional. The GUID of the relationship.
  }, # Optional. The glossary header with basic information.
  childrenCategories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the category header.
      displayText: string, # Optional. The display text.
      parentCategoryGuid: string, # Optional. The GUID of the parent category.
      relationGuid: string, # Optional. The GUID of the relationship.
    }
  ], # Optional. An array of children categories.
  parentCategory: AtlasRelatedCategoryHeader, # Optional. The header of the related category.
  terms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

</remarks>
    </member>
    <member name="GetRelatedCategoriesAsync(String,Int32,Int32,String,RequestContext)">
<example>
This sample shows how to call GetRelatedCategoriesAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetRelatedCategoriesAsync("<categoryGuid>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<test>")[0].ToString());
]]></code>
This sample shows how to call GetRelatedCategoriesAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetRelatedCategoriesAsync("<categoryGuid>", 1234, 1234, "<sort>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("relationGuid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasRelatedCategoryHeader</c>:
<code>{
  categoryGuid: string, # Optional. The GUID of the category.
  description: string, # Optional. The description of the category header.
  displayText: string, # Optional. The display text.
  parentCategoryGuid: string, # Optional. The GUID of the parent category.
  relationGuid: string, # Optional. The GUID of the relationship.
}
</code>

</remarks>
    </member>
    <member name="GetRelatedCategories(String,Int32,Int32,String,RequestContext)">
<example>
This sample shows how to call GetRelatedCategories with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetRelatedCategories("<categoryGuid>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<test>")[0].ToString());
]]></code>
This sample shows how to call GetRelatedCategories with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetRelatedCategories("<categoryGuid>", 1234, 1234, "<sort>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("relationGuid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasRelatedCategoryHeader</c>:
<code>{
  categoryGuid: string, # Optional. The GUID of the category.
  description: string, # Optional. The description of the category header.
  displayText: string, # Optional. The display text.
  parentCategoryGuid: string, # Optional. The GUID of the parent category.
  relationGuid: string, # Optional. The GUID of the relationship.
}
</code>

</remarks>
    </member>
    <member name="GetCategoryTermsAsync(String,Int32,Int32,String,RequestContext)">
<example>
This sample shows how to call GetCategoryTermsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetCategoryTermsAsync("<categoryGuid>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetCategoryTermsAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetCategoryTermsAsync("<categoryGuid>", 1234, 1234, "<sort>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("termGuid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasRelatedTermHeader</c>:
<code>{
  description: string, # Optional. The description of the related term.
  displayText: string, # Optional. The display text.
  expression: string, # Optional. The expression of the term.
  relationGuid: string, # Optional. The GUID of the relationship.
  source: string, # Optional. The source of the term.
  status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
  steward: string, # Optional. The steward of the term.
  termGuid: string, # Optional. The GUID of the term.
}
</code>

</remarks>
    </member>
    <member name="GetCategoryTerms(String,Int32,Int32,String,RequestContext)">
<example>
This sample shows how to call GetCategoryTerms with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetCategoryTerms("<categoryGuid>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetCategoryTerms with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetCategoryTerms("<categoryGuid>", 1234, 1234, "<sort>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("termGuid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasRelatedTermHeader</c>:
<code>{
  description: string, # Optional. The description of the related term.
  displayText: string, # Optional. The display text.
  expression: string, # Optional. The expression of the term.
  relationGuid: string, # Optional. The GUID of the relationship.
  source: string, # Optional. The source of the term.
  status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
  steward: string, # Optional. The steward of the term.
  termGuid: string, # Optional. The GUID of the term.
}
</code>

</remarks>
    </member>
    <member name="CreateGlossaryTermAsync(RequestContent,Boolean,RequestContext)">
<example>
This sample shows how to call CreateGlossaryTermAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new {};

Response response = await client.CreateGlossaryTermAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateGlossaryTermAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new {
    abbreviation = "<abbreviation>",
    templateName = new[] {
        new {}
    },
    anchor = new {
        displayText = "<displayText>",
        glossaryGuid = "<glossaryGuid>",
        relationGuid = "<relationGuid>",
    },
    antonyms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    createTime = 123.45f,
    createdBy = "<createdBy>",
    updateTime = 123.45f,
    updatedBy = "<updatedBy>",
    status = "Draft",
    resources = new[] {
        new {
            displayName = "<displayName>",
            url = "<url>",
        }
    },
    contacts = new {
        key = new[] {
            new {
                id = "<id>",
                info = "<info>",
            }
        },
    },
    attributes = new {
        key = new {
            key = new {},
        },
    },
    assignedEntities = new[] {
        new {
            displayText = "<displayText>",
            entityStatus = "ACTIVE",
            relationshipType = "<relationshipType>",
            relationshipAttributes = new {
                entityGuid = "<entityGuid>",
                entityStatus = "ACTIVE",
                removePropagationsOnEntityDelete = true,
                validityPeriods = new[] {
                    new {
                        endTime = "<endTime>",
                        startTime = "<startTime>",
                        timeZone = "<timeZone>",
                    }
                },
                source = "<source>",
                sourceDetails = new {
                    key = new {},
                },
                attributes = new {
                    key = new {},
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            },
            relationshipGuid = "<relationshipGuid>",
            relationshipStatus = "ACTIVE",
            guid = "<guid>",
            typeName = "<typeName>",
            uniqueAttributes = new {
                key = new {},
            },
        }
    },
    categories = new[] {
        new {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            relationGuid = "<relationGuid>",
            status = "DRAFT",
        }
    },
    classifies = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    examples = new[] {
        "<String>"
    },
    isA = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    preferredTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    preferredToTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    replacedBy = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    replacementTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    seeAlso = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    synonyms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    translatedTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    translationTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    usage = "<usage>",
    validValues = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    validValuesFor = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    classifications = new[] {
        new {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new[] {
                new {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    guid = "<guid>",
};

Response response = await client.CreateGlossaryTermAsync(RequestContent.Create(data), true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>AtlasGlossaryTerm</c>:
<code>{
  abbreviation: string, # Optional. The abbreviation of the term.
  templateName: [AnyObject], # Optional.
  anchor: {
    displayText: string, # Optional. The display text.
    glossaryGuid: string, # Optional. The GUID of the glossary.
    relationGuid: string, # Optional. The GUID of the relationship.
  }, # Optional. The glossary header with basic information.
  antonyms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers as antonyms.
  createTime: number, # Optional. The created time of the record.
  createdBy: string, # Optional. The user who created the record.
  updateTime: number, # Optional. The update time of the record.
  updatedBy: string, # Optional. The user who updated the record.
  status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
  resources: [
    {
      displayName: string, # Optional. Display name for url.
      url: string, # Optional. web url. http or https
    }
  ], # Optional. An array of resource link for term
  contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
  attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
The key of the first layer map is term template name.
  assignedEntities: [
    {
      displayText: string, # Optional. The display text.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      relationshipType: string, # Optional.
      relationshipAttributes: {
        attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        typeName: string, # Optional. The name of the type.
        lastModifiedTS: string, # Optional. ETag for concurrency control.
      }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
      relationshipGuid: string, # Optional. The GUID of the relationship.
      relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
      guid: string, # Optional. The GUID of the object.
      typeName: string, # Optional. The name of the type.
      uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
    }
  ], # Optional. An array of related object IDs.
  categories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the record.
      displayText: string, # Optional. The display text.
      relationGuid: string, # Optional. The GUID of the relationship.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
    }
  ], # Optional. An array of term categorization headers.
  classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
  examples: [string], # Optional. An array of examples.
  isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
  preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
  preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
  replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
  replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
  seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
  synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
  translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
  translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
  usage: string, # Optional. The usage of the term.
  validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
  validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

Response Body:

Schema for <c>AtlasGlossaryTerm</c>:
<code>{
  abbreviation: string, # Optional. The abbreviation of the term.
  templateName: [AnyObject], # Optional.
  anchor: {
    displayText: string, # Optional. The display text.
    glossaryGuid: string, # Optional. The GUID of the glossary.
    relationGuid: string, # Optional. The GUID of the relationship.
  }, # Optional. The glossary header with basic information.
  antonyms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers as antonyms.
  createTime: number, # Optional. The created time of the record.
  createdBy: string, # Optional. The user who created the record.
  updateTime: number, # Optional. The update time of the record.
  updatedBy: string, # Optional. The user who updated the record.
  status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
  resources: [
    {
      displayName: string, # Optional. Display name for url.
      url: string, # Optional. web url. http or https
    }
  ], # Optional. An array of resource link for term
  contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
  attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
The key of the first layer map is term template name.
  assignedEntities: [
    {
      displayText: string, # Optional. The display text.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      relationshipType: string, # Optional.
      relationshipAttributes: {
        attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        typeName: string, # Optional. The name of the type.
        lastModifiedTS: string, # Optional. ETag for concurrency control.
      }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
      relationshipGuid: string, # Optional. The GUID of the relationship.
      relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
      guid: string, # Optional. The GUID of the object.
      typeName: string, # Optional. The name of the type.
      uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
    }
  ], # Optional. An array of related object IDs.
  categories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the record.
      displayText: string, # Optional. The display text.
      relationGuid: string, # Optional. The GUID of the relationship.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
    }
  ], # Optional. An array of term categorization headers.
  classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
  examples: [string], # Optional. An array of examples.
  isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
  preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
  preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
  replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
  replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
  seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
  synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
  translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
  translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
  usage: string, # Optional. The usage of the term.
  validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
  validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

</remarks>
    </member>
    <member name="CreateGlossaryTerm(RequestContent,Boolean,RequestContext)">
<example>
This sample shows how to call CreateGlossaryTerm with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new {};

Response response = client.CreateGlossaryTerm(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateGlossaryTerm with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new {
    abbreviation = "<abbreviation>",
    templateName = new[] {
        new {}
    },
    anchor = new {
        displayText = "<displayText>",
        glossaryGuid = "<glossaryGuid>",
        relationGuid = "<relationGuid>",
    },
    antonyms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    createTime = 123.45f,
    createdBy = "<createdBy>",
    updateTime = 123.45f,
    updatedBy = "<updatedBy>",
    status = "Draft",
    resources = new[] {
        new {
            displayName = "<displayName>",
            url = "<url>",
        }
    },
    contacts = new {
        key = new[] {
            new {
                id = "<id>",
                info = "<info>",
            }
        },
    },
    attributes = new {
        key = new {
            key = new {},
        },
    },
    assignedEntities = new[] {
        new {
            displayText = "<displayText>",
            entityStatus = "ACTIVE",
            relationshipType = "<relationshipType>",
            relationshipAttributes = new {
                entityGuid = "<entityGuid>",
                entityStatus = "ACTIVE",
                removePropagationsOnEntityDelete = true,
                validityPeriods = new[] {
                    new {
                        endTime = "<endTime>",
                        startTime = "<startTime>",
                        timeZone = "<timeZone>",
                    }
                },
                source = "<source>",
                sourceDetails = new {
                    key = new {},
                },
                attributes = new {
                    key = new {},
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            },
            relationshipGuid = "<relationshipGuid>",
            relationshipStatus = "ACTIVE",
            guid = "<guid>",
            typeName = "<typeName>",
            uniqueAttributes = new {
                key = new {},
            },
        }
    },
    categories = new[] {
        new {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            relationGuid = "<relationGuid>",
            status = "DRAFT",
        }
    },
    classifies = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    examples = new[] {
        "<String>"
    },
    isA = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    preferredTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    preferredToTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    replacedBy = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    replacementTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    seeAlso = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    synonyms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    translatedTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    translationTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    usage = "<usage>",
    validValues = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    validValuesFor = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    classifications = new[] {
        new {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new[] {
                new {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    guid = "<guid>",
};

Response response = client.CreateGlossaryTerm(RequestContent.Create(data), true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>AtlasGlossaryTerm</c>:
<code>{
  abbreviation: string, # Optional. The abbreviation of the term.
  templateName: [AnyObject], # Optional.
  anchor: {
    displayText: string, # Optional. The display text.
    glossaryGuid: string, # Optional. The GUID of the glossary.
    relationGuid: string, # Optional. The GUID of the relationship.
  }, # Optional. The glossary header with basic information.
  antonyms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers as antonyms.
  createTime: number, # Optional. The created time of the record.
  createdBy: string, # Optional. The user who created the record.
  updateTime: number, # Optional. The update time of the record.
  updatedBy: string, # Optional. The user who updated the record.
  status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
  resources: [
    {
      displayName: string, # Optional. Display name for url.
      url: string, # Optional. web url. http or https
    }
  ], # Optional. An array of resource link for term
  contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
  attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
The key of the first layer map is term template name.
  assignedEntities: [
    {
      displayText: string, # Optional. The display text.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      relationshipType: string, # Optional.
      relationshipAttributes: {
        attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        typeName: string, # Optional. The name of the type.
        lastModifiedTS: string, # Optional. ETag for concurrency control.
      }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
      relationshipGuid: string, # Optional. The GUID of the relationship.
      relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
      guid: string, # Optional. The GUID of the object.
      typeName: string, # Optional. The name of the type.
      uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
    }
  ], # Optional. An array of related object IDs.
  categories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the record.
      displayText: string, # Optional. The display text.
      relationGuid: string, # Optional. The GUID of the relationship.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
    }
  ], # Optional. An array of term categorization headers.
  classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
  examples: [string], # Optional. An array of examples.
  isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
  preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
  preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
  replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
  replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
  seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
  synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
  translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
  translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
  usage: string, # Optional. The usage of the term.
  validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
  validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

Response Body:

Schema for <c>AtlasGlossaryTerm</c>:
<code>{
  abbreviation: string, # Optional. The abbreviation of the term.
  templateName: [AnyObject], # Optional.
  anchor: {
    displayText: string, # Optional. The display text.
    glossaryGuid: string, # Optional. The GUID of the glossary.
    relationGuid: string, # Optional. The GUID of the relationship.
  }, # Optional. The glossary header with basic information.
  antonyms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers as antonyms.
  createTime: number, # Optional. The created time of the record.
  createdBy: string, # Optional. The user who created the record.
  updateTime: number, # Optional. The update time of the record.
  updatedBy: string, # Optional. The user who updated the record.
  status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
  resources: [
    {
      displayName: string, # Optional. Display name for url.
      url: string, # Optional. web url. http or https
    }
  ], # Optional. An array of resource link for term
  contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
  attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
The key of the first layer map is term template name.
  assignedEntities: [
    {
      displayText: string, # Optional. The display text.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      relationshipType: string, # Optional.
      relationshipAttributes: {
        attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        typeName: string, # Optional. The name of the type.
        lastModifiedTS: string, # Optional. ETag for concurrency control.
      }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
      relationshipGuid: string, # Optional. The GUID of the relationship.
      relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
      guid: string, # Optional. The GUID of the object.
      typeName: string, # Optional. The name of the type.
      uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
    }
  ], # Optional. An array of related object IDs.
  categories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the record.
      displayText: string, # Optional. The display text.
      relationGuid: string, # Optional. The GUID of the relationship.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
    }
  ], # Optional. An array of term categorization headers.
  classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
  examples: [string], # Optional. An array of examples.
  isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
  preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
  preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
  replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
  replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
  seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
  synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
  translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
  translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
  usage: string, # Optional. The usage of the term.
  validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
  validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

</remarks>
    </member>
    <member name="GetGlossaryTermAsync(String,Boolean,IEnumerable,RequestContext)">
<example>
This sample shows how to call GetGlossaryTermAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryTermAsync("<termGuid>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetGlossaryTermAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryTermAsync("<termGuid>", true, new String[]{"<excludeRelationshipTypeList>"});

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasGlossaryTerm</c>:
<code>{
  abbreviation: string, # Optional. The abbreviation of the term.
  templateName: [AnyObject], # Optional.
  anchor: {
    displayText: string, # Optional. The display text.
    glossaryGuid: string, # Optional. The GUID of the glossary.
    relationGuid: string, # Optional. The GUID of the relationship.
  }, # Optional. The glossary header with basic information.
  antonyms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers as antonyms.
  createTime: number, # Optional. The created time of the record.
  createdBy: string, # Optional. The user who created the record.
  updateTime: number, # Optional. The update time of the record.
  updatedBy: string, # Optional. The user who updated the record.
  status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
  resources: [
    {
      displayName: string, # Optional. Display name for url.
      url: string, # Optional. web url. http or https
    }
  ], # Optional. An array of resource link for term
  contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
  attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
The key of the first layer map is term template name.
  assignedEntities: [
    {
      displayText: string, # Optional. The display text.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      relationshipType: string, # Optional.
      relationshipAttributes: {
        attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        typeName: string, # Optional. The name of the type.
        lastModifiedTS: string, # Optional. ETag for concurrency control.
      }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
      relationshipGuid: string, # Optional. The GUID of the relationship.
      relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
      guid: string, # Optional. The GUID of the object.
      typeName: string, # Optional. The name of the type.
      uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
    }
  ], # Optional. An array of related object IDs.
  categories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the record.
      displayText: string, # Optional. The display text.
      relationGuid: string, # Optional. The GUID of the relationship.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
    }
  ], # Optional. An array of term categorization headers.
  classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
  examples: [string], # Optional. An array of examples.
  isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
  preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
  preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
  replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
  replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
  seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
  synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
  translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
  translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
  usage: string, # Optional. The usage of the term.
  validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
  validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

</remarks>
    </member>
    <member name="GetGlossaryTerm(String,Boolean,IEnumerable,RequestContext)">
<example>
This sample shows how to call GetGlossaryTerm with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaryTerm("<termGuid>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetGlossaryTerm with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaryTerm("<termGuid>", true, new String[]{"<excludeRelationshipTypeList>"});

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasGlossaryTerm</c>:
<code>{
  abbreviation: string, # Optional. The abbreviation of the term.
  templateName: [AnyObject], # Optional.
  anchor: {
    displayText: string, # Optional. The display text.
    glossaryGuid: string, # Optional. The GUID of the glossary.
    relationGuid: string, # Optional. The GUID of the relationship.
  }, # Optional. The glossary header with basic information.
  antonyms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers as antonyms.
  createTime: number, # Optional. The created time of the record.
  createdBy: string, # Optional. The user who created the record.
  updateTime: number, # Optional. The update time of the record.
  updatedBy: string, # Optional. The user who updated the record.
  status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
  resources: [
    {
      displayName: string, # Optional. Display name for url.
      url: string, # Optional. web url. http or https
    }
  ], # Optional. An array of resource link for term
  contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
  attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
The key of the first layer map is term template name.
  assignedEntities: [
    {
      displayText: string, # Optional. The display text.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      relationshipType: string, # Optional.
      relationshipAttributes: {
        attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        typeName: string, # Optional. The name of the type.
        lastModifiedTS: string, # Optional. ETag for concurrency control.
      }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
      relationshipGuid: string, # Optional. The GUID of the relationship.
      relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
      guid: string, # Optional. The GUID of the object.
      typeName: string, # Optional. The name of the type.
      uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
    }
  ], # Optional. An array of related object IDs.
  categories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the record.
      displayText: string, # Optional. The display text.
      relationGuid: string, # Optional. The GUID of the relationship.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
    }
  ], # Optional. An array of term categorization headers.
  classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
  examples: [string], # Optional. An array of examples.
  isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
  preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
  preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
  replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
  replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
  seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
  synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
  translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
  translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
  usage: string, # Optional. The usage of the term.
  validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
  validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

</remarks>
    </member>
    <member name="UpdateGlossaryTermAsync(String,RequestContent,Boolean,RequestContext)">
<example>
This sample shows how to call UpdateGlossaryTermAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new {};

Response response = await client.UpdateGlossaryTermAsync("<termGuid>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call UpdateGlossaryTermAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new {
    abbreviation = "<abbreviation>",
    templateName = new[] {
        new {}
    },
    anchor = new {
        displayText = "<displayText>",
        glossaryGuid = "<glossaryGuid>",
        relationGuid = "<relationGuid>",
    },
    antonyms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    createTime = 123.45f,
    createdBy = "<createdBy>",
    updateTime = 123.45f,
    updatedBy = "<updatedBy>",
    status = "Draft",
    resources = new[] {
        new {
            displayName = "<displayName>",
            url = "<url>",
        }
    },
    contacts = new {
        key = new[] {
            new {
                id = "<id>",
                info = "<info>",
            }
        },
    },
    attributes = new {
        key = new {
            key = new {},
        },
    },
    assignedEntities = new[] {
        new {
            displayText = "<displayText>",
            entityStatus = "ACTIVE",
            relationshipType = "<relationshipType>",
            relationshipAttributes = new {
                entityGuid = "<entityGuid>",
                entityStatus = "ACTIVE",
                removePropagationsOnEntityDelete = true,
                validityPeriods = new[] {
                    new {
                        endTime = "<endTime>",
                        startTime = "<startTime>",
                        timeZone = "<timeZone>",
                    }
                },
                source = "<source>",
                sourceDetails = new {
                    key = new {},
                },
                attributes = new {
                    key = new {},
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            },
            relationshipGuid = "<relationshipGuid>",
            relationshipStatus = "ACTIVE",
            guid = "<guid>",
            typeName = "<typeName>",
            uniqueAttributes = new {
                key = new {},
            },
        }
    },
    categories = new[] {
        new {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            relationGuid = "<relationGuid>",
            status = "DRAFT",
        }
    },
    classifies = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    examples = new[] {
        "<String>"
    },
    isA = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    preferredTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    preferredToTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    replacedBy = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    replacementTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    seeAlso = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    synonyms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    translatedTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    translationTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    usage = "<usage>",
    validValues = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    validValuesFor = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    classifications = new[] {
        new {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new[] {
                new {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    guid = "<guid>",
};

Response response = await client.UpdateGlossaryTermAsync("<termGuid>", RequestContent.Create(data), true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>AtlasGlossaryTerm</c>:
<code>{
  abbreviation: string, # Optional. The abbreviation of the term.
  templateName: [AnyObject], # Optional.
  anchor: {
    displayText: string, # Optional. The display text.
    glossaryGuid: string, # Optional. The GUID of the glossary.
    relationGuid: string, # Optional. The GUID of the relationship.
  }, # Optional. The glossary header with basic information.
  antonyms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers as antonyms.
  createTime: number, # Optional. The created time of the record.
  createdBy: string, # Optional. The user who created the record.
  updateTime: number, # Optional. The update time of the record.
  updatedBy: string, # Optional. The user who updated the record.
  status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
  resources: [
    {
      displayName: string, # Optional. Display name for url.
      url: string, # Optional. web url. http or https
    }
  ], # Optional. An array of resource link for term
  contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
  attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
The key of the first layer map is term template name.
  assignedEntities: [
    {
      displayText: string, # Optional. The display text.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      relationshipType: string, # Optional.
      relationshipAttributes: {
        attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        typeName: string, # Optional. The name of the type.
        lastModifiedTS: string, # Optional. ETag for concurrency control.
      }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
      relationshipGuid: string, # Optional. The GUID of the relationship.
      relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
      guid: string, # Optional. The GUID of the object.
      typeName: string, # Optional. The name of the type.
      uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
    }
  ], # Optional. An array of related object IDs.
  categories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the record.
      displayText: string, # Optional. The display text.
      relationGuid: string, # Optional. The GUID of the relationship.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
    }
  ], # Optional. An array of term categorization headers.
  classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
  examples: [string], # Optional. An array of examples.
  isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
  preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
  preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
  replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
  replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
  seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
  synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
  translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
  translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
  usage: string, # Optional. The usage of the term.
  validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
  validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

Response Body:

Schema for <c>AtlasGlossaryTerm</c>:
<code>{
  abbreviation: string, # Optional. The abbreviation of the term.
  templateName: [AnyObject], # Optional.
  anchor: {
    displayText: string, # Optional. The display text.
    glossaryGuid: string, # Optional. The GUID of the glossary.
    relationGuid: string, # Optional. The GUID of the relationship.
  }, # Optional. The glossary header with basic information.
  antonyms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers as antonyms.
  createTime: number, # Optional. The created time of the record.
  createdBy: string, # Optional. The user who created the record.
  updateTime: number, # Optional. The update time of the record.
  updatedBy: string, # Optional. The user who updated the record.
  status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
  resources: [
    {
      displayName: string, # Optional. Display name for url.
      url: string, # Optional. web url. http or https
    }
  ], # Optional. An array of resource link for term
  contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
  attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
The key of the first layer map is term template name.
  assignedEntities: [
    {
      displayText: string, # Optional. The display text.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      relationshipType: string, # Optional.
      relationshipAttributes: {
        attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        typeName: string, # Optional. The name of the type.
        lastModifiedTS: string, # Optional. ETag for concurrency control.
      }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
      relationshipGuid: string, # Optional. The GUID of the relationship.
      relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
      guid: string, # Optional. The GUID of the object.
      typeName: string, # Optional. The name of the type.
      uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
    }
  ], # Optional. An array of related object IDs.
  categories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the record.
      displayText: string, # Optional. The display text.
      relationGuid: string, # Optional. The GUID of the relationship.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
    }
  ], # Optional. An array of term categorization headers.
  classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
  examples: [string], # Optional. An array of examples.
  isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
  preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
  preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
  replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
  replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
  seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
  synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
  translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
  translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
  usage: string, # Optional. The usage of the term.
  validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
  validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

</remarks>
    </member>
    <member name="UpdateGlossaryTerm(String,RequestContent,Boolean,RequestContext)">
<example>
This sample shows how to call UpdateGlossaryTerm with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new {};

Response response = client.UpdateGlossaryTerm("<termGuid>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call UpdateGlossaryTerm with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new {
    abbreviation = "<abbreviation>",
    templateName = new[] {
        new {}
    },
    anchor = new {
        displayText = "<displayText>",
        glossaryGuid = "<glossaryGuid>",
        relationGuid = "<relationGuid>",
    },
    antonyms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    createTime = 123.45f,
    createdBy = "<createdBy>",
    updateTime = 123.45f,
    updatedBy = "<updatedBy>",
    status = "Draft",
    resources = new[] {
        new {
            displayName = "<displayName>",
            url = "<url>",
        }
    },
    contacts = new {
        key = new[] {
            new {
                id = "<id>",
                info = "<info>",
            }
        },
    },
    attributes = new {
        key = new {
            key = new {},
        },
    },
    assignedEntities = new[] {
        new {
            displayText = "<displayText>",
            entityStatus = "ACTIVE",
            relationshipType = "<relationshipType>",
            relationshipAttributes = new {
                entityGuid = "<entityGuid>",
                entityStatus = "ACTIVE",
                removePropagationsOnEntityDelete = true,
                validityPeriods = new[] {
                    new {
                        endTime = "<endTime>",
                        startTime = "<startTime>",
                        timeZone = "<timeZone>",
                    }
                },
                source = "<source>",
                sourceDetails = new {
                    key = new {},
                },
                attributes = new {
                    key = new {},
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            },
            relationshipGuid = "<relationshipGuid>",
            relationshipStatus = "ACTIVE",
            guid = "<guid>",
            typeName = "<typeName>",
            uniqueAttributes = new {
                key = new {},
            },
        }
    },
    categories = new[] {
        new {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            relationGuid = "<relationGuid>",
            status = "DRAFT",
        }
    },
    classifies = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    examples = new[] {
        "<String>"
    },
    isA = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    preferredTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    preferredToTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    replacedBy = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    replacementTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    seeAlso = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    synonyms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    translatedTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    translationTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    usage = "<usage>",
    validValues = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    validValuesFor = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    classifications = new[] {
        new {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new[] {
                new {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    guid = "<guid>",
};

Response response = client.UpdateGlossaryTerm("<termGuid>", RequestContent.Create(data), true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>AtlasGlossaryTerm</c>:
<code>{
  abbreviation: string, # Optional. The abbreviation of the term.
  templateName: [AnyObject], # Optional.
  anchor: {
    displayText: string, # Optional. The display text.
    glossaryGuid: string, # Optional. The GUID of the glossary.
    relationGuid: string, # Optional. The GUID of the relationship.
  }, # Optional. The glossary header with basic information.
  antonyms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers as antonyms.
  createTime: number, # Optional. The created time of the record.
  createdBy: string, # Optional. The user who created the record.
  updateTime: number, # Optional. The update time of the record.
  updatedBy: string, # Optional. The user who updated the record.
  status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
  resources: [
    {
      displayName: string, # Optional. Display name for url.
      url: string, # Optional. web url. http or https
    }
  ], # Optional. An array of resource link for term
  contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
  attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
The key of the first layer map is term template name.
  assignedEntities: [
    {
      displayText: string, # Optional. The display text.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      relationshipType: string, # Optional.
      relationshipAttributes: {
        attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        typeName: string, # Optional. The name of the type.
        lastModifiedTS: string, # Optional. ETag for concurrency control.
      }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
      relationshipGuid: string, # Optional. The GUID of the relationship.
      relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
      guid: string, # Optional. The GUID of the object.
      typeName: string, # Optional. The name of the type.
      uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
    }
  ], # Optional. An array of related object IDs.
  categories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the record.
      displayText: string, # Optional. The display text.
      relationGuid: string, # Optional. The GUID of the relationship.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
    }
  ], # Optional. An array of term categorization headers.
  classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
  examples: [string], # Optional. An array of examples.
  isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
  preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
  preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
  replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
  replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
  seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
  synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
  translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
  translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
  usage: string, # Optional. The usage of the term.
  validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
  validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

Response Body:

Schema for <c>AtlasGlossaryTerm</c>:
<code>{
  abbreviation: string, # Optional. The abbreviation of the term.
  templateName: [AnyObject], # Optional.
  anchor: {
    displayText: string, # Optional. The display text.
    glossaryGuid: string, # Optional. The GUID of the glossary.
    relationGuid: string, # Optional. The GUID of the relationship.
  }, # Optional. The glossary header with basic information.
  antonyms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers as antonyms.
  createTime: number, # Optional. The created time of the record.
  createdBy: string, # Optional. The user who created the record.
  updateTime: number, # Optional. The update time of the record.
  updatedBy: string, # Optional. The user who updated the record.
  status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
  resources: [
    {
      displayName: string, # Optional. Display name for url.
      url: string, # Optional. web url. http or https
    }
  ], # Optional. An array of resource link for term
  contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
  attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
The key of the first layer map is term template name.
  assignedEntities: [
    {
      displayText: string, # Optional. The display text.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      relationshipType: string, # Optional.
      relationshipAttributes: {
        attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        typeName: string, # Optional. The name of the type.
        lastModifiedTS: string, # Optional. ETag for concurrency control.
      }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
      relationshipGuid: string, # Optional. The GUID of the relationship.
      relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
      guid: string, # Optional. The GUID of the object.
      typeName: string, # Optional. The name of the type.
      uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
    }
  ], # Optional. An array of related object IDs.
  categories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the record.
      displayText: string, # Optional. The display text.
      relationGuid: string, # Optional. The GUID of the relationship.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
    }
  ], # Optional. An array of term categorization headers.
  classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
  examples: [string], # Optional. An array of examples.
  isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
  preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
  preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
  replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
  replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
  seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
  synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
  translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
  translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
  usage: string, # Optional. The usage of the term.
  validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
  validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

</remarks>
    </member>
    <member name="DeleteGlossaryTermAsync(String,RequestContext)">
<example>
This sample shows how to call DeleteGlossaryTermAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.DeleteGlossaryTermAsync("<termGuid>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="DeleteGlossaryTerm(String,RequestContext)">
<example>
This sample shows how to call DeleteGlossaryTerm with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.DeleteGlossaryTerm("<termGuid>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="PartialUpdateGlossaryTermAsync(String,RequestContent,Boolean,RequestContext)">
<example>
This sample shows how to call PartialUpdateGlossaryTermAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new {
    key = "<String>",
};

Response response = await client.PartialUpdateGlossaryTermAsync("<termGuid>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PartialUpdateGlossaryTermAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new {
    key = "<String>",
};

Response response = await client.PartialUpdateGlossaryTermAsync("<termGuid>", RequestContent.Create(data), true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasGlossaryTerm</c>:
<code>{
  abbreviation: string, # Optional. The abbreviation of the term.
  templateName: [AnyObject], # Optional.
  anchor: {
    displayText: string, # Optional. The display text.
    glossaryGuid: string, # Optional. The GUID of the glossary.
    relationGuid: string, # Optional. The GUID of the relationship.
  }, # Optional. The glossary header with basic information.
  antonyms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers as antonyms.
  createTime: number, # Optional. The created time of the record.
  createdBy: string, # Optional. The user who created the record.
  updateTime: number, # Optional. The update time of the record.
  updatedBy: string, # Optional. The user who updated the record.
  status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
  resources: [
    {
      displayName: string, # Optional. Display name for url.
      url: string, # Optional. web url. http or https
    }
  ], # Optional. An array of resource link for term
  contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
  attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
The key of the first layer map is term template name.
  assignedEntities: [
    {
      displayText: string, # Optional. The display text.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      relationshipType: string, # Optional.
      relationshipAttributes: {
        attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        typeName: string, # Optional. The name of the type.
        lastModifiedTS: string, # Optional. ETag for concurrency control.
      }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
      relationshipGuid: string, # Optional. The GUID of the relationship.
      relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
      guid: string, # Optional. The GUID of the object.
      typeName: string, # Optional. The name of the type.
      uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
    }
  ], # Optional. An array of related object IDs.
  categories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the record.
      displayText: string, # Optional. The display text.
      relationGuid: string, # Optional. The GUID of the relationship.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
    }
  ], # Optional. An array of term categorization headers.
  classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
  examples: [string], # Optional. An array of examples.
  isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
  preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
  preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
  replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
  replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
  seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
  synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
  translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
  translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
  usage: string, # Optional. The usage of the term.
  validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
  validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

</remarks>
    </member>
    <member name="PartialUpdateGlossaryTerm(String,RequestContent,Boolean,RequestContext)">
<example>
This sample shows how to call PartialUpdateGlossaryTerm with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new {
    key = "<String>",
};

Response response = client.PartialUpdateGlossaryTerm("<termGuid>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PartialUpdateGlossaryTerm with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new {
    key = "<String>",
};

Response response = client.PartialUpdateGlossaryTerm("<termGuid>", RequestContent.Create(data), true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasGlossaryTerm</c>:
<code>{
  abbreviation: string, # Optional. The abbreviation of the term.
  templateName: [AnyObject], # Optional.
  anchor: {
    displayText: string, # Optional. The display text.
    glossaryGuid: string, # Optional. The GUID of the glossary.
    relationGuid: string, # Optional. The GUID of the relationship.
  }, # Optional. The glossary header with basic information.
  antonyms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers as antonyms.
  createTime: number, # Optional. The created time of the record.
  createdBy: string, # Optional. The user who created the record.
  updateTime: number, # Optional. The update time of the record.
  updatedBy: string, # Optional. The user who updated the record.
  status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
  resources: [
    {
      displayName: string, # Optional. Display name for url.
      url: string, # Optional. web url. http or https
    }
  ], # Optional. An array of resource link for term
  contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
  attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
The key of the first layer map is term template name.
  assignedEntities: [
    {
      displayText: string, # Optional. The display text.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      relationshipType: string, # Optional.
      relationshipAttributes: {
        attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        typeName: string, # Optional. The name of the type.
        lastModifiedTS: string, # Optional. ETag for concurrency control.
      }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
      relationshipGuid: string, # Optional. The GUID of the relationship.
      relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
      guid: string, # Optional. The GUID of the object.
      typeName: string, # Optional. The name of the type.
      uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
    }
  ], # Optional. An array of related object IDs.
  categories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the record.
      displayText: string, # Optional. The display text.
      relationGuid: string, # Optional. The GUID of the relationship.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
    }
  ], # Optional. An array of term categorization headers.
  classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
  examples: [string], # Optional. An array of examples.
  isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
  preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
  preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
  replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
  replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
  seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
  synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
  translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
  translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
  usage: string, # Optional. The usage of the term.
  validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
  validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

</remarks>
    </member>
    <member name="CreateGlossaryTermsAsync(RequestContent,Boolean,RequestContext)">
<example>
This sample shows how to call CreateGlossaryTermsAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new[] {
    new {}
};

Response response = await client.CreateGlossaryTermsAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call CreateGlossaryTermsAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new[] {
    new {
        abbreviation = "<abbreviation>",
        templateName = new[] {
            new {}
        },
        anchor = new {
            displayText = "<displayText>",
            glossaryGuid = "<glossaryGuid>",
            relationGuid = "<relationGuid>",
        },
        antonyms = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        createTime = 123.45f,
        createdBy = "<createdBy>",
        updateTime = 123.45f,
        updatedBy = "<updatedBy>",
        status = "Draft",
        resources = new[] {
            new {
                displayName = "<displayName>",
                url = "<url>",
            }
        },
        contacts = new {
            key = new[] {
                new {
                    id = "<id>",
                    info = "<info>",
                }
            },
        },
        attributes = new {
            key = new {
                key = new {},
            },
        },
        assignedEntities = new[] {
            new {
                displayText = "<displayText>",
                entityStatus = "ACTIVE",
                relationshipType = "<relationshipType>",
                relationshipAttributes = new {
                    entityGuid = "<entityGuid>",
                    entityStatus = "ACTIVE",
                    removePropagationsOnEntityDelete = true,
                    validityPeriods = new[] {
                        new {
                            endTime = "<endTime>",
                            startTime = "<startTime>",
                            timeZone = "<timeZone>",
                        }
                    },
                    source = "<source>",
                    sourceDetails = new {
                        key = new {},
                    },
                    attributes = new {
                        key = new {},
                    },
                    typeName = "<typeName>",
                    lastModifiedTS = "<lastModifiedTS>",
                },
                relationshipGuid = "<relationshipGuid>",
                relationshipStatus = "ACTIVE",
                guid = "<guid>",
                typeName = "<typeName>",
                uniqueAttributes = new {
                    key = new {},
                },
            }
        },
        categories = new[] {
            new {
                categoryGuid = "<categoryGuid>",
                description = "<description>",
                displayText = "<displayText>",
                relationGuid = "<relationGuid>",
                status = "DRAFT",
            }
        },
        classifies = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        examples = new[] {
            "<String>"
        },
        isA = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        preferredTerms = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        preferredToTerms = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        replacedBy = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        replacementTerms = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        seeAlso = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        synonyms = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        translatedTerms = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        translationTerms = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        usage = "<usage>",
        validValues = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        validValuesFor = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        classifications = new[] {
            new {
                entityGuid = "<entityGuid>",
                entityStatus = "ACTIVE",
                removePropagationsOnEntityDelete = true,
                validityPeriods = new[] {
                    new {
                        endTime = "<endTime>",
                        startTime = "<startTime>",
                        timeZone = "<timeZone>",
                    }
                },
                source = "<source>",
                sourceDetails = new {
                    key = new {},
                },
                attributes = new {
                    key = new {},
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            }
        },
        longDescription = "<longDescription>",
        name = "<name>",
        qualifiedName = "<qualifiedName>",
        shortDescription = "<shortDescription>",
        lastModifiedTS = "<lastModifiedTS>",
        guid = "<guid>",
    }
};

Response response = await client.CreateGlossaryTermsAsync(RequestContent.Create(data), true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("abbreviation").ToString());
Console.WriteLine(result[0].GetProperty("templateName")[0].ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("createTime").ToString());
Console.WriteLine(result[0].GetProperty("createdBy").ToString());
Console.WriteLine(result[0].GetProperty("updateTime").ToString());
Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
Console.WriteLine(result[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
Console.WriteLine(result[0].GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("examples")[0].ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("usage").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>AtlasGlossaryTerm</c>:
<code>{
  abbreviation: string, # Optional. The abbreviation of the term.
  templateName: [AnyObject], # Optional.
  anchor: {
    displayText: string, # Optional. The display text.
    glossaryGuid: string, # Optional. The GUID of the glossary.
    relationGuid: string, # Optional. The GUID of the relationship.
  }, # Optional. The glossary header with basic information.
  antonyms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers as antonyms.
  createTime: number, # Optional. The created time of the record.
  createdBy: string, # Optional. The user who created the record.
  updateTime: number, # Optional. The update time of the record.
  updatedBy: string, # Optional. The user who updated the record.
  status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
  resources: [
    {
      displayName: string, # Optional. Display name for url.
      url: string, # Optional. web url. http or https
    }
  ], # Optional. An array of resource link for term
  contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
  attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
The key of the first layer map is term template name.
  assignedEntities: [
    {
      displayText: string, # Optional. The display text.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      relationshipType: string, # Optional.
      relationshipAttributes: {
        attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        typeName: string, # Optional. The name of the type.
        lastModifiedTS: string, # Optional. ETag for concurrency control.
      }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
      relationshipGuid: string, # Optional. The GUID of the relationship.
      relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
      guid: string, # Optional. The GUID of the object.
      typeName: string, # Optional. The name of the type.
      uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
    }
  ], # Optional. An array of related object IDs.
  categories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the record.
      displayText: string, # Optional. The display text.
      relationGuid: string, # Optional. The GUID of the relationship.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
    }
  ], # Optional. An array of term categorization headers.
  classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
  examples: [string], # Optional. An array of examples.
  isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
  preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
  preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
  replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
  replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
  seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
  synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
  translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
  translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
  usage: string, # Optional. The usage of the term.
  validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
  validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

Response Body:

Schema for <c>AtlasGlossaryTerm</c>:
<code>{
  abbreviation: string, # Optional. The abbreviation of the term.
  templateName: [AnyObject], # Optional.
  anchor: {
    displayText: string, # Optional. The display text.
    glossaryGuid: string, # Optional. The GUID of the glossary.
    relationGuid: string, # Optional. The GUID of the relationship.
  }, # Optional. The glossary header with basic information.
  antonyms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers as antonyms.
  createTime: number, # Optional. The created time of the record.
  createdBy: string, # Optional. The user who created the record.
  updateTime: number, # Optional. The update time of the record.
  updatedBy: string, # Optional. The user who updated the record.
  status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
  resources: [
    {
      displayName: string, # Optional. Display name for url.
      url: string, # Optional. web url. http or https
    }
  ], # Optional. An array of resource link for term
  contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
  attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
The key of the first layer map is term template name.
  assignedEntities: [
    {
      displayText: string, # Optional. The display text.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      relationshipType: string, # Optional.
      relationshipAttributes: {
        attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        typeName: string, # Optional. The name of the type.
        lastModifiedTS: string, # Optional. ETag for concurrency control.
      }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
      relationshipGuid: string, # Optional. The GUID of the relationship.
      relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
      guid: string, # Optional. The GUID of the object.
      typeName: string, # Optional. The name of the type.
      uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
    }
  ], # Optional. An array of related object IDs.
  categories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the record.
      displayText: string, # Optional. The display text.
      relationGuid: string, # Optional. The GUID of the relationship.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
    }
  ], # Optional. An array of term categorization headers.
  classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
  examples: [string], # Optional. An array of examples.
  isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
  preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
  preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
  replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
  replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
  seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
  synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
  translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
  translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
  usage: string, # Optional. The usage of the term.
  validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
  validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

</remarks>
    </member>
    <member name="CreateGlossaryTerms(RequestContent,Boolean,RequestContext)">
<example>
This sample shows how to call CreateGlossaryTerms with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new[] {
    new {}
};

Response response = client.CreateGlossaryTerms(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call CreateGlossaryTerms with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new[] {
    new {
        abbreviation = "<abbreviation>",
        templateName = new[] {
            new {}
        },
        anchor = new {
            displayText = "<displayText>",
            glossaryGuid = "<glossaryGuid>",
            relationGuid = "<relationGuid>",
        },
        antonyms = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        createTime = 123.45f,
        createdBy = "<createdBy>",
        updateTime = 123.45f,
        updatedBy = "<updatedBy>",
        status = "Draft",
        resources = new[] {
            new {
                displayName = "<displayName>",
                url = "<url>",
            }
        },
        contacts = new {
            key = new[] {
                new {
                    id = "<id>",
                    info = "<info>",
                }
            },
        },
        attributes = new {
            key = new {
                key = new {},
            },
        },
        assignedEntities = new[] {
            new {
                displayText = "<displayText>",
                entityStatus = "ACTIVE",
                relationshipType = "<relationshipType>",
                relationshipAttributes = new {
                    entityGuid = "<entityGuid>",
                    entityStatus = "ACTIVE",
                    removePropagationsOnEntityDelete = true,
                    validityPeriods = new[] {
                        new {
                            endTime = "<endTime>",
                            startTime = "<startTime>",
                            timeZone = "<timeZone>",
                        }
                    },
                    source = "<source>",
                    sourceDetails = new {
                        key = new {},
                    },
                    attributes = new {
                        key = new {},
                    },
                    typeName = "<typeName>",
                    lastModifiedTS = "<lastModifiedTS>",
                },
                relationshipGuid = "<relationshipGuid>",
                relationshipStatus = "ACTIVE",
                guid = "<guid>",
                typeName = "<typeName>",
                uniqueAttributes = new {
                    key = new {},
                },
            }
        },
        categories = new[] {
            new {
                categoryGuid = "<categoryGuid>",
                description = "<description>",
                displayText = "<displayText>",
                relationGuid = "<relationGuid>",
                status = "DRAFT",
            }
        },
        classifies = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        examples = new[] {
            "<String>"
        },
        isA = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        preferredTerms = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        preferredToTerms = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        replacedBy = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        replacementTerms = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        seeAlso = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        synonyms = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        translatedTerms = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        translationTerms = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        usage = "<usage>",
        validValues = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        validValuesFor = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        classifications = new[] {
            new {
                entityGuid = "<entityGuid>",
                entityStatus = "ACTIVE",
                removePropagationsOnEntityDelete = true,
                validityPeriods = new[] {
                    new {
                        endTime = "<endTime>",
                        startTime = "<startTime>",
                        timeZone = "<timeZone>",
                    }
                },
                source = "<source>",
                sourceDetails = new {
                    key = new {},
                },
                attributes = new {
                    key = new {},
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            }
        },
        longDescription = "<longDescription>",
        name = "<name>",
        qualifiedName = "<qualifiedName>",
        shortDescription = "<shortDescription>",
        lastModifiedTS = "<lastModifiedTS>",
        guid = "<guid>",
    }
};

Response response = client.CreateGlossaryTerms(RequestContent.Create(data), true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("abbreviation").ToString());
Console.WriteLine(result[0].GetProperty("templateName")[0].ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("createTime").ToString());
Console.WriteLine(result[0].GetProperty("createdBy").ToString());
Console.WriteLine(result[0].GetProperty("updateTime").ToString());
Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
Console.WriteLine(result[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
Console.WriteLine(result[0].GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("examples")[0].ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("usage").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>AtlasGlossaryTerm</c>:
<code>{
  abbreviation: string, # Optional. The abbreviation of the term.
  templateName: [AnyObject], # Optional.
  anchor: {
    displayText: string, # Optional. The display text.
    glossaryGuid: string, # Optional. The GUID of the glossary.
    relationGuid: string, # Optional. The GUID of the relationship.
  }, # Optional. The glossary header with basic information.
  antonyms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers as antonyms.
  createTime: number, # Optional. The created time of the record.
  createdBy: string, # Optional. The user who created the record.
  updateTime: number, # Optional. The update time of the record.
  updatedBy: string, # Optional. The user who updated the record.
  status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
  resources: [
    {
      displayName: string, # Optional. Display name for url.
      url: string, # Optional. web url. http or https
    }
  ], # Optional. An array of resource link for term
  contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
  attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
The key of the first layer map is term template name.
  assignedEntities: [
    {
      displayText: string, # Optional. The display text.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      relationshipType: string, # Optional.
      relationshipAttributes: {
        attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        typeName: string, # Optional. The name of the type.
        lastModifiedTS: string, # Optional. ETag for concurrency control.
      }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
      relationshipGuid: string, # Optional. The GUID of the relationship.
      relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
      guid: string, # Optional. The GUID of the object.
      typeName: string, # Optional. The name of the type.
      uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
    }
  ], # Optional. An array of related object IDs.
  categories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the record.
      displayText: string, # Optional. The display text.
      relationGuid: string, # Optional. The GUID of the relationship.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
    }
  ], # Optional. An array of term categorization headers.
  classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
  examples: [string], # Optional. An array of examples.
  isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
  preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
  preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
  replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
  replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
  seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
  synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
  translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
  translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
  usage: string, # Optional. The usage of the term.
  validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
  validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

Response Body:

Schema for <c>AtlasGlossaryTerm</c>:
<code>{
  abbreviation: string, # Optional. The abbreviation of the term.
  templateName: [AnyObject], # Optional.
  anchor: {
    displayText: string, # Optional. The display text.
    glossaryGuid: string, # Optional. The GUID of the glossary.
    relationGuid: string, # Optional. The GUID of the relationship.
  }, # Optional. The glossary header with basic information.
  antonyms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers as antonyms.
  createTime: number, # Optional. The created time of the record.
  createdBy: string, # Optional. The user who created the record.
  updateTime: number, # Optional. The update time of the record.
  updatedBy: string, # Optional. The user who updated the record.
  status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
  resources: [
    {
      displayName: string, # Optional. Display name for url.
      url: string, # Optional. web url. http or https
    }
  ], # Optional. An array of resource link for term
  contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
  attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
The key of the first layer map is term template name.
  assignedEntities: [
    {
      displayText: string, # Optional. The display text.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      relationshipType: string, # Optional.
      relationshipAttributes: {
        attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        typeName: string, # Optional. The name of the type.
        lastModifiedTS: string, # Optional. ETag for concurrency control.
      }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
      relationshipGuid: string, # Optional. The GUID of the relationship.
      relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
      guid: string, # Optional. The GUID of the object.
      typeName: string, # Optional. The name of the type.
      uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
    }
  ], # Optional. An array of related object IDs.
  categories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the record.
      displayText: string, # Optional. The display text.
      relationGuid: string, # Optional. The GUID of the relationship.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
    }
  ], # Optional. An array of term categorization headers.
  classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
  examples: [string], # Optional. An array of examples.
  isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
  preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
  preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
  replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
  replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
  seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
  synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
  translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
  translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
  usage: string, # Optional. The usage of the term.
  validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
  validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

</remarks>
    </member>
    <member name="GetEntitiesAssignedWithTermAsync(String,Int32,Int32,String,RequestContext)">
<example>
This sample shows how to call GetEntitiesAssignedWithTermAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetEntitiesAssignedWithTermAsync("<termGuid>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetEntitiesAssignedWithTermAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetEntitiesAssignedWithTermAsync("<termGuid>", 1234, 1234, "<sort>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasRelatedObjectId</c>:
<code>{
  displayText: string, # Optional. The display text.
  entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
  relationshipType: string, # Optional.
  relationshipAttributes: {
    attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
    typeName: string, # Optional. The name of the type.
    lastModifiedTS: string, # Optional. ETag for concurrency control.
  }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
  relationshipGuid: string, # Optional. The GUID of the relationship.
  relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
  guid: string, # Optional. The GUID of the object.
  typeName: string, # Optional. The name of the type.
  uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
}
</code>

</remarks>
    </member>
    <member name="GetEntitiesAssignedWithTerm(String,Int32,Int32,String,RequestContext)">
<example>
This sample shows how to call GetEntitiesAssignedWithTerm with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetEntitiesAssignedWithTerm("<termGuid>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetEntitiesAssignedWithTerm with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetEntitiesAssignedWithTerm("<termGuid>", 1234, 1234, "<sort>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasRelatedObjectId</c>:
<code>{
  displayText: string, # Optional. The display text.
  entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
  relationshipType: string, # Optional.
  relationshipAttributes: {
    attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
    typeName: string, # Optional. The name of the type.
    lastModifiedTS: string, # Optional. ETag for concurrency control.
  }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
  relationshipGuid: string, # Optional. The GUID of the relationship.
  relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
  guid: string, # Optional. The GUID of the object.
  typeName: string, # Optional. The name of the type.
  uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
}
</code>

</remarks>
    </member>
    <member name="AssignTermToEntitiesAsync(String,RequestContent,RequestContext)">
<example>
This sample shows how to call AssignTermToEntitiesAsync with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new[] {
    new {
        displayText = "<displayText>",
        entityStatus = "ACTIVE",
        relationshipType = "<relationshipType>",
        relationshipAttributes = new {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new[] {
                new {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        },
        relationshipGuid = "<relationshipGuid>",
        relationshipStatus = "ACTIVE",
        guid = "<guid>",
        typeName = "<typeName>",
        uniqueAttributes = new {
            key = new {},
        },
    }
};

Response response = await client.AssignTermToEntitiesAsync("<termGuid>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>AtlasRelatedObjectId</c>:
<code>{
  displayText: string, # Optional. The display text.
  entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
  relationshipType: string, # Optional.
  relationshipAttributes: {
    attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
    typeName: string, # Optional. The name of the type.
    lastModifiedTS: string, # Optional. ETag for concurrency control.
  }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
  relationshipGuid: string, # Optional. The GUID of the relationship.
  relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
  guid: string, # Optional. The GUID of the object.
  typeName: string, # Optional. The name of the type.
  uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
}
</code>

</remarks>
    </member>
    <member name="AssignTermToEntities(String,RequestContent,RequestContext)">
<example>
This sample shows how to call AssignTermToEntities with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new[] {
    new {
        displayText = "<displayText>",
        entityStatus = "ACTIVE",
        relationshipType = "<relationshipType>",
        relationshipAttributes = new {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new[] {
                new {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        },
        relationshipGuid = "<relationshipGuid>",
        relationshipStatus = "ACTIVE",
        guid = "<guid>",
        typeName = "<typeName>",
        uniqueAttributes = new {
            key = new {},
        },
    }
};

Response response = client.AssignTermToEntities("<termGuid>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>AtlasRelatedObjectId</c>:
<code>{
  displayText: string, # Optional. The display text.
  entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
  relationshipType: string, # Optional.
  relationshipAttributes: {
    attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
    typeName: string, # Optional. The name of the type.
    lastModifiedTS: string, # Optional. ETag for concurrency control.
  }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
  relationshipGuid: string, # Optional. The GUID of the relationship.
  relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
  guid: string, # Optional. The GUID of the object.
  typeName: string, # Optional. The name of the type.
  uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
}
</code>

</remarks>
    </member>
    <member name="RemoveTermAssignmentFromEntitiesAsync(String,RequestContent,RequestContext)">
<example>
This sample shows how to call RemoveTermAssignmentFromEntitiesAsync with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new[] {
    new {
        displayText = "<displayText>",
        entityStatus = "ACTIVE",
        relationshipType = "<relationshipType>",
        relationshipAttributes = new {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new[] {
                new {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        },
        relationshipGuid = "<relationshipGuid>",
        relationshipStatus = "ACTIVE",
        guid = "<guid>",
        typeName = "<typeName>",
        uniqueAttributes = new {
            key = new {},
        },
    }
};

Response response = await client.RemoveTermAssignmentFromEntitiesAsync("<termGuid>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>AtlasRelatedObjectId</c>:
<code>{
  displayText: string, # Optional. The display text.
  entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
  relationshipType: string, # Optional.
  relationshipAttributes: {
    attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
    typeName: string, # Optional. The name of the type.
    lastModifiedTS: string, # Optional. ETag for concurrency control.
  }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
  relationshipGuid: string, # Optional. The GUID of the relationship.
  relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
  guid: string, # Optional. The GUID of the object.
  typeName: string, # Optional. The name of the type.
  uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
}
</code>

</remarks>
    </member>
    <member name="RemoveTermAssignmentFromEntities(String,RequestContent,RequestContext)">
<example>
This sample shows how to call RemoveTermAssignmentFromEntities with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new[] {
    new {
        displayText = "<displayText>",
        entityStatus = "ACTIVE",
        relationshipType = "<relationshipType>",
        relationshipAttributes = new {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new[] {
                new {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        },
        relationshipGuid = "<relationshipGuid>",
        relationshipStatus = "ACTIVE",
        guid = "<guid>",
        typeName = "<typeName>",
        uniqueAttributes = new {
            key = new {},
        },
    }
};

Response response = client.RemoveTermAssignmentFromEntities("<termGuid>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>AtlasRelatedObjectId</c>:
<code>{
  displayText: string, # Optional. The display text.
  entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
  relationshipType: string, # Optional.
  relationshipAttributes: {
    attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
    typeName: string, # Optional. The name of the type.
    lastModifiedTS: string, # Optional. ETag for concurrency control.
  }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
  relationshipGuid: string, # Optional. The GUID of the relationship.
  relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
  guid: string, # Optional. The GUID of the object.
  typeName: string, # Optional. The name of the type.
  uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
}
</code>

</remarks>
    </member>
    <member name="DeleteTermAssignmentFromEntitiesAsync(String,RequestContent,RequestContext)">
<example>
This sample shows how to call DeleteTermAssignmentFromEntitiesAsync with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new[] {
    new {
        displayText = "<displayText>",
        entityStatus = "ACTIVE",
        relationshipType = "<relationshipType>",
        relationshipAttributes = new {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new[] {
                new {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        },
        relationshipGuid = "<relationshipGuid>",
        relationshipStatus = "ACTIVE",
        guid = "<guid>",
        typeName = "<typeName>",
        uniqueAttributes = new {
            key = new {},
        },
    }
};

Response response = await client.DeleteTermAssignmentFromEntitiesAsync("<termGuid>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>AtlasRelatedObjectId</c>:
<code>{
  displayText: string, # Optional. The display text.
  entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
  relationshipType: string, # Optional.
  relationshipAttributes: {
    attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
    typeName: string, # Optional. The name of the type.
    lastModifiedTS: string, # Optional. ETag for concurrency control.
  }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
  relationshipGuid: string, # Optional. The GUID of the relationship.
  relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
  guid: string, # Optional. The GUID of the object.
  typeName: string, # Optional. The name of the type.
  uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
}
</code>

</remarks>
    </member>
    <member name="DeleteTermAssignmentFromEntities(String,RequestContent,RequestContext)">
<example>
This sample shows how to call DeleteTermAssignmentFromEntities with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new[] {
    new {
        displayText = "<displayText>",
        entityStatus = "ACTIVE",
        relationshipType = "<relationshipType>",
        relationshipAttributes = new {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new[] {
                new {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        },
        relationshipGuid = "<relationshipGuid>",
        relationshipStatus = "ACTIVE",
        guid = "<guid>",
        typeName = "<typeName>",
        uniqueAttributes = new {
            key = new {},
        },
    }
};

Response response = client.DeleteTermAssignmentFromEntities("<termGuid>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>AtlasRelatedObjectId</c>:
<code>{
  displayText: string, # Optional. The display text.
  entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
  relationshipType: string, # Optional.
  relationshipAttributes: {
    attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
    typeName: string, # Optional. The name of the type.
    lastModifiedTS: string, # Optional. ETag for concurrency control.
  }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
  relationshipGuid: string, # Optional. The GUID of the relationship.
  relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
  guid: string, # Optional. The GUID of the object.
  typeName: string, # Optional. The name of the type.
  uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
}
</code>

</remarks>
    </member>
    <member name="GetRelatedTermsAsync(String,Int32,Int32,String,RequestContext)">
<example>
This sample shows how to call GetRelatedTermsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetRelatedTermsAsync("<termGuid>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<test>")[0].ToString());
]]></code>
This sample shows how to call GetRelatedTermsAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetRelatedTermsAsync("<termGuid>", 1234, 1234, "<sort>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("termGuid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasRelatedTermHeader</c>:
<code>{
  description: string, # Optional. The description of the related term.
  displayText: string, # Optional. The display text.
  expression: string, # Optional. The expression of the term.
  relationGuid: string, # Optional. The GUID of the relationship.
  source: string, # Optional. The source of the term.
  status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
  steward: string, # Optional. The steward of the term.
  termGuid: string, # Optional. The GUID of the term.
}
</code>

</remarks>
    </member>
    <member name="GetRelatedTerms(String,Int32,Int32,String,RequestContext)">
<example>
This sample shows how to call GetRelatedTerms with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetRelatedTerms("<termGuid>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<test>")[0].ToString());
]]></code>
This sample shows how to call GetRelatedTerms with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetRelatedTerms("<termGuid>", 1234, 1234, "<sort>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("termGuid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasRelatedTermHeader</c>:
<code>{
  description: string, # Optional. The description of the related term.
  displayText: string, # Optional. The display text.
  expression: string, # Optional. The expression of the term.
  relationGuid: string, # Optional. The GUID of the relationship.
  source: string, # Optional. The source of the term.
  status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
  steward: string, # Optional. The steward of the term.
  termGuid: string, # Optional. The GUID of the term.
}
</code>

</remarks>
    </member>
    <member name="GetGlossaryAsync(String,RequestContext)">
<example>
This sample shows how to call GetGlossaryAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryAsync("<glossaryGuid>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

<details><summary>AtlasGlossaryExtInfo</summary>Schema for <c>AtlasGlossaryExtInfo</c>:
<code>{
  categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. The glossary category information.
  termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. The glossary term information.
  categories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the category header.
      displayText: string, # Optional. The display text.
      parentCategoryGuid: string, # Optional. The GUID of the parent category.
      relationGuid: string, # Optional. The GUID of the relationship.
    }
  ], # Optional. An array of categories.
  language: string, # Optional. The language of the glossary.
  terms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers.
  usage: string, # Optional. The usage of the glossary.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>
</details>

</remarks>
    </member>
    <member name="GetGlossary(String,RequestContext)">
<example>
This sample shows how to call GetGlossary with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossary("<glossaryGuid>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

<details><summary>AtlasGlossaryExtInfo</summary>Schema for <c>AtlasGlossaryExtInfo</c>:
<code>{
  categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. The glossary category information.
  termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. The glossary term information.
  categories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the category header.
      displayText: string, # Optional. The display text.
      parentCategoryGuid: string, # Optional. The GUID of the parent category.
      relationGuid: string, # Optional. The GUID of the relationship.
    }
  ], # Optional. An array of categories.
  language: string, # Optional. The language of the glossary.
  terms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers.
  usage: string, # Optional. The usage of the glossary.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>
</details>

</remarks>
    </member>
    <member name="UpdateGlossaryAsync(String,RequestContent,RequestContext)">
<example>
This sample shows how to call UpdateGlossaryAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new {};

Response response = await client.UpdateGlossaryAsync("<glossaryGuid>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call UpdateGlossaryAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new {
    categoryInfo = new {
        key = new {
            anchor = new {
                displayText = "<displayText>",
                glossaryGuid = "<glossaryGuid>",
                relationGuid = "<relationGuid>",
            },
            childrenCategories = new[] {
                new {
                    categoryGuid = "<categoryGuid>",
                    description = "<description>",
                    displayText = "<displayText>",
                    parentCategoryGuid = "<parentCategoryGuid>",
                    relationGuid = "<relationGuid>",
                }
            },
            parentCategory = new {
                categoryGuid = "<categoryGuid>",
                description = "<description>",
                displayText = "<displayText>",
                parentCategoryGuid = "<parentCategoryGuid>",
                relationGuid = "<relationGuid>",
            },
            terms = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            classifications = new[] {
                new {
                    entityGuid = "<entityGuid>",
                    entityStatus = "ACTIVE",
                    removePropagationsOnEntityDelete = true,
                    validityPeriods = new[] {
                        new {
                            endTime = "<endTime>",
                            startTime = "<startTime>",
                            timeZone = "<timeZone>",
                        }
                    },
                    source = "<source>",
                    sourceDetails = new {
                        key = new {},
                    },
                    attributes = new {
                        key = new {},
                    },
                    typeName = "<typeName>",
                    lastModifiedTS = "<lastModifiedTS>",
                }
            },
            longDescription = "<longDescription>",
            name = "<name>",
            qualifiedName = "<qualifiedName>",
            shortDescription = "<shortDescription>",
            lastModifiedTS = "<lastModifiedTS>",
            guid = "<guid>",
        },
    },
    termInfo = new {
        key = new {
            abbreviation = "<abbreviation>",
            templateName = new[] {
                new {}
            },
            anchor = new {
                displayText = "<displayText>",
                glossaryGuid = "<glossaryGuid>",
                relationGuid = "<relationGuid>",
            },
            antonyms = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            createTime = 123.45f,
            createdBy = "<createdBy>",
            updateTime = 123.45f,
            updatedBy = "<updatedBy>",
            status = "Draft",
            resources = new[] {
                new {
                    displayName = "<displayName>",
                    url = "<url>",
                }
            },
            contacts = new {
                key = new[] {
                    new {
                        id = "<id>",
                        info = "<info>",
                    }
                },
            },
            attributes = new {
                key = new {
                    key = new {},
                },
            },
            assignedEntities = new[] {
                new {
                    displayText = "<displayText>",
                    entityStatus = "ACTIVE",
                    relationshipType = "<relationshipType>",
                    relationshipAttributes = new {
                        entityGuid = "<entityGuid>",
                        entityStatus = "ACTIVE",
                        removePropagationsOnEntityDelete = true,
                        validityPeriods = new[] {
                            new {
                                endTime = "<endTime>",
                                startTime = "<startTime>",
                                timeZone = "<timeZone>",
                            }
                        },
                        source = "<source>",
                        sourceDetails = new {
                            key = new {},
                        },
                        attributes = new {
                            key = new {},
                        },
                        typeName = "<typeName>",
                        lastModifiedTS = "<lastModifiedTS>",
                    },
                    relationshipGuid = "<relationshipGuid>",
                    relationshipStatus = "ACTIVE",
                    guid = "<guid>",
                    typeName = "<typeName>",
                    uniqueAttributes = new {
                        key = new {},
                    },
                }
            },
            categories = new[] {
                new {
                    categoryGuid = "<categoryGuid>",
                    description = "<description>",
                    displayText = "<displayText>",
                    relationGuid = "<relationGuid>",
                    status = "DRAFT",
                }
            },
            classifies = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            examples = new[] {
                "<String>"
            },
            isA = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            preferredTerms = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            preferredToTerms = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            replacedBy = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            replacementTerms = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            seeAlso = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            synonyms = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            translatedTerms = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            translationTerms = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            usage = "<usage>",
            validValues = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            validValuesFor = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            classifications = new[] {
                new {
                    entityGuid = "<entityGuid>",
                    entityStatus = "ACTIVE",
                    removePropagationsOnEntityDelete = true,
                    validityPeriods = new[] {
                        new {
                            endTime = "<endTime>",
                            startTime = "<startTime>",
                            timeZone = "<timeZone>",
                        }
                    },
                    source = "<source>",
                    sourceDetails = new {
                        key = new {},
                    },
                    attributes = new {
                        key = new {},
                    },
                    typeName = "<typeName>",
                    lastModifiedTS = "<lastModifiedTS>",
                }
            },
            longDescription = "<longDescription>",
            name = "<name>",
            qualifiedName = "<qualifiedName>",
            shortDescription = "<shortDescription>",
            lastModifiedTS = "<lastModifiedTS>",
            guid = "<guid>",
        },
    },
    categories = new[] {
        new {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
    language = "<language>",
    terms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    usage = "<usage>",
    classifications = new[] {
        new {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new[] {
                new {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    guid = "<guid>",
};

Response response = await client.UpdateGlossaryAsync("<glossaryGuid>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

<details><summary>AtlasGlossaryExtInfo</summary>Schema for <c>AtlasGlossaryExtInfo</c>:
<code>{
  categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. The glossary category information.
  termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. The glossary term information.
  categories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the category header.
      displayText: string, # Optional. The display text.
      parentCategoryGuid: string, # Optional. The GUID of the parent category.
      relationGuid: string, # Optional. The GUID of the relationship.
    }
  ], # Optional. An array of categories.
  language: string, # Optional. The language of the glossary.
  terms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers.
  usage: string, # Optional. The usage of the glossary.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>
</details>

Response Body:

<details><summary>AtlasGlossaryExtInfo</summary>Schema for <c>AtlasGlossaryExtInfo</c>:
<code>{
  categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. The glossary category information.
  termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. The glossary term information.
  categories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the category header.
      displayText: string, # Optional. The display text.
      parentCategoryGuid: string, # Optional. The GUID of the parent category.
      relationGuid: string, # Optional. The GUID of the relationship.
    }
  ], # Optional. An array of categories.
  language: string, # Optional. The language of the glossary.
  terms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers.
  usage: string, # Optional. The usage of the glossary.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>
</details>

</remarks>
    </member>
    <member name="UpdateGlossary(String,RequestContent,RequestContext)">
<example>
This sample shows how to call UpdateGlossary with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new {};

Response response = client.UpdateGlossary("<glossaryGuid>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call UpdateGlossary with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new {
    categoryInfo = new {
        key = new {
            anchor = new {
                displayText = "<displayText>",
                glossaryGuid = "<glossaryGuid>",
                relationGuid = "<relationGuid>",
            },
            childrenCategories = new[] {
                new {
                    categoryGuid = "<categoryGuid>",
                    description = "<description>",
                    displayText = "<displayText>",
                    parentCategoryGuid = "<parentCategoryGuid>",
                    relationGuid = "<relationGuid>",
                }
            },
            parentCategory = new {
                categoryGuid = "<categoryGuid>",
                description = "<description>",
                displayText = "<displayText>",
                parentCategoryGuid = "<parentCategoryGuid>",
                relationGuid = "<relationGuid>",
            },
            terms = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            classifications = new[] {
                new {
                    entityGuid = "<entityGuid>",
                    entityStatus = "ACTIVE",
                    removePropagationsOnEntityDelete = true,
                    validityPeriods = new[] {
                        new {
                            endTime = "<endTime>",
                            startTime = "<startTime>",
                            timeZone = "<timeZone>",
                        }
                    },
                    source = "<source>",
                    sourceDetails = new {
                        key = new {},
                    },
                    attributes = new {
                        key = new {},
                    },
                    typeName = "<typeName>",
                    lastModifiedTS = "<lastModifiedTS>",
                }
            },
            longDescription = "<longDescription>",
            name = "<name>",
            qualifiedName = "<qualifiedName>",
            shortDescription = "<shortDescription>",
            lastModifiedTS = "<lastModifiedTS>",
            guid = "<guid>",
        },
    },
    termInfo = new {
        key = new {
            abbreviation = "<abbreviation>",
            templateName = new[] {
                new {}
            },
            anchor = new {
                displayText = "<displayText>",
                glossaryGuid = "<glossaryGuid>",
                relationGuid = "<relationGuid>",
            },
            antonyms = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            createTime = 123.45f,
            createdBy = "<createdBy>",
            updateTime = 123.45f,
            updatedBy = "<updatedBy>",
            status = "Draft",
            resources = new[] {
                new {
                    displayName = "<displayName>",
                    url = "<url>",
                }
            },
            contacts = new {
                key = new[] {
                    new {
                        id = "<id>",
                        info = "<info>",
                    }
                },
            },
            attributes = new {
                key = new {
                    key = new {},
                },
            },
            assignedEntities = new[] {
                new {
                    displayText = "<displayText>",
                    entityStatus = "ACTIVE",
                    relationshipType = "<relationshipType>",
                    relationshipAttributes = new {
                        entityGuid = "<entityGuid>",
                        entityStatus = "ACTIVE",
                        removePropagationsOnEntityDelete = true,
                        validityPeriods = new[] {
                            new {
                                endTime = "<endTime>",
                                startTime = "<startTime>",
                                timeZone = "<timeZone>",
                            }
                        },
                        source = "<source>",
                        sourceDetails = new {
                            key = new {},
                        },
                        attributes = new {
                            key = new {},
                        },
                        typeName = "<typeName>",
                        lastModifiedTS = "<lastModifiedTS>",
                    },
                    relationshipGuid = "<relationshipGuid>",
                    relationshipStatus = "ACTIVE",
                    guid = "<guid>",
                    typeName = "<typeName>",
                    uniqueAttributes = new {
                        key = new {},
                    },
                }
            },
            categories = new[] {
                new {
                    categoryGuid = "<categoryGuid>",
                    description = "<description>",
                    displayText = "<displayText>",
                    relationGuid = "<relationGuid>",
                    status = "DRAFT",
                }
            },
            classifies = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            examples = new[] {
                "<String>"
            },
            isA = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            preferredTerms = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            preferredToTerms = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            replacedBy = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            replacementTerms = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            seeAlso = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            synonyms = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            translatedTerms = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            translationTerms = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            usage = "<usage>",
            validValues = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            validValuesFor = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            classifications = new[] {
                new {
                    entityGuid = "<entityGuid>",
                    entityStatus = "ACTIVE",
                    removePropagationsOnEntityDelete = true,
                    validityPeriods = new[] {
                        new {
                            endTime = "<endTime>",
                            startTime = "<startTime>",
                            timeZone = "<timeZone>",
                        }
                    },
                    source = "<source>",
                    sourceDetails = new {
                        key = new {},
                    },
                    attributes = new {
                        key = new {},
                    },
                    typeName = "<typeName>",
                    lastModifiedTS = "<lastModifiedTS>",
                }
            },
            longDescription = "<longDescription>",
            name = "<name>",
            qualifiedName = "<qualifiedName>",
            shortDescription = "<shortDescription>",
            lastModifiedTS = "<lastModifiedTS>",
            guid = "<guid>",
        },
    },
    categories = new[] {
        new {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
    language = "<language>",
    terms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    usage = "<usage>",
    classifications = new[] {
        new {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new[] {
                new {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    guid = "<guid>",
};

Response response = client.UpdateGlossary("<glossaryGuid>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

<details><summary>AtlasGlossaryExtInfo</summary>Schema for <c>AtlasGlossaryExtInfo</c>:
<code>{
  categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. The glossary category information.
  termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. The glossary term information.
  categories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the category header.
      displayText: string, # Optional. The display text.
      parentCategoryGuid: string, # Optional. The GUID of the parent category.
      relationGuid: string, # Optional. The GUID of the relationship.
    }
  ], # Optional. An array of categories.
  language: string, # Optional. The language of the glossary.
  terms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers.
  usage: string, # Optional. The usage of the glossary.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>
</details>

Response Body:

<details><summary>AtlasGlossaryExtInfo</summary>Schema for <c>AtlasGlossaryExtInfo</c>:
<code>{
  categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. The glossary category information.
  termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. The glossary term information.
  categories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the category header.
      displayText: string, # Optional. The display text.
      parentCategoryGuid: string, # Optional. The GUID of the parent category.
      relationGuid: string, # Optional. The GUID of the relationship.
    }
  ], # Optional. An array of categories.
  language: string, # Optional. The language of the glossary.
  terms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers.
  usage: string, # Optional. The usage of the glossary.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>
</details>

</remarks>
    </member>
    <member name="DeleteGlossaryAsync(String,RequestContext)">
<example>
This sample shows how to call DeleteGlossaryAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.DeleteGlossaryAsync("<glossaryGuid>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="DeleteGlossary(String,RequestContext)">
<example>
This sample shows how to call DeleteGlossary with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.DeleteGlossary("<glossaryGuid>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="GetGlossaryCategoriesAsync(String,Int32,Int32,String,RequestContext)">
<example>
This sample shows how to call GetGlossaryCategoriesAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryCategoriesAsync("<glossaryGuid>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetGlossaryCategoriesAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryCategoriesAsync("<glossaryGuid>", 1234, 1234, "<sort>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasGlossaryCategory</c>:
<code>{
  anchor: {
    displayText: string, # Optional. The display text.
    glossaryGuid: string, # Optional. The GUID of the glossary.
    relationGuid: string, # Optional. The GUID of the relationship.
  }, # Optional. The glossary header with basic information.
  childrenCategories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the category header.
      displayText: string, # Optional. The display text.
      parentCategoryGuid: string, # Optional. The GUID of the parent category.
      relationGuid: string, # Optional. The GUID of the relationship.
    }
  ], # Optional. An array of children categories.
  parentCategory: AtlasRelatedCategoryHeader, # Optional. The header of the related category.
  terms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

</remarks>
    </member>
    <member name="GetGlossaryCategories(String,Int32,Int32,String,RequestContext)">
<example>
This sample shows how to call GetGlossaryCategories with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaryCategories("<glossaryGuid>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetGlossaryCategories with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaryCategories("<glossaryGuid>", 1234, 1234, "<sort>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasGlossaryCategory</c>:
<code>{
  anchor: {
    displayText: string, # Optional. The display text.
    glossaryGuid: string, # Optional. The GUID of the glossary.
    relationGuid: string, # Optional. The GUID of the relationship.
  }, # Optional. The glossary header with basic information.
  childrenCategories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the category header.
      displayText: string, # Optional. The display text.
      parentCategoryGuid: string, # Optional. The GUID of the parent category.
      relationGuid: string, # Optional. The GUID of the relationship.
    }
  ], # Optional. An array of children categories.
  parentCategory: AtlasRelatedCategoryHeader, # Optional. The header of the related category.
  terms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

</remarks>
    </member>
    <member name="GetGlossaryCategoriesHeadersAsync(String,Int32,Int32,String,RequestContext)">
<example>
This sample shows how to call GetGlossaryCategoriesHeadersAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryCategoriesHeadersAsync("<glossaryGuid>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetGlossaryCategoriesHeadersAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryCategoriesHeadersAsync("<glossaryGuid>", 1234, 1234, "<sort>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasRelatedCategoryHeader</c>:
<code>{
  categoryGuid: string, # Optional. The GUID of the category.
  description: string, # Optional. The description of the category header.
  displayText: string, # Optional. The display text.
  parentCategoryGuid: string, # Optional. The GUID of the parent category.
  relationGuid: string, # Optional. The GUID of the relationship.
}
</code>

</remarks>
    </member>
    <member name="GetGlossaryCategoriesHeaders(String,Int32,Int32,String,RequestContext)">
<example>
This sample shows how to call GetGlossaryCategoriesHeaders with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaryCategoriesHeaders("<glossaryGuid>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetGlossaryCategoriesHeaders with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaryCategoriesHeaders("<glossaryGuid>", 1234, 1234, "<sort>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasRelatedCategoryHeader</c>:
<code>{
  categoryGuid: string, # Optional. The GUID of the category.
  description: string, # Optional. The description of the category header.
  displayText: string, # Optional. The display text.
  parentCategoryGuid: string, # Optional. The GUID of the parent category.
  relationGuid: string, # Optional. The GUID of the relationship.
}
</code>

</remarks>
    </member>
    <member name="GetDetailedGlossaryAsync(String,Boolean,RequestContext)">
<example>
This sample shows how to call GetDetailedGlossaryAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetDetailedGlossaryAsync("<glossaryGuid>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetDetailedGlossaryAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetDetailedGlossaryAsync("<glossaryGuid>", true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasGlossaryExtInfo</c>:
<code>{
  categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. The glossary category information.
  termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. The glossary term information.
  categories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the category header.
      displayText: string, # Optional. The display text.
      parentCategoryGuid: string, # Optional. The GUID of the parent category.
      relationGuid: string, # Optional. The GUID of the relationship.
    }
  ], # Optional. An array of categories.
  language: string, # Optional. The language of the glossary.
  terms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers.
  usage: string, # Optional. The usage of the glossary.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

</remarks>
    </member>
    <member name="GetDetailedGlossary(String,Boolean,RequestContext)">
<example>
This sample shows how to call GetDetailedGlossary with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetDetailedGlossary("<glossaryGuid>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetDetailedGlossary with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetDetailedGlossary("<glossaryGuid>", true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasGlossaryExtInfo</c>:
<code>{
  categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. The glossary category information.
  termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. The glossary term information.
  categories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the category header.
      displayText: string, # Optional. The display text.
      parentCategoryGuid: string, # Optional. The GUID of the parent category.
      relationGuid: string, # Optional. The GUID of the relationship.
    }
  ], # Optional. An array of categories.
  language: string, # Optional. The language of the glossary.
  terms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers.
  usage: string, # Optional. The usage of the glossary.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

</remarks>
    </member>
    <member name="PartialUpdateGlossaryAsync(String,RequestContent,Boolean,RequestContext)">
<example>
This sample shows how to call PartialUpdateGlossaryAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new {
    key = "<String>",
};

Response response = await client.PartialUpdateGlossaryAsync("<glossaryGuid>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PartialUpdateGlossaryAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new {
    key = "<String>",
};

Response response = await client.PartialUpdateGlossaryAsync("<glossaryGuid>", RequestContent.Create(data), true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

<details><summary>AtlasGlossaryExtInfo</summary>Schema for <c>AtlasGlossaryExtInfo</c>:
<code>{
  categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. The glossary category information.
  termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. The glossary term information.
  categories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the category header.
      displayText: string, # Optional. The display text.
      parentCategoryGuid: string, # Optional. The GUID of the parent category.
      relationGuid: string, # Optional. The GUID of the relationship.
    }
  ], # Optional. An array of categories.
  language: string, # Optional. The language of the glossary.
  terms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers.
  usage: string, # Optional. The usage of the glossary.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>
</details>

</remarks>
    </member>
    <member name="PartialUpdateGlossary(String,RequestContent,Boolean,RequestContext)">
<example>
This sample shows how to call PartialUpdateGlossary with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new {
    key = "<String>",
};

Response response = client.PartialUpdateGlossary("<glossaryGuid>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PartialUpdateGlossary with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new {
    key = "<String>",
};

Response response = client.PartialUpdateGlossary("<glossaryGuid>", RequestContent.Create(data), true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

<details><summary>AtlasGlossaryExtInfo</summary>Schema for <c>AtlasGlossaryExtInfo</c>:
<code>{
  categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. The glossary category information.
  termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. The glossary term information.
  categories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the category header.
      displayText: string, # Optional. The display text.
      parentCategoryGuid: string, # Optional. The GUID of the parent category.
      relationGuid: string, # Optional. The GUID of the relationship.
    }
  ], # Optional. An array of categories.
  language: string, # Optional. The language of the glossary.
  terms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers.
  usage: string, # Optional. The usage of the glossary.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>
</details>

</remarks>
    </member>
    <member name="GetGlossaryTermsAsync(String,Boolean,Int32,Int32,String,RequestContext)">
<example>
This sample shows how to call GetGlossaryTermsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryTermsAsync("<glossaryGuid>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetGlossaryTermsAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryTermsAsync("<glossaryGuid>", true, 1234, 1234, "<sort>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("abbreviation").ToString());
Console.WriteLine(result[0].GetProperty("templateName")[0].ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("createTime").ToString());
Console.WriteLine(result[0].GetProperty("createdBy").ToString());
Console.WriteLine(result[0].GetProperty("updateTime").ToString());
Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
Console.WriteLine(result[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
Console.WriteLine(result[0].GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("examples")[0].ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("usage").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasGlossaryTerm</c>:
<code>{
  abbreviation: string, # Optional. The abbreviation of the term.
  templateName: [AnyObject], # Optional.
  anchor: {
    displayText: string, # Optional. The display text.
    glossaryGuid: string, # Optional. The GUID of the glossary.
    relationGuid: string, # Optional. The GUID of the relationship.
  }, # Optional. The glossary header with basic information.
  antonyms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers as antonyms.
  createTime: number, # Optional. The created time of the record.
  createdBy: string, # Optional. The user who created the record.
  updateTime: number, # Optional. The update time of the record.
  updatedBy: string, # Optional. The user who updated the record.
  status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
  resources: [
    {
      displayName: string, # Optional. Display name for url.
      url: string, # Optional. web url. http or https
    }
  ], # Optional. An array of resource link for term
  contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
  attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
The key of the first layer map is term template name.
  assignedEntities: [
    {
      displayText: string, # Optional. The display text.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      relationshipType: string, # Optional.
      relationshipAttributes: {
        attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        typeName: string, # Optional. The name of the type.
        lastModifiedTS: string, # Optional. ETag for concurrency control.
      }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
      relationshipGuid: string, # Optional. The GUID of the relationship.
      relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
      guid: string, # Optional. The GUID of the object.
      typeName: string, # Optional. The name of the type.
      uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
    }
  ], # Optional. An array of related object IDs.
  categories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the record.
      displayText: string, # Optional. The display text.
      relationGuid: string, # Optional. The GUID of the relationship.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
    }
  ], # Optional. An array of term categorization headers.
  classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
  examples: [string], # Optional. An array of examples.
  isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
  preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
  preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
  replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
  replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
  seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
  synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
  translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
  translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
  usage: string, # Optional. The usage of the term.
  validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
  validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

</remarks>
    </member>
    <member name="GetGlossaryTerms(String,Boolean,Int32,Int32,String,RequestContext)">
<example>
This sample shows how to call GetGlossaryTerms with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaryTerms("<glossaryGuid>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetGlossaryTerms with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaryTerms("<glossaryGuid>", true, 1234, 1234, "<sort>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("abbreviation").ToString());
Console.WriteLine(result[0].GetProperty("templateName")[0].ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("createTime").ToString());
Console.WriteLine(result[0].GetProperty("createdBy").ToString());
Console.WriteLine(result[0].GetProperty("updateTime").ToString());
Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
Console.WriteLine(result[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
Console.WriteLine(result[0].GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("examples")[0].ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("usage").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasGlossaryTerm</c>:
<code>{
  abbreviation: string, # Optional. The abbreviation of the term.
  templateName: [AnyObject], # Optional.
  anchor: {
    displayText: string, # Optional. The display text.
    glossaryGuid: string, # Optional. The GUID of the glossary.
    relationGuid: string, # Optional. The GUID of the relationship.
  }, # Optional. The glossary header with basic information.
  antonyms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers as antonyms.
  createTime: number, # Optional. The created time of the record.
  createdBy: string, # Optional. The user who created the record.
  updateTime: number, # Optional. The update time of the record.
  updatedBy: string, # Optional. The user who updated the record.
  status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
  resources: [
    {
      displayName: string, # Optional. Display name for url.
      url: string, # Optional. web url. http or https
    }
  ], # Optional. An array of resource link for term
  contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
  attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
The key of the first layer map is term template name.
  assignedEntities: [
    {
      displayText: string, # Optional. The display text.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      relationshipType: string, # Optional.
      relationshipAttributes: {
        attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        typeName: string, # Optional. The name of the type.
        lastModifiedTS: string, # Optional. ETag for concurrency control.
      }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
      relationshipGuid: string, # Optional. The GUID of the relationship.
      relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
      guid: string, # Optional. The GUID of the object.
      typeName: string, # Optional. The name of the type.
      uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
    }
  ], # Optional. An array of related object IDs.
  categories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the record.
      displayText: string, # Optional. The display text.
      relationGuid: string, # Optional. The GUID of the relationship.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
    }
  ], # Optional. An array of term categorization headers.
  classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
  examples: [string], # Optional. An array of examples.
  isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
  preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
  preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
  replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
  replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
  seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
  synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
  translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
  translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
  usage: string, # Optional. The usage of the term.
  validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
  validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

</remarks>
    </member>
    <member name="GetGlossaryTermHeadersAsync(String,Int32,Int32,String,RequestContext)">
<example>
This sample shows how to call GetGlossaryTermHeadersAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryTermHeadersAsync("<glossaryGuid>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetGlossaryTermHeadersAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryTermHeadersAsync("<glossaryGuid>", 1234, 1234, "<sort>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("termGuid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasRelatedTermHeader</c>:
<code>{
  description: string, # Optional. The description of the related term.
  displayText: string, # Optional. The display text.
  expression: string, # Optional. The expression of the term.
  relationGuid: string, # Optional. The GUID of the relationship.
  source: string, # Optional. The source of the term.
  status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
  steward: string, # Optional. The steward of the term.
  termGuid: string, # Optional. The GUID of the term.
}
</code>

</remarks>
    </member>
    <member name="GetGlossaryTermHeaders(String,Int32,Int32,String,RequestContext)">
<example>
This sample shows how to call GetGlossaryTermHeaders with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaryTermHeaders("<glossaryGuid>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetGlossaryTermHeaders with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaryTermHeaders("<glossaryGuid>", 1234, 1234, "<sort>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("termGuid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasRelatedTermHeader</c>:
<code>{
  description: string, # Optional. The description of the related term.
  displayText: string, # Optional. The display text.
  expression: string, # Optional. The expression of the term.
  relationGuid: string, # Optional. The GUID of the relationship.
  source: string, # Optional. The source of the term.
  status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
  steward: string, # Optional. The steward of the term.
  termGuid: string, # Optional. The GUID of the term.
}
</code>

</remarks>
    </member>
    <member name="GetImportCsvOperationStatusAsync(String,RequestContext)">
<example>
This sample shows how to call GetImportCsvOperationStatusAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetImportCsvOperationStatusAsync("<operationGuid>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("importedTerms").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("totalTermsDetected").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("errorMessage").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>ImportCSVOperation</c>:
<code>{
  id: string, # Optional. guid string
  status: &quot;NotStarted&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Running&quot;, # Optional. Enum of the status of import csv operation.
  createTime: string, # Optional. The created time of the record.
  lastUpdateTime: string, # Optional. The last updated time of the record.
  properties: {
    importedTerms: string, # Optional. Term numbers that already imported successfully
    totalTermsDetected: string, # Optional. Total term numbers that detected in csv
  }, # Optional.
  error: {
    errorCode: number, # Optional. Error code from async import job if fail
    errorMessage: string, # Optional. Error message from async import job if fail
  }, # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetImportCsvOperationStatus(String,RequestContext)">
<example>
This sample shows how to call GetImportCsvOperationStatus with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetImportCsvOperationStatus("<operationGuid>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("importedTerms").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("totalTermsDetected").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("errorMessage").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>ImportCSVOperation</c>:
<code>{
  id: string, # Optional. guid string
  status: &quot;NotStarted&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Running&quot;, # Optional. Enum of the status of import csv operation.
  createTime: string, # Optional. The created time of the record.
  lastUpdateTime: string, # Optional. The last updated time of the record.
  properties: {
    importedTerms: string, # Optional. Term numbers that already imported successfully
    totalTermsDetected: string, # Optional. Total term numbers that detected in csv
  }, # Optional.
  error: {
    errorCode: number, # Optional. Error code from async import job if fail
    errorMessage: string, # Optional. Error message from async import job if fail
  }, # Optional.
}
</code>

</remarks>
    </member>
    <member name="ExportGlossaryTermsAsCsvAsync(String,RequestContent,Boolean,RequestContext)">
<example>
This sample shows how to call ExportGlossaryTermsAsCsvAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new[] {
    "<String>"
};

Response response = await client.ExportGlossaryTermsAsCsvAsync("<glossaryGuid>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call ExportGlossaryTermsAsCsvAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new[] {
    "<String>"
};

Response response = await client.ExportGlossaryTermsAsCsvAsync("<glossaryGuid>", RequestContent.Create(data), true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
</example>
    </member>
    <member name="ExportGlossaryTermsAsCsv(String,RequestContent,Boolean,RequestContext)">
<example>
This sample shows how to call ExportGlossaryTermsAsCsv with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new[] {
    "<String>"
};

Response response = client.ExportGlossaryTermsAsCsv("<glossaryGuid>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call ExportGlossaryTermsAsCsv with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = new[] {
    "<String>"
};

Response response = client.ExportGlossaryTermsAsCsv("<glossaryGuid>", RequestContent.Create(data), true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
</example>
    </member>
    <member name="GetTermsByGlossaryNameAsync(String,Int32,Int32,Boolean,RequestContext)">
<example>
This sample shows how to call GetTermsByGlossaryNameAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetTermsByGlossaryNameAsync("<glossaryName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetTermsByGlossaryNameAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetTermsByGlossaryNameAsync("<glossaryName>", 1234, 1234, true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("abbreviation").ToString());
Console.WriteLine(result[0].GetProperty("templateName")[0].ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("createTime").ToString());
Console.WriteLine(result[0].GetProperty("createdBy").ToString());
Console.WriteLine(result[0].GetProperty("updateTime").ToString());
Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
Console.WriteLine(result[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
Console.WriteLine(result[0].GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("examples")[0].ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("usage").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasGlossaryTerm</c>:
<code>{
  abbreviation: string, # Optional. The abbreviation of the term.
  templateName: [AnyObject], # Optional.
  anchor: {
    displayText: string, # Optional. The display text.
    glossaryGuid: string, # Optional. The GUID of the glossary.
    relationGuid: string, # Optional. The GUID of the relationship.
  }, # Optional. The glossary header with basic information.
  antonyms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers as antonyms.
  createTime: number, # Optional. The created time of the record.
  createdBy: string, # Optional. The user who created the record.
  updateTime: number, # Optional. The update time of the record.
  updatedBy: string, # Optional. The user who updated the record.
  status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
  resources: [
    {
      displayName: string, # Optional. Display name for url.
      url: string, # Optional. web url. http or https
    }
  ], # Optional. An array of resource link for term
  contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
  attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
The key of the first layer map is term template name.
  assignedEntities: [
    {
      displayText: string, # Optional. The display text.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      relationshipType: string, # Optional.
      relationshipAttributes: {
        attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        typeName: string, # Optional. The name of the type.
        lastModifiedTS: string, # Optional. ETag for concurrency control.
      }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
      relationshipGuid: string, # Optional. The GUID of the relationship.
      relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
      guid: string, # Optional. The GUID of the object.
      typeName: string, # Optional. The name of the type.
      uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
    }
  ], # Optional. An array of related object IDs.
  categories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the record.
      displayText: string, # Optional. The display text.
      relationGuid: string, # Optional. The GUID of the relationship.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
    }
  ], # Optional. An array of term categorization headers.
  classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
  examples: [string], # Optional. An array of examples.
  isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
  preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
  preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
  replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
  replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
  seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
  synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
  translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
  translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
  usage: string, # Optional. The usage of the term.
  validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
  validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

</remarks>
    </member>
    <member name="GetTermsByGlossaryName(String,Int32,Int32,Boolean,RequestContext)">
<example>
This sample shows how to call GetTermsByGlossaryName with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetTermsByGlossaryName("<glossaryName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetTermsByGlossaryName with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetTermsByGlossaryName("<glossaryName>", 1234, 1234, true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("abbreviation").ToString());
Console.WriteLine(result[0].GetProperty("templateName")[0].ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("createTime").ToString());
Console.WriteLine(result[0].GetProperty("createdBy").ToString());
Console.WriteLine(result[0].GetProperty("updateTime").ToString());
Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
Console.WriteLine(result[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
Console.WriteLine(result[0].GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("examples")[0].ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("usage").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasGlossaryTerm</c>:
<code>{
  abbreviation: string, # Optional. The abbreviation of the term.
  templateName: [AnyObject], # Optional.
  anchor: {
    displayText: string, # Optional. The display text.
    glossaryGuid: string, # Optional. The GUID of the glossary.
    relationGuid: string, # Optional. The GUID of the relationship.
  }, # Optional. The glossary header with basic information.
  antonyms: [
    {
      description: string, # Optional. The description of the related term.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of related term headers as antonyms.
  createTime: number, # Optional. The created time of the record.
  createdBy: string, # Optional. The user who created the record.
  updateTime: number, # Optional. The update time of the record.
  updatedBy: string, # Optional. The user who updated the record.
  status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
  resources: [
    {
      displayName: string, # Optional. Display name for url.
      url: string, # Optional. web url. http or https
    }
  ], # Optional. An array of resource link for term
  contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
  attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
The key of the first layer map is term template name.
  assignedEntities: [
    {
      displayText: string, # Optional. The display text.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      relationshipType: string, # Optional.
      relationshipAttributes: {
        attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        typeName: string, # Optional. The name of the type.
        lastModifiedTS: string, # Optional. ETag for concurrency control.
      }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
      relationshipGuid: string, # Optional. The GUID of the relationship.
      relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
      guid: string, # Optional. The GUID of the object.
      typeName: string, # Optional. The name of the type.
      uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
    }
  ], # Optional. An array of related object IDs.
  categories: [
    {
      categoryGuid: string, # Optional. The GUID of the category.
      description: string, # Optional. The description of the record.
      displayText: string, # Optional. The display text.
      relationGuid: string, # Optional. The GUID of the relationship.
      status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
    }
  ], # Optional. An array of term categorization headers.
  classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
  examples: [string], # Optional. An array of examples.
  isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
  preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
  preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
  replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
  replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
  seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
  synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
  translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
  translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
  usage: string, # Optional. The usage of the term.
  validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
  validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  longDescription: string, # Optional. The long version description.
  name: string, # Optional. The name of the glossary object.
  qualifiedName: string, # Optional. The qualified name of the glossary object.
  shortDescription: string, # Optional. The short version of description.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
  guid: string, # Optional. The GUID of the object.
}
</code>

</remarks>
    </member>
    <member name="ImportGlossaryTermsViaCsvAsync(WaitUntil,String,RequestContent,Boolean,RequestContext)">
<example>
This sample shows how to call ImportGlossaryTermsViaCsvAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = File.OpenRead("<filePath>");

var operation = await client.ImportGlossaryTermsViaCsvAsync(WaitUntil.Started, "<glossaryGuid>", RequestContent.Create(data));

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call ImportGlossaryTermsViaCsvAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = File.OpenRead("<filePath>");

var operation = await client.ImportGlossaryTermsViaCsvAsync(WaitUntil.Started, "<glossaryGuid>", RequestContent.Create(data), true);

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("importedTerms").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("totalTermsDetected").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("errorMessage").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>ImportCSVOperation</c>:
<code>{
  id: string, # Optional. guid string
  status: &quot;NotStarted&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Running&quot;, # Optional. Enum of the status of import csv operation.
  createTime: string, # Optional. The created time of the record.
  lastUpdateTime: string, # Optional. The last updated time of the record.
  properties: {
    importedTerms: string, # Optional. Term numbers that already imported successfully
    totalTermsDetected: string, # Optional. Total term numbers that detected in csv
  }, # Optional.
  error: {
    errorCode: number, # Optional. Error code from async import job if fail
    errorMessage: string, # Optional. Error message from async import job if fail
  }, # Optional.
}
</code>

</remarks>
    </member>
    <member name="ImportGlossaryTermsViaCsv(WaitUntil,String,RequestContent,Boolean,RequestContext)">
<example>
This sample shows how to call ImportGlossaryTermsViaCsv with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = File.OpenRead("<filePath>");

var operation = client.ImportGlossaryTermsViaCsv(WaitUntil.Started, "<glossaryGuid>", RequestContent.Create(data));

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call ImportGlossaryTermsViaCsv with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = File.OpenRead("<filePath>");

var operation = client.ImportGlossaryTermsViaCsv(WaitUntil.Started, "<glossaryGuid>", RequestContent.Create(data), true);

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("importedTerms").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("totalTermsDetected").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("errorMessage").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>ImportCSVOperation</c>:
<code>{
  id: string, # Optional. guid string
  status: &quot;NotStarted&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Running&quot;, # Optional. Enum of the status of import csv operation.
  createTime: string, # Optional. The created time of the record.
  lastUpdateTime: string, # Optional. The last updated time of the record.
  properties: {
    importedTerms: string, # Optional. Term numbers that already imported successfully
    totalTermsDetected: string, # Optional. Total term numbers that detected in csv
  }, # Optional.
  error: {
    errorCode: number, # Optional. Error code from async import job if fail
    errorMessage: string, # Optional. Error message from async import job if fail
  }, # Optional.
}
</code>

</remarks>
    </member>
    <member name="ImportGlossaryTermsViaCsvByGlossaryNameAsync(WaitUntil,String,RequestContent,Boolean,RequestContext)">
<example>
This sample shows how to call ImportGlossaryTermsViaCsvByGlossaryNameAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = File.OpenRead("<filePath>");

var operation = await client.ImportGlossaryTermsViaCsvByGlossaryNameAsync(WaitUntil.Started, "<glossaryName>", RequestContent.Create(data));

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call ImportGlossaryTermsViaCsvByGlossaryNameAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = File.OpenRead("<filePath>");

var operation = await client.ImportGlossaryTermsViaCsvByGlossaryNameAsync(WaitUntil.Started, "<glossaryName>", RequestContent.Create(data), true);

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("importedTerms").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("totalTermsDetected").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("errorMessage").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>ImportCSVOperation</c>:
<code>{
  id: string, # Optional. guid string
  status: &quot;NotStarted&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Running&quot;, # Optional. Enum of the status of import csv operation.
  createTime: string, # Optional. The created time of the record.
  lastUpdateTime: string, # Optional. The last updated time of the record.
  properties: {
    importedTerms: string, # Optional. Term numbers that already imported successfully
    totalTermsDetected: string, # Optional. Total term numbers that detected in csv
  }, # Optional.
  error: {
    errorCode: number, # Optional. Error code from async import job if fail
    errorMessage: string, # Optional. Error message from async import job if fail
  }, # Optional.
}
</code>

</remarks>
    </member>
    <member name="ImportGlossaryTermsViaCsvByGlossaryName(WaitUntil,String,RequestContent,Boolean,RequestContext)">
<example>
This sample shows how to call ImportGlossaryTermsViaCsvByGlossaryName with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = File.OpenRead("<filePath>");

var operation = client.ImportGlossaryTermsViaCsvByGlossaryName(WaitUntil.Started, "<glossaryName>", RequestContent.Create(data));

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call ImportGlossaryTermsViaCsvByGlossaryName with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

var data = File.OpenRead("<filePath>");

var operation = client.ImportGlossaryTermsViaCsvByGlossaryName(WaitUntil.Started, "<glossaryName>", RequestContent.Create(data), true);

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("importedTerms").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("totalTermsDetected").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("errorMessage").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>ImportCSVOperation</c>:
<code>{
  id: string, # Optional. guid string
  status: &quot;NotStarted&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Running&quot;, # Optional. Enum of the status of import csv operation.
  createTime: string, # Optional. The created time of the record.
  lastUpdateTime: string, # Optional. The last updated time of the record.
  properties: {
    importedTerms: string, # Optional. Term numbers that already imported successfully
    totalTermsDetected: string, # Optional. Total term numbers that detected in csv
  }, # Optional.
  error: {
    errorCode: number, # Optional. Error code from async import job if fail
    errorMessage: string, # Optional. Error message from async import job if fail
  }, # Optional.
}
</code>

</remarks>
    </member>
  </members>
</doc>