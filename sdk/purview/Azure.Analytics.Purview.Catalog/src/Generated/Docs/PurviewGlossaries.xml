<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetGlossariesAsync(int?,int?,string,bool?,RequestContext)">
      <example>
This sample shows how to call GetGlossariesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossariesAsync(null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetGlossariesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossariesAsync(1234, 1234, "<sort>", true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("language").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("usage").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
]]></code></example>
    </member>
    <member name="GetGlossaries(int?,int?,string,bool?,RequestContext)">
      <example>
This sample shows how to call GetGlossaries and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaries(null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetGlossaries with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaries(1234, 1234, "<sort>", true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("language").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("usage").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
]]></code></example>
    </member>
    <member name="CreateGlossaryAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateGlossaryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object());
Response response = await client.CreateGlossaryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateGlossaryAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    categories = new object[]
    {
        new
        {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
    language = "<language>",
    terms = new object[]
    {
        new
        {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    usage = "<usage>",
    classifications = new object[]
    {
        new
        {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new object[]
            {
                new
                {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new
            {
                key = new object(),
            },
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    guid = "<guid>",
});
Response response = await client.CreateGlossaryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
    </member>
    <member name="CreateGlossary(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateGlossary and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object());
Response response = client.CreateGlossary(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateGlossary with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    categories = new object[]
    {
        new
        {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
    language = "<language>",
    terms = new object[]
    {
        new
        {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    usage = "<usage>",
    classifications = new object[]
    {
        new
        {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new object[]
            {
                new
                {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new
            {
                key = new object(),
            },
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    guid = "<guid>",
});
Response response = client.CreateGlossary(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
    </member>
    <member name="CreateGlossaryCategoriesAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateGlossaryCategoriesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new object()
});
Response response = await client.CreateGlossaryCategoriesAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call CreateGlossaryCategoriesAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        anchor = new
        {
            displayText = "<displayText>",
            glossaryGuid = "<glossaryGuid>",
            relationGuid = "<relationGuid>",
        },
        childrenCategories = new object[]
        {
            new
            {
                categoryGuid = "<categoryGuid>",
                description = "<description>",
                displayText = "<displayText>",
                parentCategoryGuid = "<parentCategoryGuid>",
                relationGuid = "<relationGuid>",
            }
        },
        terms = new object[]
        {
            new
            {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        classifications = new object[]
        {
            new
            {
                entityGuid = "<entityGuid>",
                entityStatus = "ACTIVE",
                removePropagationsOnEntityDelete = true,
                validityPeriods = new object[]
                {
                    new
                    {
                        endTime = "<endTime>",
                        startTime = "<startTime>",
                        timeZone = "<timeZone>",
                    }
                },
                source = "<source>",
                sourceDetails = new
                {
                    key = new object(),
                },
                attributes = new
                {
                    key = new object(),
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            }
        },
        longDescription = "<longDescription>",
        name = "<name>",
        qualifiedName = "<qualifiedName>",
        shortDescription = "<shortDescription>",
        lastModifiedTS = "<lastModifiedTS>",
        guid = "<guid>",
    }
});
Response response = await client.CreateGlossaryCategoriesAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
]]></code></example>
    </member>
    <member name="CreateGlossaryCategories(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateGlossaryCategories and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new object()
});
Response response = client.CreateGlossaryCategories(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call CreateGlossaryCategories with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        anchor = new
        {
            displayText = "<displayText>",
            glossaryGuid = "<glossaryGuid>",
            relationGuid = "<relationGuid>",
        },
        childrenCategories = new object[]
        {
            new
            {
                categoryGuid = "<categoryGuid>",
                description = "<description>",
                displayText = "<displayText>",
                parentCategoryGuid = "<parentCategoryGuid>",
                relationGuid = "<relationGuid>",
            }
        },
        terms = new object[]
        {
            new
            {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        classifications = new object[]
        {
            new
            {
                entityGuid = "<entityGuid>",
                entityStatus = "ACTIVE",
                removePropagationsOnEntityDelete = true,
                validityPeriods = new object[]
                {
                    new
                    {
                        endTime = "<endTime>",
                        startTime = "<startTime>",
                        timeZone = "<timeZone>",
                    }
                },
                source = "<source>",
                sourceDetails = new
                {
                    key = new object(),
                },
                attributes = new
                {
                    key = new object(),
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            }
        },
        longDescription = "<longDescription>",
        name = "<name>",
        qualifiedName = "<qualifiedName>",
        shortDescription = "<shortDescription>",
        lastModifiedTS = "<lastModifiedTS>",
        guid = "<guid>",
    }
});
Response response = client.CreateGlossaryCategories(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
]]></code></example>
    </member>
    <member name="CreateGlossaryCategoryAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateGlossaryCategoryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object());
Response response = await client.CreateGlossaryCategoryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateGlossaryCategoryAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    anchor = new
    {
        displayText = "<displayText>",
        glossaryGuid = "<glossaryGuid>",
        relationGuid = "<relationGuid>",
    },
    childrenCategories = new object[]
    {
        new
        {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
    terms = new object[]
    {
        new
        {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    classifications = new object[]
    {
        new
        {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new object[]
            {
                new
                {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new
            {
                key = new object(),
            },
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    guid = "<guid>",
});
Response response = await client.CreateGlossaryCategoryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
    </member>
    <member name="CreateGlossaryCategory(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateGlossaryCategory and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object());
Response response = client.CreateGlossaryCategory(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateGlossaryCategory with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    anchor = new
    {
        displayText = "<displayText>",
        glossaryGuid = "<glossaryGuid>",
        relationGuid = "<relationGuid>",
    },
    childrenCategories = new object[]
    {
        new
        {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
    terms = new object[]
    {
        new
        {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    classifications = new object[]
    {
        new
        {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new object[]
            {
                new
                {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new
            {
                key = new object(),
            },
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    guid = "<guid>",
});
Response response = client.CreateGlossaryCategory(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
    </member>
    <member name="GetGlossaryCategoryAsync(string,RequestContext)">
      <example>
This sample shows how to call GetGlossaryCategoryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryCategoryAsync("<categoryGuid>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetGlossaryCategoryAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryCategoryAsync("<categoryGuid>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
    </member>
    <member name="GetGlossaryCategory(string,RequestContext)">
      <example>
This sample shows how to call GetGlossaryCategory and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaryCategory("<categoryGuid>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetGlossaryCategory with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaryCategory("<categoryGuid>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
    </member>
    <member name="UpdateGlossaryCategoryAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateGlossaryCategoryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object());
Response response = await client.UpdateGlossaryCategoryAsync("<categoryGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call UpdateGlossaryCategoryAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    anchor = new
    {
        displayText = "<displayText>",
        glossaryGuid = "<glossaryGuid>",
        relationGuid = "<relationGuid>",
    },
    childrenCategories = new object[]
    {
        new
        {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
    terms = new object[]
    {
        new
        {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    classifications = new object[]
    {
        new
        {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new object[]
            {
                new
                {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new
            {
                key = new object(),
            },
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    guid = "<guid>",
});
Response response = await client.UpdateGlossaryCategoryAsync("<categoryGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
    </member>
    <member name="UpdateGlossaryCategory(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateGlossaryCategory and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object());
Response response = client.UpdateGlossaryCategory("<categoryGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call UpdateGlossaryCategory with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    anchor = new
    {
        displayText = "<displayText>",
        glossaryGuid = "<glossaryGuid>",
        relationGuid = "<relationGuid>",
    },
    childrenCategories = new object[]
    {
        new
        {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
    terms = new object[]
    {
        new
        {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    classifications = new object[]
    {
        new
        {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new object[]
            {
                new
                {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new
            {
                key = new object(),
            },
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    guid = "<guid>",
});
Response response = client.UpdateGlossaryCategory("<categoryGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
    </member>
    <member name="DeleteGlossaryCategoryAsync(string,RequestContext)">
      <example>
This sample shows how to call DeleteGlossaryCategoryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.DeleteGlossaryCategoryAsync("<categoryGuid>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteGlossaryCategoryAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.DeleteGlossaryCategoryAsync("<categoryGuid>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteGlossaryCategory(string,RequestContext)">
      <example>
This sample shows how to call DeleteGlossaryCategory.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.DeleteGlossaryCategory("<categoryGuid>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteGlossaryCategory with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.DeleteGlossaryCategory("<categoryGuid>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="PartialUpdateGlossaryCategoryAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call PartialUpdateGlossaryCategoryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    key = "<partialUpdates>",
});
Response response = await client.PartialUpdateGlossaryCategoryAsync("<categoryGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PartialUpdateGlossaryCategoryAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    key = "<partialUpdates>",
});
Response response = await client.PartialUpdateGlossaryCategoryAsync("<categoryGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
    </member>
    <member name="PartialUpdateGlossaryCategory(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call PartialUpdateGlossaryCategory and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    key = "<partialUpdates>",
});
Response response = client.PartialUpdateGlossaryCategory("<categoryGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PartialUpdateGlossaryCategory with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    key = "<partialUpdates>",
});
Response response = client.PartialUpdateGlossaryCategory("<categoryGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
    </member>
    <member name="GetRelatedCategoriesAsync(string,int?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetRelatedCategoriesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetRelatedCategoriesAsync("<categoryGuid>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<key>")[0].ToString());
]]></code>
This sample shows how to call GetRelatedCategoriesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetRelatedCategoriesAsync("<categoryGuid>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("relationGuid").ToString());
]]></code></example>
    </member>
    <member name="GetRelatedCategories(string,int?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetRelatedCategories and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetRelatedCategories("<categoryGuid>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<key>")[0].ToString());
]]></code>
This sample shows how to call GetRelatedCategories with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetRelatedCategories("<categoryGuid>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("relationGuid").ToString());
]]></code></example>
    </member>
    <member name="GetCategoryTermsAsync(string,int?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetCategoryTermsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetCategoryTermsAsync("<categoryGuid>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetCategoryTermsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetCategoryTermsAsync("<categoryGuid>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("termGuid").ToString());
]]></code></example>
    </member>
    <member name="GetCategoryTerms(string,int?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetCategoryTerms and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetCategoryTerms("<categoryGuid>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetCategoryTerms with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetCategoryTerms("<categoryGuid>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("termGuid").ToString());
]]></code></example>
    </member>
    <member name="CreateGlossaryTermAsync(RequestContent,bool?,RequestContext)">
      <example>
This sample shows how to call CreateGlossaryTermAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object());
Response response = await client.CreateGlossaryTermAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateGlossaryTermAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    abbreviation = "<abbreviation>",
    templateName = new object[]
    {
        new object()
    },
    anchor = new
    {
        displayText = "<displayText>",
        glossaryGuid = "<glossaryGuid>",
        relationGuid = "<relationGuid>",
    },
    antonyms = new object[]
    {
        new
        {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    createTime = 123.45F,
    createdBy = "<createdBy>",
    updateTime = 123.45F,
    updatedBy = "<updatedBy>",
    status = "Draft",
    resources = new object[]
    {
        new
        {
            displayName = "<displayName>",
            url = "<url>",
        }
    },
    contacts = new
    {
        key = new object[]
        {
            new
            {
                id = "<id>",
                info = "<info>",
            }
        },
    },
    attributes = new
    {
        key = new
        {
            key = new object(),
        },
    },
    assignedEntities = new object[]
    {
        new
        {
            displayText = "<displayText>",
            entityStatus = "ACTIVE",
            relationshipType = "<relationshipType>",
            relationshipAttributes = new
            {
                attributes = new
                {
                    key = new object(),
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            },
            relationshipGuid = "<relationshipGuid>",
            relationshipStatus = "ACTIVE",
            guid = "<guid>",
            typeName = "<typeName>",
            uniqueAttributes = new
            {
                key = new object(),
            },
        }
    },
    categories = new object[]
    {
        new
        {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            relationGuid = "<relationGuid>",
            status = "DRAFT",
        }
    },
    classifies = new object[]
    {
        null
    },
    examples = new object[]
    {
        "<examples>"
    },
    isA = new object[]
    {
        null
    },
    preferredTerms = new object[]
    {
        null
    },
    preferredToTerms = new object[]
    {
        null
    },
    replacedBy = new object[]
    {
        null
    },
    replacementTerms = new object[]
    {
        null
    },
    seeAlso = new object[]
    {
        null
    },
    synonyms = new object[]
    {
        null
    },
    translatedTerms = new object[]
    {
        null
    },
    translationTerms = new object[]
    {
        null
    },
    usage = "<usage>",
    validValues = new object[]
    {
        null
    },
    validValuesFor = new object[]
    {
        null
    },
    classifications = new object[]
    {
        new
        {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new object[]
            {
                new
                {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new
            {
                key = new object(),
            },
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    guid = "<guid>",
});
Response response = await client.CreateGlossaryTermAsync(content, includeTermHierarchy: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
    </member>
    <member name="CreateGlossaryTerm(RequestContent,bool?,RequestContext)">
      <example>
This sample shows how to call CreateGlossaryTerm and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object());
Response response = client.CreateGlossaryTerm(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateGlossaryTerm with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    abbreviation = "<abbreviation>",
    templateName = new object[]
    {
        new object()
    },
    anchor = new
    {
        displayText = "<displayText>",
        glossaryGuid = "<glossaryGuid>",
        relationGuid = "<relationGuid>",
    },
    antonyms = new object[]
    {
        new
        {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    createTime = 123.45F,
    createdBy = "<createdBy>",
    updateTime = 123.45F,
    updatedBy = "<updatedBy>",
    status = "Draft",
    resources = new object[]
    {
        new
        {
            displayName = "<displayName>",
            url = "<url>",
        }
    },
    contacts = new
    {
        key = new object[]
        {
            new
            {
                id = "<id>",
                info = "<info>",
            }
        },
    },
    attributes = new
    {
        key = new
        {
            key = new object(),
        },
    },
    assignedEntities = new object[]
    {
        new
        {
            displayText = "<displayText>",
            entityStatus = "ACTIVE",
            relationshipType = "<relationshipType>",
            relationshipAttributes = new
            {
                attributes = new
                {
                    key = new object(),
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            },
            relationshipGuid = "<relationshipGuid>",
            relationshipStatus = "ACTIVE",
            guid = "<guid>",
            typeName = "<typeName>",
            uniqueAttributes = new
            {
                key = new object(),
            },
        }
    },
    categories = new object[]
    {
        new
        {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            relationGuid = "<relationGuid>",
            status = "DRAFT",
        }
    },
    classifies = new object[]
    {
        null
    },
    examples = new object[]
    {
        "<examples>"
    },
    isA = new object[]
    {
        null
    },
    preferredTerms = new object[]
    {
        null
    },
    preferredToTerms = new object[]
    {
        null
    },
    replacedBy = new object[]
    {
        null
    },
    replacementTerms = new object[]
    {
        null
    },
    seeAlso = new object[]
    {
        null
    },
    synonyms = new object[]
    {
        null
    },
    translatedTerms = new object[]
    {
        null
    },
    translationTerms = new object[]
    {
        null
    },
    usage = "<usage>",
    validValues = new object[]
    {
        null
    },
    validValuesFor = new object[]
    {
        null
    },
    classifications = new object[]
    {
        new
        {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new object[]
            {
                new
                {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new
            {
                key = new object(),
            },
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    guid = "<guid>",
});
Response response = client.CreateGlossaryTerm(content, includeTermHierarchy: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
    </member>
    <member name="GetGlossaryTermAsync(string,bool?,IEnumerable{string},RequestContext)">
      <example>
This sample shows how to call GetGlossaryTermAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryTermAsync("<termGuid>", null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetGlossaryTermAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryTermAsync("<termGuid>", true, new string[] { "<excludeRelationshipTypeList>" }, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
    </member>
    <member name="GetGlossaryTerm(string,bool?,IEnumerable{string},RequestContext)">
      <example>
This sample shows how to call GetGlossaryTerm and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaryTerm("<termGuid>", null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetGlossaryTerm with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaryTerm("<termGuid>", true, new string[] { "<excludeRelationshipTypeList>" }, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
    </member>
    <member name="UpdateGlossaryTermAsync(string,RequestContent,bool?,RequestContext)">
      <example>
This sample shows how to call UpdateGlossaryTermAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object());
Response response = await client.UpdateGlossaryTermAsync("<termGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call UpdateGlossaryTermAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    abbreviation = "<abbreviation>",
    templateName = new object[]
    {
        new object()
    },
    anchor = new
    {
        displayText = "<displayText>",
        glossaryGuid = "<glossaryGuid>",
        relationGuid = "<relationGuid>",
    },
    antonyms = new object[]
    {
        new
        {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    createTime = 123.45F,
    createdBy = "<createdBy>",
    updateTime = 123.45F,
    updatedBy = "<updatedBy>",
    status = "Draft",
    resources = new object[]
    {
        new
        {
            displayName = "<displayName>",
            url = "<url>",
        }
    },
    contacts = new
    {
        key = new object[]
        {
            new
            {
                id = "<id>",
                info = "<info>",
            }
        },
    },
    attributes = new
    {
        key = new
        {
            key = new object(),
        },
    },
    assignedEntities = new object[]
    {
        new
        {
            displayText = "<displayText>",
            entityStatus = "ACTIVE",
            relationshipType = "<relationshipType>",
            relationshipAttributes = new
            {
                attributes = new
                {
                    key = new object(),
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            },
            relationshipGuid = "<relationshipGuid>",
            relationshipStatus = "ACTIVE",
            guid = "<guid>",
            typeName = "<typeName>",
            uniqueAttributes = new
            {
                key = new object(),
            },
        }
    },
    categories = new object[]
    {
        new
        {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            relationGuid = "<relationGuid>",
            status = "DRAFT",
        }
    },
    classifies = new object[]
    {
        null
    },
    examples = new object[]
    {
        "<examples>"
    },
    isA = new object[]
    {
        null
    },
    preferredTerms = new object[]
    {
        null
    },
    preferredToTerms = new object[]
    {
        null
    },
    replacedBy = new object[]
    {
        null
    },
    replacementTerms = new object[]
    {
        null
    },
    seeAlso = new object[]
    {
        null
    },
    synonyms = new object[]
    {
        null
    },
    translatedTerms = new object[]
    {
        null
    },
    translationTerms = new object[]
    {
        null
    },
    usage = "<usage>",
    validValues = new object[]
    {
        null
    },
    validValuesFor = new object[]
    {
        null
    },
    classifications = new object[]
    {
        new
        {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new object[]
            {
                new
                {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new
            {
                key = new object(),
            },
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    guid = "<guid>",
});
Response response = await client.UpdateGlossaryTermAsync("<termGuid>", content, includeTermHierarchy: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
    </member>
    <member name="UpdateGlossaryTerm(string,RequestContent,bool?,RequestContext)">
      <example>
This sample shows how to call UpdateGlossaryTerm and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object());
Response response = client.UpdateGlossaryTerm("<termGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call UpdateGlossaryTerm with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    abbreviation = "<abbreviation>",
    templateName = new object[]
    {
        new object()
    },
    anchor = new
    {
        displayText = "<displayText>",
        glossaryGuid = "<glossaryGuid>",
        relationGuid = "<relationGuid>",
    },
    antonyms = new object[]
    {
        new
        {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    createTime = 123.45F,
    createdBy = "<createdBy>",
    updateTime = 123.45F,
    updatedBy = "<updatedBy>",
    status = "Draft",
    resources = new object[]
    {
        new
        {
            displayName = "<displayName>",
            url = "<url>",
        }
    },
    contacts = new
    {
        key = new object[]
        {
            new
            {
                id = "<id>",
                info = "<info>",
            }
        },
    },
    attributes = new
    {
        key = new
        {
            key = new object(),
        },
    },
    assignedEntities = new object[]
    {
        new
        {
            displayText = "<displayText>",
            entityStatus = "ACTIVE",
            relationshipType = "<relationshipType>",
            relationshipAttributes = new
            {
                attributes = new
                {
                    key = new object(),
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            },
            relationshipGuid = "<relationshipGuid>",
            relationshipStatus = "ACTIVE",
            guid = "<guid>",
            typeName = "<typeName>",
            uniqueAttributes = new
            {
                key = new object(),
            },
        }
    },
    categories = new object[]
    {
        new
        {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            relationGuid = "<relationGuid>",
            status = "DRAFT",
        }
    },
    classifies = new object[]
    {
        null
    },
    examples = new object[]
    {
        "<examples>"
    },
    isA = new object[]
    {
        null
    },
    preferredTerms = new object[]
    {
        null
    },
    preferredToTerms = new object[]
    {
        null
    },
    replacedBy = new object[]
    {
        null
    },
    replacementTerms = new object[]
    {
        null
    },
    seeAlso = new object[]
    {
        null
    },
    synonyms = new object[]
    {
        null
    },
    translatedTerms = new object[]
    {
        null
    },
    translationTerms = new object[]
    {
        null
    },
    usage = "<usage>",
    validValues = new object[]
    {
        null
    },
    validValuesFor = new object[]
    {
        null
    },
    classifications = new object[]
    {
        new
        {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new object[]
            {
                new
                {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new
            {
                key = new object(),
            },
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    guid = "<guid>",
});
Response response = client.UpdateGlossaryTerm("<termGuid>", content, includeTermHierarchy: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
    </member>
    <member name="DeleteGlossaryTermAsync(string,RequestContext)">
      <example>
This sample shows how to call DeleteGlossaryTermAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.DeleteGlossaryTermAsync("<termGuid>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteGlossaryTermAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.DeleteGlossaryTermAsync("<termGuid>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteGlossaryTerm(string,RequestContext)">
      <example>
This sample shows how to call DeleteGlossaryTerm.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.DeleteGlossaryTerm("<termGuid>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteGlossaryTerm with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.DeleteGlossaryTerm("<termGuid>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="PartialUpdateGlossaryTermAsync(string,RequestContent,bool?,RequestContext)">
      <example>
This sample shows how to call PartialUpdateGlossaryTermAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    key = "<partialUpdates>",
});
Response response = await client.PartialUpdateGlossaryTermAsync("<termGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PartialUpdateGlossaryTermAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    key = "<partialUpdates>",
});
Response response = await client.PartialUpdateGlossaryTermAsync("<termGuid>", content, includeTermHierarchy: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
    </member>
    <member name="PartialUpdateGlossaryTerm(string,RequestContent,bool?,RequestContext)">
      <example>
This sample shows how to call PartialUpdateGlossaryTerm and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    key = "<partialUpdates>",
});
Response response = client.PartialUpdateGlossaryTerm("<termGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PartialUpdateGlossaryTerm with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    key = "<partialUpdates>",
});
Response response = client.PartialUpdateGlossaryTerm("<termGuid>", content, includeTermHierarchy: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
    </member>
    <member name="CreateGlossaryTermsAsync(RequestContent,bool?,RequestContext)">
      <example>
This sample shows how to call CreateGlossaryTermsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new object()
});
Response response = await client.CreateGlossaryTermsAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call CreateGlossaryTermsAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        abbreviation = "<abbreviation>",
        templateName = new object[]
        {
            new object()
        },
        anchor = new
        {
            displayText = "<displayText>",
            glossaryGuid = "<glossaryGuid>",
            relationGuid = "<relationGuid>",
        },
        antonyms = new object[]
        {
            new
            {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        createTime = 123.45F,
        createdBy = "<createdBy>",
        updateTime = 123.45F,
        updatedBy = "<updatedBy>",
        status = "Draft",
        resources = new object[]
        {
            new
            {
                displayName = "<displayName>",
                url = "<url>",
            }
        },
        contacts = new
        {
            key = new object[]
            {
                new
                {
                    id = "<id>",
                    info = "<info>",
                }
            },
        },
        attributes = new
        {
            key = new
            {
                key = new object(),
            },
        },
        assignedEntities = new object[]
        {
            new
            {
                displayText = "<displayText>",
                entityStatus = "ACTIVE",
                relationshipType = "<relationshipType>",
                relationshipAttributes = new
                {
                    attributes = new
                    {
                        key = new object(),
                    },
                    typeName = "<typeName>",
                    lastModifiedTS = "<lastModifiedTS>",
                },
                relationshipGuid = "<relationshipGuid>",
                relationshipStatus = "ACTIVE",
                guid = "<guid>",
                typeName = "<typeName>",
                uniqueAttributes = new
                {
                    key = new object(),
                },
            }
        },
        categories = new object[]
        {
            new
            {
                categoryGuid = "<categoryGuid>",
                description = "<description>",
                displayText = "<displayText>",
                relationGuid = "<relationGuid>",
                status = "DRAFT",
            }
        },
        classifies = new object[]
        {
            null
        },
        examples = new object[]
        {
            "<examples>"
        },
        isA = new object[]
        {
            null
        },
        preferredTerms = new object[]
        {
            null
        },
        preferredToTerms = new object[]
        {
            null
        },
        replacedBy = new object[]
        {
            null
        },
        replacementTerms = new object[]
        {
            null
        },
        seeAlso = new object[]
        {
            null
        },
        synonyms = new object[]
        {
            null
        },
        translatedTerms = new object[]
        {
            null
        },
        translationTerms = new object[]
        {
            null
        },
        usage = "<usage>",
        validValues = new object[]
        {
            null
        },
        validValuesFor = new object[]
        {
            null
        },
        classifications = new object[]
        {
            new
            {
                entityGuid = "<entityGuid>",
                entityStatus = "ACTIVE",
                removePropagationsOnEntityDelete = true,
                validityPeriods = new object[]
                {
                    new
                    {
                        endTime = "<endTime>",
                        startTime = "<startTime>",
                        timeZone = "<timeZone>",
                    }
                },
                source = "<source>",
                sourceDetails = new
                {
                    key = new object(),
                },
                attributes = new
                {
                    key = new object(),
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            }
        },
        longDescription = "<longDescription>",
        name = "<name>",
        qualifiedName = "<qualifiedName>",
        shortDescription = "<shortDescription>",
        lastModifiedTS = "<lastModifiedTS>",
        guid = "<guid>",
    }
});
Response response = await client.CreateGlossaryTermsAsync(content, includeTermHierarchy: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("abbreviation").ToString());
Console.WriteLine(result[0].GetProperty("templateName")[0].ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("createTime").ToString());
Console.WriteLine(result[0].GetProperty("createdBy").ToString());
Console.WriteLine(result[0].GetProperty("updateTime").ToString());
Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
Console.WriteLine(result[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result[0].GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("examples")[0].ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("usage").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
]]></code></example>
    </member>
    <member name="CreateGlossaryTerms(RequestContent,bool?,RequestContext)">
      <example>
This sample shows how to call CreateGlossaryTerms and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new object()
});
Response response = client.CreateGlossaryTerms(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call CreateGlossaryTerms with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        abbreviation = "<abbreviation>",
        templateName = new object[]
        {
            new object()
        },
        anchor = new
        {
            displayText = "<displayText>",
            glossaryGuid = "<glossaryGuid>",
            relationGuid = "<relationGuid>",
        },
        antonyms = new object[]
        {
            new
            {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        createTime = 123.45F,
        createdBy = "<createdBy>",
        updateTime = 123.45F,
        updatedBy = "<updatedBy>",
        status = "Draft",
        resources = new object[]
        {
            new
            {
                displayName = "<displayName>",
                url = "<url>",
            }
        },
        contacts = new
        {
            key = new object[]
            {
                new
                {
                    id = "<id>",
                    info = "<info>",
                }
            },
        },
        attributes = new
        {
            key = new
            {
                key = new object(),
            },
        },
        assignedEntities = new object[]
        {
            new
            {
                displayText = "<displayText>",
                entityStatus = "ACTIVE",
                relationshipType = "<relationshipType>",
                relationshipAttributes = new
                {
                    attributes = new
                    {
                        key = new object(),
                    },
                    typeName = "<typeName>",
                    lastModifiedTS = "<lastModifiedTS>",
                },
                relationshipGuid = "<relationshipGuid>",
                relationshipStatus = "ACTIVE",
                guid = "<guid>",
                typeName = "<typeName>",
                uniqueAttributes = new
                {
                    key = new object(),
                },
            }
        },
        categories = new object[]
        {
            new
            {
                categoryGuid = "<categoryGuid>",
                description = "<description>",
                displayText = "<displayText>",
                relationGuid = "<relationGuid>",
                status = "DRAFT",
            }
        },
        classifies = new object[]
        {
            null
        },
        examples = new object[]
        {
            "<examples>"
        },
        isA = new object[]
        {
            null
        },
        preferredTerms = new object[]
        {
            null
        },
        preferredToTerms = new object[]
        {
            null
        },
        replacedBy = new object[]
        {
            null
        },
        replacementTerms = new object[]
        {
            null
        },
        seeAlso = new object[]
        {
            null
        },
        synonyms = new object[]
        {
            null
        },
        translatedTerms = new object[]
        {
            null
        },
        translationTerms = new object[]
        {
            null
        },
        usage = "<usage>",
        validValues = new object[]
        {
            null
        },
        validValuesFor = new object[]
        {
            null
        },
        classifications = new object[]
        {
            new
            {
                entityGuid = "<entityGuid>",
                entityStatus = "ACTIVE",
                removePropagationsOnEntityDelete = true,
                validityPeriods = new object[]
                {
                    new
                    {
                        endTime = "<endTime>",
                        startTime = "<startTime>",
                        timeZone = "<timeZone>",
                    }
                },
                source = "<source>",
                sourceDetails = new
                {
                    key = new object(),
                },
                attributes = new
                {
                    key = new object(),
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            }
        },
        longDescription = "<longDescription>",
        name = "<name>",
        qualifiedName = "<qualifiedName>",
        shortDescription = "<shortDescription>",
        lastModifiedTS = "<lastModifiedTS>",
        guid = "<guid>",
    }
});
Response response = client.CreateGlossaryTerms(content, includeTermHierarchy: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("abbreviation").ToString());
Console.WriteLine(result[0].GetProperty("templateName")[0].ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("createTime").ToString());
Console.WriteLine(result[0].GetProperty("createdBy").ToString());
Console.WriteLine(result[0].GetProperty("updateTime").ToString());
Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
Console.WriteLine(result[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result[0].GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("examples")[0].ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("usage").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
]]></code></example>
    </member>
    <member name="GetEntitiesAssignedWithTermAsync(string,int?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetEntitiesAssignedWithTermAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetEntitiesAssignedWithTermAsync("<termGuid>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetEntitiesAssignedWithTermAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetEntitiesAssignedWithTermAsync("<termGuid>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetEntitiesAssignedWithTerm(string,int?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetEntitiesAssignedWithTerm and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetEntitiesAssignedWithTerm("<termGuid>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetEntitiesAssignedWithTerm with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetEntitiesAssignedWithTerm("<termGuid>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="AssignTermToEntitiesAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call AssignTermToEntitiesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new object()
});
Response response = await client.AssignTermToEntitiesAsync("<termGuid>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call AssignTermToEntitiesAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        displayText = "<displayText>",
        entityStatus = "ACTIVE",
        relationshipType = "<relationshipType>",
        relationshipAttributes = new
        {
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        },
        relationshipGuid = "<relationshipGuid>",
        relationshipStatus = "ACTIVE",
        guid = "<guid>",
        typeName = "<typeName>",
        uniqueAttributes = new
        {
            key = new object(),
        },
    }
});
Response response = await client.AssignTermToEntitiesAsync("<termGuid>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="AssignTermToEntities(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call AssignTermToEntities.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new object()
});
Response response = client.AssignTermToEntities("<termGuid>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call AssignTermToEntities with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        displayText = "<displayText>",
        entityStatus = "ACTIVE",
        relationshipType = "<relationshipType>",
        relationshipAttributes = new
        {
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        },
        relationshipGuid = "<relationshipGuid>",
        relationshipStatus = "ACTIVE",
        guid = "<guid>",
        typeName = "<typeName>",
        uniqueAttributes = new
        {
            key = new object(),
        },
    }
});
Response response = client.AssignTermToEntities("<termGuid>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="RemoveTermAssignmentFromEntitiesAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call RemoveTermAssignmentFromEntitiesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new object()
});
Response response = await client.RemoveTermAssignmentFromEntitiesAsync("<termGuid>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call RemoveTermAssignmentFromEntitiesAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        displayText = "<displayText>",
        entityStatus = "ACTIVE",
        relationshipType = "<relationshipType>",
        relationshipAttributes = new
        {
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        },
        relationshipGuid = "<relationshipGuid>",
        relationshipStatus = "ACTIVE",
        guid = "<guid>",
        typeName = "<typeName>",
        uniqueAttributes = new
        {
            key = new object(),
        },
    }
});
Response response = await client.RemoveTermAssignmentFromEntitiesAsync("<termGuid>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="RemoveTermAssignmentFromEntities(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call RemoveTermAssignmentFromEntities.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new object()
});
Response response = client.RemoveTermAssignmentFromEntities("<termGuid>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call RemoveTermAssignmentFromEntities with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        displayText = "<displayText>",
        entityStatus = "ACTIVE",
        relationshipType = "<relationshipType>",
        relationshipAttributes = new
        {
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        },
        relationshipGuid = "<relationshipGuid>",
        relationshipStatus = "ACTIVE",
        guid = "<guid>",
        typeName = "<typeName>",
        uniqueAttributes = new
        {
            key = new object(),
        },
    }
});
Response response = client.RemoveTermAssignmentFromEntities("<termGuid>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteTermAssignmentFromEntitiesAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call DeleteTermAssignmentFromEntitiesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new object()
});
Response response = await client.DeleteTermAssignmentFromEntitiesAsync("<termGuid>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteTermAssignmentFromEntitiesAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        displayText = "<displayText>",
        entityStatus = "ACTIVE",
        relationshipType = "<relationshipType>",
        relationshipAttributes = new
        {
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        },
        relationshipGuid = "<relationshipGuid>",
        relationshipStatus = "ACTIVE",
        guid = "<guid>",
        typeName = "<typeName>",
        uniqueAttributes = new
        {
            key = new object(),
        },
    }
});
Response response = await client.DeleteTermAssignmentFromEntitiesAsync("<termGuid>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteTermAssignmentFromEntities(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call DeleteTermAssignmentFromEntities.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new object()
});
Response response = client.DeleteTermAssignmentFromEntities("<termGuid>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteTermAssignmentFromEntities with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        displayText = "<displayText>",
        entityStatus = "ACTIVE",
        relationshipType = "<relationshipType>",
        relationshipAttributes = new
        {
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        },
        relationshipGuid = "<relationshipGuid>",
        relationshipStatus = "ACTIVE",
        guid = "<guid>",
        typeName = "<typeName>",
        uniqueAttributes = new
        {
            key = new object(),
        },
    }
});
Response response = client.DeleteTermAssignmentFromEntities("<termGuid>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetRelatedTermsAsync(string,int?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetRelatedTermsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetRelatedTermsAsync("<termGuid>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<key>")[0].ToString());
]]></code>
This sample shows how to call GetRelatedTermsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetRelatedTermsAsync("<termGuid>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("termGuid").ToString());
]]></code></example>
    </member>
    <member name="GetRelatedTerms(string,int?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetRelatedTerms and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetRelatedTerms("<termGuid>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<key>")[0].ToString());
]]></code>
This sample shows how to call GetRelatedTerms with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetRelatedTerms("<termGuid>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("termGuid").ToString());
]]></code></example>
    </member>
    <member name="GetGlossaryAsync(string,RequestContext)">
      <example>
This sample shows how to call GetGlossaryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryAsync("<glossaryGuid>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetGlossaryAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryAsync("<glossaryGuid>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
    </member>
    <member name="GetGlossary(string,RequestContext)">
      <example>
This sample shows how to call GetGlossary and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossary("<glossaryGuid>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetGlossary with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossary("<glossaryGuid>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
    </member>
    <member name="UpdateGlossaryAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateGlossaryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object());
Response response = await client.UpdateGlossaryAsync("<glossaryGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call UpdateGlossaryAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    categories = new object[]
    {
        new
        {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
    language = "<language>",
    terms = new object[]
    {
        new
        {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    usage = "<usage>",
    classifications = new object[]
    {
        new
        {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new object[]
            {
                new
                {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new
            {
                key = new object(),
            },
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    guid = "<guid>",
});
Response response = await client.UpdateGlossaryAsync("<glossaryGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
    </member>
    <member name="UpdateGlossary(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateGlossary and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object());
Response response = client.UpdateGlossary("<glossaryGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call UpdateGlossary with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    categories = new object[]
    {
        new
        {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
    language = "<language>",
    terms = new object[]
    {
        new
        {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    usage = "<usage>",
    classifications = new object[]
    {
        new
        {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new object[]
            {
                new
                {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new
            {
                key = new object(),
            },
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    guid = "<guid>",
});
Response response = client.UpdateGlossary("<glossaryGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
    </member>
    <member name="DeleteGlossaryAsync(string,RequestContext)">
      <example>
This sample shows how to call DeleteGlossaryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.DeleteGlossaryAsync("<glossaryGuid>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteGlossaryAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.DeleteGlossaryAsync("<glossaryGuid>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteGlossary(string,RequestContext)">
      <example>
This sample shows how to call DeleteGlossary.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.DeleteGlossary("<glossaryGuid>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteGlossary with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.DeleteGlossary("<glossaryGuid>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetGlossaryCategoriesAsync(string,int?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetGlossaryCategoriesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryCategoriesAsync("<glossaryGuid>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetGlossaryCategoriesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryCategoriesAsync("<glossaryGuid>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
]]></code></example>
    </member>
    <member name="GetGlossaryCategories(string,int?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetGlossaryCategories and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaryCategories("<glossaryGuid>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetGlossaryCategories with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaryCategories("<glossaryGuid>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
]]></code></example>
    </member>
    <member name="GetGlossaryCategoriesHeadersAsync(string,int?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetGlossaryCategoriesHeadersAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryCategoriesHeadersAsync("<glossaryGuid>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetGlossaryCategoriesHeadersAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryCategoriesHeadersAsync("<glossaryGuid>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
]]></code></example>
    </member>
    <member name="GetGlossaryCategoriesHeaders(string,int?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetGlossaryCategoriesHeaders and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaryCategoriesHeaders("<glossaryGuid>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetGlossaryCategoriesHeaders with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaryCategoriesHeaders("<glossaryGuid>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
]]></code></example>
    </member>
    <member name="GetDetailedGlossaryAsync(string,bool?,RequestContext)">
      <example>
This sample shows how to call GetDetailedGlossaryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetDetailedGlossaryAsync("<glossaryGuid>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetDetailedGlossaryAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetDetailedGlossaryAsync("<glossaryGuid>", true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
    </member>
    <member name="GetDetailedGlossary(string,bool?,RequestContext)">
      <example>
This sample shows how to call GetDetailedGlossary and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetDetailedGlossary("<glossaryGuid>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetDetailedGlossary with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetDetailedGlossary("<glossaryGuid>", true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
    </member>
    <member name="PartialUpdateGlossaryAsync(string,RequestContent,bool?,RequestContext)">
      <example>
This sample shows how to call PartialUpdateGlossaryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    key = "<partialUpdates>",
});
Response response = await client.PartialUpdateGlossaryAsync("<glossaryGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PartialUpdateGlossaryAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    key = "<partialUpdates>",
});
Response response = await client.PartialUpdateGlossaryAsync("<glossaryGuid>", content, includeTermHierarchy: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
    </member>
    <member name="PartialUpdateGlossary(string,RequestContent,bool?,RequestContext)">
      <example>
This sample shows how to call PartialUpdateGlossary and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    key = "<partialUpdates>",
});
Response response = client.PartialUpdateGlossary("<glossaryGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PartialUpdateGlossary with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    key = "<partialUpdates>",
});
Response response = client.PartialUpdateGlossary("<glossaryGuid>", content, includeTermHierarchy: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
    </member>
    <member name="GetGlossaryTermsAsync(string,bool?,int?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetGlossaryTermsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryTermsAsync("<glossaryGuid>", null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetGlossaryTermsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryTermsAsync("<glossaryGuid>", true, 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("abbreviation").ToString());
Console.WriteLine(result[0].GetProperty("templateName")[0].ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("createTime").ToString());
Console.WriteLine(result[0].GetProperty("createdBy").ToString());
Console.WriteLine(result[0].GetProperty("updateTime").ToString());
Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
Console.WriteLine(result[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result[0].GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("examples")[0].ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("usage").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
]]></code></example>
    </member>
    <member name="GetGlossaryTerms(string,bool?,int?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetGlossaryTerms and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaryTerms("<glossaryGuid>", null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetGlossaryTerms with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaryTerms("<glossaryGuid>", true, 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("abbreviation").ToString());
Console.WriteLine(result[0].GetProperty("templateName")[0].ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("createTime").ToString());
Console.WriteLine(result[0].GetProperty("createdBy").ToString());
Console.WriteLine(result[0].GetProperty("updateTime").ToString());
Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
Console.WriteLine(result[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result[0].GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("examples")[0].ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("usage").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
]]></code></example>
    </member>
    <member name="GetGlossaryTermHeadersAsync(string,int?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetGlossaryTermHeadersAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryTermHeadersAsync("<glossaryGuid>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetGlossaryTermHeadersAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryTermHeadersAsync("<glossaryGuid>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("termGuid").ToString());
]]></code></example>
    </member>
    <member name="GetGlossaryTermHeaders(string,int?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetGlossaryTermHeaders and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaryTermHeaders("<glossaryGuid>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetGlossaryTermHeaders with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaryTermHeaders("<glossaryGuid>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("termGuid").ToString());
]]></code></example>
    </member>
    <member name="GetImportCsvOperationStatusAsync(string,RequestContext)">
      <example>
This sample shows how to call GetImportCsvOperationStatusAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetImportCsvOperationStatusAsync("<operationGuid>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetImportCsvOperationStatusAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetImportCsvOperationStatusAsync("<operationGuid>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("importedTerms").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("totalTermsDetected").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("errorMessage").ToString());
]]></code></example>
    </member>
    <member name="GetImportCsvOperationStatus(string,RequestContext)">
      <example>
This sample shows how to call GetImportCsvOperationStatus and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetImportCsvOperationStatus("<operationGuid>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetImportCsvOperationStatus with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetImportCsvOperationStatus("<operationGuid>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("importedTerms").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("totalTermsDetected").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("errorMessage").ToString());
]]></code></example>
    </member>
    <member name="ExportGlossaryTermsAsCsvAsync(string,RequestContent,bool?,RequestContext)">
      <example>
This sample shows how to call ExportGlossaryTermsAsCsvAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    "<termGuids>"
});
Response response = await client.ExportGlossaryTermsAsCsvAsync("<glossaryGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call ExportGlossaryTermsAsCsvAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    "<termGuids>"
});
Response response = await client.ExportGlossaryTermsAsCsvAsync("<glossaryGuid>", content, includeTermHierarchy: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="ExportGlossaryTermsAsCsv(string,RequestContent,bool?,RequestContext)">
      <example>
This sample shows how to call ExportGlossaryTermsAsCsv and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    "<termGuids>"
});
Response response = client.ExportGlossaryTermsAsCsv("<glossaryGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call ExportGlossaryTermsAsCsv with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    "<termGuids>"
});
Response response = client.ExportGlossaryTermsAsCsv("<glossaryGuid>", content, includeTermHierarchy: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="GetTermsByGlossaryNameAsync(string,int?,int?,bool?,RequestContext)">
      <example>
This sample shows how to call GetTermsByGlossaryNameAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetTermsByGlossaryNameAsync("<glossaryName>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetTermsByGlossaryNameAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetTermsByGlossaryNameAsync("<glossaryName>", 1234, 1234, true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("abbreviation").ToString());
Console.WriteLine(result[0].GetProperty("templateName")[0].ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("createTime").ToString());
Console.WriteLine(result[0].GetProperty("createdBy").ToString());
Console.WriteLine(result[0].GetProperty("updateTime").ToString());
Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
Console.WriteLine(result[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result[0].GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("examples")[0].ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("usage").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
]]></code></example>
    </member>
    <member name="GetTermsByGlossaryName(string,int?,int?,bool?,RequestContext)">
      <example>
This sample shows how to call GetTermsByGlossaryName and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetTermsByGlossaryName("<glossaryName>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetTermsByGlossaryName with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetTermsByGlossaryName("<glossaryName>", 1234, 1234, true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("abbreviation").ToString());
Console.WriteLine(result[0].GetProperty("templateName")[0].ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("createTime").ToString());
Console.WriteLine(result[0].GetProperty("createdBy").ToString());
Console.WriteLine(result[0].GetProperty("updateTime").ToString());
Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
Console.WriteLine(result[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result[0].GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("examples")[0].ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("usage").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
]]></code></example>
    </member>
    <member name="ImportGlossaryTermsViaCsvAsync(WaitUntil,string,RequestContent,bool?,RequestContext)">
      <example>
This sample shows how to call ImportGlossaryTermsViaCsvAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
Operation<BinaryData> operation = await client.ImportGlossaryTermsViaCsvAsync(WaitUntil.Completed, "<glossaryGuid>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call ImportGlossaryTermsViaCsvAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
Operation<BinaryData> operation = await client.ImportGlossaryTermsViaCsvAsync(WaitUntil.Completed, "<glossaryGuid>", content, includeTermHierarchy: true);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("importedTerms").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("totalTermsDetected").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("errorMessage").ToString());
]]></code></example>
    </member>
    <member name="ImportGlossaryTermsViaCsv(WaitUntil,string,RequestContent,bool?,RequestContext)">
      <example>
This sample shows how to call ImportGlossaryTermsViaCsv and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
Operation<BinaryData> operation = client.ImportGlossaryTermsViaCsv(WaitUntil.Completed, "<glossaryGuid>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call ImportGlossaryTermsViaCsv with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
Operation<BinaryData> operation = client.ImportGlossaryTermsViaCsv(WaitUntil.Completed, "<glossaryGuid>", content, includeTermHierarchy: true);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("importedTerms").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("totalTermsDetected").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("errorMessage").ToString());
]]></code></example>
    </member>
    <member name="ImportGlossaryTermsViaCsvByGlossaryNameAsync(WaitUntil,string,RequestContent,bool?,RequestContext)">
      <example>
This sample shows how to call ImportGlossaryTermsViaCsvByGlossaryNameAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
Operation<BinaryData> operation = await client.ImportGlossaryTermsViaCsvByGlossaryNameAsync(WaitUntil.Completed, "<glossaryName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call ImportGlossaryTermsViaCsvByGlossaryNameAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
Operation<BinaryData> operation = await client.ImportGlossaryTermsViaCsvByGlossaryNameAsync(WaitUntil.Completed, "<glossaryName>", content, includeTermHierarchy: true);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("importedTerms").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("totalTermsDetected").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("errorMessage").ToString());
]]></code></example>
    </member>
    <member name="ImportGlossaryTermsViaCsvByGlossaryName(WaitUntil,string,RequestContent,bool?,RequestContext)">
      <example>
This sample shows how to call ImportGlossaryTermsViaCsvByGlossaryName and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
Operation<BinaryData> operation = client.ImportGlossaryTermsViaCsvByGlossaryName(WaitUntil.Completed, "<glossaryName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call ImportGlossaryTermsViaCsvByGlossaryName with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
Operation<BinaryData> operation = client.ImportGlossaryTermsViaCsvByGlossaryName(WaitUntil.Completed, "<glossaryName>", content, includeTermHierarchy: true);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("importedTerms").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("totalTermsDetected").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("errorMessage").ToString());
]]></code></example>
    </member>
  </members>
</doc>