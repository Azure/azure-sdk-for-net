<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="CreateOrUpdateAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdateAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new {};

Response response = await client.CreateOrUpdateAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdateAsync with all request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new {
    entity = new {
        businessAttributes = new {
            key = new {},
        },
        classifications = new[] {
            new {
                entityGuid = "<entityGuid>",
                entityStatus = "ACTIVE",
                removePropagationsOnEntityDelete = true,
                validityPeriods = new[] {
                    new {
                        endTime = "<endTime>",
                        startTime = "<startTime>",
                        timeZone = "<timeZone>",
                    }
                },
                source = "<source>",
                sourceDetails = new {
                    key = new {},
                },
                attributes = new {
                    key = new {},
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            }
        },
        createTime = 123.45f,
        createdBy = "<createdBy>",
        customAttributes = new {
            key = "<String>",
        },
        guid = "<guid>",
        homeId = "<homeId>",
        isIncomplete = true,
        labels = new[] {
            "<String>"
        },
        meanings = new[] {
            new {
                confidence = 1234,
                createdBy = "<createdBy>",
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DISCOVERED",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        provenanceType = 123.45f,
        proxy = true,
        relationshipAttributes = new {
            key = new {},
        },
        status = "ACTIVE",
        updateTime = 123.45f,
        updatedBy = "<updatedBy>",
        version = 123.45f,
        source = "<source>",
        sourceDetails = new {
            key = new {},
        },
        contacts = new {
            key = new[] {
                new {
                    id = "<id>",
                    info = "<info>",
                }
            },
        },
        attributes = new {
            key = new {},
        },
        typeName = "<typeName>",
        lastModifiedTS = "<lastModifiedTS>",
    },
    referredEntities = new {
        key = new {
            businessAttributes = new {
                key = new {},
            },
            classifications = new[] {
                new {
                    entityGuid = "<entityGuid>",
                    entityStatus = "ACTIVE",
                    removePropagationsOnEntityDelete = true,
                    validityPeriods = new[] {
                        new {
                            endTime = "<endTime>",
                            startTime = "<startTime>",
                            timeZone = "<timeZone>",
                        }
                    },
                    source = "<source>",
                    sourceDetails = new {
                        key = new {},
                    },
                    attributes = new {
                        key = new {},
                    },
                    typeName = "<typeName>",
                    lastModifiedTS = "<lastModifiedTS>",
                }
            },
            createTime = 123.45f,
            createdBy = "<createdBy>",
            customAttributes = new {
                key = "<String>",
            },
            guid = "<guid>",
            homeId = "<homeId>",
            isIncomplete = true,
            labels = new[] {
                "<String>"
            },
            meanings = new[] {
                new {
                    confidence = 1234,
                    createdBy = "<createdBy>",
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DISCOVERED",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            provenanceType = 123.45f,
            proxy = true,
            relationshipAttributes = new {
                key = new {},
            },
            status = "ACTIVE",
            updateTime = 123.45f,
            updatedBy = "<updatedBy>",
            version = 123.45f,
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            contacts = new {
                key = new[] {
                    new {
                        id = "<id>",
                        info = "<info>",
                    }
                },
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        },
    },
};

Response response = await client.CreateOrUpdateAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guidAssignments").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classificationNames")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meaningNames")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classificationNames")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meaningNames")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("lastModifiedTS").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>AtlasEntityWithExtInfo</c>:
<code>{
  entity: {
    businessAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. Business Attributes
    classifications: [
      {
        entityGuid: string, # Optional. The GUID of the entity.
        entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        validityPeriods: [
          {
            endTime: string, # Optional. The end of the time boundary.
            startTime: string, # Optional. The start of the time boundary.
            timeZone: string, # Optional. The timezone of the time boundary.
          }
        ], # Optional. An array of time boundaries indicating validity periods.
        source: string, # Optional. indicate the source who create the classification detail
        sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        typeName: string, # Optional. The name of the type.
        lastModifiedTS: string, # Optional. ETag for concurrency control.
      }
    ], # Optional. An array of classifications.
    createTime: number, # Optional. The created time of the record.
    createdBy: string, # Optional. The user who created the record.
    customAttributes: Dictionary&lt;string, string&gt;, # Optional. Custom Attribute
    guid: string, # Optional. The GUID of the entity.
    homeId: string, # Optional. The home ID of the entity.
    isIncomplete: boolean, # Optional. Whether it is a shell entity
    labels: [string], # Optional. labels
    meanings: [
      {
        confidence: number, # Optional. The confidence of the term assignment.
        createdBy: string, # Optional. The user who created the record.
        description: string, # Optional. The description of the term assignment.
        displayText: string, # Optional. The display text.
        expression: string, # Optional. The expression of the term assignment.
        relationGuid: string, # Optional. The GUID of the relationship.
        source: string, # Optional. The source of the term.
        status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        steward: string, # Optional. The steward of the term.
        termGuid: string, # Optional. The GUID of the term.
      }
    ], # Optional. An array of term assignment headers indicating the meanings of the entity.
    provenanceType: number, # Optional. Used to record the provenance of an instance of an entity or relationship.
    proxy: boolean, # Optional. Determines if there&apos;s a proxy.
    relationshipAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of relationship.
    status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
    updateTime: number, # Optional. The update time of the record.
    updatedBy: string, # Optional. The user who updated the record.
    version: number, # Optional. The version of the entity.
    source: string, # Optional. indicate the source who create the classification detail
    sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
    contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Owner.
    attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
    typeName: string, # Optional. The name of the type.
    lastModifiedTS: string, # Optional. ETag for concurrency control.
  }, # Optional. An instance of an entity - like hive_table, hive_database.
  referredEntities: Dictionary&lt;string, AtlasEntity&gt;, # Optional. The referred entities.
}
</code>

Response Body:

Schema for <c>EntityMutationResponse</c>:
<code>{
  guidAssignments: Dictionary&lt;string, string&gt;, # Optional. A map of GUID assignments with entities.
  mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;, # Optional. The entity headers of mutated entities.
  partialUpdatedEntities: [
    {
      classificationNames: [string], # Optional. An array of classification names.
      classifications: [
        {
          entityGuid: string, # Optional. The GUID of the entity.
          entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
          removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
          validityPeriods: [
            {
              endTime: string, # Optional. The end of the time boundary.
              startTime: string, # Optional. The start of the time boundary.
              timeZone: string, # Optional. The timezone of the time boundary.
            }
          ], # Optional. An array of time boundaries indicating validity periods.
          source: string, # Optional. indicate the source who create the classification detail
          sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
          attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
          typeName: string, # Optional. The name of the type.
          lastModifiedTS: string, # Optional. ETag for concurrency control.
        }
      ], # Optional. An array of classifications.
      displayText: string, # Optional. The display text.
      guid: string, # Optional. The GUID of the record.
      isIncomplete: boolean, # Optional. Whether it is a shell entity
      labels: [string], # Optional. labels
      meaningNames: [string], # Optional. An array of meanings.
      meanings: [
        {
          confidence: number, # Optional. The confidence of the term assignment.
          createdBy: string, # Optional. The user who created the record.
          description: string, # Optional. The description of the term assignment.
          displayText: string, # Optional. The display text.
          expression: string, # Optional. The expression of the term assignment.
          relationGuid: string, # Optional. The GUID of the relationship.
          source: string, # Optional. The source of the term.
          status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
          steward: string, # Optional. The steward of the term.
          termGuid: string, # Optional. The GUID of the term.
        }
      ], # Optional. An array of term assignment headers.
      status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of entity headers that partially updated.
}
</code>

</remarks>
    </member>
    <member name="CreateOrUpdate(RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdate and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new {};

Response response = client.CreateOrUpdate(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdate with all request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new {
    entity = new {
        businessAttributes = new {
            key = new {},
        },
        classifications = new[] {
            new {
                entityGuid = "<entityGuid>",
                entityStatus = "ACTIVE",
                removePropagationsOnEntityDelete = true,
                validityPeriods = new[] {
                    new {
                        endTime = "<endTime>",
                        startTime = "<startTime>",
                        timeZone = "<timeZone>",
                    }
                },
                source = "<source>",
                sourceDetails = new {
                    key = new {},
                },
                attributes = new {
                    key = new {},
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            }
        },
        createTime = 123.45f,
        createdBy = "<createdBy>",
        customAttributes = new {
            key = "<String>",
        },
        guid = "<guid>",
        homeId = "<homeId>",
        isIncomplete = true,
        labels = new[] {
            "<String>"
        },
        meanings = new[] {
            new {
                confidence = 1234,
                createdBy = "<createdBy>",
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DISCOVERED",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        provenanceType = 123.45f,
        proxy = true,
        relationshipAttributes = new {
            key = new {},
        },
        status = "ACTIVE",
        updateTime = 123.45f,
        updatedBy = "<updatedBy>",
        version = 123.45f,
        source = "<source>",
        sourceDetails = new {
            key = new {},
        },
        contacts = new {
            key = new[] {
                new {
                    id = "<id>",
                    info = "<info>",
                }
            },
        },
        attributes = new {
            key = new {},
        },
        typeName = "<typeName>",
        lastModifiedTS = "<lastModifiedTS>",
    },
    referredEntities = new {
        key = new {
            businessAttributes = new {
                key = new {},
            },
            classifications = new[] {
                new {
                    entityGuid = "<entityGuid>",
                    entityStatus = "ACTIVE",
                    removePropagationsOnEntityDelete = true,
                    validityPeriods = new[] {
                        new {
                            endTime = "<endTime>",
                            startTime = "<startTime>",
                            timeZone = "<timeZone>",
                        }
                    },
                    source = "<source>",
                    sourceDetails = new {
                        key = new {},
                    },
                    attributes = new {
                        key = new {},
                    },
                    typeName = "<typeName>",
                    lastModifiedTS = "<lastModifiedTS>",
                }
            },
            createTime = 123.45f,
            createdBy = "<createdBy>",
            customAttributes = new {
                key = "<String>",
            },
            guid = "<guid>",
            homeId = "<homeId>",
            isIncomplete = true,
            labels = new[] {
                "<String>"
            },
            meanings = new[] {
                new {
                    confidence = 1234,
                    createdBy = "<createdBy>",
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DISCOVERED",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            provenanceType = 123.45f,
            proxy = true,
            relationshipAttributes = new {
                key = new {},
            },
            status = "ACTIVE",
            updateTime = 123.45f,
            updatedBy = "<updatedBy>",
            version = 123.45f,
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            contacts = new {
                key = new[] {
                    new {
                        id = "<id>",
                        info = "<info>",
                    }
                },
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        },
    },
};

Response response = client.CreateOrUpdate(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guidAssignments").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classificationNames")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meaningNames")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classificationNames")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meaningNames")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("lastModifiedTS").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>AtlasEntityWithExtInfo</c>:
<code>{
  entity: {
    businessAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. Business Attributes
    classifications: [
      {
        entityGuid: string, # Optional. The GUID of the entity.
        entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        validityPeriods: [
          {
            endTime: string, # Optional. The end of the time boundary.
            startTime: string, # Optional. The start of the time boundary.
            timeZone: string, # Optional. The timezone of the time boundary.
          }
        ], # Optional. An array of time boundaries indicating validity periods.
        source: string, # Optional. indicate the source who create the classification detail
        sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        typeName: string, # Optional. The name of the type.
        lastModifiedTS: string, # Optional. ETag for concurrency control.
      }
    ], # Optional. An array of classifications.
    createTime: number, # Optional. The created time of the record.
    createdBy: string, # Optional. The user who created the record.
    customAttributes: Dictionary&lt;string, string&gt;, # Optional. Custom Attribute
    guid: string, # Optional. The GUID of the entity.
    homeId: string, # Optional. The home ID of the entity.
    isIncomplete: boolean, # Optional. Whether it is a shell entity
    labels: [string], # Optional. labels
    meanings: [
      {
        confidence: number, # Optional. The confidence of the term assignment.
        createdBy: string, # Optional. The user who created the record.
        description: string, # Optional. The description of the term assignment.
        displayText: string, # Optional. The display text.
        expression: string, # Optional. The expression of the term assignment.
        relationGuid: string, # Optional. The GUID of the relationship.
        source: string, # Optional. The source of the term.
        status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        steward: string, # Optional. The steward of the term.
        termGuid: string, # Optional. The GUID of the term.
      }
    ], # Optional. An array of term assignment headers indicating the meanings of the entity.
    provenanceType: number, # Optional. Used to record the provenance of an instance of an entity or relationship.
    proxy: boolean, # Optional. Determines if there&apos;s a proxy.
    relationshipAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of relationship.
    status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
    updateTime: number, # Optional. The update time of the record.
    updatedBy: string, # Optional. The user who updated the record.
    version: number, # Optional. The version of the entity.
    source: string, # Optional. indicate the source who create the classification detail
    sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
    contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Owner.
    attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
    typeName: string, # Optional. The name of the type.
    lastModifiedTS: string, # Optional. ETag for concurrency control.
  }, # Optional. An instance of an entity - like hive_table, hive_database.
  referredEntities: Dictionary&lt;string, AtlasEntity&gt;, # Optional. The referred entities.
}
</code>

Response Body:

Schema for <c>EntityMutationResponse</c>:
<code>{
  guidAssignments: Dictionary&lt;string, string&gt;, # Optional. A map of GUID assignments with entities.
  mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;, # Optional. The entity headers of mutated entities.
  partialUpdatedEntities: [
    {
      classificationNames: [string], # Optional. An array of classification names.
      classifications: [
        {
          entityGuid: string, # Optional. The GUID of the entity.
          entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
          removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
          validityPeriods: [
            {
              endTime: string, # Optional. The end of the time boundary.
              startTime: string, # Optional. The start of the time boundary.
              timeZone: string, # Optional. The timezone of the time boundary.
            }
          ], # Optional. An array of time boundaries indicating validity periods.
          source: string, # Optional. indicate the source who create the classification detail
          sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
          attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
          typeName: string, # Optional. The name of the type.
          lastModifiedTS: string, # Optional. ETag for concurrency control.
        }
      ], # Optional. An array of classifications.
      displayText: string, # Optional. The display text.
      guid: string, # Optional. The GUID of the record.
      isIncomplete: boolean, # Optional. Whether it is a shell entity
      labels: [string], # Optional. labels
      meaningNames: [string], # Optional. An array of meanings.
      meanings: [
        {
          confidence: number, # Optional. The confidence of the term assignment.
          createdBy: string, # Optional. The user who created the record.
          description: string, # Optional. The description of the term assignment.
          displayText: string, # Optional. The display text.
          expression: string, # Optional. The expression of the term assignment.
          relationGuid: string, # Optional. The GUID of the relationship.
          source: string, # Optional. The source of the term.
          status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
          steward: string, # Optional. The steward of the term.
          termGuid: string, # Optional. The GUID of the term.
        }
      ], # Optional. An array of term assignment headers.
      status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of entity headers that partially updated.
}
</code>

</remarks>
    </member>
    <member name="GetByGuidsAsync(IEnumerable,Boolean,Boolean,IEnumerable,RequestContext)">
<example>
This sample shows how to call GetByGuidsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

Response response = await client.GetByGuidsAsync(new String[]{"<guids>"});

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetByGuidsAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

Response response = await client.GetByGuidsAsync(new String[]{"<guids>"}, true, true, new String[]{"<excludeRelationshipTypes>"});

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("businessAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("customAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("homeId").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("provenanceType").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("proxy").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("relationshipAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("businessAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("customAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("homeId").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("provenanceType").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("proxy").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("relationshipAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("lastModifiedTS").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasEntitiesWithExtInfo</c>:
<code>{
  entities: [
    {
      businessAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. Business Attributes
      classifications: [
        {
          entityGuid: string, # Optional. The GUID of the entity.
          entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
          removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
          validityPeriods: [
            {
              endTime: string, # Optional. The end of the time boundary.
              startTime: string, # Optional. The start of the time boundary.
              timeZone: string, # Optional. The timezone of the time boundary.
            }
          ], # Optional. An array of time boundaries indicating validity periods.
          source: string, # Optional. indicate the source who create the classification detail
          sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
          attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
          typeName: string, # Optional. The name of the type.
          lastModifiedTS: string, # Optional. ETag for concurrency control.
        }
      ], # Optional. An array of classifications.
      createTime: number, # Optional. The created time of the record.
      createdBy: string, # Optional. The user who created the record.
      customAttributes: Dictionary&lt;string, string&gt;, # Optional. Custom Attribute
      guid: string, # Optional. The GUID of the entity.
      homeId: string, # Optional. The home ID of the entity.
      isIncomplete: boolean, # Optional. Whether it is a shell entity
      labels: [string], # Optional. labels
      meanings: [
        {
          confidence: number, # Optional. The confidence of the term assignment.
          createdBy: string, # Optional. The user who created the record.
          description: string, # Optional. The description of the term assignment.
          displayText: string, # Optional. The display text.
          expression: string, # Optional. The expression of the term assignment.
          relationGuid: string, # Optional. The GUID of the relationship.
          source: string, # Optional. The source of the term.
          status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
          steward: string, # Optional. The steward of the term.
          termGuid: string, # Optional. The GUID of the term.
        }
      ], # Optional. An array of term assignment headers indicating the meanings of the entity.
      provenanceType: number, # Optional. Used to record the provenance of an instance of an entity or relationship.
      proxy: boolean, # Optional. Determines if there&apos;s a proxy.
      relationshipAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of relationship.
      status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      updateTime: number, # Optional. The update time of the record.
      updatedBy: string, # Optional. The user who updated the record.
      version: number, # Optional. The version of the entity.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Owner.
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of entities.
  referredEntities: Dictionary&lt;string, AtlasEntity&gt;, # Optional. The referred entities.
}
</code>

</remarks>
    </member>
    <member name="GetByGuids(IEnumerable,Boolean,Boolean,IEnumerable,RequestContext)">
<example>
This sample shows how to call GetByGuids with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

Response response = client.GetByGuids(new String[]{"<guids>"});

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetByGuids with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

Response response = client.GetByGuids(new String[]{"<guids>"}, true, true, new String[]{"<excludeRelationshipTypes>"});

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("businessAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("customAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("homeId").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("provenanceType").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("proxy").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("relationshipAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("businessAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("customAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("homeId").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("provenanceType").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("proxy").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("relationshipAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("lastModifiedTS").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasEntitiesWithExtInfo</c>:
<code>{
  entities: [
    {
      businessAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. Business Attributes
      classifications: [
        {
          entityGuid: string, # Optional. The GUID of the entity.
          entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
          removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
          validityPeriods: [
            {
              endTime: string, # Optional. The end of the time boundary.
              startTime: string, # Optional. The start of the time boundary.
              timeZone: string, # Optional. The timezone of the time boundary.
            }
          ], # Optional. An array of time boundaries indicating validity periods.
          source: string, # Optional. indicate the source who create the classification detail
          sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
          attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
          typeName: string, # Optional. The name of the type.
          lastModifiedTS: string, # Optional. ETag for concurrency control.
        }
      ], # Optional. An array of classifications.
      createTime: number, # Optional. The created time of the record.
      createdBy: string, # Optional. The user who created the record.
      customAttributes: Dictionary&lt;string, string&gt;, # Optional. Custom Attribute
      guid: string, # Optional. The GUID of the entity.
      homeId: string, # Optional. The home ID of the entity.
      isIncomplete: boolean, # Optional. Whether it is a shell entity
      labels: [string], # Optional. labels
      meanings: [
        {
          confidence: number, # Optional. The confidence of the term assignment.
          createdBy: string, # Optional. The user who created the record.
          description: string, # Optional. The description of the term assignment.
          displayText: string, # Optional. The display text.
          expression: string, # Optional. The expression of the term assignment.
          relationGuid: string, # Optional. The GUID of the relationship.
          source: string, # Optional. The source of the term.
          status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
          steward: string, # Optional. The steward of the term.
          termGuid: string, # Optional. The GUID of the term.
        }
      ], # Optional. An array of term assignment headers indicating the meanings of the entity.
      provenanceType: number, # Optional. Used to record the provenance of an instance of an entity or relationship.
      proxy: boolean, # Optional. Determines if there&apos;s a proxy.
      relationshipAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of relationship.
      status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      updateTime: number, # Optional. The update time of the record.
      updatedBy: string, # Optional. The user who updated the record.
      version: number, # Optional. The version of the entity.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Owner.
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of entities.
  referredEntities: Dictionary&lt;string, AtlasEntity&gt;, # Optional. The referred entities.
}
</code>

</remarks>
    </member>
    <member name="CreateOrUpdateEntitiesAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdateEntitiesAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new {};

Response response = await client.CreateOrUpdateEntitiesAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdateEntitiesAsync with all request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new {
    entities = new[] {
        new {
            businessAttributes = new {
                key = new {},
            },
            classifications = new[] {
                new {
                    entityGuid = "<entityGuid>",
                    entityStatus = "ACTIVE",
                    removePropagationsOnEntityDelete = true,
                    validityPeriods = new[] {
                        new {
                            endTime = "<endTime>",
                            startTime = "<startTime>",
                            timeZone = "<timeZone>",
                        }
                    },
                    source = "<source>",
                    sourceDetails = new {
                        key = new {},
                    },
                    attributes = new {
                        key = new {},
                    },
                    typeName = "<typeName>",
                    lastModifiedTS = "<lastModifiedTS>",
                }
            },
            createTime = 123.45f,
            createdBy = "<createdBy>",
            customAttributes = new {
                key = "<String>",
            },
            guid = "<guid>",
            homeId = "<homeId>",
            isIncomplete = true,
            labels = new[] {
                "<String>"
            },
            meanings = new[] {
                new {
                    confidence = 1234,
                    createdBy = "<createdBy>",
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DISCOVERED",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            provenanceType = 123.45f,
            proxy = true,
            relationshipAttributes = new {
                key = new {},
            },
            status = "ACTIVE",
            updateTime = 123.45f,
            updatedBy = "<updatedBy>",
            version = 123.45f,
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            contacts = new {
                key = new[] {
                    new {
                        id = "<id>",
                        info = "<info>",
                    }
                },
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
    referredEntities = new {
        key = new {
            businessAttributes = new {
                key = new {},
            },
            classifications = new[] {
                new {
                    entityGuid = "<entityGuid>",
                    entityStatus = "ACTIVE",
                    removePropagationsOnEntityDelete = true,
                    validityPeriods = new[] {
                        new {
                            endTime = "<endTime>",
                            startTime = "<startTime>",
                            timeZone = "<timeZone>",
                        }
                    },
                    source = "<source>",
                    sourceDetails = new {
                        key = new {},
                    },
                    attributes = new {
                        key = new {},
                    },
                    typeName = "<typeName>",
                    lastModifiedTS = "<lastModifiedTS>",
                }
            },
            createTime = 123.45f,
            createdBy = "<createdBy>",
            customAttributes = new {
                key = "<String>",
            },
            guid = "<guid>",
            homeId = "<homeId>",
            isIncomplete = true,
            labels = new[] {
                "<String>"
            },
            meanings = new[] {
                new {
                    confidence = 1234,
                    createdBy = "<createdBy>",
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DISCOVERED",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            provenanceType = 123.45f,
            proxy = true,
            relationshipAttributes = new {
                key = new {},
            },
            status = "ACTIVE",
            updateTime = 123.45f,
            updatedBy = "<updatedBy>",
            version = 123.45f,
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            contacts = new {
                key = new[] {
                    new {
                        id = "<id>",
                        info = "<info>",
                    }
                },
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        },
    },
};

Response response = await client.CreateOrUpdateEntitiesAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guidAssignments").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classificationNames")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meaningNames")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classificationNames")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meaningNames")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("lastModifiedTS").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>AtlasEntitiesWithExtInfo</c>:
<code>{
  entities: [
    {
      businessAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. Business Attributes
      classifications: [
        {
          entityGuid: string, # Optional. The GUID of the entity.
          entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
          removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
          validityPeriods: [
            {
              endTime: string, # Optional. The end of the time boundary.
              startTime: string, # Optional. The start of the time boundary.
              timeZone: string, # Optional. The timezone of the time boundary.
            }
          ], # Optional. An array of time boundaries indicating validity periods.
          source: string, # Optional. indicate the source who create the classification detail
          sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
          attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
          typeName: string, # Optional. The name of the type.
          lastModifiedTS: string, # Optional. ETag for concurrency control.
        }
      ], # Optional. An array of classifications.
      createTime: number, # Optional. The created time of the record.
      createdBy: string, # Optional. The user who created the record.
      customAttributes: Dictionary&lt;string, string&gt;, # Optional. Custom Attribute
      guid: string, # Optional. The GUID of the entity.
      homeId: string, # Optional. The home ID of the entity.
      isIncomplete: boolean, # Optional. Whether it is a shell entity
      labels: [string], # Optional. labels
      meanings: [
        {
          confidence: number, # Optional. The confidence of the term assignment.
          createdBy: string, # Optional. The user who created the record.
          description: string, # Optional. The description of the term assignment.
          displayText: string, # Optional. The display text.
          expression: string, # Optional. The expression of the term assignment.
          relationGuid: string, # Optional. The GUID of the relationship.
          source: string, # Optional. The source of the term.
          status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
          steward: string, # Optional. The steward of the term.
          termGuid: string, # Optional. The GUID of the term.
        }
      ], # Optional. An array of term assignment headers indicating the meanings of the entity.
      provenanceType: number, # Optional. Used to record the provenance of an instance of an entity or relationship.
      proxy: boolean, # Optional. Determines if there&apos;s a proxy.
      relationshipAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of relationship.
      status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      updateTime: number, # Optional. The update time of the record.
      updatedBy: string, # Optional. The user who updated the record.
      version: number, # Optional. The version of the entity.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Owner.
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of entities.
  referredEntities: Dictionary&lt;string, AtlasEntity&gt;, # Optional. The referred entities.
}
</code>

Response Body:

Schema for <c>EntityMutationResponse</c>:
<code>{
  guidAssignments: Dictionary&lt;string, string&gt;, # Optional. A map of GUID assignments with entities.
  mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;, # Optional. The entity headers of mutated entities.
  partialUpdatedEntities: [
    {
      classificationNames: [string], # Optional. An array of classification names.
      classifications: [
        {
          entityGuid: string, # Optional. The GUID of the entity.
          entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
          removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
          validityPeriods: [
            {
              endTime: string, # Optional. The end of the time boundary.
              startTime: string, # Optional. The start of the time boundary.
              timeZone: string, # Optional. The timezone of the time boundary.
            }
          ], # Optional. An array of time boundaries indicating validity periods.
          source: string, # Optional. indicate the source who create the classification detail
          sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
          attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
          typeName: string, # Optional. The name of the type.
          lastModifiedTS: string, # Optional. ETag for concurrency control.
        }
      ], # Optional. An array of classifications.
      displayText: string, # Optional. The display text.
      guid: string, # Optional. The GUID of the record.
      isIncomplete: boolean, # Optional. Whether it is a shell entity
      labels: [string], # Optional. labels
      meaningNames: [string], # Optional. An array of meanings.
      meanings: [
        {
          confidence: number, # Optional. The confidence of the term assignment.
          createdBy: string, # Optional. The user who created the record.
          description: string, # Optional. The description of the term assignment.
          displayText: string, # Optional. The display text.
          expression: string, # Optional. The expression of the term assignment.
          relationGuid: string, # Optional. The GUID of the relationship.
          source: string, # Optional. The source of the term.
          status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
          steward: string, # Optional. The steward of the term.
          termGuid: string, # Optional. The GUID of the term.
        }
      ], # Optional. An array of term assignment headers.
      status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of entity headers that partially updated.
}
</code>

</remarks>
    </member>
    <member name="CreateOrUpdateEntities(RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdateEntities and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new {};

Response response = client.CreateOrUpdateEntities(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdateEntities with all request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new {
    entities = new[] {
        new {
            businessAttributes = new {
                key = new {},
            },
            classifications = new[] {
                new {
                    entityGuid = "<entityGuid>",
                    entityStatus = "ACTIVE",
                    removePropagationsOnEntityDelete = true,
                    validityPeriods = new[] {
                        new {
                            endTime = "<endTime>",
                            startTime = "<startTime>",
                            timeZone = "<timeZone>",
                        }
                    },
                    source = "<source>",
                    sourceDetails = new {
                        key = new {},
                    },
                    attributes = new {
                        key = new {},
                    },
                    typeName = "<typeName>",
                    lastModifiedTS = "<lastModifiedTS>",
                }
            },
            createTime = 123.45f,
            createdBy = "<createdBy>",
            customAttributes = new {
                key = "<String>",
            },
            guid = "<guid>",
            homeId = "<homeId>",
            isIncomplete = true,
            labels = new[] {
                "<String>"
            },
            meanings = new[] {
                new {
                    confidence = 1234,
                    createdBy = "<createdBy>",
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DISCOVERED",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            provenanceType = 123.45f,
            proxy = true,
            relationshipAttributes = new {
                key = new {},
            },
            status = "ACTIVE",
            updateTime = 123.45f,
            updatedBy = "<updatedBy>",
            version = 123.45f,
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            contacts = new {
                key = new[] {
                    new {
                        id = "<id>",
                        info = "<info>",
                    }
                },
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
    referredEntities = new {
        key = new {
            businessAttributes = new {
                key = new {},
            },
            classifications = new[] {
                new {
                    entityGuid = "<entityGuid>",
                    entityStatus = "ACTIVE",
                    removePropagationsOnEntityDelete = true,
                    validityPeriods = new[] {
                        new {
                            endTime = "<endTime>",
                            startTime = "<startTime>",
                            timeZone = "<timeZone>",
                        }
                    },
                    source = "<source>",
                    sourceDetails = new {
                        key = new {},
                    },
                    attributes = new {
                        key = new {},
                    },
                    typeName = "<typeName>",
                    lastModifiedTS = "<lastModifiedTS>",
                }
            },
            createTime = 123.45f,
            createdBy = "<createdBy>",
            customAttributes = new {
                key = "<String>",
            },
            guid = "<guid>",
            homeId = "<homeId>",
            isIncomplete = true,
            labels = new[] {
                "<String>"
            },
            meanings = new[] {
                new {
                    confidence = 1234,
                    createdBy = "<createdBy>",
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DISCOVERED",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            provenanceType = 123.45f,
            proxy = true,
            relationshipAttributes = new {
                key = new {},
            },
            status = "ACTIVE",
            updateTime = 123.45f,
            updatedBy = "<updatedBy>",
            version = 123.45f,
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            contacts = new {
                key = new[] {
                    new {
                        id = "<id>",
                        info = "<info>",
                    }
                },
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        },
    },
};

Response response = client.CreateOrUpdateEntities(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guidAssignments").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classificationNames")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meaningNames")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classificationNames")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meaningNames")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("lastModifiedTS").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>AtlasEntitiesWithExtInfo</c>:
<code>{
  entities: [
    {
      businessAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. Business Attributes
      classifications: [
        {
          entityGuid: string, # Optional. The GUID of the entity.
          entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
          removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
          validityPeriods: [
            {
              endTime: string, # Optional. The end of the time boundary.
              startTime: string, # Optional. The start of the time boundary.
              timeZone: string, # Optional. The timezone of the time boundary.
            }
          ], # Optional. An array of time boundaries indicating validity periods.
          source: string, # Optional. indicate the source who create the classification detail
          sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
          attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
          typeName: string, # Optional. The name of the type.
          lastModifiedTS: string, # Optional. ETag for concurrency control.
        }
      ], # Optional. An array of classifications.
      createTime: number, # Optional. The created time of the record.
      createdBy: string, # Optional. The user who created the record.
      customAttributes: Dictionary&lt;string, string&gt;, # Optional. Custom Attribute
      guid: string, # Optional. The GUID of the entity.
      homeId: string, # Optional. The home ID of the entity.
      isIncomplete: boolean, # Optional. Whether it is a shell entity
      labels: [string], # Optional. labels
      meanings: [
        {
          confidence: number, # Optional. The confidence of the term assignment.
          createdBy: string, # Optional. The user who created the record.
          description: string, # Optional. The description of the term assignment.
          displayText: string, # Optional. The display text.
          expression: string, # Optional. The expression of the term assignment.
          relationGuid: string, # Optional. The GUID of the relationship.
          source: string, # Optional. The source of the term.
          status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
          steward: string, # Optional. The steward of the term.
          termGuid: string, # Optional. The GUID of the term.
        }
      ], # Optional. An array of term assignment headers indicating the meanings of the entity.
      provenanceType: number, # Optional. Used to record the provenance of an instance of an entity or relationship.
      proxy: boolean, # Optional. Determines if there&apos;s a proxy.
      relationshipAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of relationship.
      status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      updateTime: number, # Optional. The update time of the record.
      updatedBy: string, # Optional. The user who updated the record.
      version: number, # Optional. The version of the entity.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Owner.
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of entities.
  referredEntities: Dictionary&lt;string, AtlasEntity&gt;, # Optional. The referred entities.
}
</code>

Response Body:

Schema for <c>EntityMutationResponse</c>:
<code>{
  guidAssignments: Dictionary&lt;string, string&gt;, # Optional. A map of GUID assignments with entities.
  mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;, # Optional. The entity headers of mutated entities.
  partialUpdatedEntities: [
    {
      classificationNames: [string], # Optional. An array of classification names.
      classifications: [
        {
          entityGuid: string, # Optional. The GUID of the entity.
          entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
          removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
          validityPeriods: [
            {
              endTime: string, # Optional. The end of the time boundary.
              startTime: string, # Optional. The start of the time boundary.
              timeZone: string, # Optional. The timezone of the time boundary.
            }
          ], # Optional. An array of time boundaries indicating validity periods.
          source: string, # Optional. indicate the source who create the classification detail
          sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
          attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
          typeName: string, # Optional. The name of the type.
          lastModifiedTS: string, # Optional. ETag for concurrency control.
        }
      ], # Optional. An array of classifications.
      displayText: string, # Optional. The display text.
      guid: string, # Optional. The GUID of the record.
      isIncomplete: boolean, # Optional. Whether it is a shell entity
      labels: [string], # Optional. labels
      meaningNames: [string], # Optional. An array of meanings.
      meanings: [
        {
          confidence: number, # Optional. The confidence of the term assignment.
          createdBy: string, # Optional. The user who created the record.
          description: string, # Optional. The description of the term assignment.
          displayText: string, # Optional. The display text.
          expression: string, # Optional. The expression of the term assignment.
          relationGuid: string, # Optional. The GUID of the relationship.
          source: string, # Optional. The source of the term.
          status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
          steward: string, # Optional. The steward of the term.
          termGuid: string, # Optional. The GUID of the term.
        }
      ], # Optional. An array of term assignment headers.
      status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of entity headers that partially updated.
}
</code>

</remarks>
    </member>
    <member name="DeleteByGuidsAsync(IEnumerable,RequestContext)">
<example>
This sample shows how to call DeleteByGuidsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

Response response = await client.DeleteByGuidsAsync(new String[]{"<guids>"});

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guidAssignments").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classificationNames")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meaningNames")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classificationNames")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meaningNames")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("lastModifiedTS").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>EntityMutationResponse</c>:
<code>{
  guidAssignments: Dictionary&lt;string, string&gt;, # Optional. A map of GUID assignments with entities.
  mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;, # Optional. The entity headers of mutated entities.
  partialUpdatedEntities: [
    {
      classificationNames: [string], # Optional. An array of classification names.
      classifications: [
        {
          entityGuid: string, # Optional. The GUID of the entity.
          entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
          removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
          validityPeriods: [
            {
              endTime: string, # Optional. The end of the time boundary.
              startTime: string, # Optional. The start of the time boundary.
              timeZone: string, # Optional. The timezone of the time boundary.
            }
          ], # Optional. An array of time boundaries indicating validity periods.
          source: string, # Optional. indicate the source who create the classification detail
          sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
          attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
          typeName: string, # Optional. The name of the type.
          lastModifiedTS: string, # Optional. ETag for concurrency control.
        }
      ], # Optional. An array of classifications.
      displayText: string, # Optional. The display text.
      guid: string, # Optional. The GUID of the record.
      isIncomplete: boolean, # Optional. Whether it is a shell entity
      labels: [string], # Optional. labels
      meaningNames: [string], # Optional. An array of meanings.
      meanings: [
        {
          confidence: number, # Optional. The confidence of the term assignment.
          createdBy: string, # Optional. The user who created the record.
          description: string, # Optional. The description of the term assignment.
          displayText: string, # Optional. The display text.
          expression: string, # Optional. The expression of the term assignment.
          relationGuid: string, # Optional. The GUID of the relationship.
          source: string, # Optional. The source of the term.
          status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
          steward: string, # Optional. The steward of the term.
          termGuid: string, # Optional. The GUID of the term.
        }
      ], # Optional. An array of term assignment headers.
      status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of entity headers that partially updated.
}
</code>

</remarks>
    </member>
    <member name="DeleteByGuids(IEnumerable,RequestContext)">
<example>
This sample shows how to call DeleteByGuids with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

Response response = client.DeleteByGuids(new String[]{"<guids>"});

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guidAssignments").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classificationNames")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meaningNames")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classificationNames")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meaningNames")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("lastModifiedTS").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>EntityMutationResponse</c>:
<code>{
  guidAssignments: Dictionary&lt;string, string&gt;, # Optional. A map of GUID assignments with entities.
  mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;, # Optional. The entity headers of mutated entities.
  partialUpdatedEntities: [
    {
      classificationNames: [string], # Optional. An array of classification names.
      classifications: [
        {
          entityGuid: string, # Optional. The GUID of the entity.
          entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
          removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
          validityPeriods: [
            {
              endTime: string, # Optional. The end of the time boundary.
              startTime: string, # Optional. The start of the time boundary.
              timeZone: string, # Optional. The timezone of the time boundary.
            }
          ], # Optional. An array of time boundaries indicating validity periods.
          source: string, # Optional. indicate the source who create the classification detail
          sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
          attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
          typeName: string, # Optional. The name of the type.
          lastModifiedTS: string, # Optional. ETag for concurrency control.
        }
      ], # Optional. An array of classifications.
      displayText: string, # Optional. The display text.
      guid: string, # Optional. The GUID of the record.
      isIncomplete: boolean, # Optional. Whether it is a shell entity
      labels: [string], # Optional. labels
      meaningNames: [string], # Optional. An array of meanings.
      meanings: [
        {
          confidence: number, # Optional. The confidence of the term assignment.
          createdBy: string, # Optional. The user who created the record.
          description: string, # Optional. The description of the term assignment.
          displayText: string, # Optional. The display text.
          expression: string, # Optional. The expression of the term assignment.
          relationGuid: string, # Optional. The GUID of the relationship.
          source: string, # Optional. The source of the term.
          status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
          steward: string, # Optional. The steward of the term.
          termGuid: string, # Optional. The GUID of the term.
        }
      ], # Optional. An array of term assignment headers.
      status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of entity headers that partially updated.
}
</code>

</remarks>
    </member>
    <member name="AddClassificationAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call AddClassificationAsync.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new {};

Response response = await client.AddClassificationAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call AddClassificationAsync with all request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new {
    classification = new {
        entityGuid = "<entityGuid>",
        entityStatus = "ACTIVE",
        removePropagationsOnEntityDelete = true,
        validityPeriods = new[] {
            new {
                endTime = "<endTime>",
                startTime = "<startTime>",
                timeZone = "<timeZone>",
            }
        },
        source = "<source>",
        sourceDetails = new {
            key = new {},
        },
        attributes = new {
            key = new {},
        },
        typeName = "<typeName>",
        lastModifiedTS = "<lastModifiedTS>",
    },
    entityGuids = new[] {
        "<String>"
    },
};

Response response = await client.AddClassificationAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>ClassificationAssociateRequest</c>:
<code>{
  classification: {
    entityGuid: string, # Optional. The GUID of the entity.
    entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
    removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
    validityPeriods: [
      {
        endTime: string, # Optional. The end of the time boundary.
        startTime: string, # Optional. The start of the time boundary.
        timeZone: string, # Optional. The timezone of the time boundary.
      }
    ], # Optional. An array of time boundaries indicating validity periods.
    source: string, # Optional. indicate the source who create the classification detail
    sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
    attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
    typeName: string, # Optional. The name of the type.
    lastModifiedTS: string, # Optional. ETag for concurrency control.
  }, # Optional. An instance of a classification; it doesn&apos;t have an identity, this object exists only when associated with an entity.
  entityGuids: [string], # Optional. The GUID of the entity.
}
</code>

</remarks>
    </member>
    <member name="AddClassification(RequestContent,RequestContext)">
<example>
This sample shows how to call AddClassification.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new {};

Response response = client.AddClassification(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call AddClassification with all request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new {
    classification = new {
        entityGuid = "<entityGuid>",
        entityStatus = "ACTIVE",
        removePropagationsOnEntityDelete = true,
        validityPeriods = new[] {
            new {
                endTime = "<endTime>",
                startTime = "<startTime>",
                timeZone = "<timeZone>",
            }
        },
        source = "<source>",
        sourceDetails = new {
            key = new {},
        },
        attributes = new {
            key = new {},
        },
        typeName = "<typeName>",
        lastModifiedTS = "<lastModifiedTS>",
    },
    entityGuids = new[] {
        "<String>"
    },
};

Response response = client.AddClassification(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>ClassificationAssociateRequest</c>:
<code>{
  classification: {
    entityGuid: string, # Optional. The GUID of the entity.
    entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
    removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
    validityPeriods: [
      {
        endTime: string, # Optional. The end of the time boundary.
        startTime: string, # Optional. The start of the time boundary.
        timeZone: string, # Optional. The timezone of the time boundary.
      }
    ], # Optional. An array of time boundaries indicating validity periods.
    source: string, # Optional. indicate the source who create the classification detail
    sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
    attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
    typeName: string, # Optional. The name of the type.
    lastModifiedTS: string, # Optional. ETag for concurrency control.
  }, # Optional. An instance of a classification; it doesn&apos;t have an identity, this object exists only when associated with an entity.
  entityGuids: [string], # Optional. The GUID of the entity.
}
</code>

</remarks>
    </member>
    <member name="GetByGuidAsync(String,Boolean,Boolean,RequestContext)">
<example>
This sample shows how to call GetByGuidAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

Response response = await client.GetByGuidAsync("<guid>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetByGuidAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

Response response = await client.GetByGuidAsync("<guid>", true, true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("entity").GetProperty("businessAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("customAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("homeId").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("provenanceType").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("proxy").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("relationshipAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("businessAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("customAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("homeId").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("provenanceType").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("proxy").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("relationshipAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("lastModifiedTS").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasEntityWithExtInfo</c>:
<code>{
  entity: {
    businessAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. Business Attributes
    classifications: [
      {
        entityGuid: string, # Optional. The GUID of the entity.
        entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        validityPeriods: [
          {
            endTime: string, # Optional. The end of the time boundary.
            startTime: string, # Optional. The start of the time boundary.
            timeZone: string, # Optional. The timezone of the time boundary.
          }
        ], # Optional. An array of time boundaries indicating validity periods.
        source: string, # Optional. indicate the source who create the classification detail
        sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        typeName: string, # Optional. The name of the type.
        lastModifiedTS: string, # Optional. ETag for concurrency control.
      }
    ], # Optional. An array of classifications.
    createTime: number, # Optional. The created time of the record.
    createdBy: string, # Optional. The user who created the record.
    customAttributes: Dictionary&lt;string, string&gt;, # Optional. Custom Attribute
    guid: string, # Optional. The GUID of the entity.
    homeId: string, # Optional. The home ID of the entity.
    isIncomplete: boolean, # Optional. Whether it is a shell entity
    labels: [string], # Optional. labels
    meanings: [
      {
        confidence: number, # Optional. The confidence of the term assignment.
        createdBy: string, # Optional. The user who created the record.
        description: string, # Optional. The description of the term assignment.
        displayText: string, # Optional. The display text.
        expression: string, # Optional. The expression of the term assignment.
        relationGuid: string, # Optional. The GUID of the relationship.
        source: string, # Optional. The source of the term.
        status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        steward: string, # Optional. The steward of the term.
        termGuid: string, # Optional. The GUID of the term.
      }
    ], # Optional. An array of term assignment headers indicating the meanings of the entity.
    provenanceType: number, # Optional. Used to record the provenance of an instance of an entity or relationship.
    proxy: boolean, # Optional. Determines if there&apos;s a proxy.
    relationshipAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of relationship.
    status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
    updateTime: number, # Optional. The update time of the record.
    updatedBy: string, # Optional. The user who updated the record.
    version: number, # Optional. The version of the entity.
    source: string, # Optional. indicate the source who create the classification detail
    sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
    contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Owner.
    attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
    typeName: string, # Optional. The name of the type.
    lastModifiedTS: string, # Optional. ETag for concurrency control.
  }, # Optional. An instance of an entity - like hive_table, hive_database.
  referredEntities: Dictionary&lt;string, AtlasEntity&gt;, # Optional. The referred entities.
}
</code>

</remarks>
    </member>
    <member name="GetByGuid(String,Boolean,Boolean,RequestContext)">
<example>
This sample shows how to call GetByGuid with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

Response response = client.GetByGuid("<guid>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetByGuid with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

Response response = client.GetByGuid("<guid>", true, true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("entity").GetProperty("businessAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("customAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("homeId").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("provenanceType").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("proxy").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("relationshipAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("businessAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("customAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("homeId").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("provenanceType").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("proxy").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("relationshipAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("lastModifiedTS").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasEntityWithExtInfo</c>:
<code>{
  entity: {
    businessAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. Business Attributes
    classifications: [
      {
        entityGuid: string, # Optional. The GUID of the entity.
        entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        validityPeriods: [
          {
            endTime: string, # Optional. The end of the time boundary.
            startTime: string, # Optional. The start of the time boundary.
            timeZone: string, # Optional. The timezone of the time boundary.
          }
        ], # Optional. An array of time boundaries indicating validity periods.
        source: string, # Optional. indicate the source who create the classification detail
        sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        typeName: string, # Optional. The name of the type.
        lastModifiedTS: string, # Optional. ETag for concurrency control.
      }
    ], # Optional. An array of classifications.
    createTime: number, # Optional. The created time of the record.
    createdBy: string, # Optional. The user who created the record.
    customAttributes: Dictionary&lt;string, string&gt;, # Optional. Custom Attribute
    guid: string, # Optional. The GUID of the entity.
    homeId: string, # Optional. The home ID of the entity.
    isIncomplete: boolean, # Optional. Whether it is a shell entity
    labels: [string], # Optional. labels
    meanings: [
      {
        confidence: number, # Optional. The confidence of the term assignment.
        createdBy: string, # Optional. The user who created the record.
        description: string, # Optional. The description of the term assignment.
        displayText: string, # Optional. The display text.
        expression: string, # Optional. The expression of the term assignment.
        relationGuid: string, # Optional. The GUID of the relationship.
        source: string, # Optional. The source of the term.
        status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        steward: string, # Optional. The steward of the term.
        termGuid: string, # Optional. The GUID of the term.
      }
    ], # Optional. An array of term assignment headers indicating the meanings of the entity.
    provenanceType: number, # Optional. Used to record the provenance of an instance of an entity or relationship.
    proxy: boolean, # Optional. Determines if there&apos;s a proxy.
    relationshipAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of relationship.
    status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
    updateTime: number, # Optional. The update time of the record.
    updatedBy: string, # Optional. The user who updated the record.
    version: number, # Optional. The version of the entity.
    source: string, # Optional. indicate the source who create the classification detail
    sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
    contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Owner.
    attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
    typeName: string, # Optional. The name of the type.
    lastModifiedTS: string, # Optional. ETag for concurrency control.
  }, # Optional. An instance of an entity - like hive_table, hive_database.
  referredEntities: Dictionary&lt;string, AtlasEntity&gt;, # Optional. The referred entities.
}
</code>

</remarks>
    </member>
    <member name="PartialUpdateEntityAttributeByGuidAsync(String,String,RequestContent,RequestContext)">
<example>
This sample shows how to call PartialUpdateEntityAttributeByGuidAsync with required parameters and request content and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new {};

Response response = await client.PartialUpdateEntityAttributeByGuidAsync("<guid>", "<name>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guidAssignments").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classificationNames")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meaningNames")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classificationNames")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meaningNames")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("lastModifiedTS").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>EntityMutationResponse</c>:
<code>{
  guidAssignments: Dictionary&lt;string, string&gt;, # Optional. A map of GUID assignments with entities.
  mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;, # Optional. The entity headers of mutated entities.
  partialUpdatedEntities: [
    {
      classificationNames: [string], # Optional. An array of classification names.
      classifications: [
        {
          entityGuid: string, # Optional. The GUID of the entity.
          entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
          removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
          validityPeriods: [
            {
              endTime: string, # Optional. The end of the time boundary.
              startTime: string, # Optional. The start of the time boundary.
              timeZone: string, # Optional. The timezone of the time boundary.
            }
          ], # Optional. An array of time boundaries indicating validity periods.
          source: string, # Optional. indicate the source who create the classification detail
          sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
          attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
          typeName: string, # Optional. The name of the type.
          lastModifiedTS: string, # Optional. ETag for concurrency control.
        }
      ], # Optional. An array of classifications.
      displayText: string, # Optional. The display text.
      guid: string, # Optional. The GUID of the record.
      isIncomplete: boolean, # Optional. Whether it is a shell entity
      labels: [string], # Optional. labels
      meaningNames: [string], # Optional. An array of meanings.
      meanings: [
        {
          confidence: number, # Optional. The confidence of the term assignment.
          createdBy: string, # Optional. The user who created the record.
          description: string, # Optional. The description of the term assignment.
          displayText: string, # Optional. The display text.
          expression: string, # Optional. The expression of the term assignment.
          relationGuid: string, # Optional. The GUID of the relationship.
          source: string, # Optional. The source of the term.
          status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
          steward: string, # Optional. The steward of the term.
          termGuid: string, # Optional. The GUID of the term.
        }
      ], # Optional. An array of term assignment headers.
      status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of entity headers that partially updated.
}
</code>

</remarks>
    </member>
    <member name="PartialUpdateEntityAttributeByGuid(String,String,RequestContent,RequestContext)">
<example>
This sample shows how to call PartialUpdateEntityAttributeByGuid with required parameters and request content and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new {};

Response response = client.PartialUpdateEntityAttributeByGuid("<guid>", "<name>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guidAssignments").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classificationNames")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meaningNames")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classificationNames")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meaningNames")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("lastModifiedTS").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>EntityMutationResponse</c>:
<code>{
  guidAssignments: Dictionary&lt;string, string&gt;, # Optional. A map of GUID assignments with entities.
  mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;, # Optional. The entity headers of mutated entities.
  partialUpdatedEntities: [
    {
      classificationNames: [string], # Optional. An array of classification names.
      classifications: [
        {
          entityGuid: string, # Optional. The GUID of the entity.
          entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
          removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
          validityPeriods: [
            {
              endTime: string, # Optional. The end of the time boundary.
              startTime: string, # Optional. The start of the time boundary.
              timeZone: string, # Optional. The timezone of the time boundary.
            }
          ], # Optional. An array of time boundaries indicating validity periods.
          source: string, # Optional. indicate the source who create the classification detail
          sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
          attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
          typeName: string, # Optional. The name of the type.
          lastModifiedTS: string, # Optional. ETag for concurrency control.
        }
      ], # Optional. An array of classifications.
      displayText: string, # Optional. The display text.
      guid: string, # Optional. The GUID of the record.
      isIncomplete: boolean, # Optional. Whether it is a shell entity
      labels: [string], # Optional. labels
      meaningNames: [string], # Optional. An array of meanings.
      meanings: [
        {
          confidence: number, # Optional. The confidence of the term assignment.
          createdBy: string, # Optional. The user who created the record.
          description: string, # Optional. The description of the term assignment.
          displayText: string, # Optional. The display text.
          expression: string, # Optional. The expression of the term assignment.
          relationGuid: string, # Optional. The GUID of the relationship.
          source: string, # Optional. The source of the term.
          status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
          steward: string, # Optional. The steward of the term.
          termGuid: string, # Optional. The GUID of the term.
        }
      ], # Optional. An array of term assignment headers.
      status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of entity headers that partially updated.
}
</code>

</remarks>
    </member>
    <member name="DeleteByGuidAsync(String,RequestContext)">
<example>
This sample shows how to call DeleteByGuidAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

Response response = await client.DeleteByGuidAsync("<guid>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guidAssignments").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classificationNames")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meaningNames")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classificationNames")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meaningNames")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("lastModifiedTS").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>EntityMutationResponse</c>:
<code>{
  guidAssignments: Dictionary&lt;string, string&gt;, # Optional. A map of GUID assignments with entities.
  mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;, # Optional. The entity headers of mutated entities.
  partialUpdatedEntities: [
    {
      classificationNames: [string], # Optional. An array of classification names.
      classifications: [
        {
          entityGuid: string, # Optional. The GUID of the entity.
          entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
          removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
          validityPeriods: [
            {
              endTime: string, # Optional. The end of the time boundary.
              startTime: string, # Optional. The start of the time boundary.
              timeZone: string, # Optional. The timezone of the time boundary.
            }
          ], # Optional. An array of time boundaries indicating validity periods.
          source: string, # Optional. indicate the source who create the classification detail
          sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
          attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
          typeName: string, # Optional. The name of the type.
          lastModifiedTS: string, # Optional. ETag for concurrency control.
        }
      ], # Optional. An array of classifications.
      displayText: string, # Optional. The display text.
      guid: string, # Optional. The GUID of the record.
      isIncomplete: boolean, # Optional. Whether it is a shell entity
      labels: [string], # Optional. labels
      meaningNames: [string], # Optional. An array of meanings.
      meanings: [
        {
          confidence: number, # Optional. The confidence of the term assignment.
          createdBy: string, # Optional. The user who created the record.
          description: string, # Optional. The description of the term assignment.
          displayText: string, # Optional. The display text.
          expression: string, # Optional. The expression of the term assignment.
          relationGuid: string, # Optional. The GUID of the relationship.
          source: string, # Optional. The source of the term.
          status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
          steward: string, # Optional. The steward of the term.
          termGuid: string, # Optional. The GUID of the term.
        }
      ], # Optional. An array of term assignment headers.
      status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of entity headers that partially updated.
}
</code>

</remarks>
    </member>
    <member name="DeleteByGuid(String,RequestContext)">
<example>
This sample shows how to call DeleteByGuid with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

Response response = client.DeleteByGuid("<guid>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guidAssignments").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classificationNames")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meaningNames")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classificationNames")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meaningNames")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("lastModifiedTS").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>EntityMutationResponse</c>:
<code>{
  guidAssignments: Dictionary&lt;string, string&gt;, # Optional. A map of GUID assignments with entities.
  mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;, # Optional. The entity headers of mutated entities.
  partialUpdatedEntities: [
    {
      classificationNames: [string], # Optional. An array of classification names.
      classifications: [
        {
          entityGuid: string, # Optional. The GUID of the entity.
          entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
          removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
          validityPeriods: [
            {
              endTime: string, # Optional. The end of the time boundary.
              startTime: string, # Optional. The start of the time boundary.
              timeZone: string, # Optional. The timezone of the time boundary.
            }
          ], # Optional. An array of time boundaries indicating validity periods.
          source: string, # Optional. indicate the source who create the classification detail
          sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
          attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
          typeName: string, # Optional. The name of the type.
          lastModifiedTS: string, # Optional. ETag for concurrency control.
        }
      ], # Optional. An array of classifications.
      displayText: string, # Optional. The display text.
      guid: string, # Optional. The GUID of the record.
      isIncomplete: boolean, # Optional. Whether it is a shell entity
      labels: [string], # Optional. labels
      meaningNames: [string], # Optional. An array of meanings.
      meanings: [
        {
          confidence: number, # Optional. The confidence of the term assignment.
          createdBy: string, # Optional. The user who created the record.
          description: string, # Optional. The description of the term assignment.
          displayText: string, # Optional. The display text.
          expression: string, # Optional. The expression of the term assignment.
          relationGuid: string, # Optional. The GUID of the relationship.
          source: string, # Optional. The source of the term.
          status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
          steward: string, # Optional. The steward of the term.
          termGuid: string, # Optional. The GUID of the term.
        }
      ], # Optional. An array of term assignment headers.
      status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of entity headers that partially updated.
}
</code>

</remarks>
    </member>
    <member name="GetClassificationAsync(String,String,RequestContext)">
<example>
This sample shows how to call GetClassificationAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

Response response = await client.GetClassificationAsync("<guid>", "<classificationName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasClassification</c>:
<code>{
  entityGuid: string, # Optional. The GUID of the entity.
  entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
  removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
  validityPeriods: [
    {
      endTime: string, # Optional. The end of the time boundary.
      startTime: string, # Optional. The start of the time boundary.
      timeZone: string, # Optional. The timezone of the time boundary.
    }
  ], # Optional. An array of time boundaries indicating validity periods.
  source: string, # Optional. indicate the source who create the classification detail
  sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
  attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
  typeName: string, # Optional. The name of the type.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
}
</code>

</remarks>
    </member>
    <member name="GetClassification(String,String,RequestContext)">
<example>
This sample shows how to call GetClassification with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

Response response = client.GetClassification("<guid>", "<classificationName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasClassification</c>:
<code>{
  entityGuid: string, # Optional. The GUID of the entity.
  entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
  removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
  validityPeriods: [
    {
      endTime: string, # Optional. The end of the time boundary.
      startTime: string, # Optional. The start of the time boundary.
      timeZone: string, # Optional. The timezone of the time boundary.
    }
  ], # Optional. An array of time boundaries indicating validity periods.
  source: string, # Optional. indicate the source who create the classification detail
  sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
  attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
  typeName: string, # Optional. The name of the type.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
}
</code>

</remarks>
    </member>
    <member name="DeleteClassificationAsync(String,String,RequestContext)">
<example>
This sample shows how to call DeleteClassificationAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

Response response = await client.DeleteClassificationAsync("<guid>", "<classificationName>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="DeleteClassification(String,String,RequestContext)">
<example>
This sample shows how to call DeleteClassification with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

Response response = client.DeleteClassification("<guid>", "<classificationName>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="GetClassificationsAsync(String,RequestContext)">
<example>
This sample shows how to call GetClassificationsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

Response response = await client.GetClassificationsAsync("<guid>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("list")[0].ToString());
Console.WriteLine(result.GetProperty("pageSize").ToString());
Console.WriteLine(result.GetProperty("sortBy").ToString());
Console.WriteLine(result.GetProperty("sortType").ToString());
Console.WriteLine(result.GetProperty("startIndex").ToString());
Console.WriteLine(result.GetProperty("totalCount").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasClassifications</c>:
<code>{
  list: [AnyObject], # Optional. An array of objects.
  pageSize: number, # Optional. The size of the page.
  sortBy: string, # Optional. The sorted by field.
  sortType: &quot;NONE&quot; | &quot;ASC&quot; | &quot;DESC&quot;, # Optional. to specify whether the result should be sorted? If yes, whether asc or desc.
  startIndex: number, # Optional. The start index of the page.
  totalCount: number, # Optional. The total count of items.
}
</code>

</remarks>
    </member>
    <member name="GetClassifications(String,RequestContext)">
<example>
This sample shows how to call GetClassifications with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

Response response = client.GetClassifications("<guid>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("list")[0].ToString());
Console.WriteLine(result.GetProperty("pageSize").ToString());
Console.WriteLine(result.GetProperty("sortBy").ToString());
Console.WriteLine(result.GetProperty("sortType").ToString());
Console.WriteLine(result.GetProperty("startIndex").ToString());
Console.WriteLine(result.GetProperty("totalCount").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasClassifications</c>:
<code>{
  list: [AnyObject], # Optional. An array of objects.
  pageSize: number, # Optional. The size of the page.
  sortBy: string, # Optional. The sorted by field.
  sortType: &quot;NONE&quot; | &quot;ASC&quot; | &quot;DESC&quot;, # Optional. to specify whether the result should be sorted? If yes, whether asc or desc.
  startIndex: number, # Optional. The start index of the page.
  totalCount: number, # Optional. The total count of items.
}
</code>

</remarks>
    </member>
    <member name="AddClassificationsAsync(String,RequestContent,RequestContext)">
<example>
This sample shows how to call AddClassificationsAsync with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new[] {
    new {
        entityGuid = "<entityGuid>",
        entityStatus = "ACTIVE",
        removePropagationsOnEntityDelete = true,
        validityPeriods = new[] {
            new {
                endTime = "<endTime>",
                startTime = "<startTime>",
                timeZone = "<timeZone>",
            }
        },
        source = "<source>",
        sourceDetails = new {
            key = new {},
        },
        attributes = new {
            key = new {},
        },
        typeName = "<typeName>",
        lastModifiedTS = "<lastModifiedTS>",
    }
};

Response response = await client.AddClassificationsAsync("<guid>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>AtlasClassification</c>:
<code>{
  entityGuid: string, # Optional. The GUID of the entity.
  entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
  removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
  validityPeriods: [
    {
      endTime: string, # Optional. The end of the time boundary.
      startTime: string, # Optional. The start of the time boundary.
      timeZone: string, # Optional. The timezone of the time boundary.
    }
  ], # Optional. An array of time boundaries indicating validity periods.
  source: string, # Optional. indicate the source who create the classification detail
  sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
  attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
  typeName: string, # Optional. The name of the type.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
}
</code>

</remarks>
    </member>
    <member name="AddClassifications(String,RequestContent,RequestContext)">
<example>
This sample shows how to call AddClassifications with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new[] {
    new {
        entityGuid = "<entityGuid>",
        entityStatus = "ACTIVE",
        removePropagationsOnEntityDelete = true,
        validityPeriods = new[] {
            new {
                endTime = "<endTime>",
                startTime = "<startTime>",
                timeZone = "<timeZone>",
            }
        },
        source = "<source>",
        sourceDetails = new {
            key = new {},
        },
        attributes = new {
            key = new {},
        },
        typeName = "<typeName>",
        lastModifiedTS = "<lastModifiedTS>",
    }
};

Response response = client.AddClassifications("<guid>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>AtlasClassification</c>:
<code>{
  entityGuid: string, # Optional. The GUID of the entity.
  entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
  removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
  validityPeriods: [
    {
      endTime: string, # Optional. The end of the time boundary.
      startTime: string, # Optional. The start of the time boundary.
      timeZone: string, # Optional. The timezone of the time boundary.
    }
  ], # Optional. An array of time boundaries indicating validity periods.
  source: string, # Optional. indicate the source who create the classification detail
  sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
  attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
  typeName: string, # Optional. The name of the type.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
}
</code>

</remarks>
    </member>
    <member name="UpdateClassificationsAsync(String,RequestContent,RequestContext)">
<example>
This sample shows how to call UpdateClassificationsAsync with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new[] {
    new {
        entityGuid = "<entityGuid>",
        entityStatus = "ACTIVE",
        removePropagationsOnEntityDelete = true,
        validityPeriods = new[] {
            new {
                endTime = "<endTime>",
                startTime = "<startTime>",
                timeZone = "<timeZone>",
            }
        },
        source = "<source>",
        sourceDetails = new {
            key = new {},
        },
        attributes = new {
            key = new {},
        },
        typeName = "<typeName>",
        lastModifiedTS = "<lastModifiedTS>",
    }
};

Response response = await client.UpdateClassificationsAsync("<guid>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>AtlasClassification</c>:
<code>{
  entityGuid: string, # Optional. The GUID of the entity.
  entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
  removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
  validityPeriods: [
    {
      endTime: string, # Optional. The end of the time boundary.
      startTime: string, # Optional. The start of the time boundary.
      timeZone: string, # Optional. The timezone of the time boundary.
    }
  ], # Optional. An array of time boundaries indicating validity periods.
  source: string, # Optional. indicate the source who create the classification detail
  sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
  attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
  typeName: string, # Optional. The name of the type.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
}
</code>

</remarks>
    </member>
    <member name="UpdateClassifications(String,RequestContent,RequestContext)">
<example>
This sample shows how to call UpdateClassifications with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new[] {
    new {
        entityGuid = "<entityGuid>",
        entityStatus = "ACTIVE",
        removePropagationsOnEntityDelete = true,
        validityPeriods = new[] {
            new {
                endTime = "<endTime>",
                startTime = "<startTime>",
                timeZone = "<timeZone>",
            }
        },
        source = "<source>",
        sourceDetails = new {
            key = new {},
        },
        attributes = new {
            key = new {},
        },
        typeName = "<typeName>",
        lastModifiedTS = "<lastModifiedTS>",
    }
};

Response response = client.UpdateClassifications("<guid>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>AtlasClassification</c>:
<code>{
  entityGuid: string, # Optional. The GUID of the entity.
  entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
  removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
  validityPeriods: [
    {
      endTime: string, # Optional. The end of the time boundary.
      startTime: string, # Optional. The start of the time boundary.
      timeZone: string, # Optional. The timezone of the time boundary.
    }
  ], # Optional. An array of time boundaries indicating validity periods.
  source: string, # Optional. indicate the source who create the classification detail
  sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
  attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
  typeName: string, # Optional. The name of the type.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
}
</code>

</remarks>
    </member>
    <member name="GetByUniqueAttributesAsync(String,Boolean,Boolean,String,RequestContext)">
<example>
This sample shows how to call GetByUniqueAttributesAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

Response response = await client.GetByUniqueAttributesAsync("<typeName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetByUniqueAttributesAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

Response response = await client.GetByUniqueAttributesAsync("<typeName>", true, true, "<attrQualifiedName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("entity").GetProperty("businessAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("customAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("homeId").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("provenanceType").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("proxy").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("relationshipAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("businessAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("customAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("homeId").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("provenanceType").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("proxy").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("relationshipAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("lastModifiedTS").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasEntityWithExtInfo</c>:
<code>{
  entity: {
    businessAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. Business Attributes
    classifications: [
      {
        entityGuid: string, # Optional. The GUID of the entity.
        entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        validityPeriods: [
          {
            endTime: string, # Optional. The end of the time boundary.
            startTime: string, # Optional. The start of the time boundary.
            timeZone: string, # Optional. The timezone of the time boundary.
          }
        ], # Optional. An array of time boundaries indicating validity periods.
        source: string, # Optional. indicate the source who create the classification detail
        sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        typeName: string, # Optional. The name of the type.
        lastModifiedTS: string, # Optional. ETag for concurrency control.
      }
    ], # Optional. An array of classifications.
    createTime: number, # Optional. The created time of the record.
    createdBy: string, # Optional. The user who created the record.
    customAttributes: Dictionary&lt;string, string&gt;, # Optional. Custom Attribute
    guid: string, # Optional. The GUID of the entity.
    homeId: string, # Optional. The home ID of the entity.
    isIncomplete: boolean, # Optional. Whether it is a shell entity
    labels: [string], # Optional. labels
    meanings: [
      {
        confidence: number, # Optional. The confidence of the term assignment.
        createdBy: string, # Optional. The user who created the record.
        description: string, # Optional. The description of the term assignment.
        displayText: string, # Optional. The display text.
        expression: string, # Optional. The expression of the term assignment.
        relationGuid: string, # Optional. The GUID of the relationship.
        source: string, # Optional. The source of the term.
        status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        steward: string, # Optional. The steward of the term.
        termGuid: string, # Optional. The GUID of the term.
      }
    ], # Optional. An array of term assignment headers indicating the meanings of the entity.
    provenanceType: number, # Optional. Used to record the provenance of an instance of an entity or relationship.
    proxy: boolean, # Optional. Determines if there&apos;s a proxy.
    relationshipAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of relationship.
    status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
    updateTime: number, # Optional. The update time of the record.
    updatedBy: string, # Optional. The user who updated the record.
    version: number, # Optional. The version of the entity.
    source: string, # Optional. indicate the source who create the classification detail
    sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
    contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Owner.
    attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
    typeName: string, # Optional. The name of the type.
    lastModifiedTS: string, # Optional. ETag for concurrency control.
  }, # Optional. An instance of an entity - like hive_table, hive_database.
  referredEntities: Dictionary&lt;string, AtlasEntity&gt;, # Optional. The referred entities.
}
</code>

</remarks>
    </member>
    <member name="GetByUniqueAttributes(String,Boolean,Boolean,String,RequestContext)">
<example>
This sample shows how to call GetByUniqueAttributes with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

Response response = client.GetByUniqueAttributes("<typeName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetByUniqueAttributes with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

Response response = client.GetByUniqueAttributes("<typeName>", true, true, "<attrQualifiedName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("entity").GetProperty("businessAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("customAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("homeId").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("provenanceType").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("proxy").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("relationshipAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("entity").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("businessAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("customAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("homeId").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("provenanceType").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("proxy").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("relationshipAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("lastModifiedTS").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasEntityWithExtInfo</c>:
<code>{
  entity: {
    businessAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. Business Attributes
    classifications: [
      {
        entityGuid: string, # Optional. The GUID of the entity.
        entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        validityPeriods: [
          {
            endTime: string, # Optional. The end of the time boundary.
            startTime: string, # Optional. The start of the time boundary.
            timeZone: string, # Optional. The timezone of the time boundary.
          }
        ], # Optional. An array of time boundaries indicating validity periods.
        source: string, # Optional. indicate the source who create the classification detail
        sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        typeName: string, # Optional. The name of the type.
        lastModifiedTS: string, # Optional. ETag for concurrency control.
      }
    ], # Optional. An array of classifications.
    createTime: number, # Optional. The created time of the record.
    createdBy: string, # Optional. The user who created the record.
    customAttributes: Dictionary&lt;string, string&gt;, # Optional. Custom Attribute
    guid: string, # Optional. The GUID of the entity.
    homeId: string, # Optional. The home ID of the entity.
    isIncomplete: boolean, # Optional. Whether it is a shell entity
    labels: [string], # Optional. labels
    meanings: [
      {
        confidence: number, # Optional. The confidence of the term assignment.
        createdBy: string, # Optional. The user who created the record.
        description: string, # Optional. The description of the term assignment.
        displayText: string, # Optional. The display text.
        expression: string, # Optional. The expression of the term assignment.
        relationGuid: string, # Optional. The GUID of the relationship.
        source: string, # Optional. The source of the term.
        status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        steward: string, # Optional. The steward of the term.
        termGuid: string, # Optional. The GUID of the term.
      }
    ], # Optional. An array of term assignment headers indicating the meanings of the entity.
    provenanceType: number, # Optional. Used to record the provenance of an instance of an entity or relationship.
    proxy: boolean, # Optional. Determines if there&apos;s a proxy.
    relationshipAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of relationship.
    status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
    updateTime: number, # Optional. The update time of the record.
    updatedBy: string, # Optional. The user who updated the record.
    version: number, # Optional. The version of the entity.
    source: string, # Optional. indicate the source who create the classification detail
    sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
    contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Owner.
    attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
    typeName: string, # Optional. The name of the type.
    lastModifiedTS: string, # Optional. ETag for concurrency control.
  }, # Optional. An instance of an entity - like hive_table, hive_database.
  referredEntities: Dictionary&lt;string, AtlasEntity&gt;, # Optional. The referred entities.
}
</code>

</remarks>
    </member>
    <member name="PartialUpdateEntityByUniqueAttributesAsync(String,RequestContent,String,RequestContext)">
<example>
This sample shows how to call PartialUpdateEntityByUniqueAttributesAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new {};

Response response = await client.PartialUpdateEntityByUniqueAttributesAsync("<typeName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PartialUpdateEntityByUniqueAttributesAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new {
    entity = new {
        businessAttributes = new {
            key = new {},
        },
        classifications = new[] {
            new {
                entityGuid = "<entityGuid>",
                entityStatus = "ACTIVE",
                removePropagationsOnEntityDelete = true,
                validityPeriods = new[] {
                    new {
                        endTime = "<endTime>",
                        startTime = "<startTime>",
                        timeZone = "<timeZone>",
                    }
                },
                source = "<source>",
                sourceDetails = new {
                    key = new {},
                },
                attributes = new {
                    key = new {},
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            }
        },
        createTime = 123.45f,
        createdBy = "<createdBy>",
        customAttributes = new {
            key = "<String>",
        },
        guid = "<guid>",
        homeId = "<homeId>",
        isIncomplete = true,
        labels = new[] {
            "<String>"
        },
        meanings = new[] {
            new {
                confidence = 1234,
                createdBy = "<createdBy>",
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DISCOVERED",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        provenanceType = 123.45f,
        proxy = true,
        relationshipAttributes = new {
            key = new {},
        },
        status = "ACTIVE",
        updateTime = 123.45f,
        updatedBy = "<updatedBy>",
        version = 123.45f,
        source = "<source>",
        sourceDetails = new {
            key = new {},
        },
        contacts = new {
            key = new[] {
                new {
                    id = "<id>",
                    info = "<info>",
                }
            },
        },
        attributes = new {
            key = new {},
        },
        typeName = "<typeName>",
        lastModifiedTS = "<lastModifiedTS>",
    },
    referredEntities = new {
        key = new {
            businessAttributes = new {
                key = new {},
            },
            classifications = new[] {
                new {
                    entityGuid = "<entityGuid>",
                    entityStatus = "ACTIVE",
                    removePropagationsOnEntityDelete = true,
                    validityPeriods = new[] {
                        new {
                            endTime = "<endTime>",
                            startTime = "<startTime>",
                            timeZone = "<timeZone>",
                        }
                    },
                    source = "<source>",
                    sourceDetails = new {
                        key = new {},
                    },
                    attributes = new {
                        key = new {},
                    },
                    typeName = "<typeName>",
                    lastModifiedTS = "<lastModifiedTS>",
                }
            },
            createTime = 123.45f,
            createdBy = "<createdBy>",
            customAttributes = new {
                key = "<String>",
            },
            guid = "<guid>",
            homeId = "<homeId>",
            isIncomplete = true,
            labels = new[] {
                "<String>"
            },
            meanings = new[] {
                new {
                    confidence = 1234,
                    createdBy = "<createdBy>",
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DISCOVERED",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            provenanceType = 123.45f,
            proxy = true,
            relationshipAttributes = new {
                key = new {},
            },
            status = "ACTIVE",
            updateTime = 123.45f,
            updatedBy = "<updatedBy>",
            version = 123.45f,
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            contacts = new {
                key = new[] {
                    new {
                        id = "<id>",
                        info = "<info>",
                    }
                },
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        },
    },
};

Response response = await client.PartialUpdateEntityByUniqueAttributesAsync("<typeName>", RequestContent.Create(data), "<attrQualifiedName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guidAssignments").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classificationNames")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meaningNames")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classificationNames")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meaningNames")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("lastModifiedTS").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>AtlasEntityWithExtInfo</c>:
<code>{
  entity: {
    businessAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. Business Attributes
    classifications: [
      {
        entityGuid: string, # Optional. The GUID of the entity.
        entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        validityPeriods: [
          {
            endTime: string, # Optional. The end of the time boundary.
            startTime: string, # Optional. The start of the time boundary.
            timeZone: string, # Optional. The timezone of the time boundary.
          }
        ], # Optional. An array of time boundaries indicating validity periods.
        source: string, # Optional. indicate the source who create the classification detail
        sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        typeName: string, # Optional. The name of the type.
        lastModifiedTS: string, # Optional. ETag for concurrency control.
      }
    ], # Optional. An array of classifications.
    createTime: number, # Optional. The created time of the record.
    createdBy: string, # Optional. The user who created the record.
    customAttributes: Dictionary&lt;string, string&gt;, # Optional. Custom Attribute
    guid: string, # Optional. The GUID of the entity.
    homeId: string, # Optional. The home ID of the entity.
    isIncomplete: boolean, # Optional. Whether it is a shell entity
    labels: [string], # Optional. labels
    meanings: [
      {
        confidence: number, # Optional. The confidence of the term assignment.
        createdBy: string, # Optional. The user who created the record.
        description: string, # Optional. The description of the term assignment.
        displayText: string, # Optional. The display text.
        expression: string, # Optional. The expression of the term assignment.
        relationGuid: string, # Optional. The GUID of the relationship.
        source: string, # Optional. The source of the term.
        status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        steward: string, # Optional. The steward of the term.
        termGuid: string, # Optional. The GUID of the term.
      }
    ], # Optional. An array of term assignment headers indicating the meanings of the entity.
    provenanceType: number, # Optional. Used to record the provenance of an instance of an entity or relationship.
    proxy: boolean, # Optional. Determines if there&apos;s a proxy.
    relationshipAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of relationship.
    status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
    updateTime: number, # Optional. The update time of the record.
    updatedBy: string, # Optional. The user who updated the record.
    version: number, # Optional. The version of the entity.
    source: string, # Optional. indicate the source who create the classification detail
    sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
    contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Owner.
    attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
    typeName: string, # Optional. The name of the type.
    lastModifiedTS: string, # Optional. ETag for concurrency control.
  }, # Optional. An instance of an entity - like hive_table, hive_database.
  referredEntities: Dictionary&lt;string, AtlasEntity&gt;, # Optional. The referred entities.
}
</code>

Response Body:

Schema for <c>EntityMutationResponse</c>:
<code>{
  guidAssignments: Dictionary&lt;string, string&gt;, # Optional. A map of GUID assignments with entities.
  mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;, # Optional. The entity headers of mutated entities.
  partialUpdatedEntities: [
    {
      classificationNames: [string], # Optional. An array of classification names.
      classifications: [
        {
          entityGuid: string, # Optional. The GUID of the entity.
          entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
          removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
          validityPeriods: [
            {
              endTime: string, # Optional. The end of the time boundary.
              startTime: string, # Optional. The start of the time boundary.
              timeZone: string, # Optional. The timezone of the time boundary.
            }
          ], # Optional. An array of time boundaries indicating validity periods.
          source: string, # Optional. indicate the source who create the classification detail
          sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
          attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
          typeName: string, # Optional. The name of the type.
          lastModifiedTS: string, # Optional. ETag for concurrency control.
        }
      ], # Optional. An array of classifications.
      displayText: string, # Optional. The display text.
      guid: string, # Optional. The GUID of the record.
      isIncomplete: boolean, # Optional. Whether it is a shell entity
      labels: [string], # Optional. labels
      meaningNames: [string], # Optional. An array of meanings.
      meanings: [
        {
          confidence: number, # Optional. The confidence of the term assignment.
          createdBy: string, # Optional. The user who created the record.
          description: string, # Optional. The description of the term assignment.
          displayText: string, # Optional. The display text.
          expression: string, # Optional. The expression of the term assignment.
          relationGuid: string, # Optional. The GUID of the relationship.
          source: string, # Optional. The source of the term.
          status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
          steward: string, # Optional. The steward of the term.
          termGuid: string, # Optional. The GUID of the term.
        }
      ], # Optional. An array of term assignment headers.
      status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of entity headers that partially updated.
}
</code>

</remarks>
    </member>
    <member name="PartialUpdateEntityByUniqueAttributes(String,RequestContent,String,RequestContext)">
<example>
This sample shows how to call PartialUpdateEntityByUniqueAttributes with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new {};

Response response = client.PartialUpdateEntityByUniqueAttributes("<typeName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PartialUpdateEntityByUniqueAttributes with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new {
    entity = new {
        businessAttributes = new {
            key = new {},
        },
        classifications = new[] {
            new {
                entityGuid = "<entityGuid>",
                entityStatus = "ACTIVE",
                removePropagationsOnEntityDelete = true,
                validityPeriods = new[] {
                    new {
                        endTime = "<endTime>",
                        startTime = "<startTime>",
                        timeZone = "<timeZone>",
                    }
                },
                source = "<source>",
                sourceDetails = new {
                    key = new {},
                },
                attributes = new {
                    key = new {},
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            }
        },
        createTime = 123.45f,
        createdBy = "<createdBy>",
        customAttributes = new {
            key = "<String>",
        },
        guid = "<guid>",
        homeId = "<homeId>",
        isIncomplete = true,
        labels = new[] {
            "<String>"
        },
        meanings = new[] {
            new {
                confidence = 1234,
                createdBy = "<createdBy>",
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DISCOVERED",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        provenanceType = 123.45f,
        proxy = true,
        relationshipAttributes = new {
            key = new {},
        },
        status = "ACTIVE",
        updateTime = 123.45f,
        updatedBy = "<updatedBy>",
        version = 123.45f,
        source = "<source>",
        sourceDetails = new {
            key = new {},
        },
        contacts = new {
            key = new[] {
                new {
                    id = "<id>",
                    info = "<info>",
                }
            },
        },
        attributes = new {
            key = new {},
        },
        typeName = "<typeName>",
        lastModifiedTS = "<lastModifiedTS>",
    },
    referredEntities = new {
        key = new {
            businessAttributes = new {
                key = new {},
            },
            classifications = new[] {
                new {
                    entityGuid = "<entityGuid>",
                    entityStatus = "ACTIVE",
                    removePropagationsOnEntityDelete = true,
                    validityPeriods = new[] {
                        new {
                            endTime = "<endTime>",
                            startTime = "<startTime>",
                            timeZone = "<timeZone>",
                        }
                    },
                    source = "<source>",
                    sourceDetails = new {
                        key = new {},
                    },
                    attributes = new {
                        key = new {},
                    },
                    typeName = "<typeName>",
                    lastModifiedTS = "<lastModifiedTS>",
                }
            },
            createTime = 123.45f,
            createdBy = "<createdBy>",
            customAttributes = new {
                key = "<String>",
            },
            guid = "<guid>",
            homeId = "<homeId>",
            isIncomplete = true,
            labels = new[] {
                "<String>"
            },
            meanings = new[] {
                new {
                    confidence = 1234,
                    createdBy = "<createdBy>",
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DISCOVERED",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            provenanceType = 123.45f,
            proxy = true,
            relationshipAttributes = new {
                key = new {},
            },
            status = "ACTIVE",
            updateTime = 123.45f,
            updatedBy = "<updatedBy>",
            version = 123.45f,
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            contacts = new {
                key = new[] {
                    new {
                        id = "<id>",
                        info = "<info>",
                    }
                },
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        },
    },
};

Response response = client.PartialUpdateEntityByUniqueAttributes("<typeName>", RequestContent.Create(data), "<attrQualifiedName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guidAssignments").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classificationNames")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meaningNames")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classificationNames")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meaningNames")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("lastModifiedTS").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>AtlasEntityWithExtInfo</c>:
<code>{
  entity: {
    businessAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. Business Attributes
    classifications: [
      {
        entityGuid: string, # Optional. The GUID of the entity.
        entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        validityPeriods: [
          {
            endTime: string, # Optional. The end of the time boundary.
            startTime: string, # Optional. The start of the time boundary.
            timeZone: string, # Optional. The timezone of the time boundary.
          }
        ], # Optional. An array of time boundaries indicating validity periods.
        source: string, # Optional. indicate the source who create the classification detail
        sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        typeName: string, # Optional. The name of the type.
        lastModifiedTS: string, # Optional. ETag for concurrency control.
      }
    ], # Optional. An array of classifications.
    createTime: number, # Optional. The created time of the record.
    createdBy: string, # Optional. The user who created the record.
    customAttributes: Dictionary&lt;string, string&gt;, # Optional. Custom Attribute
    guid: string, # Optional. The GUID of the entity.
    homeId: string, # Optional. The home ID of the entity.
    isIncomplete: boolean, # Optional. Whether it is a shell entity
    labels: [string], # Optional. labels
    meanings: [
      {
        confidence: number, # Optional. The confidence of the term assignment.
        createdBy: string, # Optional. The user who created the record.
        description: string, # Optional. The description of the term assignment.
        displayText: string, # Optional. The display text.
        expression: string, # Optional. The expression of the term assignment.
        relationGuid: string, # Optional. The GUID of the relationship.
        source: string, # Optional. The source of the term.
        status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        steward: string, # Optional. The steward of the term.
        termGuid: string, # Optional. The GUID of the term.
      }
    ], # Optional. An array of term assignment headers indicating the meanings of the entity.
    provenanceType: number, # Optional. Used to record the provenance of an instance of an entity or relationship.
    proxy: boolean, # Optional. Determines if there&apos;s a proxy.
    relationshipAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of relationship.
    status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
    updateTime: number, # Optional. The update time of the record.
    updatedBy: string, # Optional. The user who updated the record.
    version: number, # Optional. The version of the entity.
    source: string, # Optional. indicate the source who create the classification detail
    sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
    contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Owner.
    attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
    typeName: string, # Optional. The name of the type.
    lastModifiedTS: string, # Optional. ETag for concurrency control.
  }, # Optional. An instance of an entity - like hive_table, hive_database.
  referredEntities: Dictionary&lt;string, AtlasEntity&gt;, # Optional. The referred entities.
}
</code>

Response Body:

Schema for <c>EntityMutationResponse</c>:
<code>{
  guidAssignments: Dictionary&lt;string, string&gt;, # Optional. A map of GUID assignments with entities.
  mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;, # Optional. The entity headers of mutated entities.
  partialUpdatedEntities: [
    {
      classificationNames: [string], # Optional. An array of classification names.
      classifications: [
        {
          entityGuid: string, # Optional. The GUID of the entity.
          entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
          removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
          validityPeriods: [
            {
              endTime: string, # Optional. The end of the time boundary.
              startTime: string, # Optional. The start of the time boundary.
              timeZone: string, # Optional. The timezone of the time boundary.
            }
          ], # Optional. An array of time boundaries indicating validity periods.
          source: string, # Optional. indicate the source who create the classification detail
          sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
          attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
          typeName: string, # Optional. The name of the type.
          lastModifiedTS: string, # Optional. ETag for concurrency control.
        }
      ], # Optional. An array of classifications.
      displayText: string, # Optional. The display text.
      guid: string, # Optional. The GUID of the record.
      isIncomplete: boolean, # Optional. Whether it is a shell entity
      labels: [string], # Optional. labels
      meaningNames: [string], # Optional. An array of meanings.
      meanings: [
        {
          confidence: number, # Optional. The confidence of the term assignment.
          createdBy: string, # Optional. The user who created the record.
          description: string, # Optional. The description of the term assignment.
          displayText: string, # Optional. The display text.
          expression: string, # Optional. The expression of the term assignment.
          relationGuid: string, # Optional. The GUID of the relationship.
          source: string, # Optional. The source of the term.
          status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
          steward: string, # Optional. The steward of the term.
          termGuid: string, # Optional. The GUID of the term.
        }
      ], # Optional. An array of term assignment headers.
      status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of entity headers that partially updated.
}
</code>

</remarks>
    </member>
    <member name="DeleteByUniqueAttributeAsync(String,String,RequestContext)">
<example>
This sample shows how to call DeleteByUniqueAttributeAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

Response response = await client.DeleteByUniqueAttributeAsync("<typeName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call DeleteByUniqueAttributeAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

Response response = await client.DeleteByUniqueAttributeAsync("<typeName>", "<attrQualifiedName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guidAssignments").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classificationNames")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meaningNames")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classificationNames")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meaningNames")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("lastModifiedTS").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>EntityMutationResponse</c>:
<code>{
  guidAssignments: Dictionary&lt;string, string&gt;, # Optional. A map of GUID assignments with entities.
  mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;, # Optional. The entity headers of mutated entities.
  partialUpdatedEntities: [
    {
      classificationNames: [string], # Optional. An array of classification names.
      classifications: [
        {
          entityGuid: string, # Optional. The GUID of the entity.
          entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
          removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
          validityPeriods: [
            {
              endTime: string, # Optional. The end of the time boundary.
              startTime: string, # Optional. The start of the time boundary.
              timeZone: string, # Optional. The timezone of the time boundary.
            }
          ], # Optional. An array of time boundaries indicating validity periods.
          source: string, # Optional. indicate the source who create the classification detail
          sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
          attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
          typeName: string, # Optional. The name of the type.
          lastModifiedTS: string, # Optional. ETag for concurrency control.
        }
      ], # Optional. An array of classifications.
      displayText: string, # Optional. The display text.
      guid: string, # Optional. The GUID of the record.
      isIncomplete: boolean, # Optional. Whether it is a shell entity
      labels: [string], # Optional. labels
      meaningNames: [string], # Optional. An array of meanings.
      meanings: [
        {
          confidence: number, # Optional. The confidence of the term assignment.
          createdBy: string, # Optional. The user who created the record.
          description: string, # Optional. The description of the term assignment.
          displayText: string, # Optional. The display text.
          expression: string, # Optional. The expression of the term assignment.
          relationGuid: string, # Optional. The GUID of the relationship.
          source: string, # Optional. The source of the term.
          status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
          steward: string, # Optional. The steward of the term.
          termGuid: string, # Optional. The GUID of the term.
        }
      ], # Optional. An array of term assignment headers.
      status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of entity headers that partially updated.
}
</code>

</remarks>
    </member>
    <member name="DeleteByUniqueAttribute(String,String,RequestContext)">
<example>
This sample shows how to call DeleteByUniqueAttribute with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

Response response = client.DeleteByUniqueAttribute("<typeName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call DeleteByUniqueAttribute with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

Response response = client.DeleteByUniqueAttribute("<typeName>", "<attrQualifiedName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("guidAssignments").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classificationNames")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meaningNames")[0].ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classificationNames")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meaningNames")[0].ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("lastModifiedTS").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>EntityMutationResponse</c>:
<code>{
  guidAssignments: Dictionary&lt;string, string&gt;, # Optional. A map of GUID assignments with entities.
  mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;, # Optional. The entity headers of mutated entities.
  partialUpdatedEntities: [
    {
      classificationNames: [string], # Optional. An array of classification names.
      classifications: [
        {
          entityGuid: string, # Optional. The GUID of the entity.
          entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
          removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
          validityPeriods: [
            {
              endTime: string, # Optional. The end of the time boundary.
              startTime: string, # Optional. The start of the time boundary.
              timeZone: string, # Optional. The timezone of the time boundary.
            }
          ], # Optional. An array of time boundaries indicating validity periods.
          source: string, # Optional. indicate the source who create the classification detail
          sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
          attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
          typeName: string, # Optional. The name of the type.
          lastModifiedTS: string, # Optional. ETag for concurrency control.
        }
      ], # Optional. An array of classifications.
      displayText: string, # Optional. The display text.
      guid: string, # Optional. The GUID of the record.
      isIncomplete: boolean, # Optional. Whether it is a shell entity
      labels: [string], # Optional. labels
      meaningNames: [string], # Optional. An array of meanings.
      meanings: [
        {
          confidence: number, # Optional. The confidence of the term assignment.
          createdBy: string, # Optional. The user who created the record.
          description: string, # Optional. The description of the term assignment.
          displayText: string, # Optional. The display text.
          expression: string, # Optional. The expression of the term assignment.
          relationGuid: string, # Optional. The GUID of the relationship.
          source: string, # Optional. The source of the term.
          status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
          steward: string, # Optional. The steward of the term.
          termGuid: string, # Optional. The GUID of the term.
        }
      ], # Optional. An array of term assignment headers.
      status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of entity headers that partially updated.
}
</code>

</remarks>
    </member>
    <member name="DeleteClassificationByUniqueAttributeAsync(String,String,String,RequestContext)">
<example>
This sample shows how to call DeleteClassificationByUniqueAttributeAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

Response response = await client.DeleteClassificationByUniqueAttributeAsync("<typeName>", "<classificationName>");
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteClassificationByUniqueAttributeAsync with all parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

Response response = await client.DeleteClassificationByUniqueAttributeAsync("<typeName>", "<classificationName>", "<attrQualifiedName>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="DeleteClassificationByUniqueAttribute(String,String,String,RequestContext)">
<example>
This sample shows how to call DeleteClassificationByUniqueAttribute with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

Response response = client.DeleteClassificationByUniqueAttribute("<typeName>", "<classificationName>");
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteClassificationByUniqueAttribute with all parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

Response response = client.DeleteClassificationByUniqueAttribute("<typeName>", "<classificationName>", "<attrQualifiedName>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="AddClassificationsByUniqueAttributeAsync(String,RequestContent,String,RequestContext)">
<example>
This sample shows how to call AddClassificationsByUniqueAttributeAsync with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new[] {
    new {}
};

Response response = await client.AddClassificationsByUniqueAttributeAsync("<typeName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call AddClassificationsByUniqueAttributeAsync with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new[] {
    new {
        entityGuid = "<entityGuid>",
        entityStatus = "ACTIVE",
        removePropagationsOnEntityDelete = true,
        validityPeriods = new[] {
            new {
                endTime = "<endTime>",
                startTime = "<startTime>",
                timeZone = "<timeZone>",
            }
        },
        source = "<source>",
        sourceDetails = new {
            key = new {},
        },
        attributes = new {
            key = new {},
        },
        typeName = "<typeName>",
        lastModifiedTS = "<lastModifiedTS>",
    }
};

Response response = await client.AddClassificationsByUniqueAttributeAsync("<typeName>", RequestContent.Create(data), "<attrQualifiedName>");
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>AtlasClassification</c>:
<code>{
  entityGuid: string, # Optional. The GUID of the entity.
  entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
  removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
  validityPeriods: [
    {
      endTime: string, # Optional. The end of the time boundary.
      startTime: string, # Optional. The start of the time boundary.
      timeZone: string, # Optional. The timezone of the time boundary.
    }
  ], # Optional. An array of time boundaries indicating validity periods.
  source: string, # Optional. indicate the source who create the classification detail
  sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
  attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
  typeName: string, # Optional. The name of the type.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
}
</code>

</remarks>
    </member>
    <member name="AddClassificationsByUniqueAttribute(String,RequestContent,String,RequestContext)">
<example>
This sample shows how to call AddClassificationsByUniqueAttribute with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new[] {
    new {}
};

Response response = client.AddClassificationsByUniqueAttribute("<typeName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call AddClassificationsByUniqueAttribute with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new[] {
    new {
        entityGuid = "<entityGuid>",
        entityStatus = "ACTIVE",
        removePropagationsOnEntityDelete = true,
        validityPeriods = new[] {
            new {
                endTime = "<endTime>",
                startTime = "<startTime>",
                timeZone = "<timeZone>",
            }
        },
        source = "<source>",
        sourceDetails = new {
            key = new {},
        },
        attributes = new {
            key = new {},
        },
        typeName = "<typeName>",
        lastModifiedTS = "<lastModifiedTS>",
    }
};

Response response = client.AddClassificationsByUniqueAttribute("<typeName>", RequestContent.Create(data), "<attrQualifiedName>");
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>AtlasClassification</c>:
<code>{
  entityGuid: string, # Optional. The GUID of the entity.
  entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
  removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
  validityPeriods: [
    {
      endTime: string, # Optional. The end of the time boundary.
      startTime: string, # Optional. The start of the time boundary.
      timeZone: string, # Optional. The timezone of the time boundary.
    }
  ], # Optional. An array of time boundaries indicating validity periods.
  source: string, # Optional. indicate the source who create the classification detail
  sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
  attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
  typeName: string, # Optional. The name of the type.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
}
</code>

</remarks>
    </member>
    <member name="UpdateClassificationsByUniqueAttributeAsync(String,RequestContent,String,RequestContext)">
<example>
This sample shows how to call UpdateClassificationsByUniqueAttributeAsync with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new[] {
    new {}
};

Response response = await client.UpdateClassificationsByUniqueAttributeAsync("<typeName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdateClassificationsByUniqueAttributeAsync with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new[] {
    new {
        entityGuid = "<entityGuid>",
        entityStatus = "ACTIVE",
        removePropagationsOnEntityDelete = true,
        validityPeriods = new[] {
            new {
                endTime = "<endTime>",
                startTime = "<startTime>",
                timeZone = "<timeZone>",
            }
        },
        source = "<source>",
        sourceDetails = new {
            key = new {},
        },
        attributes = new {
            key = new {},
        },
        typeName = "<typeName>",
        lastModifiedTS = "<lastModifiedTS>",
    }
};

Response response = await client.UpdateClassificationsByUniqueAttributeAsync("<typeName>", RequestContent.Create(data), "<attrQualifiedName>");
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>AtlasClassification</c>:
<code>{
  entityGuid: string, # Optional. The GUID of the entity.
  entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
  removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
  validityPeriods: [
    {
      endTime: string, # Optional. The end of the time boundary.
      startTime: string, # Optional. The start of the time boundary.
      timeZone: string, # Optional. The timezone of the time boundary.
    }
  ], # Optional. An array of time boundaries indicating validity periods.
  source: string, # Optional. indicate the source who create the classification detail
  sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
  attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
  typeName: string, # Optional. The name of the type.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
}
</code>

</remarks>
    </member>
    <member name="UpdateClassificationsByUniqueAttribute(String,RequestContent,String,RequestContext)">
<example>
This sample shows how to call UpdateClassificationsByUniqueAttribute with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new[] {
    new {}
};

Response response = client.UpdateClassificationsByUniqueAttribute("<typeName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdateClassificationsByUniqueAttribute with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new[] {
    new {
        entityGuid = "<entityGuid>",
        entityStatus = "ACTIVE",
        removePropagationsOnEntityDelete = true,
        validityPeriods = new[] {
            new {
                endTime = "<endTime>",
                startTime = "<startTime>",
                timeZone = "<timeZone>",
            }
        },
        source = "<source>",
        sourceDetails = new {
            key = new {},
        },
        attributes = new {
            key = new {},
        },
        typeName = "<typeName>",
        lastModifiedTS = "<lastModifiedTS>",
    }
};

Response response = client.UpdateClassificationsByUniqueAttribute("<typeName>", RequestContent.Create(data), "<attrQualifiedName>");
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>AtlasClassification</c>:
<code>{
  entityGuid: string, # Optional. The GUID of the entity.
  entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
  removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
  validityPeriods: [
    {
      endTime: string, # Optional. The end of the time boundary.
      startTime: string, # Optional. The start of the time boundary.
      timeZone: string, # Optional. The timezone of the time boundary.
    }
  ], # Optional. An array of time boundaries indicating validity periods.
  source: string, # Optional. indicate the source who create the classification detail
  sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
  attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
  typeName: string, # Optional. The name of the type.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
}
</code>

</remarks>
    </member>
    <member name="SetClassificationsAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call SetClassificationsAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new {};

Response response = await client.SetClassificationsAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call SetClassificationsAsync with all request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new {
    guidHeaderMap = new {
        key = new {
            classificationNames = new[] {
                "<String>"
            },
            classifications = new[] {
                new {
                    entityGuid = "<entityGuid>",
                    entityStatus = "ACTIVE",
                    removePropagationsOnEntityDelete = true,
                    validityPeriods = new[] {
                        new {
                            endTime = "<endTime>",
                            startTime = "<startTime>",
                            timeZone = "<timeZone>",
                        }
                    },
                    source = "<source>",
                    sourceDetails = new {
                        key = new {},
                    },
                    attributes = new {
                        key = new {},
                    },
                    typeName = "<typeName>",
                    lastModifiedTS = "<lastModifiedTS>",
                }
            },
            displayText = "<displayText>",
            guid = "<guid>",
            isIncomplete = true,
            labels = new[] {
                "<String>"
            },
            meaningNames = new[] {
                "<String>"
            },
            meanings = new[] {
                new {
                    confidence = 1234,
                    createdBy = "<createdBy>",
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DISCOVERED",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            status = "ACTIVE",
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        },
    },
};

Response response = await client.SetClassificationsAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>AtlasEntityHeaders</c>:
<code>{
  guidHeaderMap: Dictionary&lt;string, AtlasEntityHeader&gt;, # Optional. The description of the guid header map,
}
</code>

</remarks>
    </member>
    <member name="SetClassifications(RequestContent,RequestContext)">
<example>
This sample shows how to call SetClassifications and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new {};

Response response = client.SetClassifications(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call SetClassifications with all request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new {
    guidHeaderMap = new {
        key = new {
            classificationNames = new[] {
                "<String>"
            },
            classifications = new[] {
                new {
                    entityGuid = "<entityGuid>",
                    entityStatus = "ACTIVE",
                    removePropagationsOnEntityDelete = true,
                    validityPeriods = new[] {
                        new {
                            endTime = "<endTime>",
                            startTime = "<startTime>",
                            timeZone = "<timeZone>",
                        }
                    },
                    source = "<source>",
                    sourceDetails = new {
                        key = new {},
                    },
                    attributes = new {
                        key = new {},
                    },
                    typeName = "<typeName>",
                    lastModifiedTS = "<lastModifiedTS>",
                }
            },
            displayText = "<displayText>",
            guid = "<guid>",
            isIncomplete = true,
            labels = new[] {
                "<String>"
            },
            meaningNames = new[] {
                "<String>"
            },
            meanings = new[] {
                new {
                    confidence = 1234,
                    createdBy = "<createdBy>",
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DISCOVERED",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
            status = "ACTIVE",
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        },
    },
};

Response response = client.SetClassifications(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>AtlasEntityHeaders</c>:
<code>{
  guidHeaderMap: Dictionary&lt;string, AtlasEntityHeader&gt;, # Optional. The description of the guid header map,
}
</code>

</remarks>
    </member>
    <member name="GetEntitiesByUniqueAttributesAsync(String,Boolean,Boolean,String,RequestContext)">
<example>
This sample shows how to call GetEntitiesByUniqueAttributesAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

Response response = await client.GetEntitiesByUniqueAttributesAsync("<typeName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetEntitiesByUniqueAttributesAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

Response response = await client.GetEntitiesByUniqueAttributesAsync("<typeName>", true, true, "<attrNQualifiedName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("businessAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("customAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("homeId").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("provenanceType").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("proxy").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("relationshipAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("businessAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("customAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("homeId").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("provenanceType").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("proxy").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("relationshipAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("lastModifiedTS").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasEntitiesWithExtInfo</c>:
<code>{
  entities: [
    {
      businessAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. Business Attributes
      classifications: [
        {
          entityGuid: string, # Optional. The GUID of the entity.
          entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
          removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
          validityPeriods: [
            {
              endTime: string, # Optional. The end of the time boundary.
              startTime: string, # Optional. The start of the time boundary.
              timeZone: string, # Optional. The timezone of the time boundary.
            }
          ], # Optional. An array of time boundaries indicating validity periods.
          source: string, # Optional. indicate the source who create the classification detail
          sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
          attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
          typeName: string, # Optional. The name of the type.
          lastModifiedTS: string, # Optional. ETag for concurrency control.
        }
      ], # Optional. An array of classifications.
      createTime: number, # Optional. The created time of the record.
      createdBy: string, # Optional. The user who created the record.
      customAttributes: Dictionary&lt;string, string&gt;, # Optional. Custom Attribute
      guid: string, # Optional. The GUID of the entity.
      homeId: string, # Optional. The home ID of the entity.
      isIncomplete: boolean, # Optional. Whether it is a shell entity
      labels: [string], # Optional. labels
      meanings: [
        {
          confidence: number, # Optional. The confidence of the term assignment.
          createdBy: string, # Optional. The user who created the record.
          description: string, # Optional. The description of the term assignment.
          displayText: string, # Optional. The display text.
          expression: string, # Optional. The expression of the term assignment.
          relationGuid: string, # Optional. The GUID of the relationship.
          source: string, # Optional. The source of the term.
          status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
          steward: string, # Optional. The steward of the term.
          termGuid: string, # Optional. The GUID of the term.
        }
      ], # Optional. An array of term assignment headers indicating the meanings of the entity.
      provenanceType: number, # Optional. Used to record the provenance of an instance of an entity or relationship.
      proxy: boolean, # Optional. Determines if there&apos;s a proxy.
      relationshipAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of relationship.
      status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      updateTime: number, # Optional. The update time of the record.
      updatedBy: string, # Optional. The user who updated the record.
      version: number, # Optional. The version of the entity.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Owner.
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of entities.
  referredEntities: Dictionary&lt;string, AtlasEntity&gt;, # Optional. The referred entities.
}
</code>

</remarks>
    </member>
    <member name="GetEntitiesByUniqueAttributes(String,Boolean,Boolean,String,RequestContext)">
<example>
This sample shows how to call GetEntitiesByUniqueAttributes with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

Response response = client.GetEntitiesByUniqueAttributes("<typeName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetEntitiesByUniqueAttributes with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

Response response = client.GetEntitiesByUniqueAttributes("<typeName>", true, true, "<attrNQualifiedName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("businessAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("customAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("homeId").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("provenanceType").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("proxy").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("relationshipAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("entities")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("businessAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("customAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("homeId").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("provenanceType").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("proxy").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("relationshipAttributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("lastModifiedTS").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasEntitiesWithExtInfo</c>:
<code>{
  entities: [
    {
      businessAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. Business Attributes
      classifications: [
        {
          entityGuid: string, # Optional. The GUID of the entity.
          entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
          removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
          validityPeriods: [
            {
              endTime: string, # Optional. The end of the time boundary.
              startTime: string, # Optional. The start of the time boundary.
              timeZone: string, # Optional. The timezone of the time boundary.
            }
          ], # Optional. An array of time boundaries indicating validity periods.
          source: string, # Optional. indicate the source who create the classification detail
          sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
          attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
          typeName: string, # Optional. The name of the type.
          lastModifiedTS: string, # Optional. ETag for concurrency control.
        }
      ], # Optional. An array of classifications.
      createTime: number, # Optional. The created time of the record.
      createdBy: string, # Optional. The user who created the record.
      customAttributes: Dictionary&lt;string, string&gt;, # Optional. Custom Attribute
      guid: string, # Optional. The GUID of the entity.
      homeId: string, # Optional. The home ID of the entity.
      isIncomplete: boolean, # Optional. Whether it is a shell entity
      labels: [string], # Optional. labels
      meanings: [
        {
          confidence: number, # Optional. The confidence of the term assignment.
          createdBy: string, # Optional. The user who created the record.
          description: string, # Optional. The description of the term assignment.
          displayText: string, # Optional. The display text.
          expression: string, # Optional. The expression of the term assignment.
          relationGuid: string, # Optional. The GUID of the relationship.
          source: string, # Optional. The source of the term.
          status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
          steward: string, # Optional. The steward of the term.
          termGuid: string, # Optional. The GUID of the term.
        }
      ], # Optional. An array of term assignment headers indicating the meanings of the entity.
      provenanceType: number, # Optional. Used to record the provenance of an instance of an entity or relationship.
      proxy: boolean, # Optional. Determines if there&apos;s a proxy.
      relationshipAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of relationship.
      status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      updateTime: number, # Optional. The update time of the record.
      updatedBy: string, # Optional. The user who updated the record.
      version: number, # Optional. The version of the entity.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Owner.
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of entities.
  referredEntities: Dictionary&lt;string, AtlasEntity&gt;, # Optional. The referred entities.
}
</code>

</remarks>
    </member>
    <member name="GetHeaderAsync(String,RequestContext)">
<example>
This sample shows how to call GetHeaderAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

Response response = await client.GetHeaderAsync("<guid>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("classificationNames")[0].ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("meaningNames")[0].ToString());
Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasEntityHeader</c>:
<code>{
  classificationNames: [string], # Optional. An array of classification names.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  displayText: string, # Optional. The display text.
  guid: string, # Optional. The GUID of the record.
  isIncomplete: boolean, # Optional. Whether it is a shell entity
  labels: [string], # Optional. labels
  meaningNames: [string], # Optional. An array of meanings.
  meanings: [
    {
      confidence: number, # Optional. The confidence of the term assignment.
      createdBy: string, # Optional. The user who created the record.
      description: string, # Optional. The description of the term assignment.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term assignment.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of term assignment headers.
  status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
  attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
  typeName: string, # Optional. The name of the type.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
}
</code>

</remarks>
    </member>
    <member name="GetHeader(String,RequestContext)">
<example>
This sample shows how to call GetHeader with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

Response response = client.GetHeader("<guid>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("classificationNames")[0].ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("isIncomplete").ToString());
Console.WriteLine(result.GetProperty("labels")[0].ToString());
Console.WriteLine(result.GetProperty("meaningNames")[0].ToString());
Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("attributes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AtlasEntityHeader</c>:
<code>{
  classificationNames: [string], # Optional. An array of classification names.
  classifications: [
    {
      entityGuid: string, # Optional. The GUID of the entity.
      entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
      removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
      validityPeriods: [
        {
          endTime: string, # Optional. The end of the time boundary.
          startTime: string, # Optional. The start of the time boundary.
          timeZone: string, # Optional. The timezone of the time boundary.
        }
      ], # Optional. An array of time boundaries indicating validity periods.
      source: string, # Optional. indicate the source who create the classification detail
      sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
      attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
      typeName: string, # Optional. The name of the type.
      lastModifiedTS: string, # Optional. ETag for concurrency control.
    }
  ], # Optional. An array of classifications.
  displayText: string, # Optional. The display text.
  guid: string, # Optional. The GUID of the record.
  isIncomplete: boolean, # Optional. Whether it is a shell entity
  labels: [string], # Optional. labels
  meaningNames: [string], # Optional. An array of meanings.
  meanings: [
    {
      confidence: number, # Optional. The confidence of the term assignment.
      createdBy: string, # Optional. The user who created the record.
      description: string, # Optional. The description of the term assignment.
      displayText: string, # Optional. The display text.
      expression: string, # Optional. The expression of the term assignment.
      relationGuid: string, # Optional. The GUID of the relationship.
      source: string, # Optional. The source of the term.
      status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
      steward: string, # Optional. The steward of the term.
      termGuid: string, # Optional. The GUID of the term.
    }
  ], # Optional. An array of term assignment headers.
  status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
  attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
  typeName: string, # Optional. The name of the type.
  lastModifiedTS: string, # Optional. ETag for concurrency control.
}
</code>

</remarks>
    </member>
    <member name="DeleteBusinessMetadataAsync(String,RequestContent,RequestContext)">
<example>
This sample shows how to call DeleteBusinessMetadataAsync with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new {
    key = new {},
};

Response response = await client.DeleteBusinessMetadataAsync("<guid>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="DeleteBusinessMetadata(String,RequestContent,RequestContext)">
<example>
This sample shows how to call DeleteBusinessMetadata with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new {
    key = new {},
};

Response response = client.DeleteBusinessMetadata("<guid>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="AddOrUpdateBusinessMetadataAsync(String,RequestContent,Boolean,RequestContext)">
<example>
This sample shows how to call AddOrUpdateBusinessMetadataAsync with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new {
    key = new {},
};

Response response = await client.AddOrUpdateBusinessMetadataAsync("<guid>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call AddOrUpdateBusinessMetadataAsync with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new {
    key = new {},
};

Response response = await client.AddOrUpdateBusinessMetadataAsync("<guid>", RequestContent.Create(data), true);
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="AddOrUpdateBusinessMetadata(String,RequestContent,Boolean,RequestContext)">
<example>
This sample shows how to call AddOrUpdateBusinessMetadata with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new {
    key = new {},
};

Response response = client.AddOrUpdateBusinessMetadata("<guid>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call AddOrUpdateBusinessMetadata with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new {
    key = new {},
};

Response response = client.AddOrUpdateBusinessMetadata("<guid>", RequestContent.Create(data), true);
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="DeleteBusinessMetadataAttributesAsync(String,String,RequestContent,RequestContext)">
<example>
This sample shows how to call DeleteBusinessMetadataAttributesAsync with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new {
    key = new {},
};

Response response = await client.DeleteBusinessMetadataAttributesAsync("<guid>", "<bmName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="DeleteBusinessMetadataAttributes(String,String,RequestContent,RequestContext)">
<example>
This sample shows how to call DeleteBusinessMetadataAttributes with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new {
    key = new {},
};

Response response = client.DeleteBusinessMetadataAttributes("<guid>", "<bmName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="AddOrUpdateBusinessMetadataAttributesAsync(String,String,RequestContent,RequestContext)">
<example>
This sample shows how to call AddOrUpdateBusinessMetadataAttributesAsync with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new {
    key = new {},
};

Response response = await client.AddOrUpdateBusinessMetadataAttributesAsync("<guid>", "<bmName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="AddOrUpdateBusinessMetadataAttributes(String,String,RequestContent,RequestContext)">
<example>
This sample shows how to call AddOrUpdateBusinessMetadataAttributes with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new {
    key = new {},
};

Response response = client.AddOrUpdateBusinessMetadataAttributes("<guid>", "<bmName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="GetSampleBusinessMetadataTemplateAsync(RequestContext)">
<example>
This sample shows how to call GetSampleBusinessMetadataTemplateAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

Response response = await client.GetSampleBusinessMetadataTemplateAsync();
if (response.ContentStream != null)
{
    using(Stream outFileStream = File.OpenWrite("<filePath>")
    {
        response.ContentStream.CopyTo(outFileStream);
    }
}
]]></code>
</example>
    </member>
    <member name="GetSampleBusinessMetadataTemplate(RequestContext)">
<example>
This sample shows how to call GetSampleBusinessMetadataTemplate and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

Response response = client.GetSampleBusinessMetadataTemplate();
if (response.ContentStream != null)
{
    using(Stream outFileStream = File.OpenWrite("<filePath>")
    {
        response.ContentStream.CopyTo(outFileStream);
    }
}
]]></code>
</example>
    </member>
    <member name="ImportBusinessMetadataAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call ImportBusinessMetadataAsync with required request content and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = File.OpenRead("<filePath>");

Response response = await client.ImportBusinessMetadataAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedImportInfoList")[0].GetProperty("childObjectName").ToString());
Console.WriteLine(result.GetProperty("failedImportInfoList")[0].GetProperty("importStatus").ToString());
Console.WriteLine(result.GetProperty("failedImportInfoList")[0].GetProperty("parentObjectName").ToString());
Console.WriteLine(result.GetProperty("failedImportInfoList")[0].GetProperty("remarks").ToString());
Console.WriteLine(result.GetProperty("successImportInfoList")[0].GetProperty("childObjectName").ToString());
Console.WriteLine(result.GetProperty("successImportInfoList")[0].GetProperty("importStatus").ToString());
Console.WriteLine(result.GetProperty("successImportInfoList")[0].GetProperty("parentObjectName").ToString());
Console.WriteLine(result.GetProperty("successImportInfoList")[0].GetProperty("remarks").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>BulkImportResponse</c>:
<code>{
  failedImportInfoList: [
    {
      childObjectName: string, # Optional. childObjectName
      importStatus: &quot;SUCCESS&quot; | &quot;FAILED&quot;, # Optional. importStatus
      parentObjectName: string, # Optional. parentObjectName
      remarks: string, # Optional. remarks
    }
  ], # Optional. failed importInfoList
  successImportInfoList: [ImportInfo], # Optional. successful importInfoList
}
</code>

</remarks>
    </member>
    <member name="ImportBusinessMetadata(RequestContent,RequestContext)">
<example>
This sample shows how to call ImportBusinessMetadata with required request content and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = File.OpenRead("<filePath>");

Response response = client.ImportBusinessMetadata(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedImportInfoList")[0].GetProperty("childObjectName").ToString());
Console.WriteLine(result.GetProperty("failedImportInfoList")[0].GetProperty("importStatus").ToString());
Console.WriteLine(result.GetProperty("failedImportInfoList")[0].GetProperty("parentObjectName").ToString());
Console.WriteLine(result.GetProperty("failedImportInfoList")[0].GetProperty("remarks").ToString());
Console.WriteLine(result.GetProperty("successImportInfoList")[0].GetProperty("childObjectName").ToString());
Console.WriteLine(result.GetProperty("successImportInfoList")[0].GetProperty("importStatus").ToString());
Console.WriteLine(result.GetProperty("successImportInfoList")[0].GetProperty("parentObjectName").ToString());
Console.WriteLine(result.GetProperty("successImportInfoList")[0].GetProperty("remarks").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>BulkImportResponse</c>:
<code>{
  failedImportInfoList: [
    {
      childObjectName: string, # Optional. childObjectName
      importStatus: &quot;SUCCESS&quot; | &quot;FAILED&quot;, # Optional. importStatus
      parentObjectName: string, # Optional. parentObjectName
      remarks: string, # Optional. remarks
    }
  ], # Optional. failed importInfoList
  successImportInfoList: [ImportInfo], # Optional. successful importInfoList
}
</code>

</remarks>
    </member>
    <member name="DeleteLabelsAsync(String,RequestContent,RequestContext)">
<example>
This sample shows how to call DeleteLabelsAsync with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new[] {
    "<String>"
};

Response response = await client.DeleteLabelsAsync("<guid>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="DeleteLabels(String,RequestContent,RequestContext)">
<example>
This sample shows how to call DeleteLabels with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new[] {
    "<String>"
};

Response response = client.DeleteLabels("<guid>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="SetLabelsAsync(String,RequestContent,RequestContext)">
<example>
This sample shows how to call SetLabelsAsync with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new[] {
    "<String>"
};

Response response = await client.SetLabelsAsync("<guid>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="SetLabels(String,RequestContent,RequestContext)">
<example>
This sample shows how to call SetLabels with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new[] {
    "<String>"
};

Response response = client.SetLabels("<guid>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="AddLabelAsync(String,RequestContent,RequestContext)">
<example>
This sample shows how to call AddLabelAsync with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new[] {
    "<String>"
};

Response response = await client.AddLabelAsync("<guid>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="AddLabel(String,RequestContent,RequestContext)">
<example>
This sample shows how to call AddLabel with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new[] {
    "<String>"
};

Response response = client.AddLabel("<guid>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="DeleteLabelsByUniqueAttributeAsync(String,RequestContent,String,RequestContext)">
<example>
This sample shows how to call DeleteLabelsByUniqueAttributeAsync with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new[] {
    "<String>"
};

Response response = await client.DeleteLabelsByUniqueAttributeAsync("<typeName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteLabelsByUniqueAttributeAsync with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new[] {
    "<String>"
};

Response response = await client.DeleteLabelsByUniqueAttributeAsync("<typeName>", RequestContent.Create(data), "<attrQualifiedName>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="DeleteLabelsByUniqueAttribute(String,RequestContent,String,RequestContext)">
<example>
This sample shows how to call DeleteLabelsByUniqueAttribute with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new[] {
    "<String>"
};

Response response = client.DeleteLabelsByUniqueAttribute("<typeName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteLabelsByUniqueAttribute with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new[] {
    "<String>"
};

Response response = client.DeleteLabelsByUniqueAttribute("<typeName>", RequestContent.Create(data), "<attrQualifiedName>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="SetLabelsByUniqueAttributeAsync(String,RequestContent,String,RequestContext)">
<example>
This sample shows how to call SetLabelsByUniqueAttributeAsync with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new[] {
    "<String>"
};

Response response = await client.SetLabelsByUniqueAttributeAsync("<typeName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call SetLabelsByUniqueAttributeAsync with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new[] {
    "<String>"
};

Response response = await client.SetLabelsByUniqueAttributeAsync("<typeName>", RequestContent.Create(data), "<attrQualifiedName>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="SetLabelsByUniqueAttribute(String,RequestContent,String,RequestContext)">
<example>
This sample shows how to call SetLabelsByUniqueAttribute with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new[] {
    "<String>"
};

Response response = client.SetLabelsByUniqueAttribute("<typeName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call SetLabelsByUniqueAttribute with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new[] {
    "<String>"
};

Response response = client.SetLabelsByUniqueAttribute("<typeName>", RequestContent.Create(data), "<attrQualifiedName>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="AddLabelsByUniqueAttributeAsync(String,RequestContent,String,RequestContext)">
<example>
This sample shows how to call AddLabelsByUniqueAttributeAsync with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new[] {
    "<String>"
};

Response response = await client.AddLabelsByUniqueAttributeAsync("<typeName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call AddLabelsByUniqueAttributeAsync with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new[] {
    "<String>"
};

Response response = await client.AddLabelsByUniqueAttributeAsync("<typeName>", RequestContent.Create(data), "<attrQualifiedName>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="AddLabelsByUniqueAttribute(String,RequestContent,String,RequestContext)">
<example>
This sample shows how to call AddLabelsByUniqueAttribute with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new[] {
    "<String>"
};

Response response = client.AddLabelsByUniqueAttribute("<typeName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call AddLabelsByUniqueAttribute with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

var data = new[] {
    "<String>"
};

Response response = client.AddLabelsByUniqueAttribute("<typeName>", RequestContent.Create(data), "<attrQualifiedName>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
  </members>
</doc>