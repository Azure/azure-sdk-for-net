// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Purview.Catalog
{
    /// <summary> The RelationshipRest service client. </summary>
    public partial class RelationshipRestClient
    {
        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get; }
        private readonly string[] AuthorizationScopes = { "https://purview.azure.net/.default" };
        private Uri endpoint;
        private readonly string apiVersion;
        private readonly ClientDiagnostics _clientDiagnostics;

        /// <summary> Initializes a new instance of RelationshipRestClient for mocking. </summary>
        protected RelationshipRestClient()
        {
        }

        /// <summary> Initializes a new instance of RelationshipRestClient. </summary>
        /// <param name="endpoint"> The catalog endpoint of your Purview account. Example: https://{accountName}.catalog.purview.azure.com. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public RelationshipRestClient(Uri endpoint, TokenCredential credential, CatalogClientOptions options = null)
        {
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }

            options ??= new CatalogClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            var authPolicy = new BearerTokenAuthenticationPolicy(credential, AuthorizationScopes);
            Pipeline = HttpPipelineBuilder.Build(options, new HttpPipelinePolicy[] { authPolicy, new LowLevelCallbackPolicy() });
            this.endpoint = endpoint;
            apiVersion = options.Version;
        }

        /// <summary> Create a new relationship between entities. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of the struct. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>blockedPropagatedClassifications</term>
        ///     <term>AtlasClassification[]</term>
        ///     <term></term>
        ///     <term> An array of blocked propagated classifications. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>end1</term>
        ///     <term>AtlasObjectId</term>
        ///     <term></term>
        ///     <term> Reference to an object-instance of an Atlas type - like entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>end2</term>
        ///     <term>AtlasObjectId</term>
        ///     <term></term>
        ///     <term> Reference to an object-instance of an Atlas type - like entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the relationship. </term>
        ///   </item>
        ///   <item>
        ///     <term>homeId</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The home ID of the relationship. </term>
        ///   </item>
        ///   <item>
        ///     <term>label</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The label of the relationship. </term>
        ///   </item>
        ///   <item>
        ///     <term>propagateTags</term>
        ///     <term>&quot;NONE&quot; | &quot;ONE_TO_TWO&quot; | &quot;TWO_TO_ONE&quot; | &quot;BOTH&quot;</term>
        ///     <term></term>
        ///     <term>
        /// PropagateTags indicates whether tags should propagate across the relationship instance.
        /// &lt;p&gt;
        /// Tags can propagate:
        /// &lt;p&gt;
        /// NONE - not at all &lt;br&gt;
        /// ONE_TO_TWO - from end 1 to 2 &lt;br&gt;
        /// TWO_TO_ONE - from end 2 to 1  &lt;br&gt;
        /// BOTH - both ways
        /// &lt;p&gt;
        /// Care needs to be taken when specifying. The use cases we are aware of where this flag is useful:
        /// &lt;p&gt;
        /// - propagating confidentiality classifications from a table to columns - ONE_TO_TWO could be used here &lt;br&gt;
        /// - propagating classifications around Glossary synonyms - BOTH could be used here.
        /// &lt;p&gt;
        /// There is an expectation that further enhancements will allow more granular control of tag propagation and will
        /// address how to resolve conflicts.
        /// </term>
        ///   </item>
        ///   <item>
        ///     <term>propagatedClassifications</term>
        ///     <term>AtlasClassification[]</term>
        ///     <term></term>
        ///     <term> An array of propagated classifications. </term>
        ///   </item>
        ///   <item>
        ///     <term>provenanceType</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> Used to record the provenance of an instance of an entity or relationship. </term>
        ///   </item>
        ///   <item>
        ///     <term>status</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term> The enum of relationship status. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the relationship. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasObjectId</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the object. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>uniqueAttributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The unique attributes of the object. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasClassification</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of the struct. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityStatus</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term> Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store. </term>
        ///   </item>
        ///   <item>
        ///     <term>propagate</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if the classification will be propagated. </term>
        ///   </item>
        ///   <item>
        ///     <term>removePropagationsOnEntityDelete</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if propagations will be removed on entity deletion. </term>
        ///   </item>
        ///   <item>
        ///     <term>validityPeriods</term>
        ///     <term>TimeBoundary[]</term>
        ///     <term></term>
        ///     <term> An array of time boundaries indicating validity periods. </term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> indicate the source who create the classification detail. </term>
        ///   </item>
        ///   <item>
        ///     <term>sourceDetails</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> more detail on source information. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>TimeBoundary</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>endTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The end of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>startTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The start of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>timeZone</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The timezone of the time boundary. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> CreateAsync(RequestContent requestBody, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateCreateRequest(requestBody, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("RelationshipRestClient.Create");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a new relationship between entities. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of the struct. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>blockedPropagatedClassifications</term>
        ///     <term>AtlasClassification[]</term>
        ///     <term></term>
        ///     <term> An array of blocked propagated classifications. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>end1</term>
        ///     <term>AtlasObjectId</term>
        ///     <term></term>
        ///     <term> Reference to an object-instance of an Atlas type - like entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>end2</term>
        ///     <term>AtlasObjectId</term>
        ///     <term></term>
        ///     <term> Reference to an object-instance of an Atlas type - like entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the relationship. </term>
        ///   </item>
        ///   <item>
        ///     <term>homeId</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The home ID of the relationship. </term>
        ///   </item>
        ///   <item>
        ///     <term>label</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The label of the relationship. </term>
        ///   </item>
        ///   <item>
        ///     <term>propagateTags</term>
        ///     <term>&quot;NONE&quot; | &quot;ONE_TO_TWO&quot; | &quot;TWO_TO_ONE&quot; | &quot;BOTH&quot;</term>
        ///     <term></term>
        ///     <term>
        /// PropagateTags indicates whether tags should propagate across the relationship instance.
        /// &lt;p&gt;
        /// Tags can propagate:
        /// &lt;p&gt;
        /// NONE - not at all &lt;br&gt;
        /// ONE_TO_TWO - from end 1 to 2 &lt;br&gt;
        /// TWO_TO_ONE - from end 2 to 1  &lt;br&gt;
        /// BOTH - both ways
        /// &lt;p&gt;
        /// Care needs to be taken when specifying. The use cases we are aware of where this flag is useful:
        /// &lt;p&gt;
        /// - propagating confidentiality classifications from a table to columns - ONE_TO_TWO could be used here &lt;br&gt;
        /// - propagating classifications around Glossary synonyms - BOTH could be used here.
        /// &lt;p&gt;
        /// There is an expectation that further enhancements will allow more granular control of tag propagation and will
        /// address how to resolve conflicts.
        /// </term>
        ///   </item>
        ///   <item>
        ///     <term>propagatedClassifications</term>
        ///     <term>AtlasClassification[]</term>
        ///     <term></term>
        ///     <term> An array of propagated classifications. </term>
        ///   </item>
        ///   <item>
        ///     <term>provenanceType</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> Used to record the provenance of an instance of an entity or relationship. </term>
        ///   </item>
        ///   <item>
        ///     <term>status</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term> The enum of relationship status. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the relationship. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasObjectId</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the object. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>uniqueAttributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The unique attributes of the object. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasClassification</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of the struct. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityStatus</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term> Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store. </term>
        ///   </item>
        ///   <item>
        ///     <term>propagate</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if the classification will be propagated. </term>
        ///   </item>
        ///   <item>
        ///     <term>removePropagationsOnEntityDelete</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if propagations will be removed on entity deletion. </term>
        ///   </item>
        ///   <item>
        ///     <term>validityPeriods</term>
        ///     <term>TimeBoundary[]</term>
        ///     <term></term>
        ///     <term> An array of time boundaries indicating validity periods. </term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> indicate the source who create the classification detail. </term>
        ///   </item>
        ///   <item>
        ///     <term>sourceDetails</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> more detail on source information. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>TimeBoundary</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>endTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The end of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>startTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The start of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>timeZone</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The timezone of the time boundary. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response Create(RequestContent requestBody, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateCreateRequest(requestBody, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("RelationshipRestClient.Create");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="Create"/> and <see cref="CreateAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateCreateRequest(RequestContent requestBody, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/relationship", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return message;
        }

        /// <summary> Update an existing relationship between entities. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of the struct. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>blockedPropagatedClassifications</term>
        ///     <term>AtlasClassification[]</term>
        ///     <term></term>
        ///     <term> An array of blocked propagated classifications. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>end1</term>
        ///     <term>AtlasObjectId</term>
        ///     <term></term>
        ///     <term> Reference to an object-instance of an Atlas type - like entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>end2</term>
        ///     <term>AtlasObjectId</term>
        ///     <term></term>
        ///     <term> Reference to an object-instance of an Atlas type - like entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the relationship. </term>
        ///   </item>
        ///   <item>
        ///     <term>homeId</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The home ID of the relationship. </term>
        ///   </item>
        ///   <item>
        ///     <term>label</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The label of the relationship. </term>
        ///   </item>
        ///   <item>
        ///     <term>propagateTags</term>
        ///     <term>&quot;NONE&quot; | &quot;ONE_TO_TWO&quot; | &quot;TWO_TO_ONE&quot; | &quot;BOTH&quot;</term>
        ///     <term></term>
        ///     <term>
        /// PropagateTags indicates whether tags should propagate across the relationship instance.
        /// &lt;p&gt;
        /// Tags can propagate:
        /// &lt;p&gt;
        /// NONE - not at all &lt;br&gt;
        /// ONE_TO_TWO - from end 1 to 2 &lt;br&gt;
        /// TWO_TO_ONE - from end 2 to 1  &lt;br&gt;
        /// BOTH - both ways
        /// &lt;p&gt;
        /// Care needs to be taken when specifying. The use cases we are aware of where this flag is useful:
        /// &lt;p&gt;
        /// - propagating confidentiality classifications from a table to columns - ONE_TO_TWO could be used here &lt;br&gt;
        /// - propagating classifications around Glossary synonyms - BOTH could be used here.
        /// &lt;p&gt;
        /// There is an expectation that further enhancements will allow more granular control of tag propagation and will
        /// address how to resolve conflicts.
        /// </term>
        ///   </item>
        ///   <item>
        ///     <term>propagatedClassifications</term>
        ///     <term>AtlasClassification[]</term>
        ///     <term></term>
        ///     <term> An array of propagated classifications. </term>
        ///   </item>
        ///   <item>
        ///     <term>provenanceType</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> Used to record the provenance of an instance of an entity or relationship. </term>
        ///   </item>
        ///   <item>
        ///     <term>status</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term> The enum of relationship status. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the relationship. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasObjectId</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the object. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>uniqueAttributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The unique attributes of the object. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasClassification</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of the struct. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityStatus</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term> Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store. </term>
        ///   </item>
        ///   <item>
        ///     <term>propagate</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if the classification will be propagated. </term>
        ///   </item>
        ///   <item>
        ///     <term>removePropagationsOnEntityDelete</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if propagations will be removed on entity deletion. </term>
        ///   </item>
        ///   <item>
        ///     <term>validityPeriods</term>
        ///     <term>TimeBoundary[]</term>
        ///     <term></term>
        ///     <term> An array of time boundaries indicating validity periods. </term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> indicate the source who create the classification detail. </term>
        ///   </item>
        ///   <item>
        ///     <term>sourceDetails</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> more detail on source information. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>TimeBoundary</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>endTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The end of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>startTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The start of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>timeZone</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The timezone of the time boundary. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> UpdateAsync(RequestContent requestBody, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateUpdateRequest(requestBody, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("RelationshipRestClient.Update");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update an existing relationship between entities. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of the struct. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>blockedPropagatedClassifications</term>
        ///     <term>AtlasClassification[]</term>
        ///     <term></term>
        ///     <term> An array of blocked propagated classifications. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>end1</term>
        ///     <term>AtlasObjectId</term>
        ///     <term></term>
        ///     <term> Reference to an object-instance of an Atlas type - like entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>end2</term>
        ///     <term>AtlasObjectId</term>
        ///     <term></term>
        ///     <term> Reference to an object-instance of an Atlas type - like entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the relationship. </term>
        ///   </item>
        ///   <item>
        ///     <term>homeId</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The home ID of the relationship. </term>
        ///   </item>
        ///   <item>
        ///     <term>label</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The label of the relationship. </term>
        ///   </item>
        ///   <item>
        ///     <term>propagateTags</term>
        ///     <term>&quot;NONE&quot; | &quot;ONE_TO_TWO&quot; | &quot;TWO_TO_ONE&quot; | &quot;BOTH&quot;</term>
        ///     <term></term>
        ///     <term>
        /// PropagateTags indicates whether tags should propagate across the relationship instance.
        /// &lt;p&gt;
        /// Tags can propagate:
        /// &lt;p&gt;
        /// NONE - not at all &lt;br&gt;
        /// ONE_TO_TWO - from end 1 to 2 &lt;br&gt;
        /// TWO_TO_ONE - from end 2 to 1  &lt;br&gt;
        /// BOTH - both ways
        /// &lt;p&gt;
        /// Care needs to be taken when specifying. The use cases we are aware of where this flag is useful:
        /// &lt;p&gt;
        /// - propagating confidentiality classifications from a table to columns - ONE_TO_TWO could be used here &lt;br&gt;
        /// - propagating classifications around Glossary synonyms - BOTH could be used here.
        /// &lt;p&gt;
        /// There is an expectation that further enhancements will allow more granular control of tag propagation and will
        /// address how to resolve conflicts.
        /// </term>
        ///   </item>
        ///   <item>
        ///     <term>propagatedClassifications</term>
        ///     <term>AtlasClassification[]</term>
        ///     <term></term>
        ///     <term> An array of propagated classifications. </term>
        ///   </item>
        ///   <item>
        ///     <term>provenanceType</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> Used to record the provenance of an instance of an entity or relationship. </term>
        ///   </item>
        ///   <item>
        ///     <term>status</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term> The enum of relationship status. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the relationship. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasObjectId</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the object. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>uniqueAttributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The unique attributes of the object. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasClassification</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of the struct. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityStatus</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term> Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store. </term>
        ///   </item>
        ///   <item>
        ///     <term>propagate</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if the classification will be propagated. </term>
        ///   </item>
        ///   <item>
        ///     <term>removePropagationsOnEntityDelete</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if propagations will be removed on entity deletion. </term>
        ///   </item>
        ///   <item>
        ///     <term>validityPeriods</term>
        ///     <term>TimeBoundary[]</term>
        ///     <term></term>
        ///     <term> An array of time boundaries indicating validity periods. </term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> indicate the source who create the classification detail. </term>
        ///   </item>
        ///   <item>
        ///     <term>sourceDetails</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> more detail on source information. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>TimeBoundary</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>endTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The end of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>startTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The start of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>timeZone</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The timezone of the time boundary. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response Update(RequestContent requestBody, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateUpdateRequest(requestBody, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("RelationshipRestClient.Update");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="Update"/> and <see cref="UpdateAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateUpdateRequest(RequestContent requestBody, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/relationship", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return message;
        }

        /// <summary> Get relationship information between entities by its GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the relationship. </param>
        /// <param name="extendedInfo"> Limits whether includes extended information. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetById2Async(string guid, bool? extendedInfo = null, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetById2Request(guid, extendedInfo, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("RelationshipRestClient.GetById2");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get relationship information between entities by its GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the relationship. </param>
        /// <param name="extendedInfo"> Limits whether includes extended information. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetById2(string guid, bool? extendedInfo = null, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetById2Request(guid, extendedInfo, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("RelationshipRestClient.GetById2");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="GetById2"/> and <see cref="GetById2Async"/> operations. </summary>
        /// <param name="guid"> The globally unique identifier of the relationship. </param>
        /// <param name="extendedInfo"> Limits whether includes extended information. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateGetById2Request(string guid, bool? extendedInfo = null, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/relationship/guid/", false);
            uri.AppendPath(guid, true);
            if (extendedInfo != null)
            {
                uri.AppendQuery("extendedInfo", extendedInfo.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete a relationship between entities by its GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the relationship. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> DeleteByIdAsync(string guid, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateDeleteByIdRequest(guid, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("RelationshipRestClient.DeleteById");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 204:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a relationship between entities by its GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the relationship. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response DeleteById(string guid, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateDeleteByIdRequest(guid, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("RelationshipRestClient.DeleteById");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 204:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="DeleteById"/> and <see cref="DeleteByIdAsync"/> operations. </summary>
        /// <param name="guid"> The globally unique identifier of the relationship. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateDeleteByIdRequest(string guid, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/relationship/guid/", false);
            uri.AppendPath(guid, true);
            request.Uri = uri;
            return message;
        }
    }
}
