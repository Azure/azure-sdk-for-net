// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Analytics.Purview.Catalog.Models;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Purview.Catalog
{
    internal partial class PurviewCollectionRestClient
    {
        private Uri endpoint;
        private string apiVersion;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of PurviewCollectionRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> The catalog endpoint of your Purview account. Example: https://{accountName}.purview.azure.com. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="apiVersion"/> is null. </exception>
        public PurviewCollectionRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint, string apiVersion = "2021-05-01-preview")
        {
            this.endpoint = endpoint ?? throw new ArgumentNullException(nameof(endpoint));
            this.apiVersion = apiVersion ?? throw new ArgumentNullException(nameof(apiVersion));
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateCreateOrUpdateEntityRequest(string collection, AtlasEntityWithExtInfo entity)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/collections/", false);
            uri.AppendPath(collection, true);
            uri.AppendPath("/entity", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(entity);
            request.Content = content;
            return message;
        }

        /// <summary>
        /// Creates or updates an entity to a collection.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <param name="collection"> the collection unique name. </param>
        /// <param name="entity"> Atlas entity with extended information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collection"/> or <paramref name="entity"/> is null. </exception>
        public async Task<Response<EntityMutationResponse>> CreateOrUpdateEntityAsync(string collection, AtlasEntityWithExtInfo entity, CancellationToken cancellationToken = default)
        {
            if (collection == null)
            {
                throw new ArgumentNullException(nameof(collection));
            }
            if (entity == null)
            {
                throw new ArgumentNullException(nameof(entity));
            }

            using var message = CreateCreateOrUpdateEntityRequest(collection, entity);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EntityMutationResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = EntityMutationResponse.DeserializeEntityMutationResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Creates or updates an entity to a collection.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <param name="collection"> the collection unique name. </param>
        /// <param name="entity"> Atlas entity with extended information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collection"/> or <paramref name="entity"/> is null. </exception>
        public Response<EntityMutationResponse> CreateOrUpdateEntity(string collection, AtlasEntityWithExtInfo entity, CancellationToken cancellationToken = default)
        {
            if (collection == null)
            {
                throw new ArgumentNullException(nameof(collection));
            }
            if (entity == null)
            {
                throw new ArgumentNullException(nameof(entity));
            }

            using var message = CreateCreateOrUpdateEntityRequest(collection, entity);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EntityMutationResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = EntityMutationResponse.DeserializeEntityMutationResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateOrUpdateEntityInBulkRequest(string collection, AtlasEntitiesWithExtInfo entities)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/collections/", false);
            uri.AppendPath(collection, true);
            uri.AppendPath("/entity/bulk", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(entities);
            request.Content = content;
            return message;
        }

        /// <summary>
        /// Creates or updates entities in bulk to a collection.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <param name="collection"> the collection unique name. </param>
        /// <param name="entities"> Atlas entities with extended information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collection"/> or <paramref name="entities"/> is null. </exception>
        public async Task<Response<EntityMutationResponse>> CreateOrUpdateEntityInBulkAsync(string collection, AtlasEntitiesWithExtInfo entities, CancellationToken cancellationToken = default)
        {
            if (collection == null)
            {
                throw new ArgumentNullException(nameof(collection));
            }
            if (entities == null)
            {
                throw new ArgumentNullException(nameof(entities));
            }

            using var message = CreateCreateOrUpdateEntityInBulkRequest(collection, entities);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EntityMutationResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = EntityMutationResponse.DeserializeEntityMutationResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Creates or updates entities in bulk to a collection.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <param name="collection"> the collection unique name. </param>
        /// <param name="entities"> Atlas entities with extended information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collection"/> or <paramref name="entities"/> is null. </exception>
        public Response<EntityMutationResponse> CreateOrUpdateEntityInBulk(string collection, AtlasEntitiesWithExtInfo entities, CancellationToken cancellationToken = default)
        {
            if (collection == null)
            {
                throw new ArgumentNullException(nameof(collection));
            }
            if (entities == null)
            {
                throw new ArgumentNullException(nameof(entities));
            }

            using var message = CreateCreateOrUpdateEntityInBulkRequest(collection, entities);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EntityMutationResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = EntityMutationResponse.DeserializeEntityMutationResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateMoveEntitiesToCollectionRequest(string collection, MoveEntitiesRequest moveEntitiesRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/collections/", false);
            uri.AppendPath(collection, true);
            uri.AppendPath("/entity/moveHere", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(moveEntitiesRequest);
            request.Content = content;
            return message;
        }

        /// <summary> Move existing entities to the target collection. </summary>
        /// <param name="collection"> the collection unique name. </param>
        /// <param name="moveEntitiesRequest"> Entity guids to be moved to target collection. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collection"/> or <paramref name="moveEntitiesRequest"/> is null. </exception>
        public async Task<Response<EntityMutationResponse>> MoveEntitiesToCollectionAsync(string collection, MoveEntitiesRequest moveEntitiesRequest, CancellationToken cancellationToken = default)
        {
            if (collection == null)
            {
                throw new ArgumentNullException(nameof(collection));
            }
            if (moveEntitiesRequest == null)
            {
                throw new ArgumentNullException(nameof(moveEntitiesRequest));
            }

            using var message = CreateMoveEntitiesToCollectionRequest(collection, moveEntitiesRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EntityMutationResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = EntityMutationResponse.DeserializeEntityMutationResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Move existing entities to the target collection. </summary>
        /// <param name="collection"> the collection unique name. </param>
        /// <param name="moveEntitiesRequest"> Entity guids to be moved to target collection. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collection"/> or <paramref name="moveEntitiesRequest"/> is null. </exception>
        public Response<EntityMutationResponse> MoveEntitiesToCollection(string collection, MoveEntitiesRequest moveEntitiesRequest, CancellationToken cancellationToken = default)
        {
            if (collection == null)
            {
                throw new ArgumentNullException(nameof(collection));
            }
            if (moveEntitiesRequest == null)
            {
                throw new ArgumentNullException(nameof(moveEntitiesRequest));
            }

            using var message = CreateMoveEntitiesToCollectionRequest(collection, moveEntitiesRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EntityMutationResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = EntityMutationResponse.DeserializeEntityMutationResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
