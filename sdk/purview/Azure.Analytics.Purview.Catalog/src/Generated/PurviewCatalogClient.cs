// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Purview.Catalog
{
    // Data plane generated client. The PurviewCatalog service client.
    /// <summary> The PurviewCatalog service client. </summary>
    public partial class PurviewCatalogClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://purview.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of PurviewCatalogClient for mocking. </summary>
        protected PurviewCatalogClient()
        {
        }

        /// <summary> Initializes a new instance of PurviewCatalogClient. </summary>
        /// <param name="endpoint"> The catalog endpoint of your Purview account. Example: https://{accountName}.purview.azure.com. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public PurviewCatalogClient(Uri endpoint, TokenCredential credential) : this(endpoint, credential, new PurviewCatalogClientOptions())
        {
        }

        /// <summary> Initializes a new instance of PurviewCatalogClient. </summary>
        /// <param name="endpoint"> The catalog endpoint of your Purview account. Example: https://{accountName}.purview.azure.com. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public PurviewCatalogClient(Uri endpoint, TokenCredential credential, PurviewCatalogClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new PurviewCatalogClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Gets data using search. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call SearchAsync and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.SearchAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call SearchAsync with all request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     keywords = "<keywords>",
        ///     offset = 1234,
        ///     limit = 1234,
        ///     filter = new {},
        ///     facets = new[] {
        ///         new {
        ///             count = 1234,
        ///             facet = "<facet>",
        ///             sort = new {},
        ///         }
        ///     },
        ///     taxonomySetting = new {
        ///         assetTypes = new[] {
        ///             "<String>"
        ///         },
        ///         facet = new {
        ///             count = 1234,
        ///             facet = "<facet>",
        ///             sort = new {},
        ///         },
        ///     },
        /// };
        /// 
        /// Response response = await client.SearchAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("@search.count").ToString());
        /// Console.WriteLine(result.GetProperty("@search.facets").GetProperty("assetType")[0].GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("@search.facets").GetProperty("assetType")[0].GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("@search.facets").GetProperty("classification")[0].GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("@search.facets").GetProperty("classification")[0].GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("@search.facets").GetProperty("classificationCategory")[0].GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("@search.facets").GetProperty("classificationCategory")[0].GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("@search.facets").GetProperty("contactId")[0].GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("@search.facets").GetProperty("contactId")[0].GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("@search.facets").GetProperty("fileExtension")[0].GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("@search.facets").GetProperty("fileExtension")[0].GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("@search.facets").GetProperty("label")[0].GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("@search.facets").GetProperty("label")[0].GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("@search.facets").GetProperty("term")[0].GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("@search.facets").GetProperty("term")[0].GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.score").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.highlights").GetProperty("id")[0].ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.highlights").GetProperty("qualifiedName")[0].ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.highlights").GetProperty("name")[0].ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.highlights").GetProperty("description")[0].ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.highlights").GetProperty("entityType")[0].ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.text").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("owner").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("entityType").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("classification")[0].ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("label")[0].ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("term")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("term")[0].GetProperty("glossaryName").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("term")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("contact")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("contact")[0].GetProperty("info").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("contact")[0].GetProperty("contactType").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("assetType")[0].ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>SearchRequest</c>:
        /// <code>{
        ///   keywords: string, # Optional. The keywords applied to all searchable fields.
        ///   offset: number, # Optional. The offset. The default value is 0. The maximum value is 100000.
        ///   limit: number, # Optional. The limit of the number of the search result. default value is 50; maximum value is 1000.
        ///   filter: AnyObject, # Optional. The filter for the search. See examples for the usage of supported filters.
        ///   facets: [
        ///     {
        ///       count: number, # Optional. The count of the facet item.
        ///       facet: string, # Optional. The name of the facet item.
        ///       sort: AnyObject, # Optional. Any object
        ///     }
        ///   ], # Optional.
        ///   taxonomySetting: {
        ///     assetTypes: [string], # Optional.
        ///     facet: SearchFacetItem, # Optional. The content of a search facet result item.
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>SearchResult</c>:
        /// <code>{
        ///   @search.count: number, # Optional. The total number of search results (not the number of documents in a single page).
        ///   @search.facets: {
        ///     assetType: [
        ///       {
        ///         count: number, # Optional. The count of the facet item.
        ///         value: string, # Optional. The name of the facet item.
        ///       }
        ///     ], # Optional.
        ///     classification: [SearchFacetItemValue], # Optional.
        ///     classificationCategory: [SearchFacetItemValue], # Optional.
        ///     contactId: [SearchFacetItemValue], # Optional.
        ///     fileExtension: [SearchFacetItemValue], # Optional.
        ///     label: [SearchFacetItemValue], # Optional.
        ///     term: [SearchFacetItemValue], # Optional.
        ///   }, # Optional. A facet list that consists of index fields assetType ,classification, contactId, and label. When the facet is specified in the request, the value of the facet is returned as an element of @search.facets.
        ///   value: [SearchResultValue], # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> SearchAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewCatalogClient.Search");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSearchRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets data using search. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call Search and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.Search(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call Search with all request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     keywords = "<keywords>",
        ///     offset = 1234,
        ///     limit = 1234,
        ///     filter = new {},
        ///     facets = new[] {
        ///         new {
        ///             count = 1234,
        ///             facet = "<facet>",
        ///             sort = new {},
        ///         }
        ///     },
        ///     taxonomySetting = new {
        ///         assetTypes = new[] {
        ///             "<String>"
        ///         },
        ///         facet = new {
        ///             count = 1234,
        ///             facet = "<facet>",
        ///             sort = new {},
        ///         },
        ///     },
        /// };
        /// 
        /// Response response = client.Search(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("@search.count").ToString());
        /// Console.WriteLine(result.GetProperty("@search.facets").GetProperty("assetType")[0].GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("@search.facets").GetProperty("assetType")[0].GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("@search.facets").GetProperty("classification")[0].GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("@search.facets").GetProperty("classification")[0].GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("@search.facets").GetProperty("classificationCategory")[0].GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("@search.facets").GetProperty("classificationCategory")[0].GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("@search.facets").GetProperty("contactId")[0].GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("@search.facets").GetProperty("contactId")[0].GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("@search.facets").GetProperty("fileExtension")[0].GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("@search.facets").GetProperty("fileExtension")[0].GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("@search.facets").GetProperty("label")[0].GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("@search.facets").GetProperty("label")[0].GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("@search.facets").GetProperty("term")[0].GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("@search.facets").GetProperty("term")[0].GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.score").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.highlights").GetProperty("id")[0].ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.highlights").GetProperty("qualifiedName")[0].ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.highlights").GetProperty("name")[0].ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.highlights").GetProperty("description")[0].ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.highlights").GetProperty("entityType")[0].ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.text").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("owner").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("entityType").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("classification")[0].ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("label")[0].ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("term")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("term")[0].GetProperty("glossaryName").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("term")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("contact")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("contact")[0].GetProperty("info").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("contact")[0].GetProperty("contactType").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("assetType")[0].ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>SearchRequest</c>:
        /// <code>{
        ///   keywords: string, # Optional. The keywords applied to all searchable fields.
        ///   offset: number, # Optional. The offset. The default value is 0. The maximum value is 100000.
        ///   limit: number, # Optional. The limit of the number of the search result. default value is 50; maximum value is 1000.
        ///   filter: AnyObject, # Optional. The filter for the search. See examples for the usage of supported filters.
        ///   facets: [
        ///     {
        ///       count: number, # Optional. The count of the facet item.
        ///       facet: string, # Optional. The name of the facet item.
        ///       sort: AnyObject, # Optional. Any object
        ///     }
        ///   ], # Optional.
        ///   taxonomySetting: {
        ///     assetTypes: [string], # Optional.
        ///     facet: SearchFacetItem, # Optional. The content of a search facet result item.
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>SearchResult</c>:
        /// <code>{
        ///   @search.count: number, # Optional. The total number of search results (not the number of documents in a single page).
        ///   @search.facets: {
        ///     assetType: [
        ///       {
        ///         count: number, # Optional. The count of the facet item.
        ///         value: string, # Optional. The name of the facet item.
        ///       }
        ///     ], # Optional.
        ///     classification: [SearchFacetItemValue], # Optional.
        ///     classificationCategory: [SearchFacetItemValue], # Optional.
        ///     contactId: [SearchFacetItemValue], # Optional.
        ///     fileExtension: [SearchFacetItemValue], # Optional.
        ///     label: [SearchFacetItemValue], # Optional.
        ///     term: [SearchFacetItemValue], # Optional.
        ///   }, # Optional. A facet list that consists of index fields assetType ,classification, contactId, and label. When the facet is specified in the request, the value of the facet is returned as an element of @search.facets.
        ///   value: [SearchResultValue], # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response Search(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewCatalogClient.Search");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSearchRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get search suggestions by query criteria. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call SuggestAsync and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.SuggestAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call SuggestAsync with all request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     keywords = "<keywords>",
        ///     limit = 1234,
        ///     filter = new {},
        /// };
        /// 
        /// Response response = await client.SuggestAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.score").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.text").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("owner").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("entityType").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("classification")[0].ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("label")[0].ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("term")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("term")[0].GetProperty("glossaryName").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("term")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("contact")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("contact")[0].GetProperty("info").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("contact")[0].GetProperty("contactType").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("assetType")[0].ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>SuggestRequest</c>:
        /// <code>{
        ///   keywords: string, # Optional. The keywords applied to all fields that support suggest operation. It must be at least 1 character, and no more than 100 characters. In the index schema we defined a default suggester which lists all the supported fields and specifies a search mode.
        ///   limit: number, # Optional. The number of suggestions we hope to return. The default value is 5. The value must be a number between 1 and 100.
        ///   filter: AnyObject, # Optional. The filter for the search.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>SuggestResult</c>:
        /// <code>{
        ///   value: [SuggestResultValue], # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> SuggestAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewCatalogClient.Suggest");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSuggestRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get search suggestions by query criteria. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call Suggest and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.Suggest(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call Suggest with all request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     keywords = "<keywords>",
        ///     limit = 1234,
        ///     filter = new {},
        /// };
        /// 
        /// Response response = client.Suggest(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.score").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.text").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("owner").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("entityType").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("classification")[0].ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("label")[0].ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("term")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("term")[0].GetProperty("glossaryName").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("term")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("contact")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("contact")[0].GetProperty("info").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("contact")[0].GetProperty("contactType").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("assetType")[0].ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>SuggestRequest</c>:
        /// <code>{
        ///   keywords: string, # Optional. The keywords applied to all fields that support suggest operation. It must be at least 1 character, and no more than 100 characters. In the index schema we defined a default suggester which lists all the supported fields and specifies a search mode.
        ///   limit: number, # Optional. The number of suggestions we hope to return. The default value is 5. The value must be a number between 1 and 100.
        ///   filter: AnyObject, # Optional. The filter for the search.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>SuggestResult</c>:
        /// <code>{
        ///   value: [SuggestResultValue], # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response Suggest(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewCatalogClient.Suggest");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSuggestRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Browse entities by path or entity type. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call BrowseAsync and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.BrowseAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call BrowseAsync with all request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     entityType = "<entityType>",
        ///     path = "<path>",
        ///     limit = 1234,
        ///     offset = 1234,
        /// };
        /// 
        /// Response response = await client.BrowseAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("@search.count").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("entityType").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("isLeaf").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("owner")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("owner")[0].GetProperty("displayName").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("owner")[0].GetProperty("mail").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("owner")[0].GetProperty("contactType").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("path").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("qualifiedName").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>BrowseRequest</c>:
        /// <code>{
        ///   entityType: string, # Optional. The entity type to browse as the root level entry point.
        ///   path: string, # Optional. The path to browse the next level child entities.
        ///   limit: number, # Optional. The number of browse items we hope to return. The maximum value is 10000.
        ///   offset: number, # Optional. The offset. The default value is 0. The maximum value is 100000.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>BrowseResult</c>:
        /// <code>{
        ///   @search.count: number, # Optional. The total number of browse results.
        ///   value: [BrowseResultValue], # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> BrowseAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewCatalogClient.Browse");
            scope.Start();
            try
            {
                using HttpMessage message = CreateBrowseRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Browse entities by path or entity type. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call Browse and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.Browse(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call Browse with all request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     entityType = "<entityType>",
        ///     path = "<path>",
        ///     limit = 1234,
        ///     offset = 1234,
        /// };
        /// 
        /// Response response = client.Browse(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("@search.count").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("entityType").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("isLeaf").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("owner")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("owner")[0].GetProperty("displayName").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("owner")[0].GetProperty("mail").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("owner")[0].GetProperty("contactType").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("path").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("qualifiedName").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>BrowseRequest</c>:
        /// <code>{
        ///   entityType: string, # Optional. The entity type to browse as the root level entry point.
        ///   path: string, # Optional. The path to browse the next level child entities.
        ///   limit: number, # Optional. The number of browse items we hope to return. The maximum value is 10000.
        ///   offset: number, # Optional. The offset. The default value is 0. The maximum value is 100000.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>BrowseResult</c>:
        /// <code>{
        ///   @search.count: number, # Optional. The total number of browse results.
        ///   value: [BrowseResultValue], # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response Browse(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewCatalogClient.Browse");
            scope.Start();
            try
            {
                using HttpMessage message = CreateBrowseRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get auto complete options. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call AutoCompleteAsync and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.AutoCompleteAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call AutoCompleteAsync with all request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     keywords = "<keywords>",
        ///     limit = 1234,
        ///     filter = new {},
        /// };
        /// 
        /// Response response = await client.AutoCompleteAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("text").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("queryPlusText").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AutoCompleteRequest</c>:
        /// <code>{
        ///   keywords: string, # Optional. The keywords applied to all fields that support autocomplete operation. It must be at least 1 character, and no more than 100 characters.
        ///   limit: number, # Optional. The number of autocomplete results we hope to return. The default value is 50. The value must be a number between 1 and 100.
        ///   filter: AnyObject, # Optional. The filter for the autocomplete request.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AutoCompleteResult</c>:
        /// <code>{
        ///   value: [AutoCompleteResultValue], # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> AutoCompleteAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewCatalogClient.AutoComplete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAutoCompleteRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get auto complete options. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call AutoComplete and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.AutoComplete(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call AutoComplete with all request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     keywords = "<keywords>",
        ///     limit = 1234,
        ///     filter = new {},
        /// };
        /// 
        /// Response response = client.AutoComplete(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("text").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("queryPlusText").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AutoCompleteRequest</c>:
        /// <code>{
        ///   keywords: string, # Optional. The keywords applied to all fields that support autocomplete operation. It must be at least 1 character, and no more than 100 characters.
        ///   limit: number, # Optional. The number of autocomplete results we hope to return. The default value is 50. The value must be a number between 1 and 100.
        ///   filter: AnyObject, # Optional. The filter for the autocomplete request.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AutoCompleteResult</c>:
        /// <code>{
        ///   value: [AutoCompleteResultValue], # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response AutoComplete(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewCatalogClient.AutoComplete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAutoCompleteRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private PurviewEntities _cachedPurviewEntities;
        private PurviewGlossaries _cachedPurviewGlossaries;
        private PurviewLineages _cachedPurviewLineages;
        private PurviewRelationships _cachedPurviewRelationships;
        private PurviewTypes _cachedPurviewTypes;
        private PurviewCollections _cachedPurviewCollections;

        /// <summary> Initializes a new instance of PurviewEntities. </summary>
        public virtual PurviewEntities GetPurviewEntitiesClient()
        {
            return Volatile.Read(ref _cachedPurviewEntities) ?? Interlocked.CompareExchange(ref _cachedPurviewEntities, new PurviewEntities(ClientDiagnostics, _pipeline, _tokenCredential, _endpoint), null) ?? _cachedPurviewEntities;
        }

        /// <summary> Initializes a new instance of PurviewGlossaries. </summary>
        public virtual PurviewGlossaries GetPurviewGlossariesClient()
        {
            return Volatile.Read(ref _cachedPurviewGlossaries) ?? Interlocked.CompareExchange(ref _cachedPurviewGlossaries, new PurviewGlossaries(ClientDiagnostics, _pipeline, _tokenCredential, _endpoint, _apiVersion), null) ?? _cachedPurviewGlossaries;
        }

        /// <summary> Initializes a new instance of PurviewLineages. </summary>
        public virtual PurviewLineages GetPurviewLineagesClient()
        {
            return Volatile.Read(ref _cachedPurviewLineages) ?? Interlocked.CompareExchange(ref _cachedPurviewLineages, new PurviewLineages(ClientDiagnostics, _pipeline, _tokenCredential, _endpoint, _apiVersion), null) ?? _cachedPurviewLineages;
        }

        /// <summary> Initializes a new instance of PurviewRelationships. </summary>
        public virtual PurviewRelationships GetPurviewRelationshipsClient()
        {
            return Volatile.Read(ref _cachedPurviewRelationships) ?? Interlocked.CompareExchange(ref _cachedPurviewRelationships, new PurviewRelationships(ClientDiagnostics, _pipeline, _tokenCredential, _endpoint), null) ?? _cachedPurviewRelationships;
        }

        /// <summary> Initializes a new instance of PurviewTypes. </summary>
        public virtual PurviewTypes GetPurviewTypesClient()
        {
            return Volatile.Read(ref _cachedPurviewTypes) ?? Interlocked.CompareExchange(ref _cachedPurviewTypes, new PurviewTypes(ClientDiagnostics, _pipeline, _tokenCredential, _endpoint, _apiVersion), null) ?? _cachedPurviewTypes;
        }

        /// <summary> Initializes a new instance of PurviewCollections. </summary>
        public virtual PurviewCollections GetPurviewCollectionsClient()
        {
            return Volatile.Read(ref _cachedPurviewCollections) ?? Interlocked.CompareExchange(ref _cachedPurviewCollections, new PurviewCollections(ClientDiagnostics, _pipeline, _tokenCredential, _endpoint, _apiVersion), null) ?? _cachedPurviewCollections;
        }

        internal HttpMessage CreateSearchRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/search/query", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateSuggestRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/search/suggest", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateBrowseRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/browse", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateAutoCompleteRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/search/autocomplete", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
