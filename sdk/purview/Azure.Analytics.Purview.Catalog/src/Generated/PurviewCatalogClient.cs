// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Purview.Catalog
{
    /// <summary> The PurviewCatalog service client. </summary>
    public partial class PurviewCatalogClient
    {
        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get => _pipeline; }
        private HttpPipeline _pipeline;
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly PurviewCatalogRestClient _restClient;
        private readonly string[] AuthorizationScopes = { "https://purview.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;

        /// <summary> Initializes a new instance of PurviewCatalogClient for mocking. </summary>
        protected PurviewCatalogClient()
        {
        }

        /// <summary> Initializes a new instance of PurviewCatalogClient. </summary>
        /// <param name="endpoint"> The catalog endpoint of your Purview account. Example: https://{accountName}.catalog.purview.azure.com. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public PurviewCatalogClient(Uri endpoint, TokenCredential credential, PurviewCatalogClientOptions options = null)
        {
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }

            options ??= new PurviewCatalogClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _tokenCredential = credential;
            var authPolicy = new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes);
            _pipeline = HttpPipelineBuilder.Build(options, new HttpPipelinePolicy[] { new LowLevelCallbackPolicy() }, new HttpPipelinePolicy[] { authPolicy }, new ResponseClassifier());
            _restClient = new PurviewCatalogRestClient(_clientDiagnostics, _pipeline, endpoint, options.Version);
        }

        /// <summary> Gets data using search. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   keywords: string,
        ///   offset: number,
        ///   limit: number,
        ///   filter: AnyObject,
        ///   facets: [
        ///     {
        ///       count: number,
        ///       facet: string,
        ///       sort: AnyObject
        ///     }
        ///   ],
        ///   taxonomySetting: {
        ///     assetTypes: [string],
        ///     facet: SearchFacetItem
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   @search.count: number,
        ///   @search.facets: {
        ///     assetType: [
        ///       {
        ///         count: number,
        ///         value: string
        ///       }
        ///     ],
        ///     classification: [SearchFacetItemValue],
        ///     classificationCategory: [SearchFacetItemValue],
        ///     contactId: [SearchFacetItemValue],
        ///     fileExtension: [SearchFacetItemValue],
        ///     label: [SearchFacetItemValue],
        ///     term: [SearchFacetItemValue]
        ///   },
        ///   value: [SearchResultValue]
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> SearchAsync(RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewCatalogClient.Search");
            scope.Start();
            try
            {
                return await _restClient.SearchAsync(content, options).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets data using search. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   keywords: string,
        ///   offset: number,
        ///   limit: number,
        ///   filter: AnyObject,
        ///   facets: [
        ///     {
        ///       count: number,
        ///       facet: string,
        ///       sort: AnyObject
        ///     }
        ///   ],
        ///   taxonomySetting: {
        ///     assetTypes: [string],
        ///     facet: SearchFacetItem
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   @search.count: number,
        ///   @search.facets: {
        ///     assetType: [
        ///       {
        ///         count: number,
        ///         value: string
        ///       }
        ///     ],
        ///     classification: [SearchFacetItemValue],
        ///     classificationCategory: [SearchFacetItemValue],
        ///     contactId: [SearchFacetItemValue],
        ///     fileExtension: [SearchFacetItemValue],
        ///     label: [SearchFacetItemValue],
        ///     term: [SearchFacetItemValue]
        ///   },
        ///   value: [SearchResultValue]
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response Search(RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewCatalogClient.Search");
            scope.Start();
            try
            {
                return _restClient.Search(content, options);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get search suggestions by query criteria. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   keywords: string,
        ///   limit: number,
        ///   filter: AnyObject
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [SuggestResultValue]
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> SuggestAsync(RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewCatalogClient.Suggest");
            scope.Start();
            try
            {
                return await _restClient.SuggestAsync(content, options).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get search suggestions by query criteria. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   keywords: string,
        ///   limit: number,
        ///   filter: AnyObject
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [SuggestResultValue]
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response Suggest(RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewCatalogClient.Suggest");
            scope.Start();
            try
            {
                return _restClient.Suggest(content, options);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get auto complete options. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   keywords: string,
        ///   limit: number,
        ///   filter: AnyObject
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [AutoCompleteResultValue]
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> AutoCompleteAsync(RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewCatalogClient.AutoComplete");
            scope.Start();
            try
            {
                return await _restClient.AutoCompleteAsync(content, options).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get auto complete options. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   keywords: string,
        ///   limit: number,
        ///   filter: AnyObject
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [AutoCompleteResultValue]
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response AutoComplete(RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewCatalogClient.AutoComplete");
            scope.Start();
            try
            {
                return _restClient.AutoComplete(content, options);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get lineage info of the entity specified by GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="direction"> The direction of the lineage, which could be INPUT, OUTPUT or BOTH. </param>
        /// <param name="depth"> The number of hops for lineage. </param>
        /// <param name="width"> The number of max expanding width in lineage. </param>
        /// <param name="includeParent"> True to include the parent chain in the response. </param>
        /// <param name="getDerivedLineage"> True to include derived lineage in the response. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   baseEntityGuid: string,
        ///   guidEntityMap: Dictionary&lt;string, AtlasEntityHeader&gt;,
        ///   widthCounts: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
        ///   lineageDepth: number,
        ///   lineageWidth: number,
        ///   includeParent: boolean,
        ///   childrenCount: number,
        ///   lineageDirection: &quot;INPUT&quot; | &quot;OUTPUT&quot; | &quot;BOTH&quot;,
        ///   parentRelations: [
        ///     {
        ///       childEntityId: string,
        ///       relationshipId: string,
        ///       parentEntityId: string
        ///     }
        ///   ],
        ///   relations: [
        ///     {
        ///       fromEntityId: string,
        ///       relationshipId: string,
        ///       toEntityId: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetLineageGraphAsync(string guid, string direction, int? depth = null, int? width = null, bool? includeParent = null, bool? getDerivedLineage = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewCatalogClient.GetLineageGraph");
            scope.Start();
            try
            {
                return await _restClient.GetLineageGraphAsync(guid, direction, depth, width, includeParent, getDerivedLineage, options).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get lineage info of the entity specified by GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="direction"> The direction of the lineage, which could be INPUT, OUTPUT or BOTH. </param>
        /// <param name="depth"> The number of hops for lineage. </param>
        /// <param name="width"> The number of max expanding width in lineage. </param>
        /// <param name="includeParent"> True to include the parent chain in the response. </param>
        /// <param name="getDerivedLineage"> True to include derived lineage in the response. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   baseEntityGuid: string,
        ///   guidEntityMap: Dictionary&lt;string, AtlasEntityHeader&gt;,
        ///   widthCounts: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
        ///   lineageDepth: number,
        ///   lineageWidth: number,
        ///   includeParent: boolean,
        ///   childrenCount: number,
        ///   lineageDirection: &quot;INPUT&quot; | &quot;OUTPUT&quot; | &quot;BOTH&quot;,
        ///   parentRelations: [
        ///     {
        ///       childEntityId: string,
        ///       relationshipId: string,
        ///       parentEntityId: string
        ///     }
        ///   ],
        ///   relations: [
        ///     {
        ///       fromEntityId: string,
        ///       relationshipId: string,
        ///       toEntityId: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response GetLineageGraph(string guid, string direction, int? depth = null, int? width = null, bool? includeParent = null, bool? getDerivedLineage = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewCatalogClient.GetLineageGraph");
            scope.Start();
            try
            {
                return _restClient.GetLineageGraph(guid, direction, depth, width, includeParent, getDerivedLineage, options);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Return immediate next page lineage info about entity with pagination. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="direction"> The direction of the lineage, which could be INPUT, OUTPUT or BOTH. </param>
        /// <param name="getDerivedLineage"> True to include derived lineage in the response. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   baseEntityGuid: string,
        ///   guidEntityMap: Dictionary&lt;string, AtlasEntityHeader&gt;,
        ///   widthCounts: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
        ///   lineageDepth: number,
        ///   lineageWidth: number,
        ///   includeParent: boolean,
        ///   childrenCount: number,
        ///   lineageDirection: &quot;INPUT&quot; | &quot;OUTPUT&quot; | &quot;BOTH&quot;,
        ///   parentRelations: [
        ///     {
        ///       childEntityId: string,
        ///       relationshipId: string,
        ///       parentEntityId: string
        ///     }
        ///   ],
        ///   relations: [
        ///     {
        ///       fromEntityId: string,
        ///       relationshipId: string,
        ///       toEntityId: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> NextPageLineageAsync(string guid, string direction, bool? getDerivedLineage = null, int? offset = null, int? limit = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewCatalogClient.NextPageLineage");
            scope.Start();
            try
            {
                return await _restClient.NextPageLineageAsync(guid, direction, getDerivedLineage, offset, limit, options).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Return immediate next page lineage info about entity with pagination. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="direction"> The direction of the lineage, which could be INPUT, OUTPUT or BOTH. </param>
        /// <param name="getDerivedLineage"> True to include derived lineage in the response. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   baseEntityGuid: string,
        ///   guidEntityMap: Dictionary&lt;string, AtlasEntityHeader&gt;,
        ///   widthCounts: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
        ///   lineageDepth: number,
        ///   lineageWidth: number,
        ///   includeParent: boolean,
        ///   childrenCount: number,
        ///   lineageDirection: &quot;INPUT&quot; | &quot;OUTPUT&quot; | &quot;BOTH&quot;,
        ///   parentRelations: [
        ///     {
        ///       childEntityId: string,
        ///       relationshipId: string,
        ///       parentEntityId: string
        ///     }
        ///   ],
        ///   relations: [
        ///     {
        ///       fromEntityId: string,
        ///       relationshipId: string,
        ///       toEntityId: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response NextPageLineage(string guid, string direction, bool? getDerivedLineage = null, int? offset = null, int? limit = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewCatalogClient.NextPageLineage");
            scope.Start();
            try
            {
                return _restClient.NextPageLineage(guid, direction, getDerivedLineage, offset, limit, options);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
