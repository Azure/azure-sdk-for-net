// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

#pragma warning disable AZC0007

namespace Azure.Analytics.Purview.Catalog
{
    /// <summary> The EntityRest service client. </summary>
    public partial class EntityRestClient
    {
        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get; }
        private readonly string[] AuthorizationScopes = { "https://purview.azure.net/.default" };
        private Uri endpoint;
        private readonly string apiVersion;

        /// <summary> Initializes a new instance of EntityRestClient for mocking. </summary>
        protected EntityRestClient()
        {
        }

        /// <summary> Initializes a new instance of EntityRestClient. </summary>
        /// <param name="endpoint"> The catalog endpoint of your Purview account. Example: https://{accountName}.catalog.purview.azure.com. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public EntityRestClient(Uri endpoint, TokenCredential credential, CatalogClientOptions options = null)
        {
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }

            options ??= new CatalogClientOptions();
            Pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, AuthorizationScopes));
            this.endpoint = endpoint;
            apiVersion = options.Version;
        }

        /// <summary>
        /// Create or update an entity in Atlas.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>referredEntities</term>
        ///     <term>Dictionary&lt;string, AtlasEntity&gt;</term>
        ///     <term></term>
        ///     <term> The referred entities. </term>
        ///   </item>
        ///   <item>
        ///     <term>entity</term>
        ///     <term>AtlasEntity</term>
        ///     <term></term>
        ///     <term> An instance of an entity - like hive_table, hive_database. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasEntity</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of the struct. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>classifications</term>
        ///     <term>AtlasClassification[]</term>
        ///     <term></term>
        ///     <term> An array of classifications. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>homeId</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The home ID of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>meanings</term>
        ///     <term>AtlasTermAssignmentHeader[]</term>
        ///     <term></term>
        ///     <term> An array of term assignment headers indicating the meanings of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>provenanceType</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> Used to record the provenance of an instance of an entity or relationship. </term>
        ///   </item>
        ///   <item>
        ///     <term>proxy</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if there&apos;s a proxy. </term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipAttributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of relationship. </term>
        ///   </item>
        ///   <item>
        ///     <term>status</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term> Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> indicate the source who create the classification detail. </term>
        ///   </item>
        ///   <item>
        ///     <term>sourceDetails</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> more detail on source information. </term>
        ///   </item>
        ///   <item>
        ///     <term>contacts</term>
        ///     <term>Dictionary&lt;string, ContactBasic[]&gt;</term>
        ///     <term></term>
        ///     <term> The dictionary of contacts for terms. Key could be Expert or Owner. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasClassification</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of the struct. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityStatus</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term> Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store. </term>
        ///   </item>
        ///   <item>
        ///     <term>propagate</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if the classification will be propagated. </term>
        ///   </item>
        ///   <item>
        ///     <term>removePropagationsOnEntityDelete</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if propagations will be removed on entity deletion. </term>
        ///   </item>
        ///   <item>
        ///     <term>validityPeriods</term>
        ///     <term>TimeBoundary[]</term>
        ///     <term></term>
        ///     <term> An array of time boundaries indicating validity periods. </term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> indicate the source who create the classification detail. </term>
        ///   </item>
        ///   <item>
        ///     <term>sourceDetails</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> more detail on source information. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasTermAssignmentHeader</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>confidence</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The confidence of the term assignment. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the term assignment. </term>
        ///   </item>
        ///   <item>
        ///     <term>displayText</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The display text. </term>
        ///   </item>
        ///   <item>
        ///     <term>expression</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The expression of the term assignment. </term>
        ///   </item>
        ///   <item>
        ///     <term>relationGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the relationship. </term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The source of the term. </term>
        ///   </item>
        ///   <item>
        ///     <term>status</term>
        ///     <term>&quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;</term>
        ///     <term></term>
        ///     <term> The status of terms assignment. </term>
        ///   </item>
        ///   <item>
        ///     <term>steward</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The steward of the term. </term>
        ///   </item>
        ///   <item>
        ///     <term>termGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the term. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>ContactBasic</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>id</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> Azure Active Directory object Id. </term>
        ///   </item>
        ///   <item>
        ///     <term>info</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> additional information to describe this contact. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>TimeBoundary</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>endTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The end of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>startTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The start of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>timeZone</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The timezone of the time boundary. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CreateOrUpdateAsync(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateCreateOrUpdateRequest(requestBody);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create or update an entity in Atlas.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>referredEntities</term>
        ///     <term>Dictionary&lt;string, AtlasEntity&gt;</term>
        ///     <term></term>
        ///     <term> The referred entities. </term>
        ///   </item>
        ///   <item>
        ///     <term>entity</term>
        ///     <term>AtlasEntity</term>
        ///     <term></term>
        ///     <term> An instance of an entity - like hive_table, hive_database. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasEntity</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of the struct. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>classifications</term>
        ///     <term>AtlasClassification[]</term>
        ///     <term></term>
        ///     <term> An array of classifications. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>homeId</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The home ID of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>meanings</term>
        ///     <term>AtlasTermAssignmentHeader[]</term>
        ///     <term></term>
        ///     <term> An array of term assignment headers indicating the meanings of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>provenanceType</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> Used to record the provenance of an instance of an entity or relationship. </term>
        ///   </item>
        ///   <item>
        ///     <term>proxy</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if there&apos;s a proxy. </term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipAttributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of relationship. </term>
        ///   </item>
        ///   <item>
        ///     <term>status</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term> Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> indicate the source who create the classification detail. </term>
        ///   </item>
        ///   <item>
        ///     <term>sourceDetails</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> more detail on source information. </term>
        ///   </item>
        ///   <item>
        ///     <term>contacts</term>
        ///     <term>Dictionary&lt;string, ContactBasic[]&gt;</term>
        ///     <term></term>
        ///     <term> The dictionary of contacts for terms. Key could be Expert or Owner. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasClassification</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of the struct. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityStatus</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term> Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store. </term>
        ///   </item>
        ///   <item>
        ///     <term>propagate</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if the classification will be propagated. </term>
        ///   </item>
        ///   <item>
        ///     <term>removePropagationsOnEntityDelete</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if propagations will be removed on entity deletion. </term>
        ///   </item>
        ///   <item>
        ///     <term>validityPeriods</term>
        ///     <term>TimeBoundary[]</term>
        ///     <term></term>
        ///     <term> An array of time boundaries indicating validity periods. </term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> indicate the source who create the classification detail. </term>
        ///   </item>
        ///   <item>
        ///     <term>sourceDetails</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> more detail on source information. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasTermAssignmentHeader</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>confidence</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The confidence of the term assignment. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the term assignment. </term>
        ///   </item>
        ///   <item>
        ///     <term>displayText</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The display text. </term>
        ///   </item>
        ///   <item>
        ///     <term>expression</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The expression of the term assignment. </term>
        ///   </item>
        ///   <item>
        ///     <term>relationGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the relationship. </term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The source of the term. </term>
        ///   </item>
        ///   <item>
        ///     <term>status</term>
        ///     <term>&quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;</term>
        ///     <term></term>
        ///     <term> The status of terms assignment. </term>
        ///   </item>
        ///   <item>
        ///     <term>steward</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The steward of the term. </term>
        ///   </item>
        ///   <item>
        ///     <term>termGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the term. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>ContactBasic</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>id</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> Azure Active Directory object Id. </term>
        ///   </item>
        ///   <item>
        ///     <term>info</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> additional information to describe this contact. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>TimeBoundary</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>endTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The end of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>startTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The start of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>timeZone</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The timezone of the time boundary. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CreateOrUpdate(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateCreateOrUpdateRequest(requestBody);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="CreateOrUpdate"/> and <see cref="CreateOrUpdateAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        private Request CreateCreateOrUpdateRequest(RequestContent requestBody)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/entity", false);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }

        /// <summary> List entities in bulk identified by its GUIDs. </summary>
        /// <param name="guid"> An array of GUIDs of entities to create. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="excludeRelationshipTypes"> An array of the relationship types need to be excluded from the response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetByGuidsAsync(IEnumerable<string> guid, bool? minExtInfo = null, bool? ignoreRelationships = null, IEnumerable<string> excludeRelationshipTypes = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetByGuidsRequest(guid, minExtInfo, ignoreRelationships, excludeRelationshipTypes);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> List entities in bulk identified by its GUIDs. </summary>
        /// <param name="guid"> An array of GUIDs of entities to create. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="excludeRelationshipTypes"> An array of the relationship types need to be excluded from the response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetByGuids(IEnumerable<string> guid, bool? minExtInfo = null, bool? ignoreRelationships = null, IEnumerable<string> excludeRelationshipTypes = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetByGuidsRequest(guid, minExtInfo, ignoreRelationships, excludeRelationshipTypes);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetByGuids"/> and <see cref="GetByGuidsAsync"/> operations. </summary>
        /// <param name="guid"> An array of GUIDs of entities to create. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="excludeRelationshipTypes"> An array of the relationship types need to be excluded from the response. </param>
        private Request CreateGetByGuidsRequest(IEnumerable<string> guid, bool? minExtInfo = null, bool? ignoreRelationships = null, IEnumerable<string> excludeRelationshipTypes = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/entity/bulk", false);
            uri.AppendQueryDelimited("guid", guid, ",", true);
            if (minExtInfo != null)
            {
                uri.AppendQuery("minExtInfo", minExtInfo.Value, true);
            }
            if (ignoreRelationships != null)
            {
                uri.AppendQuery("ignoreRelationships", ignoreRelationships.Value, true);
            }
            if (excludeRelationshipTypes != null)
            {
                uri.AppendQueryDelimited("excludeRelationshipTypes", excludeRelationshipTypes, ",", true);
            }
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return request;
        }

        /// <summary>
        /// Create or update entities in Atlas in bulk.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>referredEntities</term>
        ///     <term>Dictionary&lt;string, AtlasEntity&gt;</term>
        ///     <term></term>
        ///     <term> The referred entities. </term>
        ///   </item>
        ///   <item>
        ///     <term>entities</term>
        ///     <term>AtlasEntity[]</term>
        ///     <term></term>
        ///     <term> An array of entities. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasEntity</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of the struct. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>classifications</term>
        ///     <term>AtlasClassification[]</term>
        ///     <term></term>
        ///     <term> An array of classifications. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>homeId</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The home ID of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>meanings</term>
        ///     <term>AtlasTermAssignmentHeader[]</term>
        ///     <term></term>
        ///     <term> An array of term assignment headers indicating the meanings of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>provenanceType</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> Used to record the provenance of an instance of an entity or relationship. </term>
        ///   </item>
        ///   <item>
        ///     <term>proxy</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if there&apos;s a proxy. </term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipAttributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of relationship. </term>
        ///   </item>
        ///   <item>
        ///     <term>status</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term> Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> indicate the source who create the classification detail. </term>
        ///   </item>
        ///   <item>
        ///     <term>sourceDetails</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> more detail on source information. </term>
        ///   </item>
        ///   <item>
        ///     <term>contacts</term>
        ///     <term>Dictionary&lt;string, ContactBasic[]&gt;</term>
        ///     <term></term>
        ///     <term> The dictionary of contacts for terms. Key could be Expert or Owner. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasClassification</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of the struct. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityStatus</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term> Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store. </term>
        ///   </item>
        ///   <item>
        ///     <term>propagate</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if the classification will be propagated. </term>
        ///   </item>
        ///   <item>
        ///     <term>removePropagationsOnEntityDelete</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if propagations will be removed on entity deletion. </term>
        ///   </item>
        ///   <item>
        ///     <term>validityPeriods</term>
        ///     <term>TimeBoundary[]</term>
        ///     <term></term>
        ///     <term> An array of time boundaries indicating validity periods. </term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> indicate the source who create the classification detail. </term>
        ///   </item>
        ///   <item>
        ///     <term>sourceDetails</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> more detail on source information. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasTermAssignmentHeader</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>confidence</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The confidence of the term assignment. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the term assignment. </term>
        ///   </item>
        ///   <item>
        ///     <term>displayText</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The display text. </term>
        ///   </item>
        ///   <item>
        ///     <term>expression</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The expression of the term assignment. </term>
        ///   </item>
        ///   <item>
        ///     <term>relationGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the relationship. </term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The source of the term. </term>
        ///   </item>
        ///   <item>
        ///     <term>status</term>
        ///     <term>&quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;</term>
        ///     <term></term>
        ///     <term> The status of terms assignment. </term>
        ///   </item>
        ///   <item>
        ///     <term>steward</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The steward of the term. </term>
        ///   </item>
        ///   <item>
        ///     <term>termGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the term. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>ContactBasic</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>id</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> Azure Active Directory object Id. </term>
        ///   </item>
        ///   <item>
        ///     <term>info</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> additional information to describe this contact. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>TimeBoundary</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>endTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The end of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>startTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The start of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>timeZone</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The timezone of the time boundary. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CreateOrUpdateBulkAsync(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateCreateOrUpdateBulkRequest(requestBody);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create or update entities in Atlas in bulk.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>referredEntities</term>
        ///     <term>Dictionary&lt;string, AtlasEntity&gt;</term>
        ///     <term></term>
        ///     <term> The referred entities. </term>
        ///   </item>
        ///   <item>
        ///     <term>entities</term>
        ///     <term>AtlasEntity[]</term>
        ///     <term></term>
        ///     <term> An array of entities. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasEntity</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of the struct. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>classifications</term>
        ///     <term>AtlasClassification[]</term>
        ///     <term></term>
        ///     <term> An array of classifications. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>homeId</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The home ID of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>meanings</term>
        ///     <term>AtlasTermAssignmentHeader[]</term>
        ///     <term></term>
        ///     <term> An array of term assignment headers indicating the meanings of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>provenanceType</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> Used to record the provenance of an instance of an entity or relationship. </term>
        ///   </item>
        ///   <item>
        ///     <term>proxy</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if there&apos;s a proxy. </term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipAttributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of relationship. </term>
        ///   </item>
        ///   <item>
        ///     <term>status</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term> Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> indicate the source who create the classification detail. </term>
        ///   </item>
        ///   <item>
        ///     <term>sourceDetails</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> more detail on source information. </term>
        ///   </item>
        ///   <item>
        ///     <term>contacts</term>
        ///     <term>Dictionary&lt;string, ContactBasic[]&gt;</term>
        ///     <term></term>
        ///     <term> The dictionary of contacts for terms. Key could be Expert or Owner. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasClassification</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of the struct. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityStatus</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term> Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store. </term>
        ///   </item>
        ///   <item>
        ///     <term>propagate</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if the classification will be propagated. </term>
        ///   </item>
        ///   <item>
        ///     <term>removePropagationsOnEntityDelete</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if propagations will be removed on entity deletion. </term>
        ///   </item>
        ///   <item>
        ///     <term>validityPeriods</term>
        ///     <term>TimeBoundary[]</term>
        ///     <term></term>
        ///     <term> An array of time boundaries indicating validity periods. </term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> indicate the source who create the classification detail. </term>
        ///   </item>
        ///   <item>
        ///     <term>sourceDetails</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> more detail on source information. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasTermAssignmentHeader</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>confidence</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The confidence of the term assignment. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the term assignment. </term>
        ///   </item>
        ///   <item>
        ///     <term>displayText</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The display text. </term>
        ///   </item>
        ///   <item>
        ///     <term>expression</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The expression of the term assignment. </term>
        ///   </item>
        ///   <item>
        ///     <term>relationGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the relationship. </term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The source of the term. </term>
        ///   </item>
        ///   <item>
        ///     <term>status</term>
        ///     <term>&quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;</term>
        ///     <term></term>
        ///     <term> The status of terms assignment. </term>
        ///   </item>
        ///   <item>
        ///     <term>steward</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The steward of the term. </term>
        ///   </item>
        ///   <item>
        ///     <term>termGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the term. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>ContactBasic</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>id</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> Azure Active Directory object Id. </term>
        ///   </item>
        ///   <item>
        ///     <term>info</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> additional information to describe this contact. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>TimeBoundary</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>endTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The end of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>startTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The start of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>timeZone</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The timezone of the time boundary. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CreateOrUpdateBulk(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateCreateOrUpdateBulkRequest(requestBody);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="CreateOrUpdateBulk"/> and <see cref="CreateOrUpdateBulkAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        private Request CreateCreateOrUpdateBulkRequest(RequestContent requestBody)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/entity/bulk", false);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }

        /// <summary> Delete a list of entities in bulk identified by their GUIDs or unique attributes. </summary>
        /// <param name="guid"> An array of GUIDs of entities to delete. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> BulkDeleteAsync(IEnumerable<string> guid, CancellationToken cancellationToken = default)
        {
            Request req = CreateBulkDeleteRequest(guid);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Delete a list of entities in bulk identified by their GUIDs or unique attributes. </summary>
        /// <param name="guid"> An array of GUIDs of entities to delete. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response BulkDelete(IEnumerable<string> guid, CancellationToken cancellationToken = default)
        {
            Request req = CreateBulkDeleteRequest(guid);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="BulkDelete"/> and <see cref="BulkDeleteAsync"/> operations. </summary>
        /// <param name="guid"> An array of GUIDs of entities to delete. </param>
        private Request CreateBulkDeleteRequest(IEnumerable<string> guid)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/entity/bulk", false);
            uri.AppendQueryDelimited("guid", guid, ",", true);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return request;
        }

        /// <summary> Associate a classification to multiple entities in bulk. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>classification</term>
        ///     <term>AtlasClassification</term>
        ///     <term></term>
        ///     <term> An instance of a classification; it doesn&apos;t have an identity, this object exists only when associated with an entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityGuids</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> The GUID of the entity. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasClassification</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of the struct. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityStatus</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term> Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store. </term>
        ///   </item>
        ///   <item>
        ///     <term>propagate</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if the classification will be propagated. </term>
        ///   </item>
        ///   <item>
        ///     <term>removePropagationsOnEntityDelete</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if propagations will be removed on entity deletion. </term>
        ///   </item>
        ///   <item>
        ///     <term>validityPeriods</term>
        ///     <term>TimeBoundary[]</term>
        ///     <term></term>
        ///     <term> An array of time boundaries indicating validity periods. </term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> indicate the source who create the classification detail. </term>
        ///   </item>
        ///   <item>
        ///     <term>sourceDetails</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> more detail on source information. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>TimeBoundary</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>endTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The end of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>startTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The start of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>timeZone</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The timezone of the time boundary. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> AddClassificationAsync(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateAddClassificationRequest(requestBody);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Associate a classification to multiple entities in bulk. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>classification</term>
        ///     <term>AtlasClassification</term>
        ///     <term></term>
        ///     <term> An instance of a classification; it doesn&apos;t have an identity, this object exists only when associated with an entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityGuids</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> The GUID of the entity. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasClassification</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of the struct. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityStatus</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term> Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store. </term>
        ///   </item>
        ///   <item>
        ///     <term>propagate</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if the classification will be propagated. </term>
        ///   </item>
        ///   <item>
        ///     <term>removePropagationsOnEntityDelete</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if propagations will be removed on entity deletion. </term>
        ///   </item>
        ///   <item>
        ///     <term>validityPeriods</term>
        ///     <term>TimeBoundary[]</term>
        ///     <term></term>
        ///     <term> An array of time boundaries indicating validity periods. </term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> indicate the source who create the classification detail. </term>
        ///   </item>
        ///   <item>
        ///     <term>sourceDetails</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> more detail on source information. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>TimeBoundary</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>endTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The end of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>startTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The start of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>timeZone</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The timezone of the time boundary. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response AddClassification(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateAddClassificationRequest(requestBody);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="AddClassification"/> and <see cref="AddClassificationAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        private Request CreateAddClassificationRequest(RequestContent requestBody)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/entity/bulk/classification", false);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }

        /// <summary> Get complete definition of an entity given its GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetByIdAsync(string guid, bool? minExtInfo = null, bool? ignoreRelationships = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetByIdRequest(guid, minExtInfo, ignoreRelationships);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get complete definition of an entity given its GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetById(string guid, bool? minExtInfo = null, bool? ignoreRelationships = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetByIdRequest(guid, minExtInfo, ignoreRelationships);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetById"/> and <see cref="GetByIdAsync"/> operations. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        private Request CreateGetByIdRequest(string guid, bool? minExtInfo = null, bool? ignoreRelationships = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            if (minExtInfo != null)
            {
                uri.AppendQuery("minExtInfo", minExtInfo.Value, true);
            }
            if (ignoreRelationships != null)
            {
                uri.AppendQuery("ignoreRelationships", ignoreRelationships.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return request;
        }

        /// <summary>
        /// Update entity partially - create or update entity attribute identified by its GUID.
        /// Supports only primitive attribute type and entity references.
        /// It does not support updating complex types like arrays, and maps.
        /// Null updates are not possible.
        /// </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="name"> The name of the attribute. </param>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PartialUpdateEntityAttrByGuidAsync(string guid, string name, RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreatePartialUpdateEntityAttrByGuidRequest(guid, name, requestBody);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update entity partially - create or update entity attribute identified by its GUID.
        /// Supports only primitive attribute type and entity references.
        /// It does not support updating complex types like arrays, and maps.
        /// Null updates are not possible.
        /// </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="name"> The name of the attribute. </param>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PartialUpdateEntityAttrByGuid(string guid, string name, RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreatePartialUpdateEntityAttrByGuidRequest(guid, name, requestBody);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="PartialUpdateEntityAttrByGuid"/> and <see cref="PartialUpdateEntityAttrByGuidAsync"/> operations. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="name"> The name of the attribute. </param>
        /// <param name="requestBody"> The request body. </param>
        private Request CreatePartialUpdateEntityAttrByGuidRequest(string guid, string name, RequestContent requestBody)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            uri.AppendQuery("name", name, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }

        /// <summary> Delete an entity identified by its GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteByGuidAsync(string guid, CancellationToken cancellationToken = default)
        {
            Request req = CreateDeleteByGuidRequest(guid);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Delete an entity identified by its GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteByGuid(string guid, CancellationToken cancellationToken = default)
        {
            Request req = CreateDeleteByGuidRequest(guid);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="DeleteByGuid"/> and <see cref="DeleteByGuidAsync"/> operations. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        private Request CreateDeleteByGuidRequest(string guid)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return request;
        }

        /// <summary> List classifications for a given entity represented by a GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="classificationName"> The name of the classification. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetClassificationAsync(string guid, string classificationName, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetClassificationRequest(guid, classificationName);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> List classifications for a given entity represented by a GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="classificationName"> The name of the classification. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetClassification(string guid, string classificationName, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetClassificationRequest(guid, classificationName);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetClassification"/> and <see cref="GetClassificationAsync"/> operations. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="classificationName"> The name of the classification. </param>
        private Request CreateGetClassificationRequest(string guid, string classificationName)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            uri.AppendPath("/classification/", false);
            uri.AppendPath(classificationName, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return request;
        }

        /// <summary> Delete a given classification from an existing entity represented by a GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="classificationName"> The name of the classification. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteClassificationAsync(string guid, string classificationName, CancellationToken cancellationToken = default)
        {
            Request req = CreateDeleteClassificationRequest(guid, classificationName);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Delete a given classification from an existing entity represented by a GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="classificationName"> The name of the classification. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteClassification(string guid, string classificationName, CancellationToken cancellationToken = default)
        {
            Request req = CreateDeleteClassificationRequest(guid, classificationName);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="DeleteClassification"/> and <see cref="DeleteClassificationAsync"/> operations. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="classificationName"> The name of the classification. </param>
        private Request CreateDeleteClassificationRequest(string guid, string classificationName)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            uri.AppendPath("/classification/", false);
            uri.AppendPath(classificationName, true);
            request.Uri = uri;
            return request;
        }

        /// <summary> List classifications for a given entity represented by a GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetClassificationsAsync(string guid, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetClassificationsRequest(guid);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> List classifications for a given entity represented by a GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetClassifications(string guid, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetClassificationsRequest(guid);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetClassifications"/> and <see cref="GetClassificationsAsync"/> operations. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        private Request CreateGetClassificationsRequest(string guid)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            uri.AppendPath("/classifications", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return request;
        }

        /// <summary> Add classifications to an existing entity represented by a GUID. </summary>
        /// <remarks>
        /// Schema for <c>AtlasClassification</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of the struct. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityStatus</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term> Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store. </term>
        ///   </item>
        ///   <item>
        ///     <term>propagate</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if the classification will be propagated. </term>
        ///   </item>
        ///   <item>
        ///     <term>removePropagationsOnEntityDelete</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if propagations will be removed on entity deletion. </term>
        ///   </item>
        ///   <item>
        ///     <term>validityPeriods</term>
        ///     <term>TimeBoundary[]</term>
        ///     <term></term>
        ///     <term> An array of time boundaries indicating validity periods. </term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> indicate the source who create the classification detail. </term>
        ///   </item>
        ///   <item>
        ///     <term>sourceDetails</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> more detail on source information. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>TimeBoundary</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>endTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The end of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>startTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The start of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>timeZone</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The timezone of the time boundary. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> AddClassificationsAsync(string guid, RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateAddClassificationsRequest(guid, requestBody);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Add classifications to an existing entity represented by a GUID. </summary>
        /// <remarks>
        /// Schema for <c>AtlasClassification</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of the struct. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityStatus</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term> Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store. </term>
        ///   </item>
        ///   <item>
        ///     <term>propagate</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if the classification will be propagated. </term>
        ///   </item>
        ///   <item>
        ///     <term>removePropagationsOnEntityDelete</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if propagations will be removed on entity deletion. </term>
        ///   </item>
        ///   <item>
        ///     <term>validityPeriods</term>
        ///     <term>TimeBoundary[]</term>
        ///     <term></term>
        ///     <term> An array of time boundaries indicating validity periods. </term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> indicate the source who create the classification detail. </term>
        ///   </item>
        ///   <item>
        ///     <term>sourceDetails</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> more detail on source information. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>TimeBoundary</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>endTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The end of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>startTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The start of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>timeZone</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The timezone of the time boundary. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response AddClassifications(string guid, RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateAddClassificationsRequest(guid, requestBody);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="AddClassifications"/> and <see cref="AddClassificationsAsync"/> operations. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="requestBody"> The request body. </param>
        private Request CreateAddClassificationsRequest(string guid, RequestContent requestBody)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            uri.AppendPath("/classifications", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }

        /// <summary> Update classifications to an existing entity represented by a guid. </summary>
        /// <remarks>
        /// Schema for <c>AtlasClassification</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of the struct. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityStatus</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term> Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store. </term>
        ///   </item>
        ///   <item>
        ///     <term>propagate</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if the classification will be propagated. </term>
        ///   </item>
        ///   <item>
        ///     <term>removePropagationsOnEntityDelete</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if propagations will be removed on entity deletion. </term>
        ///   </item>
        ///   <item>
        ///     <term>validityPeriods</term>
        ///     <term>TimeBoundary[]</term>
        ///     <term></term>
        ///     <term> An array of time boundaries indicating validity periods. </term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> indicate the source who create the classification detail. </term>
        ///   </item>
        ///   <item>
        ///     <term>sourceDetails</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> more detail on source information. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>TimeBoundary</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>endTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The end of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>startTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The start of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>timeZone</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The timezone of the time boundary. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> UpdateClassificationsAsync(string guid, RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateUpdateClassificationsRequest(guid, requestBody);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Update classifications to an existing entity represented by a guid. </summary>
        /// <remarks>
        /// Schema for <c>AtlasClassification</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of the struct. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityStatus</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term> Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store. </term>
        ///   </item>
        ///   <item>
        ///     <term>propagate</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if the classification will be propagated. </term>
        ///   </item>
        ///   <item>
        ///     <term>removePropagationsOnEntityDelete</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if propagations will be removed on entity deletion. </term>
        ///   </item>
        ///   <item>
        ///     <term>validityPeriods</term>
        ///     <term>TimeBoundary[]</term>
        ///     <term></term>
        ///     <term> An array of time boundaries indicating validity periods. </term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> indicate the source who create the classification detail. </term>
        ///   </item>
        ///   <item>
        ///     <term>sourceDetails</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> more detail on source information. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>TimeBoundary</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>endTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The end of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>startTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The start of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>timeZone</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The timezone of the time boundary. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response UpdateClassifications(string guid, RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateUpdateClassificationsRequest(guid, requestBody);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="UpdateClassifications"/> and <see cref="UpdateClassificationsAsync"/> operations. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="requestBody"> The request body. </param>
        private Request CreateUpdateClassificationsRequest(string guid, RequestContent requestBody)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            uri.AppendPath("/classifications", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }

        /// <summary>
        /// Get complete definition of an entity given its type and unique attribute.
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:
        /// attr:\&lt;attrName&gt;=&lt;attrValue&gt;.
        /// NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        /// The REST request would look something like this:
        /// GET /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
        /// </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetByUniqueAttributesAsync(string typeName, bool? minExtInfo = null, bool? ignoreRelationships = null, string attrQualifiedName = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetByUniqueAttributesRequest(typeName, minExtInfo, ignoreRelationships, attrQualifiedName);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get complete definition of an entity given its type and unique attribute.
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:
        /// attr:\&lt;attrName&gt;=&lt;attrValue&gt;.
        /// NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        /// The REST request would look something like this:
        /// GET /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
        /// </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetByUniqueAttributes(string typeName, bool? minExtInfo = null, bool? ignoreRelationships = null, string attrQualifiedName = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetByUniqueAttributesRequest(typeName, minExtInfo, ignoreRelationships, attrQualifiedName);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetByUniqueAttributes"/> and <see cref="GetByUniqueAttributesAsync"/> operations. </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        private Request CreateGetByUniqueAttributesRequest(string typeName, bool? minExtInfo = null, bool? ignoreRelationships = null, string attrQualifiedName = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/entity/uniqueAttribute/type/", false);
            uri.AppendPath(typeName, true);
            if (minExtInfo != null)
            {
                uri.AppendQuery("minExtInfo", minExtInfo.Value, true);
            }
            if (ignoreRelationships != null)
            {
                uri.AppendQuery("ignoreRelationships", ignoreRelationships.Value, true);
            }
            if (attrQualifiedName != null)
            {
                uri.AppendQuery("attr:qualifiedName", attrQualifiedName, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return request;
        }

        /// <summary>
        /// Update entity partially - Allow a subset of attributes to be updated on
        /// an entity which is identified by its type and unique attribute  eg: Referenceable.qualifiedName.
        /// Null updates are not possible.
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:
        /// attr:&lt;attrName&gt;=&lt;attrValue&gt;.
        /// NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        /// The REST request would look something like this:
        /// PUT /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
        /// </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>referredEntities</term>
        ///     <term>Dictionary&lt;string, AtlasEntity&gt;</term>
        ///     <term></term>
        ///     <term> The referred entities. </term>
        ///   </item>
        ///   <item>
        ///     <term>entity</term>
        ///     <term>AtlasEntity</term>
        ///     <term></term>
        ///     <term> An instance of an entity - like hive_table, hive_database. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasEntity</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of the struct. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>classifications</term>
        ///     <term>AtlasClassification[]</term>
        ///     <term></term>
        ///     <term> An array of classifications. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>homeId</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The home ID of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>meanings</term>
        ///     <term>AtlasTermAssignmentHeader[]</term>
        ///     <term></term>
        ///     <term> An array of term assignment headers indicating the meanings of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>provenanceType</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> Used to record the provenance of an instance of an entity or relationship. </term>
        ///   </item>
        ///   <item>
        ///     <term>proxy</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if there&apos;s a proxy. </term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipAttributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of relationship. </term>
        ///   </item>
        ///   <item>
        ///     <term>status</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term> Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> indicate the source who create the classification detail. </term>
        ///   </item>
        ///   <item>
        ///     <term>sourceDetails</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> more detail on source information. </term>
        ///   </item>
        ///   <item>
        ///     <term>contacts</term>
        ///     <term>Dictionary&lt;string, ContactBasic[]&gt;</term>
        ///     <term></term>
        ///     <term> The dictionary of contacts for terms. Key could be Expert or Owner. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasClassification</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of the struct. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityStatus</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term> Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store. </term>
        ///   </item>
        ///   <item>
        ///     <term>propagate</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if the classification will be propagated. </term>
        ///   </item>
        ///   <item>
        ///     <term>removePropagationsOnEntityDelete</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if propagations will be removed on entity deletion. </term>
        ///   </item>
        ///   <item>
        ///     <term>validityPeriods</term>
        ///     <term>TimeBoundary[]</term>
        ///     <term></term>
        ///     <term> An array of time boundaries indicating validity periods. </term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> indicate the source who create the classification detail. </term>
        ///   </item>
        ///   <item>
        ///     <term>sourceDetails</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> more detail on source information. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasTermAssignmentHeader</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>confidence</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The confidence of the term assignment. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the term assignment. </term>
        ///   </item>
        ///   <item>
        ///     <term>displayText</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The display text. </term>
        ///   </item>
        ///   <item>
        ///     <term>expression</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The expression of the term assignment. </term>
        ///   </item>
        ///   <item>
        ///     <term>relationGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the relationship. </term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The source of the term. </term>
        ///   </item>
        ///   <item>
        ///     <term>status</term>
        ///     <term>&quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;</term>
        ///     <term></term>
        ///     <term> The status of terms assignment. </term>
        ///   </item>
        ///   <item>
        ///     <term>steward</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The steward of the term. </term>
        ///   </item>
        ///   <item>
        ///     <term>termGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the term. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>ContactBasic</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>id</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> Azure Active Directory object Id. </term>
        ///   </item>
        ///   <item>
        ///     <term>info</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> additional information to describe this contact. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>TimeBoundary</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>endTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The end of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>startTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The start of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>timeZone</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The timezone of the time boundary. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PartialUpdateEntityByUniqueAttrsAsync(string typeName, RequestContent requestBody, string attrQualifiedName = null, CancellationToken cancellationToken = default)
        {
            Request req = CreatePartialUpdateEntityByUniqueAttrsRequest(typeName, requestBody, attrQualifiedName);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update entity partially - Allow a subset of attributes to be updated on
        /// an entity which is identified by its type and unique attribute  eg: Referenceable.qualifiedName.
        /// Null updates are not possible.
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:
        /// attr:&lt;attrName&gt;=&lt;attrValue&gt;.
        /// NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        /// The REST request would look something like this:
        /// PUT /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
        /// </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>referredEntities</term>
        ///     <term>Dictionary&lt;string, AtlasEntity&gt;</term>
        ///     <term></term>
        ///     <term> The referred entities. </term>
        ///   </item>
        ///   <item>
        ///     <term>entity</term>
        ///     <term>AtlasEntity</term>
        ///     <term></term>
        ///     <term> An instance of an entity - like hive_table, hive_database. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasEntity</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of the struct. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>classifications</term>
        ///     <term>AtlasClassification[]</term>
        ///     <term></term>
        ///     <term> An array of classifications. </term>
        ///   </item>
        ///   <item>
        ///     <term>createTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The created time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>homeId</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The home ID of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>meanings</term>
        ///     <term>AtlasTermAssignmentHeader[]</term>
        ///     <term></term>
        ///     <term> An array of term assignment headers indicating the meanings of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>provenanceType</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> Used to record the provenance of an instance of an entity or relationship. </term>
        ///   </item>
        ///   <item>
        ///     <term>proxy</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if there&apos;s a proxy. </term>
        ///   </item>
        ///   <item>
        ///     <term>relationshipAttributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of relationship. </term>
        ///   </item>
        ///   <item>
        ///     <term>status</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term> Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateTime</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The update time of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>updatedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who updated the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The version of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> indicate the source who create the classification detail. </term>
        ///   </item>
        ///   <item>
        ///     <term>sourceDetails</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> more detail on source information. </term>
        ///   </item>
        ///   <item>
        ///     <term>contacts</term>
        ///     <term>Dictionary&lt;string, ContactBasic[]&gt;</term>
        ///     <term></term>
        ///     <term> The dictionary of contacts for terms. Key could be Expert or Owner. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasClassification</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of the struct. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityStatus</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term> Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store. </term>
        ///   </item>
        ///   <item>
        ///     <term>propagate</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if the classification will be propagated. </term>
        ///   </item>
        ///   <item>
        ///     <term>removePropagationsOnEntityDelete</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if propagations will be removed on entity deletion. </term>
        ///   </item>
        ///   <item>
        ///     <term>validityPeriods</term>
        ///     <term>TimeBoundary[]</term>
        ///     <term></term>
        ///     <term> An array of time boundaries indicating validity periods. </term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> indicate the source who create the classification detail. </term>
        ///   </item>
        ///   <item>
        ///     <term>sourceDetails</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> more detail on source information. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasTermAssignmentHeader</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>confidence</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The confidence of the term assignment. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the term assignment. </term>
        ///   </item>
        ///   <item>
        ///     <term>displayText</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The display text. </term>
        ///   </item>
        ///   <item>
        ///     <term>expression</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The expression of the term assignment. </term>
        ///   </item>
        ///   <item>
        ///     <term>relationGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the relationship. </term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The source of the term. </term>
        ///   </item>
        ///   <item>
        ///     <term>status</term>
        ///     <term>&quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;</term>
        ///     <term></term>
        ///     <term> The status of terms assignment. </term>
        ///   </item>
        ///   <item>
        ///     <term>steward</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The steward of the term. </term>
        ///   </item>
        ///   <item>
        ///     <term>termGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the term. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>ContactBasic</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>id</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> Azure Active Directory object Id. </term>
        ///   </item>
        ///   <item>
        ///     <term>info</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> additional information to describe this contact. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>TimeBoundary</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>endTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The end of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>startTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The start of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>timeZone</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The timezone of the time boundary. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PartialUpdateEntityByUniqueAttrs(string typeName, RequestContent requestBody, string attrQualifiedName = null, CancellationToken cancellationToken = default)
        {
            Request req = CreatePartialUpdateEntityByUniqueAttrsRequest(typeName, requestBody, attrQualifiedName);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="PartialUpdateEntityByUniqueAttrs"/> and <see cref="PartialUpdateEntityByUniqueAttrsAsync"/> operations. </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        private Request CreatePartialUpdateEntityByUniqueAttrsRequest(string typeName, RequestContent requestBody, string attrQualifiedName = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/entity/uniqueAttribute/type/", false);
            uri.AppendPath(typeName, true);
            if (attrQualifiedName != null)
            {
                uri.AppendQuery("attr:qualifiedName", attrQualifiedName, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }

        /// <summary>
        /// Delete an entity identified by its type and unique attributes.
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:
        /// attr:\&lt;attrName&gt;=\&lt;attrValue&gt;.
        /// NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        /// The REST request would look something like this:
        /// DELETE /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
        /// </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteByUniqueAttributeAsync(string typeName, string attrQualifiedName = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateDeleteByUniqueAttributeRequest(typeName, attrQualifiedName);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete an entity identified by its type and unique attributes.
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:
        /// attr:\&lt;attrName&gt;=\&lt;attrValue&gt;.
        /// NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        /// The REST request would look something like this:
        /// DELETE /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
        /// </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteByUniqueAttribute(string typeName, string attrQualifiedName = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateDeleteByUniqueAttributeRequest(typeName, attrQualifiedName);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="DeleteByUniqueAttribute"/> and <see cref="DeleteByUniqueAttributeAsync"/> operations. </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        private Request CreateDeleteByUniqueAttributeRequest(string typeName, string attrQualifiedName = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/entity/uniqueAttribute/type/", false);
            uri.AppendPath(typeName, true);
            if (attrQualifiedName != null)
            {
                uri.AppendQuery("attr:qualifiedName", attrQualifiedName, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return request;
        }

        /// <summary> Delete a given classification from an entity identified by its type and unique attributes. </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="classificationName"> The name of the classification. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteClassificationByUniqueAttributeAsync(string typeName, string classificationName, string attrQualifiedName = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateDeleteClassificationByUniqueAttributeRequest(typeName, classificationName, attrQualifiedName);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Delete a given classification from an entity identified by its type and unique attributes. </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="classificationName"> The name of the classification. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteClassificationByUniqueAttribute(string typeName, string classificationName, string attrQualifiedName = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateDeleteClassificationByUniqueAttributeRequest(typeName, classificationName, attrQualifiedName);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="DeleteClassificationByUniqueAttribute"/> and <see cref="DeleteClassificationByUniqueAttributeAsync"/> operations. </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="classificationName"> The name of the classification. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        private Request CreateDeleteClassificationByUniqueAttributeRequest(string typeName, string classificationName, string attrQualifiedName = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/entity/uniqueAttribute/type/", false);
            uri.AppendPath(typeName, true);
            uri.AppendPath("/classification/", false);
            uri.AppendPath(classificationName, true);
            if (attrQualifiedName != null)
            {
                uri.AppendQuery("attr:qualifiedName", attrQualifiedName, true);
            }
            request.Uri = uri;
            return request;
        }

        /// <summary> Add classification to the entity identified by its type and unique attributes. </summary>
        /// <remarks>
        /// Schema for <c>AtlasClassification</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of the struct. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityStatus</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term> Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store. </term>
        ///   </item>
        ///   <item>
        ///     <term>propagate</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if the classification will be propagated. </term>
        ///   </item>
        ///   <item>
        ///     <term>removePropagationsOnEntityDelete</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if propagations will be removed on entity deletion. </term>
        ///   </item>
        ///   <item>
        ///     <term>validityPeriods</term>
        ///     <term>TimeBoundary[]</term>
        ///     <term></term>
        ///     <term> An array of time boundaries indicating validity periods. </term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> indicate the source who create the classification detail. </term>
        ///   </item>
        ///   <item>
        ///     <term>sourceDetails</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> more detail on source information. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>TimeBoundary</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>endTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The end of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>startTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The start of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>timeZone</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The timezone of the time boundary. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> AddClassificationsByUniqueAttributeAsync(string typeName, RequestContent requestBody, string attrQualifiedName = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateAddClassificationsByUniqueAttributeRequest(typeName, requestBody, attrQualifiedName);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Add classification to the entity identified by its type and unique attributes. </summary>
        /// <remarks>
        /// Schema for <c>AtlasClassification</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of the struct. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityStatus</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term> Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store. </term>
        ///   </item>
        ///   <item>
        ///     <term>propagate</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if the classification will be propagated. </term>
        ///   </item>
        ///   <item>
        ///     <term>removePropagationsOnEntityDelete</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if propagations will be removed on entity deletion. </term>
        ///   </item>
        ///   <item>
        ///     <term>validityPeriods</term>
        ///     <term>TimeBoundary[]</term>
        ///     <term></term>
        ///     <term> An array of time boundaries indicating validity periods. </term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> indicate the source who create the classification detail. </term>
        ///   </item>
        ///   <item>
        ///     <term>sourceDetails</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> more detail on source information. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>TimeBoundary</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>endTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The end of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>startTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The start of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>timeZone</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The timezone of the time boundary. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response AddClassificationsByUniqueAttribute(string typeName, RequestContent requestBody, string attrQualifiedName = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateAddClassificationsByUniqueAttributeRequest(typeName, requestBody, attrQualifiedName);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="AddClassificationsByUniqueAttribute"/> and <see cref="AddClassificationsByUniqueAttributeAsync"/> operations. </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        private Request CreateAddClassificationsByUniqueAttributeRequest(string typeName, RequestContent requestBody, string attrQualifiedName = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/entity/uniqueAttribute/type/", false);
            uri.AppendPath(typeName, true);
            uri.AppendPath("/classifications", false);
            if (attrQualifiedName != null)
            {
                uri.AppendQuery("attr:qualifiedName", attrQualifiedName, true);
            }
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }

        /// <summary> Update classification on an entity identified by its type and unique attributes. </summary>
        /// <remarks>
        /// Schema for <c>AtlasClassification</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of the struct. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityStatus</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term> Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store. </term>
        ///   </item>
        ///   <item>
        ///     <term>propagate</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if the classification will be propagated. </term>
        ///   </item>
        ///   <item>
        ///     <term>removePropagationsOnEntityDelete</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if propagations will be removed on entity deletion. </term>
        ///   </item>
        ///   <item>
        ///     <term>validityPeriods</term>
        ///     <term>TimeBoundary[]</term>
        ///     <term></term>
        ///     <term> An array of time boundaries indicating validity periods. </term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> indicate the source who create the classification detail. </term>
        ///   </item>
        ///   <item>
        ///     <term>sourceDetails</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> more detail on source information. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>TimeBoundary</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>endTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The end of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>startTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The start of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>timeZone</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The timezone of the time boundary. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> UpdateClassificationsByUniqueAttributeAsync(string typeName, RequestContent requestBody, string attrQualifiedName = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateUpdateClassificationsByUniqueAttributeRequest(typeName, requestBody, attrQualifiedName);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Update classification on an entity identified by its type and unique attributes. </summary>
        /// <remarks>
        /// Schema for <c>AtlasClassification</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of the struct. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityStatus</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term> Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store. </term>
        ///   </item>
        ///   <item>
        ///     <term>propagate</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if the classification will be propagated. </term>
        ///   </item>
        ///   <item>
        ///     <term>removePropagationsOnEntityDelete</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if propagations will be removed on entity deletion. </term>
        ///   </item>
        ///   <item>
        ///     <term>validityPeriods</term>
        ///     <term>TimeBoundary[]</term>
        ///     <term></term>
        ///     <term> An array of time boundaries indicating validity periods. </term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> indicate the source who create the classification detail. </term>
        ///   </item>
        ///   <item>
        ///     <term>sourceDetails</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> more detail on source information. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>TimeBoundary</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>endTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The end of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>startTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The start of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>timeZone</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The timezone of the time boundary. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response UpdateClassificationsByUniqueAttribute(string typeName, RequestContent requestBody, string attrQualifiedName = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateUpdateClassificationsByUniqueAttributeRequest(typeName, requestBody, attrQualifiedName);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="UpdateClassificationsByUniqueAttribute"/> and <see cref="UpdateClassificationsByUniqueAttributeAsync"/> operations. </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        private Request CreateUpdateClassificationsByUniqueAttributeRequest(string typeName, RequestContent requestBody, string attrQualifiedName = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/entity/uniqueAttribute/type/", false);
            uri.AppendPath(typeName, true);
            uri.AppendPath("/classifications", false);
            if (attrQualifiedName != null)
            {
                uri.AppendQuery("attr:qualifiedName", attrQualifiedName, true);
            }
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }

        /// <summary> Set classifications on entities in bulk. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>guidHeaderMap</term>
        ///     <term>Dictionary&lt;string, AtlasEntityHeader&gt;</term>
        ///     <term></term>
        ///     <term> The description of the guid header map,. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasEntityHeader</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of the struct. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>classificationNames</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of classification names. </term>
        ///   </item>
        ///   <item>
        ///     <term>classifications</term>
        ///     <term>AtlasClassification[]</term>
        ///     <term></term>
        ///     <term> An array of classifications. </term>
        ///   </item>
        ///   <item>
        ///     <term>displayText</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The display text. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>meaningNames</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of meanings. </term>
        ///   </item>
        ///   <item>
        ///     <term>meanings</term>
        ///     <term>AtlasTermAssignmentHeader[]</term>
        ///     <term></term>
        ///     <term> An array of term assignment headers. </term>
        ///   </item>
        ///   <item>
        ///     <term>status</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term> Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasClassification</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of the struct. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityStatus</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term> Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store. </term>
        ///   </item>
        ///   <item>
        ///     <term>propagate</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if the classification will be propagated. </term>
        ///   </item>
        ///   <item>
        ///     <term>removePropagationsOnEntityDelete</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if propagations will be removed on entity deletion. </term>
        ///   </item>
        ///   <item>
        ///     <term>validityPeriods</term>
        ///     <term>TimeBoundary[]</term>
        ///     <term></term>
        ///     <term> An array of time boundaries indicating validity periods. </term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> indicate the source who create the classification detail. </term>
        ///   </item>
        ///   <item>
        ///     <term>sourceDetails</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> more detail on source information. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasTermAssignmentHeader</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>confidence</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The confidence of the term assignment. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the term assignment. </term>
        ///   </item>
        ///   <item>
        ///     <term>displayText</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The display text. </term>
        ///   </item>
        ///   <item>
        ///     <term>expression</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The expression of the term assignment. </term>
        ///   </item>
        ///   <item>
        ///     <term>relationGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the relationship. </term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The source of the term. </term>
        ///   </item>
        ///   <item>
        ///     <term>status</term>
        ///     <term>&quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;</term>
        ///     <term></term>
        ///     <term> The status of terms assignment. </term>
        ///   </item>
        ///   <item>
        ///     <term>steward</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The steward of the term. </term>
        ///   </item>
        ///   <item>
        ///     <term>termGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the term. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>TimeBoundary</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>endTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The end of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>startTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The start of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>timeZone</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The timezone of the time boundary. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> SetClassificationsAsync(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateSetClassificationsRequest(requestBody);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Set classifications on entities in bulk. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>guidHeaderMap</term>
        ///     <term>Dictionary&lt;string, AtlasEntityHeader&gt;</term>
        ///     <term></term>
        ///     <term> The description of the guid header map,. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasEntityHeader</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of the struct. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>classificationNames</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of classification names. </term>
        ///   </item>
        ///   <item>
        ///     <term>classifications</term>
        ///     <term>AtlasClassification[]</term>
        ///     <term></term>
        ///     <term> An array of classifications. </term>
        ///   </item>
        ///   <item>
        ///     <term>displayText</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The display text. </term>
        ///   </item>
        ///   <item>
        ///     <term>guid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>meaningNames</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term> An array of meanings. </term>
        ///   </item>
        ///   <item>
        ///     <term>meanings</term>
        ///     <term>AtlasTermAssignmentHeader[]</term>
        ///     <term></term>
        ///     <term> An array of term assignment headers. </term>
        ///   </item>
        ///   <item>
        ///     <term>status</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term> Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasClassification</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>attributes</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> The attributes of the struct. </term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the type. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastModifiedTS</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> ETag for concurrency control. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the entity. </term>
        ///   </item>
        ///   <item>
        ///     <term>entityStatus</term>
        ///     <term>&quot;ACTIVE&quot; | &quot;DELETED&quot;</term>
        ///     <term></term>
        ///     <term> Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store. </term>
        ///   </item>
        ///   <item>
        ///     <term>propagate</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if the classification will be propagated. </term>
        ///   </item>
        ///   <item>
        ///     <term>removePropagationsOnEntityDelete</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Determines if propagations will be removed on entity deletion. </term>
        ///   </item>
        ///   <item>
        ///     <term>validityPeriods</term>
        ///     <term>TimeBoundary[]</term>
        ///     <term></term>
        ///     <term> An array of time boundaries indicating validity periods. </term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> indicate the source who create the classification detail. </term>
        ///   </item>
        ///   <item>
        ///     <term>sourceDetails</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> more detail on source information. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>AtlasTermAssignmentHeader</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>confidence</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The confidence of the term assignment. </term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The user who created the record. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the term assignment. </term>
        ///   </item>
        ///   <item>
        ///     <term>displayText</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The display text. </term>
        ///   </item>
        ///   <item>
        ///     <term>expression</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The expression of the term assignment. </term>
        ///   </item>
        ///   <item>
        ///     <term>relationGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the relationship. </term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The source of the term. </term>
        ///   </item>
        ///   <item>
        ///     <term>status</term>
        ///     <term>&quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;</term>
        ///     <term></term>
        ///     <term> The status of terms assignment. </term>
        ///   </item>
        ///   <item>
        ///     <term>steward</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The steward of the term. </term>
        ///   </item>
        ///   <item>
        ///     <term>termGuid</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The GUID of the term. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>TimeBoundary</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>endTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The end of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>startTime</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The start of the time boundary. </term>
        ///   </item>
        ///   <item>
        ///     <term>timeZone</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The timezone of the time boundary. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response SetClassifications(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateSetClassificationsRequest(requestBody);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="SetClassifications"/> and <see cref="SetClassificationsAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        private Request CreateSetClassificationsRequest(RequestContent requestBody)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/entity/bulk/setClassifications", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }

        /// <summary>
        /// Bulk API to retrieve list of entities identified by its unique attributes.
        /// 
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format
        /// 
        /// typeName=\&lt;typeName&gt;&amp;attr_1:\&lt;attrName&gt;=\&lt;attrValue&gt;&amp;attr_2:\&lt;attrName&gt;=\&lt;attrValue&gt;&amp;attr_3:\&lt;attrName&gt;=\&lt;attrValue&gt;
        /// 
        /// NOTE: The attrName should be an unique attribute for the given entity-type
        /// 
        /// The REST request would look something like this
        /// 
        /// GET /v2/entity/bulk/uniqueAttribute/type/hive_db?attr_0:qualifiedName=db1@cl1&amp;attr_2:qualifiedName=db2@cl1.
        /// </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="attrNQualifiedName"> Qualified name of an entity. E.g. to find 2 entities you can set attrs_0:qualifiedName=db1@cl1&amp;attrs_2:qualifiedName=db2@cl1. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetEntitiesByUniqueAttributesAsync(string typeName, bool? minExtInfo = null, bool? ignoreRelationships = null, string attrNQualifiedName = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetEntitiesByUniqueAttributesRequest(typeName, minExtInfo, ignoreRelationships, attrNQualifiedName);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Bulk API to retrieve list of entities identified by its unique attributes.
        /// 
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format
        /// 
        /// typeName=\&lt;typeName&gt;&amp;attr_1:\&lt;attrName&gt;=\&lt;attrValue&gt;&amp;attr_2:\&lt;attrName&gt;=\&lt;attrValue&gt;&amp;attr_3:\&lt;attrName&gt;=\&lt;attrValue&gt;
        /// 
        /// NOTE: The attrName should be an unique attribute for the given entity-type
        /// 
        /// The REST request would look something like this
        /// 
        /// GET /v2/entity/bulk/uniqueAttribute/type/hive_db?attr_0:qualifiedName=db1@cl1&amp;attr_2:qualifiedName=db2@cl1.
        /// </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="attrNQualifiedName"> Qualified name of an entity. E.g. to find 2 entities you can set attrs_0:qualifiedName=db1@cl1&amp;attrs_2:qualifiedName=db2@cl1. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetEntitiesByUniqueAttributes(string typeName, bool? minExtInfo = null, bool? ignoreRelationships = null, string attrNQualifiedName = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetEntitiesByUniqueAttributesRequest(typeName, minExtInfo, ignoreRelationships, attrNQualifiedName);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetEntitiesByUniqueAttributes"/> and <see cref="GetEntitiesByUniqueAttributesAsync"/> operations. </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="attrNQualifiedName"> Qualified name of an entity. E.g. to find 2 entities you can set attrs_0:qualifiedName=db1@cl1&amp;attrs_2:qualifiedName=db2@cl1. </param>
        private Request CreateGetEntitiesByUniqueAttributesRequest(string typeName, bool? minExtInfo = null, bool? ignoreRelationships = null, string attrNQualifiedName = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/entity/bulk/uniqueAttribute/type/", false);
            uri.AppendPath(typeName, true);
            if (minExtInfo != null)
            {
                uri.AppendQuery("minExtInfo", minExtInfo.Value, true);
            }
            if (ignoreRelationships != null)
            {
                uri.AppendQuery("ignoreRelationships", ignoreRelationships.Value, true);
            }
            if (attrNQualifiedName != null)
            {
                uri.AppendQuery("attr_N:qualifiedName", attrNQualifiedName, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return request;
        }

        /// <summary> Get entity header given its GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetHeaderByIdAsync(string guid, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetHeaderByIdRequest(guid);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get entity header given its GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetHeaderById(string guid, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetHeaderByIdRequest(guid);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetHeaderById"/> and <see cref="GetHeaderByIdAsync"/> operations. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        private Request CreateGetHeaderByIdRequest(string guid)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            uri.AppendPath("/header", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return request;
        }
    }
}
