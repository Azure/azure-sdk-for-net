// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Purview.Catalog
{
    /// <summary> The PurviewEntities service client. </summary>
    public partial class PurviewEntities
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://purview.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        internal ClientDiagnostics ClientDiagnostics { get; }
        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of PurviewEntities for mocking. </summary>
        protected PurviewEntities()
        {
        }

        /// <summary>
        /// Create or update an entity in Atlas.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   referredEntities: Dictionary&lt;string, AtlasEntity&gt;,
        ///   entity: {
        ///     attributes: Dictionary&lt;string, AnyObject&gt;,
        ///     typeName: string,
        ///     lastModifiedTS: string,
        ///     classifications: [
        ///       {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;,
        ///         typeName: string,
        ///         lastModifiedTS: string,
        ///         entityGuid: string,
        ///         entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///         removePropagationsOnEntityDelete: boolean,
        ///         validityPeriods: [
        ///           {
        ///             endTime: string,
        ///             startTime: string,
        ///             timeZone: string
        ///           }
        ///         ],
        ///         source: string,
        ///         sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///       }
        ///     ],
        ///     createTime: number,
        ///     createdBy: string,
        ///     guid: string,
        ///     homeId: string,
        ///     meanings: [
        ///       {
        ///         confidence: number,
        ///         createdBy: string,
        ///         description: string,
        ///         displayText: string,
        ///         expression: string,
        ///         relationGuid: string,
        ///         source: string,
        ///         status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///         steward: string,
        ///         termGuid: string
        ///       }
        ///     ],
        ///     provenanceType: number,
        ///     proxy: boolean,
        ///     relationshipAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///     status: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///     updateTime: number,
        ///     updatedBy: string,
        ///     version: number,
        ///     source: string,
        ///     sourceDetails: Dictionary&lt;string, AnyObject&gt;,
        ///     contacts: Dictionary&lt;string, ContactBasic[]&gt;
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;,
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;,
        ///   partialUpdatedEntities: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       classificationNames: [string],
        ///       classifications: [
        ///         {
        ///           attributes: Dictionary&lt;string, AnyObject&gt;,
        ///           typeName: string,
        ///           lastModifiedTS: string,
        ///           entityGuid: string,
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///           removePropagationsOnEntityDelete: boolean,
        ///           validityPeriods: [
        ///             {
        ///               endTime: string,
        ///               startTime: string,
        ///               timeZone: string
        ///             }
        ///           ],
        ///           source: string,
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///         }
        ///       ],
        ///       displayText: string,
        ///       guid: string,
        ///       meaningNames: [string],
        ///       meanings: [
        ///         {
        ///           confidence: number,
        ///           createdBy: string,
        ///           description: string,
        ///           displayText: string,
        ///           expression: string,
        ///           relationGuid: string,
        ///           source: string,
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///           steward: string,
        ///           termGuid: string
        ///         }
        ///       ],
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> CreateOrUpdateAsync(RequestContent content, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update an entity in Atlas.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   referredEntities: Dictionary&lt;string, AtlasEntity&gt;,
        ///   entity: {
        ///     attributes: Dictionary&lt;string, AnyObject&gt;,
        ///     typeName: string,
        ///     lastModifiedTS: string,
        ///     classifications: [
        ///       {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;,
        ///         typeName: string,
        ///         lastModifiedTS: string,
        ///         entityGuid: string,
        ///         entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///         removePropagationsOnEntityDelete: boolean,
        ///         validityPeriods: [
        ///           {
        ///             endTime: string,
        ///             startTime: string,
        ///             timeZone: string
        ///           }
        ///         ],
        ///         source: string,
        ///         sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///       }
        ///     ],
        ///     createTime: number,
        ///     createdBy: string,
        ///     guid: string,
        ///     homeId: string,
        ///     meanings: [
        ///       {
        ///         confidence: number,
        ///         createdBy: string,
        ///         description: string,
        ///         displayText: string,
        ///         expression: string,
        ///         relationGuid: string,
        ///         source: string,
        ///         status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///         steward: string,
        ///         termGuid: string
        ///       }
        ///     ],
        ///     provenanceType: number,
        ///     proxy: boolean,
        ///     relationshipAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///     status: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///     updateTime: number,
        ///     updatedBy: string,
        ///     version: number,
        ///     source: string,
        ///     sourceDetails: Dictionary&lt;string, AnyObject&gt;,
        ///     contacts: Dictionary&lt;string, ContactBasic[]&gt;
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;,
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;,
        ///   partialUpdatedEntities: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       classificationNames: [string],
        ///       classifications: [
        ///         {
        ///           attributes: Dictionary&lt;string, AnyObject&gt;,
        ///           typeName: string,
        ///           lastModifiedTS: string,
        ///           entityGuid: string,
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///           removePropagationsOnEntityDelete: boolean,
        ///           validityPeriods: [
        ///             {
        ///               endTime: string,
        ///               startTime: string,
        ///               timeZone: string
        ///             }
        ///           ],
        ///           source: string,
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///         }
        ///       ],
        ///       displayText: string,
        ///       guid: string,
        ///       meaningNames: [string],
        ///       meanings: [
        ///         {
        ///           confidence: number,
        ///           createdBy: string,
        ///           description: string,
        ///           displayText: string,
        ///           expression: string,
        ///           relationGuid: string,
        ///           source: string,
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///           steward: string,
        ///           termGuid: string
        ///         }
        ///       ],
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response CreateOrUpdate(RequestContent content, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List entities in bulk identified by its GUIDs. </summary>
        /// <param name="guids"> An array of GUIDs of entities to create. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="excludeRelationshipTypes"> An array of the relationship types need to be excluded from the response. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guids"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   referredEntities: Dictionary&lt;string, AtlasEntity&gt;,
        ///   entities: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       classifications: [
        ///         {
        ///           attributes: Dictionary&lt;string, AnyObject&gt;,
        ///           typeName: string,
        ///           lastModifiedTS: string,
        ///           entityGuid: string,
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///           removePropagationsOnEntityDelete: boolean,
        ///           validityPeriods: [
        ///             {
        ///               endTime: string,
        ///               startTime: string,
        ///               timeZone: string
        ///             }
        ///           ],
        ///           source: string,
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///         }
        ///       ],
        ///       createTime: number,
        ///       createdBy: string,
        ///       guid: string,
        ///       homeId: string,
        ///       meanings: [
        ///         {
        ///           confidence: number,
        ///           createdBy: string,
        ///           description: string,
        ///           displayText: string,
        ///           expression: string,
        ///           relationGuid: string,
        ///           source: string,
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///           steward: string,
        ///           termGuid: string
        ///         }
        ///       ],
        ///       provenanceType: number,
        ///       proxy: boolean,
        ///       relationshipAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       updateTime: number,
        ///       updatedBy: string,
        ///       version: number,
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;,
        ///       contacts: Dictionary&lt;string, ContactBasic[]&gt;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetByGuidsAsync(IEnumerable<string> guids, bool? minExtInfo = null, bool? ignoreRelationships = null, IEnumerable<string> excludeRelationshipTypes = null, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(guids, nameof(guids));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.GetByGuids");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetByGuidsRequest(guids, minExtInfo, ignoreRelationships, excludeRelationshipTypes, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List entities in bulk identified by its GUIDs. </summary>
        /// <param name="guids"> An array of GUIDs of entities to create. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="excludeRelationshipTypes"> An array of the relationship types need to be excluded from the response. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guids"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   referredEntities: Dictionary&lt;string, AtlasEntity&gt;,
        ///   entities: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       classifications: [
        ///         {
        ///           attributes: Dictionary&lt;string, AnyObject&gt;,
        ///           typeName: string,
        ///           lastModifiedTS: string,
        ///           entityGuid: string,
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///           removePropagationsOnEntityDelete: boolean,
        ///           validityPeriods: [
        ///             {
        ///               endTime: string,
        ///               startTime: string,
        ///               timeZone: string
        ///             }
        ///           ],
        ///           source: string,
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///         }
        ///       ],
        ///       createTime: number,
        ///       createdBy: string,
        ///       guid: string,
        ///       homeId: string,
        ///       meanings: [
        ///         {
        ///           confidence: number,
        ///           createdBy: string,
        ///           description: string,
        ///           displayText: string,
        ///           expression: string,
        ///           relationGuid: string,
        ///           source: string,
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///           steward: string,
        ///           termGuid: string
        ///         }
        ///       ],
        ///       provenanceType: number,
        ///       proxy: boolean,
        ///       relationshipAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       updateTime: number,
        ///       updatedBy: string,
        ///       version: number,
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;,
        ///       contacts: Dictionary&lt;string, ContactBasic[]&gt;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response GetByGuids(IEnumerable<string> guids, bool? minExtInfo = null, bool? ignoreRelationships = null, IEnumerable<string> excludeRelationshipTypes = null, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(guids, nameof(guids));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.GetByGuids");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetByGuidsRequest(guids, minExtInfo, ignoreRelationships, excludeRelationshipTypes, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update entities in Atlas in bulk.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   referredEntities: Dictionary&lt;string, AtlasEntity&gt;,
        ///   entities: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       classifications: [
        ///         {
        ///           attributes: Dictionary&lt;string, AnyObject&gt;,
        ///           typeName: string,
        ///           lastModifiedTS: string,
        ///           entityGuid: string,
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///           removePropagationsOnEntityDelete: boolean,
        ///           validityPeriods: [
        ///             {
        ///               endTime: string,
        ///               startTime: string,
        ///               timeZone: string
        ///             }
        ///           ],
        ///           source: string,
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///         }
        ///       ],
        ///       createTime: number,
        ///       createdBy: string,
        ///       guid: string,
        ///       homeId: string,
        ///       meanings: [
        ///         {
        ///           confidence: number,
        ///           createdBy: string,
        ///           description: string,
        ///           displayText: string,
        ///           expression: string,
        ///           relationGuid: string,
        ///           source: string,
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///           steward: string,
        ///           termGuid: string
        ///         }
        ///       ],
        ///       provenanceType: number,
        ///       proxy: boolean,
        ///       relationshipAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       updateTime: number,
        ///       updatedBy: string,
        ///       version: number,
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;,
        ///       contacts: Dictionary&lt;string, ContactBasic[]&gt;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;,
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;,
        ///   partialUpdatedEntities: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       classificationNames: [string],
        ///       classifications: [
        ///         {
        ///           attributes: Dictionary&lt;string, AnyObject&gt;,
        ///           typeName: string,
        ///           lastModifiedTS: string,
        ///           entityGuid: string,
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///           removePropagationsOnEntityDelete: boolean,
        ///           validityPeriods: [
        ///             {
        ///               endTime: string,
        ///               startTime: string,
        ///               timeZone: string
        ///             }
        ///           ],
        ///           source: string,
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///         }
        ///       ],
        ///       displayText: string,
        ///       guid: string,
        ///       meaningNames: [string],
        ///       meanings: [
        ///         {
        ///           confidence: number,
        ///           createdBy: string,
        ///           description: string,
        ///           displayText: string,
        ///           expression: string,
        ///           relationGuid: string,
        ///           source: string,
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///           steward: string,
        ///           termGuid: string
        ///         }
        ///       ],
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> CreateOrUpdateEntitiesAsync(RequestContent content, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.CreateOrUpdateEntities");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateEntitiesRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update entities in Atlas in bulk.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   referredEntities: Dictionary&lt;string, AtlasEntity&gt;,
        ///   entities: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       classifications: [
        ///         {
        ///           attributes: Dictionary&lt;string, AnyObject&gt;,
        ///           typeName: string,
        ///           lastModifiedTS: string,
        ///           entityGuid: string,
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///           removePropagationsOnEntityDelete: boolean,
        ///           validityPeriods: [
        ///             {
        ///               endTime: string,
        ///               startTime: string,
        ///               timeZone: string
        ///             }
        ///           ],
        ///           source: string,
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///         }
        ///       ],
        ///       createTime: number,
        ///       createdBy: string,
        ///       guid: string,
        ///       homeId: string,
        ///       meanings: [
        ///         {
        ///           confidence: number,
        ///           createdBy: string,
        ///           description: string,
        ///           displayText: string,
        ///           expression: string,
        ///           relationGuid: string,
        ///           source: string,
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///           steward: string,
        ///           termGuid: string
        ///         }
        ///       ],
        ///       provenanceType: number,
        ///       proxy: boolean,
        ///       relationshipAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       updateTime: number,
        ///       updatedBy: string,
        ///       version: number,
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;,
        ///       contacts: Dictionary&lt;string, ContactBasic[]&gt;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;,
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;,
        ///   partialUpdatedEntities: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       classificationNames: [string],
        ///       classifications: [
        ///         {
        ///           attributes: Dictionary&lt;string, AnyObject&gt;,
        ///           typeName: string,
        ///           lastModifiedTS: string,
        ///           entityGuid: string,
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///           removePropagationsOnEntityDelete: boolean,
        ///           validityPeriods: [
        ///             {
        ///               endTime: string,
        ///               startTime: string,
        ///               timeZone: string
        ///             }
        ///           ],
        ///           source: string,
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///         }
        ///       ],
        ///       displayText: string,
        ///       guid: string,
        ///       meaningNames: [string],
        ///       meanings: [
        ///         {
        ///           confidence: number,
        ///           createdBy: string,
        ///           description: string,
        ///           displayText: string,
        ///           expression: string,
        ///           relationGuid: string,
        ///           source: string,
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///           steward: string,
        ///           termGuid: string
        ///         }
        ///       ],
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response CreateOrUpdateEntities(RequestContent content, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.CreateOrUpdateEntities");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateEntitiesRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a list of entities in bulk identified by their GUIDs or unique attributes. </summary>
        /// <param name="guids"> An array of GUIDs of entities to delete. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guids"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;,
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;,
        ///   partialUpdatedEntities: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       classificationNames: [string],
        ///       classifications: [
        ///         {
        ///           attributes: Dictionary&lt;string, AnyObject&gt;,
        ///           typeName: string,
        ///           lastModifiedTS: string,
        ///           entityGuid: string,
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///           removePropagationsOnEntityDelete: boolean,
        ///           validityPeriods: [
        ///             {
        ///               endTime: string,
        ///               startTime: string,
        ///               timeZone: string
        ///             }
        ///           ],
        ///           source: string,
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///         }
        ///       ],
        ///       displayText: string,
        ///       guid: string,
        ///       meaningNames: [string],
        ///       meanings: [
        ///         {
        ///           confidence: number,
        ///           createdBy: string,
        ///           description: string,
        ///           displayText: string,
        ///           expression: string,
        ///           relationGuid: string,
        ///           source: string,
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///           steward: string,
        ///           termGuid: string
        ///         }
        ///       ],
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> DeleteByGuidsAsync(IEnumerable<string> guids, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(guids, nameof(guids));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.DeleteByGuids");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteByGuidsRequest(guids, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a list of entities in bulk identified by their GUIDs or unique attributes. </summary>
        /// <param name="guids"> An array of GUIDs of entities to delete. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guids"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;,
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;,
        ///   partialUpdatedEntities: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       classificationNames: [string],
        ///       classifications: [
        ///         {
        ///           attributes: Dictionary&lt;string, AnyObject&gt;,
        ///           typeName: string,
        ///           lastModifiedTS: string,
        ///           entityGuid: string,
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///           removePropagationsOnEntityDelete: boolean,
        ///           validityPeriods: [
        ///             {
        ///               endTime: string,
        ///               startTime: string,
        ///               timeZone: string
        ///             }
        ///           ],
        ///           source: string,
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///         }
        ///       ],
        ///       displayText: string,
        ///       guid: string,
        ///       meaningNames: [string],
        ///       meanings: [
        ///         {
        ///           confidence: number,
        ///           createdBy: string,
        ///           description: string,
        ///           displayText: string,
        ///           expression: string,
        ///           relationGuid: string,
        ///           source: string,
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///           steward: string,
        ///           termGuid: string
        ///         }
        ///       ],
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response DeleteByGuids(IEnumerable<string> guids, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(guids, nameof(guids));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.DeleteByGuids");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteByGuidsRequest(guids, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Associate a classification to multiple entities in bulk. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   classification: {
        ///     attributes: Dictionary&lt;string, AnyObject&gt;,
        ///     typeName: string,
        ///     lastModifiedTS: string,
        ///     entityGuid: string,
        ///     entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///     removePropagationsOnEntityDelete: boolean,
        ///     validityPeriods: [
        ///       {
        ///         endTime: string,
        ///         startTime: string,
        ///         timeZone: string
        ///       }
        ///     ],
        ///     source: string,
        ///     sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///   },
        ///   entityGuids: [string]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> AddClassificationAsync(RequestContent content, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.AddClassification");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddClassificationRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Associate a classification to multiple entities in bulk. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   classification: {
        ///     attributes: Dictionary&lt;string, AnyObject&gt;,
        ///     typeName: string,
        ///     lastModifiedTS: string,
        ///     entityGuid: string,
        ///     entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///     removePropagationsOnEntityDelete: boolean,
        ///     validityPeriods: [
        ///       {
        ///         endTime: string,
        ///         startTime: string,
        ///         timeZone: string
        ///       }
        ///     ],
        ///     source: string,
        ///     sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///   },
        ///   entityGuids: [string]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response AddClassification(RequestContent content, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.AddClassification");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddClassificationRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get complete definition of an entity given its GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   referredEntities: Dictionary&lt;string, AtlasEntity&gt;,
        ///   entity: {
        ///     attributes: Dictionary&lt;string, AnyObject&gt;,
        ///     typeName: string,
        ///     lastModifiedTS: string,
        ///     classifications: [
        ///       {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;,
        ///         typeName: string,
        ///         lastModifiedTS: string,
        ///         entityGuid: string,
        ///         entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///         removePropagationsOnEntityDelete: boolean,
        ///         validityPeriods: [
        ///           {
        ///             endTime: string,
        ///             startTime: string,
        ///             timeZone: string
        ///           }
        ///         ],
        ///         source: string,
        ///         sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///       }
        ///     ],
        ///     createTime: number,
        ///     createdBy: string,
        ///     guid: string,
        ///     homeId: string,
        ///     meanings: [
        ///       {
        ///         confidence: number,
        ///         createdBy: string,
        ///         description: string,
        ///         displayText: string,
        ///         expression: string,
        ///         relationGuid: string,
        ///         source: string,
        ///         status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///         steward: string,
        ///         termGuid: string
        ///       }
        ///     ],
        ///     provenanceType: number,
        ///     proxy: boolean,
        ///     relationshipAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///     status: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///     updateTime: number,
        ///     updatedBy: string,
        ///     version: number,
        ///     source: string,
        ///     sourceDetails: Dictionary&lt;string, AnyObject&gt;,
        ///     contacts: Dictionary&lt;string, ContactBasic[]&gt;
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetByGuidAsync(string guid, bool? minExtInfo = null, bool? ignoreRelationships = null, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(guid, nameof(guid));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.GetByGuid");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetByGuidRequest(guid, minExtInfo, ignoreRelationships, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get complete definition of an entity given its GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   referredEntities: Dictionary&lt;string, AtlasEntity&gt;,
        ///   entity: {
        ///     attributes: Dictionary&lt;string, AnyObject&gt;,
        ///     typeName: string,
        ///     lastModifiedTS: string,
        ///     classifications: [
        ///       {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;,
        ///         typeName: string,
        ///         lastModifiedTS: string,
        ///         entityGuid: string,
        ///         entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///         removePropagationsOnEntityDelete: boolean,
        ///         validityPeriods: [
        ///           {
        ///             endTime: string,
        ///             startTime: string,
        ///             timeZone: string
        ///           }
        ///         ],
        ///         source: string,
        ///         sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///       }
        ///     ],
        ///     createTime: number,
        ///     createdBy: string,
        ///     guid: string,
        ///     homeId: string,
        ///     meanings: [
        ///       {
        ///         confidence: number,
        ///         createdBy: string,
        ///         description: string,
        ///         displayText: string,
        ///         expression: string,
        ///         relationGuid: string,
        ///         source: string,
        ///         status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///         steward: string,
        ///         termGuid: string
        ///       }
        ///     ],
        ///     provenanceType: number,
        ///     proxy: boolean,
        ///     relationshipAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///     status: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///     updateTime: number,
        ///     updatedBy: string,
        ///     version: number,
        ///     source: string,
        ///     sourceDetails: Dictionary&lt;string, AnyObject&gt;,
        ///     contacts: Dictionary&lt;string, ContactBasic[]&gt;
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response GetByGuid(string guid, bool? minExtInfo = null, bool? ignoreRelationships = null, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(guid, nameof(guid));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.GetByGuid");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetByGuidRequest(guid, minExtInfo, ignoreRelationships, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update entity partially - create or update entity attribute identified by its GUID.
        /// Supports only primitive attribute type and entity references.
        /// It does not support updating complex types like arrays, and maps.
        /// Null updates are not possible.
        /// </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="name"> The name of the attribute. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/>, <paramref name="name"/>, or <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;,
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;,
        ///   partialUpdatedEntities: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       classificationNames: [string],
        ///       classifications: [
        ///         {
        ///           attributes: Dictionary&lt;string, AnyObject&gt;,
        ///           typeName: string,
        ///           lastModifiedTS: string,
        ///           entityGuid: string,
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///           removePropagationsOnEntityDelete: boolean,
        ///           validityPeriods: [
        ///             {
        ///               endTime: string,
        ///               startTime: string,
        ///               timeZone: string
        ///             }
        ///           ],
        ///           source: string,
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///         }
        ///       ],
        ///       displayText: string,
        ///       guid: string,
        ///       meaningNames: [string],
        ///       meanings: [
        ///         {
        ///           confidence: number,
        ///           createdBy: string,
        ///           description: string,
        ///           displayText: string,
        ///           expression: string,
        ///           relationGuid: string,
        ///           source: string,
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///           steward: string,
        ///           termGuid: string
        ///         }
        ///       ],
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> PartialUpdateEntityAttributeByGuidAsync(string guid, string name, RequestContent content, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(guid, nameof(guid));
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.PartialUpdateEntityAttributeByGuid");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePartialUpdateEntityAttributeByGuidRequest(guid, name, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update entity partially - create or update entity attribute identified by its GUID.
        /// Supports only primitive attribute type and entity references.
        /// It does not support updating complex types like arrays, and maps.
        /// Null updates are not possible.
        /// </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="name"> The name of the attribute. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/>, <paramref name="name"/>, or <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;,
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;,
        ///   partialUpdatedEntities: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       classificationNames: [string],
        ///       classifications: [
        ///         {
        ///           attributes: Dictionary&lt;string, AnyObject&gt;,
        ///           typeName: string,
        ///           lastModifiedTS: string,
        ///           entityGuid: string,
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///           removePropagationsOnEntityDelete: boolean,
        ///           validityPeriods: [
        ///             {
        ///               endTime: string,
        ///               startTime: string,
        ///               timeZone: string
        ///             }
        ///           ],
        ///           source: string,
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///         }
        ///       ],
        ///       displayText: string,
        ///       guid: string,
        ///       meaningNames: [string],
        ///       meanings: [
        ///         {
        ///           confidence: number,
        ///           createdBy: string,
        ///           description: string,
        ///           displayText: string,
        ///           expression: string,
        ///           relationGuid: string,
        ///           source: string,
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///           steward: string,
        ///           termGuid: string
        ///         }
        ///       ],
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response PartialUpdateEntityAttributeByGuid(string guid, string name, RequestContent content, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(guid, nameof(guid));
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.PartialUpdateEntityAttributeByGuid");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePartialUpdateEntityAttributeByGuidRequest(guid, name, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete an entity identified by its GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;,
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;,
        ///   partialUpdatedEntities: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       classificationNames: [string],
        ///       classifications: [
        ///         {
        ///           attributes: Dictionary&lt;string, AnyObject&gt;,
        ///           typeName: string,
        ///           lastModifiedTS: string,
        ///           entityGuid: string,
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///           removePropagationsOnEntityDelete: boolean,
        ///           validityPeriods: [
        ///             {
        ///               endTime: string,
        ///               startTime: string,
        ///               timeZone: string
        ///             }
        ///           ],
        ///           source: string,
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///         }
        ///       ],
        ///       displayText: string,
        ///       guid: string,
        ///       meaningNames: [string],
        ///       meanings: [
        ///         {
        ///           confidence: number,
        ///           createdBy: string,
        ///           description: string,
        ///           displayText: string,
        ///           expression: string,
        ///           relationGuid: string,
        ///           source: string,
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///           steward: string,
        ///           termGuid: string
        ///         }
        ///       ],
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> DeleteByGuidAsync(string guid, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(guid, nameof(guid));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.DeleteByGuid");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteByGuidRequest(guid, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete an entity identified by its GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;,
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;,
        ///   partialUpdatedEntities: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       classificationNames: [string],
        ///       classifications: [
        ///         {
        ///           attributes: Dictionary&lt;string, AnyObject&gt;,
        ///           typeName: string,
        ///           lastModifiedTS: string,
        ///           entityGuid: string,
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///           removePropagationsOnEntityDelete: boolean,
        ///           validityPeriods: [
        ///             {
        ///               endTime: string,
        ///               startTime: string,
        ///               timeZone: string
        ///             }
        ///           ],
        ///           source: string,
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///         }
        ///       ],
        ///       displayText: string,
        ///       guid: string,
        ///       meaningNames: [string],
        ///       meanings: [
        ///         {
        ///           confidence: number,
        ///           createdBy: string,
        ///           description: string,
        ///           displayText: string,
        ///           expression: string,
        ///           relationGuid: string,
        ///           source: string,
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///           steward: string,
        ///           termGuid: string
        ///         }
        ///       ],
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response DeleteByGuid(string guid, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(guid, nameof(guid));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.DeleteByGuid");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteByGuidRequest(guid, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List classifications for a given entity represented by a GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="classificationName"> The name of the classification. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> or <paramref name="classificationName"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   attributes: Dictionary&lt;string, AnyObject&gt;,
        ///   typeName: string,
        ///   lastModifiedTS: string,
        ///   entityGuid: string,
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///   removePropagationsOnEntityDelete: boolean,
        ///   validityPeriods: [
        ///     {
        ///       endTime: string,
        ///       startTime: string,
        ///       timeZone: string
        ///     }
        ///   ],
        ///   source: string,
        ///   sourceDetails: Dictionary&lt;string, AnyObject&gt;
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetClassificationAsync(string guid, string classificationName, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(guid, nameof(guid));
            Argument.AssertNotNull(classificationName, nameof(classificationName));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.GetClassification");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetClassificationRequest(guid, classificationName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List classifications for a given entity represented by a GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="classificationName"> The name of the classification. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> or <paramref name="classificationName"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   attributes: Dictionary&lt;string, AnyObject&gt;,
        ///   typeName: string,
        ///   lastModifiedTS: string,
        ///   entityGuid: string,
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///   removePropagationsOnEntityDelete: boolean,
        ///   validityPeriods: [
        ///     {
        ///       endTime: string,
        ///       startTime: string,
        ///       timeZone: string
        ///     }
        ///   ],
        ///   source: string,
        ///   sourceDetails: Dictionary&lt;string, AnyObject&gt;
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response GetClassification(string guid, string classificationName, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(guid, nameof(guid));
            Argument.AssertNotNull(classificationName, nameof(classificationName));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.GetClassification");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetClassificationRequest(guid, classificationName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a given classification from an existing entity represented by a GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="classificationName"> The name of the classification. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> or <paramref name="classificationName"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> DeleteClassificationAsync(string guid, string classificationName, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(guid, nameof(guid));
            Argument.AssertNotNull(classificationName, nameof(classificationName));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.DeleteClassification");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteClassificationRequest(guid, classificationName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a given classification from an existing entity represented by a GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="classificationName"> The name of the classification. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> or <paramref name="classificationName"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response DeleteClassification(string guid, string classificationName, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(guid, nameof(guid));
            Argument.AssertNotNull(classificationName, nameof(classificationName));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.DeleteClassification");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteClassificationRequest(guid, classificationName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List classifications for a given entity represented by a GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   list: [AnyObject],
        ///   pageSize: number,
        ///   sortBy: string,
        ///   sortType: &quot;NONE&quot; | &quot;ASC&quot; | &quot;DESC&quot;,
        ///   startIndex: number,
        ///   totalCount: number
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetClassificationsAsync(string guid, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(guid, nameof(guid));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.GetClassifications");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetClassificationsRequest(guid, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List classifications for a given entity represented by a GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   list: [AnyObject],
        ///   pageSize: number,
        ///   sortBy: string,
        ///   sortType: &quot;NONE&quot; | &quot;ASC&quot; | &quot;DESC&quot;,
        ///   startIndex: number,
        ///   totalCount: number
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response GetClassifications(string guid, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(guid, nameof(guid));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.GetClassifications");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetClassificationsRequest(guid, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add classifications to an existing entity represented by a GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> or <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   attributes: Dictionary&lt;string, AnyObject&gt;,
        ///   typeName: string,
        ///   lastModifiedTS: string,
        ///   entityGuid: string,
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///   removePropagationsOnEntityDelete: boolean,
        ///   validityPeriods: [
        ///     {
        ///       endTime: string,
        ///       startTime: string,
        ///       timeZone: string
        ///     }
        ///   ],
        ///   source: string,
        ///   sourceDetails: Dictionary&lt;string, AnyObject&gt;
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> AddClassificationsAsync(string guid, RequestContent content, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(guid, nameof(guid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.AddClassifications");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddClassificationsRequest(guid, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add classifications to an existing entity represented by a GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> or <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   attributes: Dictionary&lt;string, AnyObject&gt;,
        ///   typeName: string,
        ///   lastModifiedTS: string,
        ///   entityGuid: string,
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///   removePropagationsOnEntityDelete: boolean,
        ///   validityPeriods: [
        ///     {
        ///       endTime: string,
        ///       startTime: string,
        ///       timeZone: string
        ///     }
        ///   ],
        ///   source: string,
        ///   sourceDetails: Dictionary&lt;string, AnyObject&gt;
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response AddClassifications(string guid, RequestContent content, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(guid, nameof(guid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.AddClassifications");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddClassificationsRequest(guid, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update classifications to an existing entity represented by a guid. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> or <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   attributes: Dictionary&lt;string, AnyObject&gt;,
        ///   typeName: string,
        ///   lastModifiedTS: string,
        ///   entityGuid: string,
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///   removePropagationsOnEntityDelete: boolean,
        ///   validityPeriods: [
        ///     {
        ///       endTime: string,
        ///       startTime: string,
        ///       timeZone: string
        ///     }
        ///   ],
        ///   source: string,
        ///   sourceDetails: Dictionary&lt;string, AnyObject&gt;
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> UpdateClassificationsAsync(string guid, RequestContent content, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(guid, nameof(guid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.UpdateClassifications");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateClassificationsRequest(guid, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update classifications to an existing entity represented by a guid. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> or <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   attributes: Dictionary&lt;string, AnyObject&gt;,
        ///   typeName: string,
        ///   lastModifiedTS: string,
        ///   entityGuid: string,
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///   removePropagationsOnEntityDelete: boolean,
        ///   validityPeriods: [
        ///     {
        ///       endTime: string,
        ///       startTime: string,
        ///       timeZone: string
        ///     }
        ///   ],
        ///   source: string,
        ///   sourceDetails: Dictionary&lt;string, AnyObject&gt;
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response UpdateClassifications(string guid, RequestContent content, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(guid, nameof(guid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.UpdateClassifications");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateClassificationsRequest(guid, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get complete definition of an entity given its type and unique attribute.
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:
        /// attr:\&lt;attrName&gt;=&lt;attrValue&gt;. 
        /// NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        /// The REST request would look something like this:
        /// GET /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
        /// </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="typeName"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   referredEntities: Dictionary&lt;string, AtlasEntity&gt;,
        ///   entity: {
        ///     attributes: Dictionary&lt;string, AnyObject&gt;,
        ///     typeName: string,
        ///     lastModifiedTS: string,
        ///     classifications: [
        ///       {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;,
        ///         typeName: string,
        ///         lastModifiedTS: string,
        ///         entityGuid: string,
        ///         entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///         removePropagationsOnEntityDelete: boolean,
        ///         validityPeriods: [
        ///           {
        ///             endTime: string,
        ///             startTime: string,
        ///             timeZone: string
        ///           }
        ///         ],
        ///         source: string,
        ///         sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///       }
        ///     ],
        ///     createTime: number,
        ///     createdBy: string,
        ///     guid: string,
        ///     homeId: string,
        ///     meanings: [
        ///       {
        ///         confidence: number,
        ///         createdBy: string,
        ///         description: string,
        ///         displayText: string,
        ///         expression: string,
        ///         relationGuid: string,
        ///         source: string,
        ///         status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///         steward: string,
        ///         termGuid: string
        ///       }
        ///     ],
        ///     provenanceType: number,
        ///     proxy: boolean,
        ///     relationshipAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///     status: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///     updateTime: number,
        ///     updatedBy: string,
        ///     version: number,
        ///     source: string,
        ///     sourceDetails: Dictionary&lt;string, AnyObject&gt;,
        ///     contacts: Dictionary&lt;string, ContactBasic[]&gt;
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetByUniqueAttributesAsync(string typeName, bool? minExtInfo = null, bool? ignoreRelationships = null, string attrQualifiedName = null, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(typeName, nameof(typeName));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.GetByUniqueAttributes");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetByUniqueAttributesRequest(typeName, minExtInfo, ignoreRelationships, attrQualifiedName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get complete definition of an entity given its type and unique attribute.
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:
        /// attr:\&lt;attrName&gt;=&lt;attrValue&gt;. 
        /// NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        /// The REST request would look something like this:
        /// GET /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
        /// </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="typeName"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   referredEntities: Dictionary&lt;string, AtlasEntity&gt;,
        ///   entity: {
        ///     attributes: Dictionary&lt;string, AnyObject&gt;,
        ///     typeName: string,
        ///     lastModifiedTS: string,
        ///     classifications: [
        ///       {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;,
        ///         typeName: string,
        ///         lastModifiedTS: string,
        ///         entityGuid: string,
        ///         entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///         removePropagationsOnEntityDelete: boolean,
        ///         validityPeriods: [
        ///           {
        ///             endTime: string,
        ///             startTime: string,
        ///             timeZone: string
        ///           }
        ///         ],
        ///         source: string,
        ///         sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///       }
        ///     ],
        ///     createTime: number,
        ///     createdBy: string,
        ///     guid: string,
        ///     homeId: string,
        ///     meanings: [
        ///       {
        ///         confidence: number,
        ///         createdBy: string,
        ///         description: string,
        ///         displayText: string,
        ///         expression: string,
        ///         relationGuid: string,
        ///         source: string,
        ///         status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///         steward: string,
        ///         termGuid: string
        ///       }
        ///     ],
        ///     provenanceType: number,
        ///     proxy: boolean,
        ///     relationshipAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///     status: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///     updateTime: number,
        ///     updatedBy: string,
        ///     version: number,
        ///     source: string,
        ///     sourceDetails: Dictionary&lt;string, AnyObject&gt;,
        ///     contacts: Dictionary&lt;string, ContactBasic[]&gt;
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response GetByUniqueAttributes(string typeName, bool? minExtInfo = null, bool? ignoreRelationships = null, string attrQualifiedName = null, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(typeName, nameof(typeName));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.GetByUniqueAttributes");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetByUniqueAttributesRequest(typeName, minExtInfo, ignoreRelationships, attrQualifiedName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update entity partially - Allow a subset of attributes to be updated on
        /// an entity which is identified by its type and unique attribute  eg: Referenceable.qualifiedName.
        /// Null updates are not possible.
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:
        /// attr:&lt;attrName&gt;=&lt;attrValue&gt;.
        /// NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        /// The REST request would look something like this:
        /// PUT /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
        /// </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="typeName"/> or <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   referredEntities: Dictionary&lt;string, AtlasEntity&gt;,
        ///   entity: {
        ///     attributes: Dictionary&lt;string, AnyObject&gt;,
        ///     typeName: string,
        ///     lastModifiedTS: string,
        ///     classifications: [
        ///       {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;,
        ///         typeName: string,
        ///         lastModifiedTS: string,
        ///         entityGuid: string,
        ///         entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///         removePropagationsOnEntityDelete: boolean,
        ///         validityPeriods: [
        ///           {
        ///             endTime: string,
        ///             startTime: string,
        ///             timeZone: string
        ///           }
        ///         ],
        ///         source: string,
        ///         sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///       }
        ///     ],
        ///     createTime: number,
        ///     createdBy: string,
        ///     guid: string,
        ///     homeId: string,
        ///     meanings: [
        ///       {
        ///         confidence: number,
        ///         createdBy: string,
        ///         description: string,
        ///         displayText: string,
        ///         expression: string,
        ///         relationGuid: string,
        ///         source: string,
        ///         status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///         steward: string,
        ///         termGuid: string
        ///       }
        ///     ],
        ///     provenanceType: number,
        ///     proxy: boolean,
        ///     relationshipAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///     status: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///     updateTime: number,
        ///     updatedBy: string,
        ///     version: number,
        ///     source: string,
        ///     sourceDetails: Dictionary&lt;string, AnyObject&gt;,
        ///     contacts: Dictionary&lt;string, ContactBasic[]&gt;
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;,
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;,
        ///   partialUpdatedEntities: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       classificationNames: [string],
        ///       classifications: [
        ///         {
        ///           attributes: Dictionary&lt;string, AnyObject&gt;,
        ///           typeName: string,
        ///           lastModifiedTS: string,
        ///           entityGuid: string,
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///           removePropagationsOnEntityDelete: boolean,
        ///           validityPeriods: [
        ///             {
        ///               endTime: string,
        ///               startTime: string,
        ///               timeZone: string
        ///             }
        ///           ],
        ///           source: string,
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///         }
        ///       ],
        ///       displayText: string,
        ///       guid: string,
        ///       meaningNames: [string],
        ///       meanings: [
        ///         {
        ///           confidence: number,
        ///           createdBy: string,
        ///           description: string,
        ///           displayText: string,
        ///           expression: string,
        ///           relationGuid: string,
        ///           source: string,
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///           steward: string,
        ///           termGuid: string
        ///         }
        ///       ],
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> PartialUpdateEntityByUniqueAttributesAsync(string typeName, RequestContent content, string attrQualifiedName = null, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(typeName, nameof(typeName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.PartialUpdateEntityByUniqueAttributes");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePartialUpdateEntityByUniqueAttributesRequest(typeName, content, attrQualifiedName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update entity partially - Allow a subset of attributes to be updated on
        /// an entity which is identified by its type and unique attribute  eg: Referenceable.qualifiedName.
        /// Null updates are not possible.
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:
        /// attr:&lt;attrName&gt;=&lt;attrValue&gt;.
        /// NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        /// The REST request would look something like this:
        /// PUT /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
        /// </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="typeName"/> or <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   referredEntities: Dictionary&lt;string, AtlasEntity&gt;,
        ///   entity: {
        ///     attributes: Dictionary&lt;string, AnyObject&gt;,
        ///     typeName: string,
        ///     lastModifiedTS: string,
        ///     classifications: [
        ///       {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;,
        ///         typeName: string,
        ///         lastModifiedTS: string,
        ///         entityGuid: string,
        ///         entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///         removePropagationsOnEntityDelete: boolean,
        ///         validityPeriods: [
        ///           {
        ///             endTime: string,
        ///             startTime: string,
        ///             timeZone: string
        ///           }
        ///         ],
        ///         source: string,
        ///         sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///       }
        ///     ],
        ///     createTime: number,
        ///     createdBy: string,
        ///     guid: string,
        ///     homeId: string,
        ///     meanings: [
        ///       {
        ///         confidence: number,
        ///         createdBy: string,
        ///         description: string,
        ///         displayText: string,
        ///         expression: string,
        ///         relationGuid: string,
        ///         source: string,
        ///         status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///         steward: string,
        ///         termGuid: string
        ///       }
        ///     ],
        ///     provenanceType: number,
        ///     proxy: boolean,
        ///     relationshipAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///     status: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///     updateTime: number,
        ///     updatedBy: string,
        ///     version: number,
        ///     source: string,
        ///     sourceDetails: Dictionary&lt;string, AnyObject&gt;,
        ///     contacts: Dictionary&lt;string, ContactBasic[]&gt;
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;,
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;,
        ///   partialUpdatedEntities: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       classificationNames: [string],
        ///       classifications: [
        ///         {
        ///           attributes: Dictionary&lt;string, AnyObject&gt;,
        ///           typeName: string,
        ///           lastModifiedTS: string,
        ///           entityGuid: string,
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///           removePropagationsOnEntityDelete: boolean,
        ///           validityPeriods: [
        ///             {
        ///               endTime: string,
        ///               startTime: string,
        ///               timeZone: string
        ///             }
        ///           ],
        ///           source: string,
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///         }
        ///       ],
        ///       displayText: string,
        ///       guid: string,
        ///       meaningNames: [string],
        ///       meanings: [
        ///         {
        ///           confidence: number,
        ///           createdBy: string,
        ///           description: string,
        ///           displayText: string,
        ///           expression: string,
        ///           relationGuid: string,
        ///           source: string,
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///           steward: string,
        ///           termGuid: string
        ///         }
        ///       ],
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response PartialUpdateEntityByUniqueAttributes(string typeName, RequestContent content, string attrQualifiedName = null, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(typeName, nameof(typeName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.PartialUpdateEntityByUniqueAttributes");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePartialUpdateEntityByUniqueAttributesRequest(typeName, content, attrQualifiedName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete an entity identified by its type and unique attributes.
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:
        /// attr:\&lt;attrName&gt;=\&lt;attrValue&gt;.
        /// NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        /// The REST request would look something like this:
        /// DELETE /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
        /// </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="typeName"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;,
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;,
        ///   partialUpdatedEntities: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       classificationNames: [string],
        ///       classifications: [
        ///         {
        ///           attributes: Dictionary&lt;string, AnyObject&gt;,
        ///           typeName: string,
        ///           lastModifiedTS: string,
        ///           entityGuid: string,
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///           removePropagationsOnEntityDelete: boolean,
        ///           validityPeriods: [
        ///             {
        ///               endTime: string,
        ///               startTime: string,
        ///               timeZone: string
        ///             }
        ///           ],
        ///           source: string,
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///         }
        ///       ],
        ///       displayText: string,
        ///       guid: string,
        ///       meaningNames: [string],
        ///       meanings: [
        ///         {
        ///           confidence: number,
        ///           createdBy: string,
        ///           description: string,
        ///           displayText: string,
        ///           expression: string,
        ///           relationGuid: string,
        ///           source: string,
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///           steward: string,
        ///           termGuid: string
        ///         }
        ///       ],
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> DeleteByUniqueAttributeAsync(string typeName, string attrQualifiedName = null, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(typeName, nameof(typeName));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.DeleteByUniqueAttribute");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteByUniqueAttributeRequest(typeName, attrQualifiedName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete an entity identified by its type and unique attributes.
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:
        /// attr:\&lt;attrName&gt;=\&lt;attrValue&gt;.
        /// NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        /// The REST request would look something like this:
        /// DELETE /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
        /// </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="typeName"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;,
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;,
        ///   partialUpdatedEntities: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       classificationNames: [string],
        ///       classifications: [
        ///         {
        ///           attributes: Dictionary&lt;string, AnyObject&gt;,
        ///           typeName: string,
        ///           lastModifiedTS: string,
        ///           entityGuid: string,
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///           removePropagationsOnEntityDelete: boolean,
        ///           validityPeriods: [
        ///             {
        ///               endTime: string,
        ///               startTime: string,
        ///               timeZone: string
        ///             }
        ///           ],
        ///           source: string,
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///         }
        ///       ],
        ///       displayText: string,
        ///       guid: string,
        ///       meaningNames: [string],
        ///       meanings: [
        ///         {
        ///           confidence: number,
        ///           createdBy: string,
        ///           description: string,
        ///           displayText: string,
        ///           expression: string,
        ///           relationGuid: string,
        ///           source: string,
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///           steward: string,
        ///           termGuid: string
        ///         }
        ///       ],
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response DeleteByUniqueAttribute(string typeName, string attrQualifiedName = null, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(typeName, nameof(typeName));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.DeleteByUniqueAttribute");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteByUniqueAttributeRequest(typeName, attrQualifiedName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a given classification from an entity identified by its type and unique attributes. </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="classificationName"> The name of the classification. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="typeName"/> or <paramref name="classificationName"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> DeleteClassificationByUniqueAttributeAsync(string typeName, string classificationName, string attrQualifiedName = null, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(typeName, nameof(typeName));
            Argument.AssertNotNull(classificationName, nameof(classificationName));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.DeleteClassificationByUniqueAttribute");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteClassificationByUniqueAttributeRequest(typeName, classificationName, attrQualifiedName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a given classification from an entity identified by its type and unique attributes. </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="classificationName"> The name of the classification. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="typeName"/> or <paramref name="classificationName"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response DeleteClassificationByUniqueAttribute(string typeName, string classificationName, string attrQualifiedName = null, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(typeName, nameof(typeName));
            Argument.AssertNotNull(classificationName, nameof(classificationName));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.DeleteClassificationByUniqueAttribute");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteClassificationByUniqueAttributeRequest(typeName, classificationName, attrQualifiedName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add classification to the entity identified by its type and unique attributes. </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="typeName"/> or <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   attributes: Dictionary&lt;string, AnyObject&gt;,
        ///   typeName: string,
        ///   lastModifiedTS: string,
        ///   entityGuid: string,
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///   removePropagationsOnEntityDelete: boolean,
        ///   validityPeriods: [
        ///     {
        ///       endTime: string,
        ///       startTime: string,
        ///       timeZone: string
        ///     }
        ///   ],
        ///   source: string,
        ///   sourceDetails: Dictionary&lt;string, AnyObject&gt;
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> AddClassificationsByUniqueAttributeAsync(string typeName, RequestContent content, string attrQualifiedName = null, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(typeName, nameof(typeName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.AddClassificationsByUniqueAttribute");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddClassificationsByUniqueAttributeRequest(typeName, content, attrQualifiedName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add classification to the entity identified by its type and unique attributes. </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="typeName"/> or <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   attributes: Dictionary&lt;string, AnyObject&gt;,
        ///   typeName: string,
        ///   lastModifiedTS: string,
        ///   entityGuid: string,
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///   removePropagationsOnEntityDelete: boolean,
        ///   validityPeriods: [
        ///     {
        ///       endTime: string,
        ///       startTime: string,
        ///       timeZone: string
        ///     }
        ///   ],
        ///   source: string,
        ///   sourceDetails: Dictionary&lt;string, AnyObject&gt;
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response AddClassificationsByUniqueAttribute(string typeName, RequestContent content, string attrQualifiedName = null, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(typeName, nameof(typeName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.AddClassificationsByUniqueAttribute");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddClassificationsByUniqueAttributeRequest(typeName, content, attrQualifiedName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update classification on an entity identified by its type and unique attributes. </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="typeName"/> or <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   attributes: Dictionary&lt;string, AnyObject&gt;,
        ///   typeName: string,
        ///   lastModifiedTS: string,
        ///   entityGuid: string,
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///   removePropagationsOnEntityDelete: boolean,
        ///   validityPeriods: [
        ///     {
        ///       endTime: string,
        ///       startTime: string,
        ///       timeZone: string
        ///     }
        ///   ],
        ///   source: string,
        ///   sourceDetails: Dictionary&lt;string, AnyObject&gt;
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> UpdateClassificationsByUniqueAttributeAsync(string typeName, RequestContent content, string attrQualifiedName = null, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(typeName, nameof(typeName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.UpdateClassificationsByUniqueAttribute");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateClassificationsByUniqueAttributeRequest(typeName, content, attrQualifiedName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update classification on an entity identified by its type and unique attributes. </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="typeName"/> or <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   attributes: Dictionary&lt;string, AnyObject&gt;,
        ///   typeName: string,
        ///   lastModifiedTS: string,
        ///   entityGuid: string,
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///   removePropagationsOnEntityDelete: boolean,
        ///   validityPeriods: [
        ///     {
        ///       endTime: string,
        ///       startTime: string,
        ///       timeZone: string
        ///     }
        ///   ],
        ///   source: string,
        ///   sourceDetails: Dictionary&lt;string, AnyObject&gt;
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response UpdateClassificationsByUniqueAttribute(string typeName, RequestContent content, string attrQualifiedName = null, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(typeName, nameof(typeName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.UpdateClassificationsByUniqueAttribute");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateClassificationsByUniqueAttributeRequest(typeName, content, attrQualifiedName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Set classifications on entities in bulk. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   guidHeaderMap: Dictionary&lt;string, AtlasEntityHeader&gt;
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> SetClassificationsAsync(RequestContent content, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.SetClassifications");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSetClassificationsRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Set classifications on entities in bulk. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   guidHeaderMap: Dictionary&lt;string, AtlasEntityHeader&gt;
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response SetClassifications(RequestContent content, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.SetClassifications");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSetClassificationsRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Bulk API to retrieve list of entities identified by its unique attributes.
        /// 
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format
        /// 
        /// typeName=\&lt;typeName&gt;&amp;attr_1:\&lt;attrName&gt;=\&lt;attrValue&gt;&amp;attr_2:\&lt;attrName&gt;=\&lt;attrValue&gt;&amp;attr_3:\&lt;attrName&gt;=\&lt;attrValue&gt;
        /// 
        /// NOTE: The attrName should be an unique attribute for the given entity-type
        /// 
        /// The REST request would look something like this
        /// 
        /// GET /v2/entity/bulk/uniqueAttribute/type/hive_db?attr_0:qualifiedName=db1@cl1&amp;attr_2:qualifiedName=db2@cl1
        /// </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="attrNQualifiedName"> Qualified name of an entity. E.g. to find 2 entities you can set attrs_0:qualifiedName=db1@cl1&amp;attrs_2:qualifiedName=db2@cl1. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="typeName"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   referredEntities: Dictionary&lt;string, AtlasEntity&gt;,
        ///   entities: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       classifications: [
        ///         {
        ///           attributes: Dictionary&lt;string, AnyObject&gt;,
        ///           typeName: string,
        ///           lastModifiedTS: string,
        ///           entityGuid: string,
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///           removePropagationsOnEntityDelete: boolean,
        ///           validityPeriods: [
        ///             {
        ///               endTime: string,
        ///               startTime: string,
        ///               timeZone: string
        ///             }
        ///           ],
        ///           source: string,
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///         }
        ///       ],
        ///       createTime: number,
        ///       createdBy: string,
        ///       guid: string,
        ///       homeId: string,
        ///       meanings: [
        ///         {
        ///           confidence: number,
        ///           createdBy: string,
        ///           description: string,
        ///           displayText: string,
        ///           expression: string,
        ///           relationGuid: string,
        ///           source: string,
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///           steward: string,
        ///           termGuid: string
        ///         }
        ///       ],
        ///       provenanceType: number,
        ///       proxy: boolean,
        ///       relationshipAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       updateTime: number,
        ///       updatedBy: string,
        ///       version: number,
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;,
        ///       contacts: Dictionary&lt;string, ContactBasic[]&gt;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetEntitiesByUniqueAttributesAsync(string typeName, bool? minExtInfo = null, bool? ignoreRelationships = null, string attrNQualifiedName = null, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(typeName, nameof(typeName));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.GetEntitiesByUniqueAttributes");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetEntitiesByUniqueAttributesRequest(typeName, minExtInfo, ignoreRelationships, attrNQualifiedName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Bulk API to retrieve list of entities identified by its unique attributes.
        /// 
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format
        /// 
        /// typeName=\&lt;typeName&gt;&amp;attr_1:\&lt;attrName&gt;=\&lt;attrValue&gt;&amp;attr_2:\&lt;attrName&gt;=\&lt;attrValue&gt;&amp;attr_3:\&lt;attrName&gt;=\&lt;attrValue&gt;
        /// 
        /// NOTE: The attrName should be an unique attribute for the given entity-type
        /// 
        /// The REST request would look something like this
        /// 
        /// GET /v2/entity/bulk/uniqueAttribute/type/hive_db?attr_0:qualifiedName=db1@cl1&amp;attr_2:qualifiedName=db2@cl1
        /// </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="attrNQualifiedName"> Qualified name of an entity. E.g. to find 2 entities you can set attrs_0:qualifiedName=db1@cl1&amp;attrs_2:qualifiedName=db2@cl1. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="typeName"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   referredEntities: Dictionary&lt;string, AtlasEntity&gt;,
        ///   entities: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       classifications: [
        ///         {
        ///           attributes: Dictionary&lt;string, AnyObject&gt;,
        ///           typeName: string,
        ///           lastModifiedTS: string,
        ///           entityGuid: string,
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///           removePropagationsOnEntityDelete: boolean,
        ///           validityPeriods: [
        ///             {
        ///               endTime: string,
        ///               startTime: string,
        ///               timeZone: string
        ///             }
        ///           ],
        ///           source: string,
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///         }
        ///       ],
        ///       createTime: number,
        ///       createdBy: string,
        ///       guid: string,
        ///       homeId: string,
        ///       meanings: [
        ///         {
        ///           confidence: number,
        ///           createdBy: string,
        ///           description: string,
        ///           displayText: string,
        ///           expression: string,
        ///           relationGuid: string,
        ///           source: string,
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///           steward: string,
        ///           termGuid: string
        ///         }
        ///       ],
        ///       provenanceType: number,
        ///       proxy: boolean,
        ///       relationshipAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       updateTime: number,
        ///       updatedBy: string,
        ///       version: number,
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;,
        ///       contacts: Dictionary&lt;string, ContactBasic[]&gt;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response GetEntitiesByUniqueAttributes(string typeName, bool? minExtInfo = null, bool? ignoreRelationships = null, string attrNQualifiedName = null, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(typeName, nameof(typeName));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.GetEntitiesByUniqueAttributes");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetEntitiesByUniqueAttributesRequest(typeName, minExtInfo, ignoreRelationships, attrNQualifiedName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get entity header given its GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   attributes: Dictionary&lt;string, AnyObject&gt;,
        ///   typeName: string,
        ///   lastModifiedTS: string,
        ///   classificationNames: [string],
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   displayText: string,
        ///   guid: string,
        ///   meaningNames: [string],
        ///   meanings: [
        ///     {
        ///       confidence: number,
        ///       createdBy: string,
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ],
        ///   status: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetHeaderAsync(string guid, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(guid, nameof(guid));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.GetHeader");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetHeaderRequest(guid, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get entity header given its GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   attributes: Dictionary&lt;string, AnyObject&gt;,
        ///   typeName: string,
        ///   lastModifiedTS: string,
        ///   classificationNames: [string],
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   displayText: string,
        ///   guid: string,
        ///   meaningNames: [string],
        ///   meanings: [
        ///     {
        ///       confidence: number,
        ///       createdBy: string,
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ],
        ///   status: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   requestId: string,
        ///   errorCode: string,
        ///   errorMessage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response GetHeader(string guid, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(guid, nameof(guid));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.GetHeader");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetHeaderRequest(guid, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateCreateOrUpdateRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            message.ResponseClassifier = ResponseClassifier200.Instance;
            return message;
        }

        internal HttpMessage CreateGetByGuidsRequest(IEnumerable<string> guids, bool? minExtInfo, bool? ignoreRelationships, IEnumerable<string> excludeRelationshipTypes, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/bulk", false);
            foreach (var param in guids)
            {
                uri.AppendQuery("guids", param, true);
            }
            if (minExtInfo != null)
            {
                uri.AppendQuery("minExtInfo", minExtInfo.Value, true);
            }
            if (ignoreRelationships != null)
            {
                uri.AppendQuery("ignoreRelationships", ignoreRelationships.Value, true);
            }
            if (excludeRelationshipTypes != null)
            {
                foreach (var param0 in excludeRelationshipTypes)
                {
                    uri.AppendQuery("excludeRelationshipTypes", param0, true);
                }
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.ResponseClassifier = ResponseClassifier200.Instance;
            return message;
        }

        internal HttpMessage CreateCreateOrUpdateEntitiesRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/bulk", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            message.ResponseClassifier = ResponseClassifier200.Instance;
            return message;
        }

        internal HttpMessage CreateDeleteByGuidsRequest(IEnumerable<string> guids, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/bulk", false);
            foreach (var param in guids)
            {
                uri.AppendQuery("guids", param, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.ResponseClassifier = ResponseClassifier200.Instance;
            return message;
        }

        internal HttpMessage CreateAddClassificationRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/bulk/classification", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            message.ResponseClassifier = ResponseClassifier204.Instance;
            return message;
        }

        internal HttpMessage CreateGetByGuidRequest(string guid, bool? minExtInfo, bool? ignoreRelationships, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            if (minExtInfo != null)
            {
                uri.AppendQuery("minExtInfo", minExtInfo.Value, true);
            }
            if (ignoreRelationships != null)
            {
                uri.AppendQuery("ignoreRelationships", ignoreRelationships.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.ResponseClassifier = ResponseClassifier200.Instance;
            return message;
        }

        internal HttpMessage CreatePartialUpdateEntityAttributeByGuidRequest(string guid, string name, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            uri.AppendQuery("name", name, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            message.ResponseClassifier = ResponseClassifier200.Instance;
            return message;
        }

        internal HttpMessage CreateDeleteByGuidRequest(string guid, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.ResponseClassifier = ResponseClassifier200.Instance;
            return message;
        }

        internal HttpMessage CreateGetClassificationRequest(string guid, string classificationName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            uri.AppendPath("/classification/", false);
            uri.AppendPath(classificationName, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.ResponseClassifier = ResponseClassifier200.Instance;
            return message;
        }

        internal HttpMessage CreateDeleteClassificationRequest(string guid, string classificationName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            uri.AppendPath("/classification/", false);
            uri.AppendPath(classificationName, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.ResponseClassifier = ResponseClassifier204.Instance;
            return message;
        }

        internal HttpMessage CreateGetClassificationsRequest(string guid, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            uri.AppendPath("/classifications", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.ResponseClassifier = ResponseClassifier200.Instance;
            return message;
        }

        internal HttpMessage CreateAddClassificationsRequest(string guid, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            uri.AppendPath("/classifications", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            message.ResponseClassifier = ResponseClassifier204.Instance;
            return message;
        }

        internal HttpMessage CreateUpdateClassificationsRequest(string guid, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            uri.AppendPath("/classifications", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            message.ResponseClassifier = ResponseClassifier204.Instance;
            return message;
        }

        internal HttpMessage CreateGetByUniqueAttributesRequest(string typeName, bool? minExtInfo, bool? ignoreRelationships, string attrQualifiedName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/uniqueAttribute/type/", false);
            uri.AppendPath(typeName, true);
            if (minExtInfo != null)
            {
                uri.AppendQuery("minExtInfo", minExtInfo.Value, true);
            }
            if (ignoreRelationships != null)
            {
                uri.AppendQuery("ignoreRelationships", ignoreRelationships.Value, true);
            }
            if (attrQualifiedName != null)
            {
                uri.AppendQuery("attr:qualifiedName", attrQualifiedName, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.ResponseClassifier = ResponseClassifier200.Instance;
            return message;
        }

        internal HttpMessage CreatePartialUpdateEntityByUniqueAttributesRequest(string typeName, RequestContent content, string attrQualifiedName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/uniqueAttribute/type/", false);
            uri.AppendPath(typeName, true);
            if (attrQualifiedName != null)
            {
                uri.AppendQuery("attr:qualifiedName", attrQualifiedName, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            message.ResponseClassifier = ResponseClassifier200.Instance;
            return message;
        }

        internal HttpMessage CreateDeleteByUniqueAttributeRequest(string typeName, string attrQualifiedName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/uniqueAttribute/type/", false);
            uri.AppendPath(typeName, true);
            if (attrQualifiedName != null)
            {
                uri.AppendQuery("attr:qualifiedName", attrQualifiedName, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.ResponseClassifier = ResponseClassifier200.Instance;
            return message;
        }

        internal HttpMessage CreateDeleteClassificationByUniqueAttributeRequest(string typeName, string classificationName, string attrQualifiedName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/uniqueAttribute/type/", false);
            uri.AppendPath(typeName, true);
            uri.AppendPath("/classification/", false);
            uri.AppendPath(classificationName, true);
            if (attrQualifiedName != null)
            {
                uri.AppendQuery("attr:qualifiedName", attrQualifiedName, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.ResponseClassifier = ResponseClassifier204.Instance;
            return message;
        }

        internal HttpMessage CreateAddClassificationsByUniqueAttributeRequest(string typeName, RequestContent content, string attrQualifiedName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/uniqueAttribute/type/", false);
            uri.AppendPath(typeName, true);
            uri.AppendPath("/classifications", false);
            if (attrQualifiedName != null)
            {
                uri.AppendQuery("attr:qualifiedName", attrQualifiedName, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            message.ResponseClassifier = ResponseClassifier204.Instance;
            return message;
        }

        internal HttpMessage CreateUpdateClassificationsByUniqueAttributeRequest(string typeName, RequestContent content, string attrQualifiedName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/uniqueAttribute/type/", false);
            uri.AppendPath(typeName, true);
            uri.AppendPath("/classifications", false);
            if (attrQualifiedName != null)
            {
                uri.AppendQuery("attr:qualifiedName", attrQualifiedName, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            message.ResponseClassifier = ResponseClassifier204.Instance;
            return message;
        }

        internal HttpMessage CreateSetClassificationsRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/bulk/setClassifications", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            message.ResponseClassifier = ResponseClassifier200.Instance;
            return message;
        }

        internal HttpMessage CreateGetEntitiesByUniqueAttributesRequest(string typeName, bool? minExtInfo, bool? ignoreRelationships, string attrNQualifiedName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/bulk/uniqueAttribute/type/", false);
            uri.AppendPath(typeName, true);
            if (minExtInfo != null)
            {
                uri.AppendQuery("minExtInfo", minExtInfo.Value, true);
            }
            if (ignoreRelationships != null)
            {
                uri.AppendQuery("ignoreRelationships", ignoreRelationships.Value, true);
            }
            if (attrNQualifiedName != null)
            {
                uri.AppendQuery("attr_N:qualifiedName", attrNQualifiedName, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.ResponseClassifier = ResponseClassifier200.Instance;
            return message;
        }

        internal HttpMessage CreateGetHeaderRequest(string guid, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            uri.AppendPath("/header", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.ResponseClassifier = ResponseClassifier200.Instance;
            return message;
        }

        private sealed class ResponseClassifier200 : ResponseClassifier
        {
            private static ResponseClassifier _instance;
            public static ResponseClassifier Instance => _instance ??= new ResponseClassifier200();
            public override bool IsErrorResponse(HttpMessage message)
            {
                return message.Response.Status switch
                {
                    200 => false,
                    _ => true
                };
            }
        }
        private sealed class ResponseClassifier204 : ResponseClassifier
        {
            private static ResponseClassifier _instance;
            public static ResponseClassifier Instance => _instance ??= new ResponseClassifier204();
            public override bool IsErrorResponse(HttpMessage message)
            {
                return message.Response.Status switch
                {
                    204 => false,
                    _ => true
                };
            }
        }
    }
}
