// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Purview.Catalog
{
    // Data plane generated sub-client. The PurviewEntities sub-client.
    /// <summary> The PurviewEntities sub-client. </summary>
    public partial class PurviewEntities
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://purview.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of PurviewEntities for mocking. </summary>
        protected PurviewEntities()
        {
        }

        /// <summary> Initializes a new instance of PurviewEntities. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="tokenCredential"> The token credential to copy. </param>
        /// <param name="endpoint"> The catalog endpoint of your Purview account. Example: https://{accountName}.purview.azure.com. </param>
        internal PurviewEntities(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, TokenCredential tokenCredential, Uri endpoint)
        {
            ClientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _tokenCredential = tokenCredential;
            _endpoint = endpoint;
        }

        /// <summary>
        /// Create or update an entity in Atlas.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateOrUpdateAsync and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.CreateOrUpdateAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateOrUpdateAsync with all request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new {
        ///     entity = new {
        ///         businessAttributes = new {
        ///             key = new {},
        ///         },
        ///         classifications = new[] {
        ///             new {
        ///                 entityGuid = "<entityGuid>",
        ///                 entityStatus = "ACTIVE",
        ///                 removePropagationsOnEntityDelete = true,
        ///                 validityPeriods = new[] {
        ///                     new {
        ///                         endTime = "<endTime>",
        ///                         startTime = "<startTime>",
        ///                         timeZone = "<timeZone>",
        ///                     }
        ///                 },
        ///                 source = "<source>",
        ///                 sourceDetails = new {
        ///                     key = new {},
        ///                 },
        ///                 attributes = new {
        ///                     key = new {},
        ///                 },
        ///                 typeName = "<typeName>",
        ///                 lastModifiedTS = "<lastModifiedTS>",
        ///             }
        ///         },
        ///         createTime = 123.45f,
        ///         createdBy = "<createdBy>",
        ///         customAttributes = new {
        ///             key = "<String>",
        ///         },
        ///         guid = "<guid>",
        ///         homeId = "<homeId>",
        ///         isIncomplete = true,
        ///         labels = new[] {
        ///             "<String>"
        ///         },
        ///         meanings = new[] {
        ///             new {
        ///                 confidence = 1234,
        ///                 createdBy = "<createdBy>",
        ///                 description = "<description>",
        ///                 displayText = "<displayText>",
        ///                 expression = "<expression>",
        ///                 relationGuid = "<relationGuid>",
        ///                 source = "<source>",
        ///                 status = "DISCOVERED",
        ///                 steward = "<steward>",
        ///                 termGuid = "<termGuid>",
        ///             }
        ///         },
        ///         provenanceType = 123.45f,
        ///         proxy = true,
        ///         relationshipAttributes = new {
        ///             key = new {},
        ///         },
        ///         status = "ACTIVE",
        ///         updateTime = 123.45f,
        ///         updatedBy = "<updatedBy>",
        ///         version = 123.45f,
        ///         source = "<source>",
        ///         sourceDetails = new {
        ///             key = new {},
        ///         },
        ///         contacts = new {
        ///             key = new[] {
        ///                 new {
        ///                     id = "<id>",
        ///                     info = "<info>",
        ///                 }
        ///             },
        ///         },
        ///         attributes = new {
        ///             key = new {},
        ///         },
        ///         typeName = "<typeName>",
        ///         lastModifiedTS = "<lastModifiedTS>",
        ///     },
        ///     referredEntities = new {
        ///         key = new {
        ///             businessAttributes = new {
        ///                 key = new {},
        ///             },
        ///             classifications = new[] {
        ///                 new {
        ///                     entityGuid = "<entityGuid>",
        ///                     entityStatus = "ACTIVE",
        ///                     removePropagationsOnEntityDelete = true,
        ///                     validityPeriods = new[] {
        ///                         new {
        ///                             endTime = "<endTime>",
        ///                             startTime = "<startTime>",
        ///                             timeZone = "<timeZone>",
        ///                         }
        ///                     },
        ///                     source = "<source>",
        ///                     sourceDetails = new {
        ///                         key = new {},
        ///                     },
        ///                     attributes = new {
        ///                         key = new {},
        ///                     },
        ///                     typeName = "<typeName>",
        ///                     lastModifiedTS = "<lastModifiedTS>",
        ///                 }
        ///             },
        ///             createTime = 123.45f,
        ///             createdBy = "<createdBy>",
        ///             customAttributes = new {
        ///                 key = "<String>",
        ///             },
        ///             guid = "<guid>",
        ///             homeId = "<homeId>",
        ///             isIncomplete = true,
        ///             labels = new[] {
        ///                 "<String>"
        ///             },
        ///             meanings = new[] {
        ///                 new {
        ///                     confidence = 1234,
        ///                     createdBy = "<createdBy>",
        ///                     description = "<description>",
        ///                     displayText = "<displayText>",
        ///                     expression = "<expression>",
        ///                     relationGuid = "<relationGuid>",
        ///                     source = "<source>",
        ///                     status = "DISCOVERED",
        ///                     steward = "<steward>",
        ///                     termGuid = "<termGuid>",
        ///                 }
        ///             },
        ///             provenanceType = 123.45f,
        ///             proxy = true,
        ///             relationshipAttributes = new {
        ///                 key = new {},
        ///             },
        ///             status = "ACTIVE",
        ///             updateTime = 123.45f,
        ///             updatedBy = "<updatedBy>",
        ///             version = 123.45f,
        ///             source = "<source>",
        ///             sourceDetails = new {
        ///                 key = new {},
        ///             },
        ///             contacts = new {
        ///                 key = new[] {
        ///                     new {
        ///                         id = "<id>",
        ///                         info = "<info>",
        ///                     }
        ///                 },
        ///             },
        ///             attributes = new {
        ///                 key = new {},
        ///             },
        ///             typeName = "<typeName>",
        ///             lastModifiedTS = "<lastModifiedTS>",
        ///         },
        ///     },
        /// };
        /// 
        /// Response response = await client.CreateOrUpdateAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("guidAssignments").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("lastModifiedTS").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AtlasEntityWithExtInfo</c>:
        /// <code>{
        ///   entity: {
        ///     businessAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. Business Attributes
        ///     classifications: [
        ///       {
        ///         entityGuid: string, # Optional. The GUID of the entity.
        ///         entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///         removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///         validityPeriods: [
        ///           {
        ///             endTime: string, # Optional. The end of the time boundary.
        ///             startTime: string, # Optional. The start of the time boundary.
        ///             timeZone: string, # Optional. The timezone of the time boundary.
        ///           }
        ///         ], # Optional. An array of time boundaries indicating validity periods.
        ///         source: string, # Optional. indicate the source who create the classification detail
        ///         sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///         typeName: string, # Optional. The name of the type.
        ///         lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       }
        ///     ], # Optional. An array of classifications.
        ///     createTime: number, # Optional. The created time of the record.
        ///     createdBy: string, # Optional. The user who created the record.
        ///     customAttributes: Dictionary&lt;string, string&gt;, # Optional. Custom Attribute
        ///     guid: string, # Optional. The GUID of the entity.
        ///     homeId: string, # Optional. The home ID of the entity.
        ///     isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///     labels: [string], # Optional. labels
        ///     meanings: [
        ///       {
        ///         confidence: number, # Optional. The confidence of the term assignment.
        ///         createdBy: string, # Optional. The user who created the record.
        ///         description: string, # Optional. The description of the term assignment.
        ///         displayText: string, # Optional. The display text.
        ///         expression: string, # Optional. The expression of the term assignment.
        ///         relationGuid: string, # Optional. The GUID of the relationship.
        ///         source: string, # Optional. The source of the term.
        ///         status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///         steward: string, # Optional. The steward of the term.
        ///         termGuid: string, # Optional. The GUID of the term.
        ///       }
        ///     ], # Optional. An array of term assignment headers indicating the meanings of the entity.
        ///     provenanceType: number, # Optional. Used to record the provenance of an instance of an entity or relationship.
        ///     proxy: boolean, # Optional. Determines if there&apos;s a proxy.
        ///     relationshipAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of relationship.
        ///     status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///     updateTime: number, # Optional. The update time of the record.
        ///     updatedBy: string, # Optional. The user who updated the record.
        ///     version: number, # Optional. The version of the entity.
        ///     source: string, # Optional. indicate the source who create the classification detail
        ///     sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Owner.
        ///     attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///     typeName: string, # Optional. The name of the type.
        ///     lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   }, # Optional. An instance of an entity - like hive_table, hive_database.
        ///   referredEntities: Dictionary&lt;string, AtlasEntity&gt;, # Optional. The referred entities.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>EntityMutationResponse</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;, # Optional. A map of GUID assignments with entities.
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;, # Optional. The entity headers of mutated entities.
        ///   partialUpdatedEntities: [
        ///     {
        ///       classificationNames: [string], # Optional. An array of classification names.
        ///       classifications: [
        ///         {
        ///           entityGuid: string, # Optional. The GUID of the entity.
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///           removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///           validityPeriods: [
        ///             {
        ///               endTime: string, # Optional. The end of the time boundary.
        ///               startTime: string, # Optional. The start of the time boundary.
        ///               timeZone: string, # Optional. The timezone of the time boundary.
        ///             }
        ///           ], # Optional. An array of time boundaries indicating validity periods.
        ///           source: string, # Optional. indicate the source who create the classification detail
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///           attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///           typeName: string, # Optional. The name of the type.
        ///           lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///         }
        ///       ], # Optional. An array of classifications.
        ///       displayText: string, # Optional. The display text.
        ///       guid: string, # Optional. The GUID of the record.
        ///       isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///       labels: [string], # Optional. labels
        ///       meaningNames: [string], # Optional. An array of meanings.
        ///       meanings: [
        ///         {
        ///           confidence: number, # Optional. The confidence of the term assignment.
        ///           createdBy: string, # Optional. The user who created the record.
        ///           description: string, # Optional. The description of the term assignment.
        ///           displayText: string, # Optional. The display text.
        ///           expression: string, # Optional. The expression of the term assignment.
        ///           relationGuid: string, # Optional. The GUID of the relationship.
        ///           source: string, # Optional. The source of the term.
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///           steward: string, # Optional. The steward of the term.
        ///           termGuid: string, # Optional. The GUID of the term.
        ///         }
        ///       ], # Optional. An array of term assignment headers.
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///     }
        ///   ], # Optional. An array of entity headers that partially updated.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateOrUpdateAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update an entity in Atlas.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateOrUpdate and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.CreateOrUpdate(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateOrUpdate with all request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new {
        ///     entity = new {
        ///         businessAttributes = new {
        ///             key = new {},
        ///         },
        ///         classifications = new[] {
        ///             new {
        ///                 entityGuid = "<entityGuid>",
        ///                 entityStatus = "ACTIVE",
        ///                 removePropagationsOnEntityDelete = true,
        ///                 validityPeriods = new[] {
        ///                     new {
        ///                         endTime = "<endTime>",
        ///                         startTime = "<startTime>",
        ///                         timeZone = "<timeZone>",
        ///                     }
        ///                 },
        ///                 source = "<source>",
        ///                 sourceDetails = new {
        ///                     key = new {},
        ///                 },
        ///                 attributes = new {
        ///                     key = new {},
        ///                 },
        ///                 typeName = "<typeName>",
        ///                 lastModifiedTS = "<lastModifiedTS>",
        ///             }
        ///         },
        ///         createTime = 123.45f,
        ///         createdBy = "<createdBy>",
        ///         customAttributes = new {
        ///             key = "<String>",
        ///         },
        ///         guid = "<guid>",
        ///         homeId = "<homeId>",
        ///         isIncomplete = true,
        ///         labels = new[] {
        ///             "<String>"
        ///         },
        ///         meanings = new[] {
        ///             new {
        ///                 confidence = 1234,
        ///                 createdBy = "<createdBy>",
        ///                 description = "<description>",
        ///                 displayText = "<displayText>",
        ///                 expression = "<expression>",
        ///                 relationGuid = "<relationGuid>",
        ///                 source = "<source>",
        ///                 status = "DISCOVERED",
        ///                 steward = "<steward>",
        ///                 termGuid = "<termGuid>",
        ///             }
        ///         },
        ///         provenanceType = 123.45f,
        ///         proxy = true,
        ///         relationshipAttributes = new {
        ///             key = new {},
        ///         },
        ///         status = "ACTIVE",
        ///         updateTime = 123.45f,
        ///         updatedBy = "<updatedBy>",
        ///         version = 123.45f,
        ///         source = "<source>",
        ///         sourceDetails = new {
        ///             key = new {},
        ///         },
        ///         contacts = new {
        ///             key = new[] {
        ///                 new {
        ///                     id = "<id>",
        ///                     info = "<info>",
        ///                 }
        ///             },
        ///         },
        ///         attributes = new {
        ///             key = new {},
        ///         },
        ///         typeName = "<typeName>",
        ///         lastModifiedTS = "<lastModifiedTS>",
        ///     },
        ///     referredEntities = new {
        ///         key = new {
        ///             businessAttributes = new {
        ///                 key = new {},
        ///             },
        ///             classifications = new[] {
        ///                 new {
        ///                     entityGuid = "<entityGuid>",
        ///                     entityStatus = "ACTIVE",
        ///                     removePropagationsOnEntityDelete = true,
        ///                     validityPeriods = new[] {
        ///                         new {
        ///                             endTime = "<endTime>",
        ///                             startTime = "<startTime>",
        ///                             timeZone = "<timeZone>",
        ///                         }
        ///                     },
        ///                     source = "<source>",
        ///                     sourceDetails = new {
        ///                         key = new {},
        ///                     },
        ///                     attributes = new {
        ///                         key = new {},
        ///                     },
        ///                     typeName = "<typeName>",
        ///                     lastModifiedTS = "<lastModifiedTS>",
        ///                 }
        ///             },
        ///             createTime = 123.45f,
        ///             createdBy = "<createdBy>",
        ///             customAttributes = new {
        ///                 key = "<String>",
        ///             },
        ///             guid = "<guid>",
        ///             homeId = "<homeId>",
        ///             isIncomplete = true,
        ///             labels = new[] {
        ///                 "<String>"
        ///             },
        ///             meanings = new[] {
        ///                 new {
        ///                     confidence = 1234,
        ///                     createdBy = "<createdBy>",
        ///                     description = "<description>",
        ///                     displayText = "<displayText>",
        ///                     expression = "<expression>",
        ///                     relationGuid = "<relationGuid>",
        ///                     source = "<source>",
        ///                     status = "DISCOVERED",
        ///                     steward = "<steward>",
        ///                     termGuid = "<termGuid>",
        ///                 }
        ///             },
        ///             provenanceType = 123.45f,
        ///             proxy = true,
        ///             relationshipAttributes = new {
        ///                 key = new {},
        ///             },
        ///             status = "ACTIVE",
        ///             updateTime = 123.45f,
        ///             updatedBy = "<updatedBy>",
        ///             version = 123.45f,
        ///             source = "<source>",
        ///             sourceDetails = new {
        ///                 key = new {},
        ///             },
        ///             contacts = new {
        ///                 key = new[] {
        ///                     new {
        ///                         id = "<id>",
        ///                         info = "<info>",
        ///                     }
        ///                 },
        ///             },
        ///             attributes = new {
        ///                 key = new {},
        ///             },
        ///             typeName = "<typeName>",
        ///             lastModifiedTS = "<lastModifiedTS>",
        ///         },
        ///     },
        /// };
        /// 
        /// Response response = client.CreateOrUpdate(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("guidAssignments").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("lastModifiedTS").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AtlasEntityWithExtInfo</c>:
        /// <code>{
        ///   entity: {
        ///     businessAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. Business Attributes
        ///     classifications: [
        ///       {
        ///         entityGuid: string, # Optional. The GUID of the entity.
        ///         entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///         removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///         validityPeriods: [
        ///           {
        ///             endTime: string, # Optional. The end of the time boundary.
        ///             startTime: string, # Optional. The start of the time boundary.
        ///             timeZone: string, # Optional. The timezone of the time boundary.
        ///           }
        ///         ], # Optional. An array of time boundaries indicating validity periods.
        ///         source: string, # Optional. indicate the source who create the classification detail
        ///         sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///         typeName: string, # Optional. The name of the type.
        ///         lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       }
        ///     ], # Optional. An array of classifications.
        ///     createTime: number, # Optional. The created time of the record.
        ///     createdBy: string, # Optional. The user who created the record.
        ///     customAttributes: Dictionary&lt;string, string&gt;, # Optional. Custom Attribute
        ///     guid: string, # Optional. The GUID of the entity.
        ///     homeId: string, # Optional. The home ID of the entity.
        ///     isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///     labels: [string], # Optional. labels
        ///     meanings: [
        ///       {
        ///         confidence: number, # Optional. The confidence of the term assignment.
        ///         createdBy: string, # Optional. The user who created the record.
        ///         description: string, # Optional. The description of the term assignment.
        ///         displayText: string, # Optional. The display text.
        ///         expression: string, # Optional. The expression of the term assignment.
        ///         relationGuid: string, # Optional. The GUID of the relationship.
        ///         source: string, # Optional. The source of the term.
        ///         status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///         steward: string, # Optional. The steward of the term.
        ///         termGuid: string, # Optional. The GUID of the term.
        ///       }
        ///     ], # Optional. An array of term assignment headers indicating the meanings of the entity.
        ///     provenanceType: number, # Optional. Used to record the provenance of an instance of an entity or relationship.
        ///     proxy: boolean, # Optional. Determines if there&apos;s a proxy.
        ///     relationshipAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of relationship.
        ///     status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///     updateTime: number, # Optional. The update time of the record.
        ///     updatedBy: string, # Optional. The user who updated the record.
        ///     version: number, # Optional. The version of the entity.
        ///     source: string, # Optional. indicate the source who create the classification detail
        ///     sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Owner.
        ///     attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///     typeName: string, # Optional. The name of the type.
        ///     lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   }, # Optional. An instance of an entity - like hive_table, hive_database.
        ///   referredEntities: Dictionary&lt;string, AtlasEntity&gt;, # Optional. The referred entities.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>EntityMutationResponse</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;, # Optional. A map of GUID assignments with entities.
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;, # Optional. The entity headers of mutated entities.
        ///   partialUpdatedEntities: [
        ///     {
        ///       classificationNames: [string], # Optional. An array of classification names.
        ///       classifications: [
        ///         {
        ///           entityGuid: string, # Optional. The GUID of the entity.
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///           removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///           validityPeriods: [
        ///             {
        ///               endTime: string, # Optional. The end of the time boundary.
        ///               startTime: string, # Optional. The start of the time boundary.
        ///               timeZone: string, # Optional. The timezone of the time boundary.
        ///             }
        ///           ], # Optional. An array of time boundaries indicating validity periods.
        ///           source: string, # Optional. indicate the source who create the classification detail
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///           attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///           typeName: string, # Optional. The name of the type.
        ///           lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///         }
        ///       ], # Optional. An array of classifications.
        ///       displayText: string, # Optional. The display text.
        ///       guid: string, # Optional. The GUID of the record.
        ///       isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///       labels: [string], # Optional. labels
        ///       meaningNames: [string], # Optional. An array of meanings.
        ///       meanings: [
        ///         {
        ///           confidence: number, # Optional. The confidence of the term assignment.
        ///           createdBy: string, # Optional. The user who created the record.
        ///           description: string, # Optional. The description of the term assignment.
        ///           displayText: string, # Optional. The display text.
        ///           expression: string, # Optional. The expression of the term assignment.
        ///           relationGuid: string, # Optional. The GUID of the relationship.
        ///           source: string, # Optional. The source of the term.
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///           steward: string, # Optional. The steward of the term.
        ///           termGuid: string, # Optional. The GUID of the term.
        ///         }
        ///       ], # Optional. An array of term assignment headers.
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///     }
        ///   ], # Optional. An array of entity headers that partially updated.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateOrUpdate(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List entities in bulk identified by its GUIDs. </summary>
        /// <param name="guids"> An array of GUIDs of entities to list. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="excludeRelationshipTypes"> An array of the relationship types need to be excluded from the response. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guids"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetByGuidsAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// Response response = await client.GetByGuidsAsync(new String[]{"<guids>"});
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call GetByGuidsAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// Response response = await client.GetByGuidsAsync(new String[]{"<guids>"}, true, true, new String[]{"<excludeRelationshipTypes>"});
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("businessAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("createTime").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("customAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("homeId").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("provenanceType").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("proxy").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("relationshipAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("updateTime").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("updatedBy").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("version").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("businessAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("createTime").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("customAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("homeId").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("provenanceType").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("proxy").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("relationshipAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("updateTime").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("updatedBy").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("version").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("lastModifiedTS").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AtlasEntitiesWithExtInfo</c>:
        /// <code>{
        ///   entities: [
        ///     {
        ///       businessAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. Business Attributes
        ///       classifications: [
        ///         {
        ///           entityGuid: string, # Optional. The GUID of the entity.
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///           removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///           validityPeriods: [
        ///             {
        ///               endTime: string, # Optional. The end of the time boundary.
        ///               startTime: string, # Optional. The start of the time boundary.
        ///               timeZone: string, # Optional. The timezone of the time boundary.
        ///             }
        ///           ], # Optional. An array of time boundaries indicating validity periods.
        ///           source: string, # Optional. indicate the source who create the classification detail
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///           attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///           typeName: string, # Optional. The name of the type.
        ///           lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///         }
        ///       ], # Optional. An array of classifications.
        ///       createTime: number, # Optional. The created time of the record.
        ///       createdBy: string, # Optional. The user who created the record.
        ///       customAttributes: Dictionary&lt;string, string&gt;, # Optional. Custom Attribute
        ///       guid: string, # Optional. The GUID of the entity.
        ///       homeId: string, # Optional. The home ID of the entity.
        ///       isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///       labels: [string], # Optional. labels
        ///       meanings: [
        ///         {
        ///           confidence: number, # Optional. The confidence of the term assignment.
        ///           createdBy: string, # Optional. The user who created the record.
        ///           description: string, # Optional. The description of the term assignment.
        ///           displayText: string, # Optional. The display text.
        ///           expression: string, # Optional. The expression of the term assignment.
        ///           relationGuid: string, # Optional. The GUID of the relationship.
        ///           source: string, # Optional. The source of the term.
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///           steward: string, # Optional. The steward of the term.
        ///           termGuid: string, # Optional. The GUID of the term.
        ///         }
        ///       ], # Optional. An array of term assignment headers indicating the meanings of the entity.
        ///       provenanceType: number, # Optional. Used to record the provenance of an instance of an entity or relationship.
        ///       proxy: boolean, # Optional. Determines if there&apos;s a proxy.
        ///       relationshipAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of relationship.
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       updateTime: number, # Optional. The update time of the record.
        ///       updatedBy: string, # Optional. The user who updated the record.
        ///       version: number, # Optional. The version of the entity.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///       contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Owner.
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///     }
        ///   ], # Optional. An array of entities.
        ///   referredEntities: Dictionary&lt;string, AtlasEntity&gt;, # Optional. The referred entities.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetByGuidsAsync(IEnumerable<string> guids, bool? minExtInfo = null, bool? ignoreRelationships = null, IEnumerable<string> excludeRelationshipTypes = null, RequestContext context = null)
        {
            Argument.AssertNotNull(guids, nameof(guids));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.GetByGuids");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetByGuidsRequest(guids, minExtInfo, ignoreRelationships, excludeRelationshipTypes, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List entities in bulk identified by its GUIDs. </summary>
        /// <param name="guids"> An array of GUIDs of entities to list. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="excludeRelationshipTypes"> An array of the relationship types need to be excluded from the response. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guids"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetByGuids with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// Response response = client.GetByGuids(new String[]{"<guids>"});
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call GetByGuids with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// Response response = client.GetByGuids(new String[]{"<guids>"}, true, true, new String[]{"<excludeRelationshipTypes>"});
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("businessAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("createTime").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("customAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("homeId").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("provenanceType").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("proxy").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("relationshipAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("updateTime").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("updatedBy").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("version").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("businessAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("createTime").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("customAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("homeId").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("provenanceType").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("proxy").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("relationshipAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("updateTime").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("updatedBy").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("version").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("lastModifiedTS").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AtlasEntitiesWithExtInfo</c>:
        /// <code>{
        ///   entities: [
        ///     {
        ///       businessAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. Business Attributes
        ///       classifications: [
        ///         {
        ///           entityGuid: string, # Optional. The GUID of the entity.
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///           removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///           validityPeriods: [
        ///             {
        ///               endTime: string, # Optional. The end of the time boundary.
        ///               startTime: string, # Optional. The start of the time boundary.
        ///               timeZone: string, # Optional. The timezone of the time boundary.
        ///             }
        ///           ], # Optional. An array of time boundaries indicating validity periods.
        ///           source: string, # Optional. indicate the source who create the classification detail
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///           attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///           typeName: string, # Optional. The name of the type.
        ///           lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///         }
        ///       ], # Optional. An array of classifications.
        ///       createTime: number, # Optional. The created time of the record.
        ///       createdBy: string, # Optional. The user who created the record.
        ///       customAttributes: Dictionary&lt;string, string&gt;, # Optional. Custom Attribute
        ///       guid: string, # Optional. The GUID of the entity.
        ///       homeId: string, # Optional. The home ID of the entity.
        ///       isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///       labels: [string], # Optional. labels
        ///       meanings: [
        ///         {
        ///           confidence: number, # Optional. The confidence of the term assignment.
        ///           createdBy: string, # Optional. The user who created the record.
        ///           description: string, # Optional. The description of the term assignment.
        ///           displayText: string, # Optional. The display text.
        ///           expression: string, # Optional. The expression of the term assignment.
        ///           relationGuid: string, # Optional. The GUID of the relationship.
        ///           source: string, # Optional. The source of the term.
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///           steward: string, # Optional. The steward of the term.
        ///           termGuid: string, # Optional. The GUID of the term.
        ///         }
        ///       ], # Optional. An array of term assignment headers indicating the meanings of the entity.
        ///       provenanceType: number, # Optional. Used to record the provenance of an instance of an entity or relationship.
        ///       proxy: boolean, # Optional. Determines if there&apos;s a proxy.
        ///       relationshipAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of relationship.
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       updateTime: number, # Optional. The update time of the record.
        ///       updatedBy: string, # Optional. The user who updated the record.
        ///       version: number, # Optional. The version of the entity.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///       contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Owner.
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///     }
        ///   ], # Optional. An array of entities.
        ///   referredEntities: Dictionary&lt;string, AtlasEntity&gt;, # Optional. The referred entities.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetByGuids(IEnumerable<string> guids, bool? minExtInfo = null, bool? ignoreRelationships = null, IEnumerable<string> excludeRelationshipTypes = null, RequestContext context = null)
        {
            Argument.AssertNotNull(guids, nameof(guids));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.GetByGuids");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetByGuidsRequest(guids, minExtInfo, ignoreRelationships, excludeRelationshipTypes, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update entities in Atlas in bulk.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateOrUpdateEntitiesAsync and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.CreateOrUpdateEntitiesAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateOrUpdateEntitiesAsync with all request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new {
        ///     entities = new[] {
        ///         new {
        ///             businessAttributes = new {
        ///                 key = new {},
        ///             },
        ///             classifications = new[] {
        ///                 new {
        ///                     entityGuid = "<entityGuid>",
        ///                     entityStatus = "ACTIVE",
        ///                     removePropagationsOnEntityDelete = true,
        ///                     validityPeriods = new[] {
        ///                         new {
        ///                             endTime = "<endTime>",
        ///                             startTime = "<startTime>",
        ///                             timeZone = "<timeZone>",
        ///                         }
        ///                     },
        ///                     source = "<source>",
        ///                     sourceDetails = new {
        ///                         key = new {},
        ///                     },
        ///                     attributes = new {
        ///                         key = new {},
        ///                     },
        ///                     typeName = "<typeName>",
        ///                     lastModifiedTS = "<lastModifiedTS>",
        ///                 }
        ///             },
        ///             createTime = 123.45f,
        ///             createdBy = "<createdBy>",
        ///             customAttributes = new {
        ///                 key = "<String>",
        ///             },
        ///             guid = "<guid>",
        ///             homeId = "<homeId>",
        ///             isIncomplete = true,
        ///             labels = new[] {
        ///                 "<String>"
        ///             },
        ///             meanings = new[] {
        ///                 new {
        ///                     confidence = 1234,
        ///                     createdBy = "<createdBy>",
        ///                     description = "<description>",
        ///                     displayText = "<displayText>",
        ///                     expression = "<expression>",
        ///                     relationGuid = "<relationGuid>",
        ///                     source = "<source>",
        ///                     status = "DISCOVERED",
        ///                     steward = "<steward>",
        ///                     termGuid = "<termGuid>",
        ///                 }
        ///             },
        ///             provenanceType = 123.45f,
        ///             proxy = true,
        ///             relationshipAttributes = new {
        ///                 key = new {},
        ///             },
        ///             status = "ACTIVE",
        ///             updateTime = 123.45f,
        ///             updatedBy = "<updatedBy>",
        ///             version = 123.45f,
        ///             source = "<source>",
        ///             sourceDetails = new {
        ///                 key = new {},
        ///             },
        ///             contacts = new {
        ///                 key = new[] {
        ///                     new {
        ///                         id = "<id>",
        ///                         info = "<info>",
        ///                     }
        ///                 },
        ///             },
        ///             attributes = new {
        ///                 key = new {},
        ///             },
        ///             typeName = "<typeName>",
        ///             lastModifiedTS = "<lastModifiedTS>",
        ///         }
        ///     },
        ///     referredEntities = new {
        ///         key = new {
        ///             businessAttributes = new {
        ///                 key = new {},
        ///             },
        ///             classifications = new[] {
        ///                 new {
        ///                     entityGuid = "<entityGuid>",
        ///                     entityStatus = "ACTIVE",
        ///                     removePropagationsOnEntityDelete = true,
        ///                     validityPeriods = new[] {
        ///                         new {
        ///                             endTime = "<endTime>",
        ///                             startTime = "<startTime>",
        ///                             timeZone = "<timeZone>",
        ///                         }
        ///                     },
        ///                     source = "<source>",
        ///                     sourceDetails = new {
        ///                         key = new {},
        ///                     },
        ///                     attributes = new {
        ///                         key = new {},
        ///                     },
        ///                     typeName = "<typeName>",
        ///                     lastModifiedTS = "<lastModifiedTS>",
        ///                 }
        ///             },
        ///             createTime = 123.45f,
        ///             createdBy = "<createdBy>",
        ///             customAttributes = new {
        ///                 key = "<String>",
        ///             },
        ///             guid = "<guid>",
        ///             homeId = "<homeId>",
        ///             isIncomplete = true,
        ///             labels = new[] {
        ///                 "<String>"
        ///             },
        ///             meanings = new[] {
        ///                 new {
        ///                     confidence = 1234,
        ///                     createdBy = "<createdBy>",
        ///                     description = "<description>",
        ///                     displayText = "<displayText>",
        ///                     expression = "<expression>",
        ///                     relationGuid = "<relationGuid>",
        ///                     source = "<source>",
        ///                     status = "DISCOVERED",
        ///                     steward = "<steward>",
        ///                     termGuid = "<termGuid>",
        ///                 }
        ///             },
        ///             provenanceType = 123.45f,
        ///             proxy = true,
        ///             relationshipAttributes = new {
        ///                 key = new {},
        ///             },
        ///             status = "ACTIVE",
        ///             updateTime = 123.45f,
        ///             updatedBy = "<updatedBy>",
        ///             version = 123.45f,
        ///             source = "<source>",
        ///             sourceDetails = new {
        ///                 key = new {},
        ///             },
        ///             contacts = new {
        ///                 key = new[] {
        ///                     new {
        ///                         id = "<id>",
        ///                         info = "<info>",
        ///                     }
        ///                 },
        ///             },
        ///             attributes = new {
        ///                 key = new {},
        ///             },
        ///             typeName = "<typeName>",
        ///             lastModifiedTS = "<lastModifiedTS>",
        ///         },
        ///     },
        /// };
        /// 
        /// Response response = await client.CreateOrUpdateEntitiesAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("guidAssignments").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("lastModifiedTS").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AtlasEntitiesWithExtInfo</c>:
        /// <code>{
        ///   entities: [
        ///     {
        ///       businessAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. Business Attributes
        ///       classifications: [
        ///         {
        ///           entityGuid: string, # Optional. The GUID of the entity.
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///           removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///           validityPeriods: [
        ///             {
        ///               endTime: string, # Optional. The end of the time boundary.
        ///               startTime: string, # Optional. The start of the time boundary.
        ///               timeZone: string, # Optional. The timezone of the time boundary.
        ///             }
        ///           ], # Optional. An array of time boundaries indicating validity periods.
        ///           source: string, # Optional. indicate the source who create the classification detail
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///           attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///           typeName: string, # Optional. The name of the type.
        ///           lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///         }
        ///       ], # Optional. An array of classifications.
        ///       createTime: number, # Optional. The created time of the record.
        ///       createdBy: string, # Optional. The user who created the record.
        ///       customAttributes: Dictionary&lt;string, string&gt;, # Optional. Custom Attribute
        ///       guid: string, # Optional. The GUID of the entity.
        ///       homeId: string, # Optional. The home ID of the entity.
        ///       isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///       labels: [string], # Optional. labels
        ///       meanings: [
        ///         {
        ///           confidence: number, # Optional. The confidence of the term assignment.
        ///           createdBy: string, # Optional. The user who created the record.
        ///           description: string, # Optional. The description of the term assignment.
        ///           displayText: string, # Optional. The display text.
        ///           expression: string, # Optional. The expression of the term assignment.
        ///           relationGuid: string, # Optional. The GUID of the relationship.
        ///           source: string, # Optional. The source of the term.
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///           steward: string, # Optional. The steward of the term.
        ///           termGuid: string, # Optional. The GUID of the term.
        ///         }
        ///       ], # Optional. An array of term assignment headers indicating the meanings of the entity.
        ///       provenanceType: number, # Optional. Used to record the provenance of an instance of an entity or relationship.
        ///       proxy: boolean, # Optional. Determines if there&apos;s a proxy.
        ///       relationshipAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of relationship.
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       updateTime: number, # Optional. The update time of the record.
        ///       updatedBy: string, # Optional. The user who updated the record.
        ///       version: number, # Optional. The version of the entity.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///       contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Owner.
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///     }
        ///   ], # Optional. An array of entities.
        ///   referredEntities: Dictionary&lt;string, AtlasEntity&gt;, # Optional. The referred entities.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>EntityMutationResponse</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;, # Optional. A map of GUID assignments with entities.
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;, # Optional. The entity headers of mutated entities.
        ///   partialUpdatedEntities: [
        ///     {
        ///       classificationNames: [string], # Optional. An array of classification names.
        ///       classifications: [
        ///         {
        ///           entityGuid: string, # Optional. The GUID of the entity.
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///           removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///           validityPeriods: [
        ///             {
        ///               endTime: string, # Optional. The end of the time boundary.
        ///               startTime: string, # Optional. The start of the time boundary.
        ///               timeZone: string, # Optional. The timezone of the time boundary.
        ///             }
        ///           ], # Optional. An array of time boundaries indicating validity periods.
        ///           source: string, # Optional. indicate the source who create the classification detail
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///           attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///           typeName: string, # Optional. The name of the type.
        ///           lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///         }
        ///       ], # Optional. An array of classifications.
        ///       displayText: string, # Optional. The display text.
        ///       guid: string, # Optional. The GUID of the record.
        ///       isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///       labels: [string], # Optional. labels
        ///       meaningNames: [string], # Optional. An array of meanings.
        ///       meanings: [
        ///         {
        ///           confidence: number, # Optional. The confidence of the term assignment.
        ///           createdBy: string, # Optional. The user who created the record.
        ///           description: string, # Optional. The description of the term assignment.
        ///           displayText: string, # Optional. The display text.
        ///           expression: string, # Optional. The expression of the term assignment.
        ///           relationGuid: string, # Optional. The GUID of the relationship.
        ///           source: string, # Optional. The source of the term.
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///           steward: string, # Optional. The steward of the term.
        ///           termGuid: string, # Optional. The GUID of the term.
        ///         }
        ///       ], # Optional. An array of term assignment headers.
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///     }
        ///   ], # Optional. An array of entity headers that partially updated.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateOrUpdateEntitiesAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.CreateOrUpdateEntities");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateEntitiesRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update entities in Atlas in bulk.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateOrUpdateEntities and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.CreateOrUpdateEntities(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateOrUpdateEntities with all request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new {
        ///     entities = new[] {
        ///         new {
        ///             businessAttributes = new {
        ///                 key = new {},
        ///             },
        ///             classifications = new[] {
        ///                 new {
        ///                     entityGuid = "<entityGuid>",
        ///                     entityStatus = "ACTIVE",
        ///                     removePropagationsOnEntityDelete = true,
        ///                     validityPeriods = new[] {
        ///                         new {
        ///                             endTime = "<endTime>",
        ///                             startTime = "<startTime>",
        ///                             timeZone = "<timeZone>",
        ///                         }
        ///                     },
        ///                     source = "<source>",
        ///                     sourceDetails = new {
        ///                         key = new {},
        ///                     },
        ///                     attributes = new {
        ///                         key = new {},
        ///                     },
        ///                     typeName = "<typeName>",
        ///                     lastModifiedTS = "<lastModifiedTS>",
        ///                 }
        ///             },
        ///             createTime = 123.45f,
        ///             createdBy = "<createdBy>",
        ///             customAttributes = new {
        ///                 key = "<String>",
        ///             },
        ///             guid = "<guid>",
        ///             homeId = "<homeId>",
        ///             isIncomplete = true,
        ///             labels = new[] {
        ///                 "<String>"
        ///             },
        ///             meanings = new[] {
        ///                 new {
        ///                     confidence = 1234,
        ///                     createdBy = "<createdBy>",
        ///                     description = "<description>",
        ///                     displayText = "<displayText>",
        ///                     expression = "<expression>",
        ///                     relationGuid = "<relationGuid>",
        ///                     source = "<source>",
        ///                     status = "DISCOVERED",
        ///                     steward = "<steward>",
        ///                     termGuid = "<termGuid>",
        ///                 }
        ///             },
        ///             provenanceType = 123.45f,
        ///             proxy = true,
        ///             relationshipAttributes = new {
        ///                 key = new {},
        ///             },
        ///             status = "ACTIVE",
        ///             updateTime = 123.45f,
        ///             updatedBy = "<updatedBy>",
        ///             version = 123.45f,
        ///             source = "<source>",
        ///             sourceDetails = new {
        ///                 key = new {},
        ///             },
        ///             contacts = new {
        ///                 key = new[] {
        ///                     new {
        ///                         id = "<id>",
        ///                         info = "<info>",
        ///                     }
        ///                 },
        ///             },
        ///             attributes = new {
        ///                 key = new {},
        ///             },
        ///             typeName = "<typeName>",
        ///             lastModifiedTS = "<lastModifiedTS>",
        ///         }
        ///     },
        ///     referredEntities = new {
        ///         key = new {
        ///             businessAttributes = new {
        ///                 key = new {},
        ///             },
        ///             classifications = new[] {
        ///                 new {
        ///                     entityGuid = "<entityGuid>",
        ///                     entityStatus = "ACTIVE",
        ///                     removePropagationsOnEntityDelete = true,
        ///                     validityPeriods = new[] {
        ///                         new {
        ///                             endTime = "<endTime>",
        ///                             startTime = "<startTime>",
        ///                             timeZone = "<timeZone>",
        ///                         }
        ///                     },
        ///                     source = "<source>",
        ///                     sourceDetails = new {
        ///                         key = new {},
        ///                     },
        ///                     attributes = new {
        ///                         key = new {},
        ///                     },
        ///                     typeName = "<typeName>",
        ///                     lastModifiedTS = "<lastModifiedTS>",
        ///                 }
        ///             },
        ///             createTime = 123.45f,
        ///             createdBy = "<createdBy>",
        ///             customAttributes = new {
        ///                 key = "<String>",
        ///             },
        ///             guid = "<guid>",
        ///             homeId = "<homeId>",
        ///             isIncomplete = true,
        ///             labels = new[] {
        ///                 "<String>"
        ///             },
        ///             meanings = new[] {
        ///                 new {
        ///                     confidence = 1234,
        ///                     createdBy = "<createdBy>",
        ///                     description = "<description>",
        ///                     displayText = "<displayText>",
        ///                     expression = "<expression>",
        ///                     relationGuid = "<relationGuid>",
        ///                     source = "<source>",
        ///                     status = "DISCOVERED",
        ///                     steward = "<steward>",
        ///                     termGuid = "<termGuid>",
        ///                 }
        ///             },
        ///             provenanceType = 123.45f,
        ///             proxy = true,
        ///             relationshipAttributes = new {
        ///                 key = new {},
        ///             },
        ///             status = "ACTIVE",
        ///             updateTime = 123.45f,
        ///             updatedBy = "<updatedBy>",
        ///             version = 123.45f,
        ///             source = "<source>",
        ///             sourceDetails = new {
        ///                 key = new {},
        ///             },
        ///             contacts = new {
        ///                 key = new[] {
        ///                     new {
        ///                         id = "<id>",
        ///                         info = "<info>",
        ///                     }
        ///                 },
        ///             },
        ///             attributes = new {
        ///                 key = new {},
        ///             },
        ///             typeName = "<typeName>",
        ///             lastModifiedTS = "<lastModifiedTS>",
        ///         },
        ///     },
        /// };
        /// 
        /// Response response = client.CreateOrUpdateEntities(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("guidAssignments").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("lastModifiedTS").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AtlasEntitiesWithExtInfo</c>:
        /// <code>{
        ///   entities: [
        ///     {
        ///       businessAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. Business Attributes
        ///       classifications: [
        ///         {
        ///           entityGuid: string, # Optional. The GUID of the entity.
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///           removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///           validityPeriods: [
        ///             {
        ///               endTime: string, # Optional. The end of the time boundary.
        ///               startTime: string, # Optional. The start of the time boundary.
        ///               timeZone: string, # Optional. The timezone of the time boundary.
        ///             }
        ///           ], # Optional. An array of time boundaries indicating validity periods.
        ///           source: string, # Optional. indicate the source who create the classification detail
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///           attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///           typeName: string, # Optional. The name of the type.
        ///           lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///         }
        ///       ], # Optional. An array of classifications.
        ///       createTime: number, # Optional. The created time of the record.
        ///       createdBy: string, # Optional. The user who created the record.
        ///       customAttributes: Dictionary&lt;string, string&gt;, # Optional. Custom Attribute
        ///       guid: string, # Optional. The GUID of the entity.
        ///       homeId: string, # Optional. The home ID of the entity.
        ///       isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///       labels: [string], # Optional. labels
        ///       meanings: [
        ///         {
        ///           confidence: number, # Optional. The confidence of the term assignment.
        ///           createdBy: string, # Optional. The user who created the record.
        ///           description: string, # Optional. The description of the term assignment.
        ///           displayText: string, # Optional. The display text.
        ///           expression: string, # Optional. The expression of the term assignment.
        ///           relationGuid: string, # Optional. The GUID of the relationship.
        ///           source: string, # Optional. The source of the term.
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///           steward: string, # Optional. The steward of the term.
        ///           termGuid: string, # Optional. The GUID of the term.
        ///         }
        ///       ], # Optional. An array of term assignment headers indicating the meanings of the entity.
        ///       provenanceType: number, # Optional. Used to record the provenance of an instance of an entity or relationship.
        ///       proxy: boolean, # Optional. Determines if there&apos;s a proxy.
        ///       relationshipAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of relationship.
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       updateTime: number, # Optional. The update time of the record.
        ///       updatedBy: string, # Optional. The user who updated the record.
        ///       version: number, # Optional. The version of the entity.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///       contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Owner.
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///     }
        ///   ], # Optional. An array of entities.
        ///   referredEntities: Dictionary&lt;string, AtlasEntity&gt;, # Optional. The referred entities.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>EntityMutationResponse</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;, # Optional. A map of GUID assignments with entities.
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;, # Optional. The entity headers of mutated entities.
        ///   partialUpdatedEntities: [
        ///     {
        ///       classificationNames: [string], # Optional. An array of classification names.
        ///       classifications: [
        ///         {
        ///           entityGuid: string, # Optional. The GUID of the entity.
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///           removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///           validityPeriods: [
        ///             {
        ///               endTime: string, # Optional. The end of the time boundary.
        ///               startTime: string, # Optional. The start of the time boundary.
        ///               timeZone: string, # Optional. The timezone of the time boundary.
        ///             }
        ///           ], # Optional. An array of time boundaries indicating validity periods.
        ///           source: string, # Optional. indicate the source who create the classification detail
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///           attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///           typeName: string, # Optional. The name of the type.
        ///           lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///         }
        ///       ], # Optional. An array of classifications.
        ///       displayText: string, # Optional. The display text.
        ///       guid: string, # Optional. The GUID of the record.
        ///       isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///       labels: [string], # Optional. labels
        ///       meaningNames: [string], # Optional. An array of meanings.
        ///       meanings: [
        ///         {
        ///           confidence: number, # Optional. The confidence of the term assignment.
        ///           createdBy: string, # Optional. The user who created the record.
        ///           description: string, # Optional. The description of the term assignment.
        ///           displayText: string, # Optional. The display text.
        ///           expression: string, # Optional. The expression of the term assignment.
        ///           relationGuid: string, # Optional. The GUID of the relationship.
        ///           source: string, # Optional. The source of the term.
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///           steward: string, # Optional. The steward of the term.
        ///           termGuid: string, # Optional. The GUID of the term.
        ///         }
        ///       ], # Optional. An array of term assignment headers.
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///     }
        ///   ], # Optional. An array of entity headers that partially updated.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateOrUpdateEntities(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.CreateOrUpdateEntities");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateEntitiesRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a list of entities in bulk identified by their GUIDs or unique attributes. </summary>
        /// <param name="guids"> An array of GUIDs of entities to delete. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guids"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call DeleteByGuidsAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// Response response = await client.DeleteByGuidsAsync(new String[]{"<guids>"});
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("guidAssignments").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("lastModifiedTS").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>EntityMutationResponse</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;, # Optional. A map of GUID assignments with entities.
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;, # Optional. The entity headers of mutated entities.
        ///   partialUpdatedEntities: [
        ///     {
        ///       classificationNames: [string], # Optional. An array of classification names.
        ///       classifications: [
        ///         {
        ///           entityGuid: string, # Optional. The GUID of the entity.
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///           removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///           validityPeriods: [
        ///             {
        ///               endTime: string, # Optional. The end of the time boundary.
        ///               startTime: string, # Optional. The start of the time boundary.
        ///               timeZone: string, # Optional. The timezone of the time boundary.
        ///             }
        ///           ], # Optional. An array of time boundaries indicating validity periods.
        ///           source: string, # Optional. indicate the source who create the classification detail
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///           attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///           typeName: string, # Optional. The name of the type.
        ///           lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///         }
        ///       ], # Optional. An array of classifications.
        ///       displayText: string, # Optional. The display text.
        ///       guid: string, # Optional. The GUID of the record.
        ///       isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///       labels: [string], # Optional. labels
        ///       meaningNames: [string], # Optional. An array of meanings.
        ///       meanings: [
        ///         {
        ///           confidence: number, # Optional. The confidence of the term assignment.
        ///           createdBy: string, # Optional. The user who created the record.
        ///           description: string, # Optional. The description of the term assignment.
        ///           displayText: string, # Optional. The display text.
        ///           expression: string, # Optional. The expression of the term assignment.
        ///           relationGuid: string, # Optional. The GUID of the relationship.
        ///           source: string, # Optional. The source of the term.
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///           steward: string, # Optional. The steward of the term.
        ///           termGuid: string, # Optional. The GUID of the term.
        ///         }
        ///       ], # Optional. An array of term assignment headers.
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///     }
        ///   ], # Optional. An array of entity headers that partially updated.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> DeleteByGuidsAsync(IEnumerable<string> guids, RequestContext context = null)
        {
            Argument.AssertNotNull(guids, nameof(guids));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.DeleteByGuids");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteByGuidsRequest(guids, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a list of entities in bulk identified by their GUIDs or unique attributes. </summary>
        /// <param name="guids"> An array of GUIDs of entities to delete. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guids"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call DeleteByGuids with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// Response response = client.DeleteByGuids(new String[]{"<guids>"});
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("guidAssignments").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("lastModifiedTS").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>EntityMutationResponse</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;, # Optional. A map of GUID assignments with entities.
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;, # Optional. The entity headers of mutated entities.
        ///   partialUpdatedEntities: [
        ///     {
        ///       classificationNames: [string], # Optional. An array of classification names.
        ///       classifications: [
        ///         {
        ///           entityGuid: string, # Optional. The GUID of the entity.
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///           removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///           validityPeriods: [
        ///             {
        ///               endTime: string, # Optional. The end of the time boundary.
        ///               startTime: string, # Optional. The start of the time boundary.
        ///               timeZone: string, # Optional. The timezone of the time boundary.
        ///             }
        ///           ], # Optional. An array of time boundaries indicating validity periods.
        ///           source: string, # Optional. indicate the source who create the classification detail
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///           attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///           typeName: string, # Optional. The name of the type.
        ///           lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///         }
        ///       ], # Optional. An array of classifications.
        ///       displayText: string, # Optional. The display text.
        ///       guid: string, # Optional. The GUID of the record.
        ///       isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///       labels: [string], # Optional. labels
        ///       meaningNames: [string], # Optional. An array of meanings.
        ///       meanings: [
        ///         {
        ///           confidence: number, # Optional. The confidence of the term assignment.
        ///           createdBy: string, # Optional. The user who created the record.
        ///           description: string, # Optional. The description of the term assignment.
        ///           displayText: string, # Optional. The display text.
        ///           expression: string, # Optional. The expression of the term assignment.
        ///           relationGuid: string, # Optional. The GUID of the relationship.
        ///           source: string, # Optional. The source of the term.
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///           steward: string, # Optional. The steward of the term.
        ///           termGuid: string, # Optional. The GUID of the term.
        ///         }
        ///       ], # Optional. An array of term assignment headers.
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///     }
        ///   ], # Optional. An array of entity headers that partially updated.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response DeleteByGuids(IEnumerable<string> guids, RequestContext context = null)
        {
            Argument.AssertNotNull(guids, nameof(guids));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.DeleteByGuids");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteByGuidsRequest(guids, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Associate a classification to multiple entities in bulk. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call AddClassificationAsync.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.AddClassificationAsync(RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call AddClassificationAsync with all request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new {
        ///     classification = new {
        ///         entityGuid = "<entityGuid>",
        ///         entityStatus = "ACTIVE",
        ///         removePropagationsOnEntityDelete = true,
        ///         validityPeriods = new[] {
        ///             new {
        ///                 endTime = "<endTime>",
        ///                 startTime = "<startTime>",
        ///                 timeZone = "<timeZone>",
        ///             }
        ///         },
        ///         source = "<source>",
        ///         sourceDetails = new {
        ///             key = new {},
        ///         },
        ///         attributes = new {
        ///             key = new {},
        ///         },
        ///         typeName = "<typeName>",
        ///         lastModifiedTS = "<lastModifiedTS>",
        ///     },
        ///     entityGuids = new[] {
        ///         "<String>"
        ///     },
        /// };
        /// 
        /// Response response = await client.AddClassificationAsync(RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>ClassificationAssociateRequest</c>:
        /// <code>{
        ///   classification: {
        ///     entityGuid: string, # Optional. The GUID of the entity.
        ///     entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///     removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///     validityPeriods: [
        ///       {
        ///         endTime: string, # Optional. The end of the time boundary.
        ///         startTime: string, # Optional. The start of the time boundary.
        ///         timeZone: string, # Optional. The timezone of the time boundary.
        ///       }
        ///     ], # Optional. An array of time boundaries indicating validity periods.
        ///     source: string, # Optional. indicate the source who create the classification detail
        ///     sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///     typeName: string, # Optional. The name of the type.
        ///     lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   }, # Optional. An instance of a classification; it doesn&apos;t have an identity, this object exists only when associated with an entity.
        ///   entityGuids: [string], # Optional. The GUID of the entity.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> AddClassificationAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.AddClassification");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddClassificationRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Associate a classification to multiple entities in bulk. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call AddClassification.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.AddClassification(RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call AddClassification with all request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new {
        ///     classification = new {
        ///         entityGuid = "<entityGuid>",
        ///         entityStatus = "ACTIVE",
        ///         removePropagationsOnEntityDelete = true,
        ///         validityPeriods = new[] {
        ///             new {
        ///                 endTime = "<endTime>",
        ///                 startTime = "<startTime>",
        ///                 timeZone = "<timeZone>",
        ///             }
        ///         },
        ///         source = "<source>",
        ///         sourceDetails = new {
        ///             key = new {},
        ///         },
        ///         attributes = new {
        ///             key = new {},
        ///         },
        ///         typeName = "<typeName>",
        ///         lastModifiedTS = "<lastModifiedTS>",
        ///     },
        ///     entityGuids = new[] {
        ///         "<String>"
        ///     },
        /// };
        /// 
        /// Response response = client.AddClassification(RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>ClassificationAssociateRequest</c>:
        /// <code>{
        ///   classification: {
        ///     entityGuid: string, # Optional. The GUID of the entity.
        ///     entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///     removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///     validityPeriods: [
        ///       {
        ///         endTime: string, # Optional. The end of the time boundary.
        ///         startTime: string, # Optional. The start of the time boundary.
        ///         timeZone: string, # Optional. The timezone of the time boundary.
        ///       }
        ///     ], # Optional. An array of time boundaries indicating validity periods.
        ///     source: string, # Optional. indicate the source who create the classification detail
        ///     sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///     typeName: string, # Optional. The name of the type.
        ///     lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   }, # Optional. An instance of a classification; it doesn&apos;t have an identity, this object exists only when associated with an entity.
        ///   entityGuids: [string], # Optional. The GUID of the entity.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response AddClassification(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.AddClassification");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddClassificationRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get complete definition of an entity given its GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="guid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetByGuidAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// Response response = await client.GetByGuidAsync("<guid>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call GetByGuidAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// Response response = await client.GetByGuidAsync("<guid>", true, true);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("businessAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("createTime").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("customAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("homeId").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("provenanceType").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("proxy").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("relationshipAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("updateTime").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("updatedBy").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("version").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("businessAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("createTime").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("customAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("homeId").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("provenanceType").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("proxy").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("relationshipAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("updateTime").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("updatedBy").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("version").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("lastModifiedTS").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AtlasEntityWithExtInfo</c>:
        /// <code>{
        ///   entity: {
        ///     businessAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. Business Attributes
        ///     classifications: [
        ///       {
        ///         entityGuid: string, # Optional. The GUID of the entity.
        ///         entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///         removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///         validityPeriods: [
        ///           {
        ///             endTime: string, # Optional. The end of the time boundary.
        ///             startTime: string, # Optional. The start of the time boundary.
        ///             timeZone: string, # Optional. The timezone of the time boundary.
        ///           }
        ///         ], # Optional. An array of time boundaries indicating validity periods.
        ///         source: string, # Optional. indicate the source who create the classification detail
        ///         sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///         typeName: string, # Optional. The name of the type.
        ///         lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       }
        ///     ], # Optional. An array of classifications.
        ///     createTime: number, # Optional. The created time of the record.
        ///     createdBy: string, # Optional. The user who created the record.
        ///     customAttributes: Dictionary&lt;string, string&gt;, # Optional. Custom Attribute
        ///     guid: string, # Optional. The GUID of the entity.
        ///     homeId: string, # Optional. The home ID of the entity.
        ///     isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///     labels: [string], # Optional. labels
        ///     meanings: [
        ///       {
        ///         confidence: number, # Optional. The confidence of the term assignment.
        ///         createdBy: string, # Optional. The user who created the record.
        ///         description: string, # Optional. The description of the term assignment.
        ///         displayText: string, # Optional. The display text.
        ///         expression: string, # Optional. The expression of the term assignment.
        ///         relationGuid: string, # Optional. The GUID of the relationship.
        ///         source: string, # Optional. The source of the term.
        ///         status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///         steward: string, # Optional. The steward of the term.
        ///         termGuid: string, # Optional. The GUID of the term.
        ///       }
        ///     ], # Optional. An array of term assignment headers indicating the meanings of the entity.
        ///     provenanceType: number, # Optional. Used to record the provenance of an instance of an entity or relationship.
        ///     proxy: boolean, # Optional. Determines if there&apos;s a proxy.
        ///     relationshipAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of relationship.
        ///     status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///     updateTime: number, # Optional. The update time of the record.
        ///     updatedBy: string, # Optional. The user who updated the record.
        ///     version: number, # Optional. The version of the entity.
        ///     source: string, # Optional. indicate the source who create the classification detail
        ///     sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Owner.
        ///     attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///     typeName: string, # Optional. The name of the type.
        ///     lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   }, # Optional. An instance of an entity - like hive_table, hive_database.
        ///   referredEntities: Dictionary&lt;string, AtlasEntity&gt;, # Optional. The referred entities.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetByGuidAsync(string guid, bool? minExtInfo = null, bool? ignoreRelationships = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(guid, nameof(guid));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.GetByGuid");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetByGuidRequest(guid, minExtInfo, ignoreRelationships, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get complete definition of an entity given its GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="guid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetByGuid with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// Response response = client.GetByGuid("<guid>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call GetByGuid with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// Response response = client.GetByGuid("<guid>", true, true);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("businessAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("createTime").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("customAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("homeId").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("provenanceType").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("proxy").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("relationshipAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("updateTime").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("updatedBy").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("version").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("businessAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("createTime").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("customAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("homeId").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("provenanceType").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("proxy").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("relationshipAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("updateTime").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("updatedBy").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("version").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("lastModifiedTS").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AtlasEntityWithExtInfo</c>:
        /// <code>{
        ///   entity: {
        ///     businessAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. Business Attributes
        ///     classifications: [
        ///       {
        ///         entityGuid: string, # Optional. The GUID of the entity.
        ///         entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///         removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///         validityPeriods: [
        ///           {
        ///             endTime: string, # Optional. The end of the time boundary.
        ///             startTime: string, # Optional. The start of the time boundary.
        ///             timeZone: string, # Optional. The timezone of the time boundary.
        ///           }
        ///         ], # Optional. An array of time boundaries indicating validity periods.
        ///         source: string, # Optional. indicate the source who create the classification detail
        ///         sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///         typeName: string, # Optional. The name of the type.
        ///         lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       }
        ///     ], # Optional. An array of classifications.
        ///     createTime: number, # Optional. The created time of the record.
        ///     createdBy: string, # Optional. The user who created the record.
        ///     customAttributes: Dictionary&lt;string, string&gt;, # Optional. Custom Attribute
        ///     guid: string, # Optional. The GUID of the entity.
        ///     homeId: string, # Optional. The home ID of the entity.
        ///     isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///     labels: [string], # Optional. labels
        ///     meanings: [
        ///       {
        ///         confidence: number, # Optional. The confidence of the term assignment.
        ///         createdBy: string, # Optional. The user who created the record.
        ///         description: string, # Optional. The description of the term assignment.
        ///         displayText: string, # Optional. The display text.
        ///         expression: string, # Optional. The expression of the term assignment.
        ///         relationGuid: string, # Optional. The GUID of the relationship.
        ///         source: string, # Optional. The source of the term.
        ///         status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///         steward: string, # Optional. The steward of the term.
        ///         termGuid: string, # Optional. The GUID of the term.
        ///       }
        ///     ], # Optional. An array of term assignment headers indicating the meanings of the entity.
        ///     provenanceType: number, # Optional. Used to record the provenance of an instance of an entity or relationship.
        ///     proxy: boolean, # Optional. Determines if there&apos;s a proxy.
        ///     relationshipAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of relationship.
        ///     status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///     updateTime: number, # Optional. The update time of the record.
        ///     updatedBy: string, # Optional. The user who updated the record.
        ///     version: number, # Optional. The version of the entity.
        ///     source: string, # Optional. indicate the source who create the classification detail
        ///     sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Owner.
        ///     attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///     typeName: string, # Optional. The name of the type.
        ///     lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   }, # Optional. An instance of an entity - like hive_table, hive_database.
        ///   referredEntities: Dictionary&lt;string, AtlasEntity&gt;, # Optional. The referred entities.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetByGuid(string guid, bool? minExtInfo = null, bool? ignoreRelationships = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(guid, nameof(guid));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.GetByGuid");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetByGuidRequest(guid, minExtInfo, ignoreRelationships, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update entity partially - create or update entity attribute identified by its GUID.
        /// Supports only primitive attribute type and entity references.
        /// It does not support updating complex types like arrays, and maps.
        /// Null updates are not possible.
        /// </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="name"> The name of the attribute. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/>, <paramref name="name"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="guid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call PartialUpdateEntityAttributeByGuidAsync with required parameters and request content and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.PartialUpdateEntityAttributeByGuidAsync("<guid>", "<name>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("guidAssignments").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("lastModifiedTS").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>EntityMutationResponse</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;, # Optional. A map of GUID assignments with entities.
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;, # Optional. The entity headers of mutated entities.
        ///   partialUpdatedEntities: [
        ///     {
        ///       classificationNames: [string], # Optional. An array of classification names.
        ///       classifications: [
        ///         {
        ///           entityGuid: string, # Optional. The GUID of the entity.
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///           removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///           validityPeriods: [
        ///             {
        ///               endTime: string, # Optional. The end of the time boundary.
        ///               startTime: string, # Optional. The start of the time boundary.
        ///               timeZone: string, # Optional. The timezone of the time boundary.
        ///             }
        ///           ], # Optional. An array of time boundaries indicating validity periods.
        ///           source: string, # Optional. indicate the source who create the classification detail
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///           attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///           typeName: string, # Optional. The name of the type.
        ///           lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///         }
        ///       ], # Optional. An array of classifications.
        ///       displayText: string, # Optional. The display text.
        ///       guid: string, # Optional. The GUID of the record.
        ///       isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///       labels: [string], # Optional. labels
        ///       meaningNames: [string], # Optional. An array of meanings.
        ///       meanings: [
        ///         {
        ///           confidence: number, # Optional. The confidence of the term assignment.
        ///           createdBy: string, # Optional. The user who created the record.
        ///           description: string, # Optional. The description of the term assignment.
        ///           displayText: string, # Optional. The display text.
        ///           expression: string, # Optional. The expression of the term assignment.
        ///           relationGuid: string, # Optional. The GUID of the relationship.
        ///           source: string, # Optional. The source of the term.
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///           steward: string, # Optional. The steward of the term.
        ///           termGuid: string, # Optional. The GUID of the term.
        ///         }
        ///       ], # Optional. An array of term assignment headers.
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///     }
        ///   ], # Optional. An array of entity headers that partially updated.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PartialUpdateEntityAttributeByGuidAsync(string guid, string name, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(guid, nameof(guid));
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.PartialUpdateEntityAttributeByGuid");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePartialUpdateEntityAttributeByGuidRequest(guid, name, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update entity partially - create or update entity attribute identified by its GUID.
        /// Supports only primitive attribute type and entity references.
        /// It does not support updating complex types like arrays, and maps.
        /// Null updates are not possible.
        /// </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="name"> The name of the attribute. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/>, <paramref name="name"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="guid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call PartialUpdateEntityAttributeByGuid with required parameters and request content and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.PartialUpdateEntityAttributeByGuid("<guid>", "<name>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("guidAssignments").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("lastModifiedTS").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>EntityMutationResponse</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;, # Optional. A map of GUID assignments with entities.
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;, # Optional. The entity headers of mutated entities.
        ///   partialUpdatedEntities: [
        ///     {
        ///       classificationNames: [string], # Optional. An array of classification names.
        ///       classifications: [
        ///         {
        ///           entityGuid: string, # Optional. The GUID of the entity.
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///           removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///           validityPeriods: [
        ///             {
        ///               endTime: string, # Optional. The end of the time boundary.
        ///               startTime: string, # Optional. The start of the time boundary.
        ///               timeZone: string, # Optional. The timezone of the time boundary.
        ///             }
        ///           ], # Optional. An array of time boundaries indicating validity periods.
        ///           source: string, # Optional. indicate the source who create the classification detail
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///           attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///           typeName: string, # Optional. The name of the type.
        ///           lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///         }
        ///       ], # Optional. An array of classifications.
        ///       displayText: string, # Optional. The display text.
        ///       guid: string, # Optional. The GUID of the record.
        ///       isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///       labels: [string], # Optional. labels
        ///       meaningNames: [string], # Optional. An array of meanings.
        ///       meanings: [
        ///         {
        ///           confidence: number, # Optional. The confidence of the term assignment.
        ///           createdBy: string, # Optional. The user who created the record.
        ///           description: string, # Optional. The description of the term assignment.
        ///           displayText: string, # Optional. The display text.
        ///           expression: string, # Optional. The expression of the term assignment.
        ///           relationGuid: string, # Optional. The GUID of the relationship.
        ///           source: string, # Optional. The source of the term.
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///           steward: string, # Optional. The steward of the term.
        ///           termGuid: string, # Optional. The GUID of the term.
        ///         }
        ///       ], # Optional. An array of term assignment headers.
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///     }
        ///   ], # Optional. An array of entity headers that partially updated.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PartialUpdateEntityAttributeByGuid(string guid, string name, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(guid, nameof(guid));
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.PartialUpdateEntityAttributeByGuid");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePartialUpdateEntityAttributeByGuidRequest(guid, name, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete an entity identified by its GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="guid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call DeleteByGuidAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// Response response = await client.DeleteByGuidAsync("<guid>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("guidAssignments").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("lastModifiedTS").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>EntityMutationResponse</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;, # Optional. A map of GUID assignments with entities.
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;, # Optional. The entity headers of mutated entities.
        ///   partialUpdatedEntities: [
        ///     {
        ///       classificationNames: [string], # Optional. An array of classification names.
        ///       classifications: [
        ///         {
        ///           entityGuid: string, # Optional. The GUID of the entity.
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///           removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///           validityPeriods: [
        ///             {
        ///               endTime: string, # Optional. The end of the time boundary.
        ///               startTime: string, # Optional. The start of the time boundary.
        ///               timeZone: string, # Optional. The timezone of the time boundary.
        ///             }
        ///           ], # Optional. An array of time boundaries indicating validity periods.
        ///           source: string, # Optional. indicate the source who create the classification detail
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///           attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///           typeName: string, # Optional. The name of the type.
        ///           lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///         }
        ///       ], # Optional. An array of classifications.
        ///       displayText: string, # Optional. The display text.
        ///       guid: string, # Optional. The GUID of the record.
        ///       isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///       labels: [string], # Optional. labels
        ///       meaningNames: [string], # Optional. An array of meanings.
        ///       meanings: [
        ///         {
        ///           confidence: number, # Optional. The confidence of the term assignment.
        ///           createdBy: string, # Optional. The user who created the record.
        ///           description: string, # Optional. The description of the term assignment.
        ///           displayText: string, # Optional. The display text.
        ///           expression: string, # Optional. The expression of the term assignment.
        ///           relationGuid: string, # Optional. The GUID of the relationship.
        ///           source: string, # Optional. The source of the term.
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///           steward: string, # Optional. The steward of the term.
        ///           termGuid: string, # Optional. The GUID of the term.
        ///         }
        ///       ], # Optional. An array of term assignment headers.
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///     }
        ///   ], # Optional. An array of entity headers that partially updated.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> DeleteByGuidAsync(string guid, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(guid, nameof(guid));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.DeleteByGuid");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteByGuidRequest(guid, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete an entity identified by its GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="guid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call DeleteByGuid with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// Response response = client.DeleteByGuid("<guid>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("guidAssignments").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("lastModifiedTS").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>EntityMutationResponse</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;, # Optional. A map of GUID assignments with entities.
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;, # Optional. The entity headers of mutated entities.
        ///   partialUpdatedEntities: [
        ///     {
        ///       classificationNames: [string], # Optional. An array of classification names.
        ///       classifications: [
        ///         {
        ///           entityGuid: string, # Optional. The GUID of the entity.
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///           removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///           validityPeriods: [
        ///             {
        ///               endTime: string, # Optional. The end of the time boundary.
        ///               startTime: string, # Optional. The start of the time boundary.
        ///               timeZone: string, # Optional. The timezone of the time boundary.
        ///             }
        ///           ], # Optional. An array of time boundaries indicating validity periods.
        ///           source: string, # Optional. indicate the source who create the classification detail
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///           attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///           typeName: string, # Optional. The name of the type.
        ///           lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///         }
        ///       ], # Optional. An array of classifications.
        ///       displayText: string, # Optional. The display text.
        ///       guid: string, # Optional. The GUID of the record.
        ///       isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///       labels: [string], # Optional. labels
        ///       meaningNames: [string], # Optional. An array of meanings.
        ///       meanings: [
        ///         {
        ///           confidence: number, # Optional. The confidence of the term assignment.
        ///           createdBy: string, # Optional. The user who created the record.
        ///           description: string, # Optional. The description of the term assignment.
        ///           displayText: string, # Optional. The display text.
        ///           expression: string, # Optional. The expression of the term assignment.
        ///           relationGuid: string, # Optional. The GUID of the relationship.
        ///           source: string, # Optional. The source of the term.
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///           steward: string, # Optional. The steward of the term.
        ///           termGuid: string, # Optional. The GUID of the term.
        ///         }
        ///       ], # Optional. An array of term assignment headers.
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///     }
        ///   ], # Optional. An array of entity headers that partially updated.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response DeleteByGuid(string guid, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(guid, nameof(guid));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.DeleteByGuid");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteByGuidRequest(guid, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List classifications for a given entity represented by a GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="classificationName"> The name of the classification. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> or <paramref name="classificationName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="guid"/> or <paramref name="classificationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetClassificationAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// Response response = await client.GetClassificationAsync("<guid>", "<classificationName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AtlasClassification</c>:
        /// <code>{
        ///   entityGuid: string, # Optional. The GUID of the entity.
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///   removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///   validityPeriods: [
        ///     {
        ///       endTime: string, # Optional. The end of the time boundary.
        ///       startTime: string, # Optional. The start of the time boundary.
        ///       timeZone: string, # Optional. The timezone of the time boundary.
        ///     }
        ///   ], # Optional. An array of time boundaries indicating validity periods.
        ///   source: string, # Optional. indicate the source who create the classification detail
        ///   sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///   attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///   typeName: string, # Optional. The name of the type.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetClassificationAsync(string guid, string classificationName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(guid, nameof(guid));
            Argument.AssertNotNullOrEmpty(classificationName, nameof(classificationName));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.GetClassification");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetClassificationRequest(guid, classificationName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List classifications for a given entity represented by a GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="classificationName"> The name of the classification. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> or <paramref name="classificationName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="guid"/> or <paramref name="classificationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetClassification with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// Response response = client.GetClassification("<guid>", "<classificationName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AtlasClassification</c>:
        /// <code>{
        ///   entityGuid: string, # Optional. The GUID of the entity.
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///   removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///   validityPeriods: [
        ///     {
        ///       endTime: string, # Optional. The end of the time boundary.
        ///       startTime: string, # Optional. The start of the time boundary.
        ///       timeZone: string, # Optional. The timezone of the time boundary.
        ///     }
        ///   ], # Optional. An array of time boundaries indicating validity periods.
        ///   source: string, # Optional. indicate the source who create the classification detail
        ///   sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///   attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///   typeName: string, # Optional. The name of the type.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetClassification(string guid, string classificationName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(guid, nameof(guid));
            Argument.AssertNotNullOrEmpty(classificationName, nameof(classificationName));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.GetClassification");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetClassificationRequest(guid, classificationName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a given classification from an existing entity represented by a GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="classificationName"> The name of the classification. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> or <paramref name="classificationName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="guid"/> or <paramref name="classificationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteClassificationAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// Response response = await client.DeleteClassificationAsync("<guid>", "<classificationName>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteClassificationAsync(string guid, string classificationName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(guid, nameof(guid));
            Argument.AssertNotNullOrEmpty(classificationName, nameof(classificationName));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.DeleteClassification");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteClassificationRequest(guid, classificationName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a given classification from an existing entity represented by a GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="classificationName"> The name of the classification. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> or <paramref name="classificationName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="guid"/> or <paramref name="classificationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteClassification with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// Response response = client.DeleteClassification("<guid>", "<classificationName>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response DeleteClassification(string guid, string classificationName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(guid, nameof(guid));
            Argument.AssertNotNullOrEmpty(classificationName, nameof(classificationName));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.DeleteClassification");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteClassificationRequest(guid, classificationName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List classifications for a given entity represented by a GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="guid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetClassificationsAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// Response response = await client.GetClassificationsAsync("<guid>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("list")[0].ToString());
        /// Console.WriteLine(result.GetProperty("pageSize").ToString());
        /// Console.WriteLine(result.GetProperty("sortBy").ToString());
        /// Console.WriteLine(result.GetProperty("sortType").ToString());
        /// Console.WriteLine(result.GetProperty("startIndex").ToString());
        /// Console.WriteLine(result.GetProperty("totalCount").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AtlasClassifications</c>:
        /// <code>{
        ///   list: [AnyObject], # Optional. An array of objects.
        ///   pageSize: number, # Optional. The size of the page.
        ///   sortBy: string, # Optional. The sorted by field.
        ///   sortType: &quot;NONE&quot; | &quot;ASC&quot; | &quot;DESC&quot;, # Optional. to specify whether the result should be sorted? If yes, whether asc or desc.
        ///   startIndex: number, # Optional. The start index of the page.
        ///   totalCount: number, # Optional. The total count of items.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetClassificationsAsync(string guid, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(guid, nameof(guid));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.GetClassifications");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetClassificationsRequest(guid, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List classifications for a given entity represented by a GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="guid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetClassifications with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// Response response = client.GetClassifications("<guid>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("list")[0].ToString());
        /// Console.WriteLine(result.GetProperty("pageSize").ToString());
        /// Console.WriteLine(result.GetProperty("sortBy").ToString());
        /// Console.WriteLine(result.GetProperty("sortType").ToString());
        /// Console.WriteLine(result.GetProperty("startIndex").ToString());
        /// Console.WriteLine(result.GetProperty("totalCount").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AtlasClassifications</c>:
        /// <code>{
        ///   list: [AnyObject], # Optional. An array of objects.
        ///   pageSize: number, # Optional. The size of the page.
        ///   sortBy: string, # Optional. The sorted by field.
        ///   sortType: &quot;NONE&quot; | &quot;ASC&quot; | &quot;DESC&quot;, # Optional. to specify whether the result should be sorted? If yes, whether asc or desc.
        ///   startIndex: number, # Optional. The start index of the page.
        ///   totalCount: number, # Optional. The total count of items.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetClassifications(string guid, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(guid, nameof(guid));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.GetClassifications");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetClassificationsRequest(guid, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add classifications to an existing entity represented by a GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="guid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call AddClassificationsAsync with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new[] {
        ///     new {
        ///         entityGuid = "<entityGuid>",
        ///         entityStatus = "ACTIVE",
        ///         removePropagationsOnEntityDelete = true,
        ///         validityPeriods = new[] {
        ///             new {
        ///                 endTime = "<endTime>",
        ///                 startTime = "<startTime>",
        ///                 timeZone = "<timeZone>",
        ///             }
        ///         },
        ///         source = "<source>",
        ///         sourceDetails = new {
        ///             key = new {},
        ///         },
        ///         attributes = new {
        ///             key = new {},
        ///         },
        ///         typeName = "<typeName>",
        ///         lastModifiedTS = "<lastModifiedTS>",
        ///     }
        /// };
        /// 
        /// Response response = await client.AddClassificationsAsync("<guid>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AtlasClassification</c>:
        /// <code>{
        ///   entityGuid: string, # Optional. The GUID of the entity.
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///   removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///   validityPeriods: [
        ///     {
        ///       endTime: string, # Optional. The end of the time boundary.
        ///       startTime: string, # Optional. The start of the time boundary.
        ///       timeZone: string, # Optional. The timezone of the time boundary.
        ///     }
        ///   ], # Optional. An array of time boundaries indicating validity periods.
        ///   source: string, # Optional. indicate the source who create the classification detail
        ///   sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///   attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///   typeName: string, # Optional. The name of the type.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> AddClassificationsAsync(string guid, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(guid, nameof(guid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.AddClassifications");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddClassificationsRequest(guid, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add classifications to an existing entity represented by a GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="guid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call AddClassifications with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new[] {
        ///     new {
        ///         entityGuid = "<entityGuid>",
        ///         entityStatus = "ACTIVE",
        ///         removePropagationsOnEntityDelete = true,
        ///         validityPeriods = new[] {
        ///             new {
        ///                 endTime = "<endTime>",
        ///                 startTime = "<startTime>",
        ///                 timeZone = "<timeZone>",
        ///             }
        ///         },
        ///         source = "<source>",
        ///         sourceDetails = new {
        ///             key = new {},
        ///         },
        ///         attributes = new {
        ///             key = new {},
        ///         },
        ///         typeName = "<typeName>",
        ///         lastModifiedTS = "<lastModifiedTS>",
        ///     }
        /// };
        /// 
        /// Response response = client.AddClassifications("<guid>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AtlasClassification</c>:
        /// <code>{
        ///   entityGuid: string, # Optional. The GUID of the entity.
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///   removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///   validityPeriods: [
        ///     {
        ///       endTime: string, # Optional. The end of the time boundary.
        ///       startTime: string, # Optional. The start of the time boundary.
        ///       timeZone: string, # Optional. The timezone of the time boundary.
        ///     }
        ///   ], # Optional. An array of time boundaries indicating validity periods.
        ///   source: string, # Optional. indicate the source who create the classification detail
        ///   sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///   attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///   typeName: string, # Optional. The name of the type.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response AddClassifications(string guid, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(guid, nameof(guid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.AddClassifications");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddClassificationsRequest(guid, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update classifications to an existing entity represented by a guid. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="guid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call UpdateClassificationsAsync with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new[] {
        ///     new {
        ///         entityGuid = "<entityGuid>",
        ///         entityStatus = "ACTIVE",
        ///         removePropagationsOnEntityDelete = true,
        ///         validityPeriods = new[] {
        ///             new {
        ///                 endTime = "<endTime>",
        ///                 startTime = "<startTime>",
        ///                 timeZone = "<timeZone>",
        ///             }
        ///         },
        ///         source = "<source>",
        ///         sourceDetails = new {
        ///             key = new {},
        ///         },
        ///         attributes = new {
        ///             key = new {},
        ///         },
        ///         typeName = "<typeName>",
        ///         lastModifiedTS = "<lastModifiedTS>",
        ///     }
        /// };
        /// 
        /// Response response = await client.UpdateClassificationsAsync("<guid>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AtlasClassification</c>:
        /// <code>{
        ///   entityGuid: string, # Optional. The GUID of the entity.
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///   removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///   validityPeriods: [
        ///     {
        ///       endTime: string, # Optional. The end of the time boundary.
        ///       startTime: string, # Optional. The start of the time boundary.
        ///       timeZone: string, # Optional. The timezone of the time boundary.
        ///     }
        ///   ], # Optional. An array of time boundaries indicating validity periods.
        ///   source: string, # Optional. indicate the source who create the classification detail
        ///   sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///   attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///   typeName: string, # Optional. The name of the type.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> UpdateClassificationsAsync(string guid, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(guid, nameof(guid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.UpdateClassifications");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateClassificationsRequest(guid, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update classifications to an existing entity represented by a guid. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="guid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call UpdateClassifications with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new[] {
        ///     new {
        ///         entityGuid = "<entityGuid>",
        ///         entityStatus = "ACTIVE",
        ///         removePropagationsOnEntityDelete = true,
        ///         validityPeriods = new[] {
        ///             new {
        ///                 endTime = "<endTime>",
        ///                 startTime = "<startTime>",
        ///                 timeZone = "<timeZone>",
        ///             }
        ///         },
        ///         source = "<source>",
        ///         sourceDetails = new {
        ///             key = new {},
        ///         },
        ///         attributes = new {
        ///             key = new {},
        ///         },
        ///         typeName = "<typeName>",
        ///         lastModifiedTS = "<lastModifiedTS>",
        ///     }
        /// };
        /// 
        /// Response response = client.UpdateClassifications("<guid>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AtlasClassification</c>:
        /// <code>{
        ///   entityGuid: string, # Optional. The GUID of the entity.
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///   removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///   validityPeriods: [
        ///     {
        ///       endTime: string, # Optional. The end of the time boundary.
        ///       startTime: string, # Optional. The start of the time boundary.
        ///       timeZone: string, # Optional. The timezone of the time boundary.
        ///     }
        ///   ], # Optional. An array of time boundaries indicating validity periods.
        ///   source: string, # Optional. indicate the source who create the classification detail
        ///   sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///   attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///   typeName: string, # Optional. The name of the type.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response UpdateClassifications(string guid, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(guid, nameof(guid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.UpdateClassifications");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateClassificationsRequest(guid, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get complete definition of an entity given its type and unique attribute.
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:
        /// attr:\&lt;attrName&gt;=&lt;attrValue&gt;. 
        /// NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        /// The REST request would look something like this:
        /// GET /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
        /// </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="typeName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="typeName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetByUniqueAttributesAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// Response response = await client.GetByUniqueAttributesAsync("<typeName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call GetByUniqueAttributesAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// Response response = await client.GetByUniqueAttributesAsync("<typeName>", true, true, "<attrQualifiedName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("businessAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("createTime").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("customAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("homeId").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("provenanceType").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("proxy").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("relationshipAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("updateTime").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("updatedBy").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("version").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("businessAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("createTime").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("customAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("homeId").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("provenanceType").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("proxy").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("relationshipAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("updateTime").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("updatedBy").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("version").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("lastModifiedTS").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AtlasEntityWithExtInfo</c>:
        /// <code>{
        ///   entity: {
        ///     businessAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. Business Attributes
        ///     classifications: [
        ///       {
        ///         entityGuid: string, # Optional. The GUID of the entity.
        ///         entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///         removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///         validityPeriods: [
        ///           {
        ///             endTime: string, # Optional. The end of the time boundary.
        ///             startTime: string, # Optional. The start of the time boundary.
        ///             timeZone: string, # Optional. The timezone of the time boundary.
        ///           }
        ///         ], # Optional. An array of time boundaries indicating validity periods.
        ///         source: string, # Optional. indicate the source who create the classification detail
        ///         sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///         typeName: string, # Optional. The name of the type.
        ///         lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       }
        ///     ], # Optional. An array of classifications.
        ///     createTime: number, # Optional. The created time of the record.
        ///     createdBy: string, # Optional. The user who created the record.
        ///     customAttributes: Dictionary&lt;string, string&gt;, # Optional. Custom Attribute
        ///     guid: string, # Optional. The GUID of the entity.
        ///     homeId: string, # Optional. The home ID of the entity.
        ///     isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///     labels: [string], # Optional. labels
        ///     meanings: [
        ///       {
        ///         confidence: number, # Optional. The confidence of the term assignment.
        ///         createdBy: string, # Optional. The user who created the record.
        ///         description: string, # Optional. The description of the term assignment.
        ///         displayText: string, # Optional. The display text.
        ///         expression: string, # Optional. The expression of the term assignment.
        ///         relationGuid: string, # Optional. The GUID of the relationship.
        ///         source: string, # Optional. The source of the term.
        ///         status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///         steward: string, # Optional. The steward of the term.
        ///         termGuid: string, # Optional. The GUID of the term.
        ///       }
        ///     ], # Optional. An array of term assignment headers indicating the meanings of the entity.
        ///     provenanceType: number, # Optional. Used to record the provenance of an instance of an entity or relationship.
        ///     proxy: boolean, # Optional. Determines if there&apos;s a proxy.
        ///     relationshipAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of relationship.
        ///     status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///     updateTime: number, # Optional. The update time of the record.
        ///     updatedBy: string, # Optional. The user who updated the record.
        ///     version: number, # Optional. The version of the entity.
        ///     source: string, # Optional. indicate the source who create the classification detail
        ///     sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Owner.
        ///     attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///     typeName: string, # Optional. The name of the type.
        ///     lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   }, # Optional. An instance of an entity - like hive_table, hive_database.
        ///   referredEntities: Dictionary&lt;string, AtlasEntity&gt;, # Optional. The referred entities.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetByUniqueAttributesAsync(string typeName, bool? minExtInfo = null, bool? ignoreRelationships = null, string attrQualifiedName = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(typeName, nameof(typeName));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.GetByUniqueAttributes");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetByUniqueAttributesRequest(typeName, minExtInfo, ignoreRelationships, attrQualifiedName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get complete definition of an entity given its type and unique attribute.
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:
        /// attr:\&lt;attrName&gt;=&lt;attrValue&gt;. 
        /// NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        /// The REST request would look something like this:
        /// GET /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
        /// </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="typeName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="typeName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetByUniqueAttributes with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// Response response = client.GetByUniqueAttributes("<typeName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call GetByUniqueAttributes with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// Response response = client.GetByUniqueAttributes("<typeName>", true, true, "<attrQualifiedName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("businessAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("createTime").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("customAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("homeId").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("provenanceType").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("proxy").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("relationshipAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("updateTime").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("updatedBy").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("version").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("entity").GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("businessAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("createTime").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("customAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("homeId").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("provenanceType").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("proxy").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("relationshipAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("updateTime").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("updatedBy").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("version").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("lastModifiedTS").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AtlasEntityWithExtInfo</c>:
        /// <code>{
        ///   entity: {
        ///     businessAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. Business Attributes
        ///     classifications: [
        ///       {
        ///         entityGuid: string, # Optional. The GUID of the entity.
        ///         entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///         removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///         validityPeriods: [
        ///           {
        ///             endTime: string, # Optional. The end of the time boundary.
        ///             startTime: string, # Optional. The start of the time boundary.
        ///             timeZone: string, # Optional. The timezone of the time boundary.
        ///           }
        ///         ], # Optional. An array of time boundaries indicating validity periods.
        ///         source: string, # Optional. indicate the source who create the classification detail
        ///         sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///         typeName: string, # Optional. The name of the type.
        ///         lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       }
        ///     ], # Optional. An array of classifications.
        ///     createTime: number, # Optional. The created time of the record.
        ///     createdBy: string, # Optional. The user who created the record.
        ///     customAttributes: Dictionary&lt;string, string&gt;, # Optional. Custom Attribute
        ///     guid: string, # Optional. The GUID of the entity.
        ///     homeId: string, # Optional. The home ID of the entity.
        ///     isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///     labels: [string], # Optional. labels
        ///     meanings: [
        ///       {
        ///         confidence: number, # Optional. The confidence of the term assignment.
        ///         createdBy: string, # Optional. The user who created the record.
        ///         description: string, # Optional. The description of the term assignment.
        ///         displayText: string, # Optional. The display text.
        ///         expression: string, # Optional. The expression of the term assignment.
        ///         relationGuid: string, # Optional. The GUID of the relationship.
        ///         source: string, # Optional. The source of the term.
        ///         status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///         steward: string, # Optional. The steward of the term.
        ///         termGuid: string, # Optional. The GUID of the term.
        ///       }
        ///     ], # Optional. An array of term assignment headers indicating the meanings of the entity.
        ///     provenanceType: number, # Optional. Used to record the provenance of an instance of an entity or relationship.
        ///     proxy: boolean, # Optional. Determines if there&apos;s a proxy.
        ///     relationshipAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of relationship.
        ///     status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///     updateTime: number, # Optional. The update time of the record.
        ///     updatedBy: string, # Optional. The user who updated the record.
        ///     version: number, # Optional. The version of the entity.
        ///     source: string, # Optional. indicate the source who create the classification detail
        ///     sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Owner.
        ///     attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///     typeName: string, # Optional. The name of the type.
        ///     lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   }, # Optional. An instance of an entity - like hive_table, hive_database.
        ///   referredEntities: Dictionary&lt;string, AtlasEntity&gt;, # Optional. The referred entities.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetByUniqueAttributes(string typeName, bool? minExtInfo = null, bool? ignoreRelationships = null, string attrQualifiedName = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(typeName, nameof(typeName));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.GetByUniqueAttributes");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetByUniqueAttributesRequest(typeName, minExtInfo, ignoreRelationships, attrQualifiedName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update entity partially - Allow a subset of attributes to be updated on
        /// an entity which is identified by its type and unique attribute  eg: Referenceable.qualifiedName.
        /// Null updates are not possible.
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:
        /// attr:&lt;attrName&gt;=&lt;attrValue&gt;.
        /// NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        /// The REST request would look something like this:
        /// PUT /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
        /// </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="typeName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="typeName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call PartialUpdateEntityByUniqueAttributesAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.PartialUpdateEntityByUniqueAttributesAsync("<typeName>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call PartialUpdateEntityByUniqueAttributesAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new {
        ///     entity = new {
        ///         businessAttributes = new {
        ///             key = new {},
        ///         },
        ///         classifications = new[] {
        ///             new {
        ///                 entityGuid = "<entityGuid>",
        ///                 entityStatus = "ACTIVE",
        ///                 removePropagationsOnEntityDelete = true,
        ///                 validityPeriods = new[] {
        ///                     new {
        ///                         endTime = "<endTime>",
        ///                         startTime = "<startTime>",
        ///                         timeZone = "<timeZone>",
        ///                     }
        ///                 },
        ///                 source = "<source>",
        ///                 sourceDetails = new {
        ///                     key = new {},
        ///                 },
        ///                 attributes = new {
        ///                     key = new {},
        ///                 },
        ///                 typeName = "<typeName>",
        ///                 lastModifiedTS = "<lastModifiedTS>",
        ///             }
        ///         },
        ///         createTime = 123.45f,
        ///         createdBy = "<createdBy>",
        ///         customAttributes = new {
        ///             key = "<String>",
        ///         },
        ///         guid = "<guid>",
        ///         homeId = "<homeId>",
        ///         isIncomplete = true,
        ///         labels = new[] {
        ///             "<String>"
        ///         },
        ///         meanings = new[] {
        ///             new {
        ///                 confidence = 1234,
        ///                 createdBy = "<createdBy>",
        ///                 description = "<description>",
        ///                 displayText = "<displayText>",
        ///                 expression = "<expression>",
        ///                 relationGuid = "<relationGuid>",
        ///                 source = "<source>",
        ///                 status = "DISCOVERED",
        ///                 steward = "<steward>",
        ///                 termGuid = "<termGuid>",
        ///             }
        ///         },
        ///         provenanceType = 123.45f,
        ///         proxy = true,
        ///         relationshipAttributes = new {
        ///             key = new {},
        ///         },
        ///         status = "ACTIVE",
        ///         updateTime = 123.45f,
        ///         updatedBy = "<updatedBy>",
        ///         version = 123.45f,
        ///         source = "<source>",
        ///         sourceDetails = new {
        ///             key = new {},
        ///         },
        ///         contacts = new {
        ///             key = new[] {
        ///                 new {
        ///                     id = "<id>",
        ///                     info = "<info>",
        ///                 }
        ///             },
        ///         },
        ///         attributes = new {
        ///             key = new {},
        ///         },
        ///         typeName = "<typeName>",
        ///         lastModifiedTS = "<lastModifiedTS>",
        ///     },
        ///     referredEntities = new {
        ///         key = new {
        ///             businessAttributes = new {
        ///                 key = new {},
        ///             },
        ///             classifications = new[] {
        ///                 new {
        ///                     entityGuid = "<entityGuid>",
        ///                     entityStatus = "ACTIVE",
        ///                     removePropagationsOnEntityDelete = true,
        ///                     validityPeriods = new[] {
        ///                         new {
        ///                             endTime = "<endTime>",
        ///                             startTime = "<startTime>",
        ///                             timeZone = "<timeZone>",
        ///                         }
        ///                     },
        ///                     source = "<source>",
        ///                     sourceDetails = new {
        ///                         key = new {},
        ///                     },
        ///                     attributes = new {
        ///                         key = new {},
        ///                     },
        ///                     typeName = "<typeName>",
        ///                     lastModifiedTS = "<lastModifiedTS>",
        ///                 }
        ///             },
        ///             createTime = 123.45f,
        ///             createdBy = "<createdBy>",
        ///             customAttributes = new {
        ///                 key = "<String>",
        ///             },
        ///             guid = "<guid>",
        ///             homeId = "<homeId>",
        ///             isIncomplete = true,
        ///             labels = new[] {
        ///                 "<String>"
        ///             },
        ///             meanings = new[] {
        ///                 new {
        ///                     confidence = 1234,
        ///                     createdBy = "<createdBy>",
        ///                     description = "<description>",
        ///                     displayText = "<displayText>",
        ///                     expression = "<expression>",
        ///                     relationGuid = "<relationGuid>",
        ///                     source = "<source>",
        ///                     status = "DISCOVERED",
        ///                     steward = "<steward>",
        ///                     termGuid = "<termGuid>",
        ///                 }
        ///             },
        ///             provenanceType = 123.45f,
        ///             proxy = true,
        ///             relationshipAttributes = new {
        ///                 key = new {},
        ///             },
        ///             status = "ACTIVE",
        ///             updateTime = 123.45f,
        ///             updatedBy = "<updatedBy>",
        ///             version = 123.45f,
        ///             source = "<source>",
        ///             sourceDetails = new {
        ///                 key = new {},
        ///             },
        ///             contacts = new {
        ///                 key = new[] {
        ///                     new {
        ///                         id = "<id>",
        ///                         info = "<info>",
        ///                     }
        ///                 },
        ///             },
        ///             attributes = new {
        ///                 key = new {},
        ///             },
        ///             typeName = "<typeName>",
        ///             lastModifiedTS = "<lastModifiedTS>",
        ///         },
        ///     },
        /// };
        /// 
        /// Response response = await client.PartialUpdateEntityByUniqueAttributesAsync("<typeName>", RequestContent.Create(data), "<attrQualifiedName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("guidAssignments").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("lastModifiedTS").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AtlasEntityWithExtInfo</c>:
        /// <code>{
        ///   entity: {
        ///     businessAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. Business Attributes
        ///     classifications: [
        ///       {
        ///         entityGuid: string, # Optional. The GUID of the entity.
        ///         entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///         removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///         validityPeriods: [
        ///           {
        ///             endTime: string, # Optional. The end of the time boundary.
        ///             startTime: string, # Optional. The start of the time boundary.
        ///             timeZone: string, # Optional. The timezone of the time boundary.
        ///           }
        ///         ], # Optional. An array of time boundaries indicating validity periods.
        ///         source: string, # Optional. indicate the source who create the classification detail
        ///         sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///         typeName: string, # Optional. The name of the type.
        ///         lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       }
        ///     ], # Optional. An array of classifications.
        ///     createTime: number, # Optional. The created time of the record.
        ///     createdBy: string, # Optional. The user who created the record.
        ///     customAttributes: Dictionary&lt;string, string&gt;, # Optional. Custom Attribute
        ///     guid: string, # Optional. The GUID of the entity.
        ///     homeId: string, # Optional. The home ID of the entity.
        ///     isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///     labels: [string], # Optional. labels
        ///     meanings: [
        ///       {
        ///         confidence: number, # Optional. The confidence of the term assignment.
        ///         createdBy: string, # Optional. The user who created the record.
        ///         description: string, # Optional. The description of the term assignment.
        ///         displayText: string, # Optional. The display text.
        ///         expression: string, # Optional. The expression of the term assignment.
        ///         relationGuid: string, # Optional. The GUID of the relationship.
        ///         source: string, # Optional. The source of the term.
        ///         status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///         steward: string, # Optional. The steward of the term.
        ///         termGuid: string, # Optional. The GUID of the term.
        ///       }
        ///     ], # Optional. An array of term assignment headers indicating the meanings of the entity.
        ///     provenanceType: number, # Optional. Used to record the provenance of an instance of an entity or relationship.
        ///     proxy: boolean, # Optional. Determines if there&apos;s a proxy.
        ///     relationshipAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of relationship.
        ///     status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///     updateTime: number, # Optional. The update time of the record.
        ///     updatedBy: string, # Optional. The user who updated the record.
        ///     version: number, # Optional. The version of the entity.
        ///     source: string, # Optional. indicate the source who create the classification detail
        ///     sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Owner.
        ///     attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///     typeName: string, # Optional. The name of the type.
        ///     lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   }, # Optional. An instance of an entity - like hive_table, hive_database.
        ///   referredEntities: Dictionary&lt;string, AtlasEntity&gt;, # Optional. The referred entities.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>EntityMutationResponse</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;, # Optional. A map of GUID assignments with entities.
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;, # Optional. The entity headers of mutated entities.
        ///   partialUpdatedEntities: [
        ///     {
        ///       classificationNames: [string], # Optional. An array of classification names.
        ///       classifications: [
        ///         {
        ///           entityGuid: string, # Optional. The GUID of the entity.
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///           removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///           validityPeriods: [
        ///             {
        ///               endTime: string, # Optional. The end of the time boundary.
        ///               startTime: string, # Optional. The start of the time boundary.
        ///               timeZone: string, # Optional. The timezone of the time boundary.
        ///             }
        ///           ], # Optional. An array of time boundaries indicating validity periods.
        ///           source: string, # Optional. indicate the source who create the classification detail
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///           attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///           typeName: string, # Optional. The name of the type.
        ///           lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///         }
        ///       ], # Optional. An array of classifications.
        ///       displayText: string, # Optional. The display text.
        ///       guid: string, # Optional. The GUID of the record.
        ///       isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///       labels: [string], # Optional. labels
        ///       meaningNames: [string], # Optional. An array of meanings.
        ///       meanings: [
        ///         {
        ///           confidence: number, # Optional. The confidence of the term assignment.
        ///           createdBy: string, # Optional. The user who created the record.
        ///           description: string, # Optional. The description of the term assignment.
        ///           displayText: string, # Optional. The display text.
        ///           expression: string, # Optional. The expression of the term assignment.
        ///           relationGuid: string, # Optional. The GUID of the relationship.
        ///           source: string, # Optional. The source of the term.
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///           steward: string, # Optional. The steward of the term.
        ///           termGuid: string, # Optional. The GUID of the term.
        ///         }
        ///       ], # Optional. An array of term assignment headers.
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///     }
        ///   ], # Optional. An array of entity headers that partially updated.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PartialUpdateEntityByUniqueAttributesAsync(string typeName, RequestContent content, string attrQualifiedName = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(typeName, nameof(typeName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.PartialUpdateEntityByUniqueAttributes");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePartialUpdateEntityByUniqueAttributesRequest(typeName, content, attrQualifiedName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update entity partially - Allow a subset of attributes to be updated on
        /// an entity which is identified by its type and unique attribute  eg: Referenceable.qualifiedName.
        /// Null updates are not possible.
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:
        /// attr:&lt;attrName&gt;=&lt;attrValue&gt;.
        /// NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        /// The REST request would look something like this:
        /// PUT /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
        /// </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="typeName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="typeName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call PartialUpdateEntityByUniqueAttributes with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.PartialUpdateEntityByUniqueAttributes("<typeName>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call PartialUpdateEntityByUniqueAttributes with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new {
        ///     entity = new {
        ///         businessAttributes = new {
        ///             key = new {},
        ///         },
        ///         classifications = new[] {
        ///             new {
        ///                 entityGuid = "<entityGuid>",
        ///                 entityStatus = "ACTIVE",
        ///                 removePropagationsOnEntityDelete = true,
        ///                 validityPeriods = new[] {
        ///                     new {
        ///                         endTime = "<endTime>",
        ///                         startTime = "<startTime>",
        ///                         timeZone = "<timeZone>",
        ///                     }
        ///                 },
        ///                 source = "<source>",
        ///                 sourceDetails = new {
        ///                     key = new {},
        ///                 },
        ///                 attributes = new {
        ///                     key = new {},
        ///                 },
        ///                 typeName = "<typeName>",
        ///                 lastModifiedTS = "<lastModifiedTS>",
        ///             }
        ///         },
        ///         createTime = 123.45f,
        ///         createdBy = "<createdBy>",
        ///         customAttributes = new {
        ///             key = "<String>",
        ///         },
        ///         guid = "<guid>",
        ///         homeId = "<homeId>",
        ///         isIncomplete = true,
        ///         labels = new[] {
        ///             "<String>"
        ///         },
        ///         meanings = new[] {
        ///             new {
        ///                 confidence = 1234,
        ///                 createdBy = "<createdBy>",
        ///                 description = "<description>",
        ///                 displayText = "<displayText>",
        ///                 expression = "<expression>",
        ///                 relationGuid = "<relationGuid>",
        ///                 source = "<source>",
        ///                 status = "DISCOVERED",
        ///                 steward = "<steward>",
        ///                 termGuid = "<termGuid>",
        ///             }
        ///         },
        ///         provenanceType = 123.45f,
        ///         proxy = true,
        ///         relationshipAttributes = new {
        ///             key = new {},
        ///         },
        ///         status = "ACTIVE",
        ///         updateTime = 123.45f,
        ///         updatedBy = "<updatedBy>",
        ///         version = 123.45f,
        ///         source = "<source>",
        ///         sourceDetails = new {
        ///             key = new {},
        ///         },
        ///         contacts = new {
        ///             key = new[] {
        ///                 new {
        ///                     id = "<id>",
        ///                     info = "<info>",
        ///                 }
        ///             },
        ///         },
        ///         attributes = new {
        ///             key = new {},
        ///         },
        ///         typeName = "<typeName>",
        ///         lastModifiedTS = "<lastModifiedTS>",
        ///     },
        ///     referredEntities = new {
        ///         key = new {
        ///             businessAttributes = new {
        ///                 key = new {},
        ///             },
        ///             classifications = new[] {
        ///                 new {
        ///                     entityGuid = "<entityGuid>",
        ///                     entityStatus = "ACTIVE",
        ///                     removePropagationsOnEntityDelete = true,
        ///                     validityPeriods = new[] {
        ///                         new {
        ///                             endTime = "<endTime>",
        ///                             startTime = "<startTime>",
        ///                             timeZone = "<timeZone>",
        ///                         }
        ///                     },
        ///                     source = "<source>",
        ///                     sourceDetails = new {
        ///                         key = new {},
        ///                     },
        ///                     attributes = new {
        ///                         key = new {},
        ///                     },
        ///                     typeName = "<typeName>",
        ///                     lastModifiedTS = "<lastModifiedTS>",
        ///                 }
        ///             },
        ///             createTime = 123.45f,
        ///             createdBy = "<createdBy>",
        ///             customAttributes = new {
        ///                 key = "<String>",
        ///             },
        ///             guid = "<guid>",
        ///             homeId = "<homeId>",
        ///             isIncomplete = true,
        ///             labels = new[] {
        ///                 "<String>"
        ///             },
        ///             meanings = new[] {
        ///                 new {
        ///                     confidence = 1234,
        ///                     createdBy = "<createdBy>",
        ///                     description = "<description>",
        ///                     displayText = "<displayText>",
        ///                     expression = "<expression>",
        ///                     relationGuid = "<relationGuid>",
        ///                     source = "<source>",
        ///                     status = "DISCOVERED",
        ///                     steward = "<steward>",
        ///                     termGuid = "<termGuid>",
        ///                 }
        ///             },
        ///             provenanceType = 123.45f,
        ///             proxy = true,
        ///             relationshipAttributes = new {
        ///                 key = new {},
        ///             },
        ///             status = "ACTIVE",
        ///             updateTime = 123.45f,
        ///             updatedBy = "<updatedBy>",
        ///             version = 123.45f,
        ///             source = "<source>",
        ///             sourceDetails = new {
        ///                 key = new {},
        ///             },
        ///             contacts = new {
        ///                 key = new[] {
        ///                     new {
        ///                         id = "<id>",
        ///                         info = "<info>",
        ///                     }
        ///                 },
        ///             },
        ///             attributes = new {
        ///                 key = new {},
        ///             },
        ///             typeName = "<typeName>",
        ///             lastModifiedTS = "<lastModifiedTS>",
        ///         },
        ///     },
        /// };
        /// 
        /// Response response = client.PartialUpdateEntityByUniqueAttributes("<typeName>", RequestContent.Create(data), "<attrQualifiedName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("guidAssignments").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("lastModifiedTS").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AtlasEntityWithExtInfo</c>:
        /// <code>{
        ///   entity: {
        ///     businessAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. Business Attributes
        ///     classifications: [
        ///       {
        ///         entityGuid: string, # Optional. The GUID of the entity.
        ///         entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///         removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///         validityPeriods: [
        ///           {
        ///             endTime: string, # Optional. The end of the time boundary.
        ///             startTime: string, # Optional. The start of the time boundary.
        ///             timeZone: string, # Optional. The timezone of the time boundary.
        ///           }
        ///         ], # Optional. An array of time boundaries indicating validity periods.
        ///         source: string, # Optional. indicate the source who create the classification detail
        ///         sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///         typeName: string, # Optional. The name of the type.
        ///         lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       }
        ///     ], # Optional. An array of classifications.
        ///     createTime: number, # Optional. The created time of the record.
        ///     createdBy: string, # Optional. The user who created the record.
        ///     customAttributes: Dictionary&lt;string, string&gt;, # Optional. Custom Attribute
        ///     guid: string, # Optional. The GUID of the entity.
        ///     homeId: string, # Optional. The home ID of the entity.
        ///     isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///     labels: [string], # Optional. labels
        ///     meanings: [
        ///       {
        ///         confidence: number, # Optional. The confidence of the term assignment.
        ///         createdBy: string, # Optional. The user who created the record.
        ///         description: string, # Optional. The description of the term assignment.
        ///         displayText: string, # Optional. The display text.
        ///         expression: string, # Optional. The expression of the term assignment.
        ///         relationGuid: string, # Optional. The GUID of the relationship.
        ///         source: string, # Optional. The source of the term.
        ///         status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///         steward: string, # Optional. The steward of the term.
        ///         termGuid: string, # Optional. The GUID of the term.
        ///       }
        ///     ], # Optional. An array of term assignment headers indicating the meanings of the entity.
        ///     provenanceType: number, # Optional. Used to record the provenance of an instance of an entity or relationship.
        ///     proxy: boolean, # Optional. Determines if there&apos;s a proxy.
        ///     relationshipAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of relationship.
        ///     status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///     updateTime: number, # Optional. The update time of the record.
        ///     updatedBy: string, # Optional. The user who updated the record.
        ///     version: number, # Optional. The version of the entity.
        ///     source: string, # Optional. indicate the source who create the classification detail
        ///     sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Owner.
        ///     attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///     typeName: string, # Optional. The name of the type.
        ///     lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   }, # Optional. An instance of an entity - like hive_table, hive_database.
        ///   referredEntities: Dictionary&lt;string, AtlasEntity&gt;, # Optional. The referred entities.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>EntityMutationResponse</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;, # Optional. A map of GUID assignments with entities.
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;, # Optional. The entity headers of mutated entities.
        ///   partialUpdatedEntities: [
        ///     {
        ///       classificationNames: [string], # Optional. An array of classification names.
        ///       classifications: [
        ///         {
        ///           entityGuid: string, # Optional. The GUID of the entity.
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///           removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///           validityPeriods: [
        ///             {
        ///               endTime: string, # Optional. The end of the time boundary.
        ///               startTime: string, # Optional. The start of the time boundary.
        ///               timeZone: string, # Optional. The timezone of the time boundary.
        ///             }
        ///           ], # Optional. An array of time boundaries indicating validity periods.
        ///           source: string, # Optional. indicate the source who create the classification detail
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///           attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///           typeName: string, # Optional. The name of the type.
        ///           lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///         }
        ///       ], # Optional. An array of classifications.
        ///       displayText: string, # Optional. The display text.
        ///       guid: string, # Optional. The GUID of the record.
        ///       isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///       labels: [string], # Optional. labels
        ///       meaningNames: [string], # Optional. An array of meanings.
        ///       meanings: [
        ///         {
        ///           confidence: number, # Optional. The confidence of the term assignment.
        ///           createdBy: string, # Optional. The user who created the record.
        ///           description: string, # Optional. The description of the term assignment.
        ///           displayText: string, # Optional. The display text.
        ///           expression: string, # Optional. The expression of the term assignment.
        ///           relationGuid: string, # Optional. The GUID of the relationship.
        ///           source: string, # Optional. The source of the term.
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///           steward: string, # Optional. The steward of the term.
        ///           termGuid: string, # Optional. The GUID of the term.
        ///         }
        ///       ], # Optional. An array of term assignment headers.
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///     }
        ///   ], # Optional. An array of entity headers that partially updated.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PartialUpdateEntityByUniqueAttributes(string typeName, RequestContent content, string attrQualifiedName = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(typeName, nameof(typeName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.PartialUpdateEntityByUniqueAttributes");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePartialUpdateEntityByUniqueAttributesRequest(typeName, content, attrQualifiedName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete an entity identified by its type and unique attributes.
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:
        /// attr:\&lt;attrName&gt;=\&lt;attrValue&gt;.
        /// NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        /// The REST request would look something like this:
        /// DELETE /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
        /// </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="typeName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="typeName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call DeleteByUniqueAttributeAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// Response response = await client.DeleteByUniqueAttributeAsync("<typeName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call DeleteByUniqueAttributeAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// Response response = await client.DeleteByUniqueAttributeAsync("<typeName>", "<attrQualifiedName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("guidAssignments").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("lastModifiedTS").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>EntityMutationResponse</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;, # Optional. A map of GUID assignments with entities.
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;, # Optional. The entity headers of mutated entities.
        ///   partialUpdatedEntities: [
        ///     {
        ///       classificationNames: [string], # Optional. An array of classification names.
        ///       classifications: [
        ///         {
        ///           entityGuid: string, # Optional. The GUID of the entity.
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///           removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///           validityPeriods: [
        ///             {
        ///               endTime: string, # Optional. The end of the time boundary.
        ///               startTime: string, # Optional. The start of the time boundary.
        ///               timeZone: string, # Optional. The timezone of the time boundary.
        ///             }
        ///           ], # Optional. An array of time boundaries indicating validity periods.
        ///           source: string, # Optional. indicate the source who create the classification detail
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///           attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///           typeName: string, # Optional. The name of the type.
        ///           lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///         }
        ///       ], # Optional. An array of classifications.
        ///       displayText: string, # Optional. The display text.
        ///       guid: string, # Optional. The GUID of the record.
        ///       isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///       labels: [string], # Optional. labels
        ///       meaningNames: [string], # Optional. An array of meanings.
        ///       meanings: [
        ///         {
        ///           confidence: number, # Optional. The confidence of the term assignment.
        ///           createdBy: string, # Optional. The user who created the record.
        ///           description: string, # Optional. The description of the term assignment.
        ///           displayText: string, # Optional. The display text.
        ///           expression: string, # Optional. The expression of the term assignment.
        ///           relationGuid: string, # Optional. The GUID of the relationship.
        ///           source: string, # Optional. The source of the term.
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///           steward: string, # Optional. The steward of the term.
        ///           termGuid: string, # Optional. The GUID of the term.
        ///         }
        ///       ], # Optional. An array of term assignment headers.
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///     }
        ///   ], # Optional. An array of entity headers that partially updated.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> DeleteByUniqueAttributeAsync(string typeName, string attrQualifiedName = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(typeName, nameof(typeName));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.DeleteByUniqueAttribute");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteByUniqueAttributeRequest(typeName, attrQualifiedName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete an entity identified by its type and unique attributes.
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:
        /// attr:\&lt;attrName&gt;=\&lt;attrValue&gt;.
        /// NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        /// The REST request would look something like this:
        /// DELETE /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
        /// </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="typeName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="typeName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call DeleteByUniqueAttribute with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// Response response = client.DeleteByUniqueAttribute("<typeName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call DeleteByUniqueAttribute with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// Response response = client.DeleteByUniqueAttribute("<typeName>", "<attrQualifiedName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("guidAssignments").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("lastModifiedTS").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>EntityMutationResponse</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;, # Optional. A map of GUID assignments with entities.
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;, # Optional. The entity headers of mutated entities.
        ///   partialUpdatedEntities: [
        ///     {
        ///       classificationNames: [string], # Optional. An array of classification names.
        ///       classifications: [
        ///         {
        ///           entityGuid: string, # Optional. The GUID of the entity.
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///           removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///           validityPeriods: [
        ///             {
        ///               endTime: string, # Optional. The end of the time boundary.
        ///               startTime: string, # Optional. The start of the time boundary.
        ///               timeZone: string, # Optional. The timezone of the time boundary.
        ///             }
        ///           ], # Optional. An array of time boundaries indicating validity periods.
        ///           source: string, # Optional. indicate the source who create the classification detail
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///           attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///           typeName: string, # Optional. The name of the type.
        ///           lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///         }
        ///       ], # Optional. An array of classifications.
        ///       displayText: string, # Optional. The display text.
        ///       guid: string, # Optional. The GUID of the record.
        ///       isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///       labels: [string], # Optional. labels
        ///       meaningNames: [string], # Optional. An array of meanings.
        ///       meanings: [
        ///         {
        ///           confidence: number, # Optional. The confidence of the term assignment.
        ///           createdBy: string, # Optional. The user who created the record.
        ///           description: string, # Optional. The description of the term assignment.
        ///           displayText: string, # Optional. The display text.
        ///           expression: string, # Optional. The expression of the term assignment.
        ///           relationGuid: string, # Optional. The GUID of the relationship.
        ///           source: string, # Optional. The source of the term.
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///           steward: string, # Optional. The steward of the term.
        ///           termGuid: string, # Optional. The GUID of the term.
        ///         }
        ///       ], # Optional. An array of term assignment headers.
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///     }
        ///   ], # Optional. An array of entity headers that partially updated.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response DeleteByUniqueAttribute(string typeName, string attrQualifiedName = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(typeName, nameof(typeName));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.DeleteByUniqueAttribute");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteByUniqueAttributeRequest(typeName, attrQualifiedName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a given classification from an entity identified by its type and unique attributes. </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="classificationName"> The name of the classification. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="typeName"/> or <paramref name="classificationName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="typeName"/> or <paramref name="classificationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteClassificationByUniqueAttributeAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// Response response = await client.DeleteClassificationByUniqueAttributeAsync("<typeName>", "<classificationName>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call DeleteClassificationByUniqueAttributeAsync with all parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// Response response = await client.DeleteClassificationByUniqueAttributeAsync("<typeName>", "<classificationName>", "<attrQualifiedName>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteClassificationByUniqueAttributeAsync(string typeName, string classificationName, string attrQualifiedName = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(typeName, nameof(typeName));
            Argument.AssertNotNullOrEmpty(classificationName, nameof(classificationName));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.DeleteClassificationByUniqueAttribute");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteClassificationByUniqueAttributeRequest(typeName, classificationName, attrQualifiedName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a given classification from an entity identified by its type and unique attributes. </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="classificationName"> The name of the classification. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="typeName"/> or <paramref name="classificationName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="typeName"/> or <paramref name="classificationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteClassificationByUniqueAttribute with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// Response response = client.DeleteClassificationByUniqueAttribute("<typeName>", "<classificationName>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call DeleteClassificationByUniqueAttribute with all parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// Response response = client.DeleteClassificationByUniqueAttribute("<typeName>", "<classificationName>", "<attrQualifiedName>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response DeleteClassificationByUniqueAttribute(string typeName, string classificationName, string attrQualifiedName = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(typeName, nameof(typeName));
            Argument.AssertNotNullOrEmpty(classificationName, nameof(classificationName));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.DeleteClassificationByUniqueAttribute");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteClassificationByUniqueAttributeRequest(typeName, classificationName, attrQualifiedName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add classification to the entity identified by its type and unique attributes. </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="typeName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="typeName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call AddClassificationsByUniqueAttributeAsync with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new[] {
        ///     new {}
        /// };
        /// 
        /// Response response = await client.AddClassificationsByUniqueAttributeAsync("<typeName>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call AddClassificationsByUniqueAttributeAsync with all parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new[] {
        ///     new {
        ///         entityGuid = "<entityGuid>",
        ///         entityStatus = "ACTIVE",
        ///         removePropagationsOnEntityDelete = true,
        ///         validityPeriods = new[] {
        ///             new {
        ///                 endTime = "<endTime>",
        ///                 startTime = "<startTime>",
        ///                 timeZone = "<timeZone>",
        ///             }
        ///         },
        ///         source = "<source>",
        ///         sourceDetails = new {
        ///             key = new {},
        ///         },
        ///         attributes = new {
        ///             key = new {},
        ///         },
        ///         typeName = "<typeName>",
        ///         lastModifiedTS = "<lastModifiedTS>",
        ///     }
        /// };
        /// 
        /// Response response = await client.AddClassificationsByUniqueAttributeAsync("<typeName>", RequestContent.Create(data), "<attrQualifiedName>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AtlasClassification</c>:
        /// <code>{
        ///   entityGuid: string, # Optional. The GUID of the entity.
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///   removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///   validityPeriods: [
        ///     {
        ///       endTime: string, # Optional. The end of the time boundary.
        ///       startTime: string, # Optional. The start of the time boundary.
        ///       timeZone: string, # Optional. The timezone of the time boundary.
        ///     }
        ///   ], # Optional. An array of time boundaries indicating validity periods.
        ///   source: string, # Optional. indicate the source who create the classification detail
        ///   sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///   attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///   typeName: string, # Optional. The name of the type.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> AddClassificationsByUniqueAttributeAsync(string typeName, RequestContent content, string attrQualifiedName = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(typeName, nameof(typeName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.AddClassificationsByUniqueAttribute");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddClassificationsByUniqueAttributeRequest(typeName, content, attrQualifiedName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add classification to the entity identified by its type and unique attributes. </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="typeName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="typeName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call AddClassificationsByUniqueAttribute with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new[] {
        ///     new {}
        /// };
        /// 
        /// Response response = client.AddClassificationsByUniqueAttribute("<typeName>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call AddClassificationsByUniqueAttribute with all parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new[] {
        ///     new {
        ///         entityGuid = "<entityGuid>",
        ///         entityStatus = "ACTIVE",
        ///         removePropagationsOnEntityDelete = true,
        ///         validityPeriods = new[] {
        ///             new {
        ///                 endTime = "<endTime>",
        ///                 startTime = "<startTime>",
        ///                 timeZone = "<timeZone>",
        ///             }
        ///         },
        ///         source = "<source>",
        ///         sourceDetails = new {
        ///             key = new {},
        ///         },
        ///         attributes = new {
        ///             key = new {},
        ///         },
        ///         typeName = "<typeName>",
        ///         lastModifiedTS = "<lastModifiedTS>",
        ///     }
        /// };
        /// 
        /// Response response = client.AddClassificationsByUniqueAttribute("<typeName>", RequestContent.Create(data), "<attrQualifiedName>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AtlasClassification</c>:
        /// <code>{
        ///   entityGuid: string, # Optional. The GUID of the entity.
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///   removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///   validityPeriods: [
        ///     {
        ///       endTime: string, # Optional. The end of the time boundary.
        ///       startTime: string, # Optional. The start of the time boundary.
        ///       timeZone: string, # Optional. The timezone of the time boundary.
        ///     }
        ///   ], # Optional. An array of time boundaries indicating validity periods.
        ///   source: string, # Optional. indicate the source who create the classification detail
        ///   sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///   attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///   typeName: string, # Optional. The name of the type.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response AddClassificationsByUniqueAttribute(string typeName, RequestContent content, string attrQualifiedName = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(typeName, nameof(typeName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.AddClassificationsByUniqueAttribute");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddClassificationsByUniqueAttributeRequest(typeName, content, attrQualifiedName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update classification on an entity identified by its type and unique attributes. </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="typeName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="typeName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call UpdateClassificationsByUniqueAttributeAsync with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new[] {
        ///     new {}
        /// };
        /// 
        /// Response response = await client.UpdateClassificationsByUniqueAttributeAsync("<typeName>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call UpdateClassificationsByUniqueAttributeAsync with all parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new[] {
        ///     new {
        ///         entityGuid = "<entityGuid>",
        ///         entityStatus = "ACTIVE",
        ///         removePropagationsOnEntityDelete = true,
        ///         validityPeriods = new[] {
        ///             new {
        ///                 endTime = "<endTime>",
        ///                 startTime = "<startTime>",
        ///                 timeZone = "<timeZone>",
        ///             }
        ///         },
        ///         source = "<source>",
        ///         sourceDetails = new {
        ///             key = new {},
        ///         },
        ///         attributes = new {
        ///             key = new {},
        ///         },
        ///         typeName = "<typeName>",
        ///         lastModifiedTS = "<lastModifiedTS>",
        ///     }
        /// };
        /// 
        /// Response response = await client.UpdateClassificationsByUniqueAttributeAsync("<typeName>", RequestContent.Create(data), "<attrQualifiedName>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AtlasClassification</c>:
        /// <code>{
        ///   entityGuid: string, # Optional. The GUID of the entity.
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///   removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///   validityPeriods: [
        ///     {
        ///       endTime: string, # Optional. The end of the time boundary.
        ///       startTime: string, # Optional. The start of the time boundary.
        ///       timeZone: string, # Optional. The timezone of the time boundary.
        ///     }
        ///   ], # Optional. An array of time boundaries indicating validity periods.
        ///   source: string, # Optional. indicate the source who create the classification detail
        ///   sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///   attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///   typeName: string, # Optional. The name of the type.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> UpdateClassificationsByUniqueAttributeAsync(string typeName, RequestContent content, string attrQualifiedName = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(typeName, nameof(typeName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.UpdateClassificationsByUniqueAttribute");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateClassificationsByUniqueAttributeRequest(typeName, content, attrQualifiedName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update classification on an entity identified by its type and unique attributes. </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="typeName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="typeName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call UpdateClassificationsByUniqueAttribute with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new[] {
        ///     new {}
        /// };
        /// 
        /// Response response = client.UpdateClassificationsByUniqueAttribute("<typeName>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call UpdateClassificationsByUniqueAttribute with all parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new[] {
        ///     new {
        ///         entityGuid = "<entityGuid>",
        ///         entityStatus = "ACTIVE",
        ///         removePropagationsOnEntityDelete = true,
        ///         validityPeriods = new[] {
        ///             new {
        ///                 endTime = "<endTime>",
        ///                 startTime = "<startTime>",
        ///                 timeZone = "<timeZone>",
        ///             }
        ///         },
        ///         source = "<source>",
        ///         sourceDetails = new {
        ///             key = new {},
        ///         },
        ///         attributes = new {
        ///             key = new {},
        ///         },
        ///         typeName = "<typeName>",
        ///         lastModifiedTS = "<lastModifiedTS>",
        ///     }
        /// };
        /// 
        /// Response response = client.UpdateClassificationsByUniqueAttribute("<typeName>", RequestContent.Create(data), "<attrQualifiedName>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AtlasClassification</c>:
        /// <code>{
        ///   entityGuid: string, # Optional. The GUID of the entity.
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///   removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///   validityPeriods: [
        ///     {
        ///       endTime: string, # Optional. The end of the time boundary.
        ///       startTime: string, # Optional. The start of the time boundary.
        ///       timeZone: string, # Optional. The timezone of the time boundary.
        ///     }
        ///   ], # Optional. An array of time boundaries indicating validity periods.
        ///   source: string, # Optional. indicate the source who create the classification detail
        ///   sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///   attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///   typeName: string, # Optional. The name of the type.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response UpdateClassificationsByUniqueAttribute(string typeName, RequestContent content, string attrQualifiedName = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(typeName, nameof(typeName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.UpdateClassificationsByUniqueAttribute");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateClassificationsByUniqueAttributeRequest(typeName, content, attrQualifiedName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Set classifications on entities in bulk. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call SetClassificationsAsync and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.SetClassificationsAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// This sample shows how to call SetClassificationsAsync with all request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new {
        ///     guidHeaderMap = new {
        ///         key = new {
        ///             classificationNames = new[] {
        ///                 "<String>"
        ///             },
        ///             classifications = new[] {
        ///                 new {
        ///                     entityGuid = "<entityGuid>",
        ///                     entityStatus = "ACTIVE",
        ///                     removePropagationsOnEntityDelete = true,
        ///                     validityPeriods = new[] {
        ///                         new {
        ///                             endTime = "<endTime>",
        ///                             startTime = "<startTime>",
        ///                             timeZone = "<timeZone>",
        ///                         }
        ///                     },
        ///                     source = "<source>",
        ///                     sourceDetails = new {
        ///                         key = new {},
        ///                     },
        ///                     attributes = new {
        ///                         key = new {},
        ///                     },
        ///                     typeName = "<typeName>",
        ///                     lastModifiedTS = "<lastModifiedTS>",
        ///                 }
        ///             },
        ///             displayText = "<displayText>",
        ///             guid = "<guid>",
        ///             isIncomplete = true,
        ///             labels = new[] {
        ///                 "<String>"
        ///             },
        ///             meaningNames = new[] {
        ///                 "<String>"
        ///             },
        ///             meanings = new[] {
        ///                 new {
        ///                     confidence = 1234,
        ///                     createdBy = "<createdBy>",
        ///                     description = "<description>",
        ///                     displayText = "<displayText>",
        ///                     expression = "<expression>",
        ///                     relationGuid = "<relationGuid>",
        ///                     source = "<source>",
        ///                     status = "DISCOVERED",
        ///                     steward = "<steward>",
        ///                     termGuid = "<termGuid>",
        ///                 }
        ///             },
        ///             status = "ACTIVE",
        ///             attributes = new {
        ///                 key = new {},
        ///             },
        ///             typeName = "<typeName>",
        ///             lastModifiedTS = "<lastModifiedTS>",
        ///         },
        ///     },
        /// };
        /// 
        /// Response response = await client.SetClassificationsAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AtlasEntityHeaders</c>:
        /// <code>{
        ///   guidHeaderMap: Dictionary&lt;string, AtlasEntityHeader&gt;, # Optional. The description of the guid header map,
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> SetClassificationsAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.SetClassifications");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSetClassificationsRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Set classifications on entities in bulk. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call SetClassifications and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.SetClassifications(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// This sample shows how to call SetClassifications with all request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new {
        ///     guidHeaderMap = new {
        ///         key = new {
        ///             classificationNames = new[] {
        ///                 "<String>"
        ///             },
        ///             classifications = new[] {
        ///                 new {
        ///                     entityGuid = "<entityGuid>",
        ///                     entityStatus = "ACTIVE",
        ///                     removePropagationsOnEntityDelete = true,
        ///                     validityPeriods = new[] {
        ///                         new {
        ///                             endTime = "<endTime>",
        ///                             startTime = "<startTime>",
        ///                             timeZone = "<timeZone>",
        ///                         }
        ///                     },
        ///                     source = "<source>",
        ///                     sourceDetails = new {
        ///                         key = new {},
        ///                     },
        ///                     attributes = new {
        ///                         key = new {},
        ///                     },
        ///                     typeName = "<typeName>",
        ///                     lastModifiedTS = "<lastModifiedTS>",
        ///                 }
        ///             },
        ///             displayText = "<displayText>",
        ///             guid = "<guid>",
        ///             isIncomplete = true,
        ///             labels = new[] {
        ///                 "<String>"
        ///             },
        ///             meaningNames = new[] {
        ///                 "<String>"
        ///             },
        ///             meanings = new[] {
        ///                 new {
        ///                     confidence = 1234,
        ///                     createdBy = "<createdBy>",
        ///                     description = "<description>",
        ///                     displayText = "<displayText>",
        ///                     expression = "<expression>",
        ///                     relationGuid = "<relationGuid>",
        ///                     source = "<source>",
        ///                     status = "DISCOVERED",
        ///                     steward = "<steward>",
        ///                     termGuid = "<termGuid>",
        ///                 }
        ///             },
        ///             status = "ACTIVE",
        ///             attributes = new {
        ///                 key = new {},
        ///             },
        ///             typeName = "<typeName>",
        ///             lastModifiedTS = "<lastModifiedTS>",
        ///         },
        ///     },
        /// };
        /// 
        /// Response response = client.SetClassifications(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AtlasEntityHeaders</c>:
        /// <code>{
        ///   guidHeaderMap: Dictionary&lt;string, AtlasEntityHeader&gt;, # Optional. The description of the guid header map,
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response SetClassifications(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.SetClassifications");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSetClassificationsRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Bulk API to retrieve list of entities identified by its unique attributes.
        /// 
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format
        /// 
        /// typeName=\&lt;typeName&gt;&amp;attr_1:\&lt;attrName&gt;=\&lt;attrValue&gt;&amp;attr_2:\&lt;attrName&gt;=\&lt;attrValue&gt;&amp;attr_3:\&lt;attrName&gt;=\&lt;attrValue&gt;
        /// 
        /// NOTE: The attrName should be an unique attribute for the given entity-type
        /// 
        /// The REST request would look something like this
        /// 
        /// GET /v2/entity/bulk/uniqueAttribute/type/hive_db?attr_0:qualifiedName=db1@cl1&amp;attr_2:qualifiedName=db2@cl1
        /// </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="attrNQualifiedName"> Qualified name of an entity. E.g. to find 2 entities you can set attrs_0:qualifiedName=db1@cl1&amp;attrs_2:qualifiedName=db2@cl1. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="typeName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="typeName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetEntitiesByUniqueAttributesAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// Response response = await client.GetEntitiesByUniqueAttributesAsync("<typeName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call GetEntitiesByUniqueAttributesAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// Response response = await client.GetEntitiesByUniqueAttributesAsync("<typeName>", true, true, "<attrNQualifiedName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("businessAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("createTime").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("customAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("homeId").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("provenanceType").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("proxy").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("relationshipAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("updateTime").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("updatedBy").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("version").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("businessAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("createTime").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("customAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("homeId").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("provenanceType").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("proxy").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("relationshipAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("updateTime").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("updatedBy").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("version").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("lastModifiedTS").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AtlasEntitiesWithExtInfo</c>:
        /// <code>{
        ///   entities: [
        ///     {
        ///       businessAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. Business Attributes
        ///       classifications: [
        ///         {
        ///           entityGuid: string, # Optional. The GUID of the entity.
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///           removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///           validityPeriods: [
        ///             {
        ///               endTime: string, # Optional. The end of the time boundary.
        ///               startTime: string, # Optional. The start of the time boundary.
        ///               timeZone: string, # Optional. The timezone of the time boundary.
        ///             }
        ///           ], # Optional. An array of time boundaries indicating validity periods.
        ///           source: string, # Optional. indicate the source who create the classification detail
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///           attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///           typeName: string, # Optional. The name of the type.
        ///           lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///         }
        ///       ], # Optional. An array of classifications.
        ///       createTime: number, # Optional. The created time of the record.
        ///       createdBy: string, # Optional. The user who created the record.
        ///       customAttributes: Dictionary&lt;string, string&gt;, # Optional. Custom Attribute
        ///       guid: string, # Optional. The GUID of the entity.
        ///       homeId: string, # Optional. The home ID of the entity.
        ///       isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///       labels: [string], # Optional. labels
        ///       meanings: [
        ///         {
        ///           confidence: number, # Optional. The confidence of the term assignment.
        ///           createdBy: string, # Optional. The user who created the record.
        ///           description: string, # Optional. The description of the term assignment.
        ///           displayText: string, # Optional. The display text.
        ///           expression: string, # Optional. The expression of the term assignment.
        ///           relationGuid: string, # Optional. The GUID of the relationship.
        ///           source: string, # Optional. The source of the term.
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///           steward: string, # Optional. The steward of the term.
        ///           termGuid: string, # Optional. The GUID of the term.
        ///         }
        ///       ], # Optional. An array of term assignment headers indicating the meanings of the entity.
        ///       provenanceType: number, # Optional. Used to record the provenance of an instance of an entity or relationship.
        ///       proxy: boolean, # Optional. Determines if there&apos;s a proxy.
        ///       relationshipAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of relationship.
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       updateTime: number, # Optional. The update time of the record.
        ///       updatedBy: string, # Optional. The user who updated the record.
        ///       version: number, # Optional. The version of the entity.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///       contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Owner.
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///     }
        ///   ], # Optional. An array of entities.
        ///   referredEntities: Dictionary&lt;string, AtlasEntity&gt;, # Optional. The referred entities.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetEntitiesByUniqueAttributesAsync(string typeName, bool? minExtInfo = null, bool? ignoreRelationships = null, string attrNQualifiedName = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(typeName, nameof(typeName));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.GetEntitiesByUniqueAttributes");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetEntitiesByUniqueAttributesRequest(typeName, minExtInfo, ignoreRelationships, attrNQualifiedName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Bulk API to retrieve list of entities identified by its unique attributes.
        /// 
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format
        /// 
        /// typeName=\&lt;typeName&gt;&amp;attr_1:\&lt;attrName&gt;=\&lt;attrValue&gt;&amp;attr_2:\&lt;attrName&gt;=\&lt;attrValue&gt;&amp;attr_3:\&lt;attrName&gt;=\&lt;attrValue&gt;
        /// 
        /// NOTE: The attrName should be an unique attribute for the given entity-type
        /// 
        /// The REST request would look something like this
        /// 
        /// GET /v2/entity/bulk/uniqueAttribute/type/hive_db?attr_0:qualifiedName=db1@cl1&amp;attr_2:qualifiedName=db2@cl1
        /// </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="attrNQualifiedName"> Qualified name of an entity. E.g. to find 2 entities you can set attrs_0:qualifiedName=db1@cl1&amp;attrs_2:qualifiedName=db2@cl1. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="typeName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="typeName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetEntitiesByUniqueAttributes with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// Response response = client.GetEntitiesByUniqueAttributes("<typeName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call GetEntitiesByUniqueAttributes with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// Response response = client.GetEntitiesByUniqueAttributes("<typeName>", true, true, "<attrNQualifiedName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("businessAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("createTime").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("customAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("homeId").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("provenanceType").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("proxy").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("relationshipAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("updateTime").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("updatedBy").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("version").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("entities")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("businessAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("createTime").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("customAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("homeId").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("provenanceType").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("proxy").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("relationshipAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("updateTime").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("updatedBy").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("version").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("lastModifiedTS").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AtlasEntitiesWithExtInfo</c>:
        /// <code>{
        ///   entities: [
        ///     {
        ///       businessAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. Business Attributes
        ///       classifications: [
        ///         {
        ///           entityGuid: string, # Optional. The GUID of the entity.
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///           removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///           validityPeriods: [
        ///             {
        ///               endTime: string, # Optional. The end of the time boundary.
        ///               startTime: string, # Optional. The start of the time boundary.
        ///               timeZone: string, # Optional. The timezone of the time boundary.
        ///             }
        ///           ], # Optional. An array of time boundaries indicating validity periods.
        ///           source: string, # Optional. indicate the source who create the classification detail
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///           attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///           typeName: string, # Optional. The name of the type.
        ///           lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///         }
        ///       ], # Optional. An array of classifications.
        ///       createTime: number, # Optional. The created time of the record.
        ///       createdBy: string, # Optional. The user who created the record.
        ///       customAttributes: Dictionary&lt;string, string&gt;, # Optional. Custom Attribute
        ///       guid: string, # Optional. The GUID of the entity.
        ///       homeId: string, # Optional. The home ID of the entity.
        ///       isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///       labels: [string], # Optional. labels
        ///       meanings: [
        ///         {
        ///           confidence: number, # Optional. The confidence of the term assignment.
        ///           createdBy: string, # Optional. The user who created the record.
        ///           description: string, # Optional. The description of the term assignment.
        ///           displayText: string, # Optional. The display text.
        ///           expression: string, # Optional. The expression of the term assignment.
        ///           relationGuid: string, # Optional. The GUID of the relationship.
        ///           source: string, # Optional. The source of the term.
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///           steward: string, # Optional. The steward of the term.
        ///           termGuid: string, # Optional. The GUID of the term.
        ///         }
        ///       ], # Optional. An array of term assignment headers indicating the meanings of the entity.
        ///       provenanceType: number, # Optional. Used to record the provenance of an instance of an entity or relationship.
        ///       proxy: boolean, # Optional. Determines if there&apos;s a proxy.
        ///       relationshipAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of relationship.
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       updateTime: number, # Optional. The update time of the record.
        ///       updatedBy: string, # Optional. The user who updated the record.
        ///       version: number, # Optional. The version of the entity.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///       contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Owner.
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///     }
        ///   ], # Optional. An array of entities.
        ///   referredEntities: Dictionary&lt;string, AtlasEntity&gt;, # Optional. The referred entities.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetEntitiesByUniqueAttributes(string typeName, bool? minExtInfo = null, bool? ignoreRelationships = null, string attrNQualifiedName = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(typeName, nameof(typeName));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.GetEntitiesByUniqueAttributes");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetEntitiesByUniqueAttributesRequest(typeName, minExtInfo, ignoreRelationships, attrNQualifiedName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get entity header given its GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="guid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetHeaderAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// Response response = await client.GetHeaderAsync("<guid>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AtlasEntityHeader</c>:
        /// <code>{
        ///   classificationNames: [string], # Optional. An array of classification names.
        ///   classifications: [
        ///     {
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   displayText: string, # Optional. The display text.
        ///   guid: string, # Optional. The GUID of the record.
        ///   isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///   labels: [string], # Optional. labels
        ///   meaningNames: [string], # Optional. An array of meanings.
        ///   meanings: [
        ///     {
        ///       confidence: number, # Optional. The confidence of the term assignment.
        ///       createdBy: string, # Optional. The user who created the record.
        ///       description: string, # Optional. The description of the term assignment.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term assignment.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of term assignment headers.
        ///   status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///   attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///   typeName: string, # Optional. The name of the type.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetHeaderAsync(string guid, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(guid, nameof(guid));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.GetHeader");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetHeaderRequest(guid, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get entity header given its GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="guid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetHeader with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// Response response = client.GetHeader("<guid>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AtlasEntityHeader</c>:
        /// <code>{
        ///   classificationNames: [string], # Optional. An array of classification names.
        ///   classifications: [
        ///     {
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   displayText: string, # Optional. The display text.
        ///   guid: string, # Optional. The GUID of the record.
        ///   isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///   labels: [string], # Optional. labels
        ///   meaningNames: [string], # Optional. An array of meanings.
        ///   meanings: [
        ///     {
        ///       confidence: number, # Optional. The confidence of the term assignment.
        ///       createdBy: string, # Optional. The user who created the record.
        ///       description: string, # Optional. The description of the term assignment.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term assignment.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of term assignment headers.
        ///   status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///   attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///   typeName: string, # Optional. The name of the type.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetHeader(string guid, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(guid, nameof(guid));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.GetHeader");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetHeaderRequest(guid, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Remove business metadata from an entity. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="guid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteBusinessMetadataAsync with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new {
        ///     key = new {},
        /// };
        /// 
        /// Response response = await client.DeleteBusinessMetadataAsync("<guid>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteBusinessMetadataAsync(string guid, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(guid, nameof(guid));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.DeleteBusinessMetadata");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteBusinessMetadataRequest(guid, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Remove business metadata from an entity. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="guid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteBusinessMetadata with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new {
        ///     key = new {},
        /// };
        /// 
        /// Response response = client.DeleteBusinessMetadata("<guid>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response DeleteBusinessMetadata(string guid, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(guid, nameof(guid));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.DeleteBusinessMetadata");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteBusinessMetadataRequest(guid, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add business metadata to an entity. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="isOverwrite"> Whether to overwrite the existing business metadata on the entity or not, default is false. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="guid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call AddOrUpdateBusinessMetadataAsync with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new {
        ///     key = new {},
        /// };
        /// 
        /// Response response = await client.AddOrUpdateBusinessMetadataAsync("<guid>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call AddOrUpdateBusinessMetadataAsync with all parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new {
        ///     key = new {},
        /// };
        /// 
        /// Response response = await client.AddOrUpdateBusinessMetadataAsync("<guid>", RequestContent.Create(data), true);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> AddOrUpdateBusinessMetadataAsync(string guid, RequestContent content, bool? isOverwrite = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(guid, nameof(guid));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.AddOrUpdateBusinessMetadata");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddOrUpdateBusinessMetadataRequest(guid, content, isOverwrite, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add business metadata to an entity. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="isOverwrite"> Whether to overwrite the existing business metadata on the entity or not, default is false. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="guid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call AddOrUpdateBusinessMetadata with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new {
        ///     key = new {},
        /// };
        /// 
        /// Response response = client.AddOrUpdateBusinessMetadata("<guid>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call AddOrUpdateBusinessMetadata with all parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new {
        ///     key = new {},
        /// };
        /// 
        /// Response response = client.AddOrUpdateBusinessMetadata("<guid>", RequestContent.Create(data), true);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response AddOrUpdateBusinessMetadata(string guid, RequestContent content, bool? isOverwrite = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(guid, nameof(guid));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.AddOrUpdateBusinessMetadata");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddOrUpdateBusinessMetadataRequest(guid, content, isOverwrite, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete business metadata attributes from an entity. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="bmName"> BusinessMetadata name. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> or <paramref name="bmName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="guid"/> or <paramref name="bmName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteBusinessMetadataAttributesAsync with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new {
        ///     key = new {},
        /// };
        /// 
        /// Response response = await client.DeleteBusinessMetadataAttributesAsync("<guid>", "<bmName>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteBusinessMetadataAttributesAsync(string guid, string bmName, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(guid, nameof(guid));
            Argument.AssertNotNullOrEmpty(bmName, nameof(bmName));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.DeleteBusinessMetadataAttributes");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteBusinessMetadataAttributesRequest(guid, bmName, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete business metadata attributes from an entity. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="bmName"> BusinessMetadata name. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> or <paramref name="bmName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="guid"/> or <paramref name="bmName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteBusinessMetadataAttributes with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new {
        ///     key = new {},
        /// };
        /// 
        /// Response response = client.DeleteBusinessMetadataAttributes("<guid>", "<bmName>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response DeleteBusinessMetadataAttributes(string guid, string bmName, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(guid, nameof(guid));
            Argument.AssertNotNullOrEmpty(bmName, nameof(bmName));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.DeleteBusinessMetadataAttributes");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteBusinessMetadataAttributesRequest(guid, bmName, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add or update business metadata attributes. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="bmName"> BusinessMetadata name. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> or <paramref name="bmName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="guid"/> or <paramref name="bmName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call AddOrUpdateBusinessMetadataAttributesAsync with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new {
        ///     key = new {},
        /// };
        /// 
        /// Response response = await client.AddOrUpdateBusinessMetadataAttributesAsync("<guid>", "<bmName>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> AddOrUpdateBusinessMetadataAttributesAsync(string guid, string bmName, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(guid, nameof(guid));
            Argument.AssertNotNullOrEmpty(bmName, nameof(bmName));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.AddOrUpdateBusinessMetadataAttributes");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddOrUpdateBusinessMetadataAttributesRequest(guid, bmName, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add or update business metadata attributes. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="bmName"> BusinessMetadata name. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> or <paramref name="bmName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="guid"/> or <paramref name="bmName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call AddOrUpdateBusinessMetadataAttributes with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new {
        ///     key = new {},
        /// };
        /// 
        /// Response response = client.AddOrUpdateBusinessMetadataAttributes("<guid>", "<bmName>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response AddOrUpdateBusinessMetadataAttributes(string guid, string bmName, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(guid, nameof(guid));
            Argument.AssertNotNullOrEmpty(bmName, nameof(bmName));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.AddOrUpdateBusinessMetadataAttributes");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddOrUpdateBusinessMetadataAttributesRequest(guid, bmName, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the sample Template for uploading/creating bulk BusinessMetaData. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetSampleBusinessMetadataTemplateAsync and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// Response response = await client.GetSampleBusinessMetadataTemplateAsync();
        /// if (response.ContentStream != null)
        /// {
        ///     using(Stream outFileStream = File.OpenWrite("<filePath>")
        ///     {
        ///         response.ContentStream.CopyTo(outFileStream);
        ///     }
        /// }
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> GetSampleBusinessMetadataTemplateAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.GetSampleBusinessMetadataTemplate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSampleBusinessMetadataTemplateRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the sample Template for uploading/creating bulk BusinessMetaData. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetSampleBusinessMetadataTemplate and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// Response response = client.GetSampleBusinessMetadataTemplate();
        /// if (response.ContentStream != null)
        /// {
        ///     using(Stream outFileStream = File.OpenWrite("<filePath>")
        ///     {
        ///         response.ContentStream.CopyTo(outFileStream);
        ///     }
        /// }
        /// ]]></code>
        /// </example>
        public virtual Response GetSampleBusinessMetadataTemplate(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.GetSampleBusinessMetadataTemplate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSampleBusinessMetadataTemplateRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Upload the file for creating Business Metadata in BULK. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call ImportBusinessMetadataAsync with required request content and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = File.OpenRead("<filePath>");
        /// 
        /// Response response = await client.ImportBusinessMetadataAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("failedImportInfoList")[0].GetProperty("childObjectName").ToString());
        /// Console.WriteLine(result.GetProperty("failedImportInfoList")[0].GetProperty("importStatus").ToString());
        /// Console.WriteLine(result.GetProperty("failedImportInfoList")[0].GetProperty("parentObjectName").ToString());
        /// Console.WriteLine(result.GetProperty("failedImportInfoList")[0].GetProperty("remarks").ToString());
        /// Console.WriteLine(result.GetProperty("successImportInfoList")[0].GetProperty("childObjectName").ToString());
        /// Console.WriteLine(result.GetProperty("successImportInfoList")[0].GetProperty("importStatus").ToString());
        /// Console.WriteLine(result.GetProperty("successImportInfoList")[0].GetProperty("parentObjectName").ToString());
        /// Console.WriteLine(result.GetProperty("successImportInfoList")[0].GetProperty("remarks").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>BulkImportResponse</c>:
        /// <code>{
        ///   failedImportInfoList: [
        ///     {
        ///       childObjectName: string, # Optional. childObjectName
        ///       importStatus: &quot;SUCCESS&quot; | &quot;FAILED&quot;, # Optional. importStatus
        ///       parentObjectName: string, # Optional. parentObjectName
        ///       remarks: string, # Optional. remarks
        ///     }
        ///   ], # Optional. failed importInfoList
        ///   successImportInfoList: [ImportInfo], # Optional. successful importInfoList
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> ImportBusinessMetadataAsync(RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.ImportBusinessMetadata");
            scope.Start();
            try
            {
                using HttpMessage message = CreateImportBusinessMetadataRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Upload the file for creating Business Metadata in BULK. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call ImportBusinessMetadata with required request content and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = File.OpenRead("<filePath>");
        /// 
        /// Response response = client.ImportBusinessMetadata(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("failedImportInfoList")[0].GetProperty("childObjectName").ToString());
        /// Console.WriteLine(result.GetProperty("failedImportInfoList")[0].GetProperty("importStatus").ToString());
        /// Console.WriteLine(result.GetProperty("failedImportInfoList")[0].GetProperty("parentObjectName").ToString());
        /// Console.WriteLine(result.GetProperty("failedImportInfoList")[0].GetProperty("remarks").ToString());
        /// Console.WriteLine(result.GetProperty("successImportInfoList")[0].GetProperty("childObjectName").ToString());
        /// Console.WriteLine(result.GetProperty("successImportInfoList")[0].GetProperty("importStatus").ToString());
        /// Console.WriteLine(result.GetProperty("successImportInfoList")[0].GetProperty("parentObjectName").ToString());
        /// Console.WriteLine(result.GetProperty("successImportInfoList")[0].GetProperty("remarks").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>BulkImportResponse</c>:
        /// <code>{
        ///   failedImportInfoList: [
        ///     {
        ///       childObjectName: string, # Optional. childObjectName
        ///       importStatus: &quot;SUCCESS&quot; | &quot;FAILED&quot;, # Optional. importStatus
        ///       parentObjectName: string, # Optional. parentObjectName
        ///       remarks: string, # Optional. remarks
        ///     }
        ///   ], # Optional. failed importInfoList
        ///   successImportInfoList: [ImportInfo], # Optional. successful importInfoList
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response ImportBusinessMetadata(RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.ImportBusinessMetadata");
            scope.Start();
            try
            {
                using HttpMessage message = CreateImportBusinessMetadataRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> delete given labels to a given entity. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="guid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteLabelsAsync with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new[] {
        ///     "<String>"
        /// };
        /// 
        /// Response response = await client.DeleteLabelsAsync("<guid>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteLabelsAsync(string guid, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(guid, nameof(guid));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.DeleteLabels");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteLabelsRequest(guid, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> delete given labels to a given entity. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="guid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteLabels with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new[] {
        ///     "<String>"
        /// };
        /// 
        /// Response response = client.DeleteLabels("<guid>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response DeleteLabels(string guid, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(guid, nameof(guid));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.DeleteLabels");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteLabelsRequest(guid, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Set labels to a given entity. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="guid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call SetLabelsAsync with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new[] {
        ///     "<String>"
        /// };
        /// 
        /// Response response = await client.SetLabelsAsync("<guid>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> SetLabelsAsync(string guid, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(guid, nameof(guid));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.SetLabels");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSetLabelsRequest(guid, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Set labels to a given entity. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="guid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call SetLabels with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new[] {
        ///     "<String>"
        /// };
        /// 
        /// Response response = client.SetLabels("<guid>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response SetLabels(string guid, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(guid, nameof(guid));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.SetLabels");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSetLabelsRequest(guid, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> add given labels to a given entity. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="guid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call AddLabelAsync with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new[] {
        ///     "<String>"
        /// };
        /// 
        /// Response response = await client.AddLabelAsync("<guid>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> AddLabelAsync(string guid, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(guid, nameof(guid));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.AddLabel");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddLabelRequest(guid, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> add given labels to a given entity. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="guid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call AddLabel with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new[] {
        ///     "<String>"
        /// };
        /// 
        /// Response response = client.AddLabel("<guid>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response AddLabel(string guid, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(guid, nameof(guid));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.AddLabel");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddLabelRequest(guid, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete given labels to a given entity identified by its type and unique attributes, if labels is null/empty, no labels will be removed. If any labels in labels set are non-existing labels, they will be ignored, only existing labels will be removed. In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format: attr:&lt;attrName&gt;=&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName. The REST request would look something like this: DELETE /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue. </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="typeName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="typeName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteLabelsByUniqueAttributeAsync with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new[] {
        ///     "<String>"
        /// };
        /// 
        /// Response response = await client.DeleteLabelsByUniqueAttributeAsync("<typeName>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call DeleteLabelsByUniqueAttributeAsync with all parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new[] {
        ///     "<String>"
        /// };
        /// 
        /// Response response = await client.DeleteLabelsByUniqueAttributeAsync("<typeName>", RequestContent.Create(data), "<attrQualifiedName>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteLabelsByUniqueAttributeAsync(string typeName, RequestContent content, string attrQualifiedName = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(typeName, nameof(typeName));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.DeleteLabelsByUniqueAttribute");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteLabelsByUniqueAttributeRequest(typeName, content, attrQualifiedName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete given labels to a given entity identified by its type and unique attributes, if labels is null/empty, no labels will be removed. If any labels in labels set are non-existing labels, they will be ignored, only existing labels will be removed. In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format: attr:&lt;attrName&gt;=&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName. The REST request would look something like this: DELETE /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue. </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="typeName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="typeName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteLabelsByUniqueAttribute with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new[] {
        ///     "<String>"
        /// };
        /// 
        /// Response response = client.DeleteLabelsByUniqueAttribute("<typeName>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call DeleteLabelsByUniqueAttribute with all parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new[] {
        ///     "<String>"
        /// };
        /// 
        /// Response response = client.DeleteLabelsByUniqueAttribute("<typeName>", RequestContent.Create(data), "<attrQualifiedName>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response DeleteLabelsByUniqueAttribute(string typeName, RequestContent content, string attrQualifiedName = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(typeName, nameof(typeName));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.DeleteLabelsByUniqueAttribute");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteLabelsByUniqueAttributeRequest(typeName, content, attrQualifiedName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Set labels to a given entity identified by its type and unique attributes, if labels is null/empty, existing labels will all be removed. In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format: attr:&lt;attrName&gt;=&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName. The REST request would look something like this: POST /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue. </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="typeName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="typeName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call SetLabelsByUniqueAttributeAsync with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new[] {
        ///     "<String>"
        /// };
        /// 
        /// Response response = await client.SetLabelsByUniqueAttributeAsync("<typeName>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call SetLabelsByUniqueAttributeAsync with all parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new[] {
        ///     "<String>"
        /// };
        /// 
        /// Response response = await client.SetLabelsByUniqueAttributeAsync("<typeName>", RequestContent.Create(data), "<attrQualifiedName>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> SetLabelsByUniqueAttributeAsync(string typeName, RequestContent content, string attrQualifiedName = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(typeName, nameof(typeName));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.SetLabelsByUniqueAttribute");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSetLabelsByUniqueAttributeRequest(typeName, content, attrQualifiedName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Set labels to a given entity identified by its type and unique attributes, if labels is null/empty, existing labels will all be removed. In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format: attr:&lt;attrName&gt;=&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName. The REST request would look something like this: POST /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue. </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="typeName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="typeName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call SetLabelsByUniqueAttribute with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new[] {
        ///     "<String>"
        /// };
        /// 
        /// Response response = client.SetLabelsByUniqueAttribute("<typeName>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call SetLabelsByUniqueAttribute with all parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new[] {
        ///     "<String>"
        /// };
        /// 
        /// Response response = client.SetLabelsByUniqueAttribute("<typeName>", RequestContent.Create(data), "<attrQualifiedName>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response SetLabelsByUniqueAttribute(string typeName, RequestContent content, string attrQualifiedName = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(typeName, nameof(typeName));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.SetLabelsByUniqueAttribute");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSetLabelsByUniqueAttributeRequest(typeName, content, attrQualifiedName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add given labels to a given entity identified by its type and unique attributes, if labels is null/empty, no labels will be added. In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format: attr:&lt;attrName&gt;=&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName. The REST request would look something like this: PUT /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue. </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="typeName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="typeName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call AddLabelsByUniqueAttributeAsync with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new[] {
        ///     "<String>"
        /// };
        /// 
        /// Response response = await client.AddLabelsByUniqueAttributeAsync("<typeName>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call AddLabelsByUniqueAttributeAsync with all parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new[] {
        ///     "<String>"
        /// };
        /// 
        /// Response response = await client.AddLabelsByUniqueAttributeAsync("<typeName>", RequestContent.Create(data), "<attrQualifiedName>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> AddLabelsByUniqueAttributeAsync(string typeName, RequestContent content, string attrQualifiedName = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(typeName, nameof(typeName));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.AddLabelsByUniqueAttribute");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddLabelsByUniqueAttributeRequest(typeName, content, attrQualifiedName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add given labels to a given entity identified by its type and unique attributes, if labels is null/empty, no labels will be added. In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format: attr:&lt;attrName&gt;=&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName. The REST request would look something like this: PUT /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue. </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="typeName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="typeName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call AddLabelsByUniqueAttribute with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new[] {
        ///     "<String>"
        /// };
        /// 
        /// Response response = client.AddLabelsByUniqueAttribute("<typeName>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call AddLabelsByUniqueAttribute with all parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();
        /// 
        /// var data = new[] {
        ///     "<String>"
        /// };
        /// 
        /// Response response = client.AddLabelsByUniqueAttribute("<typeName>", RequestContent.Create(data), "<attrQualifiedName>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response AddLabelsByUniqueAttribute(string typeName, RequestContent content, string attrQualifiedName = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(typeName, nameof(typeName));

            using var scope = ClientDiagnostics.CreateScope("PurviewEntities.AddLabelsByUniqueAttribute");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddLabelsByUniqueAttributeRequest(typeName, content, attrQualifiedName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateCreateOrUpdateRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetByGuidsRequest(IEnumerable<string> guids, bool? minExtInfo, bool? ignoreRelationships, IEnumerable<string> excludeRelationshipTypes, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/bulk", false);
            foreach (var param in guids)
            {
                uri.AppendQuery("guid", param, true);
            }
            if (minExtInfo != null)
            {
                uri.AppendQuery("minExtInfo", minExtInfo.Value, true);
            }
            if (ignoreRelationships != null)
            {
                uri.AppendQuery("ignoreRelationships", ignoreRelationships.Value, true);
            }
            if (excludeRelationshipTypes != null)
            {
                foreach (var param0 in excludeRelationshipTypes)
                {
                    uri.AppendQuery("excludeRelationshipTypes", param0, true);
                }
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateOrUpdateEntitiesRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/bulk", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteByGuidsRequest(IEnumerable<string> guids, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/bulk", false);
            foreach (var param in guids)
            {
                uri.AppendQuery("guid", param, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateAddClassificationRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/bulk/classification", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetByGuidRequest(string guid, bool? minExtInfo, bool? ignoreRelationships, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            if (minExtInfo != null)
            {
                uri.AppendQuery("minExtInfo", minExtInfo.Value, true);
            }
            if (ignoreRelationships != null)
            {
                uri.AppendQuery("ignoreRelationships", ignoreRelationships.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreatePartialUpdateEntityAttributeByGuidRequest(string guid, string name, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            uri.AppendQuery("name", name, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteByGuidRequest(string guid, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetClassificationRequest(string guid, string classificationName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            uri.AppendPath("/classification/", false);
            uri.AppendPath(classificationName, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateDeleteClassificationRequest(string guid, string classificationName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            uri.AppendPath("/classification/", false);
            uri.AppendPath(classificationName, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetClassificationsRequest(string guid, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            uri.AppendPath("/classifications", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateAddClassificationsRequest(string guid, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            uri.AppendPath("/classifications", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateUpdateClassificationsRequest(string guid, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            uri.AppendPath("/classifications", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetByUniqueAttributesRequest(string typeName, bool? minExtInfo, bool? ignoreRelationships, string attrQualifiedName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/uniqueAttribute/type/", false);
            uri.AppendPath(typeName, true);
            if (minExtInfo != null)
            {
                uri.AppendQuery("minExtInfo", minExtInfo.Value, true);
            }
            if (ignoreRelationships != null)
            {
                uri.AppendQuery("ignoreRelationships", ignoreRelationships.Value, true);
            }
            if (attrQualifiedName != null)
            {
                uri.AppendQuery("attr:qualifiedName", attrQualifiedName, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreatePartialUpdateEntityByUniqueAttributesRequest(string typeName, RequestContent content, string attrQualifiedName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/uniqueAttribute/type/", false);
            uri.AppendPath(typeName, true);
            if (attrQualifiedName != null)
            {
                uri.AppendQuery("attr:qualifiedName", attrQualifiedName, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteByUniqueAttributeRequest(string typeName, string attrQualifiedName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/uniqueAttribute/type/", false);
            uri.AppendPath(typeName, true);
            if (attrQualifiedName != null)
            {
                uri.AppendQuery("attr:qualifiedName", attrQualifiedName, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateDeleteClassificationByUniqueAttributeRequest(string typeName, string classificationName, string attrQualifiedName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/uniqueAttribute/type/", false);
            uri.AppendPath(typeName, true);
            uri.AppendPath("/classification/", false);
            uri.AppendPath(classificationName, true);
            if (attrQualifiedName != null)
            {
                uri.AppendQuery("attr:qualifiedName", attrQualifiedName, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateAddClassificationsByUniqueAttributeRequest(string typeName, RequestContent content, string attrQualifiedName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/uniqueAttribute/type/", false);
            uri.AppendPath(typeName, true);
            uri.AppendPath("/classifications", false);
            if (attrQualifiedName != null)
            {
                uri.AppendQuery("attr:qualifiedName", attrQualifiedName, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateUpdateClassificationsByUniqueAttributeRequest(string typeName, RequestContent content, string attrQualifiedName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/uniqueAttribute/type/", false);
            uri.AppendPath(typeName, true);
            uri.AppendPath("/classifications", false);
            if (attrQualifiedName != null)
            {
                uri.AppendQuery("attr:qualifiedName", attrQualifiedName, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateSetClassificationsRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/bulk/setClassifications", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetEntitiesByUniqueAttributesRequest(string typeName, bool? minExtInfo, bool? ignoreRelationships, string attrNQualifiedName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/bulk/uniqueAttribute/type/", false);
            uri.AppendPath(typeName, true);
            if (minExtInfo != null)
            {
                uri.AppendQuery("minExtInfo", minExtInfo.Value, true);
            }
            if (ignoreRelationships != null)
            {
                uri.AppendQuery("ignoreRelationships", ignoreRelationships.Value, true);
            }
            if (attrNQualifiedName != null)
            {
                uri.AppendQuery("attr_N:qualifiedName", attrNQualifiedName, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetHeaderRequest(string guid, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            uri.AppendPath("/header", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateDeleteBusinessMetadataRequest(string guid, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            uri.AppendPath("/businessmetadata", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateAddOrUpdateBusinessMetadataRequest(string guid, RequestContent content, bool? isOverwrite, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            uri.AppendPath("/businessmetadata", false);
            if (isOverwrite != null)
            {
                uri.AppendQuery("isOverwrite", isOverwrite.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteBusinessMetadataAttributesRequest(string guid, string bmName, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            uri.AppendPath("/businessmetadata/", false);
            uri.AppendPath(bmName, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateAddOrUpdateBusinessMetadataAttributesRequest(string guid, string bmName, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            uri.AppendPath("/businessmetadata/", false);
            uri.AppendPath(bmName, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetSampleBusinessMetadataTemplateRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/businessmetadata/import/template", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/octet-stream");
            return message;
        }

        internal HttpMessage CreateImportBusinessMetadataRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/businessmetadata/import", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "multipart/form-data");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteLabelsRequest(string guid, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            uri.AppendPath("/labels", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateSetLabelsRequest(string guid, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            uri.AppendPath("/labels", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateAddLabelRequest(string guid, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            uri.AppendPath("/labels", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteLabelsByUniqueAttributeRequest(string typeName, RequestContent content, string attrQualifiedName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/uniqueAttribute/type/", false);
            uri.AppendPath(typeName, true);
            uri.AppendPath("/labels", false);
            if (attrQualifiedName != null)
            {
                uri.AppendQuery("attr:qualifiedName", attrQualifiedName, true);
            }
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateSetLabelsByUniqueAttributeRequest(string typeName, RequestContent content, string attrQualifiedName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/uniqueAttribute/type/", false);
            uri.AppendPath(typeName, true);
            uri.AppendPath("/labels", false);
            if (attrQualifiedName != null)
            {
                uri.AppendQuery("attr:qualifiedName", attrQualifiedName, true);
            }
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateAddLabelsByUniqueAttributeRequest(string typeName, RequestContent content, string attrQualifiedName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/entity/uniqueAttribute/type/", false);
            uri.AppendPath(typeName, true);
            uri.AppendPath("/labels", false);
            if (attrQualifiedName != null)
            {
                uri.AppendQuery("attr:qualifiedName", attrQualifiedName, true);
            }
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
    }
}
