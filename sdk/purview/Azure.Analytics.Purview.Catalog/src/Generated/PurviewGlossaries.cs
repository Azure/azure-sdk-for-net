// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Purview.Catalog
{
    /// <summary> The PurviewGlossaries service client. </summary>
    public partial class PurviewGlossaries
    {
        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get => _pipeline; }
        private HttpPipeline _pipeline;
        private readonly string[] AuthorizationScopes = { "https://purview.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private Uri endpoint;
        private readonly string apiVersion;
        private readonly ClientDiagnostics _clientDiagnostics;

        /// <summary> Initializes a new instance of PurviewGlossaries for mocking. </summary>
        protected PurviewGlossaries()
        {
        }

        /// <summary> Get all glossaries registered with Atlas. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   categories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       parentCategoryGuid: string,
        ///       relationGuid: string
        ///     }
        ///   ],
        ///   language: string,
        ///   terms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ],
        ///   usage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetGlossariesAsync(int? limit = null, int? offset = null, string sort = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetGlossariesRequest(limit, offset, sort);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaries");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all glossaries registered with Atlas. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   categories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       parentCategoryGuid: string,
        ///       relationGuid: string
        ///     }
        ///   ],
        ///   language: string,
        ///   terms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ],
        ///   usage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetGlossaries(int? limit = null, int? offset = null, string sort = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetGlossariesRequest(limit, offset, sort);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaries");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateGetGlossariesRequest(int? limit, int? offset, string sort)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/glossary", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Create a glossary. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   categories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       parentCategoryGuid: string,
        ///       relationGuid: string
        ///     }
        ///   ],
        ///   language: string,
        ///   terms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ],
        ///   usage: string
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   categories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       parentCategoryGuid: string,
        ///       relationGuid: string
        ///     }
        ///   ],
        ///   language: string,
        ///   terms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ],
        ///   usage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> CreateGlossaryAsync(RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateCreateGlossaryRequest(content);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossary");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a glossary. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   categories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       parentCategoryGuid: string,
        ///       relationGuid: string
        ///     }
        ///   ],
        ///   language: string,
        ///   terms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ],
        ///   usage: string
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   categories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       parentCategoryGuid: string,
        ///       relationGuid: string
        ///     }
        ///   ],
        ///   language: string,
        ///   terms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ],
        ///   usage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response CreateGlossary(RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateCreateGlossaryRequest(content);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossary");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateCreateGlossaryRequest(RequestContent content)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/glossary", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        /// <summary> Create glossary category in bulk. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   anchor: {
        ///     displayText: string,
        ///     glossaryGuid: string,
        ///     relationGuid: string
        ///   },
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       parentCategoryGuid: string,
        ///       relationGuid: string
        ///     }
        ///   ],
        ///   parentCategory: AtlasRelatedCategoryHeader,
        ///   terms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   anchor: {
        ///     displayText: string,
        ///     glossaryGuid: string,
        ///     relationGuid: string
        ///   },
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       parentCategoryGuid: string,
        ///       relationGuid: string
        ///     }
        ///   ],
        ///   parentCategory: AtlasRelatedCategoryHeader,
        ///   terms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> CreateGlossaryCategoriesAsync(RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateCreateGlossaryCategoriesRequest(content);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossaryCategories");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create glossary category in bulk. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   anchor: {
        ///     displayText: string,
        ///     glossaryGuid: string,
        ///     relationGuid: string
        ///   },
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       parentCategoryGuid: string,
        ///       relationGuid: string
        ///     }
        ///   ],
        ///   parentCategory: AtlasRelatedCategoryHeader,
        ///   terms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   anchor: {
        ///     displayText: string,
        ///     glossaryGuid: string,
        ///     relationGuid: string
        ///   },
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       parentCategoryGuid: string,
        ///       relationGuid: string
        ///     }
        ///   ],
        ///   parentCategory: AtlasRelatedCategoryHeader,
        ///   terms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response CreateGlossaryCategories(RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateCreateGlossaryCategoriesRequest(content);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossaryCategories");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateCreateGlossaryCategoriesRequest(RequestContent content)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/glossary/categories", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        /// <summary> Create a glossary category. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   anchor: {
        ///     displayText: string,
        ///     glossaryGuid: string,
        ///     relationGuid: string
        ///   },
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       parentCategoryGuid: string,
        ///       relationGuid: string
        ///     }
        ///   ],
        ///   parentCategory: AtlasRelatedCategoryHeader,
        ///   terms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   anchor: {
        ///     displayText: string,
        ///     glossaryGuid: string,
        ///     relationGuid: string
        ///   },
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       parentCategoryGuid: string,
        ///       relationGuid: string
        ///     }
        ///   ],
        ///   parentCategory: AtlasRelatedCategoryHeader,
        ///   terms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> CreateGlossaryCategoryAsync(RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateCreateGlossaryCategoryRequest(content);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossaryCategory");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a glossary category. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   anchor: {
        ///     displayText: string,
        ///     glossaryGuid: string,
        ///     relationGuid: string
        ///   },
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       parentCategoryGuid: string,
        ///       relationGuid: string
        ///     }
        ///   ],
        ///   parentCategory: AtlasRelatedCategoryHeader,
        ///   terms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   anchor: {
        ///     displayText: string,
        ///     glossaryGuid: string,
        ///     relationGuid: string
        ///   },
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       parentCategoryGuid: string,
        ///       relationGuid: string
        ///     }
        ///   ],
        ///   parentCategory: AtlasRelatedCategoryHeader,
        ///   terms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response CreateGlossaryCategory(RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateCreateGlossaryCategoryRequest(content);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossaryCategory");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateCreateGlossaryCategoryRequest(RequestContent content)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/glossary/category", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        /// <summary> Get specific glossary category by its GUID. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   anchor: {
        ///     displayText: string,
        ///     glossaryGuid: string,
        ///     relationGuid: string
        ///   },
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       parentCategoryGuid: string,
        ///       relationGuid: string
        ///     }
        ///   ],
        ///   parentCategory: AtlasRelatedCategoryHeader,
        ///   terms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetGlossaryCategoryAsync(string categoryGuid, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetGlossaryCategoryRequest(categoryGuid);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryCategory");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get specific glossary category by its GUID. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   anchor: {
        ///     displayText: string,
        ///     glossaryGuid: string,
        ///     relationGuid: string
        ///   },
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       parentCategoryGuid: string,
        ///       relationGuid: string
        ///     }
        ///   ],
        ///   parentCategory: AtlasRelatedCategoryHeader,
        ///   terms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetGlossaryCategory(string categoryGuid, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetGlossaryCategoryRequest(categoryGuid);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryCategory");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateGetGlossaryCategoryRequest(string categoryGuid)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/glossary/category/", false);
            uri.AppendPath(categoryGuid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Update the given glossary category by its GUID. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   anchor: {
        ///     displayText: string,
        ///     glossaryGuid: string,
        ///     relationGuid: string
        ///   },
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       parentCategoryGuid: string,
        ///       relationGuid: string
        ///     }
        ///   ],
        ///   parentCategory: AtlasRelatedCategoryHeader,
        ///   terms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   anchor: {
        ///     displayText: string,
        ///     glossaryGuid: string,
        ///     relationGuid: string
        ///   },
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       parentCategoryGuid: string,
        ///       relationGuid: string
        ///     }
        ///   ],
        ///   parentCategory: AtlasRelatedCategoryHeader,
        ///   terms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> UpdateGlossaryCategoryAsync(string categoryGuid, RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateUpdateGlossaryCategoryRequest(categoryGuid, content);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.UpdateGlossaryCategory");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the given glossary category by its GUID. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   anchor: {
        ///     displayText: string,
        ///     glossaryGuid: string,
        ///     relationGuid: string
        ///   },
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       parentCategoryGuid: string,
        ///       relationGuid: string
        ///     }
        ///   ],
        ///   parentCategory: AtlasRelatedCategoryHeader,
        ///   terms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   anchor: {
        ///     displayText: string,
        ///     glossaryGuid: string,
        ///     relationGuid: string
        ///   },
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       parentCategoryGuid: string,
        ///       relationGuid: string
        ///     }
        ///   ],
        ///   parentCategory: AtlasRelatedCategoryHeader,
        ///   terms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response UpdateGlossaryCategory(string categoryGuid, RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateUpdateGlossaryCategoryRequest(categoryGuid, content);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.UpdateGlossaryCategory");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateUpdateGlossaryCategoryRequest(string categoryGuid, RequestContent content)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/glossary/category/", false);
            uri.AppendPath(categoryGuid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        /// <summary> Delete a glossary category. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> DeleteGlossaryCategoryAsync(string categoryGuid, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateDeleteGlossaryCategoryRequest(categoryGuid);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.DeleteGlossaryCategory");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 204:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a glossary category. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response DeleteGlossaryCategory(string categoryGuid, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateDeleteGlossaryCategoryRequest(categoryGuid);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.DeleteGlossaryCategory");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 204:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateDeleteGlossaryCategoryRequest(string categoryGuid)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/glossary/category/", false);
            uri.AppendPath(categoryGuid, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Update the glossary category partially. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   anchor: {
        ///     displayText: string,
        ///     glossaryGuid: string,
        ///     relationGuid: string
        ///   },
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       parentCategoryGuid: string,
        ///       relationGuid: string
        ///     }
        ///   ],
        ///   parentCategory: AtlasRelatedCategoryHeader,
        ///   terms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> PartialUpdateGlossaryCategoryAsync(string categoryGuid, RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreatePartialUpdateGlossaryCategoryRequest(categoryGuid, content);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.PartialUpdateGlossaryCategory");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the glossary category partially. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   anchor: {
        ///     displayText: string,
        ///     glossaryGuid: string,
        ///     relationGuid: string
        ///   },
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       parentCategoryGuid: string,
        ///       relationGuid: string
        ///     }
        ///   ],
        ///   parentCategory: AtlasRelatedCategoryHeader,
        ///   terms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response PartialUpdateGlossaryCategory(string categoryGuid, RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreatePartialUpdateGlossaryCategoryRequest(categoryGuid, content);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.PartialUpdateGlossaryCategory");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreatePartialUpdateGlossaryCategoryRequest(string categoryGuid, RequestContent content)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/glossary/category/", false);
            uri.AppendPath(categoryGuid, true);
            uri.AppendPath("/partial", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        /// <summary> Get all related categories (parent and children). Limit, offset, and sort parameters are currently not being enabled and won&apos;t work even they are passed. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   categoryGuid: string,
        ///   description: string,
        ///   displayText: string,
        ///   parentCategoryGuid: string,
        ///   relationGuid: string
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetRelatedCategoriesAsync(string categoryGuid, int? limit = null, int? offset = null, string sort = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetRelatedCategoriesRequest(categoryGuid, limit, offset, sort);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetRelatedCategories");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all related categories (parent and children). Limit, offset, and sort parameters are currently not being enabled and won&apos;t work even they are passed. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   categoryGuid: string,
        ///   description: string,
        ///   displayText: string,
        ///   parentCategoryGuid: string,
        ///   relationGuid: string
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetRelatedCategories(string categoryGuid, int? limit = null, int? offset = null, string sort = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetRelatedCategoriesRequest(categoryGuid, limit, offset, sort);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetRelatedCategories");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateGetRelatedCategoriesRequest(string categoryGuid, int? limit, int? offset, string sort)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/glossary/category/", false);
            uri.AppendPath(categoryGuid, true);
            uri.AppendPath("/related", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get all terms associated with the specific category. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   description: string,
        ///   displayText: string,
        ///   expression: string,
        ///   relationGuid: string,
        ///   source: string,
        ///   status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///   steward: string,
        ///   termGuid: string
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetCategoryTermsAsync(string categoryGuid, int? limit = null, int? offset = null, string sort = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetCategoryTermsRequest(categoryGuid, limit, offset, sort);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetCategoryTerms");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all terms associated with the specific category. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   description: string,
        ///   displayText: string,
        ///   expression: string,
        ///   relationGuid: string,
        ///   source: string,
        ///   status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///   steward: string,
        ///   termGuid: string
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetCategoryTerms(string categoryGuid, int? limit = null, int? offset = null, string sort = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetCategoryTermsRequest(categoryGuid, limit, offset, sort);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetCategoryTerms");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateGetCategoryTermsRequest(string categoryGuid, int? limit, int? offset, string sort)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/glossary/category/", false);
            uri.AppendPath(categoryGuid, true);
            uri.AppendPath("/terms", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Create a glossary term. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   abbreviation: string,
        ///   templateName: [AnyObject],
        ///   anchor: {
        ///     displayText: string,
        ///     glossaryGuid: string,
        ///     relationGuid: string
        ///   },
        ///   antonyms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ],
        ///   createTime: number,
        ///   createdBy: string,
        ///   updateTime: number,
        ///   updatedBy: string,
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;,
        ///   resources: [
        ///     {
        ///       displayName: string,
        ///       url: string
        ///     }
        ///   ],
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;,
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
        ///   assignedEntities: [
        ///     {
        ///       guid: string,
        ///       typeName: string,
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///       displayText: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       relationshipType: string,
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;,
        ///         typeName: string,
        ///         lastModifiedTS: string
        ///       },
        ///       relationshipGuid: string,
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ],
        ///   categories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       relationGuid: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;
        ///     }
        ///   ],
        ///   classifies: [AtlasRelatedTermHeader],
        ///   examples: [string],
        ///   isA: [AtlasRelatedTermHeader],
        ///   preferredTerms: [AtlasRelatedTermHeader],
        ///   preferredToTerms: [AtlasRelatedTermHeader],
        ///   replacedBy: [AtlasRelatedTermHeader],
        ///   replacementTerms: [AtlasRelatedTermHeader],
        ///   seeAlso: [AtlasRelatedTermHeader],
        ///   synonyms: [AtlasRelatedTermHeader],
        ///   translatedTerms: [AtlasRelatedTermHeader],
        ///   translationTerms: [AtlasRelatedTermHeader],
        ///   usage: string,
        ///   validValues: [AtlasRelatedTermHeader],
        ///   validValuesFor: [AtlasRelatedTermHeader]
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   abbreviation: string,
        ///   templateName: [AnyObject],
        ///   anchor: {
        ///     displayText: string,
        ///     glossaryGuid: string,
        ///     relationGuid: string
        ///   },
        ///   antonyms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ],
        ///   createTime: number,
        ///   createdBy: string,
        ///   updateTime: number,
        ///   updatedBy: string,
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;,
        ///   resources: [
        ///     {
        ///       displayName: string,
        ///       url: string
        ///     }
        ///   ],
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;,
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
        ///   assignedEntities: [
        ///     {
        ///       guid: string,
        ///       typeName: string,
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///       displayText: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       relationshipType: string,
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;,
        ///         typeName: string,
        ///         lastModifiedTS: string
        ///       },
        ///       relationshipGuid: string,
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ],
        ///   categories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       relationGuid: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;
        ///     }
        ///   ],
        ///   classifies: [AtlasRelatedTermHeader],
        ///   examples: [string],
        ///   isA: [AtlasRelatedTermHeader],
        ///   preferredTerms: [AtlasRelatedTermHeader],
        ///   preferredToTerms: [AtlasRelatedTermHeader],
        ///   replacedBy: [AtlasRelatedTermHeader],
        ///   replacementTerms: [AtlasRelatedTermHeader],
        ///   seeAlso: [AtlasRelatedTermHeader],
        ///   synonyms: [AtlasRelatedTermHeader],
        ///   translatedTerms: [AtlasRelatedTermHeader],
        ///   translationTerms: [AtlasRelatedTermHeader],
        ///   usage: string,
        ///   validValues: [AtlasRelatedTermHeader],
        ///   validValuesFor: [AtlasRelatedTermHeader]
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> CreateGlossaryTermAsync(RequestContent content, bool? includeTermHierarchy = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateCreateGlossaryTermRequest(content, includeTermHierarchy);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossaryTerm");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a glossary term. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   abbreviation: string,
        ///   templateName: [AnyObject],
        ///   anchor: {
        ///     displayText: string,
        ///     glossaryGuid: string,
        ///     relationGuid: string
        ///   },
        ///   antonyms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ],
        ///   createTime: number,
        ///   createdBy: string,
        ///   updateTime: number,
        ///   updatedBy: string,
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;,
        ///   resources: [
        ///     {
        ///       displayName: string,
        ///       url: string
        ///     }
        ///   ],
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;,
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
        ///   assignedEntities: [
        ///     {
        ///       guid: string,
        ///       typeName: string,
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///       displayText: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       relationshipType: string,
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;,
        ///         typeName: string,
        ///         lastModifiedTS: string
        ///       },
        ///       relationshipGuid: string,
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ],
        ///   categories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       relationGuid: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;
        ///     }
        ///   ],
        ///   classifies: [AtlasRelatedTermHeader],
        ///   examples: [string],
        ///   isA: [AtlasRelatedTermHeader],
        ///   preferredTerms: [AtlasRelatedTermHeader],
        ///   preferredToTerms: [AtlasRelatedTermHeader],
        ///   replacedBy: [AtlasRelatedTermHeader],
        ///   replacementTerms: [AtlasRelatedTermHeader],
        ///   seeAlso: [AtlasRelatedTermHeader],
        ///   synonyms: [AtlasRelatedTermHeader],
        ///   translatedTerms: [AtlasRelatedTermHeader],
        ///   translationTerms: [AtlasRelatedTermHeader],
        ///   usage: string,
        ///   validValues: [AtlasRelatedTermHeader],
        ///   validValuesFor: [AtlasRelatedTermHeader]
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   abbreviation: string,
        ///   templateName: [AnyObject],
        ///   anchor: {
        ///     displayText: string,
        ///     glossaryGuid: string,
        ///     relationGuid: string
        ///   },
        ///   antonyms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ],
        ///   createTime: number,
        ///   createdBy: string,
        ///   updateTime: number,
        ///   updatedBy: string,
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;,
        ///   resources: [
        ///     {
        ///       displayName: string,
        ///       url: string
        ///     }
        ///   ],
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;,
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
        ///   assignedEntities: [
        ///     {
        ///       guid: string,
        ///       typeName: string,
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///       displayText: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       relationshipType: string,
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;,
        ///         typeName: string,
        ///         lastModifiedTS: string
        ///       },
        ///       relationshipGuid: string,
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ],
        ///   categories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       relationGuid: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;
        ///     }
        ///   ],
        ///   classifies: [AtlasRelatedTermHeader],
        ///   examples: [string],
        ///   isA: [AtlasRelatedTermHeader],
        ///   preferredTerms: [AtlasRelatedTermHeader],
        ///   preferredToTerms: [AtlasRelatedTermHeader],
        ///   replacedBy: [AtlasRelatedTermHeader],
        ///   replacementTerms: [AtlasRelatedTermHeader],
        ///   seeAlso: [AtlasRelatedTermHeader],
        ///   synonyms: [AtlasRelatedTermHeader],
        ///   translatedTerms: [AtlasRelatedTermHeader],
        ///   translationTerms: [AtlasRelatedTermHeader],
        ///   usage: string,
        ///   validValues: [AtlasRelatedTermHeader],
        ///   validValuesFor: [AtlasRelatedTermHeader]
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response CreateGlossaryTerm(RequestContent content, bool? includeTermHierarchy = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateCreateGlossaryTermRequest(content, includeTermHierarchy);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossaryTerm");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateCreateGlossaryTermRequest(RequestContent content, bool? includeTermHierarchy)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/glossary/term", false);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        /// <summary> Get a specific glossary term by its GUID. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   abbreviation: string,
        ///   templateName: [AnyObject],
        ///   anchor: {
        ///     displayText: string,
        ///     glossaryGuid: string,
        ///     relationGuid: string
        ///   },
        ///   antonyms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ],
        ///   createTime: number,
        ///   createdBy: string,
        ///   updateTime: number,
        ///   updatedBy: string,
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;,
        ///   resources: [
        ///     {
        ///       displayName: string,
        ///       url: string
        ///     }
        ///   ],
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;,
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
        ///   assignedEntities: [
        ///     {
        ///       guid: string,
        ///       typeName: string,
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///       displayText: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       relationshipType: string,
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;,
        ///         typeName: string,
        ///         lastModifiedTS: string
        ///       },
        ///       relationshipGuid: string,
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ],
        ///   categories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       relationGuid: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;
        ///     }
        ///   ],
        ///   classifies: [AtlasRelatedTermHeader],
        ///   examples: [string],
        ///   isA: [AtlasRelatedTermHeader],
        ///   preferredTerms: [AtlasRelatedTermHeader],
        ///   preferredToTerms: [AtlasRelatedTermHeader],
        ///   replacedBy: [AtlasRelatedTermHeader],
        ///   replacementTerms: [AtlasRelatedTermHeader],
        ///   seeAlso: [AtlasRelatedTermHeader],
        ///   synonyms: [AtlasRelatedTermHeader],
        ///   translatedTerms: [AtlasRelatedTermHeader],
        ///   translationTerms: [AtlasRelatedTermHeader],
        ///   usage: string,
        ///   validValues: [AtlasRelatedTermHeader],
        ///   validValuesFor: [AtlasRelatedTermHeader]
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetGlossaryTermAsync(string termGuid, bool? includeTermHierarchy = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetGlossaryTermRequest(termGuid, includeTermHierarchy);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryTerm");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a specific glossary term by its GUID. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   abbreviation: string,
        ///   templateName: [AnyObject],
        ///   anchor: {
        ///     displayText: string,
        ///     glossaryGuid: string,
        ///     relationGuid: string
        ///   },
        ///   antonyms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ],
        ///   createTime: number,
        ///   createdBy: string,
        ///   updateTime: number,
        ///   updatedBy: string,
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;,
        ///   resources: [
        ///     {
        ///       displayName: string,
        ///       url: string
        ///     }
        ///   ],
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;,
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
        ///   assignedEntities: [
        ///     {
        ///       guid: string,
        ///       typeName: string,
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///       displayText: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       relationshipType: string,
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;,
        ///         typeName: string,
        ///         lastModifiedTS: string
        ///       },
        ///       relationshipGuid: string,
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ],
        ///   categories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       relationGuid: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;
        ///     }
        ///   ],
        ///   classifies: [AtlasRelatedTermHeader],
        ///   examples: [string],
        ///   isA: [AtlasRelatedTermHeader],
        ///   preferredTerms: [AtlasRelatedTermHeader],
        ///   preferredToTerms: [AtlasRelatedTermHeader],
        ///   replacedBy: [AtlasRelatedTermHeader],
        ///   replacementTerms: [AtlasRelatedTermHeader],
        ///   seeAlso: [AtlasRelatedTermHeader],
        ///   synonyms: [AtlasRelatedTermHeader],
        ///   translatedTerms: [AtlasRelatedTermHeader],
        ///   translationTerms: [AtlasRelatedTermHeader],
        ///   usage: string,
        ///   validValues: [AtlasRelatedTermHeader],
        ///   validValuesFor: [AtlasRelatedTermHeader]
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetGlossaryTerm(string termGuid, bool? includeTermHierarchy = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetGlossaryTermRequest(termGuid, includeTermHierarchy);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryTerm");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateGetGlossaryTermRequest(string termGuid, bool? includeTermHierarchy)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/glossary/term/", false);
            uri.AppendPath(termGuid, true);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Update the given glossary term by its GUID. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   abbreviation: string,
        ///   templateName: [AnyObject],
        ///   anchor: {
        ///     displayText: string,
        ///     glossaryGuid: string,
        ///     relationGuid: string
        ///   },
        ///   antonyms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ],
        ///   createTime: number,
        ///   createdBy: string,
        ///   updateTime: number,
        ///   updatedBy: string,
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;,
        ///   resources: [
        ///     {
        ///       displayName: string,
        ///       url: string
        ///     }
        ///   ],
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;,
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
        ///   assignedEntities: [
        ///     {
        ///       guid: string,
        ///       typeName: string,
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///       displayText: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       relationshipType: string,
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;,
        ///         typeName: string,
        ///         lastModifiedTS: string
        ///       },
        ///       relationshipGuid: string,
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ],
        ///   categories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       relationGuid: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;
        ///     }
        ///   ],
        ///   classifies: [AtlasRelatedTermHeader],
        ///   examples: [string],
        ///   isA: [AtlasRelatedTermHeader],
        ///   preferredTerms: [AtlasRelatedTermHeader],
        ///   preferredToTerms: [AtlasRelatedTermHeader],
        ///   replacedBy: [AtlasRelatedTermHeader],
        ///   replacementTerms: [AtlasRelatedTermHeader],
        ///   seeAlso: [AtlasRelatedTermHeader],
        ///   synonyms: [AtlasRelatedTermHeader],
        ///   translatedTerms: [AtlasRelatedTermHeader],
        ///   translationTerms: [AtlasRelatedTermHeader],
        ///   usage: string,
        ///   validValues: [AtlasRelatedTermHeader],
        ///   validValuesFor: [AtlasRelatedTermHeader]
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   abbreviation: string,
        ///   templateName: [AnyObject],
        ///   anchor: {
        ///     displayText: string,
        ///     glossaryGuid: string,
        ///     relationGuid: string
        ///   },
        ///   antonyms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ],
        ///   createTime: number,
        ///   createdBy: string,
        ///   updateTime: number,
        ///   updatedBy: string,
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;,
        ///   resources: [
        ///     {
        ///       displayName: string,
        ///       url: string
        ///     }
        ///   ],
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;,
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
        ///   assignedEntities: [
        ///     {
        ///       guid: string,
        ///       typeName: string,
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///       displayText: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       relationshipType: string,
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;,
        ///         typeName: string,
        ///         lastModifiedTS: string
        ///       },
        ///       relationshipGuid: string,
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ],
        ///   categories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       relationGuid: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;
        ///     }
        ///   ],
        ///   classifies: [AtlasRelatedTermHeader],
        ///   examples: [string],
        ///   isA: [AtlasRelatedTermHeader],
        ///   preferredTerms: [AtlasRelatedTermHeader],
        ///   preferredToTerms: [AtlasRelatedTermHeader],
        ///   replacedBy: [AtlasRelatedTermHeader],
        ///   replacementTerms: [AtlasRelatedTermHeader],
        ///   seeAlso: [AtlasRelatedTermHeader],
        ///   synonyms: [AtlasRelatedTermHeader],
        ///   translatedTerms: [AtlasRelatedTermHeader],
        ///   translationTerms: [AtlasRelatedTermHeader],
        ///   usage: string,
        ///   validValues: [AtlasRelatedTermHeader],
        ///   validValuesFor: [AtlasRelatedTermHeader]
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> UpdateGlossaryTermAsync(string termGuid, RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateUpdateGlossaryTermRequest(termGuid, content);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.UpdateGlossaryTerm");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the given glossary term by its GUID. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   abbreviation: string,
        ///   templateName: [AnyObject],
        ///   anchor: {
        ///     displayText: string,
        ///     glossaryGuid: string,
        ///     relationGuid: string
        ///   },
        ///   antonyms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ],
        ///   createTime: number,
        ///   createdBy: string,
        ///   updateTime: number,
        ///   updatedBy: string,
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;,
        ///   resources: [
        ///     {
        ///       displayName: string,
        ///       url: string
        ///     }
        ///   ],
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;,
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
        ///   assignedEntities: [
        ///     {
        ///       guid: string,
        ///       typeName: string,
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///       displayText: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       relationshipType: string,
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;,
        ///         typeName: string,
        ///         lastModifiedTS: string
        ///       },
        ///       relationshipGuid: string,
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ],
        ///   categories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       relationGuid: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;
        ///     }
        ///   ],
        ///   classifies: [AtlasRelatedTermHeader],
        ///   examples: [string],
        ///   isA: [AtlasRelatedTermHeader],
        ///   preferredTerms: [AtlasRelatedTermHeader],
        ///   preferredToTerms: [AtlasRelatedTermHeader],
        ///   replacedBy: [AtlasRelatedTermHeader],
        ///   replacementTerms: [AtlasRelatedTermHeader],
        ///   seeAlso: [AtlasRelatedTermHeader],
        ///   synonyms: [AtlasRelatedTermHeader],
        ///   translatedTerms: [AtlasRelatedTermHeader],
        ///   translationTerms: [AtlasRelatedTermHeader],
        ///   usage: string,
        ///   validValues: [AtlasRelatedTermHeader],
        ///   validValuesFor: [AtlasRelatedTermHeader]
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   abbreviation: string,
        ///   templateName: [AnyObject],
        ///   anchor: {
        ///     displayText: string,
        ///     glossaryGuid: string,
        ///     relationGuid: string
        ///   },
        ///   antonyms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ],
        ///   createTime: number,
        ///   createdBy: string,
        ///   updateTime: number,
        ///   updatedBy: string,
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;,
        ///   resources: [
        ///     {
        ///       displayName: string,
        ///       url: string
        ///     }
        ///   ],
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;,
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
        ///   assignedEntities: [
        ///     {
        ///       guid: string,
        ///       typeName: string,
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///       displayText: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       relationshipType: string,
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;,
        ///         typeName: string,
        ///         lastModifiedTS: string
        ///       },
        ///       relationshipGuid: string,
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ],
        ///   categories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       relationGuid: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;
        ///     }
        ///   ],
        ///   classifies: [AtlasRelatedTermHeader],
        ///   examples: [string],
        ///   isA: [AtlasRelatedTermHeader],
        ///   preferredTerms: [AtlasRelatedTermHeader],
        ///   preferredToTerms: [AtlasRelatedTermHeader],
        ///   replacedBy: [AtlasRelatedTermHeader],
        ///   replacementTerms: [AtlasRelatedTermHeader],
        ///   seeAlso: [AtlasRelatedTermHeader],
        ///   synonyms: [AtlasRelatedTermHeader],
        ///   translatedTerms: [AtlasRelatedTermHeader],
        ///   translationTerms: [AtlasRelatedTermHeader],
        ///   usage: string,
        ///   validValues: [AtlasRelatedTermHeader],
        ///   validValuesFor: [AtlasRelatedTermHeader]
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response UpdateGlossaryTerm(string termGuid, RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateUpdateGlossaryTermRequest(termGuid, content);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.UpdateGlossaryTerm");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateUpdateGlossaryTermRequest(string termGuid, RequestContent content)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/glossary/term/", false);
            uri.AppendPath(termGuid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        /// <summary> Delete a glossary term. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> DeleteGlossaryTermAsync(string termGuid, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateDeleteGlossaryTermRequest(termGuid);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.DeleteGlossaryTerm");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 204:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a glossary term. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response DeleteGlossaryTerm(string termGuid, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateDeleteGlossaryTermRequest(termGuid);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.DeleteGlossaryTerm");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 204:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateDeleteGlossaryTermRequest(string termGuid)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/glossary/term/", false);
            uri.AppendPath(termGuid, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Update the glossary term partially. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   abbreviation: string,
        ///   templateName: [AnyObject],
        ///   anchor: {
        ///     displayText: string,
        ///     glossaryGuid: string,
        ///     relationGuid: string
        ///   },
        ///   antonyms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ],
        ///   createTime: number,
        ///   createdBy: string,
        ///   updateTime: number,
        ///   updatedBy: string,
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;,
        ///   resources: [
        ///     {
        ///       displayName: string,
        ///       url: string
        ///     }
        ///   ],
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;,
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
        ///   assignedEntities: [
        ///     {
        ///       guid: string,
        ///       typeName: string,
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///       displayText: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       relationshipType: string,
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;,
        ///         typeName: string,
        ///         lastModifiedTS: string
        ///       },
        ///       relationshipGuid: string,
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ],
        ///   categories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       relationGuid: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;
        ///     }
        ///   ],
        ///   classifies: [AtlasRelatedTermHeader],
        ///   examples: [string],
        ///   isA: [AtlasRelatedTermHeader],
        ///   preferredTerms: [AtlasRelatedTermHeader],
        ///   preferredToTerms: [AtlasRelatedTermHeader],
        ///   replacedBy: [AtlasRelatedTermHeader],
        ///   replacementTerms: [AtlasRelatedTermHeader],
        ///   seeAlso: [AtlasRelatedTermHeader],
        ///   synonyms: [AtlasRelatedTermHeader],
        ///   translatedTerms: [AtlasRelatedTermHeader],
        ///   translationTerms: [AtlasRelatedTermHeader],
        ///   usage: string,
        ///   validValues: [AtlasRelatedTermHeader],
        ///   validValuesFor: [AtlasRelatedTermHeader]
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> PartialUpdateGlossaryTermAsync(string termGuid, RequestContent content, bool? includeTermHierarchy = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreatePartialUpdateGlossaryTermRequest(termGuid, content, includeTermHierarchy);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.PartialUpdateGlossaryTerm");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the glossary term partially. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   abbreviation: string,
        ///   templateName: [AnyObject],
        ///   anchor: {
        ///     displayText: string,
        ///     glossaryGuid: string,
        ///     relationGuid: string
        ///   },
        ///   antonyms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ],
        ///   createTime: number,
        ///   createdBy: string,
        ///   updateTime: number,
        ///   updatedBy: string,
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;,
        ///   resources: [
        ///     {
        ///       displayName: string,
        ///       url: string
        ///     }
        ///   ],
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;,
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
        ///   assignedEntities: [
        ///     {
        ///       guid: string,
        ///       typeName: string,
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///       displayText: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       relationshipType: string,
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;,
        ///         typeName: string,
        ///         lastModifiedTS: string
        ///       },
        ///       relationshipGuid: string,
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ],
        ///   categories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       relationGuid: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;
        ///     }
        ///   ],
        ///   classifies: [AtlasRelatedTermHeader],
        ///   examples: [string],
        ///   isA: [AtlasRelatedTermHeader],
        ///   preferredTerms: [AtlasRelatedTermHeader],
        ///   preferredToTerms: [AtlasRelatedTermHeader],
        ///   replacedBy: [AtlasRelatedTermHeader],
        ///   replacementTerms: [AtlasRelatedTermHeader],
        ///   seeAlso: [AtlasRelatedTermHeader],
        ///   synonyms: [AtlasRelatedTermHeader],
        ///   translatedTerms: [AtlasRelatedTermHeader],
        ///   translationTerms: [AtlasRelatedTermHeader],
        ///   usage: string,
        ///   validValues: [AtlasRelatedTermHeader],
        ///   validValuesFor: [AtlasRelatedTermHeader]
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response PartialUpdateGlossaryTerm(string termGuid, RequestContent content, bool? includeTermHierarchy = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreatePartialUpdateGlossaryTermRequest(termGuid, content, includeTermHierarchy);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.PartialUpdateGlossaryTerm");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreatePartialUpdateGlossaryTermRequest(string termGuid, RequestContent content, bool? includeTermHierarchy)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/glossary/term/", false);
            uri.AppendPath(termGuid, true);
            uri.AppendPath("/partial", false);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        /// <summary> Create glossary terms in bulk. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   abbreviation: string,
        ///   templateName: [AnyObject],
        ///   anchor: {
        ///     displayText: string,
        ///     glossaryGuid: string,
        ///     relationGuid: string
        ///   },
        ///   antonyms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ],
        ///   createTime: number,
        ///   createdBy: string,
        ///   updateTime: number,
        ///   updatedBy: string,
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;,
        ///   resources: [
        ///     {
        ///       displayName: string,
        ///       url: string
        ///     }
        ///   ],
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;,
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
        ///   assignedEntities: [
        ///     {
        ///       guid: string,
        ///       typeName: string,
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///       displayText: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       relationshipType: string,
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;,
        ///         typeName: string,
        ///         lastModifiedTS: string
        ///       },
        ///       relationshipGuid: string,
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ],
        ///   categories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       relationGuid: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;
        ///     }
        ///   ],
        ///   classifies: [AtlasRelatedTermHeader],
        ///   examples: [string],
        ///   isA: [AtlasRelatedTermHeader],
        ///   preferredTerms: [AtlasRelatedTermHeader],
        ///   preferredToTerms: [AtlasRelatedTermHeader],
        ///   replacedBy: [AtlasRelatedTermHeader],
        ///   replacementTerms: [AtlasRelatedTermHeader],
        ///   seeAlso: [AtlasRelatedTermHeader],
        ///   synonyms: [AtlasRelatedTermHeader],
        ///   translatedTerms: [AtlasRelatedTermHeader],
        ///   translationTerms: [AtlasRelatedTermHeader],
        ///   usage: string,
        ///   validValues: [AtlasRelatedTermHeader],
        ///   validValuesFor: [AtlasRelatedTermHeader]
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   abbreviation: string,
        ///   templateName: [AnyObject],
        ///   anchor: {
        ///     displayText: string,
        ///     glossaryGuid: string,
        ///     relationGuid: string
        ///   },
        ///   antonyms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ],
        ///   createTime: number,
        ///   createdBy: string,
        ///   updateTime: number,
        ///   updatedBy: string,
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;,
        ///   resources: [
        ///     {
        ///       displayName: string,
        ///       url: string
        ///     }
        ///   ],
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;,
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
        ///   assignedEntities: [
        ///     {
        ///       guid: string,
        ///       typeName: string,
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///       displayText: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       relationshipType: string,
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;,
        ///         typeName: string,
        ///         lastModifiedTS: string
        ///       },
        ///       relationshipGuid: string,
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ],
        ///   categories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       relationGuid: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;
        ///     }
        ///   ],
        ///   classifies: [AtlasRelatedTermHeader],
        ///   examples: [string],
        ///   isA: [AtlasRelatedTermHeader],
        ///   preferredTerms: [AtlasRelatedTermHeader],
        ///   preferredToTerms: [AtlasRelatedTermHeader],
        ///   replacedBy: [AtlasRelatedTermHeader],
        ///   replacementTerms: [AtlasRelatedTermHeader],
        ///   seeAlso: [AtlasRelatedTermHeader],
        ///   synonyms: [AtlasRelatedTermHeader],
        ///   translatedTerms: [AtlasRelatedTermHeader],
        ///   translationTerms: [AtlasRelatedTermHeader],
        ///   usage: string,
        ///   validValues: [AtlasRelatedTermHeader],
        ///   validValuesFor: [AtlasRelatedTermHeader]
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> CreateGlossaryTermsAsync(RequestContent content, bool? includeTermHierarchy = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateCreateGlossaryTermsRequest(content, includeTermHierarchy);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossaryTerms");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create glossary terms in bulk. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   abbreviation: string,
        ///   templateName: [AnyObject],
        ///   anchor: {
        ///     displayText: string,
        ///     glossaryGuid: string,
        ///     relationGuid: string
        ///   },
        ///   antonyms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ],
        ///   createTime: number,
        ///   createdBy: string,
        ///   updateTime: number,
        ///   updatedBy: string,
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;,
        ///   resources: [
        ///     {
        ///       displayName: string,
        ///       url: string
        ///     }
        ///   ],
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;,
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
        ///   assignedEntities: [
        ///     {
        ///       guid: string,
        ///       typeName: string,
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///       displayText: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       relationshipType: string,
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;,
        ///         typeName: string,
        ///         lastModifiedTS: string
        ///       },
        ///       relationshipGuid: string,
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ],
        ///   categories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       relationGuid: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;
        ///     }
        ///   ],
        ///   classifies: [AtlasRelatedTermHeader],
        ///   examples: [string],
        ///   isA: [AtlasRelatedTermHeader],
        ///   preferredTerms: [AtlasRelatedTermHeader],
        ///   preferredToTerms: [AtlasRelatedTermHeader],
        ///   replacedBy: [AtlasRelatedTermHeader],
        ///   replacementTerms: [AtlasRelatedTermHeader],
        ///   seeAlso: [AtlasRelatedTermHeader],
        ///   synonyms: [AtlasRelatedTermHeader],
        ///   translatedTerms: [AtlasRelatedTermHeader],
        ///   translationTerms: [AtlasRelatedTermHeader],
        ///   usage: string,
        ///   validValues: [AtlasRelatedTermHeader],
        ///   validValuesFor: [AtlasRelatedTermHeader]
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   abbreviation: string,
        ///   templateName: [AnyObject],
        ///   anchor: {
        ///     displayText: string,
        ///     glossaryGuid: string,
        ///     relationGuid: string
        ///   },
        ///   antonyms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ],
        ///   createTime: number,
        ///   createdBy: string,
        ///   updateTime: number,
        ///   updatedBy: string,
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;,
        ///   resources: [
        ///     {
        ///       displayName: string,
        ///       url: string
        ///     }
        ///   ],
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;,
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
        ///   assignedEntities: [
        ///     {
        ///       guid: string,
        ///       typeName: string,
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///       displayText: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       relationshipType: string,
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;,
        ///         typeName: string,
        ///         lastModifiedTS: string
        ///       },
        ///       relationshipGuid: string,
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ],
        ///   categories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       relationGuid: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;
        ///     }
        ///   ],
        ///   classifies: [AtlasRelatedTermHeader],
        ///   examples: [string],
        ///   isA: [AtlasRelatedTermHeader],
        ///   preferredTerms: [AtlasRelatedTermHeader],
        ///   preferredToTerms: [AtlasRelatedTermHeader],
        ///   replacedBy: [AtlasRelatedTermHeader],
        ///   replacementTerms: [AtlasRelatedTermHeader],
        ///   seeAlso: [AtlasRelatedTermHeader],
        ///   synonyms: [AtlasRelatedTermHeader],
        ///   translatedTerms: [AtlasRelatedTermHeader],
        ///   translationTerms: [AtlasRelatedTermHeader],
        ///   usage: string,
        ///   validValues: [AtlasRelatedTermHeader],
        ///   validValuesFor: [AtlasRelatedTermHeader]
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response CreateGlossaryTerms(RequestContent content, bool? includeTermHierarchy = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateCreateGlossaryTermsRequest(content, includeTermHierarchy);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossaryTerms");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateCreateGlossaryTermsRequest(RequestContent content, bool? includeTermHierarchy)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/glossary/terms", false);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        /// <summary> Get all related objects assigned with the specified term. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   guid: string,
        ///   typeName: string,
        ///   uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///   displayText: string,
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///   relationshipType: string,
        ///   relationshipAttributes: {
        ///     attributes: Dictionary&lt;string, AnyObject&gt;,
        ///     typeName: string,
        ///     lastModifiedTS: string
        ///   },
        ///   relationshipGuid: string,
        ///   relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetEntitiesAssignedWithTermAsync(string termGuid, int? limit = null, int? offset = null, string sort = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetEntitiesAssignedWithTermRequest(termGuid, limit, offset, sort);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetEntitiesAssignedWithTerm");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all related objects assigned with the specified term. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   guid: string,
        ///   typeName: string,
        ///   uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///   displayText: string,
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///   relationshipType: string,
        ///   relationshipAttributes: {
        ///     attributes: Dictionary&lt;string, AnyObject&gt;,
        ///     typeName: string,
        ///     lastModifiedTS: string
        ///   },
        ///   relationshipGuid: string,
        ///   relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetEntitiesAssignedWithTerm(string termGuid, int? limit = null, int? offset = null, string sort = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetEntitiesAssignedWithTermRequest(termGuid, limit, offset, sort);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetEntitiesAssignedWithTerm");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateGetEntitiesAssignedWithTermRequest(string termGuid, int? limit, int? offset, string sort)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/glossary/terms/", false);
            uri.AppendPath(termGuid, true);
            uri.AppendPath("/assignedEntities", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Assign the given term to the provided list of related objects. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   guid: string,
        ///   typeName: string,
        ///   uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///   displayText: string,
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///   relationshipType: string,
        ///   relationshipAttributes: {
        ///     attributes: Dictionary&lt;string, AnyObject&gt;,
        ///     typeName: string,
        ///     lastModifiedTS: string
        ///   },
        ///   relationshipGuid: string,
        ///   relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> AssignTermToEntitiesAsync(string termGuid, RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateAssignTermToEntitiesRequest(termGuid, content);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.AssignTermToEntities");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 204:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Assign the given term to the provided list of related objects. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   guid: string,
        ///   typeName: string,
        ///   uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///   displayText: string,
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///   relationshipType: string,
        ///   relationshipAttributes: {
        ///     attributes: Dictionary&lt;string, AnyObject&gt;,
        ///     typeName: string,
        ///     lastModifiedTS: string
        ///   },
        ///   relationshipGuid: string,
        ///   relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response AssignTermToEntities(string termGuid, RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateAssignTermToEntitiesRequest(termGuid, content);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.AssignTermToEntities");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 204:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateAssignTermToEntitiesRequest(string termGuid, RequestContent content)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/glossary/terms/", false);
            uri.AppendPath(termGuid, true);
            uri.AppendPath("/assignedEntities", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        /// <summary> Delete the term assignment for the given list of related objects. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   guid: string,
        ///   typeName: string,
        ///   uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///   displayText: string,
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///   relationshipType: string,
        ///   relationshipAttributes: {
        ///     attributes: Dictionary&lt;string, AnyObject&gt;,
        ///     typeName: string,
        ///     lastModifiedTS: string
        ///   },
        ///   relationshipGuid: string,
        ///   relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> RemoveTermAssignmentFromEntitiesAsync(string termGuid, RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateRemoveTermAssignmentFromEntitiesRequest(termGuid, content);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.RemoveTermAssignmentFromEntities");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 204:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete the term assignment for the given list of related objects. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   guid: string,
        ///   typeName: string,
        ///   uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///   displayText: string,
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///   relationshipType: string,
        ///   relationshipAttributes: {
        ///     attributes: Dictionary&lt;string, AnyObject&gt;,
        ///     typeName: string,
        ///     lastModifiedTS: string
        ///   },
        ///   relationshipGuid: string,
        ///   relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response RemoveTermAssignmentFromEntities(string termGuid, RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateRemoveTermAssignmentFromEntitiesRequest(termGuid, content);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.RemoveTermAssignmentFromEntities");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 204:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateRemoveTermAssignmentFromEntitiesRequest(string termGuid, RequestContent content)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/glossary/terms/", false);
            uri.AppendPath(termGuid, true);
            uri.AppendPath("/assignedEntities", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        /// <summary> Delete the term assignment for the given list of related objects. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   guid: string,
        ///   typeName: string,
        ///   uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///   displayText: string,
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///   relationshipType: string,
        ///   relationshipAttributes: {
        ///     attributes: Dictionary&lt;string, AnyObject&gt;,
        ///     typeName: string,
        ///     lastModifiedTS: string
        ///   },
        ///   relationshipGuid: string,
        ///   relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> DeleteTermAssignmentFromEntitiesAsync(string termGuid, RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateDeleteTermAssignmentFromEntitiesRequest(termGuid, content);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.DeleteTermAssignmentFromEntities");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 204:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete the term assignment for the given list of related objects. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   guid: string,
        ///   typeName: string,
        ///   uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///   displayText: string,
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///   relationshipType: string,
        ///   relationshipAttributes: {
        ///     attributes: Dictionary&lt;string, AnyObject&gt;,
        ///     typeName: string,
        ///     lastModifiedTS: string
        ///   },
        ///   relationshipGuid: string,
        ///   relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response DeleteTermAssignmentFromEntities(string termGuid, RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateDeleteTermAssignmentFromEntitiesRequest(termGuid, content);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.DeleteTermAssignmentFromEntities");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 204:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateDeleteTermAssignmentFromEntitiesRequest(string termGuid, RequestContent content)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/glossary/terms/", false);
            uri.AppendPath(termGuid, true);
            uri.AppendPath("/assignedEntities", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        /// <summary> Get all related terms for a specific term by its GUID. Limit, offset, and sort parameters are currently not being enabled and won&apos;t work even they are passed. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   description: string,
        ///   displayText: string,
        ///   expression: string,
        ///   relationGuid: string,
        ///   source: string,
        ///   status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///   steward: string,
        ///   termGuid: string
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetRelatedTermsAsync(string termGuid, int? limit = null, int? offset = null, string sort = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetRelatedTermsRequest(termGuid, limit, offset, sort);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetRelatedTerms");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all related terms for a specific term by its GUID. Limit, offset, and sort parameters are currently not being enabled and won&apos;t work even they are passed. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   description: string,
        ///   displayText: string,
        ///   expression: string,
        ///   relationGuid: string,
        ///   source: string,
        ///   status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///   steward: string,
        ///   termGuid: string
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetRelatedTerms(string termGuid, int? limit = null, int? offset = null, string sort = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetRelatedTermsRequest(termGuid, limit, offset, sort);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetRelatedTerms");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateGetRelatedTermsRequest(string termGuid, int? limit, int? offset, string sort)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/glossary/terms/", false);
            uri.AppendPath(termGuid, true);
            uri.AppendPath("/related", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get a specific Glossary by its GUID. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   categories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       parentCategoryGuid: string,
        ///       relationGuid: string
        ///     }
        ///   ],
        ///   language: string,
        ///   terms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ],
        ///   usage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetGlossaryAsync(string glossaryGuid, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetGlossaryRequest(glossaryGuid);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetGlossary");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a specific Glossary by its GUID. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   categories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       parentCategoryGuid: string,
        ///       relationGuid: string
        ///     }
        ///   ],
        ///   language: string,
        ///   terms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ],
        ///   usage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetGlossary(string glossaryGuid, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetGlossaryRequest(glossaryGuid);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetGlossary");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateGetGlossaryRequest(string glossaryGuid)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Update the given glossary. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   categories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       parentCategoryGuid: string,
        ///       relationGuid: string
        ///     }
        ///   ],
        ///   language: string,
        ///   terms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ],
        ///   usage: string
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   categories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       parentCategoryGuid: string,
        ///       relationGuid: string
        ///     }
        ///   ],
        ///   language: string,
        ///   terms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ],
        ///   usage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> UpdateGlossaryAsync(string glossaryGuid, RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateUpdateGlossaryRequest(glossaryGuid, content);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.UpdateGlossary");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the given glossary. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   categories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       parentCategoryGuid: string,
        ///       relationGuid: string
        ///     }
        ///   ],
        ///   language: string,
        ///   terms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ],
        ///   usage: string
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   categories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       parentCategoryGuid: string,
        ///       relationGuid: string
        ///     }
        ///   ],
        ///   language: string,
        ///   terms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ],
        ///   usage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response UpdateGlossary(string glossaryGuid, RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateUpdateGlossaryRequest(glossaryGuid, content);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.UpdateGlossary");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateUpdateGlossaryRequest(string glossaryGuid, RequestContent content)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        /// <summary> Delete a glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> DeleteGlossaryAsync(string glossaryGuid, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateDeleteGlossaryRequest(glossaryGuid);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.DeleteGlossary");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 204:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response DeleteGlossary(string glossaryGuid, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateDeleteGlossaryRequest(glossaryGuid);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.DeleteGlossary");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 204:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateDeleteGlossaryRequest(string glossaryGuid)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Get the categories belonging to a specific glossary. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   anchor: {
        ///     displayText: string,
        ///     glossaryGuid: string,
        ///     relationGuid: string
        ///   },
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       parentCategoryGuid: string,
        ///       relationGuid: string
        ///     }
        ///   ],
        ///   parentCategory: AtlasRelatedCategoryHeader,
        ///   terms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetGlossaryCategoriesAsync(string glossaryGuid, int? limit = null, int? offset = null, string sort = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetGlossaryCategoriesRequest(glossaryGuid, limit, offset, sort);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryCategories");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the categories belonging to a specific glossary. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   anchor: {
        ///     displayText: string,
        ///     glossaryGuid: string,
        ///     relationGuid: string
        ///   },
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       parentCategoryGuid: string,
        ///       relationGuid: string
        ///     }
        ///   ],
        ///   parentCategory: AtlasRelatedCategoryHeader,
        ///   terms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetGlossaryCategories(string glossaryGuid, int? limit = null, int? offset = null, string sort = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetGlossaryCategoriesRequest(glossaryGuid, limit, offset, sort);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryCategories");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateGetGlossaryCategoriesRequest(string glossaryGuid, int? limit, int? offset, string sort)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/categories", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get the category headers belonging to a specific glossary. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   categoryGuid: string,
        ///   description: string,
        ///   displayText: string,
        ///   parentCategoryGuid: string,
        ///   relationGuid: string
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetGlossaryCategoriesHeadersAsync(string glossaryGuid, int? limit = null, int? offset = null, string sort = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetGlossaryCategoriesHeadersRequest(glossaryGuid, limit, offset, sort);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryCategoriesHeaders");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the category headers belonging to a specific glossary. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   categoryGuid: string,
        ///   description: string,
        ///   displayText: string,
        ///   parentCategoryGuid: string,
        ///   relationGuid: string
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetGlossaryCategoriesHeaders(string glossaryGuid, int? limit = null, int? offset = null, string sort = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetGlossaryCategoriesHeadersRequest(glossaryGuid, limit, offset, sort);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryCategoriesHeaders");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateGetGlossaryCategoriesHeadersRequest(string glossaryGuid, int? limit, int? offset, string sort)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/categories/headers", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get a specific glossary with detailed information. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   categories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       parentCategoryGuid: string,
        ///       relationGuid: string
        ///     }
        ///   ],
        ///   language: string,
        ///   terms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ],
        ///   usage: string,
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;,
        ///   termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetDetailedGlossaryAsync(string glossaryGuid, bool? includeTermHierarchy = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetDetailedGlossaryRequest(glossaryGuid, includeTermHierarchy);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetDetailedGlossary");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a specific glossary with detailed information. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   categories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       parentCategoryGuid: string,
        ///       relationGuid: string
        ///     }
        ///   ],
        ///   language: string,
        ///   terms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ],
        ///   usage: string,
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;,
        ///   termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetDetailedGlossary(string glossaryGuid, bool? includeTermHierarchy = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetDetailedGlossaryRequest(glossaryGuid, includeTermHierarchy);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetDetailedGlossary");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateGetDetailedGlossaryRequest(string glossaryGuid, bool? includeTermHierarchy)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/detailed", false);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Update the glossary partially. Some properties such as qualifiedName are not allowed to be updated. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   categories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       parentCategoryGuid: string,
        ///       relationGuid: string
        ///     }
        ///   ],
        ///   language: string,
        ///   terms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ],
        ///   usage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> PartialUpdateGlossaryAsync(string glossaryGuid, RequestContent content, bool? includeTermHierarchy = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreatePartialUpdateGlossaryRequest(glossaryGuid, content, includeTermHierarchy);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.PartialUpdateGlossary");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the glossary partially. Some properties such as qualifiedName are not allowed to be updated. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   categories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       parentCategoryGuid: string,
        ///       relationGuid: string
        ///     }
        ///   ],
        ///   language: string,
        ///   terms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ],
        ///   usage: string
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response PartialUpdateGlossary(string glossaryGuid, RequestContent content, bool? includeTermHierarchy = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreatePartialUpdateGlossaryRequest(glossaryGuid, content, includeTermHierarchy);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.PartialUpdateGlossary");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreatePartialUpdateGlossaryRequest(string glossaryGuid, RequestContent content, bool? includeTermHierarchy)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/partial", false);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        /// <summary> Get terms belonging to a specific glossary. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   abbreviation: string,
        ///   templateName: [AnyObject],
        ///   anchor: {
        ///     displayText: string,
        ///     glossaryGuid: string,
        ///     relationGuid: string
        ///   },
        ///   antonyms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ],
        ///   createTime: number,
        ///   createdBy: string,
        ///   updateTime: number,
        ///   updatedBy: string,
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;,
        ///   resources: [
        ///     {
        ///       displayName: string,
        ///       url: string
        ///     }
        ///   ],
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;,
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
        ///   assignedEntities: [
        ///     {
        ///       guid: string,
        ///       typeName: string,
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///       displayText: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       relationshipType: string,
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;,
        ///         typeName: string,
        ///         lastModifiedTS: string
        ///       },
        ///       relationshipGuid: string,
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ],
        ///   categories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       relationGuid: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;
        ///     }
        ///   ],
        ///   classifies: [AtlasRelatedTermHeader],
        ///   examples: [string],
        ///   isA: [AtlasRelatedTermHeader],
        ///   preferredTerms: [AtlasRelatedTermHeader],
        ///   preferredToTerms: [AtlasRelatedTermHeader],
        ///   replacedBy: [AtlasRelatedTermHeader],
        ///   replacementTerms: [AtlasRelatedTermHeader],
        ///   seeAlso: [AtlasRelatedTermHeader],
        ///   synonyms: [AtlasRelatedTermHeader],
        ///   translatedTerms: [AtlasRelatedTermHeader],
        ///   translationTerms: [AtlasRelatedTermHeader],
        ///   usage: string,
        ///   validValues: [AtlasRelatedTermHeader],
        ///   validValuesFor: [AtlasRelatedTermHeader]
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetGlossaryTermsAsync(string glossaryGuid, bool? includeTermHierarchy = null, int? limit = null, int? offset = null, string sort = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetGlossaryTermsRequest(glossaryGuid, includeTermHierarchy, limit, offset, sort);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryTerms");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get terms belonging to a specific glossary. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   abbreviation: string,
        ///   templateName: [AnyObject],
        ///   anchor: {
        ///     displayText: string,
        ///     glossaryGuid: string,
        ///     relationGuid: string
        ///   },
        ///   antonyms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ],
        ///   createTime: number,
        ///   createdBy: string,
        ///   updateTime: number,
        ///   updatedBy: string,
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;,
        ///   resources: [
        ///     {
        ///       displayName: string,
        ///       url: string
        ///     }
        ///   ],
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;,
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
        ///   assignedEntities: [
        ///     {
        ///       guid: string,
        ///       typeName: string,
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///       displayText: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       relationshipType: string,
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;,
        ///         typeName: string,
        ///         lastModifiedTS: string
        ///       },
        ///       relationshipGuid: string,
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ],
        ///   categories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       relationGuid: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;
        ///     }
        ///   ],
        ///   classifies: [AtlasRelatedTermHeader],
        ///   examples: [string],
        ///   isA: [AtlasRelatedTermHeader],
        ///   preferredTerms: [AtlasRelatedTermHeader],
        ///   preferredToTerms: [AtlasRelatedTermHeader],
        ///   replacedBy: [AtlasRelatedTermHeader],
        ///   replacementTerms: [AtlasRelatedTermHeader],
        ///   seeAlso: [AtlasRelatedTermHeader],
        ///   synonyms: [AtlasRelatedTermHeader],
        ///   translatedTerms: [AtlasRelatedTermHeader],
        ///   translationTerms: [AtlasRelatedTermHeader],
        ///   usage: string,
        ///   validValues: [AtlasRelatedTermHeader],
        ///   validValuesFor: [AtlasRelatedTermHeader]
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetGlossaryTerms(string glossaryGuid, bool? includeTermHierarchy = null, int? limit = null, int? offset = null, string sort = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetGlossaryTermsRequest(glossaryGuid, includeTermHierarchy, limit, offset, sort);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryTerms");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateGetGlossaryTermsRequest(string glossaryGuid, bool? includeTermHierarchy, int? limit, int? offset, string sort)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/terms", false);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get term headers belonging to a specific glossary. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   description: string,
        ///   displayText: string,
        ///   expression: string,
        ///   relationGuid: string,
        ///   source: string,
        ///   status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///   steward: string,
        ///   termGuid: string
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetGlossaryTermHeadersAsync(string glossaryGuid, int? limit = null, int? offset = null, string sort = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetGlossaryTermHeadersRequest(glossaryGuid, limit, offset, sort);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryTermHeaders");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get term headers belonging to a specific glossary. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   description: string,
        ///   displayText: string,
        ///   expression: string,
        ///   relationGuid: string,
        ///   source: string,
        ///   status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///   steward: string,
        ///   termGuid: string
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetGlossaryTermHeaders(string glossaryGuid, int? limit = null, int? offset = null, string sort = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetGlossaryTermHeadersRequest(glossaryGuid, limit, offset, sort);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryTermHeaders");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateGetGlossaryTermHeadersRequest(string glossaryGuid, int? limit, int? offset, string sort)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/terms/headers", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Import Glossary Terms from local csv file. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   status: &quot;NotStarted&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Running&quot;,
        ///   createTime: string,
        ///   lastUpdateTime: string,
        ///   properties: {
        ///     importedTerms: string,
        ///     totalTermsDetected: string
        ///   },
        ///   error: {
        ///     errorCode: number,
        ///     errorMessage: string
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Operation<BinaryData>> ImportGlossaryTermsViaCsvAsync(string glossaryGuid, RequestContent content, bool? includeTermHierarchy = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateImportGlossaryTermsViaCsvRequest(glossaryGuid, content, includeTermHierarchy);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.ImportGlossaryTermsViaCsv");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 202:
                            return new LowLevelBinaryDataOperation(_clientDiagnostics, Pipeline, message.Request, message.Response, OperationFinalStateVia.AzureAsyncOperation, "PurviewGlossaries.ImportGlossaryTermsViaCsv");
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return new LowLevelBinaryDataOperation(_clientDiagnostics, Pipeline, message.Request, message.Response, OperationFinalStateVia.AzureAsyncOperation, "PurviewGlossaries.ImportGlossaryTermsViaCsv");
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Import Glossary Terms from local csv file. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   status: &quot;NotStarted&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Running&quot;,
        ///   createTime: string,
        ///   lastUpdateTime: string,
        ///   properties: {
        ///     importedTerms: string,
        ///     totalTermsDetected: string
        ///   },
        ///   error: {
        ///     errorCode: number,
        ///     errorMessage: string
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Operation<BinaryData> ImportGlossaryTermsViaCsv(string glossaryGuid, RequestContent content, bool? includeTermHierarchy = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateImportGlossaryTermsViaCsvRequest(glossaryGuid, content, includeTermHierarchy);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.ImportGlossaryTermsViaCsv");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 202:
                            return new LowLevelBinaryDataOperation(_clientDiagnostics, Pipeline, message.Request, message.Response, OperationFinalStateVia.AzureAsyncOperation, "PurviewGlossaries.ImportGlossaryTermsViaCsv");
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return new LowLevelBinaryDataOperation(_clientDiagnostics, Pipeline, message.Request, message.Response, OperationFinalStateVia.AzureAsyncOperation, "PurviewGlossaries.ImportGlossaryTermsViaCsv");
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateImportGlossaryTermsViaCsvRequest(string glossaryGuid, RequestContent content, bool? includeTermHierarchy)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/terms/import", false);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "multipart/form-data");
            request.Content = content;
            return message;
        }

        /// <summary> Import Glossary Terms from local csv file by glossaryName. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   status: &quot;NotStarted&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Running&quot;,
        ///   createTime: string,
        ///   lastUpdateTime: string,
        ///   properties: {
        ///     importedTerms: string,
        ///     totalTermsDetected: string
        ///   },
        ///   error: {
        ///     errorCode: number,
        ///     errorMessage: string
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="glossaryName"> The name of the glossary. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Operation<BinaryData>> ImportGlossaryTermsViaCsvByGlossaryNameAsync(string glossaryName, RequestContent content, bool? includeTermHierarchy = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateImportGlossaryTermsViaCsvByGlossaryNameRequest(glossaryName, content, includeTermHierarchy);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.ImportGlossaryTermsViaCsvByGlossaryName");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 202:
                            return new LowLevelBinaryDataOperation(_clientDiagnostics, Pipeline, message.Request, message.Response, OperationFinalStateVia.AzureAsyncOperation, "PurviewGlossaries.ImportGlossaryTermsViaCsvByGlossaryName");
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return new LowLevelBinaryDataOperation(_clientDiagnostics, Pipeline, message.Request, message.Response, OperationFinalStateVia.AzureAsyncOperation, "PurviewGlossaries.ImportGlossaryTermsViaCsvByGlossaryName");
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Import Glossary Terms from local csv file by glossaryName. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   status: &quot;NotStarted&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Running&quot;,
        ///   createTime: string,
        ///   lastUpdateTime: string,
        ///   properties: {
        ///     importedTerms: string,
        ///     totalTermsDetected: string
        ///   },
        ///   error: {
        ///     errorCode: number,
        ///     errorMessage: string
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="glossaryName"> The name of the glossary. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Operation<BinaryData> ImportGlossaryTermsViaCsvByGlossaryName(string glossaryName, RequestContent content, bool? includeTermHierarchy = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateImportGlossaryTermsViaCsvByGlossaryNameRequest(glossaryName, content, includeTermHierarchy);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.ImportGlossaryTermsViaCsvByGlossaryName");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 202:
                            return new LowLevelBinaryDataOperation(_clientDiagnostics, Pipeline, message.Request, message.Response, OperationFinalStateVia.AzureAsyncOperation, "PurviewGlossaries.ImportGlossaryTermsViaCsvByGlossaryName");
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return new LowLevelBinaryDataOperation(_clientDiagnostics, Pipeline, message.Request, message.Response, OperationFinalStateVia.AzureAsyncOperation, "PurviewGlossaries.ImportGlossaryTermsViaCsvByGlossaryName");
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateImportGlossaryTermsViaCsvByGlossaryNameRequest(string glossaryName, RequestContent content, bool? includeTermHierarchy)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/glossary/name/", false);
            uri.AppendPath(glossaryName, true);
            uri.AppendPath("/terms/import", false);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "multipart/form-data");
            request.Content = content;
            return message;
        }

        /// <summary> Get the status of import csv operation. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   status: &quot;NotStarted&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Running&quot;,
        ///   createTime: string,
        ///   lastUpdateTime: string,
        ///   properties: {
        ///     importedTerms: string,
        ///     totalTermsDetected: string
        ///   },
        ///   error: {
        ///     errorCode: number,
        ///     errorMessage: string
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="operationGuid"> The globally unique identifier for async operation/job. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetImportCsvOperationStatusAsync(string operationGuid, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetImportCsvOperationStatusRequest(operationGuid);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetImportCsvOperationStatus");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the status of import csv operation. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   status: &quot;NotStarted&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Running&quot;,
        ///   createTime: string,
        ///   lastUpdateTime: string,
        ///   properties: {
        ///     importedTerms: string,
        ///     totalTermsDetected: string
        ///   },
        ///   error: {
        ///     errorCode: number,
        ///     errorMessage: string
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="operationGuid"> The globally unique identifier for async operation/job. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetImportCsvOperationStatus(string operationGuid, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetImportCsvOperationStatusRequest(operationGuid);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetImportCsvOperationStatus");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateGetImportCsvOperationStatusRequest(string operationGuid)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/glossary/terms/import/", false);
            uri.AppendPath(operationGuid, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Export Glossary Terms as csv file. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> ExportGlossaryTermsAsCsvAsync(string glossaryGuid, RequestContent content, bool? includeTermHierarchy = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateExportGlossaryTermsAsCsvRequest(glossaryGuid, content, includeTermHierarchy);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.ExportGlossaryTermsAsCsv");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Export Glossary Terms as csv file. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response ExportGlossaryTermsAsCsv(string glossaryGuid, RequestContent content, bool? includeTermHierarchy = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateExportGlossaryTermsAsCsvRequest(glossaryGuid, content, includeTermHierarchy);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.ExportGlossaryTermsAsCsv");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateExportGlossaryTermsAsCsvRequest(string glossaryGuid, RequestContent content, bool? includeTermHierarchy)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/terms/export", false);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "text/csv");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        /// <summary> Get terms by glossary name. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   abbreviation: string,
        ///   templateName: [AnyObject],
        ///   anchor: {
        ///     displayText: string,
        ///     glossaryGuid: string,
        ///     relationGuid: string
        ///   },
        ///   antonyms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ],
        ///   createTime: number,
        ///   createdBy: string,
        ///   updateTime: number,
        ///   updatedBy: string,
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;,
        ///   resources: [
        ///     {
        ///       displayName: string,
        ///       url: string
        ///     }
        ///   ],
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;,
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
        ///   assignedEntities: [
        ///     {
        ///       guid: string,
        ///       typeName: string,
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///       displayText: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       relationshipType: string,
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;,
        ///         typeName: string,
        ///         lastModifiedTS: string
        ///       },
        ///       relationshipGuid: string,
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ],
        ///   categories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       relationGuid: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;
        ///     }
        ///   ],
        ///   classifies: [AtlasRelatedTermHeader],
        ///   examples: [string],
        ///   isA: [AtlasRelatedTermHeader],
        ///   preferredTerms: [AtlasRelatedTermHeader],
        ///   preferredToTerms: [AtlasRelatedTermHeader],
        ///   replacedBy: [AtlasRelatedTermHeader],
        ///   replacementTerms: [AtlasRelatedTermHeader],
        ///   seeAlso: [AtlasRelatedTermHeader],
        ///   synonyms: [AtlasRelatedTermHeader],
        ///   translatedTerms: [AtlasRelatedTermHeader],
        ///   translationTerms: [AtlasRelatedTermHeader],
        ///   usage: string,
        ///   validValues: [AtlasRelatedTermHeader],
        ///   validValuesFor: [AtlasRelatedTermHeader]
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="glossaryName"> The name of the glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetTermsByGlossaryNameAsync(string glossaryName, int? limit = null, int? offset = null, bool? includeTermHierarchy = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetTermsByGlossaryNameRequest(glossaryName, limit, offset, includeTermHierarchy);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetTermsByGlossaryName");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get terms by glossary name. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;,
        ///       typeName: string,
        ///       lastModifiedTS: string,
        ///       entityGuid: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       removePropagationsOnEntityDelete: boolean,
        ///       validityPeriods: [
        ///         {
        ///           endTime: string,
        ///           startTime: string,
        ///           timeZone: string
        ///         }
        ///       ],
        ///       source: string,
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   longDescription: string,
        ///   name: string,
        ///   qualifiedName: string,
        ///   shortDescription: string,
        ///   lastModifiedTS: string,
        ///   guid: string,
        ///   abbreviation: string,
        ///   templateName: [AnyObject],
        ///   anchor: {
        ///     displayText: string,
        ///     glossaryGuid: string,
        ///     relationGuid: string
        ///   },
        ///   antonyms: [
        ///     {
        ///       description: string,
        ///       displayText: string,
        ///       expression: string,
        ///       relationGuid: string,
        ///       source: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;,
        ///       steward: string,
        ///       termGuid: string
        ///     }
        ///   ],
        ///   createTime: number,
        ///   createdBy: string,
        ///   updateTime: number,
        ///   updatedBy: string,
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;,
        ///   resources: [
        ///     {
        ///       displayName: string,
        ///       url: string
        ///     }
        ///   ],
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;,
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
        ///   assignedEntities: [
        ///     {
        ///       guid: string,
        ///       typeName: string,
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
        ///       displayText: string,
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;,
        ///       relationshipType: string,
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;,
        ///         typeName: string,
        ///         lastModifiedTS: string
        ///       },
        ///       relationshipGuid: string,
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;
        ///     }
        ///   ],
        ///   categories: [
        ///     {
        ///       categoryGuid: string,
        ///       description: string,
        ///       displayText: string,
        ///       relationGuid: string,
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;
        ///     }
        ///   ],
        ///   classifies: [AtlasRelatedTermHeader],
        ///   examples: [string],
        ///   isA: [AtlasRelatedTermHeader],
        ///   preferredTerms: [AtlasRelatedTermHeader],
        ///   preferredToTerms: [AtlasRelatedTermHeader],
        ///   replacedBy: [AtlasRelatedTermHeader],
        ///   replacementTerms: [AtlasRelatedTermHeader],
        ///   seeAlso: [AtlasRelatedTermHeader],
        ///   synonyms: [AtlasRelatedTermHeader],
        ///   translatedTerms: [AtlasRelatedTermHeader],
        ///   translationTerms: [AtlasRelatedTermHeader],
        ///   usage: string,
        ///   validValues: [AtlasRelatedTermHeader],
        ///   validValuesFor: [AtlasRelatedTermHeader]
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="glossaryName"> The name of the glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetTermsByGlossaryName(string glossaryName, int? limit = null, int? offset = null, bool? includeTermHierarchy = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetTermsByGlossaryNameRequest(glossaryName, limit, offset, includeTermHierarchy);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewGlossaries.GetTermsByGlossaryName");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateGetTermsByGlossaryNameRequest(string glossaryName, int? limit, int? offset, bool? includeTermHierarchy)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/api", false);
            uri.AppendPath("/glossary/name/", false);
            uri.AppendPath(glossaryName, true);
            uri.AppendPath("/terms", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }
    }
}
